
@{
    ViewData["Title"] = "Categories";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*@model IEnumerable<coreTutorials.Models.Category>*@

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Category Manager</h2>

@Html.AntiForgeryToken()
<div class="control-section">
    <div class="content-wrapper">
        <button type="button" class="btn btn-success" tabindex="1" id='add' >Add</button>
        <div id="Grid">

        </div>
        <div class="modal" tabindex="-1" role="dialog" id="viewModal" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Product</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <input class="form-control" id="CategoryId" name="CategoryId" data-bind="value: CategoryId" type="hidden" />
                            </div>
                            <div class="form-group">
                                <label class="form-control" for="ProductName"> Category Name:</label>
                                <input class="form-control" id="ProductName" name="Name" data-bind="textInput: Name" />
                            </div>

                        </form>
                    </div>
                    <div class="modal-footer">
                        <button data-bind="visible:(action()==0)" id="addCate" class="btn btn-success">ADD</button>
                        <button data-bind="visible:(action()==1)" id="updateCate" class="btn btn-primary" click="updateProduct()">save</button>
                        <button data-bind="visible:(action()==1)" id="deleteCate" class="btn btn-danger">Remove</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script type="text/javascript">
    //#region variable define
    ej.grids.Grid.Inject(ej.grids.Selection, ej.grids.VirtualScroll, ej.grids.Sort, ej.grids.Filter, ej.grids.Edit, ej.grids.Toolbar);

    var option = {};
    var modal_Cate = {};
    var dd_source = {};

    var modalView = {
        action: ko.observable(0),
        CategoryId: ko.observable(""),
        Name: ko.observable("")
    }
    ko.applyBindings(modalView);
    //#endregion


    //#region util function
    //get xsrf token
    function getToken() {
        return document.getElementsByName('_xsrf_token')[0].getAttribute('value');
    }
    //parse Object to urlencoded params
    function serialize(data) {
        return Object.keys(data).map(function (k) {
            return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])
        }).join('&');
    };


    //#endregion



    //#region grids
    //#region modal
    //event of ddl in modal
    function ddl_modal_select(args) {
        if (!args.itemData || (typeof args.itemData == typeof 'undefined')) {
            return;
        }
    }
    $('body').on('click', '#add', function () {
        modalView.action(0);
        $('#viewModal').modal('show');
    });
    $('body').on('click', '#addCate', function () {
        modal_Cate.CategoryId = "";
        modal_Cate.Name = modalView.Name();
        modal_Cate['_xsrf_token'] = getToken();
        $.ajax({
            type: 'POST',
            url: '/api/Categories/add',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(modal_Cate),
            success: function (res) {
                debugger;
                //var url = '/api/Categories/' + ddlModal.value;
                //grid.dataSource.dataSource.url = url;
                grid.refresh();
                $('#viewModal').modal('hide');
            }
        }).done();
    });
    $('body').on('click', '#updateCate', function () {
        modal_Cate.CategoryId = modalView.CategoryId();
        modal_Cate.Name = modalView.Name();
        modal_Cate['_xsrf_token'] = getToken();
        $.ajax({
            type: 'POST',
            url: '/api/Categories/update',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(modal_Cate)
        }).done(function (res) {
            var url = '/api/Categories/' + ddlModal.value;
            grid.dataSource.dataSource.url = url;
            grid.refresh();
            $('#viewModal').modal('hide');
        });
    });
    $('body').on('click', '#deleteCate', function () {
        var modal = $('#viewModal');
        modal_Cate['_xsrf_token'] = getToken();
        $.ajax({
            type: 'POST',
            url: '/api/Categories/delete/' + modal.find("#CategoryId").val(),
            data: serialize(modal_Cate),
        }).done(function (res) {
            console.log(res);
            //reload grid data
            var url = '/api/Categories/' + ddlModal.value;
            grid.dataSource.dataSource.url = url;
            grid.refresh();
            modal.modal('hide');
            ko.cleanNode($('#viewModal'));
        });
    });


    //view action
    function viewClick(args) {
        var rowObj = grid.getRowObjectFromUID(args.target.closest('.e-row').getAttribute('data-uid'));
        var data = rowObj.data;
        //ddlModal.value = data.categoryId;
        modalView.CategoryId(data.CategoryId)
        modalView.Name(data.name);
        modalView.action(1);
        $('#viewModal').modal('show');

    }
    //#endregion



    //custom Adaptor
    class customAdaptor extends ej.data.UrlAdaptor {

        processQuery(dm, query, hierarchyFilters) {
            var obj = new ej.data.UrlAdaptor().processQuery(dm, query, hierarchyFilters),
                data = ej.data.DataUtil.parse.parseJson(obj.data),
                result = {
                };
            if (data.param) for (var i = 0; i < data.param.length; i++) {
                var param = data.param[i], key = Object.keys(param)[0];
                result[key] = param[key];
            }
            result.value = data
            var token = {};
            // addAntiForgeryToken(result);
            token._xsrf_token = getToken();
            var send = Object.keys(token).map(function (k) {
                return encodeURIComponent(k) + '=' + encodeURIComponent(token[k])
            }).join('&');
            // debugger;
            return {
                type: "POST",
                data: send,
                url: dm.dataSource.url,
                pvtData: dm.adaptor.pvt,
                dataType: 'json',
                contentType: "application/x-www-form-urlencoded; charset=UTF-8"
            }
        }
        processResponse(data, ds, query, xhr, request, changes) {
            request.data = JSON.stringify(data);
            console.log(data);
            return ej.data.UrlAdaptor.prototype.processResponse.call(this, data, ds, query, xhr, request, changes)
        }
    }
    var data_source = new ej.data.DataManager({
        url: '/api/Categories',
        requestType: "POST",
        adaptor: new customAdaptor()
    });
    var grid = new ej.grids.Grid({
        dataSource: data_source,
        // toolbar: ['Add', 'Edit', 'Delete', 'Update', 'Cancel'],
        //actionBegin: _actionBegin,
        gridLines: 'Both',
        allowPaging: true,
        allowSelection: true,
        allowFiltering: true,
        allowSorting: true,
        ////editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true },
        editSettings: { allowEditing: false, allowAdding: false, allowDeleting: false },
        enableVirtualization: true,
        filterSettings: { type: 'Menu' },
        selectionSettings: { persistSelection: true, type: 'Multiple', checkboxOnly: false },
        enableHover: true,
        height: 480,
        columns: [
            {
                field: 'categoryId', visible: false, headerText: 'Category ID', isPrimaryKey: true, width: '130'
            },
            {
                field: 'name', headerText: 'Name', width: '200', clipMode: 'EllipsisWithTooltip',
                filter: { type: 'CheckBox' }
            }, {
                headerText: 'Commands', width: 120, commands: [{
                    buttonOption: { content: 'View', cssClass: 'e-primary', click: viewClick }
                }]
            }
        ],
        ClientSideEvents: function (args) {
            console.log(args);
        }

    });

    grid.appendTo("#Grid");

    //#endregion
</script>