@model IEnumerable<coreTutorials.Models.Users>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Index</h2>
@Html.AntiForgeryToken()
<div class="control-section">
    <div class="content-wrapper">
        <div id="Grid">
        </div>
    </div>

</div>
<script type="text/javascript">

    function getToken() {
        return document.getElementsByName('_xsrf_token')[0].getAttribute('value');
    }
    ej.grids.Grid.Inject(ej.grids.Selection, ej.grids.VirtualScroll, ej.grids.Sort, ej.grids.Filter, ej.grids.Edit, ej.grids.Toolbar);
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }
    var xsrf_token = getCookie("X-XSRF-TOKEN");
    var table = document.getElementById('datatable');

    //custom adaptor
    class customAdaptor extends ej.data.UrlAdaptor {

        processQuery(dm, query, hierarchyFilters) {
            var obj = new ej.data.UrlAdaptor().processQuery(dm, query, hierarchyFilters),
                data = ej.data.DataUtil.parse.parseJson(obj.data),
                result = {
                };
            if (data.param) for (var i = 0; i < data.param.length; i++) {
                var param = data.param[i], key = Object.keys(param)[0];
                result[key] = param[key];
            }
            result.value = data
            var token = {};
            // addAntiForgeryToken(result);
            token._xsrf_token = getToken();
            var send = Object.keys(token).map(function (k) {
                return encodeURIComponent(k) + '=' + encodeURIComponent(token[k])
            }).join('&');
            return {
                type: "POST",
                data: send,
                url: dm.dataSource.url,
                pvtData: dm.adaptor.pvt,
                dataType: 'json',
                contentType: "application/x-www-form-urlencoded; charset=UTF-8"
            }
        }
        processResponse(data, ds, query, xhr, request, changes) {
            request.data = JSON.stringify(data);
            console.log(data);
            return ej.data.UrlAdaptor.prototype.processResponse.call(this, data, ds, query, xhr, request, changes)
        }
    }

    var data_source = new ej.data.DataManager({
        url: '/api/Users',
        insertUrl: "api/Users",
        removeUrl: "api/Users/{UserId}",
        requestType: "POST",
        adaptor: new customAdaptor()
    });

    var grid = new ej.grids.Grid({
        dataSource: data_source,
        toolbar: ['Add', 'Edit', 'Delete', 'Update', 'Cancel'],
        //actionBegin: _actionBegin,
        gridLines: 'Both',
        allowPaging: true,
        allowSelection: true,
        allowFiltering: true,
        allowSorting: true,
        editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true },
        enableVirtualization: true,
        filterSettings: { type: 'Menu' },
        selectionSettings: { persistSelection: true, type: 'Multiple', checkboxOnly: true },
        enableHover: false,
        height: 600,
        rowHeight: 38,
        columns: [
            {
                type: 'checkbox', allowFiltering: false, allowSorting: false, width: '60'
            },
            {
                field: 'UserId', visible: false, headerText: 'User ID', isPrimaryKey: true, width: '130'
            },
            {
                field: 'Username', headerText: 'UserName', width: '200', clipMode: 'EllipsisWithTooltip',
                filter: { type: 'CheckBox' }
            },
            {
                field: 'FirstName', headerText: 'First Name', width: '200', clipMode: 'EllipsisWithTooltip',
                filter: { type: 'CheckBox' }
            },
            {
                field: 'LastName', headerText: 'Last Name', width: '200', clipMode: 'EllipsisWithTooltip',
                filter: { type: 'CheckBox' }
            },
            {
                headerText: 'Active', width: '200', clipMode: 'EllipsisWithTooltip',
                template: '${FirstName} ${LastName}'
            },
            {
                field: 'LastName', headerText: 'Last Name', visible: false, width: '200', clipMode: 'EllipsisWithTooltip',
                filter: { type: 'CheckBox' }
            }


        ],
        ClientSideEvents: function (args) {
            console.log(args);
        }

    });

    grid.appendTo("#Grid");
</script>