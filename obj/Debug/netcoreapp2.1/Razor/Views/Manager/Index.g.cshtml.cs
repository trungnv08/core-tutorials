#pragma checksum "D:\trung-sources\project\core-tutorials\core-tutorials\Views\Manager\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fee08defe1922d52e9dac53418ea9b15c5794984"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Manager_Index), @"mvc.1.0.view", @"/Views/Manager/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Manager/Index.cshtml", typeof(AspNetCore.Views_Manager_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\trung-sources\project\core-tutorials\core-tutorials\Views\_ViewImports.cshtml"
using coreTutorials;

#line default
#line hidden
#line 2 "D:\trung-sources\project\core-tutorials\core-tutorials\Views\_ViewImports.cshtml"
using coreTutorials.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fee08defe1922d52e9dac53418ea9b15c5794984", @"/Views/Manager/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ffbf74a590ef2f5dc4acde86cc8b91c19a786c38", @"/Views/_ViewImports.cshtml")]
    public class Views_Manager_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "D:\trung-sources\project\core-tutorials\core-tutorials\Views\Manager\Index.cshtml"
  
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(375, 26, true);
            WriteLiteral("<h2>Manage Centre</h2>\r\n\r\n");
            EndContext();
            BeginContext(402, 23, false);
#line 14 "D:\trung-sources\project\core-tutorials\core-tutorials\Views\Manager\Index.cshtml"
Write(Html.AntiForgeryToken());

#line default
#line hidden
            EndContext();
            BeginContext(425, 777, true);
            WriteLiteral(@"
<div class=""control-section"">
    <div class=""content-wrapper"">
        <input type=""text"" tabindex=""1"" id='ddlelement' />
        <div id=""Grid"">

        </div>
        <div class=""modal"" tabindex=""-1"" role=""dialog"" id=""viewModal"" aria-hidden=""true"">
            <div class=""modal-dialog"" role=""document"">
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <h5 class=""modal-title"">Product</h5>
                        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                            <span aria-hidden=""true"">&times;</span>
                        </button>
                    </div>
                    <div class=""modal-body"">
                        ");
            EndContext();
            BeginContext(1202, 755, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f6b9a0aa53c14663a70a480267dc4670", async() => {
                BeginContext(1208, 742, true);
                WriteLiteral(@"
                            <div class=""form-group"">
                                <input class=""form-control"" id=""ProductId"" name=""ProductId"" data-bind=""value: ProductId"" type=""hidden"" />
                            </div>
                            <div class=""form-group"">
                                <label class=""form-control"" for=""ProductName""> Product Name:</label>
                                <input class=""form-control"" id=""ProductName"" name=""Name"" data-bind=""textInput: Name"" />
                            </div>
                            <div class=""form-group"">
                                <input type=""text"" tabindex=""1"" id='ddlModal' />
                            </div>

                        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1957, 78, true);
            WriteLiteral("\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n");
            EndContext();
            BeginContext(2127, 9481, true);
            WriteLiteral(@"                        <button id=""updateProduct"" class=""btn btn-primary"" click=""updateProduct()"">save</button>
                        <button id=""deleteProduct"" class=""btn btn-danger"">Remove</button>
                        <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<script type=""text/javascript"">
    //#region variable define
    ej.grids.Grid.Inject(ej.grids.Selection, ej.grids.VirtualScroll, ej.grids.Sort, ej.grids.Filter, ej.grids.Edit, ej.grids.Toolbar);

    var option = {};
    var modal_Cate = {};
    var dd_source = {};
    //var data_source = {};
    var ddlModal = new ej.dropdowns.DropDownList({
        //bind the data manager instance to dataSource property
        dataSource: dd_source,
        //map the appropriate columns to fields property
        fields: { text: 'name', value: 'categoryId' },
        //set the placeholder t");
            WriteLiteral(@"o DropDownList input
        placeholder: ""Select an Category"",
        //sort the resulted items
        sortOrder: 'Ascending',
    });




    //add first
    ddlModal.appendTo(""#ddlModal"");
    var modalView = {
        ProductId: ko.observable(""""),
        Name: ko.observable("""")
    }
    ko.applyBindings(modalView);
    //#endregion


    //#region util function
    //get xsrf token
    function getToken() {
        return document.getElementsByName('_xsrf_token')[0].getAttribute('value');
    }
    //parse Object to urlencoded params
    function serialize(data) {
        return Object.keys(data).map(function (k) {
            return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])
        }).join('&');
    };


    //#endregion



    //#region binding data to dropdown-list
    //get dropdown-list data using ajax. store this using for dialog update

    $.ajax({
        type: 'POST',
        url: '/api/Categories',
        data: serialize({ _xsrf_tok");
            WriteLiteral(@"en: getToken() })
    }).done(function (res) {
        dd_source = res['result'];

        ddlObject.dataSource = dd_source;
        ddlModal.dataSource = dd_source;

    });

    var ddlObject = new ej.dropdowns.DropDownList({
        //bind the data manager instance to dataSource property
        dataSource: dd_source,
        //map the appropriate columns to fields property
        fields: { text: 'name', value: 'categoryId' },
        //set the placeholder to DropDownList input
        placeholder: ""Select an Category"",
        //sort the resulted items
        sortOrder: 'Ascending',
        //event select ddl
        change: ddl_change_listener
    });

    //render the component
    ddlObject.appendTo('#ddlelement');

    //change event listener of dropdown list
    function ddl_change_listener(args) {
        if (!args.itemData || (typeof args.itemData == typeof 'undefined')) {
            return;
        }
        var selected = args.itemData['categoryId'];
        var ");
            WriteLiteral(@"url = '/api/Products/' + selected;
        grid.dataSource.dataSource.url = url;
        grid.refresh();
    }

    //#endregion





    //#region grids
    //#region modal
    //event of ddl in modal
    function ddl_modal_select(args) {
        if (!args.itemData || (typeof args.itemData == typeof 'undefined')) {
            return;
        }
        //modal_product.CategoryId = args.itemData['categoryId'];
    }

    $('body').on('click', '#updateProduct', function () {
        //var modal = $('#viewModal');
        //modal_product.ProductId = modal.find(""#ProductId"").val();
        //modal_product.Name = modal.find(""#ProductName"").val();
        modal_Cate.ProductId = modalView.ProductId();
        modal_Cate.Name = modalView.Name();
        modal_Cate.CategoryId = ddlModal.value;
        modal_Cate['_xsrf_token'] = getToken();
        $.ajax({
            type: 'POST',
            url: '/api/Products/update',
            // data: serialize(modal_product),
            dat");
            WriteLiteral(@"aType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(modal_Cate)
        }).done(function (res) {
            var url = '/api/Products/' + ddlModal.value;
            grid.dataSource.dataSource.url = url;
            grid.refresh();
            $('#viewModal').modal('hide');
        });
    });
    $('body').on('click', '#deleteProduct', function () {
        var modal = $('#viewModal');
        modal_Cate['_xsrf_token'] = getToken();
        $.ajax({
            type: 'POST',
            url: '/api/Products/delete/' + modal.find(""#ProductId"").val(),
            data: serialize(modal_Cate),
        }).done(function (res) {
            console.log(res);
            //reload grid data
            var url = '/api/Products/' + ddlModal.value;
            grid.dataSource.dataSource.url = url;
            grid.refresh();
            modal.modal('hide');
            ko.cleanNode($('#viewModal'));
        });
    });

    //ko
    function setData(a");
            WriteLiteral(@"rgs) {
        this.ProductId = args.productId;
        this.CategoryId = args.categoryId;
        this.Name = args.name;
    }

    //view action
    function viewClick(args) {
        var rowObj = grid.getRowObjectFromUID(args.target.closest('.e-row').getAttribute('data-uid'));
        var data = rowObj.data;
        ddlModal.value = data.categoryId;
        modalView.ProductId(data.productId)
        modalView.Name(data.name);
        //$('#ProductId').val(data.productId);
        //$('#ProductName').val(data.name);
        $('#viewModal').modal('show');

        //ko.applyBindings(setData(data));
        //console.log(data);
    }
    //#endregion



    //custom Adaptor
    class customAdaptor extends ej.data.UrlAdaptor {

        processQuery(dm, query, hierarchyFilters) {
            var obj = new ej.data.UrlAdaptor().processQuery(dm, query, hierarchyFilters),
                data = ej.data.DataUtil.parse.parseJson(obj.data),
                result = {
                };");
            WriteLiteral(@"
            if (data.param) for (var i = 0; i < data.param.length; i++) {
                var param = data.param[i], key = Object.keys(param)[0];
                result[key] = param[key];
            }
            result.value = data
            var token = {};
            // addAntiForgeryToken(result);
            token._xsrf_token = getToken();
            var send = Object.keys(token).map(function (k) {
                return encodeURIComponent(k) + '=' + encodeURIComponent(token[k])
            }).join('&');
           // debugger;
            return {
                type: ""POST"",
                data: send,
                url: dm.dataSource.url,
                pvtData: dm.adaptor.pvt,
                dataType: 'json',
                contentType: ""application/x-www-form-urlencoded; charset=UTF-8""
            }
        }
        processResponse(data, ds, query, xhr, request, changes) {
            request.data = JSON.stringify(data);
            console.log(data);
            ");
            WriteLiteral(@"return ej.data.UrlAdaptor.prototype.processResponse.call(this, data, ds, query, xhr, request, changes)
        }
    }
    var data_source = new ej.data.DataManager({
        url: 'api/Products/0',
        requestType: ""POST"",
        adaptor: new customAdaptor()
    });
    var grid = new ej.grids.Grid({
        dataSource: data_source,
        // toolbar: ['Add', 'Edit', 'Delete', 'Update', 'Cancel'],
        //actionBegin: _actionBegin,
        gridLines: 'Both',
        allowPaging: true,
        allowSelection: true,
        allowFiltering: true,
        allowSorting: true,
        ////editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true },
        editSettings: { allowEditing: false, allowAdding: false, allowDeleting: false },
        enableVirtualization: true,
        filterSettings: { type: 'Menu' },
        selectionSettings: { persistSelection: true, type: 'Multiple', checkboxOnly: false },
        enableHover: true,
        height: 480,
        //rowHe");
            WriteLiteral(@"ight: 38,
        //load: () => {
        //    var rowHeight = grid.getRowHeight();  //height of the each row
        //    var gridHeight = grid.height;
        //    var pageSize = grid.pageSettings.pageSize;   //initial page size
        //    var pageResize = (gridHeight - (pageSize * rowHeight)) / rowHeight; //new page size is obtained here
        //    grid.pageSettings.pageSize = pageSize + Math.round(pageResize);
        //},
        columns: [
            //{
            //    type: 'checkbox', allowFiltering: false, allowSorting: false, width: '60'
            //},
            {
                field: 'productId', visible: false, headerText: 'Product ID', isPrimaryKey: true, width: '130'
            },
            {
                field: 'name', headerText: 'Name', width: '200', clipMode: 'EllipsisWithTooltip',
                filter: { type: 'CheckBox' }
            }, {
                headerText: 'Commands', width: 120, commands: [{
                    buttonOption: { conte");
            WriteLiteral(@"nt: 'View', cssClass: 'e-primary', click: viewClick }
                }]
            }
        ],
        ClientSideEvents: function (args) {
            console.log(args);
        }

    });

    grid.appendTo(""#Grid"");

    //#endregion
</script>

");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
