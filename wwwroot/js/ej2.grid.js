var ej = function(exports) {
    "use strict";
    function createInstance(classFunction, params) {
        var arrayParam = params;
        return arrayParam.unshift(void 0), new (Function.prototype.bind.apply(classFunction, arrayParam))();
    }
    function setImmediate(handler) {
        var unbind, num = new Uint16Array(5);
        (window.msCrypto || window.crypto).getRandomValues(num);
        var secret = "ej2" + function(num) {
            for (var ret = "", i = 0; i < 5; i++) ret += (i ? "," : "") + num[i];
            return ret;
        }(num), messageHandler = function(event) {
            event.source === window && "string" == typeof event.data && event.data.length <= 32 && event.data === secret && (handler(), 
            unbind());
        };
        return window.addEventListener("message", messageHandler, !1), window.postMessage(secret, "*"), 
        unbind = function() {
            window.removeEventListener("message", messageHandler), handler = messageHandler = secret = void 0;
        };
    }
    function getValue(nameSpace, obj) {
        for (var value = obj, splits = nameSpace.replace(/\[/g, ".").replace(/\]/g, "").split("."), i = 0; i < splits.length && !isNullOrUndefined(value); i++) value = value[splits[i]];
        return value;
    }
    function setValue(nameSpace, value, obj) {
        var i, key, keys = nameSpace.replace(/\[/g, ".").replace(/\]/g, "").split("."), start = obj || {}, fromObj = start, length = keys.length;
        for (i = 0; i < length; i++) key = keys[i], i + 1 === length ? fromObj[key] = void 0 === value ? {} : value : isNullOrUndefined(fromObj[key]) && (fromObj[key] = {}), 
        fromObj = fromObj[key];
        return start;
    }
    function deleteObject(obj, key) {
        delete obj[key];
    }
    function isObject$1(obj) {
        return !isNullOrUndefined(obj) && obj.constructor === {}.constructor;
    }
    function getEnumValue(enumObject, enumValue) {
        return enumObject[enumValue];
    }
    function merge(source, destination) {
        if (!isNullOrUndefined(destination)) for (var temrObj = source, tempProp = destination, _i = 0, keys_1 = Object.keys(destination); _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            isNullOrUndefined(temrObj.deepMerge) || -1 === temrObj.deepMerge.indexOf(key) || !isObject$1(tempProp[key]) && !Array.isArray(tempProp[key]) ? temrObj[key] = tempProp[key] : extend(temrObj[key], temrObj[key], tempProp[key], !0);
        }
    }
    function extend(copied, first, second, deep) {
        var result = copied || {}, length = arguments.length;
        deep && (length -= 1);
        for (var _loop_1 = function(i) {
            if (!arguments_1[i]) return "continue";
            var obj1 = arguments_1[i];
            Object.keys(obj1).forEach(function(key) {
                var clone, src = result[key], copy = obj1[key];
                deep && (isObject$1(copy) || Array.isArray(copy)) ? isObject$1(copy) ? (clone = src || {}, 
                result[key] = extend({}, clone, copy, deep)) : (clone = src || [], result[key] = extend([], clone, copy, deep)) : result[key] = copy;
            });
        }, arguments_1 = arguments, i = 1; i < length; i++) _loop_1(i);
        return result;
    }
    function isNullOrUndefined(value) {
        return void 0 === value || null === value;
    }
    function isUndefined(value) {
        return void 0 === value;
    }
    function getUniqueID(definedName) {
        return definedName + "_" + uid++;
    }
    function debounce(eventFunction, delay) {
        var out;
        return function() {
            var _this = this, args = arguments;
            clearTimeout(out), out = setTimeout(function() {
                return out = null, eventFunction.apply(_this, args);
            }, delay);
        };
    }
    function compareElementParent(child, parent) {
        var node = child;
        return node === parent || !(node === document || !node) && compareElementParent(node.parentNode, parent);
    }
    function throwError(message) {
        try {
            throw new Error(message);
        } catch (e) {
            throw e.message + "\n" + e.stack;
        }
    }
    function print(element, printWindow) {
        var div = document.createElement("div"), links = [].slice.call(document.getElementsByTagName("head")[0].querySelectorAll("link, style")), reference = "";
        isNullOrUndefined(printWindow) && (printWindow = window.open("", "print", "height=452,width=1024,tabbar=no")), 
        div.appendChild(element.cloneNode(!0));
        for (var i = 0, len = links.length; i < len; i++) reference += links[i].outerHTML;
        printWindow.document.write("<!DOCTYPE html> <html><head>" + reference + "</head><body>" + div.innerHTML + "<script> (function() { window.ready = true; })(); <\/script></body></html>"), 
        printWindow.document.close(), printWindow.focus();
        var interval = setInterval(function() {
            printWindow.ready && (printWindow.print(), printWindow.close(), clearInterval(interval));
        }, 500);
        return printWindow;
    }
    function formatUnit(value) {
        var result = value + "";
        return "auto" === result || -1 !== result.indexOf("%") || -1 !== result.indexOf("px") ? result : result + "px";
    }
    function getInstance(element, component) {
        var elem = "string" == typeof element ? document.querySelector(element) : element;
        if (elem[instances]) for (var _i = 0, _a = elem[instances]; _i < _a.length; _i++) {
            var inst = _a[_i];
            if (inst instanceof component) return inst;
        }
        return null;
    }
    function uniqueID() {
        if ("undefined" != typeof window) {
            var num = new Uint16Array(5);
            return (window.msCrypto || window.crypto).getRandomValues(num);
        }
    }
    function createElement(tagName, properties) {
        var element = SVG_REG.test(tagName) ? document.createElementNS("http://www.w3.org/2000/svg", tagName) : document.createElement(tagName);
        return void 0 === properties ? element : (element.innerHTML = properties.innerHTML ? properties.innerHTML : "", 
        void 0 !== properties.className && (element.className = properties.className), void 0 !== properties.id && (element.id = properties.id), 
        void 0 !== properties.styles && element.setAttribute("style", properties.styles), 
        void 0 !== properties.attrs && attributes(element, properties.attrs), element);
    }
    function addClass(elements, classes) {
        for (var classList = getClassList(classes), _i = 0, _a = elements; _i < _a.length; _i++) for (var ele = _a[_i], _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {
            var className = classList_1[_b];
            ele.classList.contains(className) || ele.classList.add(className);
        }
        return elements;
    }
    function removeClass(elements, classes) {
        for (var classList = getClassList(classes), _i = 0, _a = elements; _i < _a.length; _i++) {
            var ele = _a[_i];
            if ("" !== ele.className) for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {
                var className = classList_2[_b];
                ele.classList.remove(className);
            }
        }
        return elements;
    }
    function getClassList(classes) {
        var classList = [];
        return "string" == typeof classes ? classList.push(classes) : classList = classes, 
        classList;
    }
    function isVisible(element) {
        var ele = element;
        return "" === ele.style.visibility && ele.offsetWidth > 0;
    }
    function prepend(fromElements, toElement) {
        for (var docFrag = document.createDocumentFragment(), _i = 0, _a = fromElements; _i < _a.length; _i++) {
            var ele = _a[_i];
            docFrag.appendChild(ele);
        }
        return toElement.insertBefore(docFrag, toElement.firstElementChild), fromElements;
    }
    function append(fromElements, toElement) {
        for (var docFrag = document.createDocumentFragment(), _i = 0, _a = fromElements; _i < _a.length; _i++) {
            var ele = _a[_i];
            docFrag.appendChild(ele);
        }
        return toElement.appendChild(docFrag), fromElements;
    }
    function detach(element) {
        return element.parentNode.removeChild(element);
    }
    function remove(element) {
        var parentNode = element.parentNode;
        EventHandler.clearEvents(element), parentNode.removeChild(element);
    }
    function attributes(element, attributes) {
        for (var ele = element, _i = 0, keys_1 = Object.keys(attributes); _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            ele.setAttribute(key, attributes[key]);
        }
        return ele;
    }
    function select(selector, context) {
        return void 0 === context && (context = document), context.querySelector(selector);
    }
    function selectAll(selector, context) {
        void 0 === context && (context = document);
        return context.querySelectorAll(selector);
    }
    function closest(element, selector) {
        var el = element;
        if ("function" == typeof el.closest) return el.closest(selector);
        for (;el && 1 === el.nodeType; ) {
            if (matches(el, selector)) return el;
            el = el.parentNode;
        }
        return null;
    }
    function setStyleAttribute(element, attrs) {
        void 0 !== attrs && Object.keys(attrs).forEach(function(key) {
            element.style[key] = attrs[key];
        });
    }
    function classList(element, addClasses, removeClasses) {
        addClass([ element ], addClasses), removeClass([ element ], removeClasses);
    }
    function matches(element, selector) {
        var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;
        return matches ? matches.call(element, selector) : -1 !== [].indexOf.call(document.querySelectorAll(selector), element);
    }
    function getObject(instance, curKey, defaultValue, type) {
        return instance.properties.hasOwnProperty(curKey) && instance.properties[curKey] instanceof type || (instance.properties[curKey] = createInstance(type, [ instance, curKey, defaultValue ])), 
        instance.properties[curKey];
    }
    function getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {
        for (var result = [], len = defaultValue.length, i = 0; i < len; i++) {
            var curType = type;
            if (isFactory && (curType = type(defaultValue[i], instance)), isSetter) {
                var inst = createInstance(curType, [ instance, curKey, {}, !0 ]);
                inst.setProperties(defaultValue[i], !0), result.push(inst);
            } else result.push(createInstance(curType, [ instance, curKey, defaultValue[i], !0 ]));
        }
        return result;
    }
    function propertyGetter(defaultValue, curKey) {
        return function() {
            return this.properties.hasOwnProperty(curKey) || (this.properties[curKey] = defaultValue), 
            this.properties[curKey];
        };
    }
    function Property(defaultValue) {
        return function(target, key) {
            var propertyDescriptor = {
                set: function(defaultValue, curKey) {
                    return function(newValue) {
                        if (this.properties[curKey] !== newValue) {
                            var oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;
                            this.saveChanges(curKey, newValue, oldVal), this.properties[curKey] = newValue;
                        }
                    };
                }(defaultValue, key),
                get: propertyGetter(defaultValue, key),
                enumerable: !0,
                configurable: !0
            };
            Object.defineProperty(target, key, propertyDescriptor), addPropertyCollection(target, key, "prop", defaultValue);
        };
    }
    function Complex(defaultValue, type) {
        return function(target, key) {
            var propertyDescriptor = {
                set: function(defaultValue, curKey, type) {
                    return function(newValue) {
                        getObject(this, curKey, defaultValue, type).setProperties(newValue);
                    };
                }(defaultValue, key, type),
                get: function(defaultValue, curKey, type) {
                    return function() {
                        return getObject(this, curKey, defaultValue, type);
                    };
                }(defaultValue, key, type),
                enumerable: !0,
                configurable: !0
            };
            Object.defineProperty(target, key, propertyDescriptor), addPropertyCollection(target, key, "complexProp", defaultValue, type);
        };
    }
    function Collection(defaultValue, type) {
        return function(target, key) {
            var propertyDescriptor = {
                set: function(defaultValue, curKey, type) {
                    return function(newValue) {
                        var oldValueCollection = getObjectArray(this, curKey, defaultValue, type, !1), newValCollection = getObjectArray(this, curKey, newValue, type, !0);
                        this.saveChanges(curKey, newValCollection, oldValueCollection), this.properties[curKey] = newValCollection;
                    };
                }(defaultValue, key, type),
                get: function(defaultValue, curKey, type) {
                    return function() {
                        if (!this.properties.hasOwnProperty(curKey)) {
                            var defCollection = getObjectArray(this, curKey, defaultValue, type, !1);
                            this.properties[curKey] = defCollection;
                        }
                        return this.properties[curKey];
                    };
                }(defaultValue, key, type),
                enumerable: !0,
                configurable: !0
            };
            Object.defineProperty(target, key, propertyDescriptor), addPropertyCollection(target, key, "colProp", defaultValue, type);
        };
    }
    function Event() {
        return function(target, key) {
            var eventDescriptor = {
                set: function(newValue) {
                    var oldValue = this.properties[key];
                    if (oldValue !== newValue) {
                        var finalContext = getParentContext(this, key);
                        !1 === isUndefined(oldValue) && finalContext.context.removeEventListener(finalContext.prefix, oldValue), 
                        finalContext.context.addEventListener(finalContext.prefix, newValue), this.properties[key] = newValue;
                    }
                },
                get: propertyGetter(void 0, key),
                enumerable: !0,
                configurable: !0
            };
            Object.defineProperty(target, key, eventDescriptor), addPropertyCollection(target, key, "event");
        };
    }
    function NotifyPropertyChanges(classConstructor) {}
    function addPropertyCollection(target, key, propertyType, defaultValue, type) {
        isUndefined(target.propList) && (target.propList = {
            props: [],
            complexProps: [],
            colProps: [],
            events: [],
            propNames: [],
            complexPropNames: [],
            colPropNames: [],
            eventNames: []
        }), target.propList[propertyType + "s"].push({
            propertyName: key,
            defaultValue: defaultValue,
            type: type
        }), target.propList[propertyType + "Names"].push(key);
    }
    function getBuilderProperties(component) {
        if (isUndefined(component.prototype.builderObject)) {
            component.prototype.builderObject = {
                properties: {},
                propCollections: [],
                add: function() {
                    this.isPropertyArray = !0, this.propCollections.push(extend({}, this.properties, {}));
                }
            };
            for (var rex = /complex/, _i = 0, _a = Object.keys(component.prototype.propList); _i < _a.length; _i++) for (var key = _a[_i], _loop_1 = function(prop) {
                rex.test(key) ? component.prototype.builderObject[prop.propertyName] = function(value) {
                    var childType = {};
                    merge(childType, getBuilderProperties(prop.type)), value(childType);
                    var tempValue;
                    return tempValue = childType.isPropertyArray ? childType.propCollections : extend({}, childType.properties, {}), 
                    this.properties[prop.propertyName] = tempValue, childType.properties = {}, childType.propCollections = [], 
                    childType.isPropertyArray = !1, this;
                } : component.prototype.builderObject[prop.propertyName] = function(value) {
                    return this.properties[prop.propertyName] = value, this;
                };
            }, _b = 0, _c = component.prototype.propList[key]; _b < _c.length; _b++) {
                _loop_1(_c[_b]);
            }
        }
        return component.prototype.builderObject;
    }
    function getParentContext(context, prefix) {
        if (!1 === context.hasOwnProperty("parentObj")) return {
            context: context,
            prefix: prefix
        };
        var curText = getValue("propName", context);
        return curText && (prefix = curText + "-" + prefix), getParentContext(getValue("parentObj", context), prefix);
    }
    function rippleEffect(element, rippleOptions, done) {
        var rippleModel = function(rippleOptions) {
            return {
                selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,
                ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,
                rippleFlag: rippleOptions && rippleOptions.rippleFlag,
                isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,
                duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350
            };
        }(rippleOptions);
        return !1 === rippleModel.rippleFlag || void 0 === rippleModel.rippleFlag && !isRippleEnabled ? Function : (element.setAttribute("data-ripple", "true"), 
        EventHandler.add(element, "mousedown", rippleHandler, {
            parent: element,
            rippleOptions: rippleModel
        }), EventHandler.add(element, "mouseup", rippleUpHandler, {
            parent: element,
            rippleOptions: rippleModel,
            done: done
        }), EventHandler.add(element, "mouseleave", rippleLeaveHandler, {
            parent: element,
            rippleOptions: rippleModel
        }), Browser.isPointer && EventHandler.add(element, "transitionend", rippleLeaveHandler, {
            parent: element,
            rippleOptions: rippleModel
        }), function() {
            element.removeAttribute("data-ripple"), EventHandler.remove(element, "mousedown", rippleHandler), 
            EventHandler.remove(element, "mouseup", rippleUpHandler), EventHandler.remove(element, "mouseleave", rippleLeaveHandler), 
            EventHandler.remove(element, "transitionend", rippleLeaveHandler);
        });
    }
    function rippleHandler(e) {
        var target = e.target, selector = this.rippleOptions.selector, element = selector ? closest(target, selector) : target;
        if (!(!element || this.rippleOptions && closest(target, this.rippleOptions.ignore))) {
            var offset = element.getBoundingClientRect(), offsetX = e.pageX - document.body.scrollLeft, offsetY = e.pageY - (!document.body.scrollTop && document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop), pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right)), pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom)), radius = Math.sqrt(pageX * pageX + pageY * pageY), diameter = 2 * radius + "px", x = offsetX - offset.left - radius, y = offsetY - offset.top - radius;
            this.rippleOptions && this.rippleOptions.isCenterRipple && (x = 0, y = 0, diameter = "100%"), 
            element.classList.add("e-ripple");
            var rippleElement = createElement("div", {
                className: "e-ripple-element",
                styles: "width: " + diameter + ";height: " + diameter + ";left: " + x + "px;top: " + y + "px;transition-duration: " + this.rippleOptions.duration.toString() + "ms;"
            });
            element.appendChild(rippleElement), window.getComputedStyle(rippleElement).getPropertyValue("opacity"), 
            rippleElement.style.transform = "scale(1)", element !== this.parent && EventHandler.add(element, "mouseleave", rippleLeaveHandler, {
                parent: this.parent,
                rippleOptions: this.rippleOptions
            });
        }
    }
    function rippleUpHandler(e) {
        removeRipple(e, this);
    }
    function rippleLeaveHandler(e) {
        removeRipple(e, this);
    }
    function removeRipple(e, eventArgs) {
        var duration = eventArgs.rippleOptions.duration, target = e.target, selector = eventArgs.rippleOptions.selector, element = selector ? closest(target, selector) : target;
        if (element && (!element || -1 !== element.className.indexOf("e-ripple"))) {
            var rippleElements = selectAll(".e-ripple-element", element), rippleElement = rippleElements[rippleElements.length - 1];
            rippleElement && (rippleElement.style.opacity = "0.5"), eventArgs.parent !== element && EventHandler.remove(element, "mouseleave", rippleLeaveHandler), 
            setTimeout(function() {
                rippleElement && rippleElement.parentNode && rippleElement.parentNode.removeChild(rippleElement), 
                element.getElementsByClassName("e-ripple-element").length || element.classList.remove("e-ripple"), 
                eventArgs.done && eventArgs.done(e);
            }, duration);
        }
    }
    function setCulture(cultureName) {
        defaultCulture = cultureName, onIntlChange.notify("notifyExternalChange", {
            locale: defaultCulture
        });
    }
    function getNumericObject(locale, type) {
        var numObject = IntlBase.getDependables(cldrData, locale, !0)[mapper[0]], dateObject = IntlBase.getDependables(cldrData, locale)[mapper[1]], numSystem = getValue("defaultNumberingSystem", numObject), symbPattern = getValue("symbols-numberSystem-" + numSystem, numObject), pattern = IntlBase.getSymbolPattern(type || "decimal", numSystem, numObject, !1);
        return extend(symbPattern, IntlBase.getFormatData(pattern, !0, "", !0), {
            dateSeparator: IntlBase.getDateSeparator(dateObject)
        });
    }
    function getDefaultDateObject() {
        return IntlBase.getDependables(cldrData, "", !1)[mapper[1]];
    }
    function compile$1(template, helper) {
        var fnCode = 'var str="' + function(str, nameSpace, helper) {
            var varCOunt = 0, localKeys = [];
            return str.replace(LINES, "").replace(DBL_QUOTED_STR, "'$1'").replace(exp, function(match, cnt, offset, matchStr) {
                var matches = cnt.match(CALL_FUNCTION);
                if (matches) {
                    var rlStr = matches[1];
                    if (ELSEIF_STMT.test(cnt)) cnt = '";} ' + cnt.replace(matches[1], rlStr.replace(WORD, function(str) {
                        return str = str.trim(), addNameSpace(str, !QUOTES.test(str) && -1 === localKeys.indexOf(str), nameSpace, localKeys);
                    })) + '{ \n str = str + "'; else if (IF_STMT.test(cnt)) cnt = '"; ' + cnt.replace(matches[1], rlStr.replace(WORD, function(strs) {
                        return strs = strs.trim(), addNameSpace(strs, !QUOTES.test(strs) && -1 === localKeys.indexOf(strs), nameSpace, localKeys);
                    })) + '{ \n str = str + "'; else if (FOR_STMT.test(cnt)) {
                        var rlStr_1 = matches[1].split(" of ");
                        cnt = '"; ' + cnt.replace(matches[1], function(mtc) {
                            return localKeys.push(rlStr_1[0]), localKeys.push(rlStr_1[0] + "Index"), "var i" + (varCOunt += 1) + "=0; i" + varCOunt + " < " + addNameSpace(rlStr_1[1], !0, nameSpace, localKeys) + ".length; i" + varCOunt + "++";
                        }) + "{ \n " + rlStr_1[0] + "= " + addNameSpace(rlStr_1[1], !0, nameSpace, localKeys) + "[i" + varCOunt + "]; \n var " + rlStr_1[0] + "Index=i" + varCOunt + '; \n str = str + "';
                    } else {
                        var fnStr = cnt.split("("), fNameSpace = helper && helper.hasOwnProperty(fnStr[0]) ? "this." : "global";
                        fNameSpace = /\./.test(fnStr[0]) ? "" : fNameSpace, cnt = '" + ' + ("global" === fNameSpace ? "" : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches[1].replace(",", nameSpace + "."), "global" !== fNameSpace, nameSpace, localKeys)) + '+"';
                    }
                } else cnt = ELSE_STMT.test(cnt) ? '"; ' + cnt.replace(ELSE_STMT, '} else { \n str = str + "') : cnt.match(IF_OR_FOR) ? cnt.replace(IF_OR_FOR, '"; \n } \n str = str + "') : '"+' + addNameSpace(cnt, -1 === localKeys.indexOf(cnt), nameSpace, localKeys) + '+"';
                return cnt;
            });
        }(template, "data", helper) + '"; return str;';
        return new Function("data", fnCode).bind(helper);
    }
    function addNameSpace(str, addNS, nameSpace, ignoreList) {
        return addNS && !NOT_NUMBER.test(str) && -1 === ignoreList.indexOf(str.split(".")[0]) ? nameSpace + "." + str : str;
    }
    function compile$$1(templateString, helper) {
        var compiler = engineObj.compile(templateString, helper);
        return function(data, component, propName) {
            var result = compiler(data, component, propName);
            if ("string" == typeof result) {
                if (HAS_SVG.test(result)) {
                    return createElement("svg", {
                        innerHTML: result
                    }).childNodes;
                }
                return createElement(HAS_ROW.test(result) ? "table" : "div", {
                    innerHTML: result
                }).childNodes;
            }
            return result;
        };
    }
    function calculateRelativeBasedPosition(anchor, element) {
        var fixedElement = !1, anchorPos = {
            left: 0,
            top: 0
        }, tempAnchor = anchor;
        if (!anchor || !element) return anchorPos;
        for (isNullOrUndefined(element.offsetParent) && "fixed" === element.style.position && (fixedElement = !0); (element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor; ) anchorPos.left += anchor.offsetLeft, 
        anchorPos.top += anchor.offsetTop, anchor = anchor.offsetParent;
        for (anchor = tempAnchor; (element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor; ) anchorPos.left -= anchor.scrollLeft, 
        anchorPos.top -= anchor.scrollTop, anchor = anchor.parentElement;
        return anchorPos;
    }
    function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
        if (popupRect = targetValues, fixedParent = !!parentElement, !currentElement) return {
            left: 0,
            top: 0
        };
        positionX || (positionX = "left"), positionY || (positionY = "top"), parentDocument = currentElement.ownerDocument, 
        element = currentElement;
        return function(posX, posY, pos) {
            switch (elementRect = element.getBoundingClientRect(), posY + posX) {
              case "topcenter":
                setPosx(getElementHCenter(), pos), setPosy(getElementTop(), pos);
                break;

              case "topright":
                setPosx(getElementRight(), pos), setPosy(getElementTop(), pos);
                break;

              case "centercenter":
                setPosx(getElementHCenter(), pos), setPosy(getElementVCenter(), pos);
                break;

              case "centerright":
                setPosx(getElementRight(), pos), setPosy(getElementVCenter(), pos);
                break;

              case "centerleft":
                setPosx(getElementLeft(), pos), setPosy(getElementVCenter(), pos);
                break;

              case "bottomcenter":
                setPosx(getElementHCenter(), pos), setPosy(getElementBottom(), pos);
                break;

              case "bottomright":
                setPosx(getElementRight(), pos), setPosy(getElementBottom(), pos);
                break;

              case "bottomleft":
                setPosx(getElementLeft(), pos), setPosy(getElementBottom(), pos);
                break;

              default:
              case "topleft":
                setPosx(getElementLeft(), pos), setPosy(getElementTop(), pos);
            }
            return pos;
        }(positionX.toLowerCase(), positionY.toLowerCase(), {
            left: 0,
            top: 0
        });
    }
    function setPosx(value, pos) {
        pos.left = value;
    }
    function setPosy(value, pos) {
        pos.top = value;
    }
    function getBodyScrollTop() {
        return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
    }
    function getBodyScrollLeft() {
        return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
    }
    function getElementBottom() {
        return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
    }
    function getElementVCenter() {
        return getElementTop() + elementRect.height / 2;
    }
    function getElementTop() {
        return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
    }
    function getElementLeft() {
        return elementRect.left + getBodyScrollLeft();
    }
    function getElementRight() {
        return elementRect.right + getBodyScrollLeft() - (popupRect ? popupRect.width : 0);
    }
    function getElementHCenter() {
        return getElementLeft() + elementRect.width / 2;
    }
    function fit(element, viewPortElement, axis, position) {
        if (void 0 === viewPortElement && (viewPortElement = null), void 0 === axis && (axis = {
            X: !1,
            Y: !1
        }), !axis.Y && !axis.X) return {
            left: 0,
            top: 0
        };
        var elemData = element.getBoundingClientRect();
        if (targetContainer = viewPortElement, parentDocument$1 = element.ownerDocument, 
        position || (position = calculatePosition(element, "left", "top")), axis.X) {
            var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth(), containerLeft = ContainerLeft(), containerRight = ContainerRight(), overLeft = containerLeft - position.left, overRight = position.left + elemData.width - containerRight;
            elemData.width > containerWidth ? position.left = overLeft > 0 && overRight <= 0 ? containerRight - elemData.width : overRight > 0 && overLeft <= 0 ? containerLeft : overLeft > overRight ? containerRight - elemData.width : containerLeft : overLeft > 0 ? position.left += overLeft : overRight > 0 && (position.left -= overRight);
        }
        if (axis.Y) {
            var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight(), containerTop = ContainerTop(), containerBottom = ContainerBottom(), overTop = containerTop - position.top, overBottom = position.top + elemData.height - containerBottom;
            elemData.height > containerHeight ? position.top = overTop > 0 && overBottom <= 0 ? containerBottom - elemData.height : overBottom > 0 && overTop <= 0 ? containerTop : overTop > overBottom ? containerBottom - elemData.height : containerTop : overTop > 0 ? position.top += overTop : overBottom > 0 && (position.top -= overBottom);
        }
        return position;
    }
    function isCollide(element, viewPortElement, x, y) {
        void 0 === viewPortElement && (viewPortElement = null);
        var elemOffset = calculatePosition(element, "left", "top");
        x && (elemOffset.left = x), y && (elemOffset.top = y);
        var data = [];
        targetContainer = viewPortElement, parentDocument$1 = element.ownerDocument;
        var elementRect = element.getBoundingClientRect(), top = elemOffset.top, left = elemOffset.left, right = elemOffset.left + elementRect.width, yAxis = topCollideCheck(top, elemOffset.top + elementRect.height), xAxis = leftCollideCheck(left, right);
        return yAxis.topSide && data.push("top"), xAxis.rightSide && data.push("right"), 
        xAxis.leftSide && data.push("left"), yAxis.bottomSide && data.push("bottom"), data;
    }
    function flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement, axis, fixedParent) {
        if (void 0 === viewPortElement && (viewPortElement = null), void 0 === axis && (axis = {
            X: !0,
            Y: !0
        }), target && element && positionX && positionY && (axis.X || axis.Y)) {
            var tEdge = {
                TL: null,
                TR: null,
                BL: null,
                BR: null
            }, eEdge = {
                TL: null,
                TR: null,
                BL: null,
                BR: null
            }, elementRect = element.getBoundingClientRect(), pos = {
                posX: positionX,
                posY: positionY,
                offsetX: offsetX,
                offsetY: offsetY,
                position: {
                    left: 0,
                    top: 0
                }
            };
            targetContainer = viewPortElement, parentDocument$1 = target.ownerDocument, function(target, edge, pos, fixedParent, elementRect) {
                pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent, elementRect), 
                edge.TL = calculatePosition(target, "left", "top", fixedParent, elementRect), edge.TR = calculatePosition(target, "right", "top", fixedParent, elementRect), 
                edge.BR = calculatePosition(target, "left", "bottom", fixedParent, elementRect), 
                edge.BL = calculatePosition(target, "right", "bottom", fixedParent, elementRect);
            }(target, tEdge, pos, fixedParent, elementRect), setPosition(eEdge, pos, elementRect), 
            axis.X && leftFlip(target, eEdge, tEdge, pos, elementRect, !0), axis.Y && tEdge.TL.top > -1 && topFlip(target, eEdge, tEdge, pos, elementRect, !0), 
            function(element, pos, elementRect) {
                var left = 0, top = 0;
                if (null != element.offsetParent && ("absolute" === getComputedStyle(element.offsetParent).position || "relative" === getComputedStyle(element.offsetParent).position)) {
                    var data = calculatePosition(element.offsetParent, "left", "top", !1, elementRect);
                    left = data.left, top = data.top;
                }
                element.style.top = pos.position.top + pos.offsetY - top + "px", element.style.left = pos.position.left + pos.offsetX - left + "px";
            }(element, pos, elementRect);
        }
    }
    function setPosition(eStatus, pos, elementRect) {
        eStatus.TL = {
            top: pos.position.top + pos.offsetY,
            left: pos.position.left + pos.offsetX
        }, eStatus.TR = {
            top: eStatus.TL.top,
            left: eStatus.TL.left + elementRect.width
        }, eStatus.BL = {
            top: eStatus.TL.top + elementRect.height,
            left: eStatus.TL.left
        }, eStatus.BR = {
            top: eStatus.TL.top + elementRect.height,
            left: eStatus.TL.left + elementRect.width
        };
    }
    function leftCollideCheck(left, right) {
        var leftSide = !1, rightSide = !1;
        return left - getBodyScrollLeft$1() < ContainerLeft() && (leftSide = !0), right > ContainerRight() && (rightSide = !0), 
        {
            leftSide: leftSide,
            rightSide: rightSide
        };
    }
    function leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
        var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);
        tEdge.TL.left - getBodyScrollLeft$1() <= ContainerLeft() && (collideSide.leftSide = !1), 
        tEdge.TR.left >= ContainerRight() && (collideSide.rightSide = !1), (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) && ("right" === pos.posX ? pos.posX = "left" : pos.posX = "right", 
        pos.offsetX = pos.offsetX + elementRect.width, pos.offsetX = -1 * pos.offsetX, pos.position = calculatePosition(target, pos.posX, pos.posY, !1), 
        setPosition(edge, pos, elementRect), deepCheck && leftFlip(target, edge, tEdge, pos, elementRect, !1));
    }
    function topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {
        var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);
        tEdge.TL.top - getBodyScrollTop$1() <= ContainerTop() && (collideSide.topSide = !1), 
        tEdge.BL.top >= ContainerBottom() && (collideSide.bottomSide = !1), (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) && ("top" === pos.posY ? pos.posY = "bottom" : pos.posY = "top", 
        pos.offsetY = pos.offsetY + elementRect.height, pos.offsetY = -1 * pos.offsetY, 
        pos.position = calculatePosition(target, pos.posX, pos.posY, !1, elementRect), setPosition(edge, pos, elementRect), 
        deepCheck && topFlip(target, edge, tEdge, pos, elementRect, !1));
    }
    function topCollideCheck(top, bottom) {
        var topSide = !1, bottomSide = !1;
        return top - getBodyScrollTop$1() < ContainerTop() && (topSide = !0), bottom > ContainerBottom() && (bottomSide = !0), 
        {
            topSide: topSide,
            bottomSide: bottomSide
        };
    }
    function getTargetContainerWidth() {
        return targetContainer.getBoundingClientRect().width;
    }
    function getTargetContainerHeight() {
        return targetContainer.getBoundingClientRect().height;
    }
    function getTargetContainerLeft() {
        return targetContainer.getBoundingClientRect().left;
    }
    function getTargetContainerTop() {
        return targetContainer.getBoundingClientRect().top;
    }
    function ContainerTop() {
        return targetContainer ? getTargetContainerTop() : 0;
    }
    function ContainerLeft() {
        return targetContainer ? getTargetContainerLeft() : 0;
    }
    function ContainerRight() {
        return targetContainer ? getBodyScrollLeft$1() + getTargetContainerLeft() + getTargetContainerWidth() : getBodyScrollLeft$1() + getViewPortWidth();
    }
    function ContainerBottom() {
        return targetContainer ? getBodyScrollTop$1() + getTargetContainerTop() + getTargetContainerHeight() : getBodyScrollTop$1() + getViewPortHeight();
    }
    function getBodyScrollTop$1() {
        return parentDocument$1.documentElement.scrollTop || parentDocument$1.body.scrollTop;
    }
    function getBodyScrollLeft$1() {
        return parentDocument$1.documentElement.scrollLeft || parentDocument$1.body.scrollLeft;
    }
    function getViewPortHeight() {
        return window.innerHeight;
    }
    function getViewPortWidth() {
        return window.innerWidth;
    }
    function getScrollableParent(element, fixedParent) {
        for (var eleStyle = getComputedStyle(element), scrollParents = [], overflowRegex = /(auto|scroll)/, parent = element.parentElement; parent && "HTML" !== parent.tagName; ) {
            var parentStyle = getComputedStyle(parent);
            "absolute" === eleStyle.position && "static" === parentStyle.position || !overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX) || scrollParents.push(parent), 
            parent = parent.parentElement;
        }
        return fixedParent || scrollParents.push(document), scrollParents;
    }
    function getZindexPartial(element) {
        for (var parent = element.parentElement, parentZindex = []; parent && "BODY" !== parent.tagName; ) {
            var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue("z-index"), position = document.defaultView.getComputedStyle(parent, null).getPropertyValue("position");
            "auto" !== index && "static" !== position && parentZindex.push(index), parent = parent.parentElement;
        }
        for (var childrenZindex = [], i = 0; i < document.body.children.length; i++) if (!element.isEqualNode(document.body.children[i])) {
            index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("z-index"), 
            position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("position");
            "auto" !== index && "static" !== position && childrenZindex.push(index);
        }
        childrenZindex.push("999");
        var siblingsZindex = [];
        if (!isNullOrUndefined(element.parentElement) && "BODY" !== element.parentElement.tagName) {
            var childNodes = [].slice.call(element.parentElement.children);
            for (i = 0; i < childNodes.length; i++) {
                index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("z-index"), 
                position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("position");
                "auto" !== index && "static" !== position && siblingsZindex.push(index);
            }
        }
        var finalValue = parentZindex.concat(childrenZindex, siblingsZindex), currentZindexValue = Math.max.apply(Math, finalValue) + 1;
        return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
    }
    function wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {
        var input = element;
        if (element.tagName === tag) {
            var ejInstance = getValue("ej2_instances", element);
            input = createElement("input", {
                attrs: {
                    type: type
                }
            });
            for (var props = [ "change", "cssClass", "label", "labelPosition", "id" ], index = 0, len = element.attributes.length; index < len; index++) -1 === props.indexOf(element.attributes[index].nodeName) && input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);
            attributes(element, {
                class: WRAPPER,
                role: role,
                "aria-checked": "false"
            }), element.appendChild(input), setValue("ej2_instances", ejInstance, input), deleteObject(element, "ej2_instances");
        }
        return input;
    }
    function getTextNode(element) {
        for (var node, childnode = element.childNodes, i = 0; i < childnode.length; i++) if (3 === (node = childnode[i]).nodeType) return node;
        return null;
    }
    function destroy(ejInst, wrapper, tagName) {
        "INPUT" === tagName ? (wrapper.parentNode.insertBefore(ejInst.element, wrapper), 
        detach(wrapper), ejInst.element.checked = !1, [ "name", "value", "disabled" ].forEach(function(key) {
            ejInst.element.removeAttribute(key);
        })) : ([ "role", "aria-checked", "class" ].forEach(function(key) {
            wrapper.removeAttribute(key);
        }), wrapper.innerHTML = "");
    }
    function preRender(proxy, control, wrapper, element, moduleName) {
        element = wrapperInitialize(proxy.createElement, control, "checkbox", element, wrapper, moduleName), 
        proxy.element = element, "checkbox" !== proxy.element.getAttribute("type") && proxy.element.setAttribute("type", "checkbox"), 
        proxy.element.id || (proxy.element.id = getUniqueID("e-" + moduleName));
    }
    function createCheckBox(createElement, enableRipple, options) {
        void 0 === enableRipple && (enableRipple = !1), void 0 === options && (options = {});
        var wrapper = createElement("div", {
            className: "e-checkbox-wrapper e-css"
        });
        if (options.cssClass && addClass([ wrapper ], options.cssClass.split(" ")), options.enableRtl && wrapper.classList.add("e-rtl"), 
        enableRipple) {
            var rippleSpan = createElement("span", {
                className: "e-ripple-container"
            });
            rippleEffect(rippleSpan, {
                isCenterRipple: !0,
                duration: 400
            }), wrapper.appendChild(rippleSpan);
        }
        var frameSpan = createElement("span", {
            className: "e-frame e-icons"
        });
        if (options.checked && frameSpan.classList.add("e-check"), wrapper.appendChild(frameSpan), 
        options.label) {
            var labelSpan = createElement("span", {
                className: "e-label",
                innerHTML: options.label
            });
            wrapper.appendChild(labelSpan);
        }
        return wrapper;
    }
    function rippleMouseHandler(e, rippleSpan) {
        if (rippleSpan) {
            var event_1 = document.createEvent("MouseEvents");
            event_1.initEvent(e.type, !1, !0), rippleSpan.dispatchEvent(event_1);
        }
    }
    function createSpinner(args, internalCreateElement) {
        var radius, makeElement = isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement, container = function(target, makeElement) {
            var spinnerContainer = makeElement("div", {});
            spinnerContainer.classList.add(CLS_SPINWRAP);
            var spinnerInnerContainer = makeElement("div", {});
            return spinnerInnerContainer.classList.add(CLS_SPININWRAP), target.appendChild(spinnerContainer), 
            spinnerContainer.appendChild(spinnerInnerContainer), {
                wrap: spinnerContainer,
                inner_wrap: spinnerInnerContainer
            };
        }(args.target, makeElement);
        if (isNullOrUndefined(args.cssClass) || container.wrap.classList.add(args.cssClass), 
        isNullOrUndefined(args.template) && isNullOrUndefined(spinTemplate)) {
            var theme = isNullOrUndefined(args.type) ? function(container) {
                return window.getComputedStyle(container, ":after").getPropertyValue("content").replace(/['"]+/g, "");
            }(container.wrap) : args.type;
            radius = function(width, theme) {
                var defaultSize = "Material" === theme ? DEFT_MAT_WIDTH : "Fabric" === theme ? DEFT_FAB_WIDTH : DEFT_BOOT_WIDTH;
                return width = width ? parseFloat(width + "") : defaultSize, "Bootstrap" === theme ? width : width / 2;
            }(isNullOrUndefined(args.width) ? void 0 : args.width, theme), setTheme(theme, container.wrap, radius, makeElement), 
            isNullOrUndefined(args.label) || function(container, label, makeElement) {
                var labelEle = makeElement("div", {});
                labelEle.classList.add(CLS_SPINLABEL), labelEle.textContent = label, container.appendChild(labelEle);
            }(container.inner_wrap, args.label, makeElement);
        } else {
            var template = isNullOrUndefined(args.template) ? spinTemplate : args.template;
            container.wrap.classList.add(CLS_SPINTEMPLATE), function(container, template, cssClass) {
                isNullOrUndefined(cssClass) || container.classList.add(cssClass);
                container.querySelector(".e-spinner-inner").innerHTML = template;
            }(container.wrap, template, spinCSSClass);
        }
        container.wrap.classList.add(CLS_HIDESPIN), container = null;
    }
    function createMaterialSpinner(container, radius, makeElement) {
        var uniqueID = random_generator();
        globalTimeOut[uniqueID] = {
            timeOut: 0,
            type: "Material",
            radius: radius
        }, function(innerContainer, uniqueID, makeElement) {
            var svgMaterial = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            svgMaterial.setAttribute("class", CLS_MATERIALSPIN), svgMaterial.setAttribute("id", uniqueID);
            var matCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
            matCirclePath.setAttribute("class", CLS_SPINCIRCLE), innerContainer.insertBefore(svgMaterial, innerContainer.firstChild), 
            svgMaterial.appendChild(matCirclePath);
        }(container, uniqueID), function(radius, container) {
            var diameter = 2 * radius, svg = container.querySelector("svg.e-spin-material"), path = svg.querySelector("path.e-path-circle"), strokeSize = getStrokeSize(diameter), transformOrigin = diameter / 2 + "px";
            svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter), svg.style.width = svg.style.height = diameter + "px", 
            svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin, 
            path.setAttribute("stroke-width", strokeSize + ""), path.setAttribute("d", function(diameter, strokeSize) {
                var radius = diameter / 2, offset = strokeSize / 2;
                return "M" + radius + "," + offset + "A" + (radius - offset) + "," + (radius - offset) + " 0 1 1 " + offset + "," + radius;
            }(diameter, strokeSize)), path.setAttribute("stroke-dasharray", (diameter - strokeSize) * Math.PI * .75 + ""), 
            path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, 1, 75) + "");
        }(radius, container);
    }
    function setTheme(theme, container, radius, makeElement) {
        var innerContainer = container.querySelector("." + CLS_SPININWRAP), svg = innerContainer.querySelector("svg");
        switch (isNullOrUndefined(svg) || innerContainer.removeChild(svg), theme) {
          case "Material":
            createMaterialSpinner(innerContainer, radius);
            break;

          case "Fabric":
            !function(container, radius, makeElement) {
                var uniqueID = random_generator();
                globalTimeOut[uniqueID] = {
                    timeOut: 0,
                    type: "Fabric",
                    radius: radius
                }, create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement), fb_calculate_attributes(radius, container, CLS_FABRICSPIN);
            }(innerContainer, radius, makeElement);
            break;

          case "Bootstrap":
            !function(innerContainer, radius, makeElement) {
                var uniqueID = random_generator();
                globalTimeOut[uniqueID] = {
                    timeOut: 0,
                    type: "Bootstrap",
                    radius: radius
                }, function(innerContainer, uniqueID, makeElement) {
                    var svgBoot = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                    svgBoot.setAttribute("id", uniqueID), svgBoot.setAttribute("class", CLS_BOOTSPIN), 
                    svgBoot.setAttribute("viewBox", "0 0 64 64"), innerContainer.insertBefore(svgBoot, innerContainer.firstChild);
                    for (var item = 0; item <= 7; item++) {
                        var bootCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                        bootCircle.setAttribute("class", CLS_SPINCIRCLE + "_" + item), bootCircle.setAttribute("r", "2"), 
                        bootCircle.setAttribute("transform", "translate(32,32)"), svgBoot.appendChild(bootCircle);
                    }
                }(innerContainer, uniqueID), function(innerContainer, radius) {
                    var svg = innerContainer.querySelector("svg.e-spin-bootstrap");
                    svg.style.width = svg.style.height = radius + "px";
                    for (var startArc = 90, item = 0; item <= 7; item++) {
                        var start = defineArcPoints(0, 0, 24, startArc), circleEle = svg.querySelector("." + CLS_SPINCIRCLE + "_" + item);
                        circleEle.setAttribute("cx", start.x + ""), circleEle.setAttribute("cy", start.y + ""), 
                        startArc = startArc >= 360 ? 0 : startArc, startArc += 45;
                    }
                }(innerContainer, radius);
            }(innerContainer, radius);
            break;

          case "HighContrast":
            !function(container, radius, makeElement) {
                var uniqueID = random_generator();
                globalTimeOut[uniqueID] = {
                    timeOut: 0,
                    type: "HighContrast",
                    radius: radius
                }, create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement), 
                fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);
            }(innerContainer, radius, makeElement);
        }
    }
    function generateSeries(begin, stop) {
        function formSeries(i) {
            series.push(i), i === end && 1 !== count || (i <= start && i > 1 && !increment ? i = parseFloat((i - .2).toFixed(2)) : 1 === i ? (i = 7, 
            i = parseFloat((i + .2).toFixed(2)), increment = !0) : i < 8 && increment ? 8 === (i = parseFloat((i + .2).toFixed(2))) && (increment = !1) : i <= 8 && !increment && (i = parseFloat((i - .2).toFixed(2))), 
            ++count, formSeries(i));
        }
        var series = [], start = begin, end = stop, increment = !1, count = 1;
        return formSeries(start), series;
    }
    function random_generator() {
        for (var random = "", combine = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", i = 0; i < 5; i++) random += combine.charAt(Math.floor(Math.random() * combine.length));
        return random;
    }
    function create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {
        var svgFabric = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svgFabric.setAttribute("id", uniqueID), svgFabric.setAttribute("class", themeClass);
        var fabricCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
        fabricCirclePath.setAttribute("class", CLS_SPINCIRCLE);
        var fabricCircleArc = document.createElementNS("http://www.w3.org/2000/svg", "path");
        fabricCircleArc.setAttribute("class", CLS_SPINARC), innerCon.insertBefore(svgFabric, innerCon.firstChild), 
        svgFabric.appendChild(fabricCirclePath), svgFabric.appendChild(fabricCircleArc);
    }
    function animateMaterial(spinnerInfo) {
        !function(start, end, easing, duration, count, max, spinnerInfo) {
            function mat_animation(spinnerInfo) {
                var currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));
                !function(value, container) {
                    if (!isNullOrUndefined(container.querySelector("svg.e-spin-material")) && !isNullOrUndefined(container.querySelector("svg.e-spin-material").querySelector("path.e-path-circle"))) {
                        var svg = container.querySelector("svg.e-spin-material"), path = svg.querySelector("path.e-path-circle");
                        path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, value, max) + ""), 
                        path.setAttribute("transform", "rotate(" + rotate + " " + diameter / 2 + " " + diameter / 2 + ")");
                    }
                }(easing(currentTime, start, change, duration), spinnerInfo.container), id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration ? globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1) : animateMaterial(spinnerInfo);
            }
            var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId, startTime = new Date().getTime(), change = end - start, diameter = function(value) {
                return parseFloat(value);
            }(2 * spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius + ""), strokeSize = getStrokeSize(diameter), rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
            mat_animation(spinnerInfo);
        }(1, 149, easeAnimation, 1333, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, 75, spinnerInfo), 
        spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
    }
    function getStrokeSize(diameter) {
        return .1 * diameter;
    }
    function getDashOffset(diameter, strokeSize, value, max) {
        return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
    }
    function easeAnimation(current, start, change, duration) {
        var timestamp = (current /= duration) * current, timecount = timestamp * current;
        return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
    }
    function fb_calculate_attributes(radius, innerConainer, trgClass) {
        var centerX = radius, centerY = radius, diameter = 2 * radius, svg = innerConainer.querySelector("." + trgClass), circle = svg.querySelector(".e-path-circle"), path = svg.querySelector(".e-path-arc"), transformOrigin = diameter / 2 + "px";
        circle.setAttribute("d", function(x, y, radius) {
            return [ "M", x, y, "m", -radius, 0, "a", radius, radius, 0, 1, 0, 2 * radius, 0, "a", radius, radius, 0, 1, 0, 2 * -radius, 0 ].join(" ");
        }(centerX, centerY, radius)), path.setAttribute("d", function(x, y, radius, startArc, endArc) {
            var start = defineArcPoints(x, y, radius, endArc), end = defineArcPoints(x, y, radius, startArc);
            return [ "M", start.x, start.y, "A", radius, radius, 0, 0, 0, end.x, end.y ].join(" ");
        }(centerX, centerY, radius, 315, 45)), svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter), 
        svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin, 
        svg.style.width = svg.style.height = diameter + "px";
    }
    function defineArcPoints(centerX, centerY, radius, angle) {
        var radians = (angle - 90) * Math.PI / 180;
        return {
            x: centerX + radius * Math.cos(radians),
            y: centerY + radius * Math.sin(radians)
        };
    }
    function showSpinner(container) {
        showHideSpinner(container, !1), container = null;
    }
    function showHideSpinner(container, isHide) {
        var spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container : container.querySelector("." + CLS_SPINWRAP), inner = spinnerWrap.querySelector("." + CLS_SPININWRAP);
        if (isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN)) {
            var svgEle = spinnerWrap.querySelector("svg");
            if (isNullOrUndefined(svgEle)) return;
            var id = svgEle.getAttribute("id");
            switch (globalTimeOut[id].isAnimate = !isHide, globalTimeOut[id].type) {
              case "Material":
                isHide ? clearTimeout(globalTimeOut[id].timeOut) : function(container, uniqueID, radius) {
                    var globalObject = {};
                    globalTimeOut[uniqueID].timeOut = 0, globalObject[uniqueID] = function(id, radius, count, previousId) {
                        return {
                            radius: radius,
                            count: count,
                            previousId: previousId
                        };
                    }(0, radius, 0, 0), animateMaterial({
                        uniqueID: uniqueID,
                        container: container,
                        globalInfo: globalObject,
                        timeOutVar: 0
                    });
                }(inner, id, globalTimeOut[id].radius);
                break;

              case "Bootstrap":
                isHide ? clearTimeout(globalTimeOut[id].timeOut) : function(innerContainer) {
                    for (var id = innerContainer.querySelector("svg.e-spin-bootstrap").getAttribute("id"), i = 1; i <= 8; i++) !function(circle, start, end, series, id) {
                        function boot_animate(radius) {
                            globalTimeOut[id].isAnimate && (++count, circle.setAttribute("r", radius + ""), 
                            count >= series.length && (count = 0), globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18));
                        }
                        var count = 0;
                        boot_animate(start);
                    }(innerContainer.getElementsByClassName("e-path-circle_" + (8 === i ? 0 : i))[0], i, 0, generateSeries(i, i), id);
                }(inner);
            }
        }
        isHide ? classList(spinnerWrap, [ CLS_HIDESPIN ], [ CLS_SHOWSPIN ]) : classList(spinnerWrap, [ CLS_SHOWSPIN ], [ CLS_HIDESPIN ]), 
        container = null;
    }
    function hideSpinner(container) {
        showHideSpinner(container, !0), container = null;
    }
    function doesImplementInterface(target, checkFor) {
        return target.prototype && checkFor in target.prototype;
    }
    function valueAccessor(field, data, column) {
        return field = isNullOrUndefined(field) ? "" : field, DataUtil.getObject(field, data);
    }
    function getUpdateUsingRaf(updateFunction, callBack) {
        requestAnimationFrame(function() {
            try {
                callBack(null, updateFunction());
            } catch (e) {
                callBack(e);
            }
        });
    }
    function iterateArrayOrObject(collection, predicate) {
        for (var result = [], i = 0, len = collection.length; i < len; i++) {
            var pred = predicate(collection[i], i);
            isNullOrUndefined(pred) || result.push(pred);
        }
        return result;
    }
    function iterateExtend(array) {
        for (var obj = [], i = 0; i < array.length; i++) obj.push(extend({}, getActualProperties(array[i]), {}, !0));
        return obj;
    }
    function templateCompiler(template) {
        if (template) try {
            if (document.querySelectorAll(template).length) return compile$$1(document.querySelector(template).innerHTML.trim());
        } catch (e) {
            return compile$$1(template);
        }
    }
    function setStyleAndAttributes(node, customAttributes) {
        var copyAttr = {}, literals = [ "style", "class" ];
        extend(copyAttr, customAttributes, {}), "style" in copyAttr && (setStyleAttribute(node, copyAttr[literals[0]]), 
        delete copyAttr[literals[0]]), "class" in copyAttr && (addClass([ node ], copyAttr[literals[1]]), 
        delete copyAttr[literals[1]]), attributes(node, copyAttr);
    }
    function extend$1(copied, first, second, exclude) {
        var moved = extend(copied, first, second);
        return Object.keys(moved).forEach(function(value, index) {
            -1 !== exclude.indexOf(value) && delete moved[value];
        }), moved;
    }
    function prepareColumns(columns, autoWidth) {
        for (var c = 0, len = columns.length; c < len; c++) {
            var column = void 0;
            "string" == typeof columns[c] ? column = new Column({
                field: columns[c]
            }) : columns[c] instanceof Column ? column = columns[c] : columns[c].columns ? (column = new Column(columns[c]), 
            columns[c].columns = prepareColumns(columns[c].columns)) : column = new Column(columns[c]), 
            column.headerText = isNullOrUndefined(column.headerText) ? column.foreignKeyValue || column.field || "" : column.headerText, 
            column.foreignKeyField = column.foreignKeyField || column.field, column.valueAccessor = ("string" == typeof column.valueAccessor ? getValue(column.valueAccessor, window) : column.valueAccessor) || valueAccessor, 
            column.width = autoWidth && isNullOrUndefined(column.width) ? 200 : column.width, 
            isNullOrUndefined(column.visible) && (column.visible = !0), columns[c] = column;
        }
        return columns;
    }
    function setCssInGridPopUp(popUp, e, className) {
        var isBottomTail, popUpSpan = popUp.querySelector("span"), position = popUp.parentElement.getBoundingClientRect(), targetPosition = e.target.getBoundingClientRect();
        popUpSpan.className = className, popUp.style.display = "", isBottomTail = (isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY) > popUp.offsetHeight + 10, 
        popUp.style.top = targetPosition.top - position.top + (isBottomTail ? -(popUp.offsetHeight + 10) : popUp.offsetHeight + 10) + "px", 
        popUp.style.left = function(popup, e, targetPosition, left) {
            var width = popup.offsetWidth / 2, x = getPosition(e).x;
            return x - targetPosition.left < width ? targetPosition.left - left : targetPosition.right - x < width ? targetPosition.right - left - 2 * width : x - left - width;
        }(popUp, e, targetPosition, position.left) + "px", isBottomTail ? (popUp.querySelector(".e-downtail").style.display = "", 
        popUp.querySelector(".e-uptail").style.display = "none") : (popUp.querySelector(".e-downtail").style.display = "none", 
        popUp.querySelector(".e-uptail").style.display = "");
    }
    function getActualProperties(obj) {
        return obj instanceof ChildProperty ? getValue("properties", obj) : obj;
    }
    function parentsUntil(elem, selector, isID) {
        for (var parent = elem; parent && (isID ? parent.id !== selector : !parent.classList.contains(selector)); ) parent = parent.parentElement;
        return parent;
    }
    function getElementIndex(element, elements) {
        for (var index = -1, i = 0, len = elements.length; i < len; i++) if (elements[i].isEqualNode(element)) {
            index = i;
            break;
        }
        return index;
    }
    function inArray(value, collection) {
        for (var i = 0, len = collection.length; i < len; i++) if (collection[i] === value) return i;
        return -1;
    }
    function getActualPropFromColl(collection) {
        for (var coll = [], i = 0, len = collection.length; i < len; i++) collection[i].hasOwnProperty("properties") ? coll.push(collection[i].properties) : coll.push(collection[i]);
        return coll;
    }
    function removeElement(target, selector) {
        for (var elements = [].slice.call(target.querySelectorAll(selector)), i = 0; i < elements.length; i++) remove(elements[i]);
    }
    function getPosition(e) {
        var position = {};
        return position.x = isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX : e.clientX, 
        position.y = isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY : e.clientY, 
        position;
    }
    function getUid(prefix) {
        return prefix + uid$1++;
    }
    function appendChildren(elem, children) {
        for (var i = 0, len = children.length; i < len; i++) len === children.length ? elem.appendChild(children[i]) : elem.appendChild(children[0]);
        return elem;
    }
    function parents(elem, selector, isID) {
        for (var parent = elem, parents = []; parent; ) (isID ? parent.id === selector : parent.classList.contains(selector)) && parents.push(parent), 
        parent = parent.parentElement;
        return parents;
    }
    function calculateAggregate(type, data, column, context) {
        if ("Custom" === type) {
            var temp = column.customAggregate;
            return "string" == typeof temp && (temp = getValue(temp, window)), temp ? temp.call(context, data, column) : "";
        }
        return column.field in data || data instanceof Array ? DataUtil.aggregates[type.toLowerCase()](data, column.field) : null;
    }
    function getScrollBarWidth() {
        if (null !== scrollWidth) return scrollWidth;
        var divNode = document.createElement("div"), value = 0;
        return divNode.style.cssText = "width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;", 
        document.body.appendChild(divNode), value = divNode.offsetWidth - divNode.clientWidth | 0, 
        document.body.removeChild(divNode), scrollWidth = value;
    }
    function getRowHeight(element) {
        if (void 0 !== rowHeight) return rowHeight;
        var table = createElement("table", {
            className: "e-table",
            styles: "visibility: hidden"
        });
        table.innerHTML = '<tr><td class="e-rowcell">A<td></tr>', element.appendChild(table);
        var rect = table.querySelector("td").getBoundingClientRect();
        return element.removeChild(table), rowHeight = Math.ceil(rect.height);
    }
    function isComplexField(field) {
        return field.split(".").length > 1;
    }
    function getComplexFieldID(field) {
        return void 0 === field && (field = ""), field.replace(/\./g, "_");
    }
    function setComplexFieldID(field) {
        return void 0 === field && (field = ""), field.replace(/_/g, ".");
    }
    function isEditable(col, type, elem) {
        var row = parentsUntil(elem, "e-row"), isOldRow = !row || row && !row.classList.contains("e-insertedrow");
        return "beginEdit" === type && isOldRow ? !(col.isIdentity || col.isPrimaryKey || !col.allowEditing) : ("add" !== type || !col.isIdentity || !col.isPrimaryKey) && !(isOldRow && !col.allowEditing && !col.isIdentity && !col.isPrimaryKey);
    }
    function isActionPrevent(inst) {
        var dlg = inst.element.querySelector("#" + inst.element.id + "EditConfirm");
        return "Batch" === inst.editSettings.mode && inst.element.querySelectorAll(".e-updatedtd").length && inst.editSettings.showConfirmDialog && (!dlg || dlg.classList.contains("e-popup-close"));
    }
    function wrap(elem, action) {
        elem = elem instanceof Array ? elem : [ elem ];
        for (var i = 0; i < elem.length; i++) action ? elem[i].classList.add("e-wrap") : elem[i].classList.remove("e-wrap");
    }
    function setFormatter(serviceLocator, column) {
        var fmtr = serviceLocator.getService("valueFormatter");
        switch (column.type) {
          case "date":
            column.setFormatter(fmtr.getFormatFunction({
                type: "date",
                skeleton: column.format
            })), column.setParser(fmtr.getParserFunction({
                type: "date",
                skeleton: column.format
            }));
            break;

          case "datetime":
            column.setFormatter(fmtr.getFormatFunction({
                type: "dateTime",
                skeleton: column.format
            })), column.setParser(fmtr.getParserFunction({
                type: "dateTime",
                skeleton: column.format
            }));
            break;

          case "number":
            column.setFormatter(fmtr.getFormatFunction({
                format: column.format
            })), column.setParser(fmtr.getParserFunction({
                format: column.format
            }));
        }
    }
    function addRemoveActiveClasses(cells, add) {
        for (var args = [], _i = 2; _i < arguments.length; _i++) args[_i - 2] = arguments[_i];
        for (var i = 0, len = cells.length; i < len; i++) add ? (classList(cells[i], args.slice(), []), 
        cells[i].setAttribute("aria-selected", "true")) : (classList(cells[i], [], args.slice()), 
        cells[i].removeAttribute("aria-selected"));
    }
    function distinctStringValues(result) {
        for (var temp = {}, res = [], i = 0; i < result.length; i++) result[i] in temp || (res.push(result[i].toString()), 
        temp[result[i]] = 1);
        return res;
    }
    function getFilterMenuPostion(target, dialogObj, grid) {
        var elementVisible = dialogObj.element.style.display;
        dialogObj.element.style.display = "block";
        var newpos, dlgWidth = dialogObj.width;
        if (grid.enableRtl) {
            newpos = calculatePosition(target, "left", "bottom"), dialogObj.element.style.top = newpos.top + target.getBoundingClientRect().height - 35 + "px", 
            dialogObj.element.style.display = elementVisible;
            leftPos = newpos.left - dlgWidth + target.clientWidth;
            dialogObj.element.style.left = leftPos < 1 ? dlgWidth + leftPos + -16 + "px" : leftPos - 16 + "px";
        } else {
            newpos = calculateRelativeBasedPosition(target, dialogObj.element), dialogObj.element.style.display = elementVisible, 
            dialogObj.element.style.top = newpos.top + target.getBoundingClientRect().height - 5 + "px";
            var leftPos = newpos.left - dlgWidth + target.clientWidth;
            dialogObj.element.style.left = leftPos < 1 ? dlgWidth + leftPos - 16 + "px" : leftPos + -4 + "px";
        }
    }
    function getZIndexCalcualtion(args, dialogObj) {
        args.popup.element.style.zIndex = (dialogObj.zIndex + 1).toString();
    }
    function toogleCheckbox(elem) {
        var span = elem.querySelector(".e-frame");
        span.classList.contains("e-check") ? classList(span, [ "e-uncheck" ], [ "e-check" ]) : classList(span, [ "e-check" ], [ "e-uncheck" ]);
    }
    function createCboxWithWrap(uid, elem, className) {
        var div = createElement("div", {
            className: className
        });
        return div.appendChild(elem), div.setAttribute("uid", uid), div;
    }
    function removeAddCboxClasses(elem, checked) {
        removeClass([ elem ], [ "e-check", "e-stop", "e-uncheck" ]), checked ? elem.classList.add("e-check") : elem.classList.add("e-uncheck");
    }
    function refreshForeignData(row, columns, data) {
        columns.forEach(function(col) {
            setValue(col.field, getForeignData(col, data), row.foreignKeyData);
        }), row.cells.forEach(function(cell) {
            cell.isForeignKey && setValue("foreignKeyData", getValue(cell.column.field, row.foreignKeyData), cell);
        });
    }
    function getForeignData(column, data, lValue, foreignKeyData) {
        var fField = column.foreignKeyField, key = lValue || valueAccessor(column.field, data);
        key = isNullOrUndefined(key) ? "" : key;
        var query = new Query(), fdata = foreignKeyData || (column.dataSource instanceof DataManager && column.dataSource.dataSource.json.length ? column.dataSource.dataSource.json : column.columnData);
        return key.getDay ? query.where(getDatePredicate({
            field: fField,
            operator: "equal",
            value: key,
            matchCase: !1
        })) : query.where(fField, "==", key, !1), new DataManager(fdata).executeLocal(query);
    }
    function getColumnByForeignKeyValue(foreignKeyValue, columns) {
        var column;
        return columns.some(function(col) {
            return column = col, col.foreignKeyValue === foreignKeyValue;
        }) && column;
    }
    function getDatePredicate(filterObject, type) {
        var datePredicate, prevDate, nextDate, prevObj = extend({}, getActualProperties(filterObject)), nextObj = extend({}, getActualProperties(filterObject)), value = new Date(filterObject.value);
        if ("equal" === filterObject.operator || "notequal" === filterObject.operator) {
            "datetime" === type ? (prevDate = new Date(value.setSeconds(value.getSeconds() - 1)), 
            nextDate = new Date(value.setSeconds(value.getSeconds() + 2)), filterObject.value = new Date(value.setSeconds(nextDate.getSeconds() - 1))) : (prevDate = new Date(value.setHours(0) - 1), 
            nextDate = new Date(value.setHours(24))), prevObj.value = prevDate, nextObj.value = nextDate, 
            "equal" === filterObject.operator ? (prevObj.operator = "greaterthan", nextObj.operator = "lessthan") : "notequal" === filterObject.operator && (prevObj.operator = "lessthanorequal", 
            nextObj.operator = "greaterthanorequal");
            var predicateSt = new Predicate$1(prevObj.field, prevObj.operator, prevObj.value, !1), predicateEnd = new Predicate$1(nextObj.field, nextObj.operator, nextObj.value, !1);
            datePredicate = "equal" === filterObject.operator ? predicateSt.and(predicateEnd) : predicateSt.or(predicateEnd);
        } else {
            "string" == typeof prevObj.value && (prevObj.value = new Date(prevObj.value));
            datePredicate = new Predicate$1(prevObj.field, prevObj.operator, prevObj.value, !1);
        }
        return filterObject.setProperties ? filterObject.setProperties({
            ejpredicate: datePredicate
        }, !0) : filterObject.ejpredicate = datePredicate, datePredicate;
    }
    function renderMovable(ele, frzCols) {
        for (var mEle = ele.cloneNode(!0), i = 0; i < frzCols; i++) mEle.removeChild(mEle.children[0]);
        i = frzCols;
        for (var len = ele.childElementCount; i < len; i++) ele.removeChild(ele.children[ele.childElementCount - 1]);
        return mEle;
    }
    function getObject$1(field, object) {
        if (void 0 === field && (field = ""), field) {
            for (var value = object, splits = field.split("."), i = 0; i < splits.length && !isNullOrUndefined(value); i++) value = value[splits[i]];
            return value;
        }
    }
    function getCustomDateFormat(format, colType) {
        var intl = new Internationalization();
        return "date" === colType ? "object" == typeof format ? intl.getDatePattern({
            type: format.type ? format.type : "date",
            format: format.format
        }, !1) : intl.getDatePattern({
            type: "date",
            skeleton: format
        }, !1) : "object" == typeof format ? intl.getDatePattern({
            type: format.type ? format.type : "dateTime",
            format: format.format
        }, !1) : intl.getDatePattern({
            type: "dateTime",
            skeleton: format
        }, !1);
    }
    function createMask() {
        if (attributes(this.element, {
            role: "textbox",
            autocomplete: "off",
            autocorrect: "off",
            autocapitalize: "off",
            spellcheck: "false",
            "aria-live": "assertive",
            "aria-valuenow": ""
        }), this.mask) {
            for (var splitMask = this.mask.split("]"), i = 0; i < splitMask.length; i++) if ("\\" === splitMask[i][splitMask[i].length - 1]) {
                splitMask[i] = splitMask[i] + "]";
                for (var splitInnerMask = splitMask[i].split("["), j = 0; j < splitInnerMask.length; j++) "\\" === splitInnerMask[j][splitInnerMask[j].length - 1] && (splitInnerMask[j] = splitInnerMask[j] + "["), 
                pushIntoRegExpCollec.call(this, splitInnerMask[j]);
            } else {
                if ((splitInnerMask = splitMask[i].split("[")).length > 1) {
                    var chkSpace = !1;
                    for (j = 0; j < splitInnerMask.length; j++) "\\" === splitInnerMask[j] ? (this.customRegExpCollec.push("["), 
                    this.hiddenMask += splitInnerMask[j] + "[") : "" === splitInnerMask[j] ? chkSpace = !0 : "" !== splitInnerMask[j] && chkSpace || j === splitInnerMask.length - 1 ? (this.customRegExpCollec.push("[" + splitInnerMask[j] + "]"), 
                    this.hiddenMask += this.promptChar, chkSpace = !1) : pushIntoRegExpCollec.call(this, splitInnerMask[j]);
                } else pushIntoRegExpCollec.call(this, splitInnerMask[0]);
            }
            if (this.escapeMaskValue = this.hiddenMask, this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar), 
            !isNullOrUndefined(this.customCharacters)) for (i = 0; i < this.promptMask.length; i++) isNullOrUndefined(this.customCharacters[this.promptMask[i]]) || (this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], "g"), this.promptChar));
            var escapeNumber = 0;
            if (this.hiddenMask.match(new RegExp(/\\/))) for (i = 0; i < this.hiddenMask.length; i++) {
                j = 0;
                i >= 2 && (j = i), j -= escapeNumber = this.hiddenMask.length - this.promptMask.length, 
                i > 0 && "\\" !== this.hiddenMask[i - 1] && (">" === this.hiddenMask[i] || "<" === this.hiddenMask[i] || "|" === this.hiddenMask[i]) && (this.promptMask = this.promptMask.substring(0, j) + this.promptMask.substring(i + 1 - escapeNumber, this.promptMask.length), 
                this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue.substring(i + 1 - escapeNumber, this.escapeMaskValue.length)), 
                "\\" === this.hiddenMask[i] && (this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] + this.promptMask.substring(i + 2 - escapeNumber, this.promptMask.length), 
                this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] + this.escapeMaskValue.substring(i + 2 - escapeNumber, this.escapeMaskValue.length));
            } else this.promptMask = this.promptMask.replace(/[>|<]/g, ""), this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, "");
            attributes(this.element, {
                "aria-invalid": "false"
            });
        }
    }
    function applyMask() {
        setElementValue.call(this, this.promptMask), setMaskValue.call(this, this.value);
    }
    function wireEvents() {
        EventHandler.add(this.element, "keydown", maskInputKeyDownHandler, this), EventHandler.add(this.element, "keypress", maskInputKeyPressHandler, this), 
        EventHandler.add(this.element, "keyup", maskInputKeyUpHandler, this), EventHandler.add(this.element, "input", maskInputHandler, this), 
        EventHandler.add(this.element, "focus", maskInputFocusHandler, this), EventHandler.add(this.element, "blur", maskInputBlurHandler, this), 
        EventHandler.add(this.element, "paste", maskInputPasteHandler, this), EventHandler.add(this.element, "cut", maskInputCutHandler, this), 
        EventHandler.add(this.element, "drop", maskInputDropHandler, this), this.enabled && bindClearEvent.call(this);
    }
    function unwireEvents() {
        EventHandler.remove(this.element, "keydown", maskInputKeyDownHandler), EventHandler.remove(this.element, "keypress", maskInputKeyPressHandler), 
        EventHandler.remove(this.element, "keyup", maskInputKeyUpHandler), EventHandler.remove(this.element, "input", maskInputHandler), 
        EventHandler.remove(this.element, "focus", maskInputFocusHandler), EventHandler.remove(this.element, "blur", maskInputBlurHandler), 
        EventHandler.remove(this.element, "paste", maskInputPasteHandler), EventHandler.remove(this.element, "cut", maskInputCutHandler);
    }
    function bindClearEvent() {
        this.showClearButton && EventHandler.add(this.inputObj.clearButton, "mousedown touchstart", resetHandler, this);
    }
    function resetHandler(e) {
        e.preventDefault(), this.inputObj.clearButton.classList.contains("e-clear-icon-hide") || function(event) {
            var value = this.element.value;
            setElementValue.call(this, this.promptMask), this.redoCollec.unshift({
                value: this.promptMask,
                startIndex: this.element.selectionStart,
                endIndex: this.element.selectionEnd
            }), triggerMaskChangeEvent.call(this, event, value), this.element.setSelectionRange(0, 0);
        }.call(this, e);
    }
    function unstrippedValue(element) {
        return element.value;
    }
    function strippedValue(element, maskValues) {
        var value = "", k = 0, checkMask = !1, maskValue = isNullOrUndefined(maskValues) ? isNullOrUndefined(element) || isNullOrUndefined(this) ? maskValues : element.value : maskValues;
        if (maskValue !== this.promptMask) for (var i = 0; i < this.customRegExpCollec.length; i++) checkMask && (checkMask = !1), 
        ">" !== this.customRegExpCollec[k] && "<" !== this.customRegExpCollec[k] && "|" !== this.customRegExpCollec[k] && "\\" !== this.customRegExpCollec[k] || (--i, 
        checkMask = !0), checkMask || maskValue[i] === this.promptChar || isNullOrUndefined(this.customRegExpCollec[k]) || isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]]) && !(this.customRegExpCollec[k].length > 2 && "[" === this.customRegExpCollec[k][0] && "]" === this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1]) && (isNullOrUndefined(this.customCharacters) || isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]])) || "" === maskValue || (value += maskValue[i]), 
        ++k;
        return (null === this.mask || "" === this.mask && void 0 !== this.value) && (value = maskValue), 
        value;
    }
    function pushIntoRegExpCollec(value) {
        for (var k = 0; k < value.length; k++) this.hiddenMask += value[k], "\\" !== value[k] && this.customRegExpCollec.push(value[k]);
    }
    function maskInputFocusHandler(event) {
        var _this = this;
        this.promptMask.length > 0 ? this.focusEventArgs = {
            selectionStart: 0,
            selectionEnd: this.promptMask.length
        } : this.focusEventArgs = {
            selectionStart: 0,
            selectionEnd: this.element.value.length
        };
        var eventArgs = {};
        if (merge(eventArgs, this.focusEventArgs), this.trigger("focus", eventArgs), this.focusEventArgs = eventArgs, 
        this.mask) if (this.isFocus = !0, "" === this.element.value ? setElementValue.call(this, this.promptMask) : setElementValue.call(this, this.element.value), 
        Browser.isDevice || "11.0" !== Browser.info.version) {
            var delay = Browser.isDevice && Browser.isIos ? 450 : 0;
            setTimeout(function() {
                _this.element.setSelectionRange(_this.focusEventArgs.selectionStart, _this.focusEventArgs.selectionEnd);
            }, delay);
        } else this.element.setSelectionRange(this.focusEventArgs.selectionStart, this.focusEventArgs.selectionEnd);
    }
    function maskInputBlurHandler(event) {
        if (this.mask && (this.isFocus = !1, this.placeholder && this.element.value === this.promptMask && "Always" !== this.floatLabelType)) {
            setElementValue.call(this, "");
            var labelElement = this.element.parentNode.querySelector(".e-float-text");
            "Auto" === this.floatLabelType && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && removeClass([ labelElement ], TOPLABEL);
        }
    }
    function maskInputPasteHandler(event) {
        var _this = this;
        if (this.mask) {
            var sIndex_1 = this.element.selectionStart, eIndex_1 = this.element.selectionEnd, oldValue_1 = this.element.value;
            setElementValue.call(this, ""), this._callPasteHandler = !0, setTimeout(function() {
                var value = _this.element.value.replace(/ /g, "");
                _this.redoCollec.length > 0 && _this.redoCollec[0].value === _this.element.value && (value = strippedValue.call(_this, _this.element)), 
                setElementValue.call(_this, oldValue_1), _this.element.selectionStart = sIndex_1, 
                _this.element.selectionEnd = eIndex_1;
                var i = 0;
                _this.maskKeyPress = !0;
                do {
                    validateValue.call(_this, value[i], !1, null), ++i;
                } while (i < value.length);
                if (_this.maskKeyPress = !1, _this._callPasteHandler = !1, _this.element.value === oldValue_1) {
                    var i_1 = 0;
                    _this.maskKeyPress = !0;
                    do {
                        validateValue.call(_this, value[i_1], !1, null), ++i_1;
                    } while (i_1 < value.length);
                    _this.maskKeyPress = !1;
                } else triggerMaskChangeEvent.call(_this, event, oldValue_1);
            }, 1);
        }
    }
    function maskInputCutHandler(event) {
        var _this = this;
        if (this.mask) {
            var preValue_1 = this.element.value, sIndex_2 = this.element.selectionStart, eIndex = this.element.selectionEnd;
            this.undoCollec.push({
                value: this.element.value,
                startIndex: this.element.selectionStart,
                endIndex: this.element.selectionEnd
            });
            var value_1 = this.element.value.substring(0, sIndex_2) + this.promptMask.substring(sIndex_2, eIndex) + this.element.value.substring(eIndex);
            setTimeout(function() {
                setElementValue.call(_this, value_1), _this.element.selectionStart = _this.element.selectionEnd = sIndex_2, 
                _this.element.value !== preValue_1 && triggerMaskChangeEvent.call(_this, event, null);
            }, 0);
        }
    }
    function maskInputDropHandler(event) {
        event.preventDefault();
    }
    function maskInputHandler(event) {
        if (!0 !== Browser.isIE || "" !== this.element.value || "Never" !== this.floatLabelType) {
            if (extend(event, {
                ctrlKey: !1,
                keyCode: 229
            }), this.mask) {
                if ("" === this.element.value && this.redoCollec.unshift({
                    value: this.promptMask,
                    startIndex: this.element.selectionStart,
                    endIndex: this.element.selectionEnd
                }), 1 === this.element.value.length && (this.element.value = this.element.value + this.promptMask, 
                this.element.setSelectionRange(1, 1)), this._callPasteHandler || removeMaskInputValues.call(this, event), 
                this.element.value.length > this.promptMask.length) {
                    var startIndex = this.element.selectionStart, addedValues = this.element.value.length - this.promptMask.length, value = this.element.value.substring(startIndex - addedValues, startIndex);
                    this.maskKeyPress = !1;
                    var i = 0;
                    do {
                        validateValue.call(this, value[i], event.ctrlKey, event), ++i;
                    } while (i < value.length);
                    this.element.value !== this.preEleVal && triggerMaskChangeEvent.call(this, event, null);
                }
                var val = strippedValue.call(this, this.element);
                this.prevValue = val, this.value = val, "" === val && (setElementValue.call(this, this.promptMask), 
                this.element.setSelectionRange(0, 0));
            }
        }
    }
    function maskInputKeyDownHandler(event) {
        if (this.mask) {
            229 !== event.keyCode && (!event.ctrlKey || 89 !== event.keyCode && 90 !== event.keyCode || event.preventDefault(), 
            removeMaskInputValues.call(this, event));
            var startValue = this.element.value;
            if (event.ctrlKey && (89 === event.keyCode || 90 === event.keyCode)) {
                var collec = void 0;
                90 === event.keyCode && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value ? (collec = this.undoCollec[this.undoCollec.length - 1], 
                this.redoCollec.unshift({
                    value: this.element.value,
                    startIndex: this.element.selectionStart,
                    endIndex: this.element.selectionEnd
                }), setElementValue.call(this, collec.value), this.element.selectionStart = collec.startIndex, 
                this.element.selectionEnd = collec.endIndex, this.undoCollec.splice(this.undoCollec.length - 1, 1)) : 89 === event.keyCode && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value && (collec = this.redoCollec[0], 
                this.undoCollec.push({
                    value: this.element.value,
                    startIndex: this.element.selectionStart,
                    endIndex: this.element.selectionEnd
                }), setElementValue.call(this, collec.value), this.element.selectionStart = collec.startIndex, 
                this.element.selectionEnd = collec.endIndex, this.redoCollec.splice(0, 1));
            }
        }
    }
    function mobileRemoveFunction() {
        var collec, sIndex = this.element.selectionStart, eIndex = this.element.selectionEnd;
        this.redoCollec.length > 0 ? (collec = this.redoCollec[0], setElementValue.call(this, collec.value), 
        collec.startIndex - sIndex == 1 ? (this.element.selectionStart = collec.startIndex, 
        this.element.selectionEnd = collec.endIndex) : (this.element.selectionStart = sIndex + 1, 
        this.element.selectionEnd = eIndex + 1)) : (setElementValue.call(this, this.promptMask), 
        this.element.selectionStart = this.element.selectionEnd = sIndex);
    }
    function autoFillMaskInputValues(isRemove, oldEventVal, event) {
        return "input" === event.type && (isRemove = !1, oldEventVal = this.element.value, 
        setElementValue.call(this, this.promptMask), setMaskValue.call(this, oldEventVal)), 
        isRemove;
    }
    function removeMaskInputValues(event) {
        var oldEventVal, isRemove = !1, isDeleted = !1;
        this.element.value.length < this.promptMask.length && (isRemove = !0, oldEventVal = this.element.value, 
        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event), mobileRemoveFunction.call(this)), 
        this.element.value.length >= this.promptMask.length && "input" === event.type && (isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event));
        var initStartIndex = this.element.selectionStart, initEndIndex = this.element.selectionEnd, startIndex = this.element.selectionStart, endIndex = this.element.selectionEnd, maskValue = this.hiddenMask.replace(/[>|\\<]/g, ""), curMask = maskValue[startIndex - 1];
        this.element.parentNode;
        if (isRemove || 8 === event.keyCode || 46 === event.keyCode) {
            this.undoCollec.push({
                value: this.element.value,
                startIndex: this.element.selectionStart,
                endIndex: endIndex
            });
            var multipleDel = !1, preValue = this.element.value;
            if (startIndex > 0 || (8 === event.keyCode || 46 === event.keyCode) && startIndex < this.element.value.length && this.element.selectionEnd - startIndex !== this.element.value.length) {
                var index = startIndex;
                startIndex !== endIndex ? (startIndex = endIndex, 46 === event.keyCode && (multipleDel = !0)) : 46 === event.keyCode ? ++index : --index;
                for (var k = startIndex; 8 === event.keyCode || isRemove || multipleDel ? k > index : k < index; 8 === event.keyCode || isRemove || multipleDel ? k-- : k++) for (var i = startIndex; 8 === event.keyCode || isRemove || multipleDel ? i > 0 : i < this.element.value.length; 8 === event.keyCode || isRemove || multipleDel ? i-- : i++) {
                    var sIndex = void 0;
                    (8 === event.keyCode || multipleDel) && (initStartIndex !== initEndIndex && initStartIndex !== startIndex || initStartIndex === initEndIndex) || isRemove ? (curMask = maskValue[i - 1], 
                    sIndex = startIndex - 1) : (curMask = maskValue[i], sIndex = startIndex, ++startIndex);
                    var oldValue = this.element.value[sIndex];
                    if (isNullOrUndefined(this.regExpCollec[curMask]) && !isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask]) && this.hiddenMask[sIndex] !== this.promptChar && "[" !== this.customRegExpCollec[sIndex][0] && "]" !== this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] || this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters)) this.element.selectionStart = this.element.selectionEnd = sIndex, 
                    event.preventDefault(), 46 !== event.keyCode || multipleDel || ++this.element.selectionStart; else {
                        var value = this.element.value, prompt_1 = this.promptChar, elementValue = value.substring(0, sIndex) + prompt_1 + value.substring(startIndex, value.length);
                        setElementValue.call(this, elementValue), event.preventDefault(), this.element.selectionStart = this.element.selectionEnd = sIndex, 
                        isDeleted = !0;
                    }
                    if (startIndex = this.element.selectionStart, !isDeleted && 8 === event.keyCode || multipleDel || !isDeleted && 46 !== event.keyCode ? sIndex = startIndex - 1 : (sIndex = startIndex, 
                    isDeleted = !1), oldValue = this.element.value[sIndex], initStartIndex !== initEndIndex && this.element.selectionStart === initStartIndex || this.promptMask[sIndex] === this.promptChar || oldValue !== this.promptMask[sIndex] && this.promptMask[sIndex] !== this.promptChar && !isNullOrUndefined(this.customCharacters)) break;
                }
            }
            0 === this.element.selectionStart && this.element.selectionEnd === this.element.value.length && (setElementValue.call(this, this.promptMask), 
            event.preventDefault(), this.element.selectionStart = this.element.selectionEnd = startIndex), 
            this.redoCollec.unshift({
                value: this.element.value,
                startIndex: this.element.selectionStart,
                endIndex: this.element.selectionEnd
            }), this.element.value !== preValue && triggerMaskChangeEvent.call(this, event, oldEventVal);
        }
    }
    function maskInputKeyPressHandler(event) {
        if (this.mask) {
            var oldValue = this.element.value;
            if (!event.ctrlKey || event.ctrlKey && "KeyA" !== event.code && "KeyY" !== event.code && "KeyZ" !== event.code && "KeyX" !== event.code && "KeyC" !== event.code && "KeyV" !== event.code) {
                this.maskKeyPress = !0;
                var key = event.key;
                "Spacebar" === key && (key = String.fromCharCode(event.keyCode)), key ? key && 1 === key.length && (validateValue.call(this, key, event.ctrlKey, event), 
                event.preventDefault()) : (this.isIosInvalid = !0, validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event), 
                event.preventDefault(), this.isIosInvalid = !1), 32 === event.keyCode && " " === key && " " === this.promptChar && (this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length);
            }
            this.element.value !== oldValue && triggerMaskChangeEvent.call(this, event, oldValue);
        }
    }
    function triggerMaskChangeEvent(event, oldValue) {
        if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {
            var eventArgs = {};
            this.changeEventArgs = {
                value: this.element.value,
                maskedValue: this.element.value,
                isInteraction: !1
            }, this.mask && (this.changeEventArgs.value = strippedValue.call(this, this.element)), 
            isNullOrUndefined(event) || (this.changeEventArgs.isInteraction = !0, this.changeEventArgs.event = event), 
            merge(eventArgs, this.changeEventArgs), this.trigger("change", eventArgs);
        }
        this.preEleVal = this.element.value, this.prevValue = strippedValue.call(this, this.element), 
        attributes(this.element, {
            "aria-valuenow": this.element.value
        });
    }
    function maskInputKeyUpHandler(event) {
        if (this.mask) {
            var collec = void 0, key = event.key;
            if (key && 1 === key.length && "Never" === this.floatLabelType && this.undoCollec.length > 0 && this.undoCollec[this.undoCollec.length - 1].value === this.element.value && validateValue.call(this, key, event.ctrlKey, event), 
            this.maskKeyPress || 229 !== event.keyCode) removeMaskError.call(this); else {
                var oldEventVal = void 0;
                if (1 === this.element.value.length && (this.element.value = this.element.value + this.promptMask, 
                this.element.setSelectionRange(1, 1)), this.element.value.length > this.promptMask.length) {
                    var startIndex = this.element.selectionStart, addedValues = this.element.value.length - this.promptMask.length, val_1 = this.element.value.substring(startIndex - addedValues, startIndex);
                    if (this.undoCollec.length > 0) {
                        collec = this.undoCollec[this.undoCollec.length - 1];
                        var startIndex_1 = this.element.selectionStart;
                        oldEventVal = collec.value;
                        var oldVal = collec.value.substring(startIndex_1 - addedValues, startIndex_1);
                        collec = this.redoCollec[0], val_1 = val_1.trim();
                        var isSpace = Browser.isAndroid && "" === val_1;
                        isSpace || oldVal === val_1 || collec.value.substring(startIndex_1 - addedValues, startIndex_1) === val_1 ? isSpace && preventUnsupportedValues.call(this, event, startIndex_1 - 1, this.element.selectionEnd - 1, val_1, event.ctrlKey, !1) : validateValue.call(this, val_1, event.ctrlKey, event);
                    } else oldEventVal = this.promptMask, validateValue.call(this, val_1, event.ctrlKey, event);
                    this.maskKeyPress = !1, triggerMaskChangeEvent.call(this, event, oldEventVal);
                }
            }
            var val = strippedValue.call(this, this.element);
            (0 !== this.element.selectionStart || this.promptMask !== this.element.value || "" !== val || "" === val && this.value !== val) && (this.prevValue = val, 
            this.value = val);
        } else triggerMaskChangeEvent.call(this, event), this.value = this.element.value;
        if (0 === this.element.selectionStart && 0 === this.element.selectionEnd) {
            var temp_1 = this.element;
            setTimeout(function() {
                temp_1.setSelectionRange(0, 0);
            }, 0);
        }
    }
    function mobileValidation(key) {
        this.maskKeyPress || function(key) {
            if (key.length > 1 && this.promptMask.length + key.length < this.element.value.length) {
                var elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key + this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);
                setElementValue.call(this, elementValue), this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;
            }
            this.element.selectionStart = this.element.selectionStart - key.length, this.element.selectionEnd = this.element.selectionEnd - key.length;
        }.call(this, key);
    }
    function validateValue(key, isCtrlKey, event) {
        if (mobileValidation.call(this, key), !isNullOrUndefined(this) && !isNullOrUndefined(key)) for (var curMask, eventOldVal, startIndex = this.element.selectionStart, initStartIndex = startIndex, allowText = (this.element.selectionEnd, 
        !1), value = this.element.value, prevSupport = !1, isEqualVal = !1, k = 0; k < key.length; k++) {
            var keyValue = key[k];
            if (startIndex = this.element.selectionStart, this.element.selectionEnd, this.maskKeyPress || initStartIndex !== startIndex || (startIndex += k), 
            !this.maskKeyPress || startIndex < this.promptMask.length) {
                for (var i = startIndex; i < this.promptMask.length; i++) {
                    curMask = this.escapeMaskValue[startIndex], "\\" === this.hiddenMask[startIndex] && this.hiddenMask[startIndex + 1] === key && (isEqualVal = !0), 
                    (isNullOrUndefined(this.regExpCollec[curMask]) && (isNullOrUndefined(this.customCharacters) || !isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])) && this.hiddenMask[startIndex] !== this.promptChar && "[" !== this.customRegExpCollec[startIndex][0] && "]" !== this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] || this.promptMask[startIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters) || this.promptChar === curMask && this.escapeMaskValue === this.mask) && (this.element.selectionStart = this.element.selectionEnd = startIndex + 1, 
                    startIndex = this.element.selectionStart, curMask = this.hiddenMask[startIndex]);
                }
                if (isNullOrUndefined(this.customCharacters) || isNullOrUndefined(this.customCharacters[curMask])) !isNullOrUndefined(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask])) && this.promptMask[startIndex] === this.promptChar ? allowText = !0 : this.promptMask[startIndex] === this.promptChar && "[" === this.customRegExpCollec[startIndex][0] && "]" === this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] && keyValue.match(new RegExp(this.customRegExpCollec[startIndex])) && (allowText = !0); else {
                    var customValArr = this.customCharacters[curMask].split(",");
                    for (i = 0; i < customValArr.length; i++) if (keyValue.match(new RegExp("[" + customValArr[i] + "]"))) {
                        allowText = !0;
                        break;
                    }
                }
                if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {
                    if (0 === k) if (this.maskKeyPress) this.undoCollec.push({
                        value: value,
                        startIndex: startIndex,
                        endIndex: startIndex
                    }); else {
                        var sIndex = this.element.selectionStart, eIndex = this.element.selectionEnd;
                        this.redoCollec.length > 0 ? (eventOldVal = this.redoCollec[0].value, setElementValue.call(this, eventOldVal), 
                        this.undoCollec.push(this.redoCollec[0])) : (this.undoCollec.push({
                            value: this.promptMask,
                            startIndex: startIndex,
                            endIndex: startIndex
                        }), eventOldVal = this.promptMask, setElementValue.call(this, eventOldVal)), this.element.selectionStart = sIndex, 
                        this.element.selectionEnd = eIndex;
                    }
                    startIndex = this.element.selectionStart, function(event, startIndex, keyValue, eventOldVal, isEqualVal) {
                        this.hiddenMask.length > this.promptMask.length && (keyValue = function(key, value) {
                            var promptMask, i, curVal = value, caseCount = 0;
                            for (i = 0; i < this.hiddenMask.length; i++) if ("\\" === this.hiddenMask[i] && (promptMask = curVal.substring(0, i) + "\\" + curVal.substring(i, curVal.length)), 
                            ">" !== this.hiddenMask[i] && "<" !== this.hiddenMask[i] && "|" !== this.hiddenMask[i] || (this.hiddenMask[i] !== curVal[i] && (promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length)), 
                            ++caseCount), promptMask) {
                                if (promptMask[i] === this.promptChar && i > this.element.selectionStart || this.element.value.indexOf(this.promptChar) < 0 && this.element.selectionStart + caseCount === i) {
                                    caseCount = 0;
                                    break;
                                }
                                curVal = promptMask;
                            }
                            for (;i >= 0 && promptMask; ) {
                                if (0 === i || "\\" !== promptMask[i - 1]) {
                                    this.element.value;
                                    if (">" === promptMask[i]) {
                                        key = key.toUpperCase();
                                        break;
                                    }
                                    if ("<" === promptMask[i]) {
                                        key = key.toLowerCase();
                                        break;
                                    }
                                    if ("|" === promptMask[i]) break;
                                }
                                --i;
                            }
                            return key;
                        }.call(this, keyValue, this.element.value));
                        if (!isEqualVal) {
                            var value = this.element.value, elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);
                            setElementValue.call(this, elementValue), this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
                        }
                    }.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal), prevSupport = !0, 
                    k === key.length - 1 && this.redoCollec.unshift({
                        value: this.element.value,
                        startIndex: this.element.selectionStart,
                        endIndex: this.element.selectionEnd
                    }), allowText = !1;
                } else startIndex = this.element.selectionStart, preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);
                k !== key.length - 1 || allowText || (!Browser.isAndroid || Browser.isAndroid && startIndex < this.promptMask.length) && this.redoCollec.unshift({
                    value: this.element.value,
                    startIndex: this.element.selectionStart,
                    endIndex: this.element.selectionEnd
                });
            } else 1 !== key.length || isCtrlKey || isNullOrUndefined(event) || addMaskErrorClass.call(this);
        }
    }
    function preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {
        if (!this.maskKeyPress) {
            var value = this.element.value;
            sIdx >= this.promptMask.length ? setElementValue.call(this, value.substring(0, sIdx)) : (idx === sIdx ? setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length)) : this.promptMask.length === this.element.value.length ? setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length)) : setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length)), 
            this.element.selectionStart = this.element.selectionEnd = chkSupport || this.element.value[idx] !== this.promptChar ? sIdx : idx), 
            this.element.value, addMaskErrorClass.call(this);
        }
        1 !== key.length || ctrl || isNullOrUndefined(event) || addMaskErrorClass.call(this);
    }
    function addMaskErrorClass() {
        var _this = this, parentElement = this.element.parentNode, timer = 200;
        parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT) ? addClass([ parentElement ], ERROR$1) : addClass([ this.element ], ERROR$1), 
        !0 === this.isIosInvalid && (timer = 400), attributes(this.element, {
            "aria-invalid": "true"
        }), setTimeout(function() {
            _this.maskKeyPress || removeMaskError.call(_this);
        }, timer);
    }
    function removeMaskError() {
        removeClass([ this.element.parentNode ], ERROR$1), removeClass([ this.element ], ERROR$1), 
        attributes(this.element, {
            "aria-invalid": "false"
        });
    }
    function setMaskValue(val) {
        if (this.mask && void 0 !== val && (void 0 === this.prevValue || this.prevValue !== val)) {
            if (this.maskKeyPress = !0, null === val && "Never" === this.floatLabelType && this.placeholder ? setElementValue.call(this, this.promptMask) : "" !== val && (setElementValue.call(this, this.promptMask), 
            this.element.selectionStart = 0, this.element.selectionEnd = 0), null !== val) for (var i = 0; i < val.length; i++) validateValue.call(this, val[i], !1, null);
            var newVal = strippedValue.call(this, this.element);
            this.prevValue = newVal, this.value = newVal, triggerMaskChangeEvent.call(this, null, null), 
            this.maskKeyPress = !1;
            var labelElement = this.element.parentNode.querySelector(".e-float-text");
            this.element.value === this.promptMask && "Auto" === this.floatLabelType && this.placeholder && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus && (removeClass([ labelElement ], TOPLABEL), 
            addClass([ labelElement ], BOTTOMLABEL), setElementValue.call(this, ""));
        }
        (null === this.mask || "" === this.mask && void 0 !== this.value) && setElementValue.call(this, this.value);
    }
    function setElementValue(val, element) {
        !this.isFocus && "Auto" === this.floatLabelType && this.placeholder && isNullOrUndefined(this.value) && (val = "");
        var value = strippedValue.call(this, element || this.element, val);
        null === value || "" === value ? (Input.setValue(val, element || this.element, this.floatLabelType, !1), 
        this.showClearButton && this.inputObj.clearButton.classList.add("e-clear-icon-hide")) : Input.setValue(val, element || this.element, this.floatLabelType, this.showClearButton);
    }
    function getMaskInput(args) {
        addClass([ args.element ], UTILMASK);
        var inputEle = {
            element: args.element,
            mask: args.mask,
            promptMask: "",
            hiddenMask: "",
            escapeMaskValue: "",
            promptChar: args.promptChar ? args.promptChar.length > 1 ? args.promptChar = args.promptChar[0] : args.promptChar : "_",
            value: args.value ? args.value : null,
            regExpCollec: regularExpressions,
            customRegExpCollec: [],
            customCharacters: args.customCharacters,
            undoCollec: [],
            redoCollec: [],
            maskKeyPress: !1,
            prevValue: ""
        };
        return createMask.call(inputEle), inputEle;
    }
    function getUtilMaskEle(args) {
        var inputEle;
        return !isNullOrUndefined(args) && args.element.classList.contains(UTILMASK) && (inputEle = getMaskInput(args)), 
        inputEle;
    }
    function getModel(props, model) {
        for (var obj = extend({}, props), _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
            var prop = _a[_i];
            model.indexOf(prop) < 0 && deleteObject(obj, prop);
        }
        return obj;
    }
    function setStateAndProperties(target, attribute, value, remove) {
        remove ? target.removeAttribute(attribute) : target && target.setAttribute(attribute, value);
    }
    function Search$1(inputVal, items, searchType, ignoreCase) {
        var listItems = items;
        ignoreCase = void 0 === ignoreCase || null === ignoreCase || ignoreCase;
        var itemData = {
            item: null,
            index: null
        };
        if (inputVal.length) {
            for (var strLength = inputVal.length, queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal, i = 0, itemsData = listItems; i < itemsData.length; i++) {
                var item = itemsData[i], text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, "");
                if ("Equal" === searchType && text === queryStr || "StartsWith" === searchType && text.substr(0, strLength) === queryStr) return itemData.item = item, 
                itemData.index = i, {
                    item: item,
                    index: i
                };
            }
            return itemData;
        }
        return itemData;
    }
    function highlightSearch(element, query, ignoreCase, type) {
        if ("" !== query) {
            var ignoreRegex = ignoreCase ? "gim" : "gm";
            query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            var replaceQuery = "StartsWith" === type ? "^(" + query + ")" : "EndsWith" === type ? "(" + query + ")$" : "(" + query + ")";
            findTextNode(element, new RegExp(replaceQuery, ignoreRegex));
        }
    }
    function findTextNode(element, pattern) {
        for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {
            if (3 === element.childNodes[index].nodeType) {
                element.innerHTML = element.innerHTML.replace(pattern, '<span class="e-highlight">$1</span>');
                break;
            }
            findTextNode(element.childNodes[index], pattern);
        }
    }
    function getFieldValues(dataItem, fields) {
        var fieldData = {};
        if (isNullOrUndefined(dataItem) || "string" == typeof dataItem || "number" == typeof dataItem || !isNullOrUndefined(dataItem.isHeader)) return dataItem;
        for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
            var dataField = fields[_a[_i]], value = isNullOrUndefined(dataField) || "string" != typeof dataField ? void 0 : getValue(dataField, dataItem);
            isNullOrUndefined(value) || (fieldData[dataField] = value);
        }
        return fieldData;
    }
    function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {
        var floatLinelement, floatLabelElement;
        floatLinelement = createElement("span", {
            className: FLOATLINE
        }), floatLabelElement = createElement("label", {
            className: FLOATTEXT
        }), isNullOrUndefined(element.id) || "" === element.id || (floatLabelElement.id = "label_" + element.id.replace(/ /g, "_"), 
        attributes(element, {
            "aria-labelledby": floatLabelElement.id
        })), isNullOrUndefined(inputElement.placeholder) || "" === inputElement.placeholder || (floatLabelElement.innerHTML = inputElement.placeholder, 
        inputElement.removeAttribute("placeholder")), isNullOrUndefined(placeholder) || "" === placeholder || (floatLabelElement.innerHTML = placeholder), 
        searchWrapper.appendChild(floatLinelement), searchWrapper.appendChild(floatLabelElement), 
        overAllWrapper.classList.add("e-float-input"), function(value, label) {
            value && value.length > 0 ? (addClass([ label ], LABELTOP), removeClass([ label ], LABELBOTTOM)) : (removeClass([ label ], LABELTOP), 
            addClass([ label ], LABELBOTTOM));
        }(value, floatLabelElement), "Always" === floatLabelType && (floatLabelElement.classList.contains(LABELBOTTOM) && removeClass([ floatLabelElement ], LABELBOTTOM), 
        addClass([ floatLabelElement ], LABELTOP));
    }
    function setPlaceHolder(value, inputElement, placeholder) {
        value && value.length ? inputElement.placeholder = "" : inputElement.placeholder = placeholder;
    }
    function summaryIterator(aggregates, callback) {
        aggregates.forEach(function(row) {
            row.columns.forEach(function(column) {
                callback(column, row);
            });
        });
    }
    function dateanddatetimerender(args, mode, rtl) {
        var isInline = "Dialog" !== mode, format = getCustomDateFormat(args.column.format, args.column.type), value = getObject$1(args.column.field, args.rowData);
        return value = value ? new Date(value) : null, {
            floatLabelType: isInline ? "Never" : "Always",
            value: value,
            format: format,
            placeholder: isInline ? "" : args.column.headerText,
            enableRtl: rtl,
            enabled: isEditable(args.column, args.type, args.element)
        };
    }
    function validateNullOrUndefined(value, message) {
        if (null === value || void 0 === value) throw new Error("ArgumentException: " + message + " cannot be null or undefined");
    }
    function defaultToString(item) {
        return "[object String]" === Object.prototype.toString.call(item) ? "$s" + item : "$o" + item.toString();
    }
    function Search$2(inputVal, items, searchType, ignoreCase) {
        var listItems = items;
        ignoreCase = void 0 === ignoreCase || null === ignoreCase || ignoreCase;
        var itemData = {
            item: null,
            index: null
        };
        if (inputVal.length) {
            for (var strLength = inputVal.length, queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal, i = 0, itemsData = listItems; i < itemsData.length; i++) {
                var item = itemsData[i], text = (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, "");
                if ("Equal" === searchType && text === queryStr || "StartsWith" === searchType && text.substr(0, strLength) === queryStr) return itemData.item = item, 
                itemData.index = i, {
                    item: item,
                    index: i
                };
            }
            return itemData;
        }
        return itemData;
    }
    function highlightSearch$1(element, query, ignoreCase, type) {
        if ("" !== query) {
            var ignoreRegex = ignoreCase ? "gim" : "gm";
            query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            var replaceQuery = "StartsWith" === type ? "^(" + query + ")" : "EndsWith" === type ? "(" + query + ")$" : "(" + query + ")";
            findTextNode$1(element, new RegExp(replaceQuery, ignoreRegex));
        }
    }
    function findTextNode$1(element, pattern) {
        for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {
            if (3 === element.childNodes[index].nodeType) {
                element.innerHTML = element.innerHTML.replace(pattern, '<span class="e-highlight">$1</span>');
                break;
            }
            findTextNode$1(element.childNodes[index], pattern);
        }
    }
    function copy(copied, first, second, deep) {
        var result = copied || {}, length = arguments.length;
        deep && (length -= 1);
        for (var _loop_1 = function(i) {
            if (!arguments_1[i]) return "continue";
            var obj1 = arguments_1[i];
            Object.keys(obj1).forEach(function(key) {
                var clone, src = result[key], copy = obj1[key];
                deep && (isObject(copy) || Array.isArray(copy)) ? isObject(copy) ? (clone = src || {}, 
                result[key] = copy({}, clone, copy, deep)) : (clone = src || [], result[key] = copy([], clone, copy, deep)) : result[key] = copy;
            });
        }, arguments_1 = arguments, i = 1; i < length; i++) _loop_1(i);
        return result;
    }
    var instances = "ej2_instances", uid = 0, headerRegex = /^(.*?):[ \t]*([^\r\n]*)$/gm, defaultType = "GET", Ajax = function() {
        function Ajax(options, type, async, contentType) {
            this.mode = !0, this.emitError = !0, this.options = {}, "string" == typeof options ? (this.url = options, 
            this.type = type ? type.toUpperCase() : defaultType, this.mode = !!isNullOrUndefined(async) || async) : "object" == typeof options && (this.options = options, 
            merge(this, this.options)), this.type = this.type ? this.type.toUpperCase() : defaultType, 
            this.contentType = void 0 !== this.contentType ? this.contentType : contentType;
        }
        return Ajax.prototype.send = function(data) {
            var _this = this;
            this.data = isNullOrUndefined(data) ? this.data : data;
            var eventArgs = {
                cancel: !1
            };
            return new Promise(function(resolve, reject) {
                _this.httpRequest = new XMLHttpRequest(), _this.httpRequest.onreadystatechange = function() {
                    _this.stateChange(resolve, reject);
                }, isNullOrUndefined(_this.onLoad) || (_this.httpRequest.onload = _this.onLoad), 
                isNullOrUndefined(_this.onProgress) || (_this.httpRequest.onprogress = _this.onProgress), 
                isNullOrUndefined(_this.onAbort) || (_this.httpRequest.onabort = _this.onAbort), 
                isNullOrUndefined(_this.onError) || (_this.httpRequest.onerror = _this.onError), 
                isNullOrUndefined(_this.onUploadProgress) || (_this.httpRequest.upload.onprogress = _this.onUploadProgress), 
                _this.httpRequest.open(_this.type, _this.url, _this.mode), isNullOrUndefined(_this.data) || null === _this.contentType || _this.httpRequest.setRequestHeader("Content-Type", _this.contentType || "application/json; charset=utf-8"), 
                _this.beforeSend && _this.beforeSend(eventArgs), eventArgs.cancel || _this.httpRequest.send(isNullOrUndefined(_this.data) ? null : _this.data);
            });
        }, Ajax.prototype.successHandler = function(data) {
            return this.onSuccess && this.onSuccess(data, this), data;
        }, Ajax.prototype.failureHandler = function(reason) {
            return this.onFailure && this.onFailure(this.httpRequest), reason;
        }, Ajax.prototype.stateChange = function(resolve, reject) {
            var data = this.httpRequest.responseText;
            if (this.dataType && "json" === this.dataType.toLowerCase()) if ("" === data) data = void 0; else try {
                data = JSON.parse(data);
            } catch (error) {}
            4 === this.httpRequest.readyState && (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || 304 === this.httpRequest.status ? resolve(this.successHandler(data)) : this.emitError ? reject(new Error(this.failureHandler(this.httpRequest.statusText))) : resolve());
        }, Ajax.prototype.getResponseHeader = function(key) {
            var responseHeaders, header;
            responseHeaders = {};
            for (var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders()); headers; ) responseHeaders[headers[1].toLowerCase()] = headers[2], 
            headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());
            return header = responseHeaders[key.toLowerCase()], isNullOrUndefined(header) ? null : header;
        }, Ajax;
    }(), EventHandler = function() {
        function EventHandler() {}
        return EventHandler.addOrGetEventData = function(element) {
            return "__eventList" in element ? element.__eventList.events : (element.__eventList = {}, 
            element.__eventList.events = []);
        }, EventHandler.add = function(element, eventName, listener, bindTo, intDebounce) {
            var debounceListener, eventData = EventHandler.addOrGetEventData(element);
            debounceListener = intDebounce ? debounce(listener, intDebounce) : listener, bindTo && (debounceListener = debounceListener.bind(bindTo));
            for (var event = eventName.split(" "), i = 0; i < event.length; i++) eventData.push({
                name: event[i],
                listener: listener,
                debounce: debounceListener
            }), element.addEventListener(event[i], debounceListener);
            return debounceListener;
        }, EventHandler.remove = function(element, eventName, listener) {
            for (var eventData = EventHandler.addOrGetEventData(element), event = eventName.split(" "), _loop_1 = function(j) {
                var debounceListener, index = -1;
                eventData && 0 !== eventData.length && eventData.some(function(x, i) {
                    return x.name === event[j] && x.listener === listener && (index = i, debounceListener = x.debounce, 
                    !0);
                }), -1 !== index && eventData.splice(index, 1), debounceListener && element.removeEventListener(event[j], debounceListener);
            }, j = 0; j < event.length; j++) _loop_1(j);
        }, EventHandler.clearEvents = function(element) {
            var eventData, copyData;
            copyData = extend([], copyData, eventData = EventHandler.addOrGetEventData(element));
            for (var i = 0; i < copyData.length; i++) element.removeEventListener(copyData[i].name, copyData[i].debounce), 
            eventData.shift();
        }, EventHandler.trigger = function(element, eventName, eventProp) {
            for (var _i = 0, eventData_1 = EventHandler.addOrGetEventData(element); _i < eventData_1.length; _i++) {
                var event_1 = eventData_1[_i];
                event_1.name === eventName && event_1.debounce.call(this, eventProp);
            }
        }, EventHandler;
    }(), SVG_REG = /^svg|^path|^g/, Observer = function() {
        function Observer(context) {
            this.ranArray = [], this.boundedEvents = {}, isNullOrUndefined(context) || (this.context = context);
        }
        return Observer.prototype.on = function(property, handler, context, id) {
            if (!isNullOrUndefined(handler)) {
                var cntxt = context || this.context;
                this.notExist(property) ? this.boundedEvents[property] = [ {
                    handler: handler,
                    context: cntxt
                } ] : isNullOrUndefined(id) ? this.isHandlerPresent(this.boundedEvents[property], handler) || this.boundedEvents[property].push({
                    handler: handler,
                    context: cntxt
                }) : -1 === this.ranArray.indexOf(id) && (this.ranArray.push(id), this.boundedEvents[property].push({
                    handler: handler,
                    context: cntxt,
                    id: id
                }));
            }
        }, Observer.prototype.off = function(property, handler, id) {
            if (!this.notExist(property)) {
                var curObject = getValue(property, this.boundedEvents);
                if (handler) {
                    for (var i = 0; i < curObject.length; i++) if (id) {
                        if (curObject[i].id === id) {
                            curObject.splice(i, 1);
                            var indexLocation = this.ranArray.indexOf(id);
                            -1 !== indexLocation && this.ranArray.splice(indexLocation, 1);
                            break;
                        }
                    } else if (handler === curObject[i].handler) {
                        curObject.splice(i, 1);
                        break;
                    }
                } else delete this.boundedEvents[property];
            }
        }, Observer.prototype.notify = function(property, argument) {
            if (!this.notExist(property)) {
                argument && (argument.name = property);
                for (var _i = 0, curObject_1 = getValue(property, this.boundedEvents).slice(0); _i < curObject_1.length; _i++) {
                    var cur = curObject_1[_i];
                    cur.handler.call(cur.context, argument);
                }
            }
        }, Observer.prototype.destroy = function() {
            this.boundedEvents = this.context = void 0;
        }, Observer.prototype.notExist = function(prop) {
            return !1 === this.boundedEvents.hasOwnProperty(prop);
        }, Observer.prototype.isHandlerPresent = function(boundedEvents, handler) {
            for (var _i = 0, boundedEvents_1 = boundedEvents; _i < boundedEvents_1.length; _i++) {
                if (boundedEvents_1[_i].handler === handler) return !0;
            }
            return !1;
        }, Observer;
    }(), isColEName = new RegExp("]"), Base = function() {
        function Base(options, element) {
            this.isProtectedOnChange = !0, this.properties = {}, this.changedProperties = {}, 
            this.oldProperties = {}, this.refreshing = !1, this.finalUpdate = function() {}, 
            this.childChangedProperties = {}, this.modelObserver = new Observer(this), isUndefined(element) || (this.element = "string" == typeof element ? document.querySelector(element) : element, 
            isNullOrUndefined(this.element) || (this.isProtectedOnChange = !1, this.addInstance())), 
            isUndefined(options) || this.setProperties(options, !0), this.isDestroyed = !1;
        }
        return Base.prototype.setProperties = function(prop, muteOnChange) {
            var prevDetection = this.isProtectedOnChange;
            this.isProtectedOnChange = !!muteOnChange, merge(this, prop), !0 !== muteOnChange && (merge(this.changedProperties, prop), 
            this.dataBind()), this.finalUpdate(), this.changedProperties = {}, this.oldProperties = {}, 
            this.isProtectedOnChange = prevDetection;
        }, Base.callChildDataBind = function(obj, parent) {
            for (var _i = 0, keys_1 = Object.keys(obj); _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                if (parent[key] instanceof Array) for (var _a = 0, _b = parent[key]; _a < _b.length; _a++) {
                    var obj_1 = _b[_a];
                    void 0 !== obj_1.dataBind && obj_1.dataBind();
                } else parent[key].dataBind();
            }
        }, Base.prototype.clearChanges = function() {
            this.finalUpdate(), this.changedProperties = {}, this.oldProperties = {}, this.childChangedProperties = {};
        }, Base.prototype.dataBind = function() {
            if (Base.callChildDataBind(this.childChangedProperties, this), Object.getOwnPropertyNames(this.changedProperties).length) {
                var prevDetection = this.isProtectedOnChange, newChanges = this.changedProperties, oldChanges = this.oldProperties;
                this.clearChanges(), this.isProtectedOnChange = !0, this.onPropertyChanged(newChanges, oldChanges), 
                this.isProtectedOnChange = prevDetection;
            }
        }, Base.prototype.saveChanges = function(key, newValue, oldValue) {
            this.isProtectedOnChange || (this.oldProperties[key] = oldValue, this.changedProperties[key] = newValue, 
            this.finalUpdate(), this.finalUpdate = setImmediate(this.dataBind.bind(this)));
        }, Base.prototype.addEventListener = function(eventName, handler) {
            this.modelObserver.on(eventName, handler);
        }, Base.prototype.removeEventListener = function(eventName, handler) {
            this.modelObserver.off(eventName, handler);
        }, Base.prototype.trigger = function(eventName, eventProp) {
            if (!0 !== this.isDestroyed) {
                var prevDetection = this.isProtectedOnChange;
                if (this.isProtectedOnChange = !1, this.modelObserver.notify(eventName, eventProp), 
                isColEName.test(eventName)) {
                    var handler = getValue(eventName, this);
                    handler && handler.call(this, eventProp);
                }
                this.isProtectedOnChange = prevDetection;
            }
        }, Base.prototype.addInstance = function() {
            var moduleClass = "e-" + this.getModuleName().toLowerCase();
            addClass([ this.element ], [ "e-control", moduleClass ]), isNullOrUndefined(this.element.ej2_instances) ? setValue("ej2_instances", [ this ], this.element) : this.element.ej2_instances.push(this);
        }, Base.prototype.destroy = function() {
            var _this = this;
            this.element.ej2_instances = this.element.ej2_instances.filter(function(i) {
                return i !== _this;
            }), removeClass([ this.element ], [ "e-" + this.getModuleName() ]), 0 === this.element.ej2_instances.length && removeClass([ this.element ], [ "e-control" ]), 
            this.clearChanges(), this.modelObserver.destroy(), this.isDestroyed = !0;
        }, Base;
    }(), REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i, REGX_IE = /msie|trident/i, REGX_IE11 = /Trident\/7\./, REGX_IOS = /(ipad|iphone|ipod touch)/i, REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\d|(ipad|iphone|ipod touch);.*os 8_\d/i, REGX_ANDROID = /android/i, REGX_WINDOWS = /trident|windows phone|edge/i, REGX_VERSION = /(version)[ \/]([\w.]+)/i, REGX_BROWSER = {
        OPERA: /(opera|opr)(?:.*version|)[ \/]([\w.]+)/i,
        EDGE: /(edge)(?:.*version|)[ \/]([\w.]+)/i,
        CHROME: /(chrome|crios)[ \/]([\w.]+)/i,
        PANTHOMEJS: /(phantomjs)[ \/]([\w.]+)/i,
        SAFARI: /(safari)[ \/]([\w.]+)/i,
        WEBKIT: /(webkit)[ \/]([\w.]+)/i,
        MSIE: /(msie|trident) ([\w.]+)/i,
        MOZILLA: /(mozilla)(?:.*? rv:([\w.]+)|)/i
    };
    "undefined" != typeof window && (window.browserDetails = window.browserDetails || {});
    var IntlBase, Browser = function() {
        function Browser() {}
        return Browser.extractBrowserDetail = function() {
            for (var browserInfo = {
                culture: {}
            }, clientInfo = [], _i = 0, keys_1 = Object.keys(REGX_BROWSER); _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                if (clientInfo = Browser.userAgent.match(REGX_BROWSER[key])) {
                    if (browserInfo.name = "opr" === clientInfo[1].toLowerCase() ? "opera" : clientInfo[1].toLowerCase(), 
                    browserInfo.name = "crios" === clientInfo[1].toLowerCase() ? "chrome" : browserInfo.name, 
                    browserInfo.version = clientInfo[2], browserInfo.culture.name = browserInfo.culture.language = navigator.language, 
                    Browser.userAgent.match(REGX_IE11)) {
                        browserInfo.name = "msie";
                        break;
                    }
                    var version = Browser.userAgent.match(REGX_VERSION);
                    "safari" === browserInfo.name && version && (browserInfo.version = version[2]);
                    break;
                }
            }
            return browserInfo;
        }, Browser.getEvent = function(event) {
            var events = {
                start: {
                    isPointer: "pointerdown",
                    isTouch: "touchstart",
                    isDevice: "mousedown"
                },
                move: {
                    isPointer: "pointermove",
                    isTouch: "touchmove",
                    isDevice: "mousemove"
                },
                end: {
                    isPointer: "pointerup",
                    isTouch: "touchend",
                    isDevice: "mouseup"
                },
                cancel: {
                    isPointer: "pointercancel",
                    isTouch: "touchcancel",
                    isDevice: "mouseleave"
                }
            };
            return Browser.isPointer ? events[event].isPointer : Browser.isTouch ? events[event].isTouch + (Browser.isDevice ? "" : " " + events[event].isDevice) : events[event].isDevice;
        }, Browser.getTouchStartEvent = function() {
            return Browser.getEvent("start");
        }, Browser.getTouchEndEvent = function() {
            return Browser.getEvent("end");
        }, Browser.getTouchMoveEvent = function() {
            return Browser.getEvent("move");
        }, Browser.getTouchCancelEvent = function() {
            return Browser.getEvent("cancel");
        }, Browser.getValue = function(key, regX) {
            var browserDetails = window.browserDetails;
            return void 0 === browserDetails[key] ? browserDetails[key] = regX.test(Browser.userAgent) : browserDetails[key];
        }, Object.defineProperty(Browser, "userAgent", {
            get: function() {
                return Browser.uA;
            },
            set: function(uA) {
                Browser.uA = uA, window.browserDetails = {};
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "info", {
            get: function() {
                return isUndefined(window.browserDetails.info) ? window.browserDetails.info = Browser.extractBrowserDetail() : window.browserDetails.info;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isIE", {
            get: function() {
                return Browser.getValue("isIE", REGX_IE);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isTouch", {
            get: function() {
                return isUndefined(window.browserDetails.isTouch) ? window.browserDetails.isTouch = "ontouchstart" in window : window.browserDetails.isTouch;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isPointer", {
            get: function() {
                return isUndefined(window.browserDetails.isPointer) ? window.browserDetails.isPointer = "pointerEnabled" in window.navigator : window.browserDetails.isPointer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isMSPointer", {
            get: function() {
                return isUndefined(window.browserDetails.isMSPointer) ? window.browserDetails.isMSPointer = "msPointerEnabled" in window.navigator : window.browserDetails.isMSPointer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isDevice", {
            get: function() {
                return Browser.getValue("isDevice", REGX_MOBILE);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isIos", {
            get: function() {
                return Browser.getValue("isIos", REGX_IOS);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isIos7", {
            get: function() {
                return Browser.getValue("isIos7", REGX_IOS7);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isAndroid", {
            get: function() {
                return Browser.getValue("isAndroid", REGX_ANDROID);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isWebView", {
            get: function() {
                return isUndefined(window.browserDetails.isWebView) ? (window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap) && isUndefined(window.phonegap) && "object" !== window.forge), 
                window.browserDetails.isWebView) : window.browserDetails.isWebView;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "isWindows", {
            get: function() {
                return Browser.getValue("isWindows", REGX_WINDOWS);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "touchStartEvent", {
            get: function() {
                return isUndefined(window.browserDetails.touchStartEvent) ? window.browserDetails.touchStartEvent = Browser.getTouchStartEvent() : window.browserDetails.touchStartEvent;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "touchMoveEvent", {
            get: function() {
                return isUndefined(window.browserDetails.touchMoveEvent) ? window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent() : window.browserDetails.touchMoveEvent;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "touchEndEvent", {
            get: function() {
                return isUndefined(window.browserDetails.touchEndEvent) ? window.browserDetails.touchEndEvent = Browser.getTouchEndEvent() : window.browserDetails.touchEndEvent;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Browser, "touchCancelEvent", {
            get: function() {
                return isUndefined(window.browserDetails.touchCancelEvent) ? window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent() : window.browserDetails.touchCancelEvent;
            },
            enumerable: !0,
            configurable: !0
        }), Browser.uA = "undefined" != typeof navigator ? navigator.userAgent : "", Browser;
    }(), __extends$1 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$1 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, Animation = function(_super) {
        function Animation(options) {
            var _this = _super.call(this, options, void 0) || this;
            return _this.easing = {
                ease: "cubic-bezier(0.250, 0.100, 0.250, 1.000)",
                linear: "cubic-bezier(0.250, 0.250, 0.750, 0.750)",
                easeIn: "cubic-bezier(0.420, 0.000, 1.000, 1.000)",
                easeOut: "cubic-bezier(0.000, 0.000, 0.580, 1.000)",
                easeInOut: "cubic-bezier(0.420, 0.000, 0.580, 1.000)",
                elasticInOut: "cubic-bezier(0.5,-0.58,0.38,1.81)",
                elasticIn: "cubic-bezier(0.17,0.67,0.59,1.81)",
                elasticOut: "cubic-bezier(0.7,-0.75,0.99,1.01)"
            }, _this;
        }
        __extends$1(Animation, _super), Animation_1 = Animation, Animation.prototype.animate = function(element, options) {
            options = options || {};
            var model = this.getModel(options);
            if ("string" == typeof element) for (var _i = 0, elements_1 = Array.prototype.slice.call(selectAll(element, document)); _i < elements_1.length; _i++) {
                var element_1 = elements_1[_i];
                model.element = element_1, Animation_1.delayAnimation(model);
            } else model.element = element, Animation_1.delayAnimation(model);
        }, Animation.stop = function(element, model) {
            element.style.animation = "", element.removeAttribute("e-animate");
            var animationId = element.getAttribute("e-animation-id");
            if (animationId) {
                var frameId = parseInt(animationId, 10);
                cancelAnimationFrame(frameId), element.removeAttribute("e-animation-id");
            }
            model && model.end && model.end.call(this, model);
        }, Animation.delayAnimation = function(model) {
            model.delay ? setTimeout(function() {
                Animation_1.applyAnimation(model);
            }, model.delay) : Animation_1.applyAnimation(model);
        }, Animation.applyAnimation = function(model) {
            var _this = this;
            model.timeStamp = 0;
            var step = 0, timerId = 0, prevTimeStamp = 0, duration = model.duration;
            model.element.setAttribute("e-animate", "true");
            var startAnimation = function(timeStamp) {
                try {
                    if (timeStamp) {
                        prevTimeStamp = 0 === prevTimeStamp ? timeStamp : prevTimeStamp, model.timeStamp = timeStamp + model.timeStamp - prevTimeStamp, 
                        prevTimeStamp = timeStamp, !step && model.begin && model.begin.call(_this, model), 
                        step += 1;
                        var avg = model.timeStamp / step;
                        model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute("e-animate") ? (model.element.style.animation = model.name + " " + model.duration + "ms " + model.timingFunction, 
                        model.progress && model.progress.call(_this, model), requestAnimationFrame(startAnimation)) : (cancelAnimationFrame(timerId), 
                        model.element.removeAttribute("e-animation-id"), model.element.removeAttribute("e-animate"), 
                        model.element.style.animation = "", model.end && model.end.call(_this, model));
                    } else performance.now(), timerId = requestAnimationFrame(startAnimation), model.element.setAttribute("e-animation-id", timerId.toString());
                } catch (e) {
                    cancelAnimationFrame(timerId), model.element.removeAttribute("e-animation-id"), 
                    model.fail && model.fail.call(_this, e);
                }
            };
            startAnimation();
        }, Animation.prototype.getModel = function(options) {
            return {
                name: options.name || this.name,
                delay: options.delay || this.delay,
                duration: void 0 !== options.duration ? options.duration : this.duration,
                begin: options.begin || this.begin,
                end: options.end || this.end,
                fail: options.fail || this.fail,
                progress: options.progress || this.progress,
                timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] : options.timingFunction || this.easing[this.timingFunction]
            };
        }, Animation.prototype.onPropertyChanged = function(newProp, oldProp) {}, Animation.prototype.getModuleName = function() {
            return "animation";
        }, Animation.prototype.destroy = function() {};
        var Animation_1;
        return __decorate$1([ Property("FadeIn") ], Animation.prototype, "name", void 0), 
        __decorate$1([ Property(400) ], Animation.prototype, "duration", void 0), __decorate$1([ Property("ease") ], Animation.prototype, "timingFunction", void 0), 
        __decorate$1([ Property(0) ], Animation.prototype, "delay", void 0), __decorate$1([ Event() ], Animation.prototype, "progress", void 0), 
        __decorate$1([ Event() ], Animation.prototype, "begin", void 0), __decorate$1([ Event() ], Animation.prototype, "end", void 0), 
        __decorate$1([ Event() ], Animation.prototype, "fail", void 0), Animation = Animation_1 = __decorate$1([ NotifyPropertyChanges ], Animation);
    }(Base), isRippleEnabled = !1, CanvasRenderer = function() {
        function CanvasRenderer(rootID) {
            this.rootId = rootID;
        }
        return CanvasRenderer.prototype.getOptionValue = function(options, key) {
            return options[key];
        }, CanvasRenderer.prototype.createCanvas = function(options) {
            var canvasObj = document.createElement("canvas");
            return canvasObj.setAttribute("id", this.rootId + "_canvas"), this.ctx = canvasObj.getContext("2d"), 
            this.canvasObj = canvasObj, this.setCanvasSize(options.width, options.height), this.canvasObj;
        }, CanvasRenderer.prototype.setCanvasSize = function(width, height) {
            var element = document.getElementById(this.rootId), size = isNullOrUndefined(element) ? null : element.getBoundingClientRect();
            isNullOrUndefined(this.width) ? this.canvasObj.setAttribute("width", width ? width.toString() : size.width.toString()) : this.canvasObj.setAttribute("width", this.width.toString()), 
            isNullOrUndefined(this.height) ? this.canvasObj.setAttribute("height", height ? height.toString() : "450") : this.canvasObj.setAttribute("height", this.height.toString());
        }, CanvasRenderer.prototype.setAttributes = function(options) {
            this.ctx.lineWidth = this.getOptionValue(options, "stroke-width");
            var dashArray = this.getOptionValue(options, "stroke-dasharray");
            if (!isNullOrUndefined(dashArray)) {
                var dashArrayString = dashArray.split(",");
                this.ctx.setLineDash([ parseInt(dashArrayString[0], 10), parseInt(dashArrayString[1], 10) ]);
            }
            this.ctx.strokeStyle = this.getOptionValue(options, "stroke");
        }, CanvasRenderer.prototype.drawLine = function(options) {
            this.ctx.save(), this.ctx.beginPath(), this.ctx.lineWidth = this.getOptionValue(options, "stroke-width"), 
            this.ctx.strokeStyle = options.stroke, this.ctx.moveTo(options.x1, options.y1), 
            this.ctx.lineTo(options.x2, options.y2), this.ctx.stroke(), this.ctx.restore(), 
            this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawRectangle = function(options) {
            var canvasCtx = this.ctx, cornerRadius = options.rx;
            this.ctx.save(), this.ctx.beginPath(), this.ctx.globalAlpha = this.getOptionValue(options, "opacity"), 
            this.setAttributes(options), this.ctx.rect(options.x, options.y, options.width, options.height), 
            null !== cornerRadius && cornerRadius >= 0 ? this.drawCornerRadius(options) : ("none" === options.fill && (options.fill = "transparent"), 
            this.ctx.fillStyle = options.fill, this.ctx.fillRect(options.x, options.y, options.width, options.height), 
            this.ctx.stroke()), this.ctx.restore(), this.ctx = canvasCtx, this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawCornerRadius = function(options) {
            var cornerRadius = options.rx, x = options.x, y = options.y, width = options.width, height = options.height;
            "none" === options.fill && (options.fill = "transparent"), this.ctx.fillStyle = options.fill, 
            width < 2 * cornerRadius && (cornerRadius = width / 2), height < 2 * cornerRadius && (cornerRadius = height / 2), 
            this.ctx.beginPath(), this.ctx.moveTo(x + width - cornerRadius, y), this.ctx.arcTo(x + width, y, x + width, y + height, cornerRadius), 
            this.ctx.arcTo(x + width, y + height, x, y + height, cornerRadius), this.ctx.arcTo(x, y + height, x, y, cornerRadius), 
            this.ctx.arcTo(x, y, x + width, y, cornerRadius), this.ctx.closePath(), this.ctx.fill(), 
            this.ctx.stroke(), this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawPath = function(options, canvasTranslate) {
            var dataSplit = options.d.split(" "), borderWidth = this.getOptionValue(options, "stroke-width"), canvasCtx = this.ctx, flag = !0;
            this.ctx.save(), this.ctx.beginPath(), canvasTranslate && this.ctx.translate(canvasTranslate[0], canvasTranslate[1]), 
            this.ctx.globalAlpha = options.opacity ? options.opacity : this.getOptionValue(options, "fill-opacity"), 
            this.setAttributes(options);
            for (var i = 0; i < dataSplit.length; i += 3) {
                var x1 = parseFloat(dataSplit[i + 1]), y1 = parseFloat(dataSplit[i + 2]);
                switch (dataSplit[i]) {
                  case "M":
                    options.innerR || options.cx || this.ctx.moveTo(x1, y1);
                    break;

                  case "L":
                    options.innerR || this.ctx.lineTo(x1, y1);
                    break;

                  case "C":
                    var c1 = parseFloat(dataSplit[i + 3]), c2 = parseFloat(dataSplit[i + 4]), c3 = parseFloat(dataSplit[i + 5]), c4 = parseFloat(dataSplit[i + 6]);
                    this.ctx.bezierCurveTo(x1, y1, c1, c2, c3, c4), i += 4;
                    break;

                  case "A":
                    options.innerR ? flag && (this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise), 
                    this.ctx.arc(options.x, options.y, options.innerR, options.end, options.start, !options.counterClockWise), 
                    flag = !1) : options.cx ? this.ctx.arc(options.cx, options.cy, options.radius, 0, 2 * Math.PI, options.counterClockWise) : (this.ctx.moveTo(options.x, options.y), 
                    this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise), 
                    this.ctx.lineTo(options.x, options.y)), i += 5;
                    break;

                  case "z":
                    this.ctx.closePath();
                }
            }
            "none" !== options.fill && void 0 !== options.fill && (this.ctx.fillStyle = options.fill, 
            this.ctx.fill()), borderWidth > 0 && this.ctx.stroke(), this.ctx.restore(), this.ctx = canvasCtx, 
            this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawText = function(options, label) {
            var fontWeight = this.getOptionValue(options, "font-weight");
            isNullOrUndefined(fontWeight) || "regular" !== fontWeight.toLowerCase() || (fontWeight = "normal");
            var fontSize = this.getOptionValue(options, "font-size"), fontFamily = this.getOptionValue(options, "font-family"), font = this.getOptionValue(options, "font-style").toLowerCase() + " " + fontWeight + " " + fontSize + " " + fontFamily, anchor = this.getOptionValue(options, "text-anchor"), opacity = void 0 !== options.opacity ? options.opacity : 1;
            "middle" === anchor && (anchor = "center"), this.ctx.save(), this.ctx.fillStyle = options.fill, 
            this.ctx.font = font, this.ctx.textAlign = anchor, this.ctx.globalAlpha = opacity, 
            options.baseline && (this.ctx.textBaseline = options.baseline);
            this.ctx.translate(options.x + 0, options.y), this.ctx.rotate(options.labelRotation * Math.PI / 180), 
            this.ctx.fillText(label, 0, 0), this.ctx.restore(), this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawCircle = function(options) {
            var canvasCtx = this.ctx;
            this.ctx.save(), this.ctx.beginPath(), this.ctx.arc(options.cx, options.cy, options.r, 0, 2 * Math.PI), 
            this.ctx.fillStyle = options.fill, this.ctx.globalAlpha = options.opacity, this.ctx.fill(), 
            this.setAttributes(options), this.ctx.stroke(), this.ctx.restore(), this.ctx = canvasCtx, 
            this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawPolyline = function(options) {
            this.ctx.save(), this.ctx.beginPath();
            for (var points = options.points.split(" "), i = 0; i < points.length - 1; i++) {
                var point = points[i].split(","), x = parseFloat(point[0]), y = parseFloat(point[1]);
                0 === i ? this.ctx.moveTo(x, y) : this.ctx.lineTo(x, y);
            }
            this.ctx.lineWidth = this.getOptionValue(options, "stroke-width"), this.ctx.strokeStyle = options.stroke, 
            this.ctx.stroke(), this.ctx.restore(), this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawEllipse = function(options) {
            var canvasCtx = this.ctx, circumference = Math.max(options.rx, options.ry), scaleX = options.rx / circumference, scaleY = options.ry / circumference;
            this.ctx.save(), this.ctx.beginPath(), this.ctx.translate(options.cx, options.cy), 
            this.ctx.save(), this.ctx.scale(scaleX, scaleY), this.ctx.arc(0, 0, circumference, 0, 2 * Math.PI, !1), 
            this.ctx.fillStyle = options.fill, this.ctx.fill(), this.ctx.restore(), this.ctx.lineWidth = this.getOptionValue(options, "stroke-width"), 
            this.ctx.strokeStyle = options.stroke, this.ctx.stroke(), this.ctx.restore(), this.ctx = canvasCtx, 
            this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.drawImage = function(options) {
            this.ctx.save();
            var imageObj = new Image();
            isNullOrUndefined(options.href) || (imageObj.src = options.href, this.ctx.drawImage(imageObj, options.x, options.y, options.width, options.height)), 
            this.ctx.restore(), this.dataUrl = this.canvasObj.toDataURL();
        }, CanvasRenderer.prototype.createLinearGradient = function(colors) {
            var myGradient;
            isNullOrUndefined(colors[0].colorStop) || (myGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasObj.height));
            return this.setGradientValues(colors, myGradient);
        }, CanvasRenderer.prototype.createRadialGradient = function(colors) {
            var myGradient;
            isNullOrUndefined(colors[0].colorStop) || (myGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, this.canvasObj.height));
            return this.setGradientValues(colors, myGradient);
        }, CanvasRenderer.prototype.setGradientValues = function(colors, myGradient) {
            var colorName;
            if (isNullOrUndefined(colors[0].colorStop)) colorName = colors[0].color.toString(); else {
                for (var i = 0; i <= colors.length - 1; i++) {
                    var color = colors[i].color, newColorStop = colors[i].colorStop.slice(0, -1), stopColor = parseInt(newColorStop, 10) / 100;
                    myGradient.addColorStop(stopColor, color);
                }
                colorName = myGradient.toString();
            }
            return this.dataUrl = this.canvasObj.toDataURL(), colorName;
        }, CanvasRenderer.prototype.setElementAttributes = function(options, element) {
            for (var keys = Object.keys(options), values = Object.keys(options).map(function(key) {
                return options[key];
            }), i = 0; i < keys.length; i++) element.setAttribute(keys[i], values[i]);
            return element;
        }, CanvasRenderer.prototype.updateCanvasAttributes = function(options) {
            this.setElementAttributes(options, this.canvasObj);
            var ctx = this.ctx;
            if (!isNullOrUndefined(this.dataUrl)) {
                var img_1 = new Image();
                img_1.onload = function() {
                    ctx.drawImage(img_1, 0, 0);
                }, img_1.src = this.dataUrl;
            }
        }, CanvasRenderer;
    }(), ModuleLoader = function() {
        function ModuleLoader(parent) {
            this.loadedModules = [], this.parent = parent;
        }
        return ModuleLoader.prototype.inject = function(requiredModules, moduleList) {
            var reqLength = requiredModules.length;
            if (0 !== reqLength) {
                this.loadedModules.length && this.clearUnusedModule(requiredModules);
                for (var i = 0; i < reqLength; i++) for (var modl = requiredModules[i], _i = 0, moduleList_1 = moduleList; _i < moduleList_1.length; _i++) {
                    var module = moduleList_1[_i], modName = modl.member;
                    if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {
                        var moduleObject = createInstance(module, modl.args), memberName = this.getMemberName(modName);
                        modl.isProperty ? setValue(memberName, module, this.parent) : setValue(memberName, moduleObject, this.parent);
                        var loadedModule = modl;
                        loadedModule.member = memberName, this.loadedModules.push(loadedModule);
                    }
                }
            } else this.clean();
        }, ModuleLoader.prototype.clean = function() {
            for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
                var modules = _a[_i];
                modules.isProperty || getValue(modules.member, this.parent).destroy();
            }
            this.loadedModules = [];
        }, ModuleLoader.prototype.clearUnusedModule = function(moduleList) {
            for (var _this = this, usedModules = moduleList.map(function(arg) {
                return _this.getMemberName(arg.member);
            }), _i = 0, removableModule_1 = this.loadedModules.filter(function(module) {
                return -1 === usedModules.indexOf(module.member);
            }); _i < removableModule_1.length; _i++) {
                var mod = removableModule_1[_i];
                mod.isProperty || getValue(mod.member, this.parent).destroy(), this.loadedModules.splice(this.loadedModules.indexOf(mod), 1), 
                deleteObject(this.parent, mod.member);
            }
        }, ModuleLoader.prototype.getMemberName = function(name) {
            return name[0].toLowerCase() + name.substring(1) + "Module";
        }, ModuleLoader.prototype.isModuleLoaded = function(modName) {
            for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
                if (_a[_i].member === this.getMemberName(modName)) return !0;
            }
            return !1;
        }, ModuleLoader;
    }(), ChildProperty = function() {
        function ChildProperty(parent, propName, defaultValue, isArray) {
            this.properties = {}, this.changedProperties = {}, this.childChangedProperties = {}, 
            this.oldProperties = {}, this.finalUpdate = function() {}, this.callChildDataBind = getValue("callChildDataBind", Base), 
            this.parentObj = parent, this.controlParent = this.parentObj.controlParent || this.parentObj, 
            this.propName = propName, this.setProperties(defaultValue, !0), this.isParentArray = isArray;
        }
        return ChildProperty.prototype.updateChange = function(val, propName) {
            !0 === val ? this.parentObj.childChangedProperties[propName] = val : delete this.parentObj.childChangedProperties[propName], 
            this.parentObj.updateChange && this.parentObj.updateChange(val, this.parentObj.propName);
        }, ChildProperty.prototype.updateTimeOut = function() {
            if (this.parentObj.updateTimeOut) this.parentObj.finalUpdate(), this.parentObj.updateTimeOut(); else {
                var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));
                this.finalUpdate = function() {
                    clearTimeout(changeTime_1);
                };
            }
        }, ChildProperty.prototype.clearChanges = function() {
            this.finalUpdate(), this.updateChange(!1, this.propName), this.oldProperties = {}, 
            this.changedProperties = {};
        }, ChildProperty.prototype.setProperties = function(prop, muteOnChange) {
            !0 === muteOnChange ? (merge(this, prop), this.updateChange(!1, this.propName), 
            this.clearChanges()) : merge(this, prop);
        }, ChildProperty.prototype.dataBind = function() {
            if (this.callChildDataBind(this.childChangedProperties, this), this.isParentArray) {
                var curIndex = this.parentObj[this.propName].indexOf(this);
                Object.keys(this.changedProperties).length && (setValue(this.propName + "." + curIndex, this.changedProperties, this.parentObj.changedProperties), 
                setValue(this.propName + "." + curIndex, this.oldProperties, this.parentObj.oldProperties));
            } else this.parentObj.changedProperties[this.propName] = this.changedProperties, 
            this.parentObj.oldProperties[this.propName] = this.oldProperties;
            this.clearChanges();
        }, ChildProperty.prototype.saveChanges = function(key, newValue, oldValue) {
            this.controlParent.isProtectedOnChange || (this.oldProperties[key] = oldValue, this.changedProperties[key] = newValue, 
            this.updateChange(!0, this.propName), this.finalUpdate(), this.updateTimeOut());
        }, ChildProperty;
    }(), defaultNumberingSystem = {
        latn: {
            _digits: "0123456789",
            _type: "numeric"
        }
    }, defaultNumberSymbols = {
        decimal: ".",
        group: ",",
        percentSign: "%",
        plusSign: "+",
        minusSign: "-",
        infinity: "∞",
        nan: "NaN",
        exponential: "E"
    }, latnNumberSystem = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ], ParserBase = function() {
        function ParserBase() {}
        return ParserBase.getMainObject = function(obj, cName) {
            return getValue("main." + cName, obj);
        }, ParserBase.getNumberingSystem = function(obj) {
            return getValue("supplemental.numberingSystems", obj) || this.numberingSystems;
        }, ParserBase.reverseObject = function(prop, keys) {
            for (var res = {}, _i = 0, propKeys_1 = keys || Object.keys(prop); _i < propKeys_1.length; _i++) {
                var key = propKeys_1[_i];
                res.hasOwnProperty(prop[key]) || (res[prop[key]] = key);
            }
            return res;
        }, ParserBase.getSymbolRegex = function(props) {
            var regexStr = props.map(function(str) {
                return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
            }).join("|");
            return new RegExp(regexStr, "g");
        }, ParserBase.getSymbolMatch = function(prop) {
            for (var ret = {}, _i = 0, matchKeys_1 = Object.keys(defaultNumberSymbols); _i < matchKeys_1.length; _i++) {
                var key = matchKeys_1[_i];
                ret[prop[key]] = defaultNumberSymbols[key];
            }
            return ret;
        }, ParserBase.constructRegex = function(val) {
            for (var len = val.length, ret = "", i = 0; i < len; i++) ret += i !== len - 1 ? val[i] + "|" : val[i];
            return ret;
        }, ParserBase.convertValueParts = function(value, regex, obj) {
            return value.replace(regex, function(str) {
                return obj[str];
            });
        }, ParserBase.getDefaultNumberingSystem = function(obj) {
            var ret = {};
            return ret.obj = getValue("numbers", obj), ret.nSystem = getValue("defaultNumberingSystem", ret.obj), 
            ret;
        }, ParserBase.getCurrentNumericOptions = function(curObj, numberSystem, needSymbols) {
            var ret = {}, cur = this.getDefaultNumberingSystem(curObj);
            if (!isUndefined(cur.nSystem)) {
                var digits = getValue(cur.nSystem + "._digits", numberSystem);
                isUndefined(digits) || (ret.numericPair = this.reverseObject(digits, latnNumberSystem), 
                ret.numberParseRegex = new RegExp(this.constructRegex(digits), "g"), ret.numericRegex = "[" + digits[0] + "-" + digits[9] + "]", 
                needSymbols && (ret.numericRegex = digits[0] + "-" + digits[9], ret.symbolNumberSystem = getValue("symbols-numberSystem-" + cur.nSystem, cur.obj), 
                ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem), ret.numberSystem = cur.nSystem));
            }
            return ret;
        }, ParserBase.getNumberMapper = function(curObj, numberSystem, isNumber) {
            var ret = {
                mapper: {}
            }, cur = this.getDefaultNumberingSystem(curObj);
            if (!isUndefined(cur.nSystem)) {
                ret.numberSystem = cur.nSystem, ret.numberSymbols = getValue("symbols-numberSystem-" + cur.nSystem, cur.obj), 
                ret.timeSeparator = getValue("timeSeparator", ret.numberSymbols);
                var digits = getValue(cur.nSystem + "._digits", numberSystem);
                if (!isUndefined(digits)) for (var _i = 0, latnNumberSystem_1 = latnNumberSystem; _i < latnNumberSystem_1.length; _i++) {
                    var i = latnNumberSystem_1[_i];
                    ret.mapper[i] = digits[i];
                }
            }
            return ret;
        }, ParserBase.nPair = "numericPair", ParserBase.nRegex = "numericRegex", ParserBase.numberingSystems = defaultNumberingSystem, 
        ParserBase;
    }(), errorText = {
        ms: "minimumSignificantDigits",
        ls: "maximumSignificantDigits",
        mf: "minimumFractionDigits",
        lf: "maximumFractionDigits"
    }, mapper$1 = [ "infinity", "nan", "group", "decimal", "exponential" ], NumberFormat = function() {
        function NumberFormat() {}
        return NumberFormat.numberFormatter = function(culture, option, cldr) {
            var symbolPattern, _this = this, fOptions = extend({}, option), cOptions = {}, dOptions = {}, dependable = IntlBase.getDependables(cldr, culture, !0);
            dOptions.numberMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), !0), 
            dOptions.currencySymbol = IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode), 
            dOptions.percentSymbol = dOptions.numberMapper.numberSymbols.percentSign, dOptions.minusSymbol = dOptions.numberMapper.numberSymbols.minusSign;
            var symbols = dOptions.numberMapper.numberSymbols;
            if (option.format && !IntlBase.formatRegex.test(option.format)) cOptions = IntlBase.customFormat(option.format, dOptions, dependable.numericObject); else {
                extend(fOptions, IntlBase.getProperNumericSkeleton(option.format || "N")), fOptions.isCurrency = "currency" === fOptions.type, 
                fOptions.isPercent = "percent" === fOptions.type, symbolPattern = IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount), 
                fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, !0), 
                this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, !1, !0), 
                isUndefined(fOptions.fractionDigits) || (fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits), 
                isUndefined(fOptions.useGrouping) && (fOptions.useGrouping = !0), fOptions.isCurrency && (symbolPattern = symbolPattern.replace(/\u00A4/g, IntlBase.defaultCurrency));
                var split = symbolPattern.split(";");
                cOptions.nData = IntlBase.getFormatData(split[1] || "-" + split[0], !0, dOptions.currencySymbol), 
                cOptions.pData = IntlBase.getFormatData(split[0], !1, dOptions.currencySymbol), 
                fOptions.useGrouping && (fOptions.groupSeparator = symbols[mapper$1[2]], fOptions.groupData = this.getGroupingDetails(split[0]));
                if (isUndefined(fOptions.minimumFractionDigits) && (fOptions.minimumFractionDigits = cOptions.nData.minimumFraction), 
                isUndefined(fOptions.maximumFractionDigits)) {
                    var mval = cOptions.nData.maximumFraction;
                    fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;
                }
                var mfrac = fOptions.minimumFractionDigits, lfrac = fOptions.maximumFractionDigits;
                isUndefined(mfrac) || isUndefined(lfrac) || mfrac > lfrac && (fOptions.maximumFractionDigits = mfrac);
            }
            return extend(cOptions.nData, fOptions), extend(cOptions.pData, fOptions), function(value) {
                return isNaN(value) ? symbols[mapper$1[1]] : isFinite(value) ? _this.intNumberFormatter(value, cOptions, dOptions) : symbols[mapper$1[0]];
            };
        }, NumberFormat.getGroupingDetails = function(pattern) {
            var ret = {}, match = pattern.match(IntlBase.negativeDataRegex);
            if (match && match[4]) {
                var pattern_1 = match[4], p = pattern_1.lastIndexOf(",");
                if (-1 !== p) {
                    var temp = pattern_1.split(".")[0];
                    ret.primary = temp.length - p - 1;
                    var s = pattern_1.lastIndexOf(",", p - 1);
                    -1 !== s && (ret.secondary = p - 1 - s);
                }
            }
            return ret;
        }, NumberFormat.checkValueRange = function(val1, val2, checkbothExist, isFraction) {
            var decide = isFraction ? "f" : "s", dint = 0, str1 = errorText["l" + decide], str2 = errorText["m" + decide];
            if (isUndefined(val1) || (this.checkRange(val1, str1, isFraction), dint++), isUndefined(val2) || (this.checkRange(val2, str2, isFraction), 
            dint++), 2 === dint) {
                if (!(val1 < val2)) return !0;
                throwError(str2 + "specified must be less than the" + str1);
            } else checkbothExist && 1 === dint && throwError("Both" + str2 + "and" + str2 + "must be present");
            return !1;
        }, NumberFormat.checkRange = function(val, text, isFraction) {
            var range = isFraction ? [ 0, 20 ] : [ 1, 21 ];
            (val < range[0] || val > range[1]) && throwError(text + "value must be within the range" + range[0] + "to" + range[1]);
        }, NumberFormat.intNumberFormatter = function(value, fOptions, dOptions) {
            var curData;
            if (!isUndefined(fOptions.nData.type)) {
                value < 0 ? (value *= -1, curData = fOptions.nData) : curData = 0 === value ? fOptions.zeroData || fOptions.pData : fOptions.pData;
                var fValue = "";
                return curData.isPercent && (value *= 100), curData.groupOne ? fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits) : (fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits), 
                curData.minimumIntegerDigits && (fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits))), 
                "scientific" === curData.type && (fValue = (fValue = value.toExponential(curData.maximumFractionDigits)).replace("e", dOptions.numberMapper.numberSymbols[mapper$1[4]])), 
                fValue = fValue.replace(".", dOptions.numberMapper.numberSymbols[mapper$1[3]]), 
                curData.useGrouping && (fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ",", dOptions.numberMapper.numberSymbols[mapper$1[3]] || ".", curData.groupData.secondary)), 
                fValue = ParserBase.convertValueParts(fValue, IntlBase.latnParseRegex, dOptions.numberMapper.mapper), 
                "N/A" === curData.nlead ? curData.nlead : curData.nlead + fValue + curData.nend;
            }
        }, NumberFormat.processSignificantDigits = function(value, min, max) {
            var temp = value + "";
            return temp.length < min ? value.toPrecision(min) : (temp = value.toPrecision(max), 
            +temp + "");
        }, NumberFormat.groupNumbers = function(val, level1, sep, decimalSymbol, level2) {
            for (var flag = !isNullOrUndefined(level2) && 0 !== level2, split = val.split(decimalSymbol), prefix = split[0], length = prefix.length, str = ""; length > level1; ) str = prefix.slice(length - level1, length) + (str.length ? sep + str : ""), 
            length -= level1, flag && (level1 = level2, flag = !1);
            return split[0] = prefix.slice(0, length) + (str.length ? sep : "") + str, split.join(decimalSymbol);
        }, NumberFormat.processFraction = function(value, min, max) {
            var temp = (value + "").split(".")[1], length = temp ? temp.length : 0;
            if (min && length < min) {
                var ret = "";
                if (0 !== length) {
                    ret += value;
                    for (var j = 0; j < min - length; j++) ret += "0";
                    return ret;
                }
                return ret = value.toFixed(min), value.toFixed(min);
            }
            return !isNullOrUndefined(max) && (length > max || 0 === max) ? value.toFixed(max) : value + "";
        }, NumberFormat.processMinimumIntegers = function(value, min) {
            var temp = value.split("."), lead = temp[0], len = lead.length;
            if (len < min) {
                for (var i = 0; i < min - len; i++) lead = "0" + lead;
                temp[0] = lead;
            }
            return temp.join(".");
        }, NumberFormat;
    }();
    !function(IntlBase) {
        function getResultantPattern(skeleton, dateObject, type) {
            var resPattern, iType = type || "date";
            if (-1 !== IntlBase.basicPatterns.indexOf(skeleton)) {
                if (resPattern = getValue(iType + "Formats." + skeleton, dateObject), "dateTime" === iType) {
                    var dPattern = getValue("dateFormats." + skeleton, dateObject), tPattern = getValue("timeFormats." + skeleton, dateObject);
                    resPattern = resPattern.replace("{1}", dPattern).replace("{0}", tPattern);
                }
            } else resPattern = getValue("dateTimeFormats.availableFormats." + skeleton, dateObject);
            return resPattern;
        }
        function getDependables(cldr, culture, isNumber) {
            var ret = {};
            return ret.parserObject = ParserBase.getMainObject(cldr, culture) || IntlBase.defaultObject, 
            isNumber ? ret.numericObject = getValue("numbers", ret.parserObject) : ret.dateObject = getValue("dates.calendars.gregorian", ret.parserObject), 
            ret;
        }
        function getSymbolPattern(type, numSystem, obj, isAccount) {
            return getValue(type + "Formats-numberSystem-" + numSystem + (isAccount ? ".accounting" : ".standard"), obj) || (isAccount ? getValue(type + "Formats-numberSystem-" + numSystem + ".standard", obj) : "");
        }
        function getProperNumericSkeleton(skeleton) {
            var matches = skeleton.match(IntlBase.formatRegex), ret = {}, pattern = matches[1].toUpperCase();
            return ret.isAccount = "A" === pattern, ret.type = IntlBase.patternMatcher[pattern], 
            skeleton.length > 1 && (ret.fractionDigits = parseInt(matches[2], 10)), ret;
        }
        function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {
            var nData = fractionOnly ? {} : {
                nlead: "",
                nend: ""
            }, match = pattern.match(IntlBase.customRegex);
            if (match) {
                fractionOnly || (nData.nlead = changeCurrencySymbol(match[1], cSymbol), nData.nend = changeCurrencySymbol(match[10], cSymbol), 
                nData.groupPattern = match[4]);
                var fraction = match[7];
                if (fraction && needFraction) {
                    var fmatch = fraction.match(fractionRegex);
                    isNullOrUndefined(fmatch) ? nData.minimumFraction = 0 : nData.minimumFraction = fmatch.length, 
                    nData.maximumFraction = fraction.length - 1;
                }
            }
            return nData;
        }
        function changeCurrencySymbol(val, sym) {
            return val ? val.replace(IntlBase.defaultCurrency, sym) : "";
        }
        function getCurrencySymbol(numericObject, currencyCode) {
            return getValue("currencies." + currencyCode + ".symbol", numericObject) || "$";
        }
        function isCurrencyPercent(parts, actual, symbol) {
            for (var options = {
                nlead: parts[0],
                nend: parts[1]
            }, i = 0; i < 2; i++) {
                var part = parts[i], loc = part.indexOf(actual);
                if (-1 !== loc && (loc < part.indexOf("'") || loc > part.lastIndexOf("'"))) {
                    options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1), options[typeMapper[actual]] = !0, 
                    options.type = options.isCurrency ? "currency" : "percent";
                    break;
                }
            }
            return options;
        }
        IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\*.)?((([#,]*[0,]*0+)(\.0*[0-9]*#*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/, 
        IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\*.)?((([0#,]*[0,]*[0#]*)(\.[0#]*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/, 
        IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;
        var fractionRegex = /[0-9]/g;
        IntlBase.defaultCurrency = "$";
        var mapper = [ "infinity", "nan", "group", "decimal" ], patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g, patternMatch = {
            G: "",
            M: "m",
            L: "m",
            H: "h",
            c: "d",
            "'": '"',
            " a": " AM/PM",
            yy: "yy",
            y: "yyyy",
            EEEE: "dddd",
            E: "ddd"
        }, defaultFirstDay = "sun", firstDayMapper = {
            sun: 0,
            mon: 1,
            tue: 2,
            wed: 3,
            thu: 4,
            fri: 5,
            sat: 6
        };
        IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i, IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i, 
        IntlBase.curWithoutNumberRegex = /(c|a)$/gi;
        var typeMapper = {
            $: "isCurrency",
            "%": "isPercent",
            "-": "isNegative",
            0: "nlead",
            1: "nend"
        };
        IntlBase.dateParseRegex = /([a-z])\1*|'([^']|'')+'|''|./gi, IntlBase.basicPatterns = [ "short", "medium", "long", "full" ], 
        IntlBase.defaultObject = {
            dates: {
                calendars: {
                    gregorian: {
                        months: {
                            "stand-alone": {
                                abbreviated: {
                                    "1": "Jan",
                                    "2": "Feb",
                                    "3": "Mar",
                                    "4": "Apr",
                                    "5": "May",
                                    "6": "Jun",
                                    "7": "Jul",
                                    "8": "Aug",
                                    "9": "Sep",
                                    "10": "Oct",
                                    "11": "Nov",
                                    "12": "Dec"
                                },
                                narrow: {
                                    "1": "J",
                                    "2": "F",
                                    "3": "M",
                                    "4": "A",
                                    "5": "M",
                                    "6": "J",
                                    "7": "J",
                                    "8": "A",
                                    "9": "S",
                                    "10": "O",
                                    "11": "N",
                                    "12": "D"
                                },
                                wide: {
                                    "1": "January",
                                    "2": "February",
                                    "3": "March",
                                    "4": "April",
                                    "5": "May",
                                    "6": "June",
                                    "7": "July",
                                    "8": "August",
                                    "9": "September",
                                    "10": "October",
                                    "11": "November",
                                    "12": "December"
                                }
                            }
                        },
                        days: {
                            "stand-alone": {
                                abbreviated: {
                                    sun: "Sun",
                                    mon: "Mon",
                                    tue: "Tue",
                                    wed: "Wed",
                                    thu: "Thu",
                                    fri: "Fri",
                                    sat: "Sat"
                                },
                                narrow: {
                                    sun: "S",
                                    mon: "M",
                                    tue: "T",
                                    wed: "W",
                                    thu: "T",
                                    fri: "F",
                                    sat: "S"
                                },
                                short: {
                                    sun: "Su",
                                    mon: "Mo",
                                    tue: "Tu",
                                    wed: "We",
                                    thu: "Th",
                                    fri: "Fr",
                                    sat: "Sa"
                                },
                                wide: {
                                    sun: "Sunday",
                                    mon: "Monday",
                                    tue: "Tuesday",
                                    wed: "Wednesday",
                                    thu: "Thursday",
                                    fri: "Friday",
                                    sat: "Saturday"
                                }
                            }
                        },
                        dayPeriods: {
                            format: {
                                wide: {
                                    am: "AM",
                                    pm: "PM"
                                }
                            }
                        },
                        eras: {
                            eraNames: {
                                "0": "Before Christ",
                                "0-alt-variant": "Before Common Era",
                                "1": "Anno Domini",
                                "1-alt-variant": "Common Era"
                            },
                            eraAbbr: {
                                "0": "BC",
                                "0-alt-variant": "BCE",
                                "1": "AD",
                                "1-alt-variant": "CE"
                            },
                            eraNarrow: {
                                "0": "B",
                                "0-alt-variant": "BCE",
                                "1": "A",
                                "1-alt-variant": "CE"
                            }
                        },
                        dateFormats: {
                            full: "EEEE, MMMM d, y",
                            long: "MMMM d, y",
                            medium: "MMM d, y",
                            short: "M/d/yy"
                        },
                        timeFormats: {
                            full: "h:mm:ss a zzzz",
                            long: "h:mm:ss a z",
                            medium: "h:mm:ss a",
                            short: "h:mm a"
                        },
                        dateTimeFormats: {
                            full: "{1} 'at' {0}",
                            long: "{1} 'at' {0}",
                            medium: "{1}, {0}",
                            short: "{1}, {0}",
                            availableFormats: {
                                d: "d",
                                E: "ccc",
                                Ed: "d E",
                                Ehm: "E h:mm a",
                                EHm: "E HH:mm",
                                Ehms: "E h:mm:ss a",
                                EHms: "E HH:mm:ss",
                                Gy: "y G",
                                GyMMM: "MMM y G",
                                GyMMMd: "MMM d, y G",
                                GyMMMEd: "E, MMM d, y G",
                                h: "h a",
                                H: "HH",
                                hm: "h:mm a",
                                Hm: "HH:mm",
                                hms: "h:mm:ss a",
                                Hms: "HH:mm:ss",
                                hmsv: "h:mm:ss a v",
                                Hmsv: "HH:mm:ss v",
                                hmv: "h:mm a v",
                                Hmv: "HH:mm v",
                                M: "L",
                                Md: "M/d",
                                MEd: "E, M/d",
                                MMM: "LLL",
                                MMMd: "MMM d",
                                MMMEd: "E, MMM d",
                                MMMMd: "MMMM d",
                                ms: "mm:ss",
                                y: "y",
                                yM: "M/y",
                                yMd: "M/d/y",
                                yMEd: "E, M/d/y",
                                yMMM: "MMM y",
                                yMMMd: "MMM d, y",
                                yMMMEd: "E, MMM d, y",
                                yMMMM: "MMMM y"
                            }
                        }
                    }
                },
                timeZoneNames: {
                    hourFormat: "+HH:mm;-HH:mm",
                    gmtFormat: "GMT{0}",
                    gmtZeroFormat: "GMT"
                }
            },
            numbers: {
                currencies: {
                    USD: {
                        displayName: "US Dollar",
                        symbol: "$",
                        "symbol-alt-narrow": "$"
                    },
                    EUR: {
                        displayName: "Euro",
                        symbol: "€",
                        "symbol-alt-narrow": "€"
                    },
                    GBP: {
                        displayName: "British Pound",
                        "symbol-alt-narrow": "£"
                    }
                },
                defaultNumberingSystem: "latn",
                minimumGroupingDigits: "1",
                "symbols-numberSystem-latn": {
                    decimal: ".",
                    group: ",",
                    list: ";",
                    percentSign: "%",
                    plusSign: "+",
                    minusSign: "-",
                    exponential: "E",
                    superscriptingExponent: "×",
                    perMille: "‰",
                    infinity: "∞",
                    nan: "NaN",
                    timeSeparator: ":"
                },
                "decimalFormats-numberSystem-latn": {
                    standard: "#,##0.###"
                },
                "percentFormats-numberSystem-latn": {
                    standard: "#,##0%"
                },
                "currencyFormats-numberSystem-latn": {
                    standard: "¤#,##0.00",
                    accounting: "¤#,##0.00;(¤#,##0.00)"
                },
                "scientificFormats-numberSystem-latn": {
                    standard: "#E0"
                }
            }
        }, IntlBase.monthIndex = {
            3: "abbreviated",
            4: "wide",
            5: "narrow",
            1: "abbreviated"
        }, IntlBase.month = "months", IntlBase.days = "days", IntlBase.patternMatcher = {
            C: "currency",
            P: "percent",
            N: "decimal",
            A: "currency",
            E: "scientific"
        }, IntlBase.getResultantPattern = getResultantPattern, IntlBase.getDependables = getDependables, 
        IntlBase.getSymbolPattern = getSymbolPattern, IntlBase.getProperNumericSkeleton = getProperNumericSkeleton, 
        IntlBase.getFormatData = getFormatData, IntlBase.getCurrencySymbol = getCurrencySymbol, 
        IntlBase.customFormat = function(format, dOptions, obj) {
            for (var options = {}, formatSplit = format.split(";"), data = [ "pData", "nData", "zeroData" ], i = 0; i < formatSplit.length; i++) options[data[i]] = function(format, dOptions, numObject) {
                var cOptions = {
                    type: "decimal",
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }, pattern = format.match(IntlBase.customRegex);
                (isNullOrUndefined(pattern) || "" === pattern[5] && "N/A" !== format) && (cOptions.type = void 0), 
                cOptions.nlead = pattern[1], cOptions.nend = pattern[10];
                var integerPart = pattern[6];
                cOptions.useGrouping = -1 !== integerPart.indexOf(","), integerPart = integerPart.replace(/,/g, "");
                var fractionPart = pattern[7];
                if (-1 !== integerPart.indexOf("0") && (cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf("0")), 
                isNullOrUndefined(fractionPart) || (cOptions.minimumFractionDigits = fractionPart.lastIndexOf("0"), 
                cOptions.maximumFractionDigits = fractionPart.lastIndexOf("#"), -1 === cOptions.minimumFractionDigits && (cOptions.minimumFractionDigits = 0), 
                (-1 === cOptions.maximumFractionDigits || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) && (cOptions.maximumFractionDigits = cOptions.minimumFractionDigits)), 
                isNullOrUndefined(dOptions) ? extend(cOptions, isCurrencyPercent([ cOptions.nlead, cOptions.nend ], "%", "%")) : (extend(cOptions, isCurrencyPercent([ cOptions.nlead, cOptions.nend ], "$", dOptions.currencySymbol)), 
                cOptions.isCurrency || extend(cOptions, isCurrencyPercent([ cOptions.nlead, cOptions.nend ], "%", dOptions.percentSymbol))), 
                !isNullOrUndefined(numObject)) {
                    var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, !1);
                    cOptions.useGrouping && (cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]], 
                    cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(";")[0])), 
                    cOptions.nlead = cOptions.nlead.replace(/\'/g, ""), cOptions.nend = cOptions.nend.replace(/\'/g, "");
                }
                return cOptions;
            }(formatSplit[i], dOptions, obj);
            return isNullOrUndefined(options.nData) && (options.nData = extend({}, options.pData), 
            options.nData.nlead = isNullOrUndefined(dOptions) ? "-" + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead), 
            options;
        }, IntlBase.isCurrencyPercent = isCurrencyPercent, IntlBase.getDateSeparator = function(dateObj) {
            var value = (getValue("dateFormats.short", dateObj) || "").match(/[d‏M‏]([^d‏M])[d‏M‏]/i);
            return value ? value[1] : "/";
        }, IntlBase.getActualDateTimeFormat = function(culture, options, cldr, isExcelFormat) {
            var dependable = getDependables(cldr, culture), actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);
            if (isExcelFormat) {
                if (-1 !== (actualPattern = actualPattern.replace(patternRegex, function(pattern) {
                    return patternMatch[pattern];
                })).indexOf("z")) {
                    var tLength = actualPattern.match(/z/g).length, timeZonePattern = void 0, options_1 = {
                        timeZone: {}
                    };
                    options_1.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr)), 
                    options_1.timeZone = getValue("dates.timeZoneNames", dependable.parserObject);
                    var timezone = new Date().getTimezoneOffset(), pattern = tLength < 4 ? "+H;-H" : options_1.timeZone.hourFormat;
                    pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator), 0 === timezone ? timeZonePattern = options_1.timeZone.gmtZeroFormat : (timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern), 
                    timeZonePattern = options_1.timeZone.gmtFormat.replace(/\{0\}/, timeZonePattern)), 
                    actualPattern = actualPattern.replace(/[z]+/, '"' + timeZonePattern + '"');
                }
                actualPattern = actualPattern.replace(/ $/, "");
            }
            return actualPattern;
        }, IntlBase.getActualNumberFormat = function(culture, options, cldr) {
            var minFrac, dependable = getDependables(cldr, culture, !0), parseOptions = {
                custom: !0
            }, curObj = {}, curMatch = (options.format || "").match(IntlBase.currencyFormatRegex);
            if (curMatch) {
                var dOptions = {};
                dOptions.numberMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), !0);
                var curCode = getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode), symbolPattern = getSymbolPattern("currency", dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format)), split = (symbolPattern = symbolPattern.replace(/\u00A4/g, curCode)).split(";");
                curObj.hasNegativePattern = split.length > 1, curObj.nData = getFormatData(split[1] || "-" + split[0], !0, curCode), 
                curObj.pData = getFormatData(split[0], !1, curCode), curMatch[2] || options.minimumFractionDigits || options.maximumFractionDigits || (minFrac = getFormatData(symbolPattern.split(";")[0], !0, "", !0).minimumFraction);
            }
            var actualPattern;
            if (IntlBase.formatRegex.test(options.format) || !options.format) {
                if (extend(parseOptions, getProperNumericSkeleton(options.format || "N")), parseOptions.custom = !1, 
                actualPattern = "###0", (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) && (parseOptions.fractionDigits && (options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits), 
                actualPattern = function(pattern, minDigits, maxDigits) {
                    pattern += ".";
                    for (var a = 0; a < minDigits; a++) pattern += "0";
                    if (minDigits < maxDigits) for (var diff = maxDigits - minDigits, b = 0; b < diff; b++) pattern += "#";
                    return pattern;
                }(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || 0, options.maximumFractionDigits || 0)), 
                options.minimumIntegerDigits && (actualPattern = function(pattern, digits) {
                    for (var temp = pattern.split("."), integer = "", x = 0; x < digits; x++) integer += "0";
                    return temp[1] ? integer + "." + temp[1] : integer;
                }(actualPattern, options.minimumIntegerDigits)), options.useGrouping && (actualPattern = function(pattern) {
                    var temp = pattern.split("."), integer = temp[0], no = 3 - integer.length % 3;
                    pattern = "";
                    for (var x = (integer = (no && 1 === no ? "#" : 2 === no ? "##" : "") + integer).length - 1; x > 0; x -= 3) pattern = "," + integer[x - 2] + integer[x - 1] + integer[x] + pattern;
                    return pattern = pattern.slice(1), temp[1] ? pattern + "." + temp[1] : pattern;
                }(actualPattern)), "currency" === parseOptions.type) {
                    var cPattern = actualPattern;
                    actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend, curObj.hasNegativePattern && (actualPattern += ";" + curObj.nData.nlead + cPattern + curObj.nData.nend);
                }
                "percent" === parseOptions.type && (actualPattern += " %");
            } else actualPattern = options.format.replace(/\'/g, '"');
            return actualPattern;
        }, IntlBase.getWeekData = function(culture, cldr) {
            var firstDay = defaultFirstDay, mapper = getValue("supplemental.weekData.firstDay", cldr), iCulture = culture;
            return /en-/.test(iCulture) && (iCulture = iCulture.slice(3)), iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2), 
            mapper && (firstDay = mapper[iCulture] || defaultFirstDay), firstDayMapper[firstDay];
        };
    }(IntlBase || (IntlBase = {}));
    var lastPageID, abbreviateRegexGlobal = /\/MMMMM|MMMM|MMM|a|LLL|EEEEE|EEEE|E|K|ccc|G+|z+/gi, weekdayKey = [ "sun", "mon", "tue", "wed", "thu", "fri", "sat" ], timeSetter = {
        m: "getMinutes",
        h: "getHours",
        H: "getHours",
        s: "getSeconds",
        d: "getDate"
    }, datePartMatcher = {
        M: "month",
        d: "day",
        E: "weekday",
        c: "weekday",
        y: "year",
        m: "minute",
        h: "hour",
        H: "hour",
        s: "second",
        L: "month",
        a: "designator",
        z: "timeZone",
        Z: "timeZone",
        G: "era"
    }, DateFormat = function() {
        function DateFormat() {}
        return DateFormat.dateFormat = function(culture, option, cldr) {
            var _this = this, dependable = IntlBase.getDependables(cldr, culture), formatOptions = {}, resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type);
            if (formatOptions.dateSeperator = IntlBase.getDateSeparator(dependable.dateObject), 
            isUndefined(resPattern)) throwError("Format options or type given must be invalid"); else {
                formatOptions.pattern = resPattern, formatOptions.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));
                for (var _i = 0, patternMatch_1 = resPattern.match(abbreviateRegexGlobal) || []; _i < patternMatch_1.length; _i++) {
                    var str = patternMatch_1[_i], len = str.length, char = str[0];
                    switch ("K" === char && (char = "h"), char) {
                      case "E":
                      case "c":
                        formatOptions.weekday = dependable.dateObject[IntlBase.days]["stand-alone"][IntlBase.monthIndex[len]];
                        break;

                      case "M":
                      case "L":
                        formatOptions.month = dependable.dateObject[IntlBase.month]["stand-alone"][IntlBase.monthIndex[len]];
                        break;

                      case "a":
                        formatOptions.designator = getValue("dayPeriods.format.wide", dependable.dateObject);
                        break;

                      case "G":
                        var eText = len <= 3 ? "eraAbbr" : 4 === len ? "eraNames" : "eraNarrow";
                        formatOptions.era = getValue("eras." + eText, dependable.dateObject);
                        break;

                      case "z":
                        formatOptions.timeZone = getValue("dates.timeZoneNames", dependable.parserObject);
                    }
                }
            }
            return function(value) {
                return isNaN(value.getDate()) ? null : _this.intDateFormatter(value, formatOptions);
            };
        }, DateFormat.intDateFormatter = function(value, options) {
            for (var ret = "", _i = 0, matches_1 = options.pattern.match(IntlBase.dateParseRegex); _i < matches_1.length; _i++) {
                var match = matches_1[_i], length_1 = match.length, char = match[0];
                "K" === char && (char = "h");
                var curval = void 0, isNumber = void 0, processNumber = void 0, curstr = "";
                switch (char) {
                  case "M":
                  case "L":
                    curval = value.getMonth() + 1, length_1 > 2 ? ret += options.month[curval] : isNumber = !0;
                    break;

                  case "E":
                  case "c":
                    ret += options.weekday[weekdayKey[value.getDay()]];
                    break;

                  case "H":
                  case "h":
                  case "m":
                  case "s":
                  case "d":
                    isNumber = !0, curval = value[timeSetter[char]](), "h" === char && (curval = curval % 12 || 12);
                    break;

                  case "y":
                    processNumber = !0, curstr += value.getFullYear(), 2 === length_1 && (curstr = curstr.substr(curstr.length - 2));
                    break;

                  case "a":
                    var desig = value.getHours() < 12 ? "am" : "pm";
                    ret += options.designator[desig];
                    break;

                  case "G":
                    var dec = value.getFullYear() < 0 ? 0 : 1;
                    ret += options.era[dec];
                    break;

                  case "'":
                    ret += "''" === match ? "'" : match.replace(/\'/g, "");
                    break;

                  case "z":
                    var timezone = value.getTimezoneOffset(), pattern_1 = length_1 < 4 ? "+H;-H" : options.timeZone.hourFormat;
                    pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator), 0 === timezone ? ret += options.timeZone.gmtZeroFormat : (processNumber = !0, 
                    curstr = this.getTimeZoneValue(timezone, pattern_1)), curstr = options.timeZone.gmtFormat.replace(/\{0\}/, curstr);
                    break;

                  case ":":
                    ret += options.numMapper.numberSymbols.timeSeparator;
                    break;

                  case "/":
                    ret += options.dateSeperator;
                    break;

                  default:
                    ret += match;
                }
                isNumber && (processNumber = !0, curstr = this.checkTwodigitNumber(curval, length_1)), 
                processNumber && (ret += ParserBase.convertValueParts(curstr, IntlBase.latnParseRegex, options.numMapper.mapper));
            }
            return ret;
        }, DateFormat.checkTwodigitNumber = function(val, len) {
            var ret = val + "";
            return 2 === len && 2 !== ret.length ? "0" + ret : ret;
        }, DateFormat.getTimeZoneValue = function(tVal, pattern) {
            var _this = this, curPattern = pattern.split(";")[tVal > 0 ? 1 : 0], no = Math.abs(tVal);
            return curPattern = curPattern.replace(/HH?|mm/g, function(str) {
                var len = str.length, ishour = -1 !== str.indexOf("H");
                return _this.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);
            });
        }, DateFormat;
    }(), latnRegex$1 = /^[0-9]*$/, timeSetter$1 = {
        minute: "setMinutes",
        hour: "setHours",
        second: "setSeconds",
        day: "setDate",
        month: "setMonth"
    }, DateParser = function() {
        function DateParser() {}
        return DateParser.dateParser = function(culture, option, cldr) {
            var hourOnly, _this = this, dependable = IntlBase.getDependables(cldr, culture), numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr)), parseOptions = {}, resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type), regexString = "";
            if (isUndefined(resPattern)) throwError("Format options or type given must be invalid"); else {
                parseOptions = {
                    pattern: resPattern,
                    evalposition: {}
                };
                for (var patternMatch = resPattern.match(IntlBase.dateParseRegex) || [], length_1 = patternMatch.length, gmtCorrection = 0, zCorrectTemp = 0, isgmtTraversed = !1, nRegx = numOptions.numericRegex, numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr)), i = 0; i < length_1; i++) {
                    var str = patternMatch[i], len = str.length, char = "K" === str[0] ? "h" : str[0], isNumber = void 0, canUpdate = void 0, charKey = datePartMatcher[char], optional = 2 === len ? "" : "?";
                    switch (isgmtTraversed && (gmtCorrection = zCorrectTemp, isgmtTraversed = !1), char) {
                      case "E":
                      case "c":
                        var weekObject = ParserBase.reverseObject(dependable.dateObject[IntlBase.days]["stand-alone"][IntlBase.monthIndex[len]]);
                        regexString += "(" + Object.keys(weekObject).join("|") + ")";
                        break;

                      case "M":
                      case "L":
                      case "d":
                      case "m":
                      case "s":
                      case "h":
                      case "H":
                        canUpdate = !0, ("M" === char || "L" === char) && len > 2 ? (parseOptions[charKey] = ParserBase.reverseObject(dependable.dateObject.months["stand-alone"][IntlBase.monthIndex[len]]), 
                        regexString += "(" + Object.keys(parseOptions[charKey]).join("|") + ")") : (isNumber = !0, 
                        regexString += "(" + nRegx + nRegx + optional + ")"), "h" === char && (parseOptions.hour12 = !0);
                        break;

                      case "y":
                        canUpdate = isNumber = !0, regexString += 2 === len ? "(" + nRegx + nRegx + ")" : "(" + nRegx + "{" + len + ",})";
                        break;

                      case "a":
                        canUpdate = !0, parseOptions[charKey] = ParserBase.reverseObject(getValue("dayPeriods.format.wide", dependable.dateObject)), 
                        regexString += "(" + Object.keys(parseOptions[charKey]).join("|") + ")";
                        break;

                      case "G":
                        canUpdate = !0;
                        var eText = len <= 3 ? "eraAbbr" : 4 === len ? "eraNames" : "eraNarrow";
                        parseOptions[charKey] = ParserBase.reverseObject(getValue("eras." + eText, dependable.dateObject)), 
                        regexString += "(" + Object.keys(parseOptions[charKey]).join("|") + "?)";
                        break;

                      case "z":
                        canUpdate = 0 !== new Date().getTimezoneOffset(), parseOptions[charKey] = getValue("dates.timeZoneNames", dependable.parserObject);
                        var tzone = parseOptions[charKey], hpattern = (hourOnly = len < 4) ? "+H;-H" : tzone.hourFormat;
                        hpattern = hpattern.replace(/:/g, numMapper.timeSeparator), regexString += "(" + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ")?", 
                        isgmtTraversed = !0, zCorrectTemp = hourOnly ? 6 : 12;
                        break;

                      case "'":
                        regexString += "(" + str.replace(/\'/g, "") + ")?";
                        break;

                      default:
                        regexString += "([\\D])";
                    }
                    canUpdate && (parseOptions.evalposition[charKey] = {
                        isNumber: isNumber,
                        pos: i + 1 + gmtCorrection,
                        hourOnly: hourOnly
                    }), i !== length_1 - 1 || isNullOrUndefined(regexString) || (parseOptions.parserRegex = new RegExp("^" + regexString + "$"));
                }
            }
            return function(value) {
                var parsedDateParts = _this.internalDateParse(value, parseOptions, numOptions);
                return isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length ? null : _this.getDateObject(parsedDateParts);
            };
        }, DateParser.getDateObject = function(options, value) {
            var res = value || new Date();
            res.setMilliseconds(0);
            var y = options.year, desig = options.designator, tzone = options.timeZone;
            if (!isUndefined(y)) {
                if ((y + "").length <= 2) {
                    y += 100 * Math.floor(res.getFullYear() / 100);
                }
                res.setFullYear(y);
            }
            for (var _i = 0, tKeys_1 = [ "hour", "minute", "second", "month", "day" ]; _i < tKeys_1.length; _i++) {
                var key = tKeys_1[_i], tValue = options[key];
                if (!isUndefined(tValue)) if ("month" === key) {
                    if ((tValue -= 1) < 0 || tValue > 11) return new Date("invalid");
                    var pDate = res.getDate();
                    res.setDate(1), res[timeSetter$1[key]](tValue);
                    var lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();
                    res.setDate(pDate < lDate ? pDate : lDate);
                } else {
                    if ("day" === key) {
                        var lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();
                        if (tValue < 1 || tValue > lastDay) return null;
                    }
                    res[timeSetter$1[key]](tValue);
                }
            }
            if (!isUndefined(desig)) {
                var hour = res.getHours();
                "pm" === desig ? res.setHours(hour + (12 === hour ? 0 : 12)) : 12 === hour && res.setHours(0);
            }
            if (!isUndefined(tzone)) {
                var tzValue = tzone - res.getTimezoneOffset();
                0 !== tzValue && res.setMinutes(res.getMinutes() + tzValue);
            }
            return res;
        }, DateParser.internalDateParse = function(value, parseOptions, num) {
            var matches = value.match(parseOptions.parserRegex), retOptions = {
                hour: 0,
                minute: 0,
                second: 0
            };
            num.numericRegex;
            if (isNullOrUndefined(matches)) return null;
            for (var _i = 0, props_1 = Object.keys(parseOptions.evalposition); _i < props_1.length; _i++) {
                var prop = props_1[_i], curObject = parseOptions.evalposition[prop], matchString = matches[curObject.pos];
                if (curObject.isNumber) retOptions[prop] = this.internalNumberParser(matchString, num); else if ("timeZone" !== prop || isUndefined(matchString)) retOptions[prop] = parseOptions[prop][matchString]; else {
                    var pos = curObject.pos, val = void 0, tmatch = matches[pos + 1], flag = !isUndefined(tmatch);
                    curObject.hourOnly ? val = 60 * this.getZoneValue(flag, tmatch, matches[pos + 4], num) : (val = 60 * this.getZoneValue(flag, tmatch, matches[pos + 7], num), 
                    val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num)), isNullOrUndefined(val) || (retOptions[prop] = val);
                }
            }
            return parseOptions.hour12 && (retOptions.hour12 = !0), retOptions;
        }, DateParser.internalNumberParser = function(value, option) {
            return value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair), 
            latnRegex$1.test(value) ? +value : null;
        }, DateParser.parseTimeZoneRegx = function(hourFormat, tZone, nRegex) {
            var ret, splitStr, pattern = tZone.gmtFormat, cRegex = "(" + nRegex + ")(" + nRegex + ")";
            return ret = hourFormat.replace("+", "\\+"), ret = -1 !== hourFormat.indexOf("HH") ? ret.replace(/HH|mm/g, "(" + cRegex + ")") : ret.replace(/H|m/g, "(" + cRegex + "?)"), 
            splitStr = ret.split(";").map(function(str) {
                return pattern.replace("{0}", str);
            }), ret = splitStr.join("|") + "|" + tZone.gmtZeroFormat;
        }, DateParser.getZoneValue = function(flag, val1, val2, num) {
            var ival = flag ? val1 : val2;
            if (!ival) return 0;
            var value = this.internalNumberParser(ival, num);
            return flag ? -value : value;
        }, DateParser;
    }(), parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/, groupRegex = /,/g, keys = [ "minusSign", "infinity" ], NumberParser = function() {
        function NumberParser() {}
        return NumberParser.numberParser = function(culture, option, cldr) {
            var numOptions, _this = this, dependable = IntlBase.getDependables(cldr, culture, !0), parseOptions = {
                custom: !0
            };
            IntlBase.formatRegex.test(option.format) || !option.format ? (extend(parseOptions, IntlBase.getProperNumericSkeleton(option.format || "N")), 
            parseOptions.custom = !1) : extend(parseOptions, IntlBase.customFormat(option.format, null, null)), 
            numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), !0), 
            parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch)), 
            parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];
            var symbolpattern = IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);
            if (symbolpattern) {
                var split = (symbolpattern = symbolpattern.replace(/\u00A4/g, IntlBase.defaultCurrency)).split(";");
                parseOptions.nData = IntlBase.getFormatData(split[1] || "-" + split[0], !0, ""), 
                parseOptions.pData = IntlBase.getFormatData(split[0], !0, "");
            }
            return function(value) {
                return _this.getParsedNumber(value, parseOptions, numOptions);
            };
        }, NumberParser.getParsedNumber = function(value, options, numOptions) {
            var isNegative, isPercent, tempValue, lead, end, ret;
            if (-1 !== value.indexOf(options.infinity)) return 1 / 0;
            value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch), 
            0 === (value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair)).indexOf(".") && (value = "0" + value);
            var matches = value.match(parseRegex);
            if (isNullOrUndefined(matches)) return NaN;
            lead = matches[1], tempValue = matches[2];
            var exponent = matches[5];
            return end = matches[6], isNegative = options.custom ? lead === options.nData.nlead && end === options.nData.nend : -1 !== lead.indexOf(options.nData.nlead) && -1 !== end.indexOf(options.nData.nend), 
            isPercent = isNegative ? options.nData.isPercent : options.pData.isPercent, tempValue = tempValue.replace(groupRegex, ""), 
            exponent && (tempValue += exponent), ret = +tempValue, ("percent" === options.type || isPercent) && (ret /= 100), 
            (options.custom || options.fractionDigits) && (ret = parseFloat(ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.fractionDigits))), 
            isNegative && (ret *= -1), ret;
        }, NumberParser;
    }(), onIntlChange = new Observer(), rightToLeft = !1, cldrData = {}, defaultCulture = "en-US", defaultCurrencyCode = "USD", mapper = [ "numericObject", "dateObject" ], Internationalization = function() {
        function Internationalization(cultureName) {
            cultureName && (this.culture = cultureName);
        }
        return Internationalization.prototype.getDateFormat = function(options) {
            return DateFormat.dateFormat(this.getCulture(), options || {
                type: "date",
                skeleton: "short"
            }, cldrData);
        }, Internationalization.prototype.getNumberFormat = function(options) {
            return options && !options.currency && (options.currency = defaultCurrencyCode), 
            NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);
        }, Internationalization.prototype.getDateParser = function(options) {
            return DateParser.dateParser(this.getCulture(), options || {
                skeleton: "short",
                type: "date"
            }, cldrData);
        }, Internationalization.prototype.getNumberParser = function(options) {
            return NumberParser.numberParser(this.getCulture(), options || {
                format: "N"
            }, cldrData);
        }, Internationalization.prototype.formatNumber = function(value, option) {
            return this.getNumberFormat(option)(value);
        }, Internationalization.prototype.formatDate = function(value, option) {
            return this.getDateFormat(option)(value);
        }, Internationalization.prototype.parseDate = function(value, option) {
            return this.getDateParser(option)(value);
        }, Internationalization.prototype.parseNumber = function(value, option) {
            return this.getNumberParser(option)(value);
        }, Internationalization.prototype.getDatePattern = function(option, isExcelFormat) {
            return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);
        }, Internationalization.prototype.getNumberPattern = function(option) {
            return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData);
        }, Internationalization.prototype.getFirstDayOfWeek = function() {
            return IntlBase.getWeekData(this.getCulture(), cldrData);
        }, Internationalization.prototype.getCulture = function() {
            return this.culture || defaultCulture;
        }, Internationalization;
    }(), __extends$2 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$2 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, componentCount = 0, lastHistoryLen = 0, Component = function(_super) {
        function Component(options, selector) {
            var _this = _super.call(this, options, selector) || this;
            return _this.randomId = uniqueID(), _this.needsID = !1, _this.createElement = createElement, 
            isNullOrUndefined(_this.enableRtl) && _this.setProperties({
                enableRtl: rightToLeft
            }, !0), isNullOrUndefined(_this.locale) && _this.setProperties({
                locale: defaultCulture
            }, !0), _this.moduleLoader = new ModuleLoader(_this), _this.localObserver = new Observer(_this), 
            _this.detectFunction = new Function("args", "var prop = Object.keys(args); if(prop.length){this[prop[0]] = args[prop[0]];}"), 
            onIntlChange.on("notifyExternalChange", _this.detectFunction, _this, _this.randomId), 
            isUndefined(selector) || _this.appendTo(), _this;
        }
        return __extends$2(Component, _super), Component.prototype.requiredModules = function() {
            return [];
        }, Component.prototype.destroy = function() {
            this.isDestroyed || (this.enablePersistence && this.setPersistData(), this.localObserver.destroy(), 
            this.refreshing || (this.trigger("destroyed", {
                cancel: !1
            }), _super.prototype.destroy.call(this), this.moduleLoader.clean(), onIntlChange.off("notifyExternalChange", this.detectFunction, this.randomId)));
        }, Component.prototype.refresh = function() {
            this.refreshing = !0, this.moduleLoader.clean(), this.destroy(), this.clearChanges(), 
            this.localObserver = new Observer(this), this.preRender(), this.injectModules(), 
            this.render(), this.refreshing = !1;
        }, Component.prototype.appendTo = function(selector) {
            if (isNullOrUndefined(selector) || "string" != typeof selector ? isNullOrUndefined(selector) || (this.element = selector) : this.element = document.querySelector(selector), 
            !isNullOrUndefined(this.element)) {
                this.isProtectedOnChange = !1, this.needsID && !this.element.id && (this.element.id = this.getUniqueID(this.getModuleName())), 
                this.enablePersistence && (this.mergePersistData(), window.addEventListener("unload", this.setPersistData.bind(this)));
                var inst = getValue("ej2_instances", this.element);
                inst && -1 !== inst.indexOf(this) || _super.prototype.addInstance.call(this), this.preRender(), 
                this.injectModules(), this.render(), this.trigger("created");
            }
        }, Component.prototype.dataBind = function() {
            this.injectModules(), _super.prototype.dataBind.call(this);
        }, Component.prototype.on = function(event, handler, context) {
            if ("string" == typeof event) this.localObserver.on(event, handler, context); else for (var _i = 0, event_1 = event; _i < event_1.length; _i++) {
                var arg = event_1[_i];
                this.localObserver.on(arg.event, arg.handler, arg.context);
            }
        }, Component.prototype.off = function(event, handler) {
            if ("string" == typeof event) this.localObserver.off(event, handler); else for (var _i = 0, event_2 = event; _i < event_2.length; _i++) {
                var arg = event_2[_i];
                this.localObserver.off(arg.event, arg.handler);
            }
        }, Component.prototype.notify = function(property, argument) {
            !0 !== this.isDestroyed && this.localObserver.notify(property, argument);
        }, Component.prototype.getInjectedModules = function() {
            return this.injectedModules;
        }, Component.Inject = function() {
            for (var moduleList = [], _i = 0; _i < arguments.length; _i++) moduleList[_i] = arguments[_i];
            this.prototype.injectedModules || (this.prototype.injectedModules = []);
            for (var i = 0; i < moduleList.length; i++) -1 === this.prototype.injectedModules.indexOf(moduleList[i]) && this.prototype.injectedModules.push(moduleList[i]);
        }, Component.prototype.injectModules = function() {
            this.injectedModules && this.injectedModules.length && this.moduleLoader.inject(this.requiredModules(), this.injectedModules);
        }, Component.prototype.mergePersistData = function() {
            var data = window.localStorage.getItem(this.getModuleName() + this.element.id);
            isNullOrUndefined(data) || "" === data || this.setProperties(JSON.parse(data), !0);
        }, Component.prototype.setPersistData = function() {
            this.isDestroyed || window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());
        }, Component.prototype.clearTemplate = function(templateName, index) {}, Component.prototype.getUniqueID = function(definedName) {
            return this.isHistoryChanged() && (componentCount = 0), lastPageID = this.pageID(location.href), 
            lastHistoryLen = history.length, definedName + "_" + lastPageID + "_" + componentCount++;
        }, Component.prototype.pageID = function(url) {
            var hash = 0;
            if (0 === url.length) return hash;
            for (var i = 0; i < url.length; i++) {
                hash = (hash << 5) - hash + url.charCodeAt(i), hash &= hash;
            }
            return Math.abs(hash);
        }, Component.prototype.isHistoryChanged = function() {
            return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;
        }, Component.prototype.addOnPersist = function(options) {
            for (var _this = this, persistObj = {}, _i = 0, options_1 = options; _i < options_1.length; _i++) {
                var key = options_1[_i], objValue = void 0;
                isUndefined(objValue = getValue(key, this)) || setValue(key, this.getActualProperties(objValue), persistObj);
            }
            return JSON.stringify(persistObj, function(key, value) {
                return _this.getActualProperties(value);
            });
        }, Component.prototype.getActualProperties = function(obj) {
            return obj instanceof ChildProperty ? getValue("properties", obj) : obj;
        }, Component.prototype.ignoreOnPersist = function(options) {
            return JSON.stringify(this.iterateJsonProperties(this.properties, options));
        }, Component.prototype.iterateJsonProperties = function(obj, ignoreList) {
            for (var newObj = {}, _loop_1 = function(key) {
                if (-1 === ignoreList.indexOf(key)) {
                    var value = obj[key];
                    if ("object" != typeof value || value instanceof Array) newObj[key] = value; else {
                        var newList = ignoreList.filter(function(str) {
                            return new RegExp(key + ".").test(str);
                        }).map(function(str) {
                            return str.replace(key + ".", "");
                        });
                        newObj[key] = this_1.iterateJsonProperties(this_1.getActualProperties(value), newList);
                    }
                }
            }, this_1 = this, _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
                _loop_1(_a[_i]);
            }
            return newObj;
        }, __decorate$2([ Property(!1) ], Component.prototype, "enablePersistence", void 0), 
        __decorate$2([ Property() ], Component.prototype, "enableRtl", void 0), __decorate$2([ Property() ], Component.prototype, "locale", void 0), 
        Component = __decorate$2([ NotifyPropertyChanges ], Component);
    }(Base);
    "undefined" != typeof window && window.addEventListener("popstate", function() {
        componentCount = 0;
    });
    var elementRect, popupRect, element, parentDocument, parentDocument$1, targetContainer, DialogUtility, __extends$3 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$3 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, defaultPosition = {
        left: 0,
        top: 0,
        bottom: 0,
        right: 0
    }, Position = function(_super) {
        function Position() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$3(Position, _super), __decorate$3([ Property(0) ], Position.prototype, "left", void 0), 
        __decorate$3([ Property(0) ], Position.prototype, "top", void 0), Position;
    }(ChildProperty), Draggable = function(_super) {
        function Draggable(element, options) {
            var _this = _super.call(this, options, element) || this;
            return _this.dragLimit = Draggable_1.getDefaultPosition(), _this.borderWidth = Draggable_1.getDefaultPosition(), 
            _this.padding = Draggable_1.getDefaultPosition(), _this.diffX = 0, _this.prevLeft = 0, 
            _this.prevTop = 0, _this.dragProcessStarted = !1, _this.tapHoldTimer = 0, _this.externalInitialize = !1, 
            _this.diffY = 0, _this.droppables = {}, _this.bind(), _this;
        }
        __extends$3(Draggable, _super), Draggable_1 = Draggable, Draggable.prototype.bind = function() {
            this.toggleEvents(), Browser.isIE && addClass([ this.element ], "e-block-touch"), 
            this.droppables[this.scope] = {};
        }, Draggable.getDefaultPosition = function() {
            return extend({}, defaultPosition);
        }, Draggable.prototype.toggleEvents = function(isUnWire) {
            var ele;
            isUndefined(this.handle) || (ele = select(this.handle, this.element));
            var handler = this.enableTapHold && Browser.isDevice && Browser.isTouch ? this.mobileInitialize : this.initialize;
            isUnWire ? EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler) : EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);
        }, Draggable.prototype.mobileInitialize = function(evt) {
            var _this = this, target = evt.currentTarget;
            this.tapHoldTimer = setTimeout(function() {
                _this.externalInitialize = !0, _this.removeTapholdTimer(), _this.initialize(evt, target);
            }, this.tapHoldThreshold), EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);
        }, Draggable.prototype.removeTapholdTimer = function() {
            clearTimeout(this.tapHoldTimer), EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);
        }, Draggable.prototype.initialize = function(evt, curTarget) {
            if (this.target = evt.currentTarget || curTarget, this.dragProcessStarted = !1, 
            !this.abort || isNullOrUndefined(closest(evt.target, this.abort))) {
                this.preventDefault && !isUndefined(evt.changedTouches) && evt.preventDefault(), 
                this.element.setAttribute("aria-grabbed", "true");
                var intCoord = this.getCoordinates(evt);
                if (this.initialPosition = {
                    x: intCoord.pageX,
                    y: intCoord.pageY
                }, !this.clone) {
                    var pos = this.element.getBoundingClientRect();
                    this.relativeXPosition = intCoord.pageX - pos.left, this.relativeYPosition = intCoord.pageY - pos.top;
                }
                this.externalInitialize ? this.intDragStart(evt) : (EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this), 
                EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this)), this.toggleEvents(!0), 
                document.body.classList.add("e-prevent-select"), this.externalInitialize = !1, EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);
            }
        }, Draggable.prototype.intDragStart = function(evt) {
            this.removeTapholdTimer();
            var isChangeTouch = !isUndefined(evt.changedTouches);
            if (!isChangeTouch || 1 === evt.changedTouches.length) {
                isChangeTouch && evt.preventDefault();
                var pos, intCordinate = this.getCoordinates(evt), styleProp = getComputedStyle(this.element);
                this.margin = {
                    left: parseInt(styleProp.marginLeft, 10),
                    top: parseInt(styleProp.marginTop, 10),
                    right: parseInt(styleProp.marginRight, 10),
                    bottom: parseInt(styleProp.marginBottom, 10)
                };
                var element = this.element;
                if (this.clone && this.dragTarget) {
                    var intClosest = closest(evt.target, this.dragTarget);
                    isNullOrUndefined(intClosest) || (element = intClosest);
                }
                this.offset = this.calculateParentPosition(element), this.position = this.getMousePosition(evt);
                var x = this.initialPosition.x - intCordinate.pageX, y = this.initialPosition.y - intCordinate.pageY;
                if (Math.sqrt(x * x + y * y) >= this.distance || this.externalInitialize) {
                    var ele = this.getHelperElement(evt);
                    if (!ele || isNullOrUndefined(ele)) return;
                    var dragTargetElement = this.helperElement = ele;
                    if (this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent), 
                    this.dragStart) {
                        var curTarget = this.getProperTargetElement(evt);
                        this.trigger("dragStart", {
                            event: evt,
                            element: element,
                            target: curTarget
                        });
                    }
                    this.dragArea ? this.setDragArea() : (this.dragLimit = {
                        left: 0,
                        right: 0,
                        bottom: 0,
                        top: 0
                    }, this.borderWidth = {
                        top: 0,
                        left: 0
                    }), pos = {
                        left: this.position.left - this.parentClientRect.left,
                        top: this.position.top - this.parentClientRect.top
                    }, this.clone && !this.enableTailMode && (this.diffX = this.position.left - this.offset.left, 
                    this.diffY = this.position.top - this.offset.top);
                    var posValue = this.getProcessedPositionValue({
                        top: pos.top - this.diffY + "px",
                        left: pos.left - this.diffX + "px"
                    });
                    setStyleAttribute(dragTargetElement, this.getDragPosition({
                        position: "absolute",
                        left: posValue.left,
                        top: posValue.top
                    })), EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart), EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy), 
                    isVisible(dragTargetElement) ? (EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this), 
                    EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this), this.setGlobalDroppables(!1, this.element, dragTargetElement)) : (this.toggleEvents(), 
                    document.body.classList.remove("e-prevent-select"));
                }
            }
        }, Draggable.prototype.elementInViewport = function(el) {
            for (this.top = el.offsetTop, this.left = el.offsetLeft, this.width = el.offsetWidth, 
            this.height = el.offsetHeight; el.offsetParent; ) el = el.offsetParent, this.top += el.offsetTop, 
            this.left += el.offsetLeft;
            return this.top >= window.pageYOffset && this.left >= window.pageXOffset && this.top + this.height <= window.pageYOffset + window.innerHeight && this.left + this.width <= window.pageXOffset + window.innerWidth;
        }, Draggable.prototype.getProcessedPositionValue = function(value) {
            return this.queryPositionInfo ? this.queryPositionInfo(value) : value;
        }, Draggable.prototype.calculateParentPosition = function(ele) {
            if (isNullOrUndefined(ele)) return {
                left: 0,
                top: 0
            };
            var rect = ele.getBoundingClientRect(), style = getComputedStyle(ele);
            return {
                left: rect.left + window.pageXOffset - parseInt(style.marginLeft, 10),
                top: rect.top + window.pageYOffset - parseInt(style.marginTop, 10)
            };
        }, Draggable.prototype.intDrag = function(evt) {
            if (isUndefined(evt.changedTouches) || 1 === evt.changedTouches.length) {
                var left, top;
                this.position = this.getMousePosition(evt);
                var docHeight = this.getDocumentWidthHeight("Height");
                docHeight < this.position.top && (this.position.top = docHeight);
                var docWidth = this.getDocumentWidthHeight("Width");
                if (docWidth < this.position.left && (this.position.left = docWidth), this.drag) {
                    var curTarget = this.getProperTargetElement(evt);
                    this.trigger("drag", {
                        event: evt,
                        element: this.element,
                        target: curTarget
                    });
                }
                var eleObj = this.checkTargetElement(evt);
                eleObj.target && eleObj.instance ? (eleObj.instance.dragData[this.scope] = this.droppables[this.scope], 
                eleObj.instance.intOver(evt, eleObj.target), this.hoverObject = eleObj) : this.hoverObject && (this.hoverObject.instance.intOut(evt, eleObj.target), 
                this.hoverObject.instance.dragData[this.scope] = null, this.hoverObject = null);
                var helperElement = this.droppables[this.scope].helper;
                this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);
                var tLeft = this.parentClientRect.left, tTop = this.parentClientRect.top, intCoord = this.getCoordinates(evt), pagex = intCoord.pageX, pagey = intCoord.pageY, dLeft = this.position.left - this.diffX, dTop = this.position.top - this.diffY;
                if (this.dragArea) {
                    var styles = getComputedStyle(helperElement);
                    if (this.pageX !== pagex || this.skipDistanceCheck) {
                        var helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));
                        left = this.dragLimit.left > dLeft ? this.dragLimit.left : this.dragLimit.right < dLeft + helperWidth ? this.dragLimit.right - helperWidth : dLeft;
                    }
                    if (this.pageY !== pagey || this.skipDistanceCheck) {
                        var helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));
                        top = this.dragLimit.top > dTop ? this.dragLimit.top : this.dragLimit.bottom < dTop + helperHeight ? this.dragLimit.bottom - helperHeight : dTop;
                    }
                } else left = dLeft, top = dTop;
                var iTop = tTop + this.borderWidth.top, iLeft = tLeft + this.borderWidth.left;
                this.dragProcessStarted && (isNullOrUndefined(top) && (top = this.prevTop), isNullOrUndefined(left) && (left = this.prevLeft));
                var dragValue = this.getProcessedPositionValue({
                    top: top - iTop + "px",
                    left: left - iLeft + "px"
                });
                setStyleAttribute(helperElement, this.getDragPosition(dragValue)), !this.elementInViewport(helperElement) && this.enableAutoScroll && this.helperElement.scrollIntoView(), 
                this.dragProcessStarted = !0, this.prevLeft = left, this.prevTop = top, this.position.left = left, 
                this.position.top = top, this.pageX = pagex, this.pageY = pagey;
            }
        }, Draggable.prototype.getDragPosition = function(dragValue) {
            var temp = extend({}, dragValue);
            return this.axis && ("x" === this.axis ? delete temp.top : "y" === this.axis && delete temp.left), 
            temp;
        }, Draggable.prototype.getDocumentWidthHeight = function(str) {
            var docBody = document.body, docEle = document.documentElement;
            return Math.max(docBody["scroll" + str], docEle["scroll" + str], docBody["offset" + str], docEle["offset" + str], docEle["client" + str]);
        }, Draggable.prototype.intDragStop = function(evt) {
            if (this.dragProcessStarted = !1, isUndefined(evt.changedTouches) || 1 === evt.changedTouches.length) {
                if (-1 !== [ "touchend", "pointerup", "mouseup" ].indexOf(evt.type)) {
                    if (this.dragStop) {
                        var curTarget = this.getProperTargetElement(evt);
                        this.trigger("dragStop", {
                            event: evt,
                            element: this.element,
                            target: curTarget,
                            helper: this.helperElement
                        });
                    }
                    this.intDestroy(evt);
                } else this.element.setAttribute("aria-grabbed", "false");
                var eleObj = this.checkTargetElement(evt);
                eleObj.target && eleObj.instance && (eleObj.instance.dragStopCalled = !0, eleObj.instance.dragData[this.scope] = this.droppables[this.scope], 
                eleObj.instance.intDrop(evt, eleObj.target)), this.setGlobalDroppables(!0), document.body.classList.remove("e-prevent-select");
            }
        }, Draggable.prototype.intDestroy = function(evt) {
            this.dragProcessStarted = !1, this.toggleEvents(), document.body.classList.remove("e-prevent-select"), 
            this.element.setAttribute("aria-grabbed", "false"), EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart), 
            EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop), EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy), 
            EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);
        }, Draggable.prototype.onPropertyChanged = function(newProp, oldProp) {}, Draggable.prototype.getModuleName = function() {
            return "draggable";
        }, Draggable.prototype.setDragArea = function() {
            var eleWidthBound, eleHeightBound, ele, top = 0, left = 0;
            if (ele = "string" === typeof this.dragArea ? select(this.dragArea) : this.dragArea) {
                var elementArea = ele.getBoundingClientRect();
                eleWidthBound = elementArea.width ? elementArea.width : elementArea.right - elementArea.left, 
                eleHeightBound = elementArea.height ? elementArea.height : elementArea.bottom - elementArea.top;
                for (var keys = [ "Top", "Left", "Bottom", "Right" ], styles = getComputedStyle(ele), i = 0; i < keys.length; i++) {
                    var key = keys[i], tborder = styles["border" + key + "Width"], tpadding = styles["padding" + key], lowerKey = key.toLowerCase();
                    this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder), 
                    this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);
                }
                top = elementArea.top, left = elementArea.left, this.dragLimit.left = left + this.borderWidth.left + this.padding.left, 
                this.dragLimit.top = top + this.borderWidth.top + this.padding.top, this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right), 
                this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);
            }
        }, Draggable.prototype.getProperTargetElement = function(evt) {
            var ele, intCoord = this.getCoordinates(evt), prevStyle = this.helperElement.style.display || "";
            return compareElementParent(evt.target, this.helperElement) || -1 !== evt.type.indexOf("touch") ? (this.helperElement.style.display = "none", 
            ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY), this.helperElement.style.display = prevStyle) : ele = evt.target, 
            ele;
        }, Draggable.prototype.getMousePosition = function(evt) {
            var intCoord = this.getCoordinates(evt), pageX = this.clone ? intCoord.pageX : intCoord.pageX - this.relativeXPosition, pageY = this.clone ? intCoord.pageY : intCoord.pageY - this.relativeYPosition;
            return {
                left: pageX - (this.margin.left + this.cursorAt.left),
                top: pageY - (this.margin.top + this.cursorAt.top)
            };
        }, Draggable.prototype.getCoordinates = function(evt) {
            return evt.type.indexOf("touch") > -1 ? evt.changedTouches[0] : evt;
        }, Draggable.prototype.getHelperElement = function(evt) {
            var element;
            return this.clone ? this.helper ? element = this.helper({
                sender: evt,
                element: this.target
            }) : (element = createElement("div", {
                className: "e-drag-helper e-block-touch",
                innerHTML: "Draggable"
            }), document.body.appendChild(element)) : element = this.element, element;
        }, Draggable.prototype.setGlobalDroppables = function(reset, drag, helper) {
            this.droppables[this.scope] = reset ? null : {
                draggable: drag,
                helper: helper,
                draggedElement: this.element
            };
        }, Draggable.prototype.checkTargetElement = function(evt) {
            var target = this.getProperTargetElement(evt), dropIns = this.getDropInstance(target);
            if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {
                var parent_1 = closest(target.parentNode, ".e-droppable") || target.parentElement;
                parent_1 && (dropIns = this.getDropInstance(parent_1));
            }
            return {
                target: target,
                instance: dropIns
            };
        }, Draggable.prototype.getDropInstance = function(ele) {
            var drop, eleInst = ele && ele.ej2_instances;
            if (eleInst) for (var _i = 0, eleInst_1 = eleInst; _i < eleInst_1.length; _i++) {
                var inst = eleInst_1[_i];
                if ("droppable" === inst.getModuleName()) {
                    drop = inst;
                    break;
                }
            }
            return drop;
        }, Draggable.prototype.destroy = function() {
            this.toggleEvents(!0), _super.prototype.destroy.call(this);
        };
        var Draggable_1;
        return __decorate$3([ Complex({}, Position) ], Draggable.prototype, "cursorAt", void 0), 
        __decorate$3([ Property(!0) ], Draggable.prototype, "clone", void 0), __decorate$3([ Property() ], Draggable.prototype, "dragArea", void 0), 
        __decorate$3([ Event() ], Draggable.prototype, "drag", void 0), __decorate$3([ Event() ], Draggable.prototype, "dragStart", void 0), 
        __decorate$3([ Event() ], Draggable.prototype, "dragStop", void 0), __decorate$3([ Property(1) ], Draggable.prototype, "distance", void 0), 
        __decorate$3([ Property() ], Draggable.prototype, "handle", void 0), __decorate$3([ Property() ], Draggable.prototype, "abort", void 0), 
        __decorate$3([ Property() ], Draggable.prototype, "helper", void 0), __decorate$3([ Property("default") ], Draggable.prototype, "scope", void 0), 
        __decorate$3([ Property("") ], Draggable.prototype, "dragTarget", void 0), __decorate$3([ Property() ], Draggable.prototype, "axis", void 0), 
        __decorate$3([ Property() ], Draggable.prototype, "queryPositionInfo", void 0), 
        __decorate$3([ Property(!1) ], Draggable.prototype, "enableTailMode", void 0), __decorate$3([ Property(!1) ], Draggable.prototype, "skipDistanceCheck", void 0), 
        __decorate$3([ Property(!0) ], Draggable.prototype, "preventDefault", void 0), __decorate$3([ Property(!1) ], Draggable.prototype, "enableAutoScroll", void 0), 
        __decorate$3([ Property(!1) ], Draggable.prototype, "enableTapHold", void 0), __decorate$3([ Property(750) ], Draggable.prototype, "tapHoldThreshold", void 0), 
        Draggable = Draggable_1 = __decorate$3([ NotifyPropertyChanges ], Draggable);
    }(Base), __extends$4 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$4 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, Droppable = function(_super) {
        function Droppable(element, options) {
            var _this = _super.call(this, options, element) || this;
            return _this.mouseOver = !1, _this.dragData = {}, _this.dragStopCalled = !1, _this.bind(), 
            _this;
        }
        return __extends$4(Droppable, _super), Droppable.prototype.bind = function() {
            this.wireEvents();
        }, Droppable.prototype.wireEvents = function() {
            EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);
        }, Droppable.prototype.onPropertyChanged = function(newProp, oldProp) {}, Droppable.prototype.getModuleName = function() {
            return "droppable";
        }, Droppable.prototype.intOver = function(event, element) {
            if (!this.mouseOver) {
                var drag = this.dragData[this.scope];
                this.trigger("over", {
                    event: event,
                    target: element,
                    dragData: drag
                }), this.mouseOver = !0;
            }
        }, Droppable.prototype.intOut = function(event, element) {
            this.mouseOver && (this.trigger("out", {
                evt: event,
                target: element
            }), this.mouseOver = !1);
        }, Droppable.prototype.intDrop = function(evt, element) {
            if (this.dragStopCalled) {
                this.dragStopCalled = !1;
                var area, accept = !0, drag = this.dragData[this.scope], isDrag = !!drag && (drag.helper && isVisible(drag.helper));
                isDrag && (area = this.isDropArea(evt, drag.helper, element), this.accept && (accept = matches(drag.helper, this.accept))), 
                isDrag && this.drop && area.canDrop && accept && this.trigger("drop", {
                    event: evt,
                    target: area.target,
                    droppedElement: drag.helper,
                    dragData: drag
                }), this.mouseOver = !1;
            }
        }, Droppable.prototype.isDropArea = function(evt, helper, element) {
            var area = {
                canDrop: !0,
                target: element || evt.target
            }, isTouch = "touchend" === evt.type;
            if (isTouch || area.target === helper) {
                helper.style.display = "none";
                var coord = isTouch ? evt.changedTouches[0] : evt, ele = document.elementFromPoint(coord.clientX, coord.clientY);
                area.canDrop = !1, area.canDrop = compareElementParent(ele, this.element), area.canDrop && (area.target = ele), 
                helper.style.display = "";
            }
            return area;
        }, Droppable.prototype.destroy = function() {
            EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop), _super.prototype.destroy.call(this);
        }, __decorate$4([ Property() ], Droppable.prototype, "accept", void 0), __decorate$4([ Property("default") ], Droppable.prototype, "scope", void 0), 
        __decorate$4([ Event() ], Droppable.prototype, "drop", void 0), __decorate$4([ Event() ], Droppable.prototype, "over", void 0), 
        __decorate$4([ Event() ], Droppable.prototype, "out", void 0), Droppable = __decorate$4([ NotifyPropertyChanges ], Droppable);
    }(Base), __extends$5 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$5 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, keyCode = {
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        control: 17,
        alt: 18,
        pause: 19,
        capslock: 20,
        space: 32,
        escape: 27,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        leftarrow: 37,
        uparrow: 38,
        rightarrow: 39,
        downarrow: 40,
        insert: 45,
        delete: 46,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        semicolon: 186,
        plus: 187,
        comma: 188,
        minus: 189,
        dot: 190,
        forwardslash: 191,
        graveaccent: 192,
        openbracket: 219,
        backslash: 220,
        closebracket: 221,
        singlequote: 222
    }, KeyboardEvents = function(_super) {
        function KeyboardEvents(element, options) {
            var _this = _super.call(this, options, element) || this;
            return _this.keyPressHandler = function(e) {
                for (var isAltKey = e.altKey, isCtrlKey = e.ctrlKey, isShiftKey = e.shiftKey, curkeyCode = e.which, _i = 0, keys_1 = Object.keys(_this.keyConfigs); _i < keys_1.length; _i++) for (var key = keys_1[_i], _a = 0, configCollection_1 = _this.keyConfigs[key].split(","); _a < configCollection_1.length; _a++) {
                    var rconfig = configCollection_1[_a], rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());
                    isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode && (e.action = key, 
                    _this.keyAction && _this.keyAction(e));
                }
            }, _this.bind(), _this;
        }
        __extends$5(KeyboardEvents, _super), KeyboardEvents_1 = KeyboardEvents, KeyboardEvents.prototype.destroy = function() {
            this.unwireEvents(), _super.prototype.destroy.call(this);
        }, KeyboardEvents.prototype.onPropertyChanged = function(newProp, oldProp) {}, KeyboardEvents.prototype.bind = function() {
            this.wireEvents();
        }, KeyboardEvents.prototype.getModuleName = function() {
            return "keyboard";
        }, KeyboardEvents.prototype.wireEvents = function() {
            this.element.addEventListener(this.eventName, this.keyPressHandler);
        }, KeyboardEvents.prototype.unwireEvents = function() {
            this.element.removeEventListener(this.eventName, this.keyPressHandler);
        }, KeyboardEvents.getKeyConfigData = function(config) {
            if (config in this.configCache) return this.configCache[config];
            var keys = config.toLowerCase().split("+"), keyData = {
                altKey: -1 !== keys.indexOf("alt"),
                ctrlKey: -1 !== keys.indexOf("ctrl"),
                shiftKey: -1 !== keys.indexOf("shift"),
                keyCode: null
            };
            return keys[keys.length - 1].length > 1 && Number(keys[keys.length - 1]) ? keyData.keyCode = Number(keys[keys.length - 1]) : keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]), 
            KeyboardEvents_1.configCache[config] = keyData, keyData;
        }, KeyboardEvents.getKeyCode = function(keyVal) {
            return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);
        };
        var KeyboardEvents_1;
        return KeyboardEvents.configCache = {}, __decorate$5([ Property({}) ], KeyboardEvents.prototype, "keyConfigs", void 0), 
        __decorate$5([ Property("keyup") ], KeyboardEvents.prototype, "eventName", void 0), 
        __decorate$5([ Event() ], KeyboardEvents.prototype, "keyAction", void 0), KeyboardEvents = KeyboardEvents_1 = __decorate$5([ NotifyPropertyChanges ], KeyboardEvents);
    }(Base), L10n = function() {
        function L10n(controlName, localeStrings, locale) {
            this.controlName = controlName, this.localeStrings = localeStrings, this.setLocale(locale || defaultCulture);
        }
        return L10n.prototype.setLocale = function(locale) {
            var intLocale = this.intGetControlConstant(L10n.locale, locale);
            this.currentLocale = intLocale || this.localeStrings;
        }, L10n.load = function(localeObject) {
            this.locale = extend(this.locale, localeObject, {}, !0);
        }, L10n.prototype.getConstant = function(prop) {
            var returnString = this.currentLocale[prop];
            return isNullOrUndefined(returnString) && (returnString = this.localeStrings[prop] || ""), 
            returnString;
        }, L10n.prototype.intGetControlConstant = function(curObject, locale) {
            return curObject[locale] ? curObject[locale][this.controlName] : null;
        }, L10n.locale = {}, L10n;
    }(), SvgRenderer = function() {
        function SvgRenderer(rootID) {
            this.svgLink = "http://www.w3.org/2000/svg", this.rootId = rootID;
        }
        return SvgRenderer.prototype.getOptionValue = function(options, key) {
            return options[key];
        }, SvgRenderer.prototype.createSvg = function(options) {
            return isNullOrUndefined(options.id) && (options.id = this.rootId + "_svg"), this.svgObj = document.getElementById(options.id), 
            isNullOrUndefined(document.getElementById(options.id)) && (this.svgObj = document.createElementNS(this.svgLink, "svg")), 
            this.svgObj = this.setElementAttributes(options, this.svgObj), this.setSVGSize(options.width, options.height), 
            this.svgObj;
        }, SvgRenderer.prototype.setSVGSize = function(width, height) {
            var element = document.getElementById(this.rootId), size = isNullOrUndefined(element) ? null : element.getBoundingClientRect();
            isNullOrUndefined(this.width) || this.width <= 0 ? this.svgObj.setAttribute("width", width ? width.toString() : size.width.toString()) : this.svgObj.setAttribute("width", this.width.toString()), 
            isNullOrUndefined(this.height) || this.height <= 0 ? this.svgObj.setAttribute("height", height ? height.toString() : "450") : this.svgObj.setAttribute("height", this.height.toString());
        }, SvgRenderer.prototype.drawPath = function(options) {
            var path = document.getElementById(options.id);
            return null === path && (path = document.createElementNS(this.svgLink, "path")), 
            path = this.setElementAttributes(options, path);
        }, SvgRenderer.prototype.drawLine = function(options) {
            var line = document.getElementById(options.id);
            return null === line && (line = document.createElementNS(this.svgLink, "line")), 
            line = this.setElementAttributes(options, line);
        }, SvgRenderer.prototype.drawRectangle = function(options) {
            var rectangle = document.getElementById(options.id);
            return null === rectangle && (rectangle = document.createElementNS(this.svgLink, "rect")), 
            rectangle = this.setElementAttributes(options, rectangle);
        }, SvgRenderer.prototype.drawCircle = function(options) {
            var circle = document.getElementById(options.id);
            return null === circle && (circle = document.createElementNS(this.svgLink, "circle")), 
            circle = this.setElementAttributes(options, circle);
        }, SvgRenderer.prototype.drawPolyline = function(options) {
            var polyline = document.getElementById(options.id);
            return null === polyline && (polyline = document.createElementNS(this.svgLink, "polyline")), 
            polyline = this.setElementAttributes(options, polyline);
        }, SvgRenderer.prototype.drawEllipse = function(options) {
            var ellipse = document.getElementById(options.id);
            return null === ellipse && (ellipse = document.createElementNS(this.svgLink, "ellipse")), 
            ellipse = this.setElementAttributes(options, ellipse);
        }, SvgRenderer.prototype.drawPolygon = function(options) {
            var polygon = document.getElementById(options.id);
            return null === polygon && (polygon = document.createElementNS(this.svgLink, "polygon")), 
            polygon = this.setElementAttributes(options, polygon);
        }, SvgRenderer.prototype.drawImage = function(options) {
            var img = document.createElementNS(this.svgLink, "image");
            return img.setAttributeNS(null, "height", options.height.toString()), img.setAttributeNS(null, "width", options.width.toString()), 
            img.setAttributeNS("http://www.w3.org/1999/xlink", "href", options.href), img.setAttributeNS(null, "x", options.x.toString()), 
            img.setAttributeNS(null, "y", options.y.toString()), img.setAttributeNS(null, "id", options.id), 
            img.setAttributeNS(null, "visibility", options.visibility), isNullOrUndefined(this.getOptionValue(options, "clip-path")) || img.setAttributeNS(null, "clip-path", this.getOptionValue(options, "clip-path")), 
            isNullOrUndefined(options.preserveAspectRatio) || img.setAttributeNS(null, "preserveAspectRatio", options.preserveAspectRatio), 
            img;
        }, SvgRenderer.prototype.createText = function(options, label) {
            var text = document.createElementNS(this.svgLink, "text");
            return text = this.setElementAttributes(options, text), isNullOrUndefined(label) || (text.textContent = label), 
            text;
        }, SvgRenderer.prototype.createTSpan = function(options, label) {
            var tSpan = document.createElementNS(this.svgLink, "tspan");
            return tSpan = this.setElementAttributes(options, tSpan), isNullOrUndefined(label) || (tSpan.textContent = label), 
            tSpan;
        }, SvgRenderer.prototype.createTitle = function(text) {
            var title = document.createElementNS(this.svgLink, "title");
            return title.textContent = text, title;
        }, SvgRenderer.prototype.createDefs = function() {
            return document.createElementNS(this.svgLink, "defs");
        }, SvgRenderer.prototype.createClipPath = function(options) {
            var clipPath = document.createElementNS(this.svgLink, "clipPath");
            return clipPath = this.setElementAttributes(options, clipPath);
        }, SvgRenderer.prototype.createForeignObject = function(options) {
            var foreignObject = document.createElementNS(this.svgLink, "foreignObject");
            return foreignObject = this.setElementAttributes(options, foreignObject);
        }, SvgRenderer.prototype.createGroup = function(options) {
            var group = document.createElementNS(this.svgLink, "g");
            return group = this.setElementAttributes(options, group);
        }, SvgRenderer.prototype.createPattern = function(options, element) {
            var pattern = document.createElementNS(this.svgLink, element);
            return pattern = this.setElementAttributes(options, pattern);
        }, SvgRenderer.prototype.createRadialGradient = function(colors, name, options) {
            var colorName;
            if (isNullOrUndefined(colors[0].colorStop)) colorName = colors[0].color.toString(); else {
                var newOptions = {
                    id: this.rootId + "_" + name + "radialGradient",
                    cx: options.cx + "%",
                    cy: options.cy + "%",
                    r: options.r + "%",
                    fx: options.fx + "%",
                    fy: options.fy + "%"
                };
                this.drawGradient("radialGradient", newOptions, colors), colorName = "url(#" + this.rootId + "_" + name + "radialGradient)";
            }
            return colorName;
        }, SvgRenderer.prototype.createLinearGradient = function(colors, name, options) {
            var colorName;
            if (isNullOrUndefined(colors[0].colorStop)) colorName = colors[0].color.toString(); else {
                var newOptions = {
                    id: this.rootId + "_" + name + "linearGradient",
                    x1: options.x1 + "%",
                    y1: options.y1 + "%",
                    x2: options.x2 + "%",
                    y2: options.y2 + "%"
                };
                this.drawGradient("linearGradient", newOptions, colors), colorName = "url(#" + this.rootId + "_" + name + "linearGradient)";
            }
            return colorName;
        }, SvgRenderer.prototype.drawGradient = function(gradientType, options, colors) {
            var defs = this.createDefs(), gradient = document.createElementNS(this.svgLink, gradientType);
            gradient = this.setElementAttributes(options, gradient);
            for (var i = 0; i < colors.length; i++) {
                var stop_1 = document.createElementNS(this.svgLink, "stop");
                stop_1.setAttribute("offset", colors[i].colorStop), stop_1.setAttribute("stop-color", colors[i].color), 
                stop_1.setAttribute("stop-opacity", "1"), gradient.appendChild(stop_1);
            }
            return defs.appendChild(gradient), defs;
        }, SvgRenderer.prototype.drawClipPath = function(options) {
            var defs = this.createDefs(), clipPath = this.createClipPath({
                id: options.id
            }), rect = this.drawRectangle(options);
            return clipPath.appendChild(rect), defs.appendChild(clipPath), defs;
        }, SvgRenderer.prototype.drawCircularClipPath = function(options) {
            var defs = this.createDefs(), clipPath = this.createClipPath({
                id: options.id
            }), circle = this.drawCircle(options);
            return clipPath.appendChild(circle), defs.appendChild(clipPath), defs;
        }, SvgRenderer.prototype.setElementAttributes = function(options, element) {
            for (var keys = Object.keys(options), i = 0; i < keys.length; i++) element.setAttribute(keys[i], options[keys[i]]);
            return element;
        }, SvgRenderer;
    }(), __extends$6 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$6 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, SwipeSettings = function(_super) {
        function SwipeSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$6(SwipeSettings, _super), __decorate$6([ Property(50) ], SwipeSettings.prototype, "swipeThresholdDistance", void 0), 
        SwipeSettings;
    }(ChildProperty), swipeRegex = /(Up|Down)/, Touch = function(_super) {
        function Touch(element, options) {
            var _this = _super.call(this, options, element) || this;
            return _this.touchAction = !0, _this.tapCount = 0, _this.startEvent = function(evt) {
                if (!0 === _this.touchAction) {
                    var point = evt.changedTouches ? evt.changedTouches[0] : evt;
                    void 0 !== evt.changedTouches && (_this.touchAction = !1), _this.isTouchMoved = !1, 
                    _this.movedDirection = "", _this.startPoint = _this.lastMovedPoint = {
                        clientX: point.clientX,
                        clientY: point.clientY
                    }, _this.startEventData = point, _this.hScrollLocked = _this.vScrollLocked = !1, 
                    _this.tStampStart = Date.now(), _this.timeOutTapHold = setTimeout(function() {
                        _this.tapHoldEvent(evt);
                    }, _this.tapHoldThreshold), EventHandler.add(_this.element, Browser.touchMoveEvent, _this.moveEvent, _this), 
                    EventHandler.add(_this.element, Browser.touchEndEvent, _this.endEvent, _this), EventHandler.add(_this.element, Browser.touchCancelEvent, _this.cancelEvent, _this);
                }
            }, _this.moveEvent = function(evt) {
                var point = evt.changedTouches ? evt.changedTouches[0] : evt;
                _this.movedPoint = point, _this.isTouchMoved = !(point.clientX === _this.startPoint.clientX && point.clientY === _this.startPoint.clientY);
                var eScrollArgs = {};
                if (_this.isTouchMoved) {
                    clearTimeout(_this.timeOutTapHold), _this.calcScrollPoints(evt);
                    eScrollArgs = extend(eScrollArgs, {}, {
                        startEvents: _this.startEventData,
                        originalEvent: evt,
                        startX: _this.startPoint.clientX,
                        startY: _this.startPoint.clientY,
                        distanceX: _this.distanceX,
                        distanceY: _this.distanceY,
                        scrollDirection: _this.scrollDirection,
                        velocity: _this.getVelocity(point)
                    }), _this.trigger("scroll", eScrollArgs), _this.lastMovedPoint = {
                        clientX: point.clientX,
                        clientY: point.clientY
                    };
                }
            }, _this.cancelEvent = function(evt) {
                clearTimeout(_this.timeOutTapHold), clearTimeout(_this.timeOutTap), _this.tapCount = 0, 
                _this.swipeFn(evt), EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);
            }, _this.endEvent = function(evt) {
                _this.swipeFn(evt), _this.isTouchMoved || "function" == typeof _this.tap && (_this.trigger("tap", {
                    originalEvent: evt,
                    tapCount: ++_this.tapCount
                }), _this.timeOutTap = setTimeout(function() {
                    _this.tapCount = 0;
                }, _this.tapThreshold)), _this.modeclear();
            }, _this.swipeFn = function(evt) {
                clearTimeout(_this.timeOutTapHold), clearTimeout(_this.timeOutTap);
                var point = evt;
                evt.changedTouches && (point = evt.changedTouches[0]);
                var diffX = point.clientX - _this.startPoint.clientX, diffY = point.clientY - _this.startPoint.clientY;
                diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX), diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX), 
                _this.isTouchMoved = diffX > 1 || diffY > 1, _this.endPoint = point, _this.calcPoints(evt);
                var swipeArgs = {
                    originalEvent: evt,
                    startEvents: _this.startEventData,
                    startX: _this.startPoint.clientX,
                    startY: _this.startPoint.clientY,
                    distanceX: _this.distanceX,
                    distanceY: _this.distanceY,
                    swipeDirection: _this.movedDirection,
                    velocity: _this.getVelocity(point)
                };
                if (_this.isTouchMoved) {
                    var eSwipeArgs = void 0, tDistance = _this.swipeSettings.swipeThresholdDistance;
                    eSwipeArgs = extend(eSwipeArgs, _this.defaultArgs, swipeArgs);
                    var canTrigger = !1, ele = _this.element, scrollBool = _this.isScrollable(ele), moved = swipeRegex.test(_this.movedDirection);
                    (tDistance < _this.distanceX && !moved || tDistance < _this.distanceY && moved) && (canTrigger = !scrollBool || _this.checkSwipe(ele, moved)), 
                    canTrigger && _this.trigger("swipe", eSwipeArgs);
                }
                _this.modeclear();
            }, _this.modeclear = function() {
                _this.modeClear = setTimeout(function() {
                    _this.touchAction = !0;
                }, "function" != typeof _this.tap ? 0 : 20), _this.lastTapTime = new Date().getTime(), 
                EventHandler.remove(_this.element, Browser.touchMoveEvent, _this.moveEvent), EventHandler.remove(_this.element, Browser.touchEndEvent, _this.endEvent), 
                EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);
            }, _this.bind(), _this;
        }
        return __extends$6(Touch, _super), Touch.prototype.onPropertyChanged = function(newProp, oldProp) {}, 
        Touch.prototype.bind = function() {
            this.wireEvents(), Browser.isIE && this.element.classList.add("e-block-touch");
        }, Touch.prototype.destroy = function() {
            this.unwireEvents(), _super.prototype.destroy.call(this);
        }, Touch.prototype.wireEvents = function() {
            EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);
        }, Touch.prototype.unwireEvents = function() {
            EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);
        }, Touch.prototype.getModuleName = function() {
            return "touch";
        }, Touch.prototype.isScrollable = function(element) {
            var eleStyle = getComputedStyle(element), style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;
            return !!/(auto|scroll)/.test(style);
        }, Touch.prototype.tapHoldEvent = function(evt) {
            this.tapCount = 0, this.touchAction = !0;
            var eTapArgs;
            EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent), EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent), 
            eTapArgs = {
                originalEvent: evt
            }, this.trigger("tapHold", eTapArgs), EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);
        }, Touch.prototype.calcPoints = function(evt) {
            var point = evt.changedTouches ? evt.changedTouches[0] : evt;
            this.defaultArgs = {
                originalEvent: evt
            }, this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.startPoint.clientX)), 
            this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.startPoint.clientY)), 
            this.distanceX > this.distanceY ? this.movedDirection = point.clientX > this.startPoint.clientX ? "Right" : "Left" : this.movedDirection = point.clientY < this.startPoint.clientY ? "Up" : "Down";
        }, Touch.prototype.calcScrollPoints = function(evt) {
            var point = evt.changedTouches ? evt.changedTouches[0] : evt;
            this.defaultArgs = {
                originalEvent: evt
            }, this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX)), 
            this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY)), 
            (this.distanceX > this.distanceY || !0 === this.hScrollLocked) && !1 === this.vScrollLocked ? (this.scrollDirection = point.clientX > this.lastMovedPoint.clientX ? "Right" : "Left", 
            this.hScrollLocked = !0) : (this.scrollDirection = point.clientY < this.lastMovedPoint.clientY ? "Up" : "Down", 
            this.vScrollLocked = !0);
        }, Touch.prototype.getVelocity = function(pnt) {
            var newX = pnt.clientX, newY = pnt.clientY, newT = Date.now(), xDist = newX - this.startPoint.clientX, yDist = newY - this.startPoint.clientX, interval = newT - this.tStampStart;
            return Math.sqrt(xDist * xDist + yDist * yDist) / interval;
        }, Touch.prototype.checkSwipe = function(ele, flag) {
            var keys = [ "scroll", "offset" ], temp = flag ? [ "Height", "Top" ] : [ "Width", "Left" ];
            return ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]] || (0 === ele[keys[0] + temp[1]] || ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]]);
        }, __decorate$6([ Event() ], Touch.prototype, "tap", void 0), __decorate$6([ Event() ], Touch.prototype, "tapHold", void 0), 
        __decorate$6([ Event() ], Touch.prototype, "swipe", void 0), __decorate$6([ Event() ], Touch.prototype, "scroll", void 0), 
        __decorate$6([ Property(350) ], Touch.prototype, "tapThreshold", void 0), __decorate$6([ Property(750) ], Touch.prototype, "tapHoldThreshold", void 0), 
        __decorate$6([ Complex({}, SwipeSettings) ], Touch.prototype, "swipeSettings", void 0), 
        Touch = __decorate$6([ NotifyPropertyChanges ], Touch);
    }(Base), LINES = new RegExp("\\n|\\r|\\s\\s+", "g"), QUOTES = new RegExp(/'|"/g), IF_STMT = new RegExp("if ?\\("), ELSEIF_STMT = new RegExp("else if ?\\("), ELSE_STMT = new RegExp("else"), FOR_STMT = new RegExp("for ?\\("), IF_OR_FOR = new RegExp("(/if|/for)"), CALL_FUNCTION = new RegExp("\\((.*)\\)", ""), NOT_NUMBER = new RegExp("^[0-9]+$", "g"), WORD = new RegExp("[\\w\"'.\\s+]+", "g"), DBL_QUOTED_STR = new RegExp('"(.*?)"', "g"), exp = new RegExp("\\${([^}]*)}", "g"), HAS_ROW = /^[\n\r.]+\<tr|^\<tr/, HAS_SVG = /^[\n\r.]+\<svg|^\<path|^\<g/, engineObj = {
        compile: new (function() {
            function Engine() {}
            return Engine.prototype.compile = function(templateString, helper) {
                return void 0 === helper && (helper = {}), compile$1(templateString, helper);
            }, Engine;
        }())().compile
    }, _base = Object.freeze({
        Ajax: Ajax,
        Animation: Animation,
        rippleEffect: rippleEffect,
        get isRippleEnabled() {
            return isRippleEnabled;
        },
        enableRipple: function(isRipple) {
            return isRippleEnabled = isRipple;
        },
        Base: Base,
        getComponent: function(elem, comp) {
            var instance, i;
            for ("string" == typeof elem && document.getElementById(elem), i = 0; i < elem.ej2_instances.length; i++) if (instance = elem.ej2_instances[i], 
            "string" == typeof comp) {
                if (comp === instance.getModuleName()) return instance;
            } else if (instance instanceof comp) return instance;
        },
        Browser: Browser,
        CanvasRenderer: CanvasRenderer,
        Component: Component,
        ChildProperty: ChildProperty,
        Position: Position,
        Draggable: Draggable,
        Droppable: Droppable,
        EventHandler: EventHandler,
        onIntlChange: onIntlChange,
        get rightToLeft() {
            return rightToLeft;
        },
        cldrData: cldrData,
        get defaultCulture() {
            return defaultCulture;
        },
        get defaultCurrencyCode() {
            return defaultCurrencyCode;
        },
        Internationalization: Internationalization,
        setCulture: setCulture,
        setCurrencyCode: function(currencyCode) {
            defaultCurrencyCode = currencyCode, onIntlChange.notify("notifyExternalChange", {
                currencyCode: defaultCurrencyCode
            });
        },
        loadCldr: function() {
            for (var data = [], _i = 0; _i < arguments.length; _i++) data[_i] = arguments[_i];
            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
                var obj = data_1[_a];
                extend(cldrData, obj, {}, !0);
            }
        },
        enableRtl: function(status) {
            void 0 === status && (status = !0), rightToLeft = status, onIntlChange.notify("notifyExternalChange", {
                enableRtl: rightToLeft
            });
        },
        getNumericObject: getNumericObject,
        getDefaultDateObject: getDefaultDateObject,
        KeyboardEvents: KeyboardEvents,
        L10n: L10n,
        ModuleLoader: ModuleLoader,
        Property: Property,
        Complex: Complex,
        ComplexFactory: function(type) {
            return function(target, key) {
                var propertyDescriptor = {
                    set: function(defaultValue, curKey, type) {
                        return function(newValue) {
                            var curType = type(newValue, this);
                            getObject(this, curKey, defaultValue, curType).setProperties(newValue);
                        };
                    }({}, key, type),
                    get: function(defaultValue, curKey, type) {
                        return function() {
                            var curType = type({});
                            return this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : getObject(this, curKey, defaultValue, curType);
                        };
                    }({}, key, type),
                    enumerable: !0,
                    configurable: !0
                };
                Object.defineProperty(target, key, propertyDescriptor), addPropertyCollection(target, key, "complexProp", {}, type);
            };
        },
        Collection: Collection,
        CollectionFactory: function(type) {
            return function(target, key) {
                var propertyDescriptor = {
                    set: function(defaultValue, curKey, type) {
                        return function(newValue) {
                            var oldValueCollection = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue, newValCollection = getObjectArray(this, curKey, newValue, type, !0, !0);
                            this.saveChanges(curKey, newValCollection, oldValueCollection), this.properties[curKey] = newValCollection;
                        };
                    }([], key, type),
                    get: function(defaultValue, curKey, type) {
                        return function() {
                            var curType = type({});
                            if (!this.properties.hasOwnProperty(curKey)) {
                                var defCollection = getObjectArray(this, curKey, defaultValue, curType, !1);
                                this.properties[curKey] = defCollection;
                            }
                            return this.properties[curKey];
                        };
                    }([], key, type),
                    enumerable: !0,
                    configurable: !0
                };
                Object.defineProperty(target, key, propertyDescriptor), addPropertyCollection(target, key, "colProp", {}, type);
            };
        },
        Event: Event,
        NotifyPropertyChanges: NotifyPropertyChanges,
        CreateBuilder: function(component) {
            var builderFunction = function(element) {
                return this.element = element, this;
            };
            return function(element) {
                return builderFunction.prototype.hasOwnProperty("create") || ((builderFunction.prototype = getBuilderProperties(component)).create = function() {
                    var temp = extend({}, {}, this.properties);
                    return this.properties = {}, new component(temp, this.element);
                }), new builderFunction(element);
            };
        },
        SvgRenderer: SvgRenderer,
        SwipeSettings: SwipeSettings,
        Touch: Touch,
        compile: compile$$1,
        setTemplateEngine: function(classObj) {
            engineObj.compile = classObj.compile;
        },
        getTemplateEngine: function() {
            return engineObj.compile;
        },
        createInstance: createInstance,
        setImmediate: setImmediate,
        getValue: getValue,
        setValue: setValue,
        deleteObject: deleteObject,
        isObject: isObject$1,
        getEnumValue: getEnumValue,
        merge: merge,
        extend: extend,
        isNullOrUndefined: isNullOrUndefined,
        isUndefined: isUndefined,
        getUniqueID: getUniqueID,
        debounce: debounce,
        queryParams: function(data) {
            for (var array = [], _i = 0, keys_2 = Object.keys(data); _i < keys_2.length; _i++) {
                var key = keys_2[_i];
                array.push(encodeURIComponent(key) + "=" + encodeURIComponent("" + data[key]));
            }
            return array.join("&");
        },
        isObjectArray: function(value) {
            var parser = Object.prototype.toString;
            return "[object Array]" === parser.call(value) && "[object Object]" === parser.call(value[0]);
        },
        compareElementParent: compareElementParent,
        throwError: throwError,
        print: print,
        formatUnit: formatUnit,
        getInstance: getInstance,
        addInstance: function(element, instance) {
            var elem = "string" == typeof element ? document.querySelector(element) : element;
            elem[instances] ? elem[instances].push(instance) : elem[instances] = [ instance ];
        },
        uniqueID: uniqueID,
        createElement: createElement,
        addClass: addClass,
        removeClass: removeClass,
        isVisible: isVisible,
        prepend: prepend,
        append: append,
        detach: detach,
        remove: remove,
        attributes: attributes,
        select: select,
        selectAll: selectAll,
        closest: closest,
        siblings: function(element) {
            for (var siblings = [], _i = 0, childNodes_1 = Array.prototype.slice.call(element.parentNode.childNodes); _i < childNodes_1.length; _i++) {
                var curNode = childNodes_1[_i];
                curNode.nodeType === Node.ELEMENT_NODE && element !== curNode && siblings.push(curNode);
            }
            return siblings;
        },
        getAttributeOrDefault: function(element, property, value) {
            var attrVal = element.getAttribute(property);
            return isNullOrUndefined(attrVal) && (element.setAttribute(property, value.toString()), 
            attrVal = value), attrVal;
        },
        setStyleAttribute: setStyleAttribute,
        classList: classList,
        matches: matches,
        Observer: Observer
    }), Query = function() {
        function Query(from) {
            return this.subQuery = null, this.isChild = !1, this.distincts = [], this.queries = [], 
            this.key = "", this.fKey = "", "string" == typeof from ? this.fromTable = from : from && from instanceof Array && (this.lookups = from), 
            this.expands = [], this.sortedColumns = [], this.groupedColumns = [], this.subQuery = null, 
            this.isChild = !1, this.params = [], this;
        }
        return Query.prototype.setKey = function(field) {
            return this.key = field, this;
        }, Query.prototype.using = function(dataManager) {
            return this.dataManager = dataManager, this;
        }, Query.prototype.execute = function(dataManager, done, fail, always) {
            return (dataManager = dataManager || this.dataManager) ? dataManager.executeQuery(this, done, fail, always) : DataUtil.throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
        }, Query.prototype.executeLocal = function(dataManager) {
            return (dataManager = dataManager || this.dataManager) ? dataManager.executeLocal(this) : DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
        }, Query.prototype.clone = function() {
            var cloned = new Query();
            return cloned.queries = this.queries.slice(0), cloned.key = this.key, cloned.isChild = this.isChild, 
            cloned.dataManager = this.dataManager, cloned.fromTable = this.fromTable, cloned.params = this.params.slice(0), 
            cloned.expands = this.expands.slice(0), cloned.sortedColumns = this.sortedColumns.slice(0), 
            cloned.groupedColumns = this.groupedColumns.slice(0), cloned.subQuerySelector = this.subQuerySelector, 
            cloned.subQuery = this.subQuery, cloned.fKey = this.fKey, cloned.isCountRequired = this.isCountRequired, 
            cloned.distincts = this.distincts.slice(0), cloned;
        }, Query.prototype.from = function(tableName) {
            return this.fromTable = tableName, this;
        }, Query.prototype.addParams = function(key, value) {
            return "function" == typeof value ? this.params.push({
                key: key,
                fn: value
            }) : this.params.push({
                key: key,
                value: value
            }), this;
        }, Query.prototype.distinct = function(fields) {
            return this.distincts = "string" == typeof fields ? [].slice.call([ fields ], 0) : fields.slice(0), 
            this;
        }, Query.prototype.expand = function(tables) {
            return this.expands = "string" == typeof tables ? [].slice.call([ tables ], 0) : tables.slice(0), 
            this;
        }, Query.prototype.where = function(fieldName, operator, value, ignoreCase, ignoreAccent) {
            operator = operator ? operator.toLowerCase() : null;
            var predicate = null;
            return "string" == typeof fieldName ? predicate = new Predicate$1(fieldName, operator, value, ignoreCase, ignoreAccent) : fieldName instanceof Predicate$1 && (predicate = fieldName), 
            this.queries.push({
                fn: "onWhere",
                e: predicate
            }), this;
        }, Query.prototype.search = function(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
            "string" == typeof fieldNames && (fieldNames = [ fieldNames ]), operator = operator || "contains";
            var comparer = DataUtil.fnOperators[operator];
            return this.queries.push({
                fn: "onSearch",
                e: {
                    fieldNames: fieldNames,
                    operator: operator,
                    searchKey: searchKey,
                    ignoreCase: ignoreCase,
                    ignoreAccent: ignoreAccent,
                    comparer: comparer
                }
            }), this;
        }, Query.prototype.sortBy = function(fieldName, comparer, isFromGroup) {
            var sorts, temp, order = "ascending";
            if ("string" == typeof fieldName && DataUtil.endsWith(fieldName.toLowerCase(), " desc") && (fieldName = fieldName.replace(/ desc$/i, ""), 
            comparer = "descending"), comparer && "string" != typeof comparer || (order = comparer ? comparer.toLowerCase() : "ascending", 
            comparer = DataUtil.fnSort(comparer)), isFromGroup) {
                sorts = Query.filterQueries(this.queries, "onSortBy");
                for (var i = 0; i < sorts.length; i++) if ("string" == typeof (temp = sorts[i].e.fieldName)) {
                    if (temp === fieldName) return this;
                } else if (temp instanceof Array) for (var j = 0; j < temp.length; j++) if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + " desc") return this;
            }
            return this.queries.push({
                fn: "onSortBy",
                e: {
                    fieldName: fieldName,
                    comparer: comparer,
                    direction: order
                }
            }), this;
        }, Query.prototype.sortByDesc = function(fieldName) {
            return this.sortBy(fieldName, "descending");
        }, Query.prototype.group = function(fieldName, fn, format) {
            return this.sortBy(fieldName, null, !0), this.queries.push({
                fn: "onGroup",
                e: {
                    fieldName: fieldName,
                    comparer: fn || null,
                    format: format || null
                }
            }), this;
        }, Query.prototype.page = function(pageIndex, pageSize) {
            return this.queries.push({
                fn: "onPage",
                e: {
                    pageIndex: pageIndex,
                    pageSize: pageSize
                }
            }), this;
        }, Query.prototype.range = function(start, end) {
            return this.queries.push({
                fn: "onRange",
                e: {
                    start: start,
                    end: end
                }
            }), this;
        }, Query.prototype.take = function(nos) {
            return this.queries.push({
                fn: "onTake",
                e: {
                    nos: nos
                }
            }), this;
        }, Query.prototype.skip = function(nos) {
            return this.queries.push({
                fn: "onSkip",
                e: {
                    nos: nos
                }
            }), this;
        }, Query.prototype.select = function(fieldNames) {
            return "string" == typeof fieldNames && (fieldNames = [].slice.call([ fieldNames ], 0)), 
            this.queries.push({
                fn: "onSelect",
                e: {
                    fieldNames: fieldNames
                }
            }), this;
        }, Query.prototype.hierarchy = function(query, selectorFn) {
            return this.subQuerySelector = selectorFn, this.subQuery = query, this;
        }, Query.prototype.foreignKey = function(key) {
            return this.fKey = key, this;
        }, Query.prototype.requiresCount = function() {
            return this.isCountRequired = !0, this;
        }, Query.prototype.aggregate = function(type, field) {
            return this.queries.push({
                fn: "onAggregates",
                e: {
                    field: field,
                    type: type
                }
            }), this;
        }, Query.filterQueries = function(queries, name) {
            return queries.filter(function(q) {
                return q.fn === name;
            });
        }, Query.filterQueryLists = function(queries, singles) {
            for (var filtered = queries.filter(function(q) {
                return -1 !== singles.indexOf(q.fn);
            }), res = {}, i = 0; i < filtered.length; i++) res[filtered[i].fn] || (res[filtered[i].fn] = filtered[i].e);
            return res;
        }, Query;
    }(), Predicate$1 = function() {
        function Predicate(field, operator, value, ignoreCase, ignoreAccent) {
            return void 0 === ignoreCase && (ignoreCase = !1), this.ignoreAccent = !1, this.isComplex = !1, 
            "string" == typeof field ? (this.field = field, this.operator = operator.toLowerCase(), 
            this.value = value, this.ignoreCase = ignoreCase, this.ignoreAccent = ignoreAccent, 
            this.isComplex = !1, this.comparer = DataUtil.fnOperators.processOperator(this.operator)) : (field instanceof Predicate && value instanceof Predicate || value instanceof Array) && (this.isComplex = !0, 
            this.condition = operator.toLowerCase(), this.predicates = [ field ], value instanceof Array ? [].push.apply(this.predicates, value) : this.predicates.push(value)), 
            this;
        }
        return Predicate.and = function() {
            for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
            return Predicate.combinePredicates([].slice.call(args, 0), "and");
        }, Predicate.prototype.and = function(field, operator, value, ignoreCase, ignoreAccent) {
            return Predicate.combine(this, field, operator, value, "and", ignoreCase, ignoreAccent);
        }, Predicate.or = function() {
            for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
            return Predicate.combinePredicates([].slice.call(args, 0), "or");
        }, Predicate.prototype.or = function(field, operator, value, ignoreCase, ignoreAccent) {
            return Predicate.combine(this, field, operator, value, "or", ignoreCase, ignoreAccent);
        }, Predicate.fromJson = function(json) {
            if (json instanceof Array) {
                for (var res = [], i = 0, len = json.length; i < len; i++) res.push(this.fromJSONData(json[i]));
                return res;
            }
            var pred = json;
            return this.fromJSONData(pred);
        }, Predicate.prototype.validate = function(record) {
            var isAnd, ret, predicate = this.predicates ? this.predicates : [];
            if (!this.isComplex && this.comparer) return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
            isAnd = "and" === this.condition;
            for (var i = 0; i < predicate.length; i++) if (ret = predicate[i].validate(record), 
            isAnd) {
                if (!ret) return !1;
            } else if (ret) return !0;
            return isAnd;
        }, Predicate.prototype.toJson = function() {
            var predicates, p;
            if (this.isComplex) {
                predicates = [], p = this.predicates;
                for (var i = 0; i < p.length; i++) predicates.push(p[i].toJson());
            }
            return {
                isComplex: this.isComplex,
                field: this.field,
                operator: this.operator,
                value: this.value,
                ignoreCase: this.ignoreCase,
                ignoreAccent: this.ignoreAccent,
                condition: this.condition,
                predicates: predicates
            };
        }, Predicate.combinePredicates = function(predicates, operator) {
            if (1 === predicates.length) {
                if (!(predicates[0] instanceof Array)) return predicates[0];
                predicates = predicates[0];
            }
            return new Predicate(predicates[0], operator, predicates.slice(1));
        }, Predicate.combine = function(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
            return field instanceof Predicate ? Predicate[condition](pred, field) : "string" == typeof field ? Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent)) : DataUtil.throwError("Predicate - " + condition + " : invalid arguments");
        }, Predicate.fromJSONData = function(json) {
            for (var preds = json.predicates || [], len = preds.length, predicates = [], i = 0; i < len; i++) predicates.push(this.fromJSONData(preds[i]));
            return json.isComplex ? new Predicate(predicates[0], json.condition, predicates.slice(1)) : new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
        }, Predicate;
    }(), consts = {
        GroupGuid: "{271bbba0-1ee7}"
    }, DataUtil = function() {
        function DataUtil() {}
        return DataUtil.getValue = function(value, inst) {
            return "function" == typeof value ? value.call(inst || {}) : value;
        }, DataUtil.endsWith = function(input, substr) {
            return input.slice(-substr.length) === substr;
        }, DataUtil.startsWith = function(input, start) {
            return input.slice(0, start.length) === start;
        }, DataUtil.fnSort = function(order) {
            return "ascending" === (order = order ? DataUtil.toLowerCase(order) : "ascending") ? this.fnAscending : this.fnDescending;
        }, DataUtil.fnAscending = function(x, y) {
            return null === y || void 0 === y ? -1 : "string" == typeof x ? x.localeCompare(y) : null === x || void 0 === x ? 1 : x - y;
        }, DataUtil.fnDescending = function(x, y) {
            return null === y || void 0 === y ? 1 : "string" == typeof x ? -1 * x.localeCompare(y) : null === x || void 0 === x ? -1 : y - x;
        }, DataUtil.extractFields = function(obj, fields) {
            for (var newObj = {}, i = 0; i < fields.length; i++) newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
            return newObj;
        }, DataUtil.select = function(jsonArray, fields) {
            for (var newData = [], i = 0; i < jsonArray.length; i++) newData.push(this.extractFields(jsonArray[i], fields));
            return newData;
        }, DataUtil.group = function(jsonArray, field, aggregates, level, groupDs, format) {
            level = level || 1;
            var jsonData = jsonArray;
            if (jsonData.GroupGuid === consts.GroupGuid) {
                for (var _loop_1 = function(j) {
                    if (isNullOrUndefined(groupDs)) jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format), 
                    jsonData[j].count = jsonData[j].items.length; else {
                        var indx = -1, temp = groupDs.filter(function(e) {
                            return e.key === jsonData[j].key;
                        });
                        indx = groupDs.indexOf(temp[0]), jsonData[j].items = this_1.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format), 
                        jsonData[j].count = groupDs[indx].count;
                    }
                }, this_1 = this, j = 0; j < jsonData.length; j++) _loop_1(j);
                return jsonData.childLevels += 1, jsonData;
            }
            var grouped = {}, groupedArray = [];
            groupedArray.GroupGuid = consts.GroupGuid, groupedArray.level = level, groupedArray.childLevels = 0, 
            groupedArray.records = jsonData;
            for (var _loop_2 = function(i) {
                var val = this_2.getVal(jsonData, i, field);
                if (isNullOrUndefined(format) || (val = format(val, field)), !grouped[val] && (grouped[val] = {
                    key: val,
                    count: 0,
                    items: [],
                    aggregates: {},
                    field: field
                }, groupedArray.push(grouped[val]), !isNullOrUndefined(groupDs))) {
                    var tempObj = groupDs.filter(function(e) {
                        return e.key === grouped[val].key;
                    });
                    grouped[val].count = tempObj[0].count;
                }
                grouped[val].count = isNullOrUndefined(groupDs) ? grouped[val].count += 1 : grouped[val].count, 
                grouped[val].items.push(jsonData[i]);
            }, this_2 = this, i = 0; i < jsonData.length; i++) _loop_2(i);
            if (aggregates && aggregates.length) {
                var _loop_3 = function(i) {
                    for (var res = {}, fn = void 0, aggs = aggregates, j = 0; j < aggregates.length; j++) if (fn = DataUtil.aggregates[aggregates[j].type], 
                    isNullOrUndefined(groupDs)) fn && (res[aggs[j].field + " - " + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field)); else {
                        var temp = groupDs.filter(function(e) {
                            return e.key === groupedArray[i].key;
                        });
                        fn && (res[aggs[j].field + " - " + aggs[j].type] = fn(temp[0].items, aggs[j].field));
                    }
                    groupedArray[i].aggregates = res;
                };
                for (i = 0; i < groupedArray.length; i++) _loop_3(i);
            }
            return jsonData.length && groupedArray || jsonData;
        }, DataUtil.buildHierarchy = function(fKey, from, source, lookup, pKey) {
            var i, grp = {};
            for (lookup.result && (lookup = lookup.result), lookup.GroupGuid && this.throwError("DataManager: Do not have support Grouping in hierarchy"), 
            i = 0; i < lookup.length; i++) {
                (grp[fKeyData = this.getObject(fKey, lookup[i])] || (grp[fKeyData] = [])).push(lookup[i]);
            }
            for (i = 0; i < source.length; i++) {
                var fKeyData = this.getObject(pKey || fKey, source[i]);
                source[i][from] = grp[fKeyData];
            }
        }, DataUtil.getFieldList = function(obj, fields, prefix) {
            if (void 0 === prefix && (prefix = ""), void 0 === fields || null === fields) return this.getFieldList(obj, [], prefix);
            for (var copyObj = obj, _i = 0, keys_1 = Object.keys(obj); _i < keys_1.length; _i++) {
                var prop = keys_1[_i];
                "object" != typeof copyObj[prop] || copyObj[prop] instanceof Array ? fields.push(prefix + prop) : this.getFieldList(copyObj[prop], fields, prefix + prop + ".");
            }
            return fields;
        }, DataUtil.getObject = function(nameSpace, from) {
            if (!nameSpace) return from;
            if (from) {
                if (-1 === nameSpace.indexOf(".")) return from[nameSpace];
                for (var value = from, splits = nameSpace.split("."), i = 0; i < splits.length && null != value; i++) value = value[splits[i]];
                return value;
            }
        }, DataUtil.setValue = function(nameSpace, value, obj) {
            var i, key, keys = nameSpace.toString().split("."), start = obj || {}, fromObj = start, length = keys.length;
            for (i = 0; i < length; i++) key = keys[i], i + 1 === length ? fromObj[key] = void 0 === value ? void 0 : value : isNullOrUndefined(fromObj[key]) && (fromObj[key] = {}), 
            fromObj = fromObj[key];
            return start;
        }, DataUtil.sort = function(ds, field, comparer) {
            if (ds.length <= 1) return ds;
            var middle = parseInt((ds.length / 2).toString(), 10), left = ds.slice(0, middle), right = ds.slice(middle);
            return left = this.sort(left, field, comparer), right = this.sort(right, field, comparer), 
            this.merge(left, right, field, comparer);
        }, DataUtil.ignoreDiacritics = function(value) {
            if ("string" != typeof value) return value;
            return value.split("").map(function(temp) {
                return temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp;
            }).join("");
        }, DataUtil.merge = function(left, right, fieldName, comparer) {
            for (var current, result = []; left.length > 0 || right.length > 0; ) current = left.length > 0 && right.length > 0 ? comparer ? comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName)) <= 0 ? left : right : left[0][fieldName] < left[0][fieldName] ? left : right : left.length > 0 ? left : right, 
            result.push(current.shift());
            return result;
        }, DataUtil.getVal = function(array, index, field) {
            return field ? this.getObject(field, array[index]) : array[index];
        }, DataUtil.toLowerCase = function(val) {
            return val ? "string" == typeof val ? val.toLowerCase() : val.toString() : 0 === val || !1 === val ? val.toString() : "";
        }, DataUtil.callAdaptorFunction = function(adaptor, fnName, param1, param2) {
            if (fnName in adaptor) {
                var res = adaptor[fnName](param1, param2);
                isNullOrUndefined(res) || (param1 = res);
            }
            return param1;
        }, DataUtil.getAddParams = function(adp, dm, query) {
            var req = {};
            return DataUtil.callAdaptorFunction(adp, "addParams", {
                dm: dm,
                query: query,
                params: query.params,
                reqParams: req
            }), req;
        }, DataUtil.isPlainObject = function(obj) {
            return !!obj && obj.constructor === Object;
        }, DataUtil.isCors = function() {
            var xhr = null;
            try {
                xhr = new window.XMLHttpRequest();
            } catch (e) {}
            return !!xhr && "withCredentials" in xhr;
        }, DataUtil.getGuid = function(prefix) {
            var rand;
            return (prefix || "") + "00000000-0000-4000-0000-000000000000".replace(/0/g, function(val, i) {
                if ("crypto" in window && "getRandomValues" in crypto) {
                    var arr = new Uint8Array(1);
                    window.crypto.getRandomValues(arr), rand = arr[0] % 16 | 0;
                } else rand = 16 * Math.random() | 0;
                return "0123456789abcdef"[19 === i ? 3 & rand | 8 : rand];
            });
        }, DataUtil.isNull = function(val) {
            return void 0 === val || null === val;
        }, DataUtil.getItemFromComparer = function(array, field, comparer) {
            var keyVal, current, key, i = 0, castRequired = "string" == typeof DataUtil.getVal(array, 0, field);
            if (array.length) for (;isNullOrUndefined(keyVal) && i < array.length; ) keyVal = DataUtil.getVal(array, i, field), 
            key = array[i++];
            for (;i < array.length; i++) isNullOrUndefined(current = DataUtil.getVal(array, i, field)) || (castRequired && (keyVal = +keyVal, 
            current = +current), comparer(keyVal, current) > 0 && (keyVal = current, key = array[i]));
            return key;
        }, DataUtil.distinct = function(json, fieldName, requiresCompleteRecord) {
            requiresCompleteRecord = !isNullOrUndefined(requiresCompleteRecord) && requiresCompleteRecord;
            var val, result = [], tmp = {};
            return json.forEach(function(data, index) {
                (val = DataUtil.getVal(json, index, fieldName)) in tmp || (result.push(requiresCompleteRecord ? json[index] : val), 
                tmp[val] = 1);
            }), result;
        }, DataUtil.serverTimezoneOffset = null, DataUtil.throwError = function(error) {
            try {
                throw new Error(error);
            } catch (e) {
                throw e.message + "\n" + e.stack;
            }
        }, DataUtil.aggregates = {
            sum: function(ds, field) {
                for (var val, result = 0, castRequired = "number" != typeof DataUtil.getVal(ds, 0, field), i = 0; i < ds.length; i++) val = DataUtil.getVal(ds, i, field), 
                isNaN(val) || null === val || (castRequired && (val = +val), result += val);
                return result;
            },
            average: function(ds, field) {
                return DataUtil.aggregates.sum(ds, field) / ds.length;
            },
            min: function(ds, field) {
                var comparer;
                return "function" == typeof field && (comparer = field, field = null), DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));
            },
            max: function(ds, field) {
                var comparer;
                return "function" == typeof field && (comparer = field, field = null), DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));
            },
            truecount: function(ds, field) {
                return new DataManager(ds).executeLocal(new Query().where(field, "equal", !0, !0)).length;
            },
            falsecount: function(ds, field) {
                return new DataManager(ds).executeLocal(new Query().where(field, "equal", !1, !0)).length;
            },
            count: function(ds, field) {
                return ds.length;
            }
        }, DataUtil.operatorSymbols = {
            "<": "lessthan",
            ">": "greaterthan",
            "<=": "lessthanorequal",
            ">=": "greaterthanorequal",
            "==": "equal",
            "!=": "notequal",
            "*=": "contains",
            "$=": "endswith",
            "^=": "startswith"
        }, DataUtil.odBiOperator = {
            "<": " lt ",
            ">": " gt ",
            "<=": " le ",
            ">=": " ge ",
            "==": " eq ",
            "!=": " ne ",
            lessthan: " lt ",
            lessthanorequal: " le ",
            greaterthan: " gt ",
            greaterthanorequal: " ge ",
            equal: " eq ",
            notequal: " ne "
        }, DataUtil.odUniOperator = {
            "$=": "endswith",
            "^=": "startswith",
            "*=": "substringof",
            endswith: "endswith",
            startswith: "startswith",
            contains: "substringof"
        }, DataUtil.odv4UniOperator = {
            "$=": "endswith",
            "^=": "startswith",
            "*=": "contains",
            endswith: "endswith",
            startswith: "startswith",
            contains: "contains"
        }, DataUtil.diacritics = {
            "Ⓐ": "A",
            "Ａ": "A",
            "À": "A",
            "Á": "A",
            "Â": "A",
            "Ầ": "A",
            "Ấ": "A",
            "Ẫ": "A",
            "Ẩ": "A",
            "Ã": "A",
            "Ā": "A",
            "Ă": "A",
            "Ằ": "A",
            "Ắ": "A",
            "Ẵ": "A",
            "Ẳ": "A",
            "Ȧ": "A",
            "Ǡ": "A",
            "Ä": "A",
            "Ǟ": "A",
            "Ả": "A",
            "Å": "A",
            "Ǻ": "A",
            "Ǎ": "A",
            "Ȁ": "A",
            "Ȃ": "A",
            "Ạ": "A",
            "Ậ": "A",
            "Ặ": "A",
            "Ḁ": "A",
            "Ą": "A",
            "Ⱥ": "A",
            "Ɐ": "A",
            "Ꜳ": "AA",
            "Æ": "AE",
            "Ǽ": "AE",
            "Ǣ": "AE",
            "Ꜵ": "AO",
            "Ꜷ": "AU",
            "Ꜹ": "AV",
            "Ꜻ": "AV",
            "Ꜽ": "AY",
            "Ⓑ": "B",
            "Ｂ": "B",
            "Ḃ": "B",
            "Ḅ": "B",
            "Ḇ": "B",
            "Ƀ": "B",
            "Ƃ": "B",
            "Ɓ": "B",
            "Ⓒ": "C",
            "Ｃ": "C",
            "Ć": "C",
            "Ĉ": "C",
            "Ċ": "C",
            "Č": "C",
            "Ç": "C",
            "Ḉ": "C",
            "Ƈ": "C",
            "Ȼ": "C",
            "Ꜿ": "C",
            "Ⓓ": "D",
            "Ｄ": "D",
            "Ḋ": "D",
            "Ď": "D",
            "Ḍ": "D",
            "Ḑ": "D",
            "Ḓ": "D",
            "Ḏ": "D",
            "Đ": "D",
            "Ƌ": "D",
            "Ɗ": "D",
            "Ɖ": "D",
            "Ꝺ": "D",
            "Ǳ": "DZ",
            "Ǆ": "DZ",
            "ǲ": "Dz",
            "ǅ": "Dz",
            "Ⓔ": "E",
            "Ｅ": "E",
            "È": "E",
            "É": "E",
            "Ê": "E",
            "Ề": "E",
            "Ế": "E",
            "Ễ": "E",
            "Ể": "E",
            "Ẽ": "E",
            "Ē": "E",
            "Ḕ": "E",
            "Ḗ": "E",
            "Ĕ": "E",
            "Ė": "E",
            "Ë": "E",
            "Ẻ": "E",
            "Ě": "E",
            "Ȅ": "E",
            "Ȇ": "E",
            "Ẹ": "E",
            "Ệ": "E",
            "Ȩ": "E",
            "Ḝ": "E",
            "Ę": "E",
            "Ḙ": "E",
            "Ḛ": "E",
            "Ɛ": "E",
            "Ǝ": "E",
            "Ⓕ": "F",
            "Ｆ": "F",
            "Ḟ": "F",
            "Ƒ": "F",
            "Ꝼ": "F",
            "Ⓖ": "G",
            "Ｇ": "G",
            "Ǵ": "G",
            "Ĝ": "G",
            "Ḡ": "G",
            "Ğ": "G",
            "Ġ": "G",
            "Ǧ": "G",
            "Ģ": "G",
            "Ǥ": "G",
            "Ɠ": "G",
            "Ꞡ": "G",
            "Ᵹ": "G",
            "Ꝿ": "G",
            "Ⓗ": "H",
            "Ｈ": "H",
            "Ĥ": "H",
            "Ḣ": "H",
            "Ḧ": "H",
            "Ȟ": "H",
            "Ḥ": "H",
            "Ḩ": "H",
            "Ḫ": "H",
            "Ħ": "H",
            "Ⱨ": "H",
            "Ⱶ": "H",
            "Ɥ": "H",
            "Ⓘ": "I",
            "Ｉ": "I",
            "Ì": "I",
            "Í": "I",
            "Î": "I",
            "Ĩ": "I",
            "Ī": "I",
            "Ĭ": "I",
            "İ": "I",
            "Ï": "I",
            "Ḯ": "I",
            "Ỉ": "I",
            "Ǐ": "I",
            "Ȉ": "I",
            "Ȋ": "I",
            "Ị": "I",
            "Į": "I",
            "Ḭ": "I",
            "Ɨ": "I",
            "Ⓙ": "J",
            "Ｊ": "J",
            "Ĵ": "J",
            "Ɉ": "J",
            "Ⓚ": "K",
            "Ｋ": "K",
            "Ḱ": "K",
            "Ǩ": "K",
            "Ḳ": "K",
            "Ķ": "K",
            "Ḵ": "K",
            "Ƙ": "K",
            "Ⱪ": "K",
            "Ꝁ": "K",
            "Ꝃ": "K",
            "Ꝅ": "K",
            "Ꞣ": "K",
            "Ⓛ": "L",
            "Ｌ": "L",
            "Ŀ": "L",
            "Ĺ": "L",
            "Ľ": "L",
            "Ḷ": "L",
            "Ḹ": "L",
            "Ļ": "L",
            "Ḽ": "L",
            "Ḻ": "L",
            "Ł": "L",
            "Ƚ": "L",
            "Ɫ": "L",
            "Ⱡ": "L",
            "Ꝉ": "L",
            "Ꝇ": "L",
            "Ꞁ": "L",
            "Ǉ": "LJ",
            "ǈ": "Lj",
            "Ⓜ": "M",
            "Ｍ": "M",
            "Ḿ": "M",
            "Ṁ": "M",
            "Ṃ": "M",
            "Ɱ": "M",
            "Ɯ": "M",
            "Ⓝ": "N",
            "Ｎ": "N",
            "Ǹ": "N",
            "Ń": "N",
            "Ñ": "N",
            "Ṅ": "N",
            "Ň": "N",
            "Ṇ": "N",
            "Ņ": "N",
            "Ṋ": "N",
            "Ṉ": "N",
            "Ƞ": "N",
            "Ɲ": "N",
            "Ꞑ": "N",
            "Ꞥ": "N",
            "Ǌ": "NJ",
            "ǋ": "Nj",
            "Ⓞ": "O",
            "Ｏ": "O",
            "Ò": "O",
            "Ó": "O",
            "Ô": "O",
            "Ồ": "O",
            "Ố": "O",
            "Ỗ": "O",
            "Ổ": "O",
            "Õ": "O",
            "Ṍ": "O",
            "Ȭ": "O",
            "Ṏ": "O",
            "Ō": "O",
            "Ṑ": "O",
            "Ṓ": "O",
            "Ŏ": "O",
            "Ȯ": "O",
            "Ȱ": "O",
            "Ö": "O",
            "Ȫ": "O",
            "Ỏ": "O",
            "Ő": "O",
            "Ǒ": "O",
            "Ȍ": "O",
            "Ȏ": "O",
            "Ơ": "O",
            "Ờ": "O",
            "Ớ": "O",
            "Ỡ": "O",
            "Ở": "O",
            "Ợ": "O",
            "Ọ": "O",
            "Ộ": "O",
            "Ǫ": "O",
            "Ǭ": "O",
            "Ø": "O",
            "Ǿ": "O",
            "Ɔ": "O",
            "Ɵ": "O",
            "Ꝋ": "O",
            "Ꝍ": "O",
            "Ƣ": "OI",
            "Ꝏ": "OO",
            "Ȣ": "OU",
            "Ⓟ": "P",
            "Ｐ": "P",
            "Ṕ": "P",
            "Ṗ": "P",
            "Ƥ": "P",
            "Ᵽ": "P",
            "Ꝑ": "P",
            "Ꝓ": "P",
            "Ꝕ": "P",
            "Ⓠ": "Q",
            "Ｑ": "Q",
            "Ꝗ": "Q",
            "Ꝙ": "Q",
            "Ɋ": "Q",
            "Ⓡ": "R",
            "Ｒ": "R",
            "Ŕ": "R",
            "Ṙ": "R",
            "Ř": "R",
            "Ȑ": "R",
            "Ȓ": "R",
            "Ṛ": "R",
            "Ṝ": "R",
            "Ŗ": "R",
            "Ṟ": "R",
            "Ɍ": "R",
            "Ɽ": "R",
            "Ꝛ": "R",
            "Ꞧ": "R",
            "Ꞃ": "R",
            "Ⓢ": "S",
            "Ｓ": "S",
            "ẞ": "S",
            "Ś": "S",
            "Ṥ": "S",
            "Ŝ": "S",
            "Ṡ": "S",
            "Š": "S",
            "Ṧ": "S",
            "Ṣ": "S",
            "Ṩ": "S",
            "Ș": "S",
            "Ş": "S",
            "Ȿ": "S",
            "Ꞩ": "S",
            "Ꞅ": "S",
            "Ⓣ": "T",
            "Ｔ": "T",
            "Ṫ": "T",
            "Ť": "T",
            "Ṭ": "T",
            "Ț": "T",
            "Ţ": "T",
            "Ṱ": "T",
            "Ṯ": "T",
            "Ŧ": "T",
            "Ƭ": "T",
            "Ʈ": "T",
            "Ⱦ": "T",
            "Ꞇ": "T",
            "Ꜩ": "TZ",
            "Ⓤ": "U",
            "Ｕ": "U",
            "Ù": "U",
            "Ú": "U",
            "Û": "U",
            "Ũ": "U",
            "Ṹ": "U",
            "Ū": "U",
            "Ṻ": "U",
            "Ŭ": "U",
            "Ü": "U",
            "Ǜ": "U",
            "Ǘ": "U",
            "Ǖ": "U",
            "Ǚ": "U",
            "Ủ": "U",
            "Ů": "U",
            "Ű": "U",
            "Ǔ": "U",
            "Ȕ": "U",
            "Ȗ": "U",
            "Ư": "U",
            "Ừ": "U",
            "Ứ": "U",
            "Ữ": "U",
            "Ử": "U",
            "Ự": "U",
            "Ụ": "U",
            "Ṳ": "U",
            "Ų": "U",
            "Ṷ": "U",
            "Ṵ": "U",
            "Ʉ": "U",
            "Ⓥ": "V",
            "Ｖ": "V",
            "Ṽ": "V",
            "Ṿ": "V",
            "Ʋ": "V",
            "Ꝟ": "V",
            "Ʌ": "V",
            "Ꝡ": "VY",
            "Ⓦ": "W",
            "Ｗ": "W",
            "Ẁ": "W",
            "Ẃ": "W",
            "Ŵ": "W",
            "Ẇ": "W",
            "Ẅ": "W",
            "Ẉ": "W",
            "Ⱳ": "W",
            "Ⓧ": "X",
            "Ｘ": "X",
            "Ẋ": "X",
            "Ẍ": "X",
            "Ⓨ": "Y",
            "Ｙ": "Y",
            "Ỳ": "Y",
            "Ý": "Y",
            "Ŷ": "Y",
            "Ỹ": "Y",
            "Ȳ": "Y",
            "Ẏ": "Y",
            "Ÿ": "Y",
            "Ỷ": "Y",
            "Ỵ": "Y",
            "Ƴ": "Y",
            "Ɏ": "Y",
            "Ỿ": "Y",
            "Ⓩ": "Z",
            "Ｚ": "Z",
            "Ź": "Z",
            "Ẑ": "Z",
            "Ż": "Z",
            "Ž": "Z",
            "Ẓ": "Z",
            "Ẕ": "Z",
            "Ƶ": "Z",
            "Ȥ": "Z",
            "Ɀ": "Z",
            "Ⱬ": "Z",
            "Ꝣ": "Z",
            "ⓐ": "a",
            "ａ": "a",
            "ẚ": "a",
            "à": "a",
            "á": "a",
            "â": "a",
            "ầ": "a",
            "ấ": "a",
            "ẫ": "a",
            "ẩ": "a",
            "ã": "a",
            "ā": "a",
            "ă": "a",
            "ằ": "a",
            "ắ": "a",
            "ẵ": "a",
            "ẳ": "a",
            "ȧ": "a",
            "ǡ": "a",
            "ä": "a",
            "ǟ": "a",
            "ả": "a",
            "å": "a",
            "ǻ": "a",
            "ǎ": "a",
            "ȁ": "a",
            "ȃ": "a",
            "ạ": "a",
            "ậ": "a",
            "ặ": "a",
            "ḁ": "a",
            "ą": "a",
            "ⱥ": "a",
            "ɐ": "a",
            "ꜳ": "aa",
            "æ": "ae",
            "ǽ": "ae",
            "ǣ": "ae",
            "ꜵ": "ao",
            "ꜷ": "au",
            "ꜹ": "av",
            "ꜻ": "av",
            "ꜽ": "ay",
            "ⓑ": "b",
            "ｂ": "b",
            "ḃ": "b",
            "ḅ": "b",
            "ḇ": "b",
            "ƀ": "b",
            "ƃ": "b",
            "ɓ": "b",
            "ⓒ": "c",
            "ｃ": "c",
            "ć": "c",
            "ĉ": "c",
            "ċ": "c",
            "č": "c",
            "ç": "c",
            "ḉ": "c",
            "ƈ": "c",
            "ȼ": "c",
            "ꜿ": "c",
            "ↄ": "c",
            "ⓓ": "d",
            "ｄ": "d",
            "ḋ": "d",
            "ď": "d",
            "ḍ": "d",
            "ḑ": "d",
            "ḓ": "d",
            "ḏ": "d",
            "đ": "d",
            "ƌ": "d",
            "ɖ": "d",
            "ɗ": "d",
            "ꝺ": "d",
            "ǳ": "dz",
            "ǆ": "dz",
            "ⓔ": "e",
            "ｅ": "e",
            "è": "e",
            "é": "e",
            "ê": "e",
            "ề": "e",
            "ế": "e",
            "ễ": "e",
            "ể": "e",
            "ẽ": "e",
            "ē": "e",
            "ḕ": "e",
            "ḗ": "e",
            "ĕ": "e",
            "ė": "e",
            "ë": "e",
            "ẻ": "e",
            "ě": "e",
            "ȅ": "e",
            "ȇ": "e",
            "ẹ": "e",
            "ệ": "e",
            "ȩ": "e",
            "ḝ": "e",
            "ę": "e",
            "ḙ": "e",
            "ḛ": "e",
            "ɇ": "e",
            "ɛ": "e",
            "ǝ": "e",
            "ⓕ": "f",
            "ｆ": "f",
            "ḟ": "f",
            "ƒ": "f",
            "ꝼ": "f",
            "ⓖ": "g",
            "ｇ": "g",
            "ǵ": "g",
            "ĝ": "g",
            "ḡ": "g",
            "ğ": "g",
            "ġ": "g",
            "ǧ": "g",
            "ģ": "g",
            "ǥ": "g",
            "ɠ": "g",
            "ꞡ": "g",
            "ᵹ": "g",
            "ꝿ": "g",
            "ⓗ": "h",
            "ｈ": "h",
            "ĥ": "h",
            "ḣ": "h",
            "ḧ": "h",
            "ȟ": "h",
            "ḥ": "h",
            "ḩ": "h",
            "ḫ": "h",
            "ẖ": "h",
            "ħ": "h",
            "ⱨ": "h",
            "ⱶ": "h",
            "ɥ": "h",
            "ƕ": "hv",
            "ⓘ": "i",
            "ｉ": "i",
            "ì": "i",
            "í": "i",
            "î": "i",
            "ĩ": "i",
            "ī": "i",
            "ĭ": "i",
            "ï": "i",
            "ḯ": "i",
            "ỉ": "i",
            "ǐ": "i",
            "ȉ": "i",
            "ȋ": "i",
            "ị": "i",
            "į": "i",
            "ḭ": "i",
            "ɨ": "i",
            "ı": "i",
            "ⓙ": "j",
            "ｊ": "j",
            "ĵ": "j",
            "ǰ": "j",
            "ɉ": "j",
            "ⓚ": "k",
            "ｋ": "k",
            "ḱ": "k",
            "ǩ": "k",
            "ḳ": "k",
            "ķ": "k",
            "ḵ": "k",
            "ƙ": "k",
            "ⱪ": "k",
            "ꝁ": "k",
            "ꝃ": "k",
            "ꝅ": "k",
            "ꞣ": "k",
            "ⓛ": "l",
            "ｌ": "l",
            "ŀ": "l",
            "ĺ": "l",
            "ľ": "l",
            "ḷ": "l",
            "ḹ": "l",
            "ļ": "l",
            "ḽ": "l",
            "ḻ": "l",
            "ſ": "l",
            "ł": "l",
            "ƚ": "l",
            "ɫ": "l",
            "ⱡ": "l",
            "ꝉ": "l",
            "ꞁ": "l",
            "ꝇ": "l",
            "ǉ": "lj",
            "ⓜ": "m",
            "ｍ": "m",
            "ḿ": "m",
            "ṁ": "m",
            "ṃ": "m",
            "ɱ": "m",
            "ɯ": "m",
            "ⓝ": "n",
            "ｎ": "n",
            "ǹ": "n",
            "ń": "n",
            "ñ": "n",
            "ṅ": "n",
            "ň": "n",
            "ṇ": "n",
            "ņ": "n",
            "ṋ": "n",
            "ṉ": "n",
            "ƞ": "n",
            "ɲ": "n",
            "ŉ": "n",
            "ꞑ": "n",
            "ꞥ": "n",
            "ǌ": "nj",
            "ⓞ": "o",
            "ｏ": "o",
            "ò": "o",
            "ó": "o",
            "ô": "o",
            "ồ": "o",
            "ố": "o",
            "ỗ": "o",
            "ổ": "o",
            "õ": "o",
            "ṍ": "o",
            "ȭ": "o",
            "ṏ": "o",
            "ō": "o",
            "ṑ": "o",
            "ṓ": "o",
            "ŏ": "o",
            "ȯ": "o",
            "ȱ": "o",
            "ö": "o",
            "ȫ": "o",
            "ỏ": "o",
            "ő": "o",
            "ǒ": "o",
            "ȍ": "o",
            "ȏ": "o",
            "ơ": "o",
            "ờ": "o",
            "ớ": "o",
            "ỡ": "o",
            "ở": "o",
            "ợ": "o",
            "ọ": "o",
            "ộ": "o",
            "ǫ": "o",
            "ǭ": "o",
            "ø": "o",
            "ǿ": "o",
            "ɔ": "o",
            "ꝋ": "o",
            "ꝍ": "o",
            "ɵ": "o",
            "ƣ": "oi",
            "ȣ": "ou",
            "ꝏ": "oo",
            "ⓟ": "p",
            "ｐ": "p",
            "ṕ": "p",
            "ṗ": "p",
            "ƥ": "p",
            "ᵽ": "p",
            "ꝑ": "p",
            "ꝓ": "p",
            "ꝕ": "p",
            "ⓠ": "q",
            "ｑ": "q",
            "ɋ": "q",
            "ꝗ": "q",
            "ꝙ": "q",
            "ⓡ": "r",
            "ｒ": "r",
            "ŕ": "r",
            "ṙ": "r",
            "ř": "r",
            "ȑ": "r",
            "ȓ": "r",
            "ṛ": "r",
            "ṝ": "r",
            "ŗ": "r",
            "ṟ": "r",
            "ɍ": "r",
            "ɽ": "r",
            "ꝛ": "r",
            "ꞧ": "r",
            "ꞃ": "r",
            "ⓢ": "s",
            "ｓ": "s",
            "ß": "s",
            "ś": "s",
            "ṥ": "s",
            "ŝ": "s",
            "ṡ": "s",
            "š": "s",
            "ṧ": "s",
            "ṣ": "s",
            "ṩ": "s",
            "ș": "s",
            "ş": "s",
            "ȿ": "s",
            "ꞩ": "s",
            "ꞅ": "s",
            "ẛ": "s",
            "ⓣ": "t",
            "ｔ": "t",
            "ṫ": "t",
            "ẗ": "t",
            "ť": "t",
            "ṭ": "t",
            "ț": "t",
            "ţ": "t",
            "ṱ": "t",
            "ṯ": "t",
            "ŧ": "t",
            "ƭ": "t",
            "ʈ": "t",
            "ⱦ": "t",
            "ꞇ": "t",
            "ꜩ": "tz",
            "ⓤ": "u",
            "ｕ": "u",
            "ù": "u",
            "ú": "u",
            "û": "u",
            "ũ": "u",
            "ṹ": "u",
            "ū": "u",
            "ṻ": "u",
            "ŭ": "u",
            "ü": "u",
            "ǜ": "u",
            "ǘ": "u",
            "ǖ": "u",
            "ǚ": "u",
            "ủ": "u",
            "ů": "u",
            "ű": "u",
            "ǔ": "u",
            "ȕ": "u",
            "ȗ": "u",
            "ư": "u",
            "ừ": "u",
            "ứ": "u",
            "ữ": "u",
            "ử": "u",
            "ự": "u",
            "ụ": "u",
            "ṳ": "u",
            "ų": "u",
            "ṷ": "u",
            "ṵ": "u",
            "ʉ": "u",
            "ⓥ": "v",
            "ｖ": "v",
            "ṽ": "v",
            "ṿ": "v",
            "ʋ": "v",
            "ꝟ": "v",
            "ʌ": "v",
            "ꝡ": "vy",
            "ⓦ": "w",
            "ｗ": "w",
            "ẁ": "w",
            "ẃ": "w",
            "ŵ": "w",
            "ẇ": "w",
            "ẅ": "w",
            "ẘ": "w",
            "ẉ": "w",
            "ⱳ": "w",
            "ⓧ": "x",
            "ｘ": "x",
            "ẋ": "x",
            "ẍ": "x",
            "ⓨ": "y",
            "ｙ": "y",
            "ỳ": "y",
            "ý": "y",
            "ŷ": "y",
            "ỹ": "y",
            "ȳ": "y",
            "ẏ": "y",
            "ÿ": "y",
            "ỷ": "y",
            "ẙ": "y",
            "ỵ": "y",
            "ƴ": "y",
            "ɏ": "y",
            "ỿ": "y",
            "ⓩ": "z",
            "ｚ": "z",
            "ź": "z",
            "ẑ": "z",
            "ż": "z",
            "ž": "z",
            "ẓ": "z",
            "ẕ": "z",
            "ƶ": "z",
            "ȥ": "z",
            "ɀ": "z",
            "ⱬ": "z",
            "ꝣ": "z",
            "Ά": "Α",
            "Έ": "Ε",
            "Ή": "Η",
            "Ί": "Ι",
            "Ϊ": "Ι",
            "Ό": "Ο",
            "Ύ": "Υ",
            "Ϋ": "Υ",
            "Ώ": "Ω",
            "ά": "α",
            "έ": "ε",
            "ή": "η",
            "ί": "ι",
            "ϊ": "ι",
            "ΐ": "ι",
            "ό": "ο",
            "ύ": "υ",
            "ϋ": "υ",
            "ΰ": "υ",
            "ω": "ω",
            "ς": "σ"
        }, DataUtil.fnOperators = {
            equal: function(actual, expected, ignoreCase, ignoreAccent) {
                return ignoreAccent && (actual = DataUtil.ignoreDiacritics(actual), expected = DataUtil.ignoreDiacritics(expected)), 
                ignoreCase ? DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected) : actual === expected;
            },
            notequal: function(actual, expected, ignoreCase, ignoreAccent) {
                return ignoreAccent && (actual = DataUtil.ignoreDiacritics(actual), expected = DataUtil.ignoreDiacritics(expected)), 
                !DataUtil.fnOperators.equal(actual, expected, ignoreCase);
            },
            lessthan: function(actual, expected, ignoreCase) {
                return ignoreCase ? DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected) : actual < expected;
            },
            greaterthan: function(actual, expected, ignoreCase) {
                return ignoreCase ? DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected) : actual > expected;
            },
            lessthanorequal: function(actual, expected, ignoreCase) {
                return ignoreCase ? DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected) : actual <= expected;
            },
            greaterthanorequal: function(actual, expected, ignoreCase) {
                return ignoreCase ? DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected) : actual >= expected;
            },
            contains: function(actual, expected, ignoreCase, ignoreAccent) {
                return ignoreAccent && (actual = DataUtil.ignoreDiacritics(actual), expected = DataUtil.ignoreDiacritics(expected)), 
                ignoreCase ? !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && -1 !== DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) : !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && -1 !== actual.toString().indexOf(expected);
            },
            notnull: function(actual) {
                return null !== actual;
            },
            isnull: function(actual) {
                return null === actual;
            },
            startswith: function(actual, expected, ignoreCase, ignoreAccent) {
                return ignoreAccent && (actual = DataUtil.ignoreDiacritics(actual), expected = DataUtil.ignoreDiacritics(expected)), 
                ignoreCase ? actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected)) : actual && expected && DataUtil.startsWith(actual, expected);
            },
            endswith: function(actual, expected, ignoreCase, ignoreAccent) {
                return ignoreAccent && (actual = DataUtil.ignoreDiacritics(actual), expected = DataUtil.ignoreDiacritics(expected)), 
                ignoreCase ? actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected)) : actual && expected && DataUtil.endsWith(actual, expected);
            },
            processSymbols: function(operator) {
                var fnName = DataUtil.operatorSymbols[operator];
                if (fnName) {
                    return DataUtil.fnOperators[fnName];
                }
                return DataUtil.throwError("Query - Process Operator : Invalid operator");
            },
            processOperator: function(operator) {
                var fn = DataUtil.fnOperators[operator];
                return fn || DataUtil.fnOperators.processSymbols(operator);
            }
        }, DataUtil.parse = {
            parseJson: function(jsonText) {
                return "string" == typeof jsonText ? jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver) : jsonText instanceof Array ? DataUtil.parse.iterateAndReviveArray(jsonText) : "object" == typeof jsonText && null !== jsonText && DataUtil.parse.iterateAndReviveJson(jsonText), 
                jsonText;
            },
            iterateAndReviveArray: function(array) {
                for (var i = 0; i < array.length; i++) "object" == typeof array[i] && null !== array[i] ? DataUtil.parse.iterateAndReviveJson(array[i]) : "string" != typeof array[i] || /^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i]) ? array[i] = DataUtil.parse.parseJson(array[i]) : array[i] = DataUtil.parse.jsonReviver("", array[i]);
            },
            iterateAndReviveJson: function(json) {
                for (var value, _i = 0, keys_2 = Object.keys(json); _i < keys_2.length; _i++) {
                    var prop = keys_2[_i];
                    DataUtil.startsWith(prop, "__") || ("object" == typeof (value = json[prop]) ? value instanceof Array ? DataUtil.parse.iterateAndReviveArray(value) : value && DataUtil.parse.iterateAndReviveJson(value) : json[prop] = DataUtil.parse.jsonReviver(json[prop], value));
                }
            },
            jsonReviver: function(field, value) {
                var dupValue = value;
                if ("string" == typeof value) {
                    var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
                    if (ms) return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), DataUtil.serverTimezoneOffset, !0);
                    if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
                        var arr = dupValue.split(/[^0-9]/);
                        value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, !0);
                    }
                }
                return value;
            },
            isJson: function(jsonData) {
                return "string" == typeof jsonData[0] ? jsonData : DataUtil.parse.parseJson(jsonData);
            },
            isGuid: function(value) {
                return null != /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i.exec(value);
            },
            replacer: function(value, stringify) {
                return DataUtil.isPlainObject(value) ? DataUtil.parse.jsonReplacer(value, stringify) : value instanceof Array ? DataUtil.parse.arrayReplacer(value) : value instanceof Date ? DataUtil.parse.jsonReplacer({
                    val: value
                }, stringify).val : value;
            },
            jsonReplacer: function(val, stringify) {
                for (var value, _i = 0, keys_3 = Object.keys(val); _i < keys_3.length; _i++) {
                    var prop = keys_3[_i];
                    if ((value = val[prop]) instanceof Date) {
                        var d = value;
                        val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), DataUtil.serverTimezoneOffset).toJSON();
                    }
                }
                return val;
            },
            arrayReplacer: function(val) {
                for (var i = 0; i < val.length; i++) DataUtil.isPlainObject(val[i]) ? val[i] = DataUtil.parse.jsonReplacer(val[i]) : val[i] instanceof Date && (val[i] = DataUtil.parse.jsonReplacer({
                    date: val[i]
                }).date);
                return val;
            }
        }, DataUtil.dateParse = {
            addSelfOffset: function(input) {
                return new Date(+input - 6e4 * input.getTimezoneOffset());
            },
            toUTC: function(input) {
                return new Date(+input + 6e4 * input.getTimezoneOffset());
            },
            toTimeZone: function(input, offset, utc) {
                if (null === offset) return input;
                var unix = utc ? DataUtil.dateParse.toUTC(input) : input;
                return new Date(+unix - 36e5 * offset);
            },
            toLocalTime: function(input) {
                var datefn = input, timeZone = -datefn.getTimezoneOffset(), differenceString = timeZone >= 0 ? "+" : "-", localtimefn = function(num) {
                    var norm = Math.floor(Math.abs(num));
                    return (norm < 10 ? "0" : "") + norm;
                };
                return datefn.getFullYear() + "-" + localtimefn(datefn.getMonth() + 1) + "-" + localtimefn(datefn.getDate()) + "T" + localtimefn(datefn.getHours()) + ":" + localtimefn(datefn.getMinutes()) + ":" + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ":" + localtimefn(timeZone % 60);
            }
        }, DataUtil;
    }(), __extends$7 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), Adaptor = function() {
        function Adaptor(ds) {
            this.options = {
                from: "table",
                requestType: "json",
                sortBy: "sorted",
                select: "select",
                skip: "skip",
                group: "group",
                take: "take",
                search: "search",
                count: "requiresCounts",
                where: "where",
                aggregates: "aggregates"
            }, this.type = Adaptor, this.dataSource = ds, this.pvt = {};
        }
        return Adaptor.prototype.processResponse = function(data, ds, query, xhr) {
            return data;
        }, Adaptor;
    }(), JsonAdaptor = function(_super) {
        function JsonAdaptor() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$7(JsonAdaptor, _super), JsonAdaptor.prototype.processQuery = function(dataManager, query) {
            for (var ret, key, result = dataManager.dataSource.json.slice(0), count = result.length, countFlg = !0, agg = {}, i = 0; i < query.queries.length; i++) ret = this[(key = query.queries[i]).fn].call(this, result, key.e, query), 
            "onAggregates" === key.fn ? agg[key.e.field + " - " + key.e.type] = ret : result = void 0 !== ret ? ret : result, 
            "onPage" !== key.fn && "onSkip" !== key.fn && "onTake" !== key.fn && "onRange" !== key.fn || (countFlg = !1), 
            countFlg && (count = result.length);
            return query.isCountRequired && (result = {
                result: result,
                count: count,
                aggregates: agg
            }), result;
        }, JsonAdaptor.prototype.batchRequest = function(dm, changes, e) {
            var i, deletedRecordsLen = changes.deletedRecords.length;
            for (i = 0; i < changes.addedRecords.length; i++) this.insert(dm, changes.addedRecords[i]);
            for (i = 0; i < changes.changedRecords.length; i++) this.update(dm, e.key, changes.changedRecords[i]);
            for (i = 0; i < deletedRecordsLen; i++) this.remove(dm, e.key, changes.deletedRecords[i]);
            return changes;
        }, JsonAdaptor.prototype.onWhere = function(ds, e) {
            return ds && ds.length ? ds.filter(function(obj) {
                if (e) return e.validate(obj);
            }) : ds;
        }, JsonAdaptor.prototype.onAggregates = function(ds, e) {
            var fn = DataUtil.aggregates[e.type];
            return ds && fn && 0 !== ds.length ? fn(ds, e.field) : null;
        }, JsonAdaptor.prototype.onSearch = function(ds, e) {
            return ds && ds.length ? (0 === e.fieldNames.length && DataUtil.getFieldList(ds[0], e.fieldNames), 
            ds.filter(function(obj) {
                for (var j = 0; j < e.fieldNames.length; j++) if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) return !0;
                return !1;
            })) : ds;
        }, JsonAdaptor.prototype.onSortBy = function(ds, e, query) {
            if (!ds || !ds.length) return ds;
            var fnCompare, field = DataUtil.getValue(e.fieldName, query);
            if (!field) return ds.sort(e.comparer);
            if (field instanceof Array) {
                for (var i = (field = field.slice(0)).length - 1; i >= 0; i--) field[i] && (fnCompare = e.comparer, 
                DataUtil.endsWith(field[i], " desc") && (fnCompare = DataUtil.fnSort("descending"), 
                field[i] = field[i].replace(" desc", "")), ds = DataUtil.sort(ds, field[i], fnCompare));
                return ds;
            }
            return DataUtil.sort(ds, field, e.comparer);
        }, JsonAdaptor.prototype.onGroup = function(ds, e, query) {
            if (!ds || !ds.length) return ds;
            var aggQuery = Query.filterQueries(query.queries, "onAggregates"), agg = [];
            if (aggQuery.length) for (var tmp = void 0, i = 0; i < aggQuery.length; i++) tmp = aggQuery[i].e, 
            agg.push({
                type: tmp.type,
                field: DataUtil.getValue(tmp.field, query)
            });
            return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);
        }, JsonAdaptor.prototype.onPage = function(ds, e, query) {
            var size = DataUtil.getValue(e.pageSize, query), start = (DataUtil.getValue(e.pageIndex, query) - 1) * size, end = start + size;
            return ds && ds.length ? ds.slice(start, end) : ds;
        }, JsonAdaptor.prototype.onRange = function(ds, e) {
            return ds && ds.length ? ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end)) : ds;
        }, JsonAdaptor.prototype.onTake = function(ds, e) {
            return ds && ds.length ? ds.slice(0, DataUtil.getValue(e.nos)) : ds;
        }, JsonAdaptor.prototype.onSkip = function(ds, e) {
            return ds && ds.length ? ds.slice(DataUtil.getValue(e.nos)) : ds;
        }, JsonAdaptor.prototype.onSelect = function(ds, e) {
            return ds && ds.length ? DataUtil.select(ds, DataUtil.getValue(e.fieldNames)) : ds;
        }, JsonAdaptor.prototype.insert = function(dm, data, tableName, query, position) {
            return isNullOrUndefined(position) ? dm.dataSource.json.push(data) : dm.dataSource.json.splice(position, 0, data);
        }, JsonAdaptor.prototype.remove = function(dm, keyField, value, tableName) {
            var i, ds = dm.dataSource.json;
            for ("object" == typeof value && (value = value[keyField]), i = 0; i < ds.length && ds[i][keyField] !== value; i++) ;
            return i !== ds.length ? ds.splice(i, 1) : null;
        }, JsonAdaptor.prototype.update = function(dm, keyField, value, tableName) {
            var i, ds = dm.dataSource.json, key = value[keyField];
            for (i = 0; i < ds.length && ds[i][keyField] !== key; i++) ;
            return i < ds.length ? merge(ds[i], value) : null;
        }, JsonAdaptor;
    }(Adaptor), UrlAdaptor = function(_super) {
        function UrlAdaptor() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$7(UrlAdaptor, _super), UrlAdaptor.prototype.processQuery = function(dm, query, hierarchyFilters) {
            var temp, skip, queries = this.getQueryRequest(query), singles = Query.filterQueryLists(query.queries, [ "onSelect", "onPage", "onSkip", "onTake", "onRange" ]), params = query.params, url = dm.dataSource.url, take = null, options = this.options, request = {
                sorts: [],
                groups: [],
                filters: [],
                searches: [],
                aggregates: []
            };
            "onPage" in singles ? (temp = singles.onPage, skip = ((skip = DataUtil.getValue(temp.pageIndex, query)) - 1) * (take = DataUtil.getValue(temp.pageSize, query))) : "onRange" in singles && (skip = (temp = singles.onRange).start, 
            take = temp.end - temp.start);
            for (var i = 0; i < queries.sorts.length; i++) temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query), 
            request.sorts.push(DataUtil.callAdaptorFunction(this, "onEachSort", {
                name: temp,
                direction: queries.sorts[i].e.direction
            }, query));
            hierarchyFilters && (temp = this.getFiltersFrom(hierarchyFilters, query)) && request.filters.push(DataUtil.callAdaptorFunction(this, "onEachWhere", temp.toJson(), query));
            for (i = 0; i < queries.filters.length; i++) {
                request.filters.push(DataUtil.callAdaptorFunction(this, "onEachWhere", queries.filters[i].e.toJson(), query));
                for (var _i = 0, keys_1 = "object" == typeof request.filters[i] ? Object.keys(request.filters[i]) : []; _i < keys_1.length; _i++) {
                    var prop = keys_1[_i];
                    DataUtil.isNull(request[prop]) && delete request[prop];
                }
            }
            for (i = 0; i < queries.searches.length; i++) temp = queries.searches[i].e, request.searches.push(DataUtil.callAdaptorFunction(this, "onEachSearch", {
                fields: temp.fieldNames,
                operator: temp.operator,
                key: temp.searchKey,
                ignoreCase: temp.ignoreCase
            }, query));
            for (i = 0; i < queries.groups.length; i++) request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));
            for (i = 0; i < queries.aggregates.length; i++) temp = queries.aggregates[i].e, 
            request.aggregates.push({
                type: temp.type,
                field: DataUtil.getValue(temp.field, query)
            });
            var req = {};
            this.getRequestQuery(options, query, singles, request, req), DataUtil.callAdaptorFunction(this, "addParams", {
                dm: dm,
                query: query,
                params: params,
                reqParams: req
            });
            for (var _a = 0, keys_2 = Object.keys(req); _a < keys_2.length; _a++) {
                prop = keys_2[_a];
                (DataUtil.isNull(req[prop]) || "" === req[prop] || 0 === req[prop].length) && delete req[prop];
            }
            options.skip in req && options.take in req || null === take || (req[options.skip] = DataUtil.callAdaptorFunction(this, "onSkip", skip, query), 
            req[options.take] = DataUtil.callAdaptorFunction(this, "onTake", take, query));
            var p = this.pvt;
            return this.pvt = {}, "json" === this.options.requestType ? {
                data: JSON.stringify(req),
                url: url,
                pvtData: p,
                type: "POST",
                contentType: "application/json; charset=utf-8"
            } : (temp = this.convertToQueryString(req, query, dm), temp = (-1 !== dm.dataSource.url.indexOf("?") ? "&" : "/") + temp, 
            {
                type: "GET",
                url: temp.length ? url.replace(/\/*$/, temp) : url,
                pvtData: p
            });
        }, UrlAdaptor.prototype.getRequestQuery = function(options, query, singles, request, request1) {
            var req = request1;
            req[options.from] = query.fromTable, options.apply && query.distincts.length && (req[options.apply] = "onDistinct" in this ? DataUtil.callAdaptorFunction(this, "onDistinct", query.distincts) : ""), 
            !query.distincts.length && options.expand && (req[options.expand] = "onExpand" in this && "onSelect" in singles ? DataUtil.callAdaptorFunction(this, "onExpand", {
                selects: DataUtil.getValue(singles.onSelect.fieldNames, query),
                expands: query.expands
            }, query) : query.expands), req[options.select] = "onSelect" in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, "onSelect", DataUtil.getValue(singles.onSelect.fieldNames, query), query) : "", 
            req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, "onCount", query.isCountRequired, query) : "", 
            req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, "onSearch", request.searches, query) : "", 
            req[options.skip] = "onSkip" in singles ? DataUtil.callAdaptorFunction(this, "onSkip", DataUtil.getValue(singles.onSkip.nos, query), query) : "", 
            req[options.take] = "onTake" in singles ? DataUtil.callAdaptorFunction(this, "onTake", DataUtil.getValue(singles.onTake.nos, query), query) : "", 
            req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, "onWhere", request.filters, query) : "", 
            req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, "onSortBy", request.sorts, query) : "", 
            req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, "onGroup", request.groups, query) : "", 
            req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, "onAggregates", request.aggregates, query) : "", 
            req.param = [];
        }, UrlAdaptor.prototype.convertToQueryString = function(request, query, dm) {
            return "";
        }, UrlAdaptor.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
            var requests = request, pvt = requests.pvtData || {}, groupDs = data.groupDs;
            if (xhr && xhr.getResponseHeader("Content-Type") && -1 !== xhr.getResponseHeader("Content-Type").indexOf("xml")) return query.isCountRequired ? {
                result: [],
                count: 0
            } : [];
            var d = JSON.parse(requests.data);
            if (d && "batch" === d.action && data.addedRecords) return changes.addedRecords = data.addedRecords, 
            changes;
            data.d && (data = data.d);
            var args = {};
            return "count" in data && (args.count = data.count), args.result = data.result ? data.result : data, 
            this.getAggregateResult(pvt, data, args, groupDs, query), DataUtil.isNull(args.count) ? args.result : {
                result: args.result,
                count: args.count,
                aggregates: args.aggregates
            };
        }, UrlAdaptor.prototype.onGroup = function(e) {
            return this.pvt.groups = e, e;
        }, UrlAdaptor.prototype.onAggregates = function(e) {
            this.pvt.aggregates = e;
        }, UrlAdaptor.prototype.batchRequest = function(dm, changes, e, query, original) {
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(extend({}, {
                    changed: changes.changedRecords,
                    added: changes.addedRecords,
                    deleted: changes.deletedRecords,
                    action: "batch",
                    table: e[void 0],
                    key: e[void 0]
                }, DataUtil.getAddParams(this, dm, query)))
            };
        }, UrlAdaptor.prototype.beforeSend = function(dm, request) {}, UrlAdaptor.prototype.insert = function(dm, data, tableName, query) {
            return {
                url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify(extend({}, {
                    value: data,
                    table: tableName,
                    action: "insert"
                }, DataUtil.getAddParams(this, dm, query)))
            };
        }, UrlAdaptor.prototype.remove = function(dm, keyField, value, tableName, query) {
            return {
                type: "POST",
                url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify(extend({}, {
                    key: value,
                    keyColumn: keyField,
                    table: tableName,
                    action: "remove"
                }, DataUtil.getAddParams(this, dm, query)))
            };
        }, UrlAdaptor.prototype.update = function(dm, keyField, value, tableName, query) {
            return {
                type: "POST",
                url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify(extend({}, {
                    value: value,
                    action: "update",
                    keyColumn: keyField,
                    key: value[keyField],
                    table: tableName
                }, DataUtil.getAddParams(this, dm, query)))
            };
        }, UrlAdaptor.prototype.getFiltersFrom = function(data, query) {
            var value, key = query.fKey, prop = key, pKey = query.key, predicats = [];
            "object" != typeof data[0] && (prop = null);
            for (var i = 0; i < data.length; i++) value = "object" == typeof data[0] ? DataUtil.getObject(pKey || prop, data[i]) : data[i], 
            predicats.push(new Predicate$1(key, "equal", value));
            return Predicate$1.or(predicats);
        }, UrlAdaptor.prototype.getAggregateResult = function(pvt, data, args, groupDs, query) {
            var pData = data;
            if (data && data.result && (pData = data.result), pvt && pvt.aggregates && pvt.aggregates.length) {
                var agg = pvt.aggregates, fn = void 0, aggregateData = pData, res = {};
                data.aggregate && (aggregateData = data.aggregate);
                for (var i = 0; i < agg.length; i++) (fn = DataUtil.aggregates[agg[i].type]) && (res[agg[i].field + " - " + agg[i].type] = fn(aggregateData, agg[i].field));
                args.aggregates = res;
            }
            if (pvt && pvt.groups && pvt.groups.length) {
                var groups = pvt.groups;
                for (i = 0; i < groups.length; i++) {
                    isNullOrUndefined(groupDs) || (groupDs = DataUtil.group(groupDs, groups[i]));
                    var groupQuery = Query.filterQueries(query.queries, "onGroup")[i].e;
                    pData = DataUtil.group(pData, groups[i], pvt.aggregates, null, groupDs, groupQuery.comparer);
                }
                args.result = pData;
            }
            return args;
        }, UrlAdaptor.prototype.getQueryRequest = function(query) {
            var req = {
                sorts: [],
                groups: [],
                filters: [],
                searches: [],
                aggregates: []
            };
            return req.sorts = Query.filterQueries(query.queries, "onSortBy"), req.groups = Query.filterQueries(query.queries, "onGroup"), 
            req.filters = Query.filterQueries(query.queries, "onWhere"), req.searches = Query.filterQueries(query.queries, "onSearch"), 
            req.aggregates = Query.filterQueries(query.queries, "onAggregates"), req;
        }, UrlAdaptor.prototype.addParams = function(options) {
            for (var req = options.reqParams, _i = 0, _a = options.params; _i < _a.length; _i++) {
                var tmp = _a[_i];
                if (req[tmp.key]) throw new Error("Query() - addParams: Custom Param is conflicting other request arguments");
                req[tmp.key] = tmp.value, tmp.fn && (req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm));
            }
        }, UrlAdaptor;
    }(Adaptor), ODataAdaptor = function(_super) {
        function ODataAdaptor(props) {
            var _this = _super.call(this) || this;
            return _this.options = extend({}, _this.options, {
                requestType: "get",
                accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
                multipartAccept: "multipart/mixed",
                sortBy: "$orderby",
                select: "$select",
                skip: "$skip",
                take: "$top",
                count: "$inlinecount",
                where: "$filter",
                expand: "$expand",
                batch: "$batch",
                changeSet: "--changeset_",
                batchPre: "batch_",
                contentId: "Content-Id: ",
                batchContent: "Content-Type: multipart/mixed; boundary=",
                changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
                batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
                updateType: "PUT"
            }), _this.getModuleName = getValue("getModulename", _this), extend(_this.options, props || {}), 
            _this;
        }
        return __extends$7(ODataAdaptor, _super), ODataAdaptor.prototype.onPredicate = function(predicate, query, requiresCast) {
            var operator, guid, returnValue = "", val = predicate.value, type = typeof val, field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;
            if (val instanceof Date && (val = "datetime'" + DataUtil.parse.replacer(val) + "'"), 
            "string" === type && (val = "'" + (val = encodeURIComponent(val)) + "'", requiresCast && (field = "cast(" + field + ", 'Edm.String')"), 
            DataUtil.parse.isGuid(val) && (guid = "guid"), predicate.ignoreCase && (guid || (field = "tolower(" + field + ")"), 
            val = val.toLowerCase())), operator = DataUtil.odBiOperator[predicate.operator]) return returnValue += field, 
            returnValue += operator, guid && (returnValue += guid), returnValue + val;
            if (isNullOrUndefined(this.getModuleName) ? operator = DataUtil.odUniOperator[predicate.operator] : "ODataV4Adaptor" === this.getModuleName() && (operator = DataUtil.odv4UniOperator[predicate.operator]), 
            "substringof" === operator) {
                var temp = val;
                val = field, field = temp;
            }
            return returnValue += operator + "(", returnValue += field + ",", guid && (returnValue += guid), 
            returnValue += val + ")";
        }, ODataAdaptor.prototype.addParams = function(options) {
            _super.prototype.addParams.call(this, options), delete options.reqParams.params;
        }, ODataAdaptor.prototype.onComplexPredicate = function(predicate, query, requiresCast) {
            for (var res = [], i = 0; i < predicate.predicates.length; i++) res.push("(" + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ")");
            return res.join(" " + predicate.condition + " ");
        }, ODataAdaptor.prototype.onEachWhere = function(filter, query, requiresCast) {
            return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
        }, ODataAdaptor.prototype.onWhere = function(filters) {
            return this.pvt.search && filters.push(this.onEachWhere(this.pvt.search, null, !0)), 
            filters.join(" and ");
        }, ODataAdaptor.prototype.onEachSearch = function(e) {
            e.fields && 0 === e.fields.length && DataUtil.throwError("Query() - Search : oData search requires list of field names to search");
            for (var filter = this.pvt.search || [], i = 0; i < e.fields.length; i++) filter.push(new Predicate$1(e.fields[i], e.operator, e.key, e.ignoreCase));
            this.pvt.search = filter;
        }, ODataAdaptor.prototype.onSearch = function(e) {
            return this.pvt.search = Predicate$1.or(this.pvt.search), "";
        }, ODataAdaptor.prototype.onEachSort = function(e) {
            var res = [];
            if (e.name instanceof Array) for (var i = 0; i < e.name.length; i++) res.push(ODataAdaptor.getField(e.name[i]) + ("descending" === e.direction ? " desc" : "")); else res.push(ODataAdaptor.getField(e.name) + ("descending" === e.direction ? " desc" : ""));
            return res.join(",");
        }, ODataAdaptor.prototype.onSortBy = function(e) {
            return e.reverse().join(",");
        }, ODataAdaptor.prototype.onGroup = function(e) {
            return this.pvt.groups = e, [];
        }, ODataAdaptor.prototype.onSelect = function(e) {
            for (var i = 0; i < e.length; i++) e[i] = ODataAdaptor.getField(e[i]);
            return e.join(",");
        }, ODataAdaptor.prototype.onAggregates = function(e) {
            return this.pvt.aggregates = e, "";
        }, ODataAdaptor.prototype.onCount = function(e) {
            return !0 === e ? "allpages" : "";
        }, ODataAdaptor.prototype.beforeSend = function(dm, request, settings) {
            DataUtil.endsWith(settings.url, this.options.batch) && "post" === settings.type.toLowerCase() ? (request.setRequestHeader("Accept", this.options.multipartAccept), 
            request.setRequestHeader("DataServiceVersion", "2.0"), request.overrideMimeType("text/plain; charset=x-user-defined")) : request.setRequestHeader("Accept", this.options.accept), 
            request.setRequestHeader("DataServiceVersion", "2.0"), request.setRequestHeader("MaxDataServiceVersion", "2.0");
        }, ODataAdaptor.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
            if (!isNullOrUndefined(data.d)) {
                var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
                if (!isNullOrUndefined(dataCopy)) for (var i = 0; i < dataCopy.length; i++) isNullOrUndefined(dataCopy[i].__metadata) || delete dataCopy[i].__metadata;
            }
            var pvt = request && request.pvtData, emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);
            if (emptyAndBatch) return emptyAndBatch;
            var versionCheck = xhr && request.getResponseHeader("DataServiceVersion"), count = null, version = versionCheck && parseInt(versionCheck, 10) || 2;
            if (query && query.isCountRequired) {
                (data.__count || data["odata.count"]) && (count = data.__count || data["odata.count"]), 
                data.d && (data = data.d), (data.__count || data["odata.count"]) && (count = data.__count || data["odata.count"]);
            }
            3 === version && data.value && (data = data.value), data.d && (data = data.d), version < 3 && data.results && (data = data.results);
            var args = {};
            return args.count = count, args.result = data, this.getAggregateResult(pvt, data, args, null, query), 
            DataUtil.isNull(count) ? args.result : {
                result: args.result,
                count: args.count,
                aggregates: args.aggregates
            };
        }, ODataAdaptor.prototype.convertToQueryString = function(request, query, dm) {
            var res = [], tableName = request.table || "";
            delete request.table, dm.dataSource.requiresFormat && (request.$format = "json");
            for (var _i = 0, keys_4 = Object.keys(request); _i < keys_4.length; _i++) {
                var prop = keys_4[_i];
                res.push(prop + "=" + request[prop]);
            }
            return res = res.join("&"), dm.dataSource.url && -1 !== dm.dataSource.url.indexOf("?") && !tableName ? res : res.length ? tableName + "?" + res : tableName || "";
        }, ODataAdaptor.prototype.localTimeReplacer = function(key, convertObj) {
            for (var _i = 0, _a = isNullOrUndefined(convertObj) ? [] : Object.keys(convertObj); _i < _a.length; _i++) {
                var prop = _a[_i];
                convertObj[prop] instanceof Date && (convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]));
            }
            return convertObj;
        }, ODataAdaptor.prototype.insert = function(dm, data, tableName) {
            return {
                url: dm.dataSource.url.replace(/\/*$/, tableName ? "/" + tableName : ""),
                data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
            };
        }, ODataAdaptor.prototype.remove = function(dm, keyField, value, tableName) {
            var url;
            return url = "string" != typeof value || DataUtil.parse.isGuid(value) ? "(" + value + ")" : "('" + value + "')", 
            {
                type: "DELETE",
                url: dm.dataSource.url.replace(/\/*$/, tableName ? "/" + tableName : "") + url
            };
        }, ODataAdaptor.prototype.update = function(dm, keyField, value, tableName, query, original) {
            "PATCH" !== this.options.updateType || isNullOrUndefined(original) || (value = this.compareAndRemove(value, original, keyField));
            var url;
            return url = "string" != typeof value[keyField] || DataUtil.parse.isGuid(value[keyField]) ? "(" + value[keyField] + ")" : "('" + value[keyField] + "')", 
            {
                type: this.options.updateType,
                url: dm.dataSource.url.replace(/\/*$/, tableName ? "/" + tableName : "") + url,
                data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
                accept: this.options.accept
            };
        }, ODataAdaptor.prototype.batchRequest = function(dm, changes, e, query, original) {
            var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre), url = dm.dataSource.url.replace(/\/*$/, "/" + this.options.batch), args = {
                url: e.url,
                key: e.key,
                cid: 1,
                cSet: DataUtil.getGuid(this.options.changeSet)
            }, req = "--" + initialGuid + "\n";
            return req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n", 
            this.pvt.changeSet = 0, req += this.generateInsertRequest(changes.addedRecords, args), 
            req += this.generateUpdateRequest(changes.changedRecords, args, original ? original.changedRecords : []), 
            req += this.generateDeleteRequest(changes.deletedRecords, args), req += args.cSet + "--\n", 
            req += "--" + initialGuid + "--", {
                type: "POST",
                url: url,
                dataType: "json",
                contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
                data: req
            };
        }, ODataAdaptor.prototype.generateDeleteRequest = function(arr, e) {
            if (!arr) return "";
            return this.generateBodyContent(arr, e, {
                method: "DELETE ",
                url: function(data, i, key) {
                    return "(" + data[i][key] + ")";
                },
                data: function(data, i) {
                    return "";
                }
            }) + "\n";
        }, ODataAdaptor.prototype.generateInsertRequest = function(arr, e) {
            if (!arr) return "";
            var stat = {
                method: "POST ",
                url: function(data, i, key) {
                    return "";
                },
                data: function(data, i) {
                    return JSON.stringify(data[i]) + "\n\n";
                }
            };
            return this.generateBodyContent(arr, e, stat);
        }, ODataAdaptor.prototype.generateUpdateRequest = function(arr, e, org) {
            var _this = this;
            if (!arr) return "";
            arr.forEach(function(change) {
                return change = _this.compareAndRemove(change, org.filter(function(o) {
                    return DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change);
                })[0], e.key);
            });
            var stat = {
                method: this.options.updateType + " ",
                url: function(data, i, key) {
                    return "(" + data[i][key] + ")";
                },
                data: function(data, i) {
                    return JSON.stringify(data[i]) + "\n\n";
                }
            };
            return this.generateBodyContent(arr, e, stat);
        }, ODataAdaptor.getField = function(prop) {
            return prop.replace(/\./g, "/");
        }, ODataAdaptor.prototype.generateBodyContent = function(arr, e, stat) {
            for (var req = "", i = 0; i < arr.length; i++) req += "\n" + e.cSet + "\n", req += this.options.changeSetContent + "\n\n", 
            req += stat.method, req += e.url + stat.url(arr, i, e.key) + " HTTP/1.1\n", req += "Accept: " + this.options.accept + "\n", 
            req += "Content-Id: " + this.pvt.changeSet++ + "\n", req += this.options.batchChangeSetContentType + "\n", 
            isNullOrUndefined(arr[i]["@odata.etag"]) ? req += "\n" : (req += "If-Match: " + arr[i]["@odata.etag"] + "\n\n", 
            delete arr[i]["@odata.etag"]), req += stat.data(arr, i);
            return req;
        }, ODataAdaptor.prototype.processBatchResponse = function(data, query, xhr, request, changes) {
            if (xhr && xhr.getResponseHeader("Content-Type") && -1 !== xhr.getResponseHeader("Content-Type").indexOf("xml")) return query.isCountRequired ? {
                result: [],
                count: 0
            } : [];
            if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && "post" === request.type.toLowerCase()) {
                var guid = xhr.getResponseHeader("Content-Type"), cIdx = void 0, jsonObj = void 0, d = data + "";
                if (guid = guid.substring(guid.indexOf("=batchresponse") + 1), (d = d.split(guid)).length < 2) return {};
                d = d[1];
                var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);
                exVal && d.replace(exVal[0], "");
                for (var changeGuid = exVal ? exVal[1] : "", i = (d = d.split(changeGuid)).length; i > -1; i--) /\bContent-ID:/i.test(d[i]) && /\bHTTP.+201/.test(d[i]) && (cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10), 
                changes.addedRecords[cIdx] && (jsonObj = DataUtil.parse.parseJson(/^\{.+\}/m.exec(d[i])[0]), 
                extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj))));
                return changes;
            }
            return null;
        }, ODataAdaptor.prototype.compareAndRemove = function(data, original, key) {
            var _this = this;
            return isNullOrUndefined(original) ? data : (Object.keys(data).forEach(function(prop) {
                if (prop !== key && "@odata.etag" !== prop) if (DataUtil.isPlainObject(data[prop])) {
                    _this.compareAndRemove(data[prop], original[prop]);
                    0 === Object.keys(data[prop]).filter(function(data) {
                        return "@odata.etag" !== data;
                    }).length && delete data[prop];
                } else data[prop] === original[prop] ? delete data[prop] : data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf() && delete data[prop];
            }), data);
        }, ODataAdaptor;
    }(UrlAdaptor), ODataV4Adaptor = function(_super) {
        function ODataV4Adaptor(props) {
            var _this = _super.call(this, props) || this;
            return _this.options = extend({}, _this.options, {
                requestType: "get",
                accept: "application/json, text/javascript, */*; q=0.01",
                multipartAccept: "multipart/mixed",
                sortBy: "$orderby",
                select: "$select",
                skip: "$skip",
                take: "$top",
                count: "$count",
                search: "$search",
                where: "$filter",
                expand: "$expand",
                batch: "$batch",
                changeSet: "--changeset_",
                batchPre: "batch_",
                contentId: "Content-Id: ",
                batchContent: "Content-Type: multipart/mixed; boundary=",
                changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
                batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
                updateType: "PATCH",
                localTime: !1,
                apply: "$apply"
            }), getValue("getModulename", _this.getModulename()), extend(_this.options, props || {}), 
            _this;
        }
        return __extends$7(ODataV4Adaptor, _super), ODataV4Adaptor.prototype.getModulename = function() {
            return "ODataV4Adaptor";
        }, ODataV4Adaptor.prototype.onCount = function(e) {
            return !0 === e ? "true" : "";
        }, ODataV4Adaptor.prototype.onPredicate = function(predicate, query, requiresCast) {
            var returnValue = "", isDate = predicate.value instanceof Date;
            return returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast), 
            isDate && (returnValue = returnValue.replace(/datetime'(.*)'$/, "$1")), returnValue;
        }, ODataV4Adaptor.prototype.onEachSearch = function(e) {
            var search = this.pvt.searches || [];
            search.push(e.key), this.pvt.searches = search;
        }, ODataV4Adaptor.prototype.onSearch = function(e) {
            return this.pvt.searches.join(" OR ");
        }, ODataV4Adaptor.prototype.onExpand = function(e) {
            var _this = this, selected = {}, expanded = {}, expands = e.expands.slice(), exArr = [];
            return e.selects.filter(function(item) {
                return item.indexOf(".") > -1;
            }).forEach(function(select) {
                var splits = select.split(".");
                splits[0] in selected || (selected[splits[0]] = []), selected[splits[0]].push(splits[1]);
            }), Object.keys(selected).forEach(function(expand) {
                -1 === expands.indexOf(expand) && expands.push(expand);
            }), expands.forEach(function(expand) {
                expanded[expand] = expand in selected ? expand + "(" + _this.options.select + "=" + selected[expand].join(",") + ")" : expand;
            }), Object.keys(expanded).forEach(function(ex) {
                return exArr.push(expanded[ex]);
            }), exArr.join(",");
        }, ODataV4Adaptor.prototype.onDistinct = function(distinctFields) {
            return "groupby((" + distinctFields.map(function(field) {
                return ODataAdaptor.getField(field);
            }).join(",") + "))";
        }, ODataV4Adaptor.prototype.onSelect = function(e) {
            return _super.prototype.onSelect.call(this, e.filter(function(item) {
                return -1 === item.indexOf(".");
            }));
        }, ODataV4Adaptor.prototype.beforeSend = function(dm, request, settings) {
            "POST" !== settings.type && "PUT" !== settings.type && "PATCH" !== settings.type || request.setRequestHeader("Prefer", "return=representation"), 
            request.setRequestHeader("Accept", this.options.accept);
        }, ODataV4Adaptor.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
            var pvt = request && request.pvtData, emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);
            if (emptyAndBatch) return emptyAndBatch;
            var count = null;
            query && query.isCountRequired && "@odata.count" in data && (count = data["@odata.count"]), 
            data = isNullOrUndefined(data.value) ? data : data.value;
            var args = {};
            return args.count = count, args.result = data, this.getAggregateResult(pvt, data, args, null, query), 
            DataUtil.isNull(count) ? args.result : {
                result: args.result,
                count: count,
                aggregates: args.aggregates
            };
        }, ODataV4Adaptor;
    }(ODataAdaptor), WebApiAdaptor = function(_super) {
        function WebApiAdaptor() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$7(WebApiAdaptor, _super), WebApiAdaptor.prototype.insert = function(dm, data, tableName) {
            return {
                type: "POST",
                url: dm.dataSource.url,
                data: JSON.stringify(data)
            };
        }, WebApiAdaptor.prototype.remove = function(dm, keyField, value, tableName) {
            return {
                type: "DELETE",
                url: dm.dataSource.url + "/" + value,
                data: JSON.stringify(value)
            };
        }, WebApiAdaptor.prototype.update = function(dm, keyField, value, tableName) {
            return {
                type: "PUT",
                url: dm.dataSource.url,
                data: JSON.stringify(value)
            };
        }, WebApiAdaptor.prototype.beforeSend = function(dm, request, settings) {
            request.setRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01");
        }, WebApiAdaptor.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
            var pvt = request && request.pvtData, count = null, args = {};
            if (request && "post" !== request.type.toLowerCase()) {
                var versionCheck = xhr && request.getResponseHeader("DataServiceVersion"), version = versionCheck && parseInt(versionCheck, 10) || 2;
                query && query.isCountRequired && (DataUtil.isNull(data.Count) || (count = data.Count)), 
                version < 3 && data.Items && (data = data.Items), args.count = count, args.result = data, 
                this.getAggregateResult(pvt, data, args, null, query);
            }
            return args.result = args.result || data, DataUtil.isNull(count) ? args.result : {
                result: args.result,
                count: args.count,
                aggregates: args.aggregates
            };
        }, WebApiAdaptor;
    }(ODataAdaptor), WebMethodAdaptor = function(_super) {
        function WebMethodAdaptor() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$7(WebMethodAdaptor, _super), WebMethodAdaptor.prototype.processQuery = function(dm, query, hierarchyFilters) {
            var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters), data = DataUtil.parse.parseJson(obj.data), result = {};
            if (data.param) for (var i = 0; i < data.param.length; i++) {
                var param = data.param[i], key = Object.keys(param)[0];
                result[key] = param[key];
            }
            result.value = data;
            //addAntiForgeryToken(result);
            return {
                data: JSON.stringify(result),
                url: obj.url,
                pvtData: obj.pvtData,
                type: "POST",
                contentType: "application/json; charset=utf-8"
            };
        }, WebMethodAdaptor;
    }(UrlAdaptor), RemoteSaveAdaptor = function(_super) {
        function RemoteSaveAdaptor() {
            var _this = _super.call(this) || this;
            return setValue("beforeSend", UrlAdaptor.prototype.beforeSend, _this), _this;
        }
        return __extends$7(RemoteSaveAdaptor, _super), RemoteSaveAdaptor.prototype.insert = function(dm, data, tableName) {
            return this.updateType = "add", {
                url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: data,
                    table: tableName,
                    action: "insert"
                })
            };
        }, RemoteSaveAdaptor.prototype.remove = function(dm, keyField, value, tableName) {
            return _super.prototype.remove.call(this, dm, keyField, value), {
                type: "POST",
                url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    key: value,
                    keyColumn: keyField,
                    table: tableName,
                    action: "remove"
                })
            };
        }, RemoteSaveAdaptor.prototype.update = function(dm, keyField, value, tableName) {
            return this.updateType = "update", this.updateKey = keyField, {
                type: "POST",
                url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                data: JSON.stringify({
                    value: value,
                    action: "update",
                    keyColumn: keyField,
                    key: value[keyField],
                    table: tableName
                })
            };
        }, RemoteSaveAdaptor.prototype.processResponse = function(data, ds, query, xhr, request, changes, e) {
            var i;
            if ("add" === this.updateType && _super.prototype.insert.call(this, ds, data), "update" === this.updateType && _super.prototype.update.call(this, ds, this.updateKey, data), 
            data.added) for (i = 0; i < data.added.length; i++) _super.prototype.insert.call(this, ds, data.added[i]);
            if (data.changed) for (i = 0; i < data.changed.length; i++) _super.prototype.update.call(this, ds, e.key, data.changed[i]);
            if (data.deleted) for (i = 0; i < data.deleted.length; i++) _super.prototype.remove.call(this, ds, e.key, data.deleted[i]);
            return data;
        }, RemoteSaveAdaptor.prototype.batchRequest = function(dm, changes, e) {
            return {
                type: "POST",
                url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    changed: changes.changedRecords,
                    added: changes.addedRecords,
                    deleted: changes.deletedRecords,
                    action: "batch",
                    table: e.url,
                    key: e.key
                })
            };
        }, RemoteSaveAdaptor;
    }(JsonAdaptor), CacheAdaptor = function(_super) {
        function CacheAdaptor(adaptor, timeStamp, pageSize) {
            var _this = _super.call(this) || this;
            _this.isCrudAction = !1, _this.isInsertAction = !1, isNullOrUndefined(adaptor) || (_this.cacheAdaptor = adaptor), 
            _this.pageSize = pageSize, _this.guidId = DataUtil.getGuid("cacheAdaptor");
            window.localStorage.setItem(_this.guidId, JSON.stringify({
                keys: [],
                results: []
            }));
            var guid = _this.guidId;
            return isNullOrUndefined(timeStamp) || setInterval(function() {
                var data;
                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));
                for (var forDel = [], i = 0; i < data.results.length; i++) {
                    var currentTime = +new Date(), requestTime = +new Date(data.results[i].timeStamp);
                    data.results[i].timeStamp = currentTime - requestTime, currentTime - requestTime > timeStamp && forDel.push(i);
                }
                for (i = 0; i < forDel.length; i++) data.results.splice(forDel[i], 1), data.keys.splice(forDel[i], 1);
                window.localStorage.removeItem(guid), window.localStorage.setItem(guid, JSON.stringify(data));
            }, timeStamp), _this;
        }
        return __extends$7(CacheAdaptor, _super), CacheAdaptor.prototype.generateKey = function(url, query) {
            var queries = this.getQueryRequest(query), singles = Query.filterQueryLists(query.queries, [ "onSelect", "onPage", "onSkip", "onTake", "onRange" ]), key = url;
            "onPage" in singles && (key += singles.onPage.pageIndex), queries.sorts.forEach(function(obj) {
                key += obj.e.direction + obj.e.fieldName;
            }), queries.groups.forEach(function(obj) {
                key += obj.e.fieldName;
            }), queries.searches.forEach(function(obj) {
                key += obj.e.searchKey;
            });
            for (var filter = 0; filter < queries.filters.length; filter++) {
                var currentFilter = queries.filters[filter];
                if (currentFilter.e.isComplex) {
                    var newQuery = query.clone();
                    newQuery.queries = [];
                    for (var i = 0; i < currentFilter.e.predicates.length; i++) newQuery.queries.push({
                        fn: "onWhere",
                        e: currentFilter.e.predicates[i],
                        filter: query.queries.filter
                    });
                    key += currentFilter.e.condition + this.generateKey(url, newQuery);
                } else key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
            }
            return key;
        }, CacheAdaptor.prototype.processQuery = function(dm, query, hierarchyFilters) {
            var cachedItems, key = this.generateKey(dm.dataSource.url, query), data = (cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId))) ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
            return null == data || this.isCrudAction || this.isInsertAction ? (this.isCrudAction = null, 
            this.isInsertAction = null, this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0))) : data;
        }, CacheAdaptor.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
            if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && "post" === request.type.toLowerCase()) return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
            data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
            var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url, obj = {}, index = (obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId))).keys.indexOf(key);
            for (-1 !== index && (obj.results.splice(index, 1), obj.keys.splice(index, 1)), 
            obj.results[obj.keys.push(key) - 1] = {
                keys: key,
                result: data.result,
                timeStamp: new Date(),
                count: data.count
            }; obj.results.length > this.pageSize; ) obj.results.splice(0, 1), obj.keys.splice(0, 1);
            return window.localStorage.setItem(this.guidId, JSON.stringify(obj)), data;
        }, CacheAdaptor.prototype.beforeSend = function(dm, request, settings) {
            DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && "post" === settings.type.toLowerCase() && request.setRequestHeader("Accept", this.cacheAdaptor.options.multipartAccept), 
            dm.dataSource.crossDomain || request.setRequestHeader("Accept", this.cacheAdaptor.options.accept);
        }, CacheAdaptor.prototype.update = function(dm, keyField, value, tableName) {
            return this.isCrudAction = !0, this.cacheAdaptor.update(dm, keyField, value, tableName);
        }, CacheAdaptor.prototype.insert = function(dm, data, tableName) {
            return this.isInsertAction = !0, this.cacheAdaptor.insert(dm, data, tableName);
        }, CacheAdaptor.prototype.remove = function(dm, keyField, value, tableName) {
            return this.isCrudAction = !0, this.cacheAdaptor.remove(dm, keyField, value, tableName);
        }, CacheAdaptor.prototype.batchRequest = function(dm, changes, e) {
            return this.cacheAdaptor.batchRequest(dm, changes, e);
        }, CacheAdaptor;
    }(UrlAdaptor), DataManager = function() {
        function DataManager(dataSource, query, adaptor) {
            var _this = this;
            this.dateParse = !0, this.requests = [], dataSource || this.dataSource || (dataSource = []), 
            adaptor = adaptor || dataSource.adaptor;
            var data;
            return dataSource instanceof Array ? data = {
                json: dataSource,
                offline: !0
            } : "object" == typeof dataSource ? (dataSource.json || (dataSource.json = []), 
            data = {
                url: dataSource.url,
                insertUrl: dataSource.insertUrl,
                removeUrl: dataSource.removeUrl,
                updateUrl: dataSource.updateUrl,
                crudUrl: dataSource.crudUrl,
                batchUrl: dataSource.batchUrl,
                json: dataSource.json,
                headers: dataSource.headers,
                accept: dataSource.accept,
                data: dataSource.data,
                timeTillExpiration: dataSource.timeTillExpiration,
                cachingPageSize: dataSource.cachingPageSize,
                enableCaching: dataSource.enableCaching,
                requestType: dataSource.requestType,
                key: dataSource.key,
                crossDomain: dataSource.crossDomain,
                jsonp: dataSource.jsonp,
                dataType: dataSource.dataType,
                offline: void 0 !== dataSource.offline ? dataSource.offline : !(dataSource.adaptor instanceof RemoteSaveAdaptor) && !dataSource.url,
                requiresFormat: dataSource.requiresFormat
            }) : DataUtil.throwError("DataManager: Invalid arguments"), void 0 !== data.requiresFormat || DataUtil.isCors() || (data.requiresFormat = !!isNullOrUndefined(data.crossDomain) || data.crossDomain), 
            void 0 === data.dataType && (data.dataType = "json"), this.dataSource = data, this.defaultQuery = query, 
            data.url && data.offline && !data.json.length ? (this.isDataAvailable = !1, this.adaptor = adaptor || new ODataAdaptor(), 
            this.dataSource.offline = !1, this.ready = this.executeQuery(query || new Query()), 
            this.ready.then(function(e) {
                _this.dataSource.offline = !0, _this.isDataAvailable = !0, data.json = e.result, 
                _this.adaptor = new JsonAdaptor();
            })) : this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor(), !data.jsonp && this.adaptor instanceof ODataAdaptor && (data.jsonp = "callback"), 
            this.adaptor = adaptor || this.adaptor, data.enableCaching && (this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize)), 
            this;
        }
        return DataManager.prototype.setDefaultQuery = function(query) {
            return this.defaultQuery = query, this;
        }, DataManager.prototype.executeLocal = function(query) {
            this.defaultQuery || query instanceof Query || DataUtil.throwError("DataManager - executeLocal() : A query is required to execute"), 
            this.dataSource.json || DataUtil.throwError("DataManager - executeLocal() : Json data is required to execute"), 
            query = query || this.defaultQuery;
            var result = this.adaptor.processQuery(this, query);
            if (query.subQuery) {
                var from = query.subQuery.fromTable, lookup = query.subQuery.lookups, res = query.isCountRequired ? result.result : result;
                lookup && lookup instanceof Array && DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
                for (var j = 0; j < res.length; j++) res[j][from] instanceof Array && (res[j] = extend({}, {}, res[j]), 
                res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query));
            }
            return this.adaptor.processResponse(result, this, query);
        }, DataManager.prototype.executeQuery = function(query, done, fail, always) {
            var _this = this;
            "function" == typeof query && (always = fail, fail = done, done = query, query = null), 
            query || (query = this.defaultQuery), query instanceof Query || DataUtil.throwError("DataManager - executeQuery() : A query is required to execute");
            var deffered = new Deferred(), args = {
                query: query
            };
            if (this.dataSource.offline || void 0 === this.dataSource.url || "" === this.dataSource.url) DataManager.nextTick(function() {
                var res = _this.executeLocal(query);
                args = DataManager.getDeferedArgs(query, res, args), deffered.resolve(args);
            }); else {
                var result = this.adaptor.processQuery(this, query);
                this.makeRequest(result, deffered, args, query);
            }
            return (done || fail) && deffered.promise.then(done, fail), always && deffered.promise.then(always, always), 
            deffered.promise;
        }, DataManager.getDeferedArgs = function(query, result, args) {
            return query.isCountRequired ? (args.result = result.result, args.count = result.count, 
            args.aggregates = result.aggregates) : args.result = result, args;
        }, DataManager.nextTick = function(fn) {
            (window.setImmediate || window.setTimeout)(fn, 0);
        }, DataManager.prototype.extendRequest = function(url, fnSuccess, fnFail) {
            return extend({}, {
                type: "GET",
                dataType: this.dataSource.dataType,
                crossDomain: this.dataSource.crossDomain,
                jsonp: this.dataSource.jsonp,
                cache: !0,
                processData: !1,
                onSuccess: fnSuccess,
                onFailure: fnFail
            }, url);
        }, DataManager.prototype.makeRequest = function(url, deffered, args, query) {
            var _this = this, isSelector = !!query.subQuerySelector, fnFail = function(e) {
                args.error = e, deffered.reject(args);
            }, process = function(data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
                args.xhr = xhr, args.count = count ? parseInt(count.toString(), 10) : 0, args.result = data, 
                args.request = request, args.aggregates = aggregates, args.actual = actual, args.virtualSelectRecords = virtualSelectRecords, 
                deffered.resolve(args);
            }, fnQueryChild = function(data, selector) {
                var subDeffer = new Deferred(), childArgs = {
                    parent: args
                };
                query.subQuery.isChild = !0;
                var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector), childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);
                return isSelector || subDeffer.then(function(subData) {
                    data && (DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key), 
                    process(data, subData.count, subData.xhr));
                }, fnFail), childReq;
            }, req = this.extendRequest(url, function(data, request) {
                -1 === request.httpRequest.getResponseHeader("Content-Type").indexOf("xml") && _this.dateParse && (data = DataUtil.parse.parseJson(data));
                var result = _this.adaptor.processResponse(data, _this, query, request.httpRequest, request), count = 0, aggregates = null, virtualRecords = data.virtualSelectRecords;
                query.isCountRequired && (count = result.count, aggregates = result.aggregates, 
                result = result.result), query.subQuery ? isSelector || fnQueryChild(result, request) : process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);
            }, fnFail), ajax = new Ajax(req);
            if (ajax.beforeSend = function() {
                _this.beforeSend(ajax.httpRequest, ajax);
            }, (req = ajax.send()).catch(function(e) {
                return !0;
            }), this.requests.push(ajax), isSelector) {
                var res = query.subQuerySelector.call(this, {
                    query: query.subQuery,
                    parent: query
                });
                res && res.length ? Promise.all([ req, fnQueryChild(null, res) ]).then(function() {
                    for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var result = args[0], pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].httpRequest, _this.requests[0]), count = 0;
                    query.isCountRequired && (count = pResult.count, pResult = pResult.result);
                    var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].httpRequest, _this.requests[1]);
                    count = 0, query.subQuery.isCountRequired && (count = cResult.count, cResult = cResult.result), 
                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key), 
                    isSelector = !1, process(pResult, count, _this.requests[0].httpRequest);
                }) : isSelector = !1;
            }
            return req;
        }, DataManager.prototype.beforeSend = function(request, settings) {
            this.adaptor.beforeSend(this, request, settings);
            for (var props, headers = this.dataSource.headers, i = 0; headers && i < headers.length; i++) {
                props = [];
                for (var _i = 0, keys_1 = Object.keys(headers[i]); _i < keys_1.length; _i++) {
                    var prop = keys_1[_i];
                    props.push(prop), request.setRequestHeader(prop, headers[i][prop]);
                }
            }
        }, DataManager.prototype.saveChanges = function(changes, key, tableName, query, original) {
            var _this = this;
            tableName instanceof Query && (query = tableName, tableName = null);
            var args = {
                url: tableName,
                key: key || this.dataSource.key
            }, req = this.adaptor.batchRequest(this, changes, args, query, original);
            if (this.dataSource.offline) return req;
            var deff = new Deferred(), ajax = new Ajax(req);
            return ajax.beforeSend = function() {
                _this.beforeSend(ajax.httpRequest, ajax);
            }, ajax.onSuccess = function(data, request) {
                deff.resolve(_this.adaptor.processResponse(data, _this, null, request.httpRequest, request, changes, args));
            }, ajax.onFailure = function(e) {
                deff.reject([ {
                    error: e
                } ]);
            }, ajax.send().catch(function(e) {
                return !0;
            }), deff.promise;
        }, DataManager.prototype.insert = function(data, tableName, query, position) {
            tableName instanceof Query && (query = tableName, tableName = null);
            var req = this.adaptor.insert(this, data, tableName, query, position);
            return this.dataSource.offline ? req : this.doAjaxRequest(req);
        }, DataManager.prototype.remove = function(keyField, value, tableName, query) {
            "object" == typeof value && (value = value[keyField]), tableName instanceof Query && (query = tableName, 
            tableName = null);
            var res = this.adaptor.remove(this, keyField, value, tableName, query);
            return this.dataSource.offline ? res : this.doAjaxRequest(res);
        }, DataManager.prototype.update = function(keyField, value, tableName, query, original) {
            tableName instanceof Query && (query = tableName, tableName = null);
            var res = this.adaptor.update(this, keyField, value, tableName, query, original);
            return this.dataSource.offline ? res : this.doAjaxRequest(res);
        }, DataManager.prototype.doAjaxRequest = function(res) {
            var _this = this, defer = new Deferred();
            res = extend({}, {
                type: "POST",
                contentType: "application/json; charset=utf-8",
                processData: !1
            }, res);
            var ajax = new Ajax(res);
            return ajax.beforeSend = function() {
                _this.beforeSend(ajax.httpRequest, ajax);
            }, ajax.onSuccess = function(record, request) {
                try {
                    DataUtil.parse.parseJson(record);
                } catch (e) {
                    record = [];
                }
                record = _this.adaptor.processResponse(DataUtil.parse.parseJson(record), _this, null, request.httpRequest, request), 
                defer.resolve(record);
            }, ajax.onFailure = function(e) {
                defer.reject([ {
                    error: e
                } ]);
            }, ajax.send().catch(function(e) {
                return !0;
            }), defer.promise;
        }, DataManager;
    }(), Deferred = function() {
        return function() {
            var _this = this;
            this.promise = new Promise(function(resolve, reject) {
                _this.resolve = resolve, _this.reject = reject;
            }), this.then = this.promise.then.bind(this.promise), this.catch = this.promise.catch.bind(this.promise);
        };
    }(), _data = Object.freeze({
        DataManager: DataManager,
        Deferred: Deferred,
        Query: Query,
        Predicate: Predicate$1,
        Adaptor: Adaptor,
        JsonAdaptor: JsonAdaptor,
        UrlAdaptor: UrlAdaptor,
        ODataAdaptor: ODataAdaptor,
        ODataV4Adaptor: ODataV4Adaptor,
        WebApiAdaptor: WebApiAdaptor,
        WebMethodAdaptor: WebMethodAdaptor,
        RemoteSaveAdaptor: RemoteSaveAdaptor,
        CacheAdaptor: CacheAdaptor,
        DataUtil: DataUtil
    }), fixedParent = !1, __extends$8 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$7 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, PositionData = function(_super) {
        function PositionData() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$8(PositionData, _super), __decorate$7([ Property("left") ], PositionData.prototype, "X", void 0), 
        __decorate$7([ Property("top") ], PositionData.prototype, "Y", void 0), PositionData;
    }(ChildProperty), CLASSNAMES_ROOT = "e-popup", CLASSNAMES_RTL = "e-rtl", CLASSNAMES_OPEN = "e-popup-open", CLASSNAMES_CLOSE = "e-popup-close", Popup = function(_super) {
        function Popup(element, options) {
            return _super.call(this, options, element) || this;
        }
        return __extends$8(Popup, _super), Popup.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "width":
                    setStyleAttribute(this.element, {
                        width: formatUnit(newProp.width)
                    });
                    break;

                  case "height":
                    setStyleAttribute(this.element, {
                        height: formatUnit(newProp.height)
                    });
                    break;

                  case "zIndex":
                    setStyleAttribute(this.element, {
                        zIndex: newProp.zIndex
                    });
                    break;

                  case "enableRtl":
                    this.setEnableRtl();
                    break;

                  case "position":
                  case "relateTo":
                    this.refreshPosition();
                    break;

                  case "offsetX":
                    var x = newProp.offsetX - oldProp.offsetX;
                    this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + "px";
                    break;

                  case "offsetY":
                    var y = newProp.offsetY - oldProp.offsetY;
                    this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + "px";
                    break;

                  case "content":
                    this.setContent();
                    break;

                  case "actionOnScroll":
                    "none" !== newProp.actionOnScroll ? this.wireScrollEvents() : this.unwireScrollEvents();
                }
            }
        }, Popup.prototype.getModuleName = function() {
            return "popup";
        }, Popup.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, Popup.prototype.destroy = function() {
            this.element.classList.remove(CLASSNAMES_ROOT, CLASSNAMES_RTL), this.unwireEvents(), 
            _super.prototype.destroy.call(this);
        }, Popup.prototype.render = function() {
            this.element.classList.add(CLASSNAMES_ROOT);
            var styles = {};
            1e3 !== this.zIndex && (styles.zIndex = this.zIndex), "auto" !== this.width && (styles.width = formatUnit(this.width)), 
            "auto" !== this.height && (styles.height = formatUnit(this.height)), setStyleAttribute(this.element, styles), 
            this.fixedParent = !1, this.setEnableRtl(), this.setContent(), this.wireEvents();
        }, Popup.prototype.wireEvents = function() {
            Browser.isDevice && EventHandler.add(window, "orientationchange", this.orientationOnChange, this), 
            "none" !== this.actionOnScroll && this.wireScrollEvents();
        }, Popup.prototype.wireScrollEvents = function() {
            if (this.getRelateToElement()) for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
                var parent_1 = _a[_i];
                EventHandler.add(parent_1, "scroll", this.scrollRefresh, this);
            }
        }, Popup.prototype.unwireEvents = function() {
            Browser.isDevice && EventHandler.remove(window, "orientationchange", this.orientationOnChange), 
            "none" !== this.actionOnScroll && this.unwireScrollEvents();
        }, Popup.prototype.unwireScrollEvents = function() {
            if (this.getRelateToElement()) for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
                var parent_2 = _a[_i];
                EventHandler.remove(parent_2, "scroll", this.scrollRefresh);
            }
        }, Popup.prototype.getRelateToElement = function() {
            var relateToElement = "" === this.relateTo || isNullOrUndefined(this.relateTo) ? document.body : this.relateTo;
            return this.setProperties({
                relateTo: relateToElement
            }, !0), "string" == typeof this.relateTo ? document.querySelector(this.relateTo) : this.relateTo;
        }, Popup.prototype.scrollRefresh = function(e) {
            if ("reposition" === this.actionOnScroll ? this.element.offsetParent === e.target || this.element.offsetParent && "BODY" === this.element.offsetParent.tagName && null == e.target.parentElement || this.refreshPosition() : "hide" === this.actionOnScroll && this.hide(), 
            "none" !== this.actionOnScroll && this.getRelateToElement()) {
                var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);
                targetVisible || this.targetInvisibleStatus ? targetVisible && (this.targetInvisibleStatus = !1) : (this.trigger("targetExitViewport"), 
                this.targetInvisibleStatus = !0);
            }
        }, Popup.prototype.isElementOnViewport = function(relateToElement, scrollElement) {
            for (var scrollParents = this.getScrollableParent(relateToElement), parent_3 = 0; parent_3 < scrollParents.length; parent_3++) if (!this.isElementVisible(relateToElement, scrollParents[parent_3])) return !1;
            return !0;
        }, Popup.prototype.isElementVisible = function(relateToElement, scrollElement) {
            var rect = this.checkGetBoundingClientRect(relateToElement);
            if (!rect.height || !rect.width) return !1;
            if (isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {
                var win = window, windowView_top = win.scrollY, windowView_left = win.scrollX, windowView_right = win.scrollX + win.outerWidth, windowView_bottom = win.scrollY + win.outerHeight, off = calculatePosition(relateToElement), ele_top = off.top, ele_left = off.left, ele_right = off.left + rect.width, ele_bottom = off.top + rect.height;
                return windowView_bottom - ele_top > 0 && windowView_right - ele_left > 0 && ele_right - windowView_left > 0 && ele_bottom - windowView_top > 0;
            }
            var parent_4 = scrollElement.getBoundingClientRect();
            return !(rect.bottom < parent_4.top || rect.bottom > parent_4.bottom || rect.right > parent_4.right || rect.left < parent_4.left);
        }, Popup.prototype.preRender = function() {}, Popup.prototype.setEnableRtl = function() {
            this.reposition(), this.enableRtl ? this.element.classList.add(CLASSNAMES_RTL) : this.element.classList.remove(CLASSNAMES_RTL);
        }, Popup.prototype.setContent = function() {
            isNullOrUndefined(this.content) || (this.element.innerHTML = "", "string" == typeof this.content ? this.element.textContent = this.content : this.element.appendChild(this.content));
        }, Popup.prototype.orientationOnChange = function() {
            var _this = this;
            setTimeout(function() {
                _this.refreshPosition();
            }, 200);
        }, Popup.prototype.refreshPosition = function(target, collision) {
            isNullOrUndefined(target) || this.checkFixedParent(target), this.reposition(), collision || this.checkCollision();
        }, Popup.prototype.reposition = function() {
            var pos, position, relateToElement = this.getRelateToElement();
            if ("number" == typeof this.position.X && "number" == typeof this.position.Y) pos = {
                left: this.position.X,
                top: this.position.Y
            }; else if ("string" == typeof this.position.X && "number" == typeof this.position.Y || "number" == typeof this.position.X && "string" == typeof this.position.Y) {
                var display = this.element.style.display, parentDisplay = void 0;
                this.element.style.display = "block", this.element.classList.contains("e-dlg-modal") && (parentDisplay = this.element.parentElement.style.display, 
                this.element.parentElement.style.display = "block"), position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY), 
                pos = "string" == typeof this.position.X ? {
                    left: position.left,
                    top: this.position.Y
                } : {
                    left: this.position.X,
                    top: position.top
                }, this.element.style.display = display, this.element.classList.contains("e-dlg-modal") && (this.element.parentElement.style.display = parentDisplay);
            } else if (relateToElement) {
                display = this.element.style.display;
                this.element.style.display = "block", pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY), 
                this.element.style.display = display;
            } else pos = {
                left: 0,
                top: 0
            };
            isNullOrUndefined(pos) || (this.element.style.left = pos.left + "px", this.element.style.top = pos.top + "px");
        }, Popup.prototype.checkGetBoundingClientRect = function(ele) {
            try {
                return ele.getBoundingClientRect();
            } catch (error) {
                return null;
            }
        }, Popup.prototype.getAnchorPosition = function(anchorEle, ele, position, offsetX, offsetY) {
            var eleRect = this.checkGetBoundingClientRect(ele), anchorRect = this.checkGetBoundingClientRect(anchorEle);
            if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) return null;
            var anchor = anchorEle, anchorPos = {
                left: 0,
                top: 0
            };
            switch (ele.offsetParent && "BODY" === ele.offsetParent.tagName && "BODY" === anchorEle.tagName ? anchorPos = calculatePosition(anchorEle) : (ele.classList.contains("e-dlg-modal") && "BODY" !== anchor.tagName && (ele = ele.parentElement), 
            anchorPos = calculateRelativeBasedPosition(anchor, ele)), position.X) {
              default:
              case "left":
                break;

              case "center":
                ele.classList.contains("e-dlg-modal") && "BODY" === anchor.tagName && "container" === this.targetType ? anchorPos.left += window.innerWidth / 2 - eleRect.width / 2 : "container" === this.targetType ? anchorPos.left += anchorRect.width / 2 - eleRect.width / 2 : anchorPos.left += anchorRect.width / 2;
                break;

              case "right":
                ele.classList.contains("e-dlg-modal") && "BODY" === anchor.tagName && "container" === this.targetType ? anchorPos.left += window.innerWidth - eleRect.width : "container" === this.targetType ? anchorPos.left += anchorRect.width - eleRect.width : anchorPos.left += anchorRect.width;
            }
            switch (position.Y) {
              default:
              case "top":
                break;

              case "center":
                ele.classList.contains("e-dlg-modal") && "BODY" === anchor.tagName && "container" === this.targetType ? anchorPos.top += window.innerHeight / 2 - eleRect.height / 2 : "container" === this.targetType ? anchorPos.top += anchorRect.height / 2 - eleRect.height / 2 : anchorPos.top += anchorRect.height / 2;
                break;

              case "bottom":
                ele.classList.contains("e-dlg-modal") && "BODY" === anchor.tagName && "container" === this.targetType ? anchorPos.top += window.innerHeight - eleRect.height : "container" === this.targetType ? anchorPos.top += anchorRect.height - eleRect.height : anchorPos.top += anchorRect.height;
            }
            return anchorPos.left += offsetX, anchorPos.top += offsetY, anchorPos;
        }, Popup.prototype.callFlip = function(param) {
            var relateToElement = this.getRelateToElement();
            flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
        }, Popup.prototype.callFit = function(param) {
            if (0 !== isCollide(this.element, this.viewPortElement).length) if (isNullOrUndefined(this.viewPortElement)) {
                var data = fit(this.element, this.viewPortElement, param);
                this.element.style.left = data.left + "px", this.element.style.top = data.top + "px";
            } else {
                var elementRect = this.checkGetBoundingClientRect(this.element), viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);
                if (isNullOrUndefined(elementRect) || isNullOrUndefined(viewPortRect)) return null;
                param && !0 === param.Y && (viewPortRect.top > elementRect.top ? this.element.style.top = "0px" : viewPortRect.bottom < elementRect.bottom && (this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + "px")), 
                param && !0 === param.X && (viewPortRect.right < elementRect.right ? this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + "px" : viewPortRect.left > elementRect.left && (this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + "px"));
            }
        }, Popup.prototype.checkCollision = function() {
            var horz = this.collision.X, vert = this.collision.Y;
            "none" === horz && "none" === vert || ("flip" === horz && "flip" === vert ? this.callFlip({
                X: !0,
                Y: !0
            }) : "fit" === horz && "fit" === vert ? this.callFit({
                X: !0,
                Y: !0
            }) : ("flip" === horz ? this.callFlip({
                X: !0,
                Y: !1
            }) : "flip" === vert && this.callFlip({
                Y: !0,
                X: !1
            }), "fit" === horz ? this.callFit({
                X: !0,
                Y: !1
            }) : "fit" === vert && this.callFit({
                X: !1,
                Y: !0
            })));
        }, Popup.prototype.show = function(animationOptions, relativeElement) {
            var _this = this;
            if (1e3 === this.zIndex || !isNullOrUndefined(relativeElement)) {
                var zIndexElement = isNullOrUndefined(relativeElement) ? this.element : relativeElement;
                this.zIndex = getZindexPartial(zIndexElement), setStyleAttribute(this.element, {
                    zIndex: this.zIndex
                });
            }
            animationOptions = isNullOrUndefined(animationOptions) || "object" != typeof animationOptions ? this.showAnimation : animationOptions, 
            "none" === this.collision.X && "none" === this.collision.Y || (removeClass([ this.element ], CLASSNAMES_CLOSE), 
            addClass([ this.element ], CLASSNAMES_OPEN), this.checkCollision(), removeClass([ this.element ], CLASSNAMES_OPEN), 
            addClass([ this.element ], CLASSNAMES_CLOSE)), isNullOrUndefined(animationOptions) ? (removeClass([ this.element ], CLASSNAMES_CLOSE), 
            addClass([ this.element ], CLASSNAMES_OPEN), this.trigger("open")) : (animationOptions.begin = function() {
                _this.isDestroyed || (removeClass([ _this.element ], CLASSNAMES_CLOSE), addClass([ _this.element ], CLASSNAMES_OPEN));
            }, animationOptions.end = function() {
                _this.isDestroyed || _this.trigger("open");
            }, new Animation(animationOptions).animate(this.element));
        }, Popup.prototype.hide = function(animationOptions) {
            var _this = this;
            isNullOrUndefined(animationOptions = isNullOrUndefined(animationOptions) || "object" != typeof animationOptions ? this.hideAnimation : animationOptions) ? (removeClass([ this.element ], CLASSNAMES_OPEN), 
            addClass([ this.element ], CLASSNAMES_CLOSE), this.trigger("close")) : (animationOptions.end = function() {
                _this.isDestroyed || (removeClass([ _this.element ], CLASSNAMES_OPEN), addClass([ _this.element ], CLASSNAMES_CLOSE), 
                _this.trigger("close"));
            }, new Animation(animationOptions).animate(this.element));
        }, Popup.prototype.getScrollableParent = function(element) {
            return this.checkFixedParent(element), getScrollableParent(element, this.fixedParent);
        }, Popup.prototype.checkFixedParent = function(element) {
            for (var parent = element.parentElement; parent && "HTML" !== parent.tagName; ) {
                var parentStyle = getComputedStyle(parent);
                "fixed" === parentStyle.position && this.element.offsetParent && "BODY" === this.element.offsetParent.tagName && (this.element.style.position = "fixed", 
                this.fixedParent = !0), parent = parent.parentElement, isNullOrUndefined(this.element.offsetParent) && "fixed" === parentStyle.position && "fixed" === this.element.style.position && (this.fixedParent = !0);
            }
        }, __decorate$7([ Property("auto") ], Popup.prototype, "height", void 0), __decorate$7([ Property("auto") ], Popup.prototype, "width", void 0), 
        __decorate$7([ Property(null) ], Popup.prototype, "content", void 0), __decorate$7([ Property("container") ], Popup.prototype, "targetType", void 0), 
        __decorate$7([ Property(null) ], Popup.prototype, "viewPortElement", void 0), __decorate$7([ Property({
            X: "none",
            Y: "none"
        }) ], Popup.prototype, "collision", void 0), __decorate$7([ Property("") ], Popup.prototype, "relateTo", void 0), 
        __decorate$7([ Complex({}, PositionData) ], Popup.prototype, "position", void 0), 
        __decorate$7([ Property(0) ], Popup.prototype, "offsetX", void 0), __decorate$7([ Property(0) ], Popup.prototype, "offsetY", void 0), 
        __decorate$7([ Property(1e3) ], Popup.prototype, "zIndex", void 0), __decorate$7([ Property(!1) ], Popup.prototype, "enableRtl", void 0), 
        __decorate$7([ Property("reposition") ], Popup.prototype, "actionOnScroll", void 0), 
        __decorate$7([ Property(null) ], Popup.prototype, "showAnimation", void 0), __decorate$7([ Property(null) ], Popup.prototype, "hideAnimation", void 0), 
        __decorate$7([ Event() ], Popup.prototype, "open", void 0), __decorate$7([ Event() ], Popup.prototype, "close", void 0), 
        __decorate$7([ Event() ], Popup.prototype, "targetExitViewport", void 0), Popup = __decorate$7([ NotifyPropertyChanges ], Popup);
    }(Component), __extends$10 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$9 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, cssClassName_RTL = "e-rtl", cssClassName_BUTTON = "e-btn", cssClassName_PRIMARY = "e-primary", cssClassName_ICONBTN = "e-icon-btn", Button = function(_super) {
        function Button(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$10(Button, _super), Button.prototype.preRender = function() {}, 
        Button.prototype.render = function() {
            this.initialize();
        }, Button.prototype.initialize = function() {
            this.cssClass && addClass([ this.element ], this.cssClass.split(" ")), this.isPrimary && this.element.classList.add(cssClassName_PRIMARY), 
            this.content && (this.element.innerHTML = this.content), this.setIconCss(), this.enableRtl && this.element.classList.add(cssClassName_RTL), 
            this.disabled ? this.controlStatus(this.disabled) : this.wireEvents(), this.removeRippleEffect = rippleEffect(this.element, {
                selector: "." + cssClassName_BUTTON
            });
        }, Button.prototype.controlStatus = function(disabled) {
            this.element.disabled = disabled;
        }, Button.prototype.setIconCss = function() {
            if (this.iconCss) {
                var span = this.createElement("span", {
                    className: "e-btn-icon " + this.iconCss
                });
                this.element.textContent.trim() ? (span.classList.add("e-icon-" + this.iconPosition.toLowerCase()), 
                "Top" !== this.iconPosition && "Bottom" !== this.iconPosition || this.element.classList.add("e-" + this.iconPosition.toLowerCase() + "-icon-btn")) : this.element.classList.add(cssClassName_ICONBTN);
                var node = this.element.childNodes[0];
                !node || "Left" !== this.iconPosition && "Top" !== this.iconPosition ? this.element.appendChild(span) : this.element.insertBefore(span, node);
            }
        }, Button.prototype.wireEvents = function() {
            this.isToggle && EventHandler.add(this.element, "click", this.btnClickHandler, this);
        }, Button.prototype.unWireEvents = function() {
            this.isToggle && EventHandler.remove(this.element, "click", this.btnClickHandler);
        }, Button.prototype.btnClickHandler = function() {
            this.element.classList.contains("e-active") ? this.element.classList.remove("e-active") : this.element.classList.add("e-active");
        }, Button.prototype.destroy = function() {
            var span, classList = [ cssClassName_PRIMARY, cssClassName_RTL, cssClassName_ICONBTN, "e-success", "e-info", "e-danger", "e-warning", "e-flat", "e-outline", "e-small", "e-bigger", "e-active", "e-round", "e-top-icon-btn", "e-bottom-icon-btn" ];
            this.cssClass && (classList = classList.concat(this.cssClass.split(" "))), _super.prototype.destroy.call(this), 
            removeClass([ this.element ], classList), this.element.getAttribute("class") || this.element.removeAttribute("class"), 
            this.disabled && this.element.removeAttribute("disabled"), this.content && (this.element.innerHTML = this.element.innerHTML.replace(this.content, "")), 
            (span = this.element.querySelector("span.e-btn-icon")) && detach(span), this.unWireEvents(), 
            this.removeRippleEffect();
        }, Button.prototype.getModuleName = function() {
            return "btn";
        }, Button.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, Button.Inject = function() {}, Button.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "isPrimary":
                    newProp.isPrimary ? this.element.classList.add(cssClassName_PRIMARY) : this.element.classList.remove(cssClassName_PRIMARY);
                    break;

                  case "disabled":
                    this.controlStatus(newProp.disabled), this.unWireEvents();
                    break;

                  case "iconCss":
                    var span = this.element.querySelector("span.e-btn-icon");
                    span ? (span.className = "e-btn-icon " + newProp.iconCss, this.element.textContent.trim() && ("Left" === this.iconPosition ? span.classList.add("e-icon-left") : span.classList.add("e-icon-right"))) : this.setIconCss();
                    break;

                  case "iconPosition":
                    removeClass([ this.element ], [ "e-top-icon-btn", "e-bottom-icon-btn" ]), (span = this.element.querySelector("span.e-btn-icon")) && detach(span), 
                    this.setIconCss();
                    break;

                  case "cssClass":
                    oldProp.cssClass && removeClass([ this.element ], oldProp.cssClass.split(" ")), 
                    newProp.cssClass && addClass([ this.element ], newProp.cssClass.split(" "));
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? this.element.classList.add(cssClassName_RTL) : this.element.classList.remove(cssClassName_RTL);
                    break;

                  case "content":
                    getTextNode(this.element) || this.element.classList.remove(cssClassName_ICONBTN), 
                    this.element.innerHTML = newProp.content, this.setIconCss();
                    break;

                  case "isToggle":
                    newProp.isToggle ? EventHandler.add(this.element, "click", this.btnClickHandler, this) : (EventHandler.remove(this.element, "click", this.btnClickHandler), 
                    removeClass([ this.element ], [ "e-active" ]));
                }
            }
        }, __decorate$9([ Property("Left") ], Button.prototype, "iconPosition", void 0), 
        __decorate$9([ Property("") ], Button.prototype, "iconCss", void 0), __decorate$9([ Property(!1) ], Button.prototype, "disabled", void 0), 
        __decorate$9([ Property(!1) ], Button.prototype, "isPrimary", void 0), __decorate$9([ Property("") ], Button.prototype, "cssClass", void 0), 
        __decorate$9([ Property("") ], Button.prototype, "content", void 0), __decorate$9([ Property(!1) ], Button.prototype, "isToggle", void 0), 
        __decorate$9([ Property() ], Button.prototype, "locale", void 0), __decorate$9([ Event() ], Button.prototype, "created", void 0), 
        Button = __decorate$9([ NotifyPropertyChanges ], Button);
    }(Component), __extends$11 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$10 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, RIPPLE = "e-ripple-container", WRAPPER = "e-checkbox-wrapper", CheckBox = function(_super) {
        function CheckBox(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.isKeyPressed = !1, _this;
        }
        return __extends$11(CheckBox, _super), CheckBox.prototype.changeState = function(state) {
            var ariaState, rippleSpan, frameSpan = this.getWrapper().getElementsByClassName("e-frame")[0];
            isRippleEnabled && (rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0]), 
            "check" === state ? (frameSpan.classList.remove("e-stop"), frameSpan.classList.add("e-check"), 
            rippleSpan && (rippleSpan.classList.remove("e-ripple-stop"), rippleSpan.classList.add("e-ripple-check")), 
            ariaState = "true", this.element.checked = !0) : "uncheck" === state ? (removeClass([ frameSpan ], [ "e-check", "e-stop" ]), 
            rippleSpan && removeClass([ rippleSpan ], [ "e-ripple-check", "e-ripple-stop" ]), 
            ariaState = "false", this.element.checked = !1) : (frameSpan.classList.remove("e-check"), 
            frameSpan.classList.add("e-stop"), rippleSpan && (rippleSpan.classList.remove("e-ripple-check"), 
            rippleSpan.classList.add("e-ripple-stop")), ariaState = "mixed", this.element.indeterminate = !0), 
            this.getWrapper().setAttribute("aria-checked", ariaState);
        }, CheckBox.prototype.clickHandler = function(event) {
            this.focusOutHandler(), this.indeterminate ? (this.changeState(this.checked ? "check" : "uncheck"), 
            this.indeterminate = !1, this.element.indeterminate = !1) : this.checked ? (this.changeState("uncheck"), 
            this.checked = !1) : (this.changeState("check"), this.checked = !0);
            var changeEventArgs = {
                checked: this.element.checked,
                event: event
            };
            this.trigger("change", changeEventArgs);
        }, CheckBox.prototype.destroy = function() {
            var _this = this, wrapper = this.getWrapper();
            _super.prototype.destroy.call(this), this.disabled || this.unWireEvents(), "INPUT" === this.tagName ? (wrapper.parentNode.insertBefore(this.element, wrapper), 
            detach(wrapper), this.element.checked = !1, this.indeterminate && (this.element.indeterminate = !1), 
            [ "name", "value", "disabled" ].forEach(function(key) {
                _this.element.removeAttribute(key);
            })) : ([ "role", "aria-checked", "class" ].forEach(function(key) {
                wrapper.removeAttribute(key);
            }), wrapper.innerHTML = "");
        }, CheckBox.prototype.focusHandler = function() {
            this.isKeyPressed && this.getWrapper().classList.add("e-focus");
        }, CheckBox.prototype.focusOutHandler = function() {
            this.getWrapper().classList.remove("e-focus");
        }, CheckBox.prototype.getModuleName = function() {
            return "checkbox";
        }, CheckBox.prototype.getPersistData = function() {
            return this.addOnPersist([ "checked", "indeterminate" ]);
        }, CheckBox.prototype.getWrapper = function() {
            return this.element.parentElement.parentElement;
        }, CheckBox.prototype.initialize = function() {
            this.name && this.element.setAttribute("name", this.name), this.value && this.element.setAttribute("value", this.value), 
            this.checked && this.changeState("check"), this.indeterminate && this.changeState(), 
            this.disabled && this.setDisabled();
        }, CheckBox.prototype.initWrapper = function() {
            var wrapper = this.element.parentElement;
            wrapper.classList.contains(WRAPPER) || (wrapper = this.createElement("div", {
                className: WRAPPER,
                attrs: {
                    role: "checkbox",
                    "aria-checked": "false"
                }
            }), this.element.parentNode.insertBefore(wrapper, this.element));
            var label = this.createElement("label", {
                attrs: {
                    for: this.element.id
                }
            }), frameSpan = this.createElement("span", {
                className: "e-icons e-frame"
            });
            if (this.enableRtl && wrapper.classList.add("e-rtl"), this.cssClass && addClass([ wrapper ], this.cssClass.split(" ")), 
            wrapper.appendChild(label), label.appendChild(this.element), label.appendChild(frameSpan), 
            isRippleEnabled) {
                var rippleSpan = this.createElement("span", {
                    className: RIPPLE
                });
                "Before" === this.labelPosition ? label.appendChild(rippleSpan) : label.insertBefore(rippleSpan, frameSpan), 
                rippleEffect(rippleSpan, {
                    duration: 400,
                    isCenterRipple: !0
                });
            }
            this.label && this.setText(this.label);
        }, CheckBox.prototype.keyDownHandler = function() {
            this.isKeyPressed = !0;
        }, CheckBox.prototype.labelMouseHandler = function(e) {
            rippleMouseHandler(e, this.getWrapper().getElementsByClassName(RIPPLE)[0]);
        }, CheckBox.prototype.mouseDownHandler = function() {
            this.isKeyPressed = !1;
        }, CheckBox.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var wrapper = this.getWrapper(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "checked":
                    this.indeterminate = !1, this.element.indeterminate = !1, this.changeState(newProp.checked ? "check" : "uncheck");
                    break;

                  case "indeterminate":
                    newProp.indeterminate ? this.changeState() : (this.element.indeterminate = !1, this.changeState(this.checked ? "check" : "uncheck"));
                    break;

                  case "disabled":
                    newProp.disabled ? (this.setDisabled(), this.unWireEvents()) : (this.element.disabled = !1, 
                    wrapper.classList.remove("e-checkbox-disabled"), wrapper.setAttribute("aria-disabled", "false"), 
                    this.wireEvents());
                    break;

                  case "cssClass":
                    oldProp.cssClass && wrapper.classList.remove(oldProp.cssClass), wrapper.classList.add(newProp.cssClass);
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? wrapper.classList.add("e-rtl") : wrapper.classList.remove("e-rtl");
                    break;

                  case "label":
                    this.setText(newProp.label);
                    break;

                  case "labelPosition":
                    var label = wrapper.getElementsByClassName("e-label")[0], labelWrap = wrapper.getElementsByTagName("label")[0];
                    detach(label), "After" === newProp.labelPosition ? labelWrap.appendChild(label) : labelWrap.insertBefore(label, wrapper.getElementsByClassName("e-frame")[0]);
                    break;

                  case "name":
                    this.element.setAttribute("name", newProp.name);
                    break;

                  case "value":
                    this.element.setAttribute("value", newProp.value);
                }
            }
        }, CheckBox.prototype.preRender = function() {
            var element = this.element;
            this.tagName = this.element.tagName, element = wrapperInitialize(this.createElement, "EJS-CHECKBOX", "checkbox", element, WRAPPER, "checkbox"), 
            this.element = element, "checkbox" !== this.element.getAttribute("type") && this.element.setAttribute("type", "checkbox"), 
            this.element.id || (this.element.id = getUniqueID("e-" + this.getModuleName()));
        }, CheckBox.prototype.render = function() {
            this.initWrapper(), this.initialize(), this.disabled || this.wireEvents();
        }, CheckBox.prototype.setDisabled = function() {
            var wrapper = this.getWrapper();
            this.element.disabled = !0, wrapper.classList.add("e-checkbox-disabled"), wrapper.setAttribute("aria-disabled", "true");
        }, CheckBox.prototype.setText = function(text) {
            var label = this.getWrapper().getElementsByClassName("e-label")[0];
            if (label) label.textContent = text; else {
                label = this.createElement("span", {
                    className: "e-label",
                    innerHTML: text
                });
                var labelWrap = this.getWrapper().getElementsByTagName("label")[0];
                "Before" === this.labelPosition ? labelWrap.insertBefore(label, this.getWrapper().getElementsByClassName("e-frame")[0]) : labelWrap.appendChild(label);
            }
        }, CheckBox.prototype.changeHandler = function(e) {
            e.stopPropagation();
        }, CheckBox.prototype.unWireEvents = function() {
            var wrapper = this.getWrapper();
            EventHandler.remove(this.element, "click", this.clickHandler), EventHandler.remove(document, "keydown", this.keyDownHandler), 
            EventHandler.remove(wrapper, "mousedown", this.mouseDownHandler), EventHandler.remove(this.element, "focus", this.focusHandler), 
            EventHandler.remove(this.element, "focusout", this.focusOutHandler);
            var label = wrapper.getElementsByTagName("label")[0];
            EventHandler.remove(label, "mousedown", this.labelMouseHandler), EventHandler.remove(label, "mouseup", this.labelMouseHandler), 
            "EJS-CHECKBOX" === this.tagName && EventHandler.remove(this.element, "change", this.changeHandler);
        }, CheckBox.prototype.wireEvents = function() {
            var wrapper = this.getWrapper();
            EventHandler.add(this.element, "click", this.clickHandler, this), EventHandler.add(document, "keydown", this.keyDownHandler, this), 
            EventHandler.add(wrapper, "mousedown", this.mouseDownHandler, this), EventHandler.add(this.element, "focus", this.focusHandler, this), 
            EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
            var label = wrapper.getElementsByTagName("label")[0];
            EventHandler.add(label, "mousedown", this.labelMouseHandler, this), EventHandler.add(label, "mouseup", this.labelMouseHandler, this), 
            "EJS-CHECKBOX" === this.tagName && EventHandler.add(this.element, "change", this.changeHandler, this);
        }, __decorate$10([ Event() ], CheckBox.prototype, "change", void 0), __decorate$10([ Event() ], CheckBox.prototype, "created", void 0), 
        __decorate$10([ Property(!1) ], CheckBox.prototype, "checked", void 0), __decorate$10([ Property("") ], CheckBox.prototype, "cssClass", void 0), 
        __decorate$10([ Property(!1) ], CheckBox.prototype, "disabled", void 0), __decorate$10([ Property(!1) ], CheckBox.prototype, "indeterminate", void 0), 
        __decorate$10([ Property("") ], CheckBox.prototype, "label", void 0), __decorate$10([ Property("After") ], CheckBox.prototype, "labelPosition", void 0), 
        __decorate$10([ Property("") ], CheckBox.prototype, "name", void 0), __decorate$10([ Property("") ], CheckBox.prototype, "value", void 0), 
        CheckBox = __decorate$10([ NotifyPropertyChanges ], CheckBox);
    }(Component), __extends$12 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$11 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, RadioButton = function(_super) {
        function RadioButton(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.isKeyPressed = !1, _this;
        }
        __extends$12(RadioButton, _super), RadioButton_1 = RadioButton, RadioButton.prototype.changeHandler = function(event) {
            this.checked = !0, this.dataBind();
            var changeEventArgs = {
                value: this.value,
                event: event
            };
            this.trigger("change", changeEventArgs), "EJS-RADIOBUTTON" === this.tagName && event.stopPropagation();
        }, RadioButton.prototype.updateChange = function(state) {
            for (var input, name = this.element.getAttribute("name"), radioGrp = document.querySelectorAll('input.e-radio[name="' + name + '"]'), i = 0; i < radioGrp.length; i++) (input = radioGrp[i]) !== this.element && (getInstance(input, RadioButton_1).checked = !1);
        }, RadioButton.prototype.destroy = function() {
            var _this = this, radioWrap = this.element.parentElement;
            _super.prototype.destroy.call(this), this.disabled || this.unWireEvents(), "INPUT" === this.tagName ? (radioWrap.parentNode.insertBefore(this.element, radioWrap), 
            detach(radioWrap), this.element.checked = !1, [ "name", "value", "disabled" ].forEach(function(key) {
                _this.element.removeAttribute(key);
            })) : ([ "role", "aria-checked", "class" ].forEach(function(key) {
                radioWrap.removeAttribute(key);
            }), radioWrap.innerHTML = "");
        }, RadioButton.prototype.focusHandler = function() {
            this.isKeyPressed && this.getLabel().classList.add("e-focus");
        }, RadioButton.prototype.focusOutHandler = function() {
            this.getLabel().classList.remove("e-focus");
        }, RadioButton.prototype.getModuleName = function() {
            return "radio";
        }, RadioButton.prototype.getPersistData = function() {
            return this.addOnPersist([ "checked" ]);
        }, RadioButton.prototype.getLabel = function() {
            return this.element.nextElementSibling;
        }, RadioButton.prototype.initialize = function() {
            this.initWrapper(), this.name && this.element.setAttribute("name", this.name), this.value && this.element.setAttribute("value", this.value), 
            this.checked && (this.element.checked = !0), this.disabled && this.setDisabled();
        }, RadioButton.prototype.initWrapper = function() {
            var rippleSpan, wrapper = this.element.parentElement;
            wrapper.classList.contains("e-radio-wrapper") || (wrapper = this.createElement("div", {
                className: "e-radio-wrapper"
            }), this.element.parentNode.insertBefore(wrapper, this.element));
            var label = this.createElement("label", {
                attrs: {
                    for: this.element.id
                }
            });
            wrapper.appendChild(this.element), wrapper.appendChild(label), isRippleEnabled && (rippleSpan = this.createElement("span", {
                className: "e-ripple-container"
            }), label.appendChild(rippleSpan), rippleEffect(rippleSpan, {
                duration: 400,
                isCenterRipple: !0
            })), this.enableRtl && label.classList.add("e-rtl"), this.cssClass && addClass([ label ], this.cssClass.split(" ")), 
            this.label && this.setText(this.label);
        }, RadioButton.prototype.keyDownHandler = function() {
            this.isKeyPressed = !0;
        }, RadioButton.prototype.labelRippleHandler = function(e) {
            rippleMouseHandler(e, this.getLabel().getElementsByClassName("e-ripple-container")[0]);
        }, RadioButton.prototype.mouseDownHandler = function() {
            this.isKeyPressed = !1;
        }, RadioButton.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var label = this.getLabel(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "checked":
                    newProp.checked && this.updateChange(newProp.checked), this.element.checked = newProp.checked;
                    break;

                  case "disabled":
                    newProp.disabled ? (this.setDisabled(), this.unWireEvents()) : (this.element.disabled = !1, 
                    this.wireEvents());
                    break;

                  case "cssClass":
                    oldProp.cssClass && removeClass([ label ], oldProp.cssClass.split(" ")), addClass([ label ], newProp.cssClass.split(" "));
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? label.classList.add("e-rtl") : label.classList.remove("e-rtl");
                    break;

                  case "label":
                    this.setText(newProp.label);
                    break;

                  case "labelPosition":
                    "Before" === newProp.labelPosition ? label.classList.add("e-right") : label.classList.remove("e-right");
                    break;

                  case "name":
                    this.element.setAttribute("name", newProp.name);
                    break;

                  case "value":
                    this.element.setAttribute("value", newProp.value);
                }
            }
        }, RadioButton.prototype.preRender = function() {
            var element = this.element;
            this.tagName = this.element.tagName, element = wrapperInitialize(this.createElement, "EJS-RADIOBUTTON", "radio", element, "e-radio-wrapper", "radio"), 
            this.element = element, "radio" !== this.element.getAttribute("type") && this.element.setAttribute("type", "radio"), 
            this.element.id || (this.element.id = getUniqueID("e-" + this.getModuleName()));
        }, RadioButton.prototype.render = function() {
            this.initialize(), this.disabled || this.wireEvents();
        }, RadioButton.prototype.setDisabled = function() {
            this.element.disabled = !0;
        }, RadioButton.prototype.setText = function(text) {
            var label = this.getLabel(), textLabel = label.getElementsByClassName("e-label")[0];
            textLabel ? textLabel.textContent = text : (textLabel = this.createElement("span", {
                className: "e-label",
                innerHTML: text
            }), label.appendChild(textLabel)), "Before" === this.labelPosition ? this.getLabel().classList.add("e-right") : this.getLabel().classList.remove("e-right");
        }, RadioButton.prototype.unWireEvents = function() {
            var label = this.getLabel();
            EventHandler.remove(this.element, "change", this.changeHandler), EventHandler.remove(document, "keydown", this.keyDownHandler), 
            EventHandler.remove(label, "mousedown", this.mouseDownHandler), EventHandler.remove(this.element, "focus", this.focusHandler), 
            EventHandler.remove(this.element, "focusout", this.focusOutHandler);
            var rippleLabel = label.getElementsByClassName("e-label")[0];
            rippleLabel && (EventHandler.remove(rippleLabel, "mousedown", this.labelRippleHandler), 
            EventHandler.remove(rippleLabel, "mouseup", this.labelRippleHandler));
        }, RadioButton.prototype.wireEvents = function() {
            var label = this.getLabel();
            EventHandler.add(this.element, "change", this.changeHandler, this), EventHandler.add(document, "keydown", this.keyDownHandler, this), 
            EventHandler.add(label, "mousedown", this.mouseDownHandler, this), EventHandler.add(this.element, "focus", this.focusHandler, this), 
            EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
            var rippleLabel = label.getElementsByClassName("e-label")[0];
            rippleLabel && (EventHandler.add(rippleLabel, "mousedown", this.labelRippleHandler, this), 
            EventHandler.add(rippleLabel, "mouseup", this.labelRippleHandler, this));
        };
        var RadioButton_1;
        return __decorate$11([ Event() ], RadioButton.prototype, "change", void 0), __decorate$11([ Event() ], RadioButton.prototype, "created", void 0), 
        __decorate$11([ Property(!1) ], RadioButton.prototype, "checked", void 0), __decorate$11([ Property("") ], RadioButton.prototype, "cssClass", void 0), 
        __decorate$11([ Property(!1) ], RadioButton.prototype, "disabled", void 0), __decorate$11([ Property("") ], RadioButton.prototype, "label", void 0), 
        __decorate$11([ Property("After") ], RadioButton.prototype, "labelPosition", void 0), 
        __decorate$11([ Property("") ], RadioButton.prototype, "name", void 0), __decorate$11([ Property("") ], RadioButton.prototype, "value", void 0), 
        RadioButton = RadioButton_1 = __decorate$11([ NotifyPropertyChanges ], RadioButton);
    }(Component), __extends$13 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$12 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, RIPPLE$2 = "e-ripple-container", Switch = function(_super) {
        function Switch(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.isKeyPressed = !1, _this.isDrag = !1, _this;
        }
        return __extends$13(Switch, _super), Switch.prototype.changeState = function(state) {
            var ariaState, rippleSpan, wrapper = this.getWrapper(), bar = wrapper.querySelector(".e-switch-inner"), handle = wrapper.querySelector(".e-switch-handle");
            isRippleEnabled && (rippleSpan = wrapper.getElementsByClassName(RIPPLE$2)[0]), state ? (addClass([ bar, handle ], "e-switch-active"), 
            ariaState = "true", this.element.checked = !0, this.checked = !0, rippleSpan && addClass([ rippleSpan ], [ "e-ripple-check" ])) : (removeClass([ bar, handle ], "e-switch-active"), 
            ariaState = "false", this.element.checked = !1, this.checked = !1, rippleSpan && removeClass([ rippleSpan ], [ "e-ripple-check" ])), 
            wrapper.setAttribute("aria-checked", ariaState);
        }, Switch.prototype.clickHandler = function(evt) {
            this.isDrag = !1, this.focusOutHandler(), this.changeState(!this.checked), this.element.focus();
            var changeEventArgs = {
                checked: this.element.checked,
                event: evt
            };
            this.trigger("change", changeEventArgs);
        }, Switch.prototype.destroy = function() {
            _super.prototype.destroy.call(this), this.disabled || this.unWireEvents(), destroy(this, this.getWrapper(), this.tagName);
        }, Switch.prototype.focusHandler = function() {
            this.isKeyPressed && this.getWrapper().classList.add("e-focus");
        }, Switch.prototype.focusOutHandler = function() {
            this.getWrapper().classList.remove("e-focus");
        }, Switch.prototype.getModuleName = function() {
            return "switch";
        }, Switch.prototype.getPersistData = function() {
            return this.addOnPersist([ "checked" ]);
        }, Switch.prototype.getWrapper = function() {
            return this.element.parentElement;
        }, Switch.prototype.initialize = function() {
            this.name && this.element.setAttribute("name", this.name), this.value && this.element.setAttribute("value", this.value), 
            this.checked && this.changeState(!0), this.disabled && this.setDisabled(), (this.onLabel || this.offLabel) && this.setLabel(this.onLabel, this.offLabel);
        }, Switch.prototype.initWrapper = function() {
            var wrapper = this.element.parentElement;
            wrapper.classList.contains("e-switch-wrapper") || (wrapper = this.createElement("div", {
                className: "e-switch-wrapper",
                attrs: {
                    role: "switch",
                    "aria-checked": "false"
                }
            }), this.element.parentNode.insertBefore(wrapper, this.element));
            var switchInner = this.createElement("span", {
                className: "e-switch-inner"
            }), onLabel = this.createElement("span", {
                className: "e-switch-on"
            }), offLabel = this.createElement("span", {
                className: "e-switch-off"
            }), handle = this.createElement("span", {
                className: "e-switch-handle"
            });
            if (wrapper.appendChild(this.element), switchInner.appendChild(onLabel), switchInner.appendChild(offLabel), 
            wrapper.appendChild(switchInner), wrapper.appendChild(handle), isRippleEnabled) {
                var rippleSpan = this.createElement("span", {
                    className: RIPPLE$2
                });
                handle.appendChild(rippleSpan), rippleEffect(rippleSpan, {
                    duration: 400,
                    isCenterRipple: !0
                });
            }
            this.enableRtl && wrapper.classList.add("e-rtl"), this.cssClass && addClass([ wrapper ], this.cssClass.split(" "));
        }, Switch.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var wrapper = this.getWrapper(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "checked":
                    this.changeState(newProp.checked);
                    break;

                  case "disabled":
                    newProp.disabled ? (this.setDisabled(), this.unWireEvents()) : (this.element.disabled = !1, 
                    wrapper.classList.remove("e-switch-disabled"), wrapper.setAttribute("aria-disabled", "false"), 
                    this.wireEvents());
                    break;

                  case "value":
                    this.element.setAttribute("value", newProp.value);
                    break;

                  case "name":
                    this.element.setAttribute("name", newProp.name);
                    break;

                  case "onLabel":
                  case "offLabel":
                    this.setLabel(newProp.onLabel, newProp.offLabel);
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? wrapper.classList.add("e-rtl") : wrapper.classList.remove("e-rtl");
                    break;

                  case "cssClass":
                    oldProp.cssClass && wrapper.classList.remove(oldProp.cssClass), wrapper.classList.add(newProp.cssClass);
                }
            }
        }, Switch.prototype.preRender = function() {
            var element = this.element;
            this.tagName = this.element.tagName, preRender(this, "EJS-SWITCH", "e-switch-wrapper", element, this.getModuleName());
        }, Switch.prototype.render = function() {
            this.initWrapper(), this.initialize(), this.disabled || this.wireEvents();
        }, Switch.prototype.rippleHandler = function(e) {
            rippleMouseHandler(e, this.getWrapper().getElementsByClassName(RIPPLE$2)[0]), "mousedown" === e.type && e.currentTarget.classList.contains("e-switch-wrapper") && 1 === e.which && (this.isDrag = !0, 
            this.isKeyPressed = !1);
        }, Switch.prototype.rippleTouchHandler = function(eventType) {
            var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];
            if (rippleSpan) {
                var event_1 = document.createEvent("MouseEvents");
                event_1.initEvent(eventType, !1, !0), rippleSpan.dispatchEvent(event_1);
            }
        }, Switch.prototype.setDisabled = function() {
            var wrapper = this.getWrapper();
            this.element.disabled = !0, wrapper.classList.add("e-switch-disabled"), wrapper.setAttribute("aria-disabled", "true");
        }, Switch.prototype.setLabel = function(onText, offText) {
            var wrapper = this.getWrapper();
            onText && (wrapper.querySelector(".e-switch-on").textContent = onText), offText && (wrapper.querySelector(".e-switch-off").textContent = offText);
        }, Switch.prototype.switchFocusHandler = function() {
            this.isKeyPressed = !0;
        }, Switch.prototype.switchMouseUp = function(e) {
            var target = e.target;
            this.getWrapper().getElementsByClassName(RIPPLE$2)[0];
            "touchmove" === e.type && e.preventDefault(), "touchstart" === e.type && (this.isDrag = !0, 
            this.rippleTouchHandler("mousedown")), this.isDrag && ("mouseup" === e.type && target.className.indexOf("e-switch") < 0 || "touchend" === e.type) && (this.clickHandler(e), 
            this.rippleTouchHandler("mouseup"), e.preventDefault());
        }, Switch.prototype.toggle = function() {
            this.clickHandler();
        }, Switch.prototype.wireEvents = function() {
            var wrapper = this.getWrapper();
            wrapper.querySelector(".e-switch-handle");
            EventHandler.add(wrapper, "click", this.clickHandler, this), EventHandler.add(this.element, "focus", this.focusHandler, this), 
            EventHandler.add(this.element, "focusout", this.focusOutHandler, this), EventHandler.add(document, "mouseup", this.switchMouseUp, this), 
            EventHandler.add(document, "keydown", this.switchFocusHandler, this), EventHandler.add(wrapper, "mousedown mouseup", this.rippleHandler, this), 
            EventHandler.add(wrapper, "touchstart touchmove touchend", this.switchMouseUp, this);
        }, Switch.prototype.unWireEvents = function() {
            var wrapper = this.getWrapper();
            wrapper.querySelector(".e-switch-handle");
            EventHandler.remove(wrapper, "click", this.clickHandler), EventHandler.remove(this.element, "focus", this.focusHandler), 
            EventHandler.remove(this.element, "focusout", this.focusOutHandler), EventHandler.remove(document, "mouseup", this.switchMouseUp), 
            EventHandler.remove(document, "keydown", this.switchFocusHandler), EventHandler.remove(wrapper, "mousedown mouseup", this.rippleHandler), 
            EventHandler.remove(wrapper, "touchstart touchmove touchend", this.switchMouseUp);
        }, __decorate$12([ Event() ], Switch.prototype, "change", void 0), __decorate$12([ Event() ], Switch.prototype, "created", void 0), 
        __decorate$12([ Property(!1) ], Switch.prototype, "checked", void 0), __decorate$12([ Property("") ], Switch.prototype, "cssClass", void 0), 
        __decorate$12([ Property(!1) ], Switch.prototype, "disabled", void 0), __decorate$12([ Property("") ], Switch.prototype, "name", void 0), 
        __decorate$12([ Property("") ], Switch.prototype, "onLabel", void 0), __decorate$12([ Property("") ], Switch.prototype, "offLabel", void 0), 
        __decorate$12([ Property("") ], Switch.prototype, "value", void 0), Switch = __decorate$12([ NotifyPropertyChanges ], Switch);
    }(Component), _buttons = Object.freeze({
        wrapperInitialize: wrapperInitialize,
        getTextNode: getTextNode,
        destroy: destroy,
        preRender: preRender,
        createCheckBox: createCheckBox,
        rippleMouseHandler: rippleMouseHandler,
        Button: Button,
        CheckBox: CheckBox,
        RadioButton: RadioButton,
        Switch: Switch
    }), __extends$9 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$8 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, ButtonProps = function(_super) {
        function ButtonProps() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$9(ButtonProps, _super), __decorate$8([ Property() ], ButtonProps.prototype, "buttonModel", void 0), 
        __decorate$8([ Property("Button") ], ButtonProps.prototype, "type", void 0), __decorate$8([ Property() ], ButtonProps.prototype, "click", void 0), 
        ButtonProps;
    }(ChildProperty), AnimationSettings = function(_super) {
        function AnimationSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$9(AnimationSettings, _super), __decorate$8([ Property("Fade") ], AnimationSettings.prototype, "effect", void 0), 
        __decorate$8([ Property(400) ], AnimationSettings.prototype, "duration", void 0), 
        __decorate$8([ Property(0) ], AnimationSettings.prototype, "delay", void 0), AnimationSettings;
    }(ChildProperty), ROOT = "e-dialog", DLG_UTIL_DEFAULT_TITLE = "Information", DLG_UTIL_ROOT = "e-scroll-disabled", DLG_UTIL_ALERT = "e-alert-dialog", DLG_UTIL_CONFIRM = "e-confirm-dialog", Dialog = function(_super) {
        function Dialog(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$9(Dialog, _super), Dialog.prototype.render = function() {
            this.initialize(), this.initRender(), this.wireEvents(), "100%" === this.width && (this.element.style.width = "");
        }, Dialog.prototype.preRender = function() {
            var _this = this;
            this.headerContent = null;
            for (var classArray = [], j = 0; j < this.element.classList.length; j++) isNullOrUndefined(this.element.classList[j].match("e-control")) && isNullOrUndefined(this.element.classList[j].match(ROOT)) || classArray.push(this.element.classList[j]);
            removeClass([ this.element ], classArray), this.clonedEle = this.element.cloneNode(!0), 
            this.closeIconClickEventHandler = function(event) {
                _this.hide(event);
            }, this.dlgOverlayClickEventHandler = function(event) {
                _this.trigger("overlayClick", event);
            };
            if (this.l10n = new L10n("dialog", {
                close: "Close"
            }, this.locale), isNullOrUndefined(this.target)) {
                var prevOnChange = this.isProtectedOnChange;
                this.isProtectedOnChange = !0, this.target = document.body, this.isProtectedOnChange = prevOnChange;
            }
        }, Dialog.prototype.keyDown = function(event) {
            var _this = this;
            if (9 === event.keyCode && this.isModal) {
                var buttonObj = void 0;
                isNullOrUndefined(this.btnObj) || (buttonObj = this.btnObj[this.btnObj.length - 1]), 
                isNullOrUndefined(buttonObj) || document.activeElement !== buttonObj.element || event.shiftKey || (event.preventDefault(), 
                this.focusableElements(this.element).focus()), document.activeElement === this.focusableElements(this.element) && event.shiftKey && (event.preventDefault(), 
                isNullOrUndefined(buttonObj) || buttonObj.element.focus());
            }
            var element = document.activeElement, isTagName = [ "input", "textarea" ].indexOf(element.tagName.toLowerCase()) > -1, isContentEdit = !1;
            if (isTagName || (isContentEdit = element.hasAttribute("contenteditable") && "true" === element.getAttribute("contenteditable")), 
            27 === event.keyCode && this.closeOnEscape && this.hide(event), 13 === event.keyCode && !event.ctrlKey && "textarea" !== element.tagName.toLowerCase() && isTagName && !isNullOrUndefined(this.primaryButtonEle) || 13 === event.keyCode && event.ctrlKey && ("textarea" === element.tagName.toLowerCase() || isContentEdit) && !isNullOrUndefined(this.primaryButtonEle)) {
                var buttonIndex_1;
                this.buttons.some(function(data, index) {
                    buttonIndex_1 = index;
                    var buttonModel = data.buttonModel;
                    return !isNullOrUndefined(buttonModel) && !0 === buttonModel.isPrimary;
                }) && "function" == typeof this.buttons[buttonIndex_1].click && setTimeout(function() {
                    _this.buttons[buttonIndex_1].click.call(_this, event);
                });
            }
        }, Dialog.prototype.initialize = function() {
            isNullOrUndefined(this.target) || (this.targetEle = "string" == typeof this.target ? document.querySelector(this.target) : this.target), 
            addClass([ this.element ], ROOT), Browser.isDevice && addClass([ this.element ], "e-device"), 
            this.setCSSClass(), this.setMaxHeight();
        }, Dialog.prototype.initRender = function() {
            var _this = this;
            this.initialRender = !0, attributes(this.element, {
                role: "dialog"
            }), 1e3 === this.zIndex ? (this.setzIndex(this.element, !1), this.calculatezIndex = !0) : this.calculatezIndex = !1, 
            this.setTargetContent(), "" === this.header || isNullOrUndefined(this.header) || this.setHeader(), 
            this.showCloseIcon && this.renderCloseIcon(), this.setContent(), "" === this.footerTemplate || isNullOrUndefined(this.footerTemplate) ? isNullOrUndefined(this.buttons[0].buttonModel) || this.setButton() : this.setFooterTemplate(), 
            this.allowDragging && !isNullOrUndefined(this.headerContent) && this.setAllowDragging(), 
            attributes(this.element, {
                "aria-modal": this.isModal ? "true" : "false"
            }), this.isModal && this.setIsModal(), isNullOrUndefined(this.targetEle) || (this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element)), 
            this.popupObj = new Popup(this.element, {
                height: this.height,
                width: this.width,
                zIndex: this.zIndex,
                relateTo: this.target,
                actionOnScroll: "none",
                open: function(event) {
                    _this.focusContent();
                    var eventArgs = {
                        container: _this.isModal ? _this.dlgContainer : _this.element,
                        element: _this.element,
                        target: _this.target
                    };
                    _this.trigger("open", eventArgs);
                },
                close: function(event) {
                    _this.isModal && addClass([ _this.dlgOverlay ], "e-fade"), _this.unBindEvent(_this.element), 
                    _this.isModal && (_this.dlgContainer.style.display = "none"), _this.trigger("close", _this.closeArgs), 
                    isNullOrUndefined(_this.storeActiveElement) || _this.storeActiveElement.focus();
                }
            }), this.positionChange(), this.setEnableRTL(), addClass([ this.element ], "e-popup-close"), 
            this.isModal && this.setOverlayZindex(), this.visible ? this.show() : this.isModal && (this.dlgOverlay.style.display = "none"), 
            this.initialRender = !1;
        }, Dialog.prototype.setOverlayZindex = function(zIndexValue) {
            var zIndex;
            zIndex = isNullOrUndefined(zIndexValue) ? parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex : zIndexValue, 
            this.dlgOverlay.style.zIndex = (zIndex - 1).toString(), this.dlgContainer.style.zIndex = zIndex.toString();
        }, Dialog.prototype.positionChange = function() {
            this.isModal ? "number" == typeof this.position.X && "number" == typeof this.position.Y ? this.setPopupPosition() : "string" == typeof this.position.X && "number" == typeof this.position.Y || "number" == typeof this.position.X && "string" == typeof this.position.Y ? this.setPopupPosition() : (this.element.style.top = "0px", 
            this.element.style.left = "0px", this.dlgContainer.classList.add("e-dlg-" + this.position.X + "-" + this.position.Y)) : this.setPopupPosition();
        }, Dialog.prototype.setPopupPosition = function() {
            this.popupObj.setProperties({
                position: {
                    X: this.position.X,
                    Y: this.position.Y
                }
            });
        }, Dialog.prototype.setAllowDragging = function() {
            var _this = this;
            this.dragObj = new Draggable(this.element, {
                clone: !1,
                abort: ".e-dlg-closeicon-btn",
                handle: ".e-dlg-header-content",
                dragStart: function(event) {
                    _this.trigger("dragStart", event);
                },
                dragStop: function(event) {
                    _this.isModal && (isNullOrUndefined(_this.position) || _this.dlgContainer.classList.remove("e-dlg-" + _this.position.X + "-" + _this.position.Y), 
                    _this.element.style.position = "relative"), _this.trigger("dragStop", event);
                },
                drag: function(event) {
                    _this.trigger("drag", event);
                }
            }), isNullOrUndefined(this.targetEle) || (this.dragObj.dragArea = this.targetEle);
        }, Dialog.prototype.setButton = function() {
            this.buttonContent = [], this.btnObj = [];
            for (var i = 0; i < this.buttons.length; i++) {
                var buttonType = isNullOrUndefined(this.buttons[i].type) ? "button" : this.buttons[i].type.toLowerCase(), btn = this.createElement("button", {
                    attrs: {
                        type: buttonType
                    }
                });
                this.buttonContent.push(btn.outerHTML);
            }
            this.setFooterTemplate();
            for (i = 0; i < this.buttons.length; i++) this.btnObj[i] = new Button(this.buttons[i].buttonModel), 
            "function" == typeof this.buttons[i].click && EventHandler.add(this.ftrTemplateContent.children[i], "click", this.buttons[i].click, this), 
            this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]), this.btnObj[i].element.classList.add("e-flat"), 
            this.primaryButtonEle = this.element.getElementsByClassName("e-primary")[0];
        }, Dialog.prototype.setContent = function() {
            attributes(this.element, {
                "aria-describedby": this.element.id + "_dialog-content"
            }), this.contentEle = this.createElement("div", {
                className: "e-dlg-content",
                id: this.element.id + "_dialog-content"
            }), this.innerContentElement ? this.contentEle.appendChild(this.innerContentElement) : (isNullOrUndefined(this.content) || "" === this.content) && this.initialRender || ("string" == typeof this.content ? this.contentEle.innerHTML = this.content : this.content instanceof HTMLElement ? this.contentEle.appendChild(this.content) : this.setTemplate(this.content, this.contentEle)), 
            isNullOrUndefined(this.headerContent) ? this.element.insertBefore(this.contentEle, this.element.children[0]) : this.element.insertBefore(this.contentEle, this.element.children[1]), 
            "auto" === this.height && this.setMaxHeight();
        }, Dialog.prototype.setTemplate = function(template, toElement) {
            for (var fromElements = [], _i = 0, _a = compile$$1(template)({}); _i < _a.length; _i++) {
                var item = _a[_i];
                fromElements.push(item);
            }
            append([].slice.call(fromElements), toElement);
        }, Dialog.prototype.setMaxHeight = function() {
            var display = this.element.style.display;
            this.element.style.display = "none", this.element.style.maxHeight = !isNullOrUndefined(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + "px" : window.innerHeight - 20 + "px", 
            this.element.style.display = display;
        }, Dialog.prototype.setEnableRTL = function() {
            this.enableRtl ? addClass([ this.element ], "e-rtl") : removeClass([ this.element ], "e-rtl");
        }, Dialog.prototype.setTargetContent = function() {
            if (isNullOrUndefined(this.content) || "" === this.content) {
                var isContent = "" !== this.element.innerHTML.replace(/\s/g, "");
                if (this.element.children.length > 0 || isContent) for (this.innerContentElement = document.createDocumentFragment(); 0 !== this.element.childNodes.length; ) this.innerContentElement.appendChild(this.element.childNodes[0]);
            }
        }, Dialog.prototype.setHeader = function() {
            this.headerEle ? this.headerEle.innerHTML = "" : this.headerEle = this.createElement("div", {
                id: this.element.id + "_title",
                className: "e-dlg-header"
            }), this.createHeaderContent(), this.headerContent.appendChild(this.headerEle), 
            this.setTemplate(this.header, this.headerEle), attributes(this.element, {
                "aria-labelledby": this.element.id + "_title"
            }), this.element.insertBefore(this.headerContent, this.element.children[0]);
        }, Dialog.prototype.setFooterTemplate = function() {
            this.ftrTemplateContent ? this.ftrTemplateContent.innerHTML = "" : this.ftrTemplateContent = this.createElement("div", {
                className: "e-footer-content"
            }), "" === this.footerTemplate || isNullOrUndefined(this.footerTemplate) ? this.ftrTemplateContent.innerHTML = this.buttonContent.join("") : this.setTemplate(this.footerTemplate, this.ftrTemplateContent), 
            this.element.appendChild(this.ftrTemplateContent);
        }, Dialog.prototype.createHeaderContent = function() {
            isNullOrUndefined(this.headerContent) && (this.headerContent = this.createElement("div", {
                className: "e-dlg-header-content"
            }));
        }, Dialog.prototype.renderCloseIcon = function() {
            this.closeIcon = this.createElement("button", {
                className: "e-dlg-closeicon-btn",
                attrs: {
                    type: "button"
                }
            }), this.closeIconBtnObj = new Button({
                cssClass: "e-flat",
                iconCss: "e-icon-dlg-close e-icons"
            }), this.closeIconTitle(), isNullOrUndefined(this.headerContent) ? (this.createHeaderContent(), 
            prepend([ this.closeIcon ], this.headerContent), this.element.insertBefore(this.headerContent, this.element.children[0])) : prepend([ this.closeIcon ], this.headerContent), 
            this.closeIconBtnObj.appendTo(this.closeIcon);
        }, Dialog.prototype.closeIconTitle = function() {
            this.l10n.setLocale(this.locale);
            var closeIconTitle = this.l10n.getConstant("close");
            this.closeIcon.setAttribute("title", closeIconTitle);
        }, Dialog.prototype.setCSSClass = function(oldCSSClass) {
            this.cssClass && addClass([ this.element ], this.cssClass.split(" ")), oldCSSClass && removeClass([ this.element ], oldCSSClass.split(" "));
        }, Dialog.prototype.setIsModal = function() {
            this.dlgContainer = this.createElement("div", {
                className: "e-dlg-container"
            }), this.element.classList.remove("e-popup-open"), this.element.parentNode.insertBefore(this.dlgContainer, this.element), 
            this.dlgContainer.appendChild(this.element), addClass([ this.element ], "e-dlg-modal"), 
            this.dlgOverlay = this.createElement("div", {
                className: "e-dlg-overlay"
            }), this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString(), this.dlgContainer.appendChild(this.dlgOverlay);
        }, Dialog.prototype.getValidFocusNode = function(items) {
            for (var node, u = 0; u < items.length; u++) if (((node = items[u]).clientHeight > 0 || "a" === node.tagName.toLowerCase() && node.hasAttribute("href")) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) return node;
            return node;
        }, Dialog.prototype.focusableElements = function(content) {
            if (!isNullOrUndefined(content)) {
                var items = content.querySelectorAll('input,select,textarea,button,a,[contenteditable="true"],[tabindex]');
                return this.getValidFocusNode(items);
            }
            return null;
        }, Dialog.prototype.getAutoFocusNode = function(container) {
            var node = container.querySelector(".e-dlg-closeicon-btn"), items = container.querySelectorAll("[autofocus]"), validNode = this.getValidFocusNode(items);
            if (isNullOrUndefined(validNode)) {
                if (validNode = this.focusableElements(this.contentEle), !isNullOrUndefined(validNode)) return node = validNode;
                if (!isNullOrUndefined(this.primaryButtonEle)) return this.element.querySelector(".e-primary");
            } else node = validNode;
            return node;
        }, Dialog.prototype.disableElement = function(element, t) {
            var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msMatchesSelector : null;
            if (elementMatch) for (;element; element = element.parentNode) if (element instanceof Element && elementMatch.call(element, t)) return element;
            return null;
        }, Dialog.prototype.focusContent = function() {
            var element = this.getAutoFocusNode(this.element);
            (isNullOrUndefined(element) ? this.element : element).focus(), this.bindEvent(this.element);
        }, Dialog.prototype.bindEvent = function(element) {
            EventHandler.add(element, "keydown", this.keyDown, this);
        }, Dialog.prototype.unBindEvent = function(element) {
            EventHandler.remove(element, "keydown", this.keyDown);
        }, Dialog.prototype.getModuleName = function() {
            return "dialog";
        }, Dialog.prototype.onPropertyChanged = function(newProp, oldProp) {
            if (this.element.classList.contains(ROOT)) for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "content":
                    isNullOrUndefined(this.content) || "" === this.content ? isNullOrUndefined(this.contentEle) || (detach(this.contentEle), 
                    this.contentEle = null) : isNullOrUndefined(this.contentEle) || "dialog" === this.contentEle.getAttribute("role") ? this.setContent() : (this.contentEle.innerHTML = "", 
                    "string" == typeof this.content ? this.contentEle.innerHTML = this.content : this.contentEle.appendChild(this.content), 
                    this.setMaxHeight());
                    break;

                  case "header":
                    "" === this.header || isNullOrUndefined(this.header) ? this.headerEle && (detach(this.headerEle), 
                    this.headerEle = null) : this.setHeader();
                    break;

                  case "footerTemplate":
                    if ("" === this.footerTemplate || isNullOrUndefined(this.footerTemplate)) {
                        if (!this.ftrTemplateContent) return;
                        detach(this.ftrTemplateContent), this.ftrTemplateContent = null, this.buttons = [ {} ];
                    } else this.setFooterTemplate(), this.buttons = [ {} ];
                    break;

                  case "showCloseIcon":
                    this.element.getElementsByClassName("e-icon-dlg-close").length > 0 ? this.showCloseIcon || "" !== this.header && !isNullOrUndefined(this.header) ? this.showCloseIcon || detach(this.closeIcon) : (detach(this.headerContent), 
                    this.headerContent = null) : (this.renderCloseIcon(), this.wireEvents());
                    break;

                  case "locale":
                    this.showCloseIcon && this.closeIconTitle();
                    break;

                  case "visible":
                    this.visible ? this.show() : this.hide();
                    break;

                  case "isModal":
                    this.updateIsModal();
                    break;

                  case "height":
                    setStyleAttribute(this.element, {
                        height: formatUnit(newProp.height)
                    });
                    break;

                  case "width":
                    setStyleAttribute(this.element, {
                        width: formatUnit(newProp.width)
                    });
                    break;

                  case "zIndex":
                    this.popupObj.zIndex = this.zIndex, this.isModal && this.setOverlayZindex(this.zIndex), 
                    this.calculatezIndex = !1;
                    break;

                  case "cssClass":
                    this.setCSSClass(oldProp.cssClass);
                    break;

                  case "buttons":
                    isNullOrUndefined(this.buttons[0].buttonModel) || (isNullOrUndefined(this.ftrTemplateContent) || (detach(this.ftrTemplateContent), 
                    this.ftrTemplateContent = null), this.footerTemplate = "", this.setButton());
                    break;

                  case "allowDragging":
                    this.allowDragging && !isNullOrUndefined(this.headerContent) ? this.setAllowDragging() : this.dragObj.destroy();
                    break;

                  case "target":
                    this.popupObj.relateTo = newProp.target;
                    break;

                  case "position":
                    if (this.isModal) {
                        var positionX = isNullOrUndefined(oldProp.position.X) ? this.position.X : oldProp.position.X, positionY = isNullOrUndefined(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;
                        this.dlgContainer.classList.contains("e-dlg-" + positionX + "-" + positionY) && this.dlgContainer.classList.remove("e-dlg-" + positionX + "-" + positionY);
                    }
                    this.positionChange();
                    break;

                  case "enableRtl":
                    this.setEnableRTL();
                }
            }
        }, Dialog.prototype.updateIsModal = function() {
            if (this.element.setAttribute("aria-modal", this.isModal ? "true" : "false"), this.isModal) this.setIsModal(), 
            this.element.style.top = "0px", this.element.style.left = "0px", isNullOrUndefined(this.targetEle) || this.targetEle.appendChild(this.dlgContainer); else {
                for (removeClass([ this.element ], "e-dlg-modal"), removeClass([ document.body ], "e-scroll-disabled"), 
                detach(this.dlgOverlay); this.dlgContainer.firstChild; ) this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
                this.dlgContainer.parentElement.removeChild(this.dlgContainer);
            }
            this.visible && this.show(), this.positionChange();
        }, Dialog.prototype.setzIndex = function(zIndexElement, setPopupZindex) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = !0, this.zIndex = getZindexPartial(zIndexElement), this.isProtectedOnChange = prevOnChange, 
            setPopupZindex && (this.popupObj.zIndex = this.zIndex);
        }, Dialog.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, Dialog.prototype.destroy = function() {
            if (this.element.classList.contains(ROOT)) {
                this.unWireEvents(), _super.prototype.destroy.call(this);
                var classArray = [ ROOT, "e-rtl", "e-dlg-modal" ];
                if (removeClass([ this.element, this.element ], classArray), this.popupObj.element.classList.contains("e-popup") && this.popupObj.destroy(), 
                !isNullOrUndefined(this.btnObj)) for (var i = void 0; i < this.btnObj.length; i++) this.btnObj[i].destroy();
                for (this.isModal && (detach(this.dlgOverlay), this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer), 
                detach(this.dlgContainer)), this.element.innerHTML = ""; this.element.attributes.length > 0; ) this.element.removeAttribute(this.element.attributes[0].name);
                for (var k = 0; k < this.clonedEle.attributes.length; k++) this.element.setAttribute(this.clonedEle.attributes[k].name, this.clonedEle.attributes[k].value);
            }
        }, Dialog.prototype.wireEvents = function() {
            this.showCloseIcon && EventHandler.add(this.closeIcon, "click", this.closeIconClickEventHandler, this), 
            this.isModal && EventHandler.add(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler, this);
        }, Dialog.prototype.unWireEvents = function() {
            if (this.showCloseIcon && EventHandler.remove(this.closeIcon, "click", this.closeIconClickEventHandler), 
            this.isModal && EventHandler.remove(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler), 
            !isNullOrUndefined(this.buttons[0].buttonModel)) for (var i = 0; i < this.buttons.length; i++) "function" == typeof this.buttons[i].click && EventHandler.remove(this.ftrTemplateContent.children[i], "click", this.buttons[i].click);
        }, Dialog.prototype.refreshPosition = function() {
            this.popupObj.refreshPosition();
        }, Dialog.prototype.show = function(isFullScreen) {
            if (this.element.classList.contains(ROOT) && (!this.element.classList.contains("e-popup-open") || !isNullOrUndefined(isFullScreen))) {
                isNullOrUndefined(isFullScreen) || this.fullScreen(isFullScreen);
                var eventArgs = {
                    cancel: !1,
                    element: this.element,
                    container: this.isModal ? this.dlgContainer : this.element,
                    target: this.target
                };
                if (this.trigger("beforeOpen", eventArgs), eventArgs.cancel) return;
                this.storeActiveElement = document.activeElement, this.element.tabIndex = -1, this.isModal && !isNullOrUndefined(this.dlgOverlay) && (this.dlgOverlay.style.display = "block", 
                this.dlgContainer.style.display = "flex", removeClass([ this.dlgOverlay ], "e-fade"), 
                isNullOrUndefined(this.targetEle) ? addClass([ document.body ], "e-scroll-disabled") : (this.targetEle === document.body ? this.dlgContainer.style.position = "fixed" : this.dlgContainer.style.position = "absolute", 
                this.dlgOverlay.style.position = "absolute", this.element.style.position = "relative", 
                addClass([ this.targetEle ], "e-scroll-disabled")));
                var openAnimation = {
                    name: this.animationSettings.effect + "In",
                    duration: this.animationSettings.duration,
                    delay: this.animationSettings.delay
                }, zIndexElement = this.isModal ? this.element.parentElement : this.element;
                this.calculatezIndex && (this.setzIndex(zIndexElement, !0), setStyleAttribute(this.element, {
                    zIndex: this.zIndex
                }), this.isModal && this.setOverlayZindex(this.zIndex)), "None" === this.animationSettings.effect ? this.popupObj.show() : this.popupObj.show(openAnimation), 
                this.dialogOpen = !0;
                var prevOnChange = this.isProtectedOnChange;
                this.isProtectedOnChange = !0, this.visible = !0, this.isProtectedOnChange = prevOnChange;
            }
        }, Dialog.prototype.hide = function(event) {
            if (this.element.classList.contains(ROOT)) {
                var eventArgs = {
                    cancel: !1,
                    isInteraction: !!event,
                    element: this.element,
                    target: this.target,
                    container: this.isModal ? this.dlgContainer : this.element,
                    event: event
                };
                if (this.trigger("beforeClose", eventArgs), this.closeArgs = eventArgs, !eventArgs.cancel) {
                    this.isModal && (isNullOrUndefined(this.targetEle) ? removeClass([ document.body ], "e-scroll-disabled") : removeClass([ this.targetEle ], "e-scroll-disabled"));
                    var closeAnimation = {
                        name: this.animationSettings.effect + "Out",
                        duration: this.animationSettings.duration,
                        delay: this.animationSettings.delay
                    };
                    "None" === this.animationSettings.effect ? this.popupObj.hide() : this.popupObj.hide(closeAnimation), 
                    this.dialogOpen = !1;
                    var prevOnChange = this.isProtectedOnChange;
                    this.isProtectedOnChange = !0, this.visible = !1, this.isProtectedOnChange = prevOnChange;
                }
            }
        }, Dialog.prototype.fullScreen = function(args) {
            this.element.offsetTop, this.element.offsetLeft;
            if (args) {
                addClass([ this.element ], "e-dlg-fullscreen");
                var display = this.element.style.display;
                this.element.style.display = "none", this.element.style.maxHeight = isNullOrUndefined(this.target) ? window.innerHeight + "px" : this.targetEle.offsetHeight + "px", 
                this.element.style.display = display, addClass([ document.body ], "e-scroll-disabled"), 
                this.allowDragging && !isNullOrUndefined(this.dragObj) && this.dragObj.destroy();
            } else removeClass([ this.element ], "e-dlg-fullscreen"), removeClass([ document.body ], "e-scroll-disabled"), 
            this.allowDragging && !isNullOrUndefined(this.headerContent) && this.setAllowDragging();
            return args;
        }, Dialog.prototype.getButtons = function(index) {
            return isNullOrUndefined(index) ? this.btnObj : this.btnObj[index];
        }, __decorate$8([ Property("") ], Dialog.prototype, "content", void 0), __decorate$8([ Property(!1) ], Dialog.prototype, "showCloseIcon", void 0), 
        __decorate$8([ Property(!1) ], Dialog.prototype, "isModal", void 0), __decorate$8([ Property("") ], Dialog.prototype, "header", void 0), 
        __decorate$8([ Property(!0) ], Dialog.prototype, "visible", void 0), __decorate$8([ Property("auto") ], Dialog.prototype, "height", void 0), 
        __decorate$8([ Property("100%") ], Dialog.prototype, "width", void 0), __decorate$8([ Property("") ], Dialog.prototype, "cssClass", void 0), 
        __decorate$8([ Property(1e3) ], Dialog.prototype, "zIndex", void 0), __decorate$8([ Property(null) ], Dialog.prototype, "target", void 0), 
        __decorate$8([ Property("") ], Dialog.prototype, "footerTemplate", void 0), __decorate$8([ Property(!1) ], Dialog.prototype, "allowDragging", void 0), 
        __decorate$8([ Collection([ {} ], ButtonProps) ], Dialog.prototype, "buttons", void 0), 
        __decorate$8([ Property(!0) ], Dialog.prototype, "closeOnEscape", void 0), __decorate$8([ Complex({}, AnimationSettings) ], Dialog.prototype, "animationSettings", void 0), 
        __decorate$8([ Complex({
            X: "center",
            Y: "center"
        }, PositionData) ], Dialog.prototype, "position", void 0), __decorate$8([ Event() ], Dialog.prototype, "created", void 0), 
        __decorate$8([ Event() ], Dialog.prototype, "open", void 0), __decorate$8([ Event() ], Dialog.prototype, "beforeOpen", void 0), 
        __decorate$8([ Event() ], Dialog.prototype, "close", void 0), __decorate$8([ Event() ], Dialog.prototype, "beforeClose", void 0), 
        __decorate$8([ Event() ], Dialog.prototype, "dragStart", void 0), __decorate$8([ Event() ], Dialog.prototype, "dragStop", void 0), 
        __decorate$8([ Event() ], Dialog.prototype, "drag", void 0), __decorate$8([ Event() ], Dialog.prototype, "overlayClick", void 0), 
        Dialog = __decorate$8([ NotifyPropertyChanges ], Dialog);
    }(Component);
    !function(DialogUtility) {
        function createDialog(options, element) {
            var dialogObject = new Dialog(options);
            return dialogObject.appendTo(element), dialogObject;
        }
        function formOptions(options, option) {
            return options.header = isNullOrUndefined(option.title) ? DLG_UTIL_DEFAULT_TITLE : option.title, 
            options.content = isNullOrUndefined(option.content) ? "" : option.content, options.isModal = !!isNullOrUndefined(option.isModal) || option.isModal, 
            options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) && option.showCloseIcon, 
            options.allowDragging = !isNullOrUndefined(option.isDraggable) && option.isDraggable, 
            options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) && option.closeOnEscape, 
            options.position = isNullOrUndefined(option.position) ? {
                X: "center",
                Y: "top"
            } : option.position, options;
        }
        function formButtonModel(buttonModel, option, buttonPropModel) {
            var buttonProps = buttonPropModel;
            return isNullOrUndefined(option.text) || (buttonProps.buttonModel.content = option.text), 
            isNullOrUndefined(option.icon) || (buttonProps.buttonModel.iconCss = option.icon), 
            isNullOrUndefined(option.cssClass) || (buttonProps.buttonModel.cssClass = option.cssClass), 
            isNullOrUndefined(option.click) || (buttonProps.click = option.click), buttonProps;
        }
        DialogUtility.alert = function(args) {
            var dialogElement = createElement("div", {
                className: DLG_UTIL_ALERT
            });
            document.body.appendChild(dialogElement);
            var alertDialogObj;
            return alertDialogObj = createDialog("string" == typeof args ? {
                content: args,
                position: {
                    X: "center",
                    Y: "top"
                },
                isModal: !0,
                header: DLG_UTIL_DEFAULT_TITLE,
                buttons: [ {
                    buttonModel: {
                        isPrimary: !0,
                        content: "OK"
                    },
                    click: function() {
                        this.hide();
                    }
                } ]
            } : function(option) {
                var options = {};
                return options.buttons = [], options = formOptions(options, option), options = function(options, option) {
                    var alertButtonModel = [ {
                        buttonModel: {
                            isPrimary: !0,
                            content: "OK"
                        },
                        click: function() {
                            this.hide();
                        }
                    } ];
                    return isNullOrUndefined(option.okButton) ? options.buttons = alertButtonModel : options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]), 
                    options;
                }(options, option);
            }(args), dialogElement), alertDialogObj.close = function() {
                alertDialogObj.destroy(), alertDialogObj.element.classList.contains("e-dlg-modal") ? (alertDialogObj.element.parentElement.remove(), 
                alertDialogObj.target.classList.remove(DLG_UTIL_ROOT)) : alertDialogObj.element.remove();
            }, alertDialogObj;
        }, DialogUtility.confirm = function(args) {
            var dialogElement = createElement("div", {
                className: DLG_UTIL_CONFIRM
            });
            document.body.appendChild(dialogElement);
            var confirmDialogObj;
            return confirmDialogObj = createDialog("string" == typeof args ? {
                position: {
                    X: "center",
                    Y: "top"
                },
                content: args,
                isModal: !0,
                header: DLG_UTIL_DEFAULT_TITLE,
                buttons: [ {
                    buttonModel: {
                        isPrimary: !0,
                        content: "OK"
                    },
                    click: function() {
                        this.hide();
                    }
                }, {
                    buttonModel: {
                        content: "Cancel"
                    },
                    click: function() {
                        this.hide();
                    }
                } ]
            } : function(option) {
                var options = {};
                return options.buttons = [], options = formOptions(options, option), options = function(options, option) {
                    var okButtonModel = {
                        buttonModel: {
                            isPrimary: !0,
                            content: "OK"
                        },
                        click: function() {
                            this.hide();
                        }
                    }, cancelButtonModel = {
                        buttonModel: {
                            content: "Cancel"
                        },
                        click: function() {
                            this.hide();
                        }
                    };
                    return isNullOrUndefined(option.okButton) ? options.buttons[0] = okButtonModel : options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel), 
                    isNullOrUndefined(option.cancelButton) ? options.buttons[1] = cancelButtonModel : options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel), 
                    options;
                }(options, option);
            }(args), dialogElement), confirmDialogObj.close = function() {
                confirmDialogObj.destroy(), confirmDialogObj.element.classList.contains("e-dlg-modal") ? (confirmDialogObj.element.parentElement.remove(), 
                confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT)) : confirmDialogObj.element.remove();
            }, confirmDialogObj;
        };
    }(DialogUtility || (DialogUtility = {}));
    var rowHeight, CellType, __extends$14 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$13 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, Animation$1 = function(_super) {
        function Animation$$1() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$14(Animation$$1, _super), __decorate$13([ Property({
            effect: "FadeIn",
            duration: 150,
            delay: 0
        }) ], Animation$$1.prototype, "open", void 0), __decorate$13([ Property({
            effect: "FadeOut",
            duration: 150,
            delay: 0
        }) ], Animation$$1.prototype, "close", void 0), Animation$$1;
    }(ChildProperty), Tooltip = function(_super) {
        function Tooltip(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$14(Tooltip, _super), Tooltip.prototype.initialize = function() {
            this.formatPosition(), addClass([ this.element ], "e-tooltip");
        }, Tooltip.prototype.formatPosition = function() {
            var _a, _b;
            0 === this.position.indexOf("Top") || 0 === this.position.indexOf("Bottom") ? (_a = this.position.split(/(?=[A-Z])/), 
            this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1]) : (_b = this.position.split(/(?=[A-Z])/), 
            this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1]);
        }, Tooltip.prototype.renderArrow = function() {
            this.setTipClass(this.position);
            var tip = this.createElement("div", {
                className: "e-arrow-tip " + this.tipClass
            });
            tip.appendChild(this.createElement("div", {
                className: "e-arrow-tip-outer " + this.tipClass
            })), tip.appendChild(this.createElement("div", {
                className: "e-arrow-tip-inner " + this.tipClass
            })), this.tooltipEle.appendChild(tip);
        }, Tooltip.prototype.setTipClass = function(position) {
            0 === position.indexOf("Right") ? this.tipClass = "e-tip-left" : 0 === position.indexOf("Bottom") ? this.tipClass = "e-tip-top" : 0 === position.indexOf("Left") ? this.tipClass = "e-tip-right" : this.tipClass = "e-tip-bottom";
        }, Tooltip.prototype.renderPopup = function(target) {
            var elePos = this.mouseTrail ? {
                top: 0,
                left: 0
            } : this.getTooltipPosition(target);
            this.popupObj = new Popup(this.tooltipEle, {
                height: this.height,
                width: this.width,
                position: {
                    X: elePos.left,
                    Y: elePos.top
                },
                enableRtl: this.enableRtl,
                open: this.openPopupHandler.bind(this),
                close: this.closePopupHandler.bind(this)
            });
        }, Tooltip.prototype.getTooltipPosition = function(target) {
            this.tooltipEle.style.display = "none";
            var pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY);
            this.tooltipEle.style.display = "";
            var offsetPos = this.calculateTooltipOffset(this.position);
            return this.collisionFlipFit(target, pos.left + offsetPos.left, pos.top + offsetPos.top);
        }, Tooltip.prototype.reposition = function(target) {
            var elePos = this.getTooltipPosition(target);
            this.popupObj.position = {
                X: elePos.left,
                Y: elePos.top
            }, this.popupObj.dataBind();
        }, Tooltip.prototype.openPopupHandler = function() {
            this.trigger("afterOpen", this.tooltipEventArgs);
        }, Tooltip.prototype.closePopupHandler = function() {
            this.clear(), this.trigger("afterClose", this.tooltipEventArgs);
        }, Tooltip.prototype.calculateTooltipOffset = function(position) {
            var pos = {
                top: 0,
                left: 0
            }, tooltipEleWidth = this.tooltipEle.offsetWidth, tooltipEleHeight = this.tooltipEle.offsetHeight, arrowEle = this.tooltipEle.querySelector(".e-arrow-tip"), tipWidth = arrowEle ? arrowEle.offsetWidth : 0, tipHeight = arrowEle ? arrowEle.offsetHeight : 0, tipAdjust = this.showTipPointer ? 0 : 8, tipHeightAdjust = tipHeight / 2 + 2 + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight), tipWidthAdjust = tipWidth / 2 + 2 + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);
            switch (this.mouseTrail && (tipAdjust += 2), position) {
              case "RightTop":
                pos.left += tipWidth + tipAdjust, pos.top -= tooltipEleHeight - tipHeightAdjust;
                break;

              case "RightCenter":
                pos.left += tipWidth + tipAdjust, pos.top -= tooltipEleHeight / 2;
                break;

              case "RightBottom":
                pos.left += tipWidth + tipAdjust, pos.top -= tipHeightAdjust;
                break;

              case "BottomRight":
                pos.top += tipHeight + tipAdjust, pos.left -= tipWidthAdjust;
                break;

              case "BottomCenter":
                pos.top += tipHeight + tipAdjust, pos.left -= tooltipEleWidth / 2;
                break;

              case "BottomLeft":
                pos.top += tipHeight + tipAdjust, pos.left -= tooltipEleWidth - tipWidthAdjust;
                break;

              case "LeftBottom":
                pos.left -= tipWidth + tooltipEleWidth + tipAdjust, pos.top -= tipHeightAdjust;
                break;

              case "LeftCenter":
                pos.left -= tipWidth + tooltipEleWidth + tipAdjust, pos.top -= tooltipEleHeight / 2;
                break;

              case "LeftTop":
                pos.left -= tipWidth + tooltipEleWidth + tipAdjust, pos.top -= tooltipEleHeight - tipHeightAdjust;
                break;

              case "TopLeft":
                pos.top -= tooltipEleHeight + tipHeight + tipAdjust, pos.left -= tooltipEleWidth - tipWidthAdjust;
                break;

              case "TopRight":
                pos.top -= tooltipEleHeight + tipHeight + tipAdjust, pos.left -= tipWidthAdjust;
                break;

              default:
                pos.top -= tooltipEleHeight + tipHeight + tipAdjust, pos.left -= tooltipEleWidth / 2;
            }
            return pos.left += this.offsetX, pos.top += this.offsetY, pos;
        }, Tooltip.prototype.updateTipPosition = function(position) {
            var selEle = this.tooltipEle.querySelectorAll(".e-arrow-tip,.e-arrow-tip-outer,.e-arrow-tip-inner");
            removeClass(selEle, [ "e-tip-bottom", "e-tip-top", "e-tip-left", "e-tip-right" ]), 
            this.setTipClass(position), addClass(selEle, this.tipClass);
        }, Tooltip.prototype.adjustArrow = function(target, position, tooltipPositionX, tooltipPositionY) {
            if (!1 !== this.showTipPointer) {
                this.updateTipPosition(position);
                var leftValue, topValue, tooltipWidth = this.tooltipEle.clientWidth, tooltipHeight = this.tooltipEle.clientHeight, arrowEle = this.tooltipEle.querySelector(".e-arrow-tip"), arrowInnerELe = this.tooltipEle.querySelector(".e-arrow-tip-inner"), tipWidth = arrowEle.offsetWidth, tipHeight = arrowEle.offsetHeight;
                if ("e-tip-bottom" === this.tipClass || "e-tip-top" === this.tipClass) {
                    "e-tip-bottom" === this.tipClass ? (topValue = "99.9%", arrowInnerELe.style.top = "-" + (tipHeight - 2) + "px") : (topValue = -(tipHeight - 1) + "px", 
                    arrowInnerELe.style.top = "-" + (tipHeight - 6) + "px");
                    leftValue = (tipPosExclude = "Center" !== tooltipPositionX || tooltipWidth > target.offsetWidth || this.mouseTrail) && "Left" === tooltipPositionX || !tipPosExclude && "End" === this.tipPointerPosition ? tooltipWidth - tipWidth - 2 + "px" : tipPosExclude && "Right" === tooltipPositionX || !tipPosExclude && "Start" === this.tipPointerPosition ? "2px" : tooltipWidth / 2 - tipWidth / 2 + "px";
                } else {
                    "e-tip-right" === this.tipClass ? (leftValue = "99.9%", arrowInnerELe.style.left = "-" + (tipWidth - 2) + "px") : (leftValue = -(tipWidth - 1) + "px", 
                    arrowInnerELe.style.left = tipWidth - 2 - tipWidth + "px");
                    var tipPosExclude;
                    topValue = (tipPosExclude = "Center" !== tooltipPositionY || tooltipHeight > target.offsetHeight || this.mouseTrail) && "Top" === tooltipPositionY || !tipPosExclude && "End" === this.tipPointerPosition ? tooltipHeight - tipHeight - 2 + "px" : tipPosExclude && "Bottom" === tooltipPositionY || !tipPosExclude && "Start" === this.tipPointerPosition ? "2px" : tooltipHeight / 2 - tipHeight / 2 + "px";
                }
                arrowEle.style.top = topValue, arrowEle.style.left = leftValue;
            }
        }, Tooltip.prototype.renderContent = function(target) {
            var tooltipContent = this.tooltipEle.querySelector(".e-tip-content");
            if (target && !isNullOrUndefined(target.getAttribute("title")) && (target.setAttribute("data-content", target.getAttribute("title")), 
            target.removeAttribute("title")), isNullOrUndefined(this.content)) target && !isNullOrUndefined(target.getAttribute("data-content")) && (tooltipContent.innerHTML = target.getAttribute("data-content")); else if (tooltipContent.innerHTML = "", 
            this.content instanceof HTMLElement) tooltipContent.appendChild(this.content); else if ("string" == typeof this.content) tooltipContent.innerHTML = this.content; else {
                append(compile$$1(this.content)(), tooltipContent);
            }
        }, Tooltip.prototype.renderCloseIcon = function() {
            if (this.isSticky) {
                var tipClose = this.createElement("div", {
                    className: "e-icons e-tooltip-close"
                });
                this.tooltipEle.appendChild(tipClose), EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);
            }
        }, Tooltip.prototype.addDescribedBy = function(target, id) {
            var describedby = (target.getAttribute("aria-describedby") || "").split(/\s+/);
            describedby.indexOf(id) < 0 && describedby.push(id), attributes(target, {
                "aria-describedby": describedby.join(" ").trim(),
                "data-tooltip-id": id
            });
        }, Tooltip.prototype.removeDescribedBy = function(target) {
            var id = target.getAttribute("data-tooltip-id"), describedby = (target.getAttribute("aria-describedby") || "").split(/\s+/), index = describedby.indexOf(id);
            -1 !== index && describedby.splice(index, 1), target.removeAttribute("data-tooltip-id");
            var orgdescribedby = describedby.join(" ").trim();
            orgdescribedby ? target.setAttribute("aria-describedby", orgdescribedby) : target.removeAttribute("aria-describedby");
        }, Tooltip.prototype.tapHoldHandler = function(evt) {
            clearTimeout(this.autoCloseTimer), this.targetHover(evt.originalEvent);
        }, Tooltip.prototype.touchEndHandler = function(e) {
            var _this = this;
            if (!this.isSticky) {
                this.autoCloseTimer = setTimeout(function() {
                    _this.close();
                }, 1500);
            }
        }, Tooltip.prototype.targetClick = function(e) {
            var target;
            isNullOrUndefined(target = this.target ? closest(e.target, this.target) : this.element) || (null === target.getAttribute("data-tooltip-id") ? this.targetHover(e) : this.isSticky || this.hideTooltip(this.animation.close, e, target));
        }, Tooltip.prototype.targetHover = function(e) {
            var target;
            if (target = this.target ? closest(e.target, this.target) : this.element, !isNullOrUndefined(target) && null === target.getAttribute("data-tooltip-id")) {
                for (var _i = 0, targetList_1 = [].slice.call(document.querySelectorAll("[data-tooltip-id= " + this.ctrlId + "_content]")); _i < targetList_1.length; _i++) {
                    var target_1 = targetList_1[_i];
                    this.restoreElement(target_1);
                }
                this.showTooltip(target, this.animation.open, e), this.wireMouseEvents(e, target);
            }
        }, Tooltip.prototype.showTooltip = function(target, showAnimation, e) {
            var _this = this;
            if (clearTimeout(this.showTimer), clearTimeout(this.hideTimer), this.tooltipEventArgs = e ? {
                type: e.type,
                cancel: !1,
                target: target,
                event: e,
                element: this.tooltipEle
            } : {
                type: null,
                cancel: !1,
                target: target,
                event: null,
                element: this.tooltipEle
            }, this.trigger("beforeRender", this.tooltipEventArgs), this.tooltipEventArgs.cancel) return this.isHidden = !0, 
            void this.clear();
            if (this.isHidden = !1, isNullOrUndefined(this.tooltipEle) ? (this.ctrlId = this.element.getAttribute("id") ? getUniqueID(this.element.getAttribute("id")) : getUniqueID("tooltip"), 
            this.tooltipEle = this.createElement("div", {
                className: "e-tooltip-wrap e-popup",
                attrs: {
                    role: "tooltip",
                    "aria-hidden": "false",
                    id: this.ctrlId + "_content"
                },
                styles: "width:" + formatUnit(this.width) + ";height:" + formatUnit(this.height) + ";position:absolute;"
            }), this.cssClass && addClass([ this.tooltipEle ], this.cssClass.split(" ")), Browser.isDevice && addClass([ this.tooltipEle ], "e-bigger"), 
            "auto" !== this.width && (this.tooltipEle.style.maxWidth = formatUnit(this.width)), 
            this.tooltipEle.appendChild(this.createElement("div", {
                className: "e-tip-content"
            })), document.body.appendChild(this.tooltipEle), this.addDescribedBy(target, this.ctrlId + "_content"), 
            this.renderContent(target), addClass([ this.tooltipEle ], "e-popup-open"), this.showTipPointer && this.renderArrow(), 
            this.renderCloseIcon(), this.renderPopup(target)) : (this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY), 
            this.addDescribedBy(target, this.ctrlId + "_content"), this.renderContent(target), 
            Animation.stop(this.tooltipEle), this.reposition(target)), removeClass([ this.tooltipEle ], "e-popup-open"), 
            addClass([ this.tooltipEle ], "e-popup-close"), this.tooltipEventArgs = e ? {
                type: e.type,
                cancel: !1,
                target: target,
                event: e,
                element: this.tooltipEle
            } : {
                type: null,
                cancel: !1,
                target: target,
                event: null,
                element: this.tooltipEle
            }, this.trigger("beforeOpen", this.tooltipEventArgs), this.tooltipEventArgs.cancel) return this.isHidden = !0, 
            void this.clear();
            var openAnimation = {
                name: showAnimation.effect,
                duration: showAnimation.duration,
                delay: showAnimation.delay,
                timingFunction: "easeOut"
            };
            if ("None" === showAnimation.effect && (openAnimation = void 0), this.openDelay > 0) {
                this.showTimer = setTimeout(function() {
                    _this.popupObj && _this.popupObj.show(openAnimation, target);
                }, this.openDelay);
            } else this.popupObj.show(openAnimation, target);
        }, Tooltip.prototype.checkCollision = function(target, x, y) {
            var elePos = {
                left: x,
                top: y,
                position: this.position,
                horizontal: this.tooltipPositionX,
                vertical: this.tooltipPositionY
            }, affectedPos = isCollide(this.tooltipEle, this.target ? this.element : null, x, y);
            return affectedPos.length > 0 && (elePos.horizontal = affectedPos.indexOf("left") >= 0 ? "Right" : affectedPos.indexOf("right") >= 0 ? "Left" : this.tooltipPositionX, 
            elePos.vertical = affectedPos.indexOf("top") >= 0 ? "Bottom" : affectedPos.indexOf("bottom") >= 0 ? "Top" : this.tooltipPositionY), 
            elePos;
        }, Tooltip.prototype.collisionFlipFit = function(target, x, y) {
            var elePos = this.checkCollision(target, x, y), newpos = elePos.position;
            if (this.tooltipPositionY !== elePos.vertical && (newpos = 0 === this.position.indexOf("Bottom") || 0 === this.position.indexOf("Top") ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical), 
            this.tooltipPositionX !== elePos.horizontal && (0 === newpos.indexOf("Left") && (elePos.vertical = "LeftTop" === newpos || "LeftCenter" === newpos ? "Top" : "Bottom", 
            newpos = elePos.vertical + "Left"), 0 === newpos.indexOf("Right") && (elePos.vertical = "RightTop" === newpos || "RightCenter" === newpos ? "Top" : "Bottom", 
            newpos = elePos.vertical + "Right"), elePos.horizontal = this.tooltipPositionX), 
            this.tooltipEventArgs = {
                type: null,
                cancel: !1,
                target: target,
                event: null,
                element: this.tooltipEle,
                collidedPosition: newpos
            }, this.trigger("beforeCollision", this.tooltipEventArgs), elePos.position !== newpos) {
                var pos = calculatePosition(target, this.tooltipPositionX, elePos.vertical);
                this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);
                var offsetPos = this.calculateTooltipOffset(newpos);
                elePos.position = newpos, elePos.left = pos.left + offsetPos.left, elePos.top = pos.top + offsetPos.top;
            } else this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);
            var eleOffset = {
                left: elePos.left,
                top: elePos.top
            }, left = fit(this.tooltipEle, this.target ? this.element : null, {
                X: !0,
                Y: !1
            }, eleOffset).left;
            if (this.showTipPointer && (0 === newpos.indexOf("Bottom") || 0 === newpos.indexOf("Top"))) {
                var arrowEle = this.tooltipEle.querySelector(".e-arrow-tip"), arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);
                arrowleft < 0 ? arrowleft = 0 : arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth && (arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth), 
                arrowEle.style.left = arrowleft.toString() + "px";
            }
            return eleOffset.left = left, eleOffset;
        }, Tooltip.prototype.hideTooltip = function(hideAnimation, e, targetElement) {
            var target, _this = this;
            if (e ? (target = this.target ? targetElement || e.target : this.element, this.tooltipEventArgs = {
                type: e.type,
                cancel: !1,
                target: target,
                event: e,
                element: this.tooltipEle
            }) : (target = document.querySelector("[data-tooltip-id= " + this.ctrlId + "_content]"), 
            this.tooltipEventArgs = {
                type: null,
                cancel: !1,
                target: target,
                event: null,
                element: this.tooltipEle
            }), !isNullOrUndefined(target)) if (this.trigger("beforeClose", this.tooltipEventArgs), 
            this.tooltipEventArgs.cancel) this.isHidden = !1; else {
                this.restoreElement(target), this.isHidden = !0;
                var closeAnimation_1 = {
                    name: hideAnimation.effect,
                    duration: hideAnimation.duration,
                    delay: hideAnimation.delay,
                    timingFunction: "easeIn"
                };
                if ("None" === hideAnimation.effect && (closeAnimation_1 = void 0), this.closeDelay > 0) {
                    this.hideTimer = setTimeout(function() {
                        _this.popupObj && _this.popupObj.hide(closeAnimation_1);
                    }, this.closeDelay);
                } else this.popupObj.hide(closeAnimation_1);
            }
        }, Tooltip.prototype.restoreElement = function(target) {
            this.unwireMouseEvents(target), isNullOrUndefined(target.getAttribute("data-content")) || (target.setAttribute("title", target.getAttribute("data-content")), 
            target.removeAttribute("data-content")), this.removeDescribedBy(target);
        }, Tooltip.prototype.clear = function() {
            this.tooltipEle && (removeClass([ this.tooltipEle ], "e-popup-close"), addClass([ this.tooltipEle ], "e-popup-open")), 
            this.isHidden && (this.popupObj && this.popupObj.destroy(), this.tooltipEle && remove(this.tooltipEle), 
            this.tooltipEle = null, this.popupObj = null);
        }, Tooltip.prototype.onMouseOut = function(e) {
            this.hideTooltip(this.animation.close, e);
        }, Tooltip.prototype.onStickyClose = function(e) {
            this.close();
        }, Tooltip.prototype.onMouseMove = function(event) {
            var eventPageX = 0, eventPageY = 0;
            event.type.indexOf("touch") > -1 ? (event.preventDefault(), eventPageX = event.touches[0].pageX, 
            eventPageY = event.touches[0].pageY) : (eventPageX = event.pageX, eventPageY = event.pageY), 
            Animation.stop(this.tooltipEle), removeClass([ this.tooltipEle ], "e-popup-close"), 
            addClass([ this.tooltipEle ], "e-popup-open"), this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
            var pos = this.calculateTooltipOffset(this.position), x = eventPageX + pos.left + this.offsetX, y = eventPageY + pos.top + this.offsetY, elePos = this.checkCollision(event.target, x, y);
            if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
                var newpos = 0 === this.position.indexOf("Bottom") || 0 === this.position.indexOf("Top") ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
                elePos.position = newpos, this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
                var colpos = this.calculateTooltipOffset(elePos.position);
                elePos.left = eventPageX + colpos.left - this.offsetX, elePos.top = eventPageY + colpos.top - this.offsetY;
            }
            this.tooltipEle.style.left = elePos.left + "px", this.tooltipEle.style.top = elePos.top + "px";
        }, Tooltip.prototype.keyDown = function(event) {
            this.tooltipEle && 27 === event.keyCode && this.close();
        }, Tooltip.prototype.touchEnd = function(e) {
            this.tooltipEle && null === closest(e.target, ".e-tooltip") && this.close();
        }, Tooltip.prototype.scrollHandler = function(e) {
            this.tooltipEle && this.close();
        }, Tooltip.prototype.render = function() {
            this.initialize(), this.wireEvents(this.opensOn);
        }, Tooltip.prototype.preRender = function() {
            this.tipClass = "e-tip-bottom", this.tooltipPositionX = "Center", this.tooltipPositionY = "Top", 
            this.isHidden = !0;
        }, Tooltip.prototype.wireEvents = function(trigger) {
            for (var _i = 0, triggerList_1 = this.getTriggerList(trigger); _i < triggerList_1.length; _i++) {
                var opensOn = triggerList_1[_i];
                if ("Custom" === opensOn) return;
                "Focus" === opensOn && this.wireFocusEvents(), "Click" === opensOn && EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this), 
                "Hover" === opensOn && (Browser.isDevice ? (this.touchModule = new Touch(this.element, {
                    tapHoldThreshold: 500,
                    tapHold: this.tapHoldHandler.bind(this)
                }), EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this)) : EventHandler.add(this.element, "mouseover", this.targetHover, this));
            }
            EventHandler.add(document, "touchend", this.touchEnd, this), EventHandler.add(document, "scroll", this.scrollHandler, this), 
            EventHandler.add(document, "keydown", this.keyDown, this);
        }, Tooltip.prototype.getTriggerList = function(trigger) {
            return "Auto" === trigger && (trigger = Browser.isDevice ? "Hover" : "Hover Focus"), 
            trigger.split(" ");
        }, Tooltip.prototype.wireFocusEvents = function() {
            if (isNullOrUndefined(this.target)) EventHandler.add(this.element, "focus", this.targetHover, this); else for (var _i = 0, targetList_2 = [].slice.call(this.element.querySelectorAll(this.target)); _i < targetList_2.length; _i++) {
                var target = targetList_2[_i];
                EventHandler.add(target, "focus", this.targetHover, this);
            }
        }, Tooltip.prototype.wireMouseEvents = function(e, target) {
            this.tooltipEle && (this.isSticky || ("focus" === e.type && EventHandler.add(target, "blur", this.onMouseOut, this), 
            "mouseover" === e.type && EventHandler.add(target, "mouseleave", this.onMouseOut, this)), 
            this.mouseTrail && EventHandler.add(target, "mousemove touchstart mouseenter", this.onMouseMove, this));
        }, Tooltip.prototype.unwireEvents = function(trigger) {
            for (var _i = 0, triggerList_2 = this.getTriggerList(trigger); _i < triggerList_2.length; _i++) {
                var opensOn = triggerList_2[_i];
                if ("Custom" === opensOn) return;
                "Focus" === opensOn && this.unwireFocusEvents(), "Click" === opensOn && EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick), 
                "Hover" === opensOn && (Browser.isDevice ? (this.touchModule && this.touchModule.destroy(), 
                EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler)) : EventHandler.remove(this.element, "mouseover", this.targetHover));
            }
            EventHandler.remove(document, "touchend", this.touchEnd), EventHandler.remove(document, "scroll", this.scrollHandler), 
            EventHandler.remove(document, "keydown", this.keyDown);
        }, Tooltip.prototype.unwireFocusEvents = function() {
            if (isNullOrUndefined(this.target)) EventHandler.remove(this.element, "focus", this.targetHover); else for (var _i = 0, targetList_3 = [].slice.call(this.element.querySelectorAll(this.target)); _i < targetList_3.length; _i++) {
                var target = targetList_3[_i];
                EventHandler.remove(target, "focus", this.targetHover);
            }
        }, Tooltip.prototype.unwireMouseEvents = function(target) {
            if (!this.isSticky) for (var _i = 0, triggerList_3 = this.getTriggerList(this.opensOn); _i < triggerList_3.length; _i++) {
                var opensOn = triggerList_3[_i];
                "Focus" === opensOn && EventHandler.remove(target, "blur", this.onMouseOut), "Hover" !== opensOn || Browser.isDevice || EventHandler.remove(target, "mouseleave", this.onMouseOut);
            }
            this.mouseTrail && EventHandler.remove(target, "mousemove touchstart mouseenter", this.onMouseMove);
        }, Tooltip.prototype.findTarget = function() {
            return document.querySelector("[data-tooltip-id= " + this.ctrlId + "_content]");
        }, Tooltip.prototype.getModuleName = function() {
            return "tooltip";
        }, Tooltip.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, Tooltip.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var targetElement = this.findTarget(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "width":
                    this.tooltipEle && targetElement && (this.tooltipEle.style.width = formatUnit(newProp.width), 
                    this.reposition(targetElement));
                    break;

                  case "height":
                    this.tooltipEle && targetElement && (this.tooltipEle.style.height = formatUnit(newProp.height), 
                    this.reposition(targetElement));
                    break;

                  case "content":
                    this.tooltipEle && this.renderContent();
                    break;

                  case "opensOn":
                    this.unwireEvents(oldProp.opensOn), this.wireEvents(newProp.opensOn);
                    break;

                  case "position":
                    if (this.formatPosition(), this.tooltipEle && targetElement) {
                        var arrowInnerELe = this.tooltipEle.querySelector(".e-arrow-tip-inner");
                        arrowInnerELe.style.top = arrowInnerELe.style.left = null, this.reposition(targetElement);
                    }
                    break;

                  case "tipPointerPosition":
                    this.tooltipEle && targetElement && this.reposition(targetElement);
                    break;

                  case "offsetX":
                    if (this.tooltipEle) {
                        var x = newProp.offsetX - oldProp.offsetX;
                        this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + "px";
                    }
                    break;

                  case "offsetY":
                    if (this.tooltipEle) {
                        var y = newProp.offsetY - oldProp.offsetY;
                        this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + "px";
                    }
                    break;

                  case "cssClass":
                    this.tooltipEle && (oldProp.cssClass && removeClass([ this.tooltipEle ], oldProp.cssClass.split(" ")), 
                    newProp.cssClass && addClass([ this.tooltipEle ], newProp.cssClass.split(" ")));
                    break;

                  case "enableRtl":
                    this.tooltipEle && (this.enableRtl ? addClass([ this.tooltipEle ], "e-rtl") : removeClass([ this.tooltipEle ], "e-rtl"));
                }
            }
        }, Tooltip.prototype.open = function(element, animation) {
            void 0 === animation && (animation = this.animation.open), "none" !== element.style.display && this.showTooltip(element, animation);
        }, Tooltip.prototype.close = function(animation) {
            void 0 === animation && (animation = this.animation.close), this.hideTooltip(animation);
        }, Tooltip.prototype.refresh = function(target) {
            this.tooltipEle && this.renderContent(target), this.popupObj && target && this.reposition(target);
        }, Tooltip.prototype.destroy = function() {
            _super.prototype.destroy.call(this), removeClass([ this.element ], "e-tooltip"), 
            this.unwireEvents(this.opensOn), this.popupObj && this.popupObj.destroy(), this.tooltipEle && remove(this.tooltipEle), 
            this.tooltipEle = null, this.popupObj = null;
        }, __decorate$13([ Property("auto") ], Tooltip.prototype, "width", void 0), __decorate$13([ Property("auto") ], Tooltip.prototype, "height", void 0), 
        __decorate$13([ Property() ], Tooltip.prototype, "content", void 0), __decorate$13([ Property() ], Tooltip.prototype, "target", void 0), 
        __decorate$13([ Property("TopCenter") ], Tooltip.prototype, "position", void 0), 
        __decorate$13([ Property(0) ], Tooltip.prototype, "offsetX", void 0), __decorate$13([ Property(0) ], Tooltip.prototype, "offsetY", void 0), 
        __decorate$13([ Property(!0) ], Tooltip.prototype, "showTipPointer", void 0), __decorate$13([ Property("Auto") ], Tooltip.prototype, "tipPointerPosition", void 0), 
        __decorate$13([ Property("Auto") ], Tooltip.prototype, "opensOn", void 0), __decorate$13([ Property(!1) ], Tooltip.prototype, "mouseTrail", void 0), 
        __decorate$13([ Property(!1) ], Tooltip.prototype, "isSticky", void 0), __decorate$13([ Complex({}, Animation$1) ], Tooltip.prototype, "animation", void 0), 
        __decorate$13([ Property(0) ], Tooltip.prototype, "openDelay", void 0), __decorate$13([ Property(0) ], Tooltip.prototype, "closeDelay", void 0), 
        __decorate$13([ Property() ], Tooltip.prototype, "cssClass", void 0), __decorate$13([ Property(!1) ], Tooltip.prototype, "enableRtl", void 0), 
        __decorate$13([ Event() ], Tooltip.prototype, "beforeRender", void 0), __decorate$13([ Event() ], Tooltip.prototype, "beforeOpen", void 0), 
        __decorate$13([ Event() ], Tooltip.prototype, "afterOpen", void 0), __decorate$13([ Event() ], Tooltip.prototype, "beforeClose", void 0), 
        __decorate$13([ Event() ], Tooltip.prototype, "afterClose", void 0), __decorate$13([ Event() ], Tooltip.prototype, "beforeCollision", void 0), 
        __decorate$13([ Event() ], Tooltip.prototype, "created", void 0), __decorate$13([ Event() ], Tooltip.prototype, "destroyed", void 0), 
        Tooltip = __decorate$13([ NotifyPropertyChanges ], Tooltip);
    }(Component), globalTimeOut = {}, spinTemplate = null, spinCSSClass = null, DEFT_MAT_WIDTH = 30, DEFT_FAB_WIDTH = 30, DEFT_BOOT_WIDTH = 30, CLS_SHOWSPIN = "e-spin-show", CLS_HIDESPIN = "e-spin-hide", CLS_MATERIALSPIN = "e-spin-material", CLS_FABRICSPIN = "e-spin-fabric", CLS_BOOTSPIN = "e-spin-bootstrap", CLS_HIGHCONTRASTSPIN = "e-spin-high-contrast", CLS_SPINWRAP = "e-spinner-pane", CLS_SPININWRAP = "e-spinner-inner", CLS_SPINCIRCLE = "e-path-circle", CLS_SPINARC = "e-path-arc", CLS_SPINLABEL = "e-spin-label", CLS_SPINTEMPLATE = "e-spin-template", _popups = Object.freeze({
        PositionData: PositionData,
        Popup: Popup,
        getScrollableParent: getScrollableParent,
        getZindexPartial: getZindexPartial,
        getMaxZindex: function(tagName) {
            void 0 === tagName && (tagName = [ "*" ]);
            for (var maxZindex = [], i = 0; i < tagName.length; i++) for (var elements = document.getElementsByTagName(tagName[i]), i_1 = 0; i_1 < elements.length; i_1++) {
                var index = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue("z-index"), position = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue("position");
                "auto" !== index && "static" !== position && maxZindex.push(index);
            }
            var currentZindexValue = Math.max.apply(Math, maxZindex) + 1;
            return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
        },
        calculateRelativeBasedPosition: calculateRelativeBasedPosition,
        calculatePosition: calculatePosition,
        fit: fit,
        isCollide: isCollide,
        flip: flip,
        ButtonProps: ButtonProps,
        AnimationSettings: AnimationSettings,
        Dialog: Dialog,
        get DialogUtility() {
            return DialogUtility;
        },
        Animation: Animation$1,
        Tooltip: Tooltip,
        createSpinner: createSpinner,
        showSpinner: showSpinner,
        hideSpinner: hideSpinner,
        setSpinner: function(args, internalCreateElement) {
            var makeElement = isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement;
            void 0 !== args.template && (spinTemplate = args.template, void 0 !== args.template && (spinCSSClass = args.cssClass));
            for (var container = document.querySelectorAll("." + CLS_SPINWRAP), index = 0; index < container.length; index++) !function(template, container, theme, cssClass, makeEle) {
                isNullOrUndefined(template) && !container.classList.contains(CLS_SPINTEMPLATE) ? (function(container, theme, cssClass, makeEle) {
                    isNullOrUndefined(cssClass) || container.classList.add(cssClass);
                    var svgElement = container.querySelector("svg"), radius = "Bootstrap" === theme ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;
                    if (svgElement.getAttribute("class").split(/\s/).indexOf("e-spin-material") >= 0) {
                        var id = svgElement.getAttribute("id");
                        clearTimeout(globalTimeOut[id].timeOut);
                    }
                    setTheme(theme, container, radius, makeEle);
                }(container, theme, cssClass, makeEle), container.classList.contains(CLS_SHOWSPIN) ? (container.classList.remove(CLS_SHOWSPIN), 
                showSpinner(container)) : (container.classList.remove(CLS_HIDESPIN), hideSpinner(container))) : (spinTemplate = template, 
                isNullOrUndefined(cssClass) || (spinCSSClass = cssClass));
            }(args.template, container[index], args.type, args.cssClass, makeElement);
        }
    }), ValueFormatter = function() {
        function ValueFormatter(cultureName) {
            this.intl = new Internationalization(), isNullOrUndefined(cultureName) || (this.intl.culture = cultureName);
        }
        return ValueFormatter.prototype.getFormatFunction = function(format) {
            return format.type ? this.intl.getDateFormat(format) : this.intl.getNumberFormat(format);
        }, ValueFormatter.prototype.getParserFunction = function(format) {
            return format.type ? this.intl.getDateParser(format) : this.intl.getNumberParser(format);
        }, ValueFormatter.prototype.fromView = function(value, format, type) {
            return "date" !== type && "datetime" !== type && "number" !== type || isNullOrUndefined(format) ? value : format(value);
        }, ValueFormatter.prototype.toView = function(value, format) {
            var result = value;
            return isNullOrUndefined(format) || isNullOrUndefined(value) || (result = format(value)), 
            result;
        }, ValueFormatter.prototype.setCulture = function(cultureName) {
            isNullOrUndefined(cultureName) || setCulture(cultureName);
        }, ValueFormatter;
    }(), Column = function() {
        function Column(options) {
            var _this = this;
            this.allowSorting = !0, this.allowResizing = !0, this.allowFiltering = !0, this.allowGrouping = !0, 
            this.allowReordering = !0, this.showColumnMenu = !0, this.enableGroupByFormat = !1, 
            this.allowEditing = !0, this.filter = {}, this.showInColumnChooser = !0, this.edit = {}, 
            this.sortDirection = "Descending", this.getEditTemplate = function() {
                return _this.editTemplateFn;
            }, this.getFilterTemplate = function() {
                return _this.filterTemplateFn;
            }, merge(this, options), this.uid = getUid("grid-column");
            var valueFormatter = new ValueFormatter();
            if (options.format && (options.format.skeleton || options.format.format) && (this.setFormatter(valueFormatter.getFormatFunction(options.format)), 
            this.setParser(valueFormatter.getParserFunction(options.format))), this.field || (this.allowFiltering = !1, 
            this.allowGrouping = !1, this.allowSorting = !1), this.commands && !this.textAlign && (this.textAlign = "Right"), 
            (this.template || this.commandsTemplate) && (this.templateFn = templateCompiler(this.template || this.commandsTemplate)), 
            this.headerTemplate && (this.headerTemplateFn = templateCompiler(this.headerTemplate)), 
            this.filter.itemTemplate && (this.fltrTemplateFn = templateCompiler(this.filter.itemTemplate)), 
            this.editTemplate && (this.editTemplateFn = templateCompiler(this.editTemplate)), 
            this.filterTemplate && (this.filterTemplateFn = templateCompiler(this.filterTemplate)), 
            this.isForeignColumn() && (isNullOrUndefined(this.editType) || "dropdownedit" === this.editType) && (this.editType = "dropdownedit", 
            this.edit.params = extend({
                dataSource: this.dataSource,
                query: new Query(),
                fields: {
                    value: this.foreignKeyField || this.field,
                    text: this.foreignKeyValue
                }
            }, this.edit.params)), this.sortComparer) {
                var a_1 = this.sortComparer;
                this.sortComparer = function(x, y) {
                    if ("string" == typeof a_1 && (a_1 = getObject$1(a_1, window)), "Descending" === this.sortDirection) {
                        var z = x;
                        x = y, y = z;
                    }
                    return a_1(x, y);
                };
            }
            !this.sortComparer && this.isForeignColumn() && (this.sortComparer = function(x, y) {
                return x = getObject$1(_this.foreignKeyValue, getForeignData(_this, {}, x)[0]), 
                y = getObject$1(_this.foreignKeyValue, getForeignData(_this, {}, y)[0]), "Descending" === _this.sortDirection ? DataUtil.fnDescending(x, y) : DataUtil.fnAscending(x, y);
            });
        }
        return Column.prototype.getSortDirection = function() {
            return this.sortDirection;
        }, Column.prototype.setSortDirection = function(direction) {
            this.sortDirection = direction;
        }, Column.prototype.setProperties = function(column) {
            for (var keys = Object.keys(column), i = 0; i < keys.length; i++) this[keys[i]] = column[keys[i]];
        }, Column.prototype.isForeignColumn = function() {
            return !(!this.dataSource || !this.foreignKeyValue);
        }, Column.prototype.getFormatter = function() {
            return this.formatFn;
        }, Column.prototype.setFormatter = function(value) {
            this.formatFn = value;
        }, Column.prototype.getParser = function() {
            return this.parserFn;
        }, Column.prototype.setParser = function(value) {
            this.parserFn = value;
        }, Column.prototype.getColumnTemplate = function() {
            return this.templateFn;
        }, Column.prototype.getHeaderTemplate = function() {
            return this.headerTemplateFn;
        }, Column.prototype.getFilterItemTemplate = function() {
            return this.fltrTemplateFn;
        }, Column.prototype.getDomSetter = function() {
            return this.disableHtmlEncode ? "textContent" : "innerHTML";
        }, Column;
    }(), uid$1 = 0, scrollWidth = null, actionBegin = "actionBegin", actionComplete = "actionComplete", dataBound = "dataBound", columnDragStart = "columnDragStart", columnDrag = "columnDrag", columnDrop = "columnDrop", rowDragStart = "rowDragStart", rowDrag = "rowDrag", rowDrop = "rowDrop", initialLoad = "initial-load", initialEnd = "initial-end", dataReady = "data-ready", contentReady = "content-ready", uiUpdate = "ui-update", onEmpty = "on-empty", inBoundModelChanged = "inbound-model-changed", modelChanged = "model-changed", colGroupRefresh = "colgroup-refresh", headerRefreshed = "header-refreshed", reorderComplete = "reorder-complete", rowDragAndDropComplete = "rowdraganddrop-complete", keyPressed = "key-pressed", click = "click", destroy$1 = "destroy", columnVisibilityChanged = "column-visible-changed", columnPositionChanged = "column-position-changed", rowsAdded = "rows-added", rowsRemoved = "rows-removed", columnDragStop = "column-drag-stop", headerDrop = "header-drop", dataSourceModified = "datasource-modified", refreshVirtualBlock = "refresh-virtual-block", updateData = "update-data", preventBatch = "prevent-batch", dialogDestroy = "dialog-destroy", addDeleteAction = "add-delete-Action", freezeRender = "freezerender";
    !function(CellType) {
        CellType[CellType.Data = 0] = "Data", CellType[CellType.Header = 1] = "Header", 
        CellType[CellType.Summary = 2] = "Summary", CellType[CellType.GroupSummary = 3] = "GroupSummary", 
        CellType[CellType.CaptionSummary = 4] = "CaptionSummary", CellType[CellType.Filter = 5] = "Filter", 
        CellType[CellType.Indent = 6] = "Indent", CellType[CellType.GroupCaption = 7] = "GroupCaption", 
        CellType[CellType.GroupCaptionEmpty = 8] = "GroupCaptionEmpty", CellType[CellType.Expand = 9] = "Expand", 
        CellType[CellType.HeaderIndent = 10] = "HeaderIndent", CellType[CellType.StackedHeader = 11] = "StackedHeader", 
        CellType[CellType.DetailHeader = 12] = "DetailHeader", CellType[CellType.DetailExpand = 13] = "DetailExpand", 
        CellType[CellType.CommandColumn = 14] = "CommandColumn";
    }(CellType || (CellType = {}));
    var RenderType;
    !function(RenderType) {
        RenderType[RenderType.Header = 0] = "Header", RenderType[RenderType.Content = 1] = "Content", 
        RenderType[RenderType.Summary = 2] = "Summary";
    }(RenderType || (RenderType = {}));
    var ToolbarItem;
    !function(ToolbarItem) {
        ToolbarItem[ToolbarItem.Add = 0] = "Add", ToolbarItem[ToolbarItem.Edit = 1] = "Edit", 
        ToolbarItem[ToolbarItem.Update = 2] = "Update", ToolbarItem[ToolbarItem.Delete = 3] = "Delete", 
        ToolbarItem[ToolbarItem.Cancel = 4] = "Cancel", ToolbarItem[ToolbarItem.Print = 5] = "Print", 
        ToolbarItem[ToolbarItem.Search = 6] = "Search", ToolbarItem[ToolbarItem.ColumnChooser = 7] = "ColumnChooser", 
        ToolbarItem[ToolbarItem.PdfExport = 8] = "PdfExport", ToolbarItem[ToolbarItem.ExcelExport = 9] = "ExcelExport", 
        ToolbarItem[ToolbarItem.CsvExport = 10] = "CsvExport", ToolbarItem[ToolbarItem.WordExport = 11] = "WordExport";
    }(ToolbarItem || (ToolbarItem = {}));
    var Input, CLASSNAMES$1 = {
        RTL: "e-rtl",
        DISABLE: "e-disabled",
        INPUT: "e-input",
        INPUTGROUP: "e-input-group",
        FLOATINPUT: "e-float-input",
        FLOATLINE: "e-float-line",
        FLOATTEXT: "e-float-text",
        CLEARICON: "e-clear-icon",
        CLEARICONHIDE: "e-clear-icon-hide",
        LABELTOP: "e-label-top",
        LABELBOTTOM: "e-label-bottom",
        NOFLOATLABEL: "e-no-float-label",
        INPUTCUSTOMTAG: "e-input-custom-tag",
        FLOATCUSTOMTAG: "e-float-custom-tag"
    };
    !function(Input) {
        function _focusFn() {
            var label = getParentNode(this).getElementsByClassName("e-float-text")[0];
            addClass([ label ], CLASSNAMES$1.LABELTOP), label.classList.contains(CLASSNAMES$1.LABELBOTTOM) && removeClass([ label ], CLASSNAMES$1.LABELBOTTOM);
        }
        function _blurFn() {
            var parent = getParentNode(this);
            if ("" === parent.getElementsByTagName("input")[0].value) {
                var label = parent.getElementsByClassName("e-float-text")[0];
                label.classList.contains(CLASSNAMES$1.LABELTOP) && removeClass([ label ], CLASSNAMES$1.LABELTOP), 
                addClass([ label ], CLASSNAMES$1.LABELBOTTOM);
            }
        }
        function createFloatingInput(args, inputObject, internalCreateElement) {
            var floatLinelement, floatLabelElement, makeElement = isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement;
            "Auto" === args.floatLabelType && function(element) {
                element.addEventListener("focus", _focusFn), element.addEventListener("blur", _blurFn);
            }(args.element), isNullOrUndefined(inputObject.container) ? (inputObject.container = createInputContainer(args, CLASSNAMES$1.FLOATINPUT, CLASSNAMES$1.FLOATCUSTOMTAG, "div", makeElement), 
            args.element.parentNode.insertBefore(inputObject.container, args.element)) : (isNullOrUndefined(args.customTag) || inputObject.container.classList.add(CLASSNAMES$1.FLOATCUSTOMTAG), 
            inputObject.container.classList.add(CLASSNAMES$1.FLOATINPUT)), floatLinelement = makeElement("span", {
                className: CLASSNAMES$1.FLOATLINE
            }), floatLabelElement = makeElement("label", {
                className: CLASSNAMES$1.FLOATTEXT
            }), isNullOrUndefined(args.element.id) || "" === args.element.id || (floatLabelElement.id = "label_" + args.element.id.replace(/ /g, "_"), 
            attributes(args.element, {
                "aria-labelledby": floatLabelElement.id
            })), isNullOrUndefined(args.element.placeholder) || "" === args.element.placeholder || (floatLabelElement.innerHTML = args.element.placeholder, 
            args.element.removeAttribute("placeholder")), isNullOrUndefined(args.properties) || isNullOrUndefined(args.properties.placeholder) || "" === args.properties.placeholder || (floatLabelElement.innerHTML = args.properties.placeholder), 
            floatLabelElement.innerHTML || inputObject.container.classList.add(CLASSNAMES$1.NOFLOATLABEL), 
            inputObject.container.appendChild(args.element), inputObject.container.appendChild(floatLinelement), 
            inputObject.container.appendChild(floatLabelElement), updateLabelState(args.element.value, floatLabelElement), 
            "Always" === args.floatLabelType && (floatLabelElement.classList.contains(CLASSNAMES$1.LABELBOTTOM) && removeClass([ floatLabelElement ], CLASSNAMES$1.LABELBOTTOM), 
            addClass([ floatLabelElement ], CLASSNAMES$1.LABELTOP)), "Auto" === args.floatLabelType && (args.element.addEventListener("input", function(event) {
                updateLabelState(args.element.value, floatLabelElement);
            }), args.element.addEventListener("blur", function(event) {
                updateLabelState(args.element.value, floatLabelElement);
            })), isNullOrUndefined(args.element.getAttribute("id")) || floatLabelElement.setAttribute("for", args.element.getAttribute("id"));
        }
        function updateIconState(value, button) {
            value ? removeClass([ button ], CLASSNAMES$1.CLEARICONHIDE) : addClass([ button ], CLASSNAMES$1.CLEARICONHIDE);
        }
        function updateLabelState(value, label) {
            value ? (addClass([ label ], CLASSNAMES$1.LABELTOP), label.classList.contains(CLASSNAMES$1.LABELBOTTOM) && removeClass([ label ], CLASSNAMES$1.LABELBOTTOM)) : (label.classList.contains(CLASSNAMES$1.LABELTOP) && removeClass([ label ], CLASSNAMES$1.LABELTOP), 
            addClass([ label ], CLASSNAMES$1.LABELBOTTOM));
        }
        function getParentNode(element) {
            return element.parentNode;
        }
        function createClearButton(element, inputObject, initial, internalCreateElement) {
            var button = (isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement)("span", {
                className: CLASSNAMES$1.CLEARICON
            }), container = inputObject.container;
            if (isNullOrUndefined(initial)) {
                (inputObject.container.classList.contains(CLASSNAMES$1.FLOATINPUT) ? inputObject.container.querySelector("." + CLASSNAMES$1.FLOATTEXT) : element).insertAdjacentElement("afterend", button);
            } else container.appendChild(button);
            return !isNullOrUndefined(container) && container.classList.contains(CLASSNAMES$1.FLOATINPUT) && addClass([ container ], CLASSNAMES$1.INPUTGROUP), 
            addClass([ button ], CLASSNAMES$1.CLEARICONHIDE), function(element, button, container) {
                button.addEventListener("click", function(event) {
                    element.classList.contains(CLASSNAMES$1.DISABLE) || element.readOnly || (event.preventDefault(), 
                    element !== document.activeElement && element.focus(), element.value = "", addClass([ button ], CLASSNAMES$1.CLEARICONHIDE));
                }), element.addEventListener("input", function(event) {
                    updateIconState(element.value, button);
                }), element.addEventListener("focus", function(event) {
                    updateIconState(element.value, button);
                }), element.addEventListener("blur", function(event) {
                    setTimeout(function() {
                        addClass([ button ], CLASSNAMES$1.CLEARICONHIDE);
                    }, 200);
                });
            }(element, button), button.setAttribute("aria-label", "close"), button;
        }
        function validateLabel(element, floatLabelType) {
            if (getParentNode(element).classList.contains(CLASSNAMES$1.FLOATINPUT) && "Auto" === floatLabelType) {
                var label = getParentNode(element).getElementsByClassName("e-float-text")[0];
                updateLabelState(element.value, label);
            }
        }
        function createInputContainer(args, className, tagClass, tag, internalCreateElement) {
            var container, makeElement = isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement;
            return isNullOrUndefined(args.customTag) ? container = makeElement(tag, {
                className: className
            }) : (container = makeElement(args.customTag, {
                className: className
            })).classList.add(tagClass), container.classList.add("e-control-wrapper"), container;
        }
        function setCssClass(cssClass, elements, oldClass) {
            isNullOrUndefined(oldClass) || "" === oldClass || removeClass(elements, oldClass.split(" ")), 
            isNullOrUndefined(cssClass) || "" === cssClass || addClass(elements, cssClass.split(" "));
        }
        function setPlaceholder(placeholder, element) {
            var parentElement;
            (parentElement = getParentNode(element)).classList.contains(CLASSNAMES$1.FLOATINPUT) ? isNullOrUndefined(placeholder) || "" === placeholder ? (parentElement.classList.add(CLASSNAMES$1.NOFLOATLABEL), 
            parentElement.getElementsByClassName(CLASSNAMES$1.FLOATTEXT)[0].textContent = "") : (parentElement.getElementsByClassName(CLASSNAMES$1.FLOATTEXT)[0].textContent = placeholder, 
            parentElement.classList.remove(CLASSNAMES$1.NOFLOATLABEL)) : isNullOrUndefined(placeholder) || "" === placeholder ? (element.removeAttribute("placeholder"), 
            element.removeAttribute("aria-placeholder")) : attributes(element, {
                placeholder: placeholder,
                "aria-placeholder": placeholder
            });
        }
        function setReadonly(isReadonly, element, floatLabelType) {
            isReadonly ? attributes(element, {
                readonly: ""
            }) : element.removeAttribute("readonly"), isNullOrUndefined(floatLabelType) || validateLabel(element, floatLabelType);
        }
        function setEnableRtl(isRtl, elements) {
            isRtl ? addClass(elements, CLASSNAMES$1.RTL) : removeClass(elements, CLASSNAMES$1.RTL);
        }
        function setEnabled(isEnable, element, floatLabelType, inputContainer) {
            var disabledAttrs = {
                disabled: "disabled",
                "aria-disabled": "true"
            }, considerWrapper = !isNullOrUndefined(inputContainer);
            isEnable ? (element.classList.remove(CLASSNAMES$1.DISABLE), removeAttributes(disabledAttrs, element), 
            considerWrapper && removeClass([ inputContainer ], CLASSNAMES$1.DISABLE)) : (element.classList.add(CLASSNAMES$1.DISABLE), 
            addAttributes(disabledAttrs, element), considerWrapper && addClass([ inputContainer ], CLASSNAMES$1.DISABLE)), 
            isNullOrUndefined(floatLabelType) || validateLabel(element, floatLabelType);
        }
        function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {
            var makeElement = isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement;
            isClear ? inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement) : (inputObject.clearButton.remove(), 
            inputObject.clearButton = null);
        }
        function removeAttributes(attrs, element) {
            for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
                var key = _a[_i], parentElement = void 0;
                parentElement = getParentNode(element), "disabled" === key && element.classList.remove(CLASSNAMES$1.DISABLE), 
                "disabled" === key && parentElement.classList.contains(CLASSNAMES$1.INPUTGROUP) && parentElement.classList.remove(CLASSNAMES$1.DISABLE), 
                "placeholder" === key && parentElement.classList.contains(CLASSNAMES$1.FLOATINPUT) ? parentElement.getElementsByClassName(CLASSNAMES$1.FLOATTEXT)[0].textContent = "" : element.removeAttribute(key);
            }
        }
        function addAttributes(attrs, element) {
            for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
                var key = _a[_i], parentElement = void 0;
                parentElement = getParentNode(element), "disabled" === key && element.classList.add(CLASSNAMES$1.DISABLE), 
                "disabled" === key && parentElement.classList.contains(CLASSNAMES$1.INPUTGROUP) && parentElement.classList.add(CLASSNAMES$1.DISABLE), 
                "placeholder" === key && parentElement.classList.contains(CLASSNAMES$1.FLOATINPUT) ? parentElement.getElementsByClassName(CLASSNAMES$1.FLOATTEXT)[0].textContent = attrs[key] : element.setAttribute(key, attrs[key]);
            }
        }
        function _internalRipple(isRipple, container, button) {
            var argsButton = [];
            argsButton.push(button);
            var buttons = isNullOrUndefined(button) ? container.querySelectorAll(".e-input-group-icon") : argsButton;
            if (isRipple && buttons.length > 0) for (var index = 0; index < buttons.length; index++) buttons[index].addEventListener("mousedown", _onMouseDownRipple, !1), 
            buttons[index].addEventListener("mouseup", _onMouseUpRipple, !1); else if (buttons.length > 0) for (index = 0; index < buttons.length; index++) buttons[index].removeEventListener("mousedown", _onMouseDownRipple, this), 
            buttons[index].removeEventListener("mouseup", _onMouseUpRipple, this);
        }
        function _onMouseDownRipple() {
            for (var parentEle = this.parentElement; !parentEle.classList.contains("e-input-group"); ) parentEle = parentEle.parentElement;
            !function(container, button) {
                container.classList.contains("e-disabled") || container.querySelector("input").readOnly || button.classList.add("e-input-btn-ripple");
            }(parentEle, this);
        }
        function _onMouseUpRipple() {
            var ele = this;
            setTimeout(function() {
                ele.classList.remove("e-input-btn-ripple");
            }, 500);
        }
        function appendSpan(iconClass, container, internalCreateElement) {
            var button = (isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement)("span", {
                className: iconClass
            });
            return button.classList.add("e-input-group-icon"), container.appendChild(button), 
            container.classList.contains(CLASSNAMES$1.INPUTGROUP) || container.classList.add(CLASSNAMES$1.INPUTGROUP), 
            _internalRipple(!0, container, button), button;
        }
        Input.createInput = function(args, internalCreateElement) {
            var makeElement = isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement, inputObject = {
                container: null,
                buttons: [],
                clearButton: null
            };
            if (isNullOrUndefined(args.floatLabelType) || "Never" === args.floatLabelType ? (inputObject.container = createInputContainer(args, CLASSNAMES$1.INPUTGROUP, CLASSNAMES$1.INPUTCUSTOMTAG, "span", makeElement), 
            args.element.parentNode.insertBefore(inputObject.container, args.element), addClass([ args.element ], CLASSNAMES$1.INPUT), 
            inputObject.container.appendChild(args.element)) : createFloatingInput(args, inputObject, makeElement), 
            args.element.addEventListener("focus", function() {
                var parent = getParentNode(this);
                parent.classList.contains("e-input-group") && parent.classList.add("e-input-focus");
            }), args.element.addEventListener("blur", function() {
                var parent = getParentNode(this);
                parent.classList.contains("e-input-group") && parent.classList.remove("e-input-focus");
            }), isNullOrUndefined(args.properties) || isNullOrUndefined(args.properties.showClearButton) || !args.properties.showClearButton || (setClearButton(args.properties.showClearButton, args.element, inputObject, !0, makeElement), 
            inputObject.container.classList.contains(CLASSNAMES$1.FLOATINPUT) && addClass([ inputObject.container ], CLASSNAMES$1.INPUTGROUP)), 
            !isNullOrUndefined(args.buttons)) for (var i = 0; i < args.buttons.length; i++) inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));
            return inputObject = function(args, inputObject) {
                if (!isNullOrUndefined(args.properties)) for (var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++) {
                    var prop = _a[_i];
                    switch (prop) {
                      case "cssClass":
                        setCssClass(args.properties.cssClass, [ inputObject.container ]);
                        break;

                      case "enabled":
                        setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);
                        break;

                      case "enableRtl":
                        setEnableRtl(args.properties.enableRtl, [ inputObject.container ]);
                        break;

                      case "placeholder":
                        setPlaceholder(args.properties.placeholder, args.element);
                        break;

                      case "readonly":
                        setReadonly(args.properties.readonly, args.element);
                    }
                }
                return inputObject;
            }(args, inputObject);
        }, Input.setValue = function(value, element, floatLabelType, clearButton) {
            if (element.value = value, isNullOrUndefined(floatLabelType) || "Auto" !== floatLabelType || validateLabel(element, floatLabelType), 
            !isNullOrUndefined(clearButton) && clearButton) {
                var parentElement = getParentNode(element), button = parentElement.getElementsByClassName(CLASSNAMES$1.CLEARICON)[0];
                element.value && parentElement.classList.contains("e-input-focus") ? removeClass([ button ], CLASSNAMES$1.CLEARICONHIDE) : addClass([ button ], CLASSNAMES$1.CLEARICONHIDE);
            }
        }, Input.setCssClass = setCssClass, Input.setPlaceholder = setPlaceholder, Input.setReadonly = setReadonly, 
        Input.setEnableRtl = setEnableRtl, Input.setEnabled = setEnabled, Input.setClearButton = setClearButton, 
        Input.removeAttributes = removeAttributes, Input.addAttributes = addAttributes, 
        Input.removeFloating = function(input) {
            var container = input.container;
            if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES$1.FLOATINPUT)) {
                var inputEle = container.querySelector("input"), placeholder = container.querySelector("." + CLASSNAMES$1.FLOATTEXT).textContent, clearButton = null !== container.querySelector(".e-clear-icon");
                detach(container.querySelector("." + CLASSNAMES$1.FLOATLINE)), detach(container.querySelector("." + CLASSNAMES$1.FLOATTEXT)), 
                classList(container, [ CLASSNAMES$1.INPUTGROUP ], [ CLASSNAMES$1.FLOATINPUT ]), 
                function(element) {
                    element.removeEventListener("focus", _focusFn), element.removeEventListener("blur", _blurFn);
                }(inputEle), attributes(inputEle, {
                    placeholder: placeholder
                }), inputEle.classList.add(CLASSNAMES$1.INPUT), clearButton || inputEle.removeAttribute("required");
            }
        }, Input.addFloating = function(input, type, placeholder, internalCreateElement) {
            var makeElement = isNullOrUndefined(internalCreateElement) ? createElement : internalCreateElement, container = closest(input, "." + CLASSNAMES$1.INPUTGROUP);
            if ("Never" !== type) {
                var customTag = container.tagName, args = {
                    element: input,
                    floatLabelType: type,
                    customTag: customTag = "DIV" !== customTag && "SPAN" !== customTag ? customTag : null,
                    properties: {
                        placeholder: placeholder
                    }
                }, iconEle = container.querySelector(".e-clear-icon"), inputObj = {
                    container: container
                };
                if (input.classList.remove(CLASSNAMES$1.INPUT), createFloatingInput(args, inputObj, makeElement), 
                isNullOrUndefined(iconEle) && (iconEle = container.querySelector(".e-input-group-icon")), 
                isNullOrUndefined(iconEle)) container.classList.remove(CLASSNAMES$1.INPUTGROUP); else {
                    var floatLine = container.querySelector("." + CLASSNAMES$1.FLOATLINE), floatText = container.querySelector("." + CLASSNAMES$1.FLOATTEXT);
                    container.insertBefore(input, iconEle), container.insertBefore(floatLine, iconEle), 
                    container.insertBefore(floatText, iconEle);
                }
            }
        }, Input.setRipple = function(isRipple, inputObj) {
            for (var i = 0; i < inputObj.length; i++) _internalRipple(isRipple, inputObj[i].container);
        }, Input.appendSpan = appendSpan;
    }(Input || (Input = {}));
    var ErrorOption, __extends$15 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$14 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, SPINICON = "e-input-group-icon", INTREGEXP = new RegExp("^(-)?(\\d*)$"), NumericTextBox = function(_super) {
        function NumericTextBox(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$15(NumericTextBox, _super), NumericTextBox.prototype.preRender = function() {
            this.isPrevFocused = !1, this.decimalSeparator = ".", this.intRegExp = new RegExp("/^(-)?(d*)$/"), 
            this.isCalled = !1;
            var ejInstance = getValue("ej2_instances", this.element);
            if (this.cloneElement = this.element.cloneNode(!0), removeClass([ this.cloneElement ], [ "e-control", "e-numerictextbox" ]), 
            this.angularTagName = null, "EJS-NUMERICTEXTBOX" === this.element.tagName) {
                this.angularTagName = this.element.tagName;
                for (var input = this.createElement("input"), index = 0; index < this.element.attributes.length; index++) input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue), 
                input.innerHTML = this.element.innerHTML;
                this.element.hasAttribute("id") && this.element.removeAttribute("id"), this.element.classList.remove("e-control", "e-numerictextbox"), 
                this.element.appendChild(input), this.element = input, setValue("ej2_instances", ejInstance, this.element);
            }
            attributes(this.element, {
                role: "spinbutton",
                tabindex: "0",
                autocomplete: "off",
                "aria-live": "assertive"
            });
            this.l10n = new L10n("numerictextbox", {
                incrementTitle: "Increment value",
                decrementTitle: "Decrement value",
                placeholder: ""
            }, this.locale), this.isValidState = !0, this.inputStyle = null, this.inputName = null, 
            this.cultureInfo = {}, this.initCultureInfo(), this.initCultureFunc(), this.checkAttributes(), 
            this.prevValue = this.value, this.validateMinMax(), this.validateStep(), null === this.placeholder && this.updatePlaceholder();
        }, NumericTextBox.prototype.render = function() {
            "input" === this.element.tagName.toLowerCase() && (this.createWrapper(), this.showSpinButton && this.spinBtnCreation(), 
            isNullOrUndefined(this.width) || setStyleAttribute(this.container, {
                width: formatUnit(this.width)
            }), this.container.classList.contains("e-input-group") || this.container.classList.add("e-input-group"), 
            this.changeValue(null === this.value || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value), 
            this.wireEvents(), null === this.value || isNaN(this.value) || this.decimals && this.setProperties({
                value: this.roundNumber(this.value, this.decimals)
            }, !0));
        }, NumericTextBox.prototype.checkAttributes = function() {
            for (var _i = 0, attributes_1 = [ "value", "min", "max", "step", "disabled", "readonly", "style", "name" ]; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!isNullOrUndefined(this.element.getAttribute(prop))) switch (prop) {
                  case "disabled":
                    var enabled = "disabled" !== this.element.getAttribute(prop) && "true" !== this.element.getAttribute(prop);
                    this.setProperties({
                        enabled: enabled
                    }, !0);
                    break;

                  case "readonly":
                    var readonly = "readonly" === this.element.getAttribute(prop) || "true" === this.element.getAttribute(prop);
                    this.setProperties({
                        readonly: readonly
                    }, !0);
                    break;

                  case "style":
                    this.inputStyle = this.element.getAttribute(prop);
                    break;

                  case "name":
                    this.inputName = this.element.getAttribute(prop);
                    break;

                  default:
                    var value = this.instance.getNumberParser({
                        format: "n"
                    })(this.element.getAttribute(prop));
                    (null !== value && !isNaN(value) || "value" === prop) && this.setProperties(setValue(prop, value, {}), !0);
                }
            }
        }, NumericTextBox.prototype.updatePlaceholder = function() {
            this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
            }, !0);
        }, NumericTextBox.prototype.initCultureFunc = function() {
            this.instance = new Internationalization(this.locale);
        }, NumericTextBox.prototype.initCultureInfo = function() {
            this.cultureInfo.format = this.format, null !== getValue("currency", this) && (setValue("currency", this.currency, this.cultureInfo), 
            this.setProperties({
                currencyCode: this.currency
            }, !0));
        }, NumericTextBox.prototype.createWrapper = function() {
            var inputObj = Input.createInput({
                element: this.element,
                floatLabelType: this.floatLabelType,
                properties: {
                    readonly: this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton,
                    enabled: this.enabled
                }
            }, this.createElement);
            this.inputWrapper = inputObj, this.container = inputObj.container, this.container.setAttribute("class", "e-control-wrapper e-numeric " + this.container.getAttribute("class")), 
            this.readonly && attributes(this.element, {
                "aria-readonly": "true"
            }), this.hiddenInput = this.createElement("input", {
                attrs: {
                    type: "hidden",
                    validateHidden: "true"
                }
            }), this.inputName = null !== this.inputName ? this.inputName : this.element.id, 
            this.element.removeAttribute("name"), attributes(this.hiddenInput, {
                name: this.inputName
            }), this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]), 
            null !== this.inputStyle && attributes(this.container, {
                style: this.inputStyle
            });
        }, NumericTextBox.prototype.spinBtnCreation = function() {
            this.spinDown = Input.appendSpan(SPINICON + " e-spin-down", this.container, this.createElement), 
            attributes(this.spinDown, {
                title: this.l10n.getConstant("decrementTitle"),
                "aria-label": this.l10n.getConstant("decrementTitle")
            }), this.spinUp = Input.appendSpan(SPINICON + " e-spin-up", this.container, this.createElement), 
            attributes(this.spinUp, {
                title: this.l10n.getConstant("incrementTitle"),
                "aria-label": this.l10n.getConstant("incrementTitle")
            }), this.wireSpinBtnEvents();
        }, NumericTextBox.prototype.validateMinMax = function() {
            ("number" != typeof this.min || isNaN(this.min)) && this.setProperties({
                min: -Number.MAX_VALUE
            }, !0), ("number" != typeof this.max || isNaN(this.max)) && this.setProperties({
                max: Number.MAX_VALUE
            }, !0), null !== this.decimals && (this.min !== -Number.MAX_VALUE && this.setProperties({
                min: this.instance.getNumberParser({
                    format: "n"
                })(this.formattedValue(this.decimals, this.min))
            }, !0), this.max !== Number.MAX_VALUE && this.setProperties({
                max: this.instance.getNumberParser({
                    format: "n"
                })(this.formattedValue(this.decimals, this.max))
            }, !0)), this.setProperties({
                min: this.min > this.max ? this.max : this.min
            }, !0), attributes(this.element, {
                "aria-valuemin": this.min.toString(),
                "aria-valuemax": this.max.toString()
            });
        }, NumericTextBox.prototype.formattedValue = function(decimals, value) {
            return this.instance.getNumberFormat({
                maximumFractionDigits: decimals,
                minimumFractionDigits: decimals,
                useGrouping: !1
            })(value);
        }, NumericTextBox.prototype.validateStep = function() {
            null !== this.decimals && this.setProperties({
                step: this.instance.getNumberParser({
                    format: "n"
                })(this.formattedValue(this.decimals, this.step))
            }, !0);
        }, NumericTextBox.prototype.action = function(operation, event) {
            this.isInteract = !0;
            var value = this.isFocused ? this.instance.getNumberParser({
                format: "n"
            })(this.element.value) : this.value;
            this.changeValue(this.performAction(value, this.step, operation)), this.raiseChangeEvent(event);
        }, NumericTextBox.prototype.checkErrorClass = function() {
            this.isValidState ? removeClass([ this.container ], "e-error") : addClass([ this.container ], "e-error"), 
            attributes(this.element, {
                "aria-invalid": this.isValidState ? "false" : "true"
            });
        }, NumericTextBox.prototype.bindClearEvent = function() {
            this.showClearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
        }, NumericTextBox.prototype.resetHandler = function(e) {
            e.preventDefault(), this.inputWrapper.clearButton.classList.contains("e-clear-icon-hide") || this.clear(e);
        }, NumericTextBox.prototype.clear = function(event) {
            this.setProperties({
                value: null
            }, !0), this.setElementValue("");
        }, NumericTextBox.prototype.wireEvents = function() {
            EventHandler.add(this.element, "focus", this.focusIn, this), EventHandler.add(this.element, "blur", this.focusOut, this), 
            EventHandler.add(this.element, "keydown", this.keyDownHandler, this), EventHandler.add(this.element, "keyup", this.keyUpHandler, this), 
            EventHandler.add(this.element, "input", this.inputHandler, this), EventHandler.add(this.element, "keypress", this.keyPressHandler, this), 
            EventHandler.add(this.element, "change", this.changeHandler, this), EventHandler.add(this.element, "paste", this.pasteHandler, this), 
            this.enabled && this.bindClearEvent();
        }, NumericTextBox.prototype.wireSpinBtnEvents = function() {
            EventHandler.add(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner, this), 
            EventHandler.add(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner, this), 
            EventHandler.add(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner, this), 
            EventHandler.add(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner, this), 
            EventHandler.add(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner, this), 
            EventHandler.add(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
        }, NumericTextBox.prototype.unwireEvents = function() {
            EventHandler.remove(this.element, "focus", this.focusIn), EventHandler.remove(this.element, "blur", this.focusOut), 
            EventHandler.remove(this.element, "keyup", this.keyUpHandler), EventHandler.remove(this.element, "input", this.inputHandler), 
            EventHandler.remove(this.element, "keydown", this.keyDownHandler), EventHandler.remove(this.element, "keypress", this.keyPressHandler), 
            EventHandler.remove(this.element, "change", this.changeHandler), EventHandler.remove(this.element, "paste", this.pasteHandler);
        }, NumericTextBox.prototype.unwireSpinBtnEvents = function() {
            EventHandler.remove(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner), 
            EventHandler.remove(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner), 
            EventHandler.remove(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner), 
            EventHandler.remove(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner), 
            EventHandler.remove(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner), 
            EventHandler.remove(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner);
        }, NumericTextBox.prototype.changeHandler = function(event) {
            event.stopPropagation(), this.element.value.length || this.setProperties({
                value: null
            }, !0);
            var parsedInput = this.instance.getNumberParser({
                format: "n"
            })(this.element.value);
            this.updateValue(parsedInput, event);
        }, NumericTextBox.prototype.raiseChangeEvent = function(event) {
            if (this.prevValue !== this.value) {
                var eventArgs = {};
                this.changeEventArgs = {
                    value: this.value,
                    previousValue: this.prevValue,
                    isInteraction: this.isInteract,
                    event: event
                }, event && (this.changeEventArgs.event = event), merge(eventArgs, this.changeEventArgs), 
                this.prevValue = this.value, this.isInteract = !1, this.trigger("change", eventArgs);
            }
        }, NumericTextBox.prototype.pasteHandler = function() {
            var _this = this, beforeUpdate = this.element.value;
            setTimeout(function() {
                _this.numericRegex().test(_this.element.value) || _this.setElementValue(beforeUpdate);
            });
        }, NumericTextBox.prototype.preventHandler = function() {
            var _this = this, iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
            setTimeout(function() {
                if (_this.element.selectionStart > 0) {
                    var currentPos = _this.element.selectionStart, prevPos = _this.element.selectionStart - 1, ignoreKeyCode = void 0, valArray = _this.element.value.split("");
                    ignoreKeyCode = getValue("decimal", getNumericObject(_this.locale)).charCodeAt(0), 
                    " " === _this.element.value[prevPos] && _this.element.selectionStart > 0 && !iOS ? (isNullOrUndefined(_this.prevVal) ? _this.element.value = _this.element.value.trim() : 0 !== prevPos ? _this.element.value = _this.prevVal : 0 === prevPos && (_this.element.value = _this.element.value.trim()), 
                    _this.element.setSelectionRange(prevPos, prevPos)) : isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && 45 !== _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) ? (valArray.indexOf(_this.element.value[_this.element.selectionStart - 1]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 1]) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) && (_this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length), 
                    _this.element.setSelectionRange(prevPos, prevPos), isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.selectionStart > 0 && _this.element.value.length && _this.preventHandler()) : isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 2])) && _this.element.selectionStart > 1 && 45 !== _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) && (valArray.indexOf(_this.element.value[_this.element.selectionStart - 2]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 2]) && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) && (_this.element.setSelectionRange(prevPos, prevPos), 
                    _this.nextEle = _this.element.value[_this.element.selectionStart], _this.cursorPosChanged = !0, 
                    _this.preventHandler()), !0 === _this.cursorPosChanged && _this.element.value[_this.element.selectionStart] === _this.nextEle && isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && (_this.element.setSelectionRange(_this.element.selectionStart + 1, _this.element.selectionStart + 1), 
                    _this.cursorPosChanged = !1, _this.nextEle = null), "" === _this.element.value.trim() && _this.element.setSelectionRange(0, 0), 
                    _this.element.selectionStart > 0 && 45 === _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) && _this.element.selectionStart > 1 && (isNullOrUndefined(_this.prevVal) ? _this.element.value = _this.element.value : _this.element.value = _this.prevVal, 
                    _this.element.setSelectionRange(_this.element.selectionStart, _this.element.selectionStart)), 
                    _this.prevVal = _this.element.value;
                }
            });
        }, NumericTextBox.prototype.keyUpHandler = function(event) {
            !(!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) && Browser.isDevice && this.preventHandler();
        }, NumericTextBox.prototype.inputHandler = function(event) {
            var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
            (navigator.userAgent.toLowerCase().indexOf("firefox") > -1 || iOS) && Browser.isDevice && this.preventHandler();
        }, NumericTextBox.prototype.keyDownHandler = function(event) {
            if (!this.readonly) switch (event.keyCode) {
              case 38:
                event.preventDefault(), this.action("increment", event);
                break;

              case 40:
                event.preventDefault(), this.action("decrement", event);
            }
        }, NumericTextBox.prototype.performAction = function(value, step, operation) {
            (null === value || isNaN(value)) && (value = 0);
            var updatedValue = "increment" === operation ? value + step : value - step;
            return updatedValue = this.correctRounding(value, step, updatedValue), this.strictMode ? this.trimValue(updatedValue) : updatedValue;
        }, NumericTextBox.prototype.correctRounding = function(value, step, result) {
            var floatExp = new RegExp("[,.](.*)"), floatValue = (value.toString(), step.toString(), 
            floatExp.test(value.toString())), floatStep = floatExp.test(step.toString());
            if (floatValue || floatStep) {
                var valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0, stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0, max = Math.max(valueCount, stepCount);
                return value = this.roundValue(result, max);
            }
            return result;
        }, NumericTextBox.prototype.roundValue = function(result, precision) {
            precision = precision || 0;
            var divide = Math.pow(10, precision);
            return result *= divide, result = Math.round(result) / divide;
        }, NumericTextBox.prototype.updateValue = function(value, event) {
            event && (this.isInteract = !0), null === value || isNaN(value) || this.decimals && (value = this.roundNumber(value, this.decimals)), 
            this.changeValue(null === value || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value), 
            this.raiseChangeEvent(event);
        }, NumericTextBox.prototype.updateCurrency = function(prop, propVal) {
            setValue(prop, propVal, this.cultureInfo), this.updateValue(this.value);
        }, NumericTextBox.prototype.changeValue = function(value) {
            if (value || 0 === value) {
                var numberOfDecimals = void 0, decimalPart = value.toString().split(".")[1];
                numberOfDecimals = decimalPart && decimalPart.length ? decimalPart.length : 0, null !== this.decimals && (numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals), 
                this.setProperties({
                    value: this.roundNumber(value, numberOfDecimals)
                }, !0);
            } else value = null, this.setProperties({
                value: value
            }, !0);
            this.modifyText(), this.strictMode || this.validateState();
        }, NumericTextBox.prototype.modifyText = function() {
            if (this.value || 0 === this.value) {
                var value = this.formatNumber(), elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);
                this.setElementValue(elementValue), attributes(this.element, {
                    "aria-valuenow": value
                }), this.hiddenInput.value = value;
            } else this.setElementValue(""), this.element.removeAttribute("aria-valuenow"), 
            this.hiddenInput.value = null;
        }, NumericTextBox.prototype.setElementValue = function(val, element) {
            Input.setValue(val, element || this.element, this.floatLabelType, this.showClearButton);
        }, NumericTextBox.prototype.validateState = function() {
            this.isValidState = !0, (this.value || 0 === this.value) && (this.isValidState = !(this.value > this.max || this.value < this.min)), 
            this.checkErrorClass();
        }, NumericTextBox.prototype.formatNumber = function() {
            var numberOfDecimals, decimalPart = this.value.toString().split(".")[1];
            return numberOfDecimals = decimalPart && decimalPart.length ? decimalPart.length : 0, 
            null !== this.decimals && (numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals), 
            this.instance.getNumberFormat({
                maximumFractionDigits: numberOfDecimals,
                minimumFractionDigits: numberOfDecimals,
                useGrouping: !1
            })(this.value);
        }, NumericTextBox.prototype.trimValue = function(value) {
            return value > this.max ? this.max : value < this.min ? this.min : value;
        }, NumericTextBox.prototype.roundNumber = function(value, precision) {
            var result = value, decimals = precision || 0, result1 = result.toString().split("e"), result2 = (result = Math.round(Number(result1[0] + "e" + (result1[1] ? Number(result1[1]) + decimals : decimals)))).toString().split("e");
            return result = Number(result2[0] + "e" + (result2[1] ? Number(result2[1]) - decimals : -decimals)), 
            Number(result.toFixed(decimals));
        }, NumericTextBox.prototype.cancelEvent = function(event) {
            return event.preventDefault(), !1;
        }, NumericTextBox.prototype.keyPressHandler = function(event) {
            if (!Browser.isDevice && "11.0" === Browser.info.version && 13 === event.keyCode) {
                var parsedInput = this.instance.getNumberParser({
                    format: "n"
                })(this.element.value);
                return this.updateValue(parsedInput, event), !0;
            }
            if (0 === event.which || event.metaKey || event.ctrlKey || 8 === event.keyCode || 13 === event.keyCode) return !0;
            var currentChar = String.fromCharCode(event.which), text = this.element.value;
            return text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd), 
            !!this.numericRegex().test(text) || (event.preventDefault(), event.stopPropagation(), 
            !1);
        }, NumericTextBox.prototype.numericRegex = function() {
            var decimalSeparator = getValue("decimal", getNumericObject(this.locale)), fractionRule = "*";
            return "." === decimalSeparator && (decimalSeparator = "\\" + decimalSeparator), 
            0 === this.decimals && this.validateDecimalOnType ? INTREGEXP : (this.decimals && this.validateDecimalOnType && (fractionRule = "{0," + this.decimals + "}"), 
            new RegExp("^(-)?(((\\d+(" + decimalSeparator + "\\d" + fractionRule + ")?)|(" + decimalSeparator + "\\d" + fractionRule + ")))?$"));
        }, NumericTextBox.prototype.mouseWheel = function(event) {
            event.preventDefault();
            var delta, rawEvent = event;
            rawEvent.wheelDelta ? delta = rawEvent.wheelDelta / 120 : rawEvent.detail && (delta = -rawEvent.detail / 3), 
            delta > 0 ? this.action("increment", event) : delta < 0 && this.action("decrement", event), 
            this.cancelEvent(event);
        }, NumericTextBox.prototype.focusIn = function(event) {
            var _this = this;
            if (this.enabled && !this.readonly) {
                if (this.isFocused = !0, removeClass([ this.container ], "e-error"), this.prevValue = this.value, 
                this.value || 0 === this.value) {
                    var formatValue_1 = this.formatNumber();
                    if (this.setElementValue(formatValue_1), !this.isPrevFocused) {
                        var delay = Browser.isDevice && Browser.isIos ? 600 : 0;
                        setTimeout(function() {
                            _this.element.setSelectionRange(0, formatValue_1.length);
                        }, delay);
                    }
                }
                Browser.isDevice || EventHandler.add(this.element, "mousewheel DOMMouseScroll", this.mouseWheel, this);
            }
        }, NumericTextBox.prototype.focusOut = function(event) {
            var _this = this;
            if (this.isPrevFocused) {
                if (event.preventDefault(), Browser.isDevice) {
                    var value_1 = this.element.value;
                    this.element.focus(), this.isPrevFocused = !1;
                    var ele_1 = this.element;
                    setTimeout(function() {
                        _this.setElementValue(value_1, ele_1);
                    }, 200);
                }
            } else {
                this.isFocused = !1, this.element.value.length || this.setProperties({
                    value: null
                }, !0);
                var parsedInput = this.instance.getNumberParser({
                    format: "n"
                })(this.element.value);
                this.updateValue(parsedInput), Browser.isDevice || EventHandler.remove(this.element, "mousewheel DOMMouseScroll", this.mouseWheel);
            }
            if (closest(this.element, "form")) {
                var element = this.element.nextElementSibling, focusEvent = document.createEvent("FocusEvent");
                focusEvent.initEvent("focusout", !1, !0), element.dispatchEvent(focusEvent);
            }
        }, NumericTextBox.prototype.mouseDownOnSpinner = function(event) {
            var _this = this;
            if (this.isFocused && (this.isPrevFocused = !0, event.preventDefault()), this.getElementData(event)) {
                this.getElementData(event);
                var target = event.currentTarget, action = target.classList.contains("e-spin-up") ? "increment" : "decrement";
                EventHandler.add(target, "mouseleave", this.mouseUpClick, this), this.timeOut = setInterval(function() {
                    _this.isCalled = !0, _this.action(action, event);
                }, 150), EventHandler.add(document, "mouseup", this.mouseUpClick, this);
            }
        }, NumericTextBox.prototype.touchMoveOnSpinner = function(event) {
            document.elementFromPoint(event.clientX, event.clientY).classList.contains(SPINICON) || clearInterval(this.timeOut);
        }, NumericTextBox.prototype.mouseUpOnSpinner = function(event) {
            if (this.isPrevFocused && (this.element.focus(), Browser.isDevice || (this.isPrevFocused = !1)), 
            Browser.isDevice || event.preventDefault(), this.getElementData(event)) {
                var target = event.currentTarget, action = target.classList.contains("e-spin-up") ? "increment" : "decrement";
                EventHandler.remove(target, "mouseleave", this.mouseUpClick), this.isCalled || this.action(action, event), 
                this.isCalled = !1, EventHandler.remove(document, "mouseup", this.mouseUpClick);
            }
        }, NumericTextBox.prototype.getElementData = function(event) {
            return !(event.which && 3 === event.which || event.button && 2 === event.button || !this.enabled || this.readonly) && (clearInterval(this.timeOut), 
            !0);
        }, NumericTextBox.prototype.floatLabelTypeUpdate = function() {
            Input.removeFloating(this.inputWrapper);
            var hiddenInput = this.hiddenInput;
            this.hiddenInput.remove(), Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement), 
            this.container.insertBefore(hiddenInput, this.container.childNodes[1]);
        }, NumericTextBox.prototype.mouseUpClick = function(event) {
            event.stopPropagation(), clearInterval(this.timeOut), this.isCalled = !1, EventHandler.remove(this.spinUp, "mouseleave", this.mouseUpClick), 
            EventHandler.remove(this.spinDown, "mouseleave", this.mouseUpClick);
        }, NumericTextBox.prototype.increment = function(step) {
            void 0 === step && (step = this.step), this.isInteract = !1, this.changeValue(this.performAction(this.value, step, "increment")), 
            this.raiseChangeEvent();
        }, NumericTextBox.prototype.decrement = function(step) {
            void 0 === step && (step = this.step), this.isInteract = !1, this.changeValue(this.performAction(this.value, step, "decrement")), 
            this.raiseChangeEvent();
        }, NumericTextBox.prototype.destroy = function() {
            this.unwireEvents(), detach(this.hiddenInput), this.showSpinButton && (this.unwireSpinBtnEvents(), 
            detach(this.spinUp), detach(this.spinDown)), this.container.parentElement.appendChild(this.cloneElement), 
            detach(this.container), _super.prototype.destroy.call(this);
        }, NumericTextBox.prototype.getText = function() {
            return this.element.value;
        }, NumericTextBox.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, NumericTextBox.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "width":
                    setStyleAttribute(this.container, {
                        width: formatUnit(newProp.width)
                    });
                    break;

                  case "cssClass":
                    Input.setCssClass(newProp.cssClass, [ this.container ], oldProp.cssClass);
                    break;

                  case "enabled":
                    Input.setEnabled(newProp.enabled, this.element);
                    break;

                  case "enableRtl":
                    Input.setEnableRtl(newProp.enableRtl, [ this.container ]);
                    break;

                  case "readonly":
                    Input.setReadonly(newProp.readonly, this.element), this.readonly ? attributes(this.element, {
                        "aria-readonly": "true"
                    }) : this.element.removeAttribute("aria-readonly");
                    break;

                  case "placeholder":
                    Input.setPlaceholder(newProp.placeholder, this.element);
                    break;

                  case "step":
                    this.step = newProp.step, this.validateStep();
                    break;

                  case "showSpinButton":
                    newProp.showSpinButton ? this.spinBtnCreation() : (detach(this.spinUp), detach(this.spinDown));
                    break;

                  case "showClearButton":
                    Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, void 0, this.createElement), 
                    this.bindClearEvent();
                    break;

                  case "floatLabelType":
                    this.floatLabelType = newProp.floatLabelType, this.floatLabelTypeUpdate();
                    break;

                  case "value":
                    this.updateValue(newProp.value);
                    break;

                  case "min":
                  case "max":
                    setValue(prop, getValue(prop, newProp), this), this.validateMinMax(), this.updateValue(this.value);
                    break;

                  case "strictMode":
                    this.strictMode = newProp.strictMode, this.updateValue(this.value), this.validateState();
                    break;

                  case "locale":
                    this.initCultureFunc(), this.l10n.setLocale(this.locale), isNullOrUndefined(this.spinDown) || attributes(this.spinDown, {
                        title: this.l10n.getConstant("decrementTitle"),
                        "aria-label": this.l10n.getConstant("decrementTitle")
                    }), isNullOrUndefined(this.spinUp) || attributes(this.spinUp, {
                        title: this.l10n.getConstant("incrementTitle"),
                        "aria-label": this.l10n.getConstant("incrementTitle")
                    }), this.updatePlaceholder(), Input.setPlaceholder(this.placeholder, this.element), 
                    this.updateValue(this.value);
                    break;

                  case "currency":
                    var propVal = getValue(prop, newProp);
                    this.setProperties({
                        currencyCode: propVal
                    }, !0), this.updateCurrency(prop, propVal);
                    break;

                  case "currencyCode":
                    var propValue = getValue(prop, newProp);
                    this.setProperties({
                        currency: propValue
                    }, !0), this.updateCurrency("currency", propValue);
                    break;

                  case "format":
                    setValue(prop, getValue(prop, newProp), this), this.initCultureInfo(), this.updateValue(this.value);
                    break;

                  case "decimals":
                    this.decimals = newProp.decimals, this.updateValue(this.value);
                }
            }
        }, NumericTextBox.prototype.getModuleName = function() {
            return "numerictextbox";
        }, __decorate$14([ Property("") ], NumericTextBox.prototype, "cssClass", void 0), 
        __decorate$14([ Property(null) ], NumericTextBox.prototype, "value", void 0), __decorate$14([ Property(-Number.MAX_VALUE) ], NumericTextBox.prototype, "min", void 0), 
        __decorate$14([ Property(Number.MAX_VALUE) ], NumericTextBox.prototype, "max", void 0), 
        __decorate$14([ Property(1) ], NumericTextBox.prototype, "step", void 0), __decorate$14([ Property(null) ], NumericTextBox.prototype, "width", void 0), 
        __decorate$14([ Property(null) ], NumericTextBox.prototype, "placeholder", void 0), 
        __decorate$14([ Property(!0) ], NumericTextBox.prototype, "showSpinButton", void 0), 
        __decorate$14([ Property(!1) ], NumericTextBox.prototype, "readonly", void 0), __decorate$14([ Property(!0) ], NumericTextBox.prototype, "enabled", void 0), 
        __decorate$14([ Property(!1) ], NumericTextBox.prototype, "enableRtl", void 0), 
        __decorate$14([ Property(!1) ], NumericTextBox.prototype, "showClearButton", void 0), 
        __decorate$14([ Property(!1) ], NumericTextBox.prototype, "enablePersistence", void 0), 
        __decorate$14([ Property("n2") ], NumericTextBox.prototype, "format", void 0), __decorate$14([ Property(null) ], NumericTextBox.prototype, "decimals", void 0), 
        __decorate$14([ Property(null) ], NumericTextBox.prototype, "currency", void 0), 
        __decorate$14([ Property(null) ], NumericTextBox.prototype, "currencyCode", void 0), 
        __decorate$14([ Property(!0) ], NumericTextBox.prototype, "strictMode", void 0), 
        __decorate$14([ Property(!1) ], NumericTextBox.prototype, "validateDecimalOnType", void 0), 
        __decorate$14([ Property("Never") ], NumericTextBox.prototype, "floatLabelType", void 0), 
        __decorate$14([ Event() ], NumericTextBox.prototype, "created", void 0), __decorate$14([ Event() ], NumericTextBox.prototype, "destroyed", void 0), 
        __decorate$14([ Event() ], NumericTextBox.prototype, "change", void 0), NumericTextBox = __decorate$14([ NotifyPropertyChanges ], NumericTextBox);
    }(Component), ERROR$1 = "e-error", INPUTGROUP = "e-input-group", FLOATINPUT = "e-float-input", UTILMASK = "e-utility-mask", TOPLABEL = "e-label-top", BOTTOMLABEL = "e-label-bottom", regularExpressions = {
        "0": "[0-9]",
        "9": "[0-9 ]",
        "#": "[0-9 +-]",
        L: "[A-Za-z]",
        "?": "[A-Za-z ]",
        "&": "[^ ]+",
        C: "[^]+",
        A: "[A-Za-z0-9]",
        a: "[A-Za-z0-9 ]"
    }, MaskUndo = function() {
        return function() {};
    }(), __extends$16 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$15 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, MaskedTextBox = function(_super) {
        function MaskedTextBox(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$16(MaskedTextBox, _super), MaskedTextBox.prototype.getModuleName = function() {
            return "maskedtextbox";
        }, MaskedTextBox.prototype.preRender = function() {
            this.promptMask = "", this.hiddenMask = "", this.escapeMaskValue = "", this.regExpCollec = regularExpressions, 
            this.customRegExpCollec = [], this.undoCollec = [], this.redoCollec = [], this.changeEventArgs = {}, 
            this.focusEventArgs = {}, this.maskKeyPress = !1, this.isFocus = !1, this.isInitial = !1, 
            this.isIosInvalid = !1;
            var ejInstance = getValue("ej2_instances", this.element);
            if (this.cloneElement = this.element.cloneNode(!0), removeClass([ this.cloneElement ], [ "e-control", "e-maskedtextbox" ]), 
            this.angularTagName = null, "EJS-MASKEDTEXTBOX" === this.element.tagName) {
                this.angularTagName = this.element.tagName;
                for (var input = this.createElement("input"), i = 0; i < this.element.attributes.length; i++) input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue), 
                input.innerHTML = this.element.innerHTML;
                this.element.hasAttribute("id") && this.element.removeAttribute("id"), this.element.classList.remove("e-control", "e-maskedtextbox"), 
                this.element.classList.add("e-mask-container"), this.element.appendChild(input), 
                this.element = input, setValue("ej2_instances", ejInstance, this.element);
            }
        }, MaskedTextBox.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, MaskedTextBox.prototype.render = function() {
            "input" === this.element.tagName.toLowerCase() && ("Never" === this.floatLabelType && addClass([ this.element ], "e-input"), 
            this.createWrapper(), "" === this.element.name && this.element.setAttribute("name", this.element.id), 
            this.isInitial = !0, this.resetMaskedTextBox(), this.isInitial = !1, this.setMaskPlaceholder(!0, !1), 
            this.setWidth(this.width), this.preEleVal = this.element.value, Browser.isDevice || "11.0" !== Browser.info.version && "edge" !== Browser.info.name || this.element.blur());
        }, MaskedTextBox.prototype.resetMaskedTextBox = function() {
            this.promptMask = "", this.hiddenMask = "", this.escapeMaskValue = "", this.customRegExpCollec = [], 
            this.undoCollec = [], this.redoCollec = [], this.promptChar.length > 1 && (this.promptChar = this.promptChar[0]), 
            createMask.call(this), applyMask.call(this), (null === this.mask || "" === this.mask && void 0 !== this.value) && setElementValue.call(this, this.value);
            var val = strippedValue.call(this, this.element);
            this.prevValue = val, this.value = val, this.isInitial || unwireEvents.call(this), 
            wireEvents.call(this);
        }, MaskedTextBox.prototype.setMaskPlaceholder = function(setVal, dynamicPlaceholder) {
            (dynamicPlaceholder || this.placeholder) && (Input.setPlaceholder(this.placeholder, this.element), 
            this.element.value === this.promptMask && setVal && "Always" !== this.floatLabelType && setElementValue.call(this, ""), 
            "Never" === this.floatLabelType && maskInputBlurHandler.call(this));
        }, MaskedTextBox.prototype.setCssClass = function(cssClass, element) {
            cssClass && addClass(element, cssClass);
        }, MaskedTextBox.prototype.setWidth = function(width) {
            isNullOrUndefined(width) || (this.element.style.width = formatUnit(width), this.inputObj.container.style.width = formatUnit(width));
        }, MaskedTextBox.prototype.createWrapper = function() {
            this.inputObj = Input.createInput({
                element: this.element,
                floatLabelType: this.floatLabelType,
                properties: {
                    enableRtl: this.enableRtl,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    placeholder: this.placeholder,
                    showClearButton: this.showClearButton
                }
            }, this.createElement), this.inputObj.container.setAttribute("class", "e-widget e-control-wrapper e-mask " + this.inputObj.container.getAttribute("class"));
        }, MaskedTextBox.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "value":
                    setMaskValue.call(this, this.value), this.placeholder && this.setMaskPlaceholder(!1, !1);
                    break;

                  case "placeholder":
                    this.setMaskPlaceholder(!0, !0);
                    break;

                  case "width":
                    this.setWidth(newProp.width);
                    break;

                  case "cssClass":
                    this.setCssClass(newProp.cssClass, [ this.inputObj.container ]);
                    break;

                  case "enabled":
                    Input.setEnabled(newProp.enabled, this.element);
                    break;

                  case "enableRtl":
                    Input.setEnableRtl(newProp.enableRtl, [ this.inputObj.container ]);
                    break;

                  case "customCharacters":
                    this.customCharacters = newProp.customCharacters, this.resetMaskedTextBox();
                    break;

                  case "showClearButton":
                    Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, void 0, this.createElement), 
                    bindClearEvent.call(this);
                    break;

                  case "floatLabelType":
                    this.floatLabelType = newProp.floatLabelType, Input.removeFloating(this.inputObj), 
                    Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
                    break;

                  case "mask":
                    var strippedValue_1 = this.value;
                    this.mask = newProp.mask, this.updateValue(strippedValue_1);
                    break;

                  case "promptChar":
                    newProp.promptChar.length > 1 && (newProp.promptChar = newProp.promptChar[0]), newProp.promptChar ? this.promptChar = newProp.promptChar : this.promptChar = "_";
                    var value = this.element.value.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar);
                    this.promptMask === this.element.value && (value = this.promptMask.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar)), 
                    this.promptMask = this.promptMask.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar), 
                    this.undoCollec = this.redoCollec = [], setElementValue.call(this, value);
                }
            }
        }, MaskedTextBox.prototype.updateValue = function(strippedVal) {
            this.resetMaskedTextBox(), setMaskValue.call(this, strippedVal);
        }, MaskedTextBox.prototype.getMaskedValue = function() {
            return unstrippedValue.call(this, this.element);
        }, MaskedTextBox.prototype.destroy = function() {
            unwireEvents.call(this), this.inputObj.container.parentElement.appendChild(this.cloneElement), 
            detach(this.inputObj.container), _super.prototype.destroy.call(this);
        }, __decorate$15([ Property(null) ], MaskedTextBox.prototype, "cssClass", void 0), 
        __decorate$15([ Property(null) ], MaskedTextBox.prototype, "width", void 0), __decorate$15([ Property(null) ], MaskedTextBox.prototype, "placeholder", void 0), 
        __decorate$15([ Property("Never") ], MaskedTextBox.prototype, "floatLabelType", void 0), 
        __decorate$15([ Property(!0) ], MaskedTextBox.prototype, "enabled", void 0), __decorate$15([ Property(!1) ], MaskedTextBox.prototype, "showClearButton", void 0), 
        __decorate$15([ Property(!1) ], MaskedTextBox.prototype, "enablePersistence", void 0), 
        __decorate$15([ Property(!1) ], MaskedTextBox.prototype, "enableRtl", void 0), __decorate$15([ Property(null) ], MaskedTextBox.prototype, "mask", void 0), 
        __decorate$15([ Property("_") ], MaskedTextBox.prototype, "promptChar", void 0), 
        __decorate$15([ Property(null) ], MaskedTextBox.prototype, "value", void 0), __decorate$15([ Property(null) ], MaskedTextBox.prototype, "customCharacters", void 0), 
        __decorate$15([ Event() ], MaskedTextBox.prototype, "created", void 0), __decorate$15([ Event() ], MaskedTextBox.prototype, "destroyed", void 0), 
        __decorate$15([ Event() ], MaskedTextBox.prototype, "change", void 0), __decorate$15([ Event() ], MaskedTextBox.prototype, "focus", void 0), 
        MaskedTextBox = __decorate$15([ NotifyPropertyChanges ], MaskedTextBox);
    }(Component), __extends$17 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$16 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, TicksData = function(_super) {
        function TicksData() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$17(TicksData, _super), __decorate$16([ Property("None") ], TicksData.prototype, "placement", void 0), 
        __decorate$16([ Property(10) ], TicksData.prototype, "largeStep", void 0), __decorate$16([ Property(1) ], TicksData.prototype, "smallStep", void 0), 
        __decorate$16([ Property(!1) ], TicksData.prototype, "showSmallTicks", void 0), 
        __decorate$16([ Property(null) ], TicksData.prototype, "format", void 0), TicksData;
    }(ChildProperty), LimitData = function(_super) {
        function LimitData() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$17(LimitData, _super), __decorate$16([ Property(!1) ], LimitData.prototype, "enabled", void 0), 
        __decorate$16([ Property(null) ], LimitData.prototype, "minStart", void 0), __decorate$16([ Property(null) ], LimitData.prototype, "minEnd", void 0), 
        __decorate$16([ Property(null) ], LimitData.prototype, "maxStart", void 0), __decorate$16([ Property(null) ], LimitData.prototype, "maxEnd", void 0), 
        __decorate$16([ Property(!1) ], LimitData.prototype, "startHandleFixed", void 0), 
        __decorate$16([ Property(!1) ], LimitData.prototype, "endHandleFixed", void 0), 
        LimitData;
    }(ChildProperty), TooltipData = function(_super) {
        function TooltipData() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$17(TooltipData, _super), __decorate$16([ Property("") ], TooltipData.prototype, "cssClass", void 0), 
        __decorate$16([ Property("Before") ], TooltipData.prototype, "placement", void 0), 
        __decorate$16([ Property("Focus") ], TooltipData.prototype, "showOn", void 0), __decorate$16([ Property(!1) ], TooltipData.prototype, "isVisible", void 0), 
        __decorate$16([ Property(null) ], TooltipData.prototype, "format", void 0), TooltipData;
    }(ChildProperty), classNames_root = "e-slider", classNames_rtl = "e-rtl", classNames_sliderHiddenInput = "e-slider-input", classNames_controlWrapper = "e-control-wrapper", classNames_sliderHandle = "e-handle", classNames_rangeBar = "e-range", classNames_sliderButton = "e-slider-button", classNames_firstButton = "e-first-button", classNames_secondButton = "e-second-button", classNames_scale = "e-scale", classNames_tick = "e-tick", classNames_large = "e-large", classNames_tickValue = "e-tick-value", classNames_sliderTooltip = "e-slider-tooltip", classNames_sliderHover = "e-slider-hover", classNames_sliderFirstHandle = "e-handle-first", classNames_sliderSecondHandle = "e-handle-second", classNames_sliderDisabled = "e-disabled", classNames_sliderContainer = "e-slider-container", classNames_horizontalTooltipBefore = "e-slider-horizontal-before", classNames_horizontalTooltipAfter = "e-slider-horizontal-after", classNames_verticalTooltipBefore = "e-slider-vertical-before", classNames_verticalTooltipAfter = "e-slider-vertical-after", classNames_materialTooltipOpen = "e-material-tooltip-open", classNames_materialTooltipActive = "e-tooltip-active", classNames_materialSlider = "e-material-slider", classNames_sliderTrack = "e-slider-track", classNames_sliderHandleFocused = "e-handle-focused", classNames_verticalSlider = "e-vertical", classNames_horizontalSlider = "e-horizontal", classNames_sliderHandleStart = "e-handle-start", classNames_sliderTooltipStart = "e-material-tooltip-start", classNames_sliderTabHandle = "e-tab-handle", classNames_sliderButtonIcon = "e-button-icon", classNames_sliderSmallSize = "e-small-size", classNames_sliderTickPosition = "e-tick-pos", classNames_sliderFirstTick = "e-first-tick", classNames_sliderLastTick = "e-last-tick", classNames_sliderButtonClass = "e-slider-btn", classNames_sliderTabTrack = "e-tab-track", classNames_sliderTabRange = "e-tab-range", classNames_sliderActiveHandle = "e-handle-active", classNames_sliderMaterialHandle = "e-material-handle", classNames_sliderMaterialRange = "e-material-range", classNames_sliderMaterialDefault = "e-material-default", classNames_materialTooltipShow = "e-material-tooltip-show", classNames_materialTooltipHide = "e-material-tooltip-hide", classNames_readonly = "e-read-only", classNames_limits = "e-limits", classNames_limitBarDefault = "e-limit-bar", classNames_limitBarFirst = "e-limit-first", classNames_limitBarSecond = "e-limit-second", classNames_dragHorizontal = "e-drag-horizontal", classNames_dragVertical = "e-drag-vertical", Slider = function(_super) {
        function Slider(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.horDir = "left", _this.verDir = "bottom", _this.transition = {
                handle: "left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)",
                rangeBar: "all .4s cubic-bezier(.25, .8, .25, 1)"
            }, _this.transitionOnMaterialTooltip = {
                handle: "left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out",
                rangeBar: "left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out"
            }, _this.scaleTransform = "transform .4s cubic-bezier(.25, .8, .25, 1)", _this.customAriaText = null, 
            _this.drag = !0, _this;
        }
        return __extends$17(Slider, _super), Slider.prototype.preRender = function() {
            this.l10n = new L10n("slider", {
                incrementTitle: "Increase",
                decrementTitle: "Decrease"
            }, this.locale), this.isElementFocused = !1, this.tickElementCollection = [], this.tooltipFormatInfo = {}, 
            this.ticksFormatInfo = {}, this.initCultureInfo(), this.initCultureFunc();
        }, Slider.prototype.initCultureFunc = function() {
            this.internationalization = new Internationalization(this.locale);
        }, Slider.prototype.initCultureInfo = function() {
            this.tooltipFormatInfo.format = isNullOrUndefined(this.tooltip.format) ? null : this.tooltip.format, 
            this.ticksFormatInfo.format = isNullOrUndefined(this.ticks.format) ? null : this.ticks.format;
        }, Slider.prototype.formatString = function(value, formatInfo) {
            var formatValue = null, formatString = null;
            if (value || 0 === value) {
                formatValue = this.formatNumber(value);
                var numberOfDecimals = this.numberOfDecimals(value);
                formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));
            }
            return {
                elementVal: formatValue,
                formatString: formatString
            };
        }, Slider.prototype.formatNumber = function(value) {
            var numberOfDecimals = this.numberOfDecimals(value);
            return this.internationalization.getNumberFormat({
                maximumFractionDigits: numberOfDecimals,
                minimumFractionDigits: numberOfDecimals,
                useGrouping: !1
            })(value);
        }, Slider.prototype.numberOfDecimals = function(value) {
            var decimalPart = value.toString().split(".")[1];
            return decimalPart && decimalPart.length ? decimalPart.length : 0;
        }, Slider.prototype.makeRoundNumber = function(value, precision) {
            var decimals = precision || 0;
            return Number(value.toFixed(decimals));
        }, Slider.prototype.fractionalToInteger = function(value) {
            value = 0 === this.numberOfDecimals(value) ? Number(value).toFixed(this.noOfDecimals) : value;
            for (var tens = 1, i = 0; i < this.noOfDecimals; i++) tens *= 10;
            return value = Number((value * tens).toFixed(0));
        }, Slider.prototype.render = function() {
            this.initialize(), this.initRender(), this.wireEvents(), this.setZindex();
        }, Slider.prototype.initialize = function() {
            addClass([ this.element ], classNames_root), this.setCSSClass();
        }, Slider.prototype.setCSSClass = function(oldCSSClass) {
            oldCSSClass && removeClass([ this.element ], oldCSSClass.split(" ")), this.cssClass && addClass([ this.element ], this.cssClass.split(" "));
        }, Slider.prototype.setEnabled = function() {
            var tooltipElement = "Range" !== this.type ? [ this.firstTooltipElement ] : [ this.firstTooltipElement, this.secondTooltipElement ];
            this.enabled ? (removeClass([ this.sliderContainer ], [ classNames_sliderDisabled ]), 
            this.tooltip.isVisible && "Always" === this.tooltip.showOn && tooltipElement.forEach(function(tooltipElement) {
                tooltipElement.classList.remove(classNames_sliderDisabled);
            }), this.wireEvents()) : (addClass([ this.sliderContainer ], [ classNames_sliderDisabled ]), 
            this.tooltip.isVisible && "Always" === this.tooltip.showOn && tooltipElement.forEach(function(tooltipElement) {
                tooltipElement.classList.add(classNames_sliderDisabled);
            }), this.unwireEvents());
        }, Slider.prototype.getTheme = function(container) {
            return window.getComputedStyle(container, ":after").getPropertyValue("content").replace(/['"]+/g, "");
        }, Slider.prototype.initRender = function() {
            this.sliderContainer = this.createElement("div", {
                className: classNames_sliderContainer + " " + classNames_controlWrapper
            }), this.element.parentNode.insertBefore(this.sliderContainer, this.element), this.sliderContainer.appendChild(this.element), 
            this.sliderTrack = this.createElement("div", {
                className: classNames_sliderTrack
            }), this.element.appendChild(this.sliderTrack), this.element.tabIndex = -1, this.isMaterial = "material" === this.getTheme(this.sliderContainer), 
            this.isBootstrap = "bootstrap" === this.getTheme(this.sliderContainer), this.setHandler(), 
            this.createRangeBar(), this.limits.enabled && this.createLimitBar(), this.setOrientClass(), 
            this.hiddenInput = this.createElement("input", {
                attrs: {
                    type: "hidden",
                    value: isNullOrUndefined(this.value) ? this.min.toString() : this.value.toString(),
                    name: this.element.getAttribute("name") || this.element.getAttribute("id") || "_" + (1e3 * Math.random()).toFixed(0) + "slider",
                    class: classNames_sliderHiddenInput
                }
            }), this.hiddenInput.tabIndex = -1, this.sliderContainer.appendChild(this.hiddenInput), 
            this.showButtons && this.setButtons(), this.setEnableRTL(), "Range" === this.type ? this.rangeValueUpdate() : this.value = isNullOrUndefined(this.value) ? parseFloat(formatUnit(this.min.toString())) : this.value, 
            this.previousVal = "Range" !== this.type ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) : [ this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))), this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString()))) ], 
            this.previousChanged = this.previousVal, isNullOrUndefined(this.element.hasAttribute("name")) || this.element.removeAttribute("name"), 
            this.setValue(), this.limits.enabled && this.setLimitBar(), "None" !== this.ticks.placement && this.renderScale(), 
            this.tooltip.isVisible && this.renderTooltip(), this.enabled ? removeClass([ this.sliderContainer ], [ classNames_sliderDisabled ]) : addClass([ this.sliderContainer ], [ classNames_sliderDisabled ]), 
            this.readonly ? addClass([ this.sliderContainer ], [ classNames_readonly ]) : removeClass([ this.sliderContainer ], [ classNames_readonly ]);
        }, Slider.prototype.createRangeBar = function() {
            "Default" !== this.type && (this.rangeBar = this.createElement("div", {
                attrs: {
                    class: classNames_rangeBar
                }
            }), this.element.appendChild(this.rangeBar), this.drag && "Range" === this.type && ("Horizontal" === this.orientation ? this.rangeBar.classList.add(classNames_dragHorizontal) : this.rangeBar.classList.add(classNames_dragVertical)));
        }, Slider.prototype.createLimitBar = function() {
            var firstElementClassName = "Range" !== this.type ? classNames_limitBarDefault : classNames_limitBarFirst;
            firstElementClassName += " " + classNames_limits, this.limitBarFirst = this.createElement("div", {
                attrs: {
                    class: firstElementClassName
                }
            }), this.element.appendChild(this.limitBarFirst), "Range" === this.type && (this.limitBarSecond = this.createElement("div", {
                attrs: {
                    class: classNames_limitBarSecond + " " + classNames_limits
                }
            }), this.element.appendChild(this.limitBarSecond));
        }, Slider.prototype.setOrientClass = function() {
            "Vertical" !== this.orientation ? (this.sliderContainer.classList.remove(classNames_verticalSlider), 
            this.sliderContainer.classList.add(classNames_horizontalSlider), this.firstHandle.setAttribute("aria-orientation", "horizontal"), 
            "Range" === this.type && this.secondHandle.setAttribute("aria-orientation", "horizontal")) : (this.sliderContainer.classList.remove(classNames_horizontalSlider), 
            this.sliderContainer.classList.add(classNames_verticalSlider), this.firstHandle.setAttribute("aria-orientation", "vertical"), 
            "Range" === this.type && this.secondHandle.setAttribute("aria-orientation", "vertical"));
        }, Slider.prototype.setAriaAttributes = function(element) {
            var _this = this, min = this.min, max = this.max;
            if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0 && (min = this.customValues[0], 
            max = this.customValues[this.customValues.length - 1]), "Range" !== this.type) attributes(element, {
                "aria-valuemin": min.toString(),
                "aria-valuemax": max.toString()
            }); else {
                (!isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? [ [ min.toString(), this.customValues[this.value[1]].toString() ], [ this.customValues[this.value[0]].toString(), max.toString() ] ] : [ [ min.toString(), this.value[1].toString() ], [ this.value[0].toString(), max.toString() ] ]).forEach(function(range, index) {
                    var element = 0 === index ? _this.firstHandle : _this.secondHandle;
                    element && attributes(element, {
                        "aria-valuemin": range[0],
                        "aria-valuemax": range[1]
                    });
                });
            }
        }, Slider.prototype.createSecondHandle = function() {
            this.secondHandle = this.createElement("div", {
                attrs: {
                    class: classNames_sliderHandle,
                    role: "slider",
                    "aria-labelledby": this.element.id + "_title",
                    tabIndex: "0"
                }
            }), this.secondHandle.classList.add(classNames_sliderSecondHandle), this.element.appendChild(this.secondHandle), 
            this.isMaterial && this.tooltip.isVisible && (this.secondMaterialHandle = this.createElement("div", {
                attrs: {
                    class: classNames_sliderHandle + " " + classNames_sliderMaterialHandle
                }
            }), this.element.appendChild(this.secondMaterialHandle));
        }, Slider.prototype.createFirstHandle = function() {
            this.firstHandle = this.createElement("div", {
                attrs: {
                    class: classNames_sliderHandle,
                    role: "slider",
                    "aria-labelledby": this.element.id + "_title",
                    tabIndex: "0"
                }
            }), this.firstHandle.classList.add(classNames_sliderFirstHandle), this.element.appendChild(this.firstHandle), 
            this.isMaterial && this.tooltip.isVisible && (this.firstMaterialHandle = this.createElement("div", {
                attrs: {
                    class: classNames_sliderHandle + " " + classNames_sliderMaterialHandle
                }
            }), this.element.appendChild(this.firstMaterialHandle));
        }, Slider.prototype.wireFirstHandleEvt = function(destroy) {
            destroy ? (EventHandler.remove(this.firstHandle, "mousedown touchstart", this.handleFocus), 
            EventHandler.remove(this.firstHandle, "transitionend", this.transitionEnd), EventHandler.remove(this.firstHandle, "mouseenter touchenter", this.handleOver), 
            EventHandler.remove(this.firstHandle, "mouseleave touchend", this.handleLeave)) : (EventHandler.add(this.firstHandle, "mousedown touchstart", this.handleFocus, this), 
            EventHandler.add(this.firstHandle, "transitionend", this.transitionEnd, this), EventHandler.add(this.firstHandle, "mouseenter touchenter", this.handleOver, this), 
            EventHandler.add(this.firstHandle, "mouseleave touchend", this.handleLeave, this));
        }, Slider.prototype.wireSecondHandleEvt = function(destroy) {
            destroy ? (EventHandler.remove(this.secondHandle, "mousedown touchstart", this.handleFocus), 
            EventHandler.remove(this.secondHandle, "transitionend", this.transitionEnd), EventHandler.remove(this.secondHandle, "mouseenter touchenter", this.handleOver), 
            EventHandler.remove(this.secondHandle, "mouseleave touchend", this.handleLeave)) : (EventHandler.add(this.secondHandle, "mousedown touchstart", this.handleFocus, this), 
            EventHandler.add(this.secondHandle, "transitionend", this.transitionEnd, this), 
            EventHandler.add(this.secondHandle, "mouseenter touchenter", this.handleOver, this), 
            EventHandler.add(this.secondHandle, "mouseleave touchend", this.handleLeave, this));
        }, Slider.prototype.handleStart = function() {
            var pos = 1 === this.activeHandle ? this.handlePos1 : this.handlePos2, tooltipElement = 1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement;
            0 === pos && "Range" !== this.type && (this.getHandle().classList.add(classNames_sliderHandleStart), 
            this.isMaterial && this.tooltip.isVisible && (this.firstMaterialHandle.classList.add(classNames_sliderHandleStart), 
            tooltipElement && tooltipElement.classList.add(classNames_sliderTooltipStart)));
        }, Slider.prototype.transitionEnd = function(e) {
            if (this.handleStart(), this.getHandle().style.transition = "none", "Default" !== this.type && (this.rangeBar.style.transition = "none"), 
            this.tooltip.isVisible) {
                var tooltipObj = 1 === this.activeHandle ? this.firstTooltipObj : this.secondTooltipObj, tooltipElement = 1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement;
                this.isMaterial ? tooltipElement.classList.contains(classNames_materialTooltipOpen) || "transform" === e.propertyName ? ("Default" === this.type && (tooltipElement.style.transition = this.transition.handle), 
                this.refreshTooltip()) : this.openMaterialTooltip() : (tooltipObj.animation = {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "FadeOut",
                        duration: 500
                    }
                }, this.tooltipAnimation());
            }
            "Always" !== this.tooltip.showOn && this.closeTooltip();
        }, Slider.prototype.handleFocusOut = function() {
            this.firstHandle.classList.contains(classNames_sliderHandleFocused) && this.firstHandle.classList.remove(classNames_sliderHandleFocused), 
            "Range" === this.type && this.secondHandle.classList.contains(classNames_sliderHandleFocused) && this.secondHandle.classList.remove(classNames_sliderHandleFocused);
        }, Slider.prototype.handleFocus = function(e) {
            e.currentTarget === this.firstHandle ? this.firstHandle.classList.add(classNames_sliderHandleFocused) : this.secondHandle.classList.add(classNames_sliderHandleFocused);
        }, Slider.prototype.handleOver = function(e) {
            if (this.tooltip.isVisible && "Hover" === this.tooltip.showOn) {
                this.tooltipValue();
                (e.currentTarget === this.firstHandle ? this.firstTooltipObj : this.secondTooltipObj).animation = {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "FadeOut",
                        duration: 500
                    }
                }, e.currentTarget === this.firstHandle ? this.firstTooltipObj.open(this.firstHandle) : this.secondTooltipObj.open(this.secondHandle);
            }
        }, Slider.prototype.handleLeave = function(e) {
            if (this.tooltip.isVisible && "Hover" === this.tooltip.showOn && !e.currentTarget.classList.contains(classNames_sliderHandleFocused) && !e.currentTarget.classList.contains(classNames_sliderTabHandle)) {
                this.tooltipValue();
                var tooltipObj = e.currentTarget === this.firstHandle ? this.firstTooltipObj : this.secondTooltipObj;
                e.currentTarget === this.firstHandle ? this.firstTooltipObj.close() : this.secondTooltipObj.close(), 
                tooltipObj.animation = {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "FadeOut",
                        duration: 500
                    }
                };
            }
        }, Slider.prototype.setHandler = function() {
            this.min > this.max && (this.min = this.max), this.createFirstHandle(), "Range" === this.type && this.createSecondHandle();
        }, Slider.prototype.setEnableRTL = function() {
            this.enableRtl && "Vertical" !== this.orientation ? addClass([ this.sliderContainer ], classNames_rtl) : removeClass([ this.sliderContainer ], classNames_rtl);
            var preDir = "Vertical" !== this.orientation ? this.horDir : this.verDir;
            this.enableRtl ? (this.horDir = "right", this.verDir = "bottom") : (this.horDir = "left", 
            this.verDir = "bottom");
            preDir !== ("Vertical" !== this.orientation ? this.horDir : this.verDir) && "Horizontal" === this.orientation && (setStyleAttribute(this.firstHandle, {
                right: "",
                left: "auto"
            }), "Range" === this.type && setStyleAttribute(this.secondHandle, {
                top: "",
                left: "auto"
            }));
        }, Slider.prototype.tooltipValue = function() {
            var text, args = {
                value: this.value,
                text: ""
            };
            this.setTooltipContent(), args.text = text = this.firstTooltipObj.content, this.trigger("tooltipChange", args), 
            this.addTooltipClass(args.text), text !== args.text && (this.customAriaText = args.text, 
            this.firstTooltipObj.content = args.text, this.setAriaAttrValue(this.firstHandle), 
            "Range" === this.type && (this.secondTooltipObj.content = args.text, this.setAriaAttrValue(this.secondHandle)));
        }, Slider.prototype.setTooltipContent = function() {
            var content;
            "Range" === this.type ? (content = this.formatContent(this.tooltipFormatInfo, !1), 
            this.firstTooltipObj.content = content, this.secondTooltipObj.content = content) : isNullOrUndefined(this.handleVal1) || (content = this.formatContent(this.tooltipFormatInfo, !1), 
            this.firstTooltipObj.content = content);
        }, Slider.prototype.formatContent = function(formatInfo, ariaContent) {
            var content = "", handle1 = this.handleVal1, handle2 = this.handleVal2;
            return !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && (handle1 = this.customValues[this.handleVal1], 
            handle2 = this.customValues[this.handleVal2]), ariaContent ? ("Range" === this.type ? content = this.enableRtl && "Vertical" !== this.orientation ? isNullOrUndefined(this.tooltip) || isNullOrUndefined(this.tooltip.format) ? handle2.toString() + " - " + handle1.toString() : this.formatString(handle2, formatInfo).elementVal + " - " + this.formatString(handle1, formatInfo).elementVal : isNullOrUndefined(this.tooltip) || isNullOrUndefined(this.tooltip.format) ? handle1.toString() + " - " + handle2.toString() : this.formatString(handle1, formatInfo).elementVal + " - " + this.formatString(handle2, formatInfo).elementVal : isNullOrUndefined(handle1) || (content = isNullOrUndefined(this.tooltip) || isNullOrUndefined(this.tooltip.format) ? handle1.toString() : this.formatString(handle1, formatInfo).elementVal), 
            content) : ("Range" === this.type ? content = this.enableRtl && "Vertical" !== this.orientation ? isNullOrUndefined(formatInfo.format) ? handle2.toString() + " - " + handle1.toString() : this.formatString(handle2, formatInfo).formatString + " - " + this.formatString(handle1, formatInfo).formatString : isNullOrUndefined(formatInfo.format) ? handle1.toString() + " - " + handle2.toString() : this.formatString(handle1, formatInfo).formatString + " - " + this.formatString(handle2, formatInfo).formatString : isNullOrUndefined(handle1) || (content = isNullOrUndefined(formatInfo.format) ? handle1.toString() : this.formatString(handle1, formatInfo).formatString), 
            content);
        }, Slider.prototype.addTooltipClass = function(content) {
            var _this = this;
            if (this.isMaterial && this.tooltip.isVisible) {
                var count_1 = content.toString().length;
                ("Range" !== this.type ? [ this.firstTooltipElement ] : [ this.firstTooltipElement, this.secondTooltipElement ]).forEach(function(element, index) {
                    if (element) count_1 > 4 ? (element.classList.remove(classNames_sliderMaterialDefault), 
                    element.classList.contains(classNames_sliderMaterialRange) || (element.classList.add(classNames_sliderMaterialRange), 
                    element.style.transform = "scale(1)")) : (element.classList.remove(classNames_sliderMaterialRange), 
                    element.classList.contains(classNames_sliderMaterialDefault) || (element.classList.add(classNames_sliderMaterialDefault), 
                    element.style.transform = _this.getTooltipTransformProperties(_this.previousTooltipClass).rotate)); else {
                        var cssClass = count_1 > 4 ? classNames_sliderMaterialRange : classNames_sliderMaterialDefault;
                        index ? _this.secondTooltipObj.cssClass = classNames_sliderTooltip + " " + cssClass : _this.firstTooltipObj.cssClass = classNames_sliderTooltip + " " + cssClass;
                    }
                });
            }
        }, Slider.prototype.tooltipPlacement = function() {
            var tooltipPosition;
            tooltipPosition = "Horizontal" === this.orientation ? "Before" === this.tooltip.placement ? "TopCenter" : "BottomCenter" : "Before" === this.tooltip.placement ? "LeftCenter" : "RightCenter", 
            this.firstTooltipObj.position = tooltipPosition, "Range" === this.type && (this.secondTooltipObj.position = tooltipPosition), 
            this.isMaterial && (this.firstTooltipObj.showTipPointer = !0, this.setProperties({
                tooltip: {
                    showOn: "Always"
                }
            }, !0), this.firstTooltipObj.height = 30, "Range" === this.type && (this.secondTooltipObj.showTipPointer = !0, 
            this.secondTooltipObj.height = 30));
        }, Slider.prototype.tooltipBeforeOpen = function(args) {
            var tooltipElement = args.target === this.firstHandle ? this.firstTooltipElement = args.element : this.secondTooltipElement = args.element;
            if ("" !== this.tooltip.cssClass && addClass([ tooltipElement ], this.tooltip.cssClass.split(" ")), 
            args.target.removeAttribute("aria-describedby"), this.isMaterial && this.tooltip.isVisible) {
                var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);
                tooltipElement.firstChild.classList.add(classNames_materialTooltipHide), this.handleStart(), 
                tooltipElement.firstElementChild.innerText.length > 4 ? tooltipElement.style.transform = transformProperties.translate + " scale(0.01)" : tooltipElement.style.transform = transformProperties.translate + " " + transformProperties.rotate + " scale(0.01)";
            }
            if (this.isBootstrap) switch (this.bootstrapCollisionArgs.collidedPosition) {
              case "TopCenter":
                this.firstTooltipObj.setProperties({
                    offsetY: -6
                }, !1), "Range" === this.type && this.secondTooltipObj.setProperties({
                    offsetY: -6
                }, !1);
                break;

              case "BottomCenter":
                this.firstTooltipObj.setProperties({
                    offsetY: 6
                }, !1), "Range" === this.type && this.secondTooltipObj.setProperties({
                    offsetY: 6
                }, !1);
                break;

              case "LeftCenter":
                this.firstTooltipObj.setProperties({
                    offsetX: -6
                }, !1), "Range" === this.type && this.secondTooltipObj.setProperties({
                    offsetX: -6
                }, !1);
                break;

              case "RightCenter":
                this.firstTooltipObj.setProperties({
                    offsetX: 6
                }, !1), "Range" === this.type && this.secondTooltipObj.setProperties({
                    offsetX: 6
                }, !1);
            }
        }, Slider.prototype.wireMaterialTooltipEvent = function(destroy) {
            this.isMaterial && this.tooltip.isVisible && (destroy ? (EventHandler.remove(this.firstTooltipElement, "mousedown touchstart", this.sliderDown), 
            "Range" === this.type && EventHandler.remove(this.secondTooltipElement, "mousedown touchstart", this.sliderDown)) : (EventHandler.add(this.firstTooltipElement, "mousedown touchstart", this.sliderDown, this), 
            "Range" === this.type && EventHandler.add(this.secondTooltipElement, "mousedown touchstart", this.sliderDown, this)));
        }, Slider.prototype.tooltipPositionCalculation = function(position) {
            var cssClass;
            switch (position) {
              case "TopCenter":
                cssClass = classNames_horizontalTooltipBefore;
                break;

              case "BottomCenter":
                cssClass = classNames_horizontalTooltipAfter;
                break;

              case "LeftCenter":
                cssClass = classNames_verticalTooltipBefore;
                break;

              case "RightCenter":
                cssClass = classNames_verticalTooltipAfter;
            }
            return cssClass;
        }, Slider.prototype.getTooltipTransformProperties = function(className) {
            if (this.firstTooltipElement) {
                var position = void 0;
                position = "Horizontal" === this.orientation ? this.firstTooltipElement.clientHeight + 14 - this.firstTooltipElement.clientHeight / 2 : this.firstTooltipElement.clientWidth + 14 - this.firstTooltipElement.clientWidth / 2;
                return "Horizontal" === this.orientation ? className === classNames_horizontalTooltipBefore ? {
                    rotate: "rotate(45deg)",
                    translate: "translateY(" + position + "px)"
                } : {
                    rotate: "rotate(225deg)",
                    translate: "translateY(" + -position + "px)"
                } : className === classNames_verticalTooltipBefore ? {
                    rotate: "rotate(-45deg)",
                    translate: "translateX(" + position + "px)"
                } : {
                    rotate: "rotate(-225deg)",
                    translate: "translateX(" + -position + "px)"
                };
            }
        }, Slider.prototype.openMaterialTooltip = function() {
            var _this = this;
            this.refreshTooltip();
            var tooltipElement = 1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement, handle = 1 === this.activeHandle ? this.firstMaterialHandle : this.secondMaterialHandle;
            tooltipElement.firstChild.classList.contains(classNames_materialTooltipHide) && tooltipElement.firstChild.classList.remove(classNames_materialTooltipHide), 
            tooltipElement.firstChild.classList.add(classNames_materialTooltipShow), this.getHandle().style.cursor = "default", 
            tooltipElement.style.transition = this.scaleTransform, tooltipElement.classList.add(classNames_materialTooltipOpen), 
            handle.style.transform = "scale(0)", tooltipElement.firstElementChild.innerText.length > 4 ? tooltipElement.style.transform = "scale(1)" : tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate, 
            "Default" === this.type ? setTimeout(function() {
                tooltipElement.style.transition = _this.transition.handle;
            }, 2500) : setTimeout(function() {
                tooltipElement.style.transition = "none";
            }, 2500);
        }, Slider.prototype.checkTooltipPosition = function(args) {
            var tooltipPosition = args.target === this.firstHandle ? this.firstHandleTooltipPosition : this.secondHandleTooltipPosition;
            if (this.isMaterial && (void 0 === tooltipPosition || tooltipPosition !== args.collidedPosition)) {
                var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);
                args.element.classList.remove(this.previousTooltipClass), args.element.classList.add(tooltipClass), 
                this.previousTooltipClass = tooltipClass, args.element.style.transform && args.element.classList.contains(classNames_materialTooltipOpen) && args.element.firstElementChild.innerText.length < 4 && (args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate), 
                args.target === this.firstHandle ? this.firstHandleTooltipPosition = args.collidedPosition : this.secondHandleTooltipPosition = args.collidedPosition;
            }
            this.bootstrapCollisionArgs = args;
        }, Slider.prototype.renderTooltip = function() {
            "Auto" === this.tooltip.showOn && this.setProperties({
                tooltip: {
                    showOn: "Hover"
                }
            }, !0);
            var tooltipPointer = !!this.isBootstrap;
            this.firstTooltipObj = new Tooltip({
                showTipPointer: tooltipPointer,
                cssClass: classNames_sliderTooltip,
                animation: {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "None"
                    }
                },
                opensOn: "Custom",
                beforeOpen: this.tooltipBeforeOpen.bind(this),
                beforeCollision: this.checkTooltipPosition.bind(this),
                afterClose: this.tooltipAfterClose.bind(this)
            }), this.firstTooltipObj.appendTo(this.firstHandle), "Range" === this.type && (this.secondTooltipObj = new Tooltip({
                showTipPointer: tooltipPointer,
                cssClass: classNames_sliderTooltip,
                animation: {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "None"
                    }
                },
                opensOn: "Custom",
                beforeOpen: this.tooltipBeforeOpen.bind(this),
                beforeCollision: this.checkTooltipPosition.bind(this),
                afterClose: this.tooltipAfterClose.bind(this)
            }), this.secondTooltipObj.appendTo(this.secondHandle)), this.tooltipPlacement(), 
            this.firstHandle.style.transition = "none", "Default" !== this.type && (this.rangeBar.style.transition = "none"), 
            "Range" === this.type && (this.secondHandle.style.transition = "none"), this.isMaterial && (this.sliderContainer.classList.add(classNames_materialSlider), 
            this.tooltipValue(), this.firstTooltipObj.open(this.firstHandle), "Range" === this.type && this.secondTooltipObj.open(this.secondHandle));
        }, Slider.prototype.tooltipAfterClose = function(args) {
            args.element === this.firstTooltipElement ? this.firstTooltipElement = void 0 : this.secondTooltipElement = void 0;
        }, Slider.prototype.setButtons = function() {
            this.firstBtn = this.createElement("div", {
                className: classNames_sliderButton + " " + classNames_firstButton
            }), this.firstBtn.appendChild(this.createElement("span", {
                className: classNames_sliderButtonIcon
            })), this.firstBtn.tabIndex = -1, this.secondBtn = this.createElement("div", {
                className: classNames_sliderButton + " " + classNames_secondButton
            }), this.secondBtn.appendChild(this.createElement("span", {
                className: classNames_sliderButtonIcon
            })), this.secondBtn.tabIndex = -1, this.sliderContainer.classList.add(classNames_sliderButtonClass), 
            this.sliderContainer.appendChild(this.firstBtn), this.sliderContainer.appendChild(this.secondBtn), 
            this.sliderContainer.appendChild(this.element), this.buttonTitle();
        }, Slider.prototype.buttonTitle = function() {
            var enabledRTL = this.enableRtl && "Vertical" !== this.orientation;
            this.l10n.setLocale(this.locale);
            var decrementTitle = this.l10n.getConstant("decrementTitle"), incrementTitle = this.l10n.getConstant("incrementTitle");
            attributes(enabledRTL ? this.secondBtn : this.firstBtn, {
                "aria-label": decrementTitle,
                title: decrementTitle
            }), attributes(enabledRTL ? this.firstBtn : this.secondBtn, {
                "aria-label": incrementTitle,
                title: incrementTitle
            });
        }, Slider.prototype.buttonFocusOut = function() {
            this.isMaterial && this.getHandle().classList.remove("e-large-thumb-size");
        }, Slider.prototype.repeatButton = function(args) {
            args.target.parentElement;
            !(1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement) && this.tooltip.isVisible && this.openTooltip();
            var value, hVal = this.handleValueUpdate(), enabledRTL = this.enableRtl && "Vertical" !== this.orientation;
            args.target.parentElement.classList.contains(classNames_firstButton) || args.target.classList.contains(classNames_firstButton) ? value = enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !0) : this.add(hVal, parseFloat(this.step.toString()), !1) : (args.target.parentElement.classList.contains(classNames_secondButton) || args.target.classList.contains(classNames_secondButton)) && (value = enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !1) : this.add(hVal, parseFloat(this.step.toString()), !0)), 
            this.limits.enabled && (value = this.getLimitCorrectedValues(value)), value >= this.min && value <= this.max && (this.changeHandleValue(value), 
            this.refreshTooltipOnMove());
        }, Slider.prototype.repeatHandlerMouse = function(args) {
            args.preventDefault(), "mousedown" !== args.type && "touchstart" !== args.type || (this.buttonClick(args), 
            this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args));
        }, Slider.prototype.materialChange = function() {
            this.getHandle().classList.contains("e-large-thumb-size") || this.getHandle().classList.add("e-large-thumb-size");
        }, Slider.prototype.repeatHandlerUp = function(e) {
            this.changeEvent("changed"), this.tooltip.isVisible && "Always" !== this.tooltip.showOn && !this.isMaterial && this.closeTooltip(), 
            clearInterval(this.repeatInterval), this.getHandle().focus();
        }, Slider.prototype.customTickCounter = function(bigNum) {
            var tickCount = 4;
            return !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && (bigNum > 4 && (tickCount = 3), 
            bigNum > 7 && (tickCount = 2), bigNum > 14 && (tickCount = 1), bigNum > 28 && (tickCount = 0)), 
            tickCount;
        }, Slider.prototype.renderScale = function() {
            var orien = "Vertical" === this.orientation ? "v" : "h";
            this.noOfDecimals = this.numberOfDecimals(this.step), this.ul = this.createElement("ul", {
                className: classNames_scale + " e-" + orien + "-scale " + classNames_tick + "-" + this.ticks.placement.toLowerCase(),
                attrs: {
                    role: "presentation",
                    tabIndex: "-1",
                    "aria-hidden": "true"
                }
            }), this.ul.style.zIndex = "-1", Browser.isAndroid && "h" === orien && this.ul.classList.add(classNames_sliderTickPosition);
            var smallStep = this.ticks.smallStep;
            this.ticks.showSmallTicks ? smallStep <= 0 && (smallStep = parseFloat(formatUnit(this.step))) : smallStep = this.ticks.largeStep > 0 ? this.ticks.largeStep : parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));
            var min = this.fractionalToInteger(this.min), max = this.fractionalToInteger(this.max), steps = this.fractionalToInteger(smallStep), bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1, customStep = this.customTickCounter(bigNum), count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);
            this.element.appendChild(this.ul);
            var li, start = parseFloat(this.min.toString());
            "v" === orien && (start = parseFloat(this.max.toString()));
            var islargeTick, left = 0, tickWidth = 100 / count;
            tickWidth === 1 / 0 && (tickWidth = 5);
            for (var i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {
                if (li = this.createElement("li", {
                    attrs: {
                        class: classNames_tick,
                        role: "presentation",
                        tabIndex: "-1",
                        "aria-hidden": "true"
                    }
                }), !isNullOrUndefined(this.customValues) && this.customValues.length > 0) (islargeTick = i % (customStep + 1) == 0) && ("h" === orien ? (start = this.customValues[k], 
                k++) : (start = this.customValues[y], y--), li.setAttribute("title", start.toString())); else if (li.setAttribute("title", start.toString()), 
                0 === this.numberOfDecimals(this.max) && 0 === this.numberOfDecimals(this.min) && 0 === this.numberOfDecimals(this.step)) islargeTick = "h" === orien ? (start - parseFloat(this.min.toString())) % this.ticks.largeStep == 0 : Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep == 0; else {
                    var largestep = this.fractionalToInteger(this.ticks.largeStep);
                    islargeTick = (this.fractionalToInteger(start) - min) % largestep == 0;
                }
                islargeTick && li.classList.add(classNames_large), "h" === orien ? li.style.width = tickWidth + "%" : li.style.height = tickWidth + "%";
                var repeat = islargeTick ? "Both" === this.ticks.placement ? 2 : 1 : 0;
                if (islargeTick) for (var j = 0; j < repeat; j++) this.createTick(li, start); else isNullOrUndefined(this.customValues) && this.formatTicksValue(li, start);
                this.ul.appendChild(li), this.tickElementCollection.push(li);
                var decimalPoints = void 0;
                isNullOrUndefined(this.customValues) && (decimalPoints = this.numberOfDecimals(smallStep) > this.numberOfDecimals(start) ? this.numberOfDecimals(smallStep) : this.numberOfDecimals(start), 
                start = "h" === orien ? this.makeRoundNumber(start + smallStep, decimalPoints) : this.makeRoundNumber(start - smallStep, decimalPoints), 
                left = this.makeRoundNumber(left + smallStep, decimalPoints));
            }
            this.tickesAlignment(orien, tickWidth);
        }, Slider.prototype.tickesAlignment = function(orien, tickWidth) {
            this.firstChild = this.ul.firstElementChild, this.lastChild = this.ul.lastElementChild, 
            this.firstChild.classList.add(classNames_sliderFirstTick), this.lastChild.classList.add(classNames_sliderLastTick), 
            this.sliderContainer.classList.add(classNames_scale + "-" + this.ticks.placement.toLowerCase()), 
            "h" === orien ? (this.firstChild.style.width = tickWidth / 2 + "%", this.lastChild.style.width = tickWidth / 2 + "%") : (this.firstChild.style.height = tickWidth / 2 + "%", 
            this.lastChild.style.height = tickWidth / 2 + "%");
            var eventArgs = {
                ticksWrapper: this.ul,
                tickElements: this.tickElementCollection
            };
            this.trigger("renderedTicks", eventArgs), this.scaleAlignment();
        }, Slider.prototype.createTick = function(li, start) {
            var span = this.createElement("span", {
                className: classNames_tickValue + " " + classNames_tick + "-" + this.ticks.placement.toLowerCase(),
                attrs: {
                    role: "presentation",
                    tabIndex: "-1",
                    "aria-hidden": "true"
                }
            });
            li.appendChild(span), span.innerHTML = isNullOrUndefined(this.customValues) ? this.formatTicksValue(li, start) : start;
        }, Slider.prototype.formatTicksValue = function(li, start) {
            var tickText = this.formatNumber(start), eventArgs = {
                value: start,
                text: isNullOrUndefined(this.ticks) || isNullOrUndefined(this.ticks.format) ? tickText : this.formatString(start, this.ticksFormatInfo).formatString,
                tickElement: li
            };
            return this.trigger("renderingTicks", eventArgs), li.setAttribute("title", eventArgs.text.toString()), 
            eventArgs.text.toString();
        }, Slider.prototype.scaleAlignment = function() {
            this.tickValuePosition();
            this.orientation;
            "Vertical" === this.orientation ? this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(classNames_sliderSmallSize) : this.sliderContainer.classList.remove(classNames_sliderSmallSize) : this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(classNames_sliderSmallSize) : this.sliderContainer.classList.remove(classNames_sliderSmallSize);
        }, Slider.prototype.tickValuePosition = function() {
            var firstChild, first = this.firstChild.getBoundingClientRect(), smallStep = this.ticks.smallStep, count = Math.abs(parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / smallStep;
            this.firstChild.children.length > 0 && (firstChild = this.firstChild.children[0].getBoundingClientRect());
            var other, tickElements = [ this.sliderContainer.querySelectorAll("." + classNames_tick + "." + classNames_large + " ." + classNames_tickValue) ];
            other = "Both" === this.ticks.placement ? [].slice.call(tickElements[0], 2) : [].slice.call(tickElements[0], 1);
            for (var tickWidth = "Vertical" === this.orientation ? 2 * first.height : 2 * first.width, i = 0; i < this.firstChild.children.length; i++) "Vertical" === this.orientation ? this.firstChild.children[i].style.top = -firstChild.height / 2 + "px" : this.enableRtl ? this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + "px" : this.firstChild.children[i].style.left = -firstChild.width / 2 + "px";
            for (i = 0; i < other.length; i++) {
                var otherChild = other[i].getBoundingClientRect();
                "Vertical" === this.orientation ? setStyleAttribute(other[i], {
                    top: (tickWidth - otherChild.height) / 2 + "px"
                }) : setStyleAttribute(other[i], {
                    left: (tickWidth - otherChild.width) / 2 + "px"
                });
            }
            this.enableRtl && this.lastChild.children.length && 0 !== count && (this.lastChild.children[0].style.left = -this.lastChild.getBoundingClientRect().width / 2 + "px", 
            "Both" === this.ticks.placement && (this.lastChild.children[1].style.left = -this.lastChild.getBoundingClientRect().width / 2 + "px")), 
            0 === count && ("Horizontal" === this.orientation && (this.enableRtl ? (this.firstChild.classList.remove(classNames_sliderLastTick), 
            this.firstChild.style.right = this.firstHandle.style.right, this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + "px", 
            "Both" === this.ticks.placement && (this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + "px")) : (this.firstChild.classList.remove(classNames_sliderLastTick), 
            this.firstChild.style.left = this.firstHandle.style.left)), "Vertical" === this.orientation && this.firstChild.classList.remove(classNames_sliderLastTick));
        }, Slider.prototype.setAriaAttrValue = function(element) {
            var ariaValueText, isTickFormatted = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format), text = isTickFormatted ? this.formatContent(this.tooltipFormatInfo, !1) : this.formatContent(this.ticksFormatInfo, !1), valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, !0) : this.formatContent(this.tooltipFormatInfo, !0);
            ariaValueText = 2 === (text = this.customAriaText ? this.customAriaText : text).split(" - ").length ? text.split(" - ") : [ text, text ], 
            this.setAriaAttributes(element), "Range" !== this.type ? attributes(element, {
                "aria-valuenow": valuenow,
                "aria-valuetext": text
            }) : this.enableRtl ? element === this.firstHandle ? attributes(element, {
                "aria-valuenow": valuenow.split(" - ")[1],
                "aria-valuetext": ariaValueText[1]
            }) : attributes(element, {
                "aria-valuenow": valuenow.split(" - ")[0],
                "aria-valuetext": ariaValueText[0]
            }) : element === this.firstHandle ? attributes(element, {
                "aria-valuenow": valuenow.split(" - ")[0],
                "aria-valuetext": ariaValueText[0]
            }) : attributes(element, {
                "aria-valuenow": valuenow.split(" - ")[1],
                "aria-valuetext": ariaValueText[1]
            });
        }, Slider.prototype.handleValueUpdate = function() {
            return "Range" === this.type ? 1 === this.activeHandle ? this.handleVal1 : this.handleVal2 : this.handleVal1;
        }, Slider.prototype.getLimitCorrectedValues = function(value) {
            return value = "MinRange" === this.type || "Default" === this.type ? this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0] : 1 === this.activeHandle ? this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0] : this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];
        }, Slider.prototype.focusSliderElement = function() {
            this.isElementFocused || (this.element.focus(), this.isElementFocused = !0);
        }, Slider.prototype.buttonClick = function(args) {
            this.focusSliderElement();
            var value, enabledRTL = this.enableRtl && "Vertical" !== this.orientation, hVal = this.handleValueUpdate();
            40 === args.keyCode || 37 === args.keyCode || args.currentTarget.classList.contains(classNames_firstButton) ? value = enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !0) : this.add(hVal, parseFloat(this.step.toString()), !1) : 38 === args.keyCode || 39 === args.keyCode || args.currentTarget.classList.contains(classNames_secondButton) ? value = enabledRTL ? this.add(hVal, parseFloat(this.step.toString()), !1) : this.add(hVal, parseFloat(this.step.toString()), !0) : 33 === args.keyCode || args.currentTarget.classList.contains(classNames_firstButton) ? value = enabledRTL ? this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !1) : this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !0) : 34 === args.keyCode || args.currentTarget.classList.contains(classNames_secondButton) ? value = enabledRTL ? this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !0) : this.add(hVal, parseFloat(this.ticks.largeStep.toString()), !1) : 36 === args.keyCode ? value = parseFloat(this.min.toString()) : 35 === args.keyCode && (value = parseFloat(this.max.toString())), 
            this.limits.enabled && (value = this.getLimitCorrectedValues(value)), this.changeHandleValue(value), 
            !this.isMaterial || this.tooltip.isVisible || this.getHandle().classList.contains(classNames_sliderTabHandle) || this.materialChange(), 
            this.tooltipAnimation(), this.getHandle().focus(), args.currentTarget.classList.contains(classNames_firstButton) && EventHandler.add(this.firstBtn, "mouseup touchend", this.buttonUp, this), 
            args.currentTarget.classList.contains(classNames_secondButton) && EventHandler.add(this.secondBtn, "mouseup touchend", this.buttonUp, this);
        }, Slider.prototype.tooltipAnimation = function() {
            if (this.tooltip.isVisible) {
                var tooltipObj = 1 === this.activeHandle ? this.firstTooltipObj : this.secondTooltipObj, tooltipElement = 1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement;
                this.isMaterial ? tooltipElement.classList.contains(classNames_materialTooltipOpen) ? this.refreshTooltip() : this.openMaterialTooltip() : (tooltipObj.animation = {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "FadeOut",
                        duration: 500
                    }
                }, this.openTooltip());
            }
        }, Slider.prototype.buttonUp = function(args) {
            if (this.tooltip.isVisible && !this.isMaterial) {
                (1 === this.activeHandle ? this.firstTooltipObj : this.secondTooltipObj).animation = {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "None"
                    }
                };
            }
            args.currentTarget.classList.contains(classNames_firstButton) && EventHandler.remove(this.firstBtn, "mouseup touchend", this.buttonUp), 
            args.currentTarget.classList.contains(classNames_secondButton) && EventHandler.remove(this.secondBtn, "mouseup touchend", this.buttonUp);
        }, Slider.prototype.setRangeBar = function() {
            "Horizontal" === this.orientation ? "MinRange" === this.type ? (this.enableRtl ? this.rangeBar.style.right = "0px" : this.rangeBar.style.left = "0px", 
            setStyleAttribute(this.rangeBar, {
                width: isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px"
            })) : (this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + "px" : this.rangeBar.style.left = this.handlePos1 + "px", 
            setStyleAttribute(this.rangeBar, {
                width: this.handlePos2 - this.handlePos1 + "px"
            })) : "MinRange" === this.type ? (this.rangeBar.style.bottom = "0px", setStyleAttribute(this.rangeBar, {
                height: isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px"
            })) : (this.rangeBar.style.bottom = this.handlePos1 + "px", setStyleAttribute(this.rangeBar, {
                height: this.handlePos2 - this.handlePos1 + "px"
            }));
        }, Slider.prototype.checkValidValueAndPos = function(value) {
            return value = this.checkHandleValue(value), value = this.checkHandlePosition(value);
        }, Slider.prototype.setLimitBarPositions = function(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {
            "Horizontal" === this.orientation ? this.enableRtl ? (this.limitBarFirst.style.right = fromMinPostion + "px", 
            this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + "px") : (this.limitBarFirst.style.left = fromMinPostion + "px", 
            this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + "px") : (this.limitBarFirst.style.bottom = fromMinPostion + "px", 
            this.limitBarFirst.style.height = fromMaxpostion - fromMinPostion + "px"), "Range" === this.type && ("Horizontal" === this.orientation ? this.enableRtl ? (this.limitBarSecond.style.right = toMinPostion + "px", 
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + "px") : (this.limitBarSecond.style.left = toMinPostion + "px", 
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + "px") : (this.limitBarSecond.style.bottom = toMinPostion + "px", 
            this.limitBarSecond.style.height = toMaxpostion - toMinPostion + "px"));
        }, Slider.prototype.setLimitBar = function() {
            if ("Default" === this.type || "MinRange" === this.type) {
                var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, !0)[0];
                fromPosition = this.checkValidValueAndPos(fromPosition);
                var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, !0)[0];
                toPosition = this.checkValidValueAndPos(toPosition), this.setLimitBarPositions(fromPosition, toPosition);
            } else if ("Range" === this.type) {
                var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, !0)[0];
                fromMinPostion = this.checkValidValueAndPos(fromMinPostion);
                var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, !0)[0];
                fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);
                var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, !0)[0];
                toMinPostion = this.checkValidValueAndPos(toMinPostion);
                var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, !0)[0];
                toMaxpostion = this.checkValidValueAndPos(toMaxpostion), this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);
            }
        }, Slider.prototype.getLimitValueAndPosition = function(currentValue, minValue, maxValue, limitBar) {
            return isNullOrUndefined(minValue) && (minValue = this.min, isNullOrUndefined(currentValue) && limitBar && (currentValue = minValue)), 
            isNullOrUndefined(maxValue) && (maxValue = this.max, isNullOrUndefined(currentValue) && limitBar && (currentValue = maxValue)), 
            currentValue < minValue && (currentValue = minValue), currentValue > maxValue && (currentValue = maxValue), 
            [ currentValue, this.checkHandlePosition(currentValue) ];
        }, Slider.prototype.setValue = function() {
            if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0 && (this.min = 0, 
            this.max = this.customValues.length - 1), this.setAriaAttributes(this.firstHandle), 
            this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString())), 
            this.handlePos1 = this.checkHandlePosition(this.handleVal1), this.preHandlePos1 = this.handlePos1, 
            isNullOrUndefined(this.activeHandle) ? "Range" === this.type ? this.activeHandle = 2 : this.activeHandle = 1 : this.activeHandle = this.activeHandle, 
            "Default" === this.type || "MinRange" === this.type) {
                if (this.limits.enabled) {
                    var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                    this.handleVal1 = values[0], this.handlePos1 = values[1], this.preHandlePos1 = this.handlePos1;
                }
                this.setHandlePosition(), this.handleStart(), this.value = this.handleVal1, this.setAriaAttrValue(this.firstHandle), 
                this.changeEvent("changed");
            } else this.validateRangeValue();
            "Default" !== this.type && this.setRangeBar(), this.limits.enabled && this.setLimitBar();
        }, Slider.prototype.rangeValueUpdate = function() {
            null !== this.value && "object" == typeof this.value || (this.value = [ parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max)) ]);
        }, Slider.prototype.validateRangeValue = function() {
            this.rangeValueUpdate(), this.setRangeValue();
        }, Slider.prototype.modifyZindex = function() {
            "Range" === this.type ? 1 === this.activeHandle ? (this.firstHandle.style.zIndex = this.zIndex + 4 + "", 
            this.secondHandle.style.zIndex = this.zIndex + 3 + "", this.isMaterial && this.tooltip.isVisible && this.firstTooltipElement && this.secondTooltipElement && (this.firstTooltipElement.style.zIndex = this.zIndex + 4 + "", 
            this.secondTooltipElement.style.zIndex = this.zIndex + 3 + "")) : (this.firstHandle.style.zIndex = this.zIndex + 3 + "", 
            this.secondHandle.style.zIndex = this.zIndex + 4 + "", this.isMaterial && this.tooltip.isVisible && this.firstTooltipElement && this.secondTooltipElement && (this.firstTooltipElement.style.zIndex = this.zIndex + 3 + "", 
            this.secondTooltipElement.style.zIndex = this.zIndex + 4 + "")) : this.isMaterial && this.tooltip.isVisible && this.firstTooltipElement && (this.firstTooltipElement.style.zIndex = this.zIndex + 4 + "");
        }, Slider.prototype.setHandlePosition = function() {
            var handle, tooltipElement, _this = this, pos = 1 === this.activeHandle ? this.handlePos1 : this.handlePos2;
            1 === this.activeHandle ? this.handleVal1 : this.handleVal2;
            this.isMaterial && this.tooltip.isVisible ? (tooltipElement = 1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement, 
            handle = [ this.getHandle(), 1 === this.activeHandle ? this.firstMaterialHandle : this.secondMaterialHandle ]) : handle = [ this.getHandle() ], 
            this.tooltip.isVisible && 0 === pos && "Range" !== this.type ? (handle[0].classList.add(classNames_sliderHandleStart), 
            this.isMaterial && (handle[1].classList.add(classNames_sliderHandleStart), tooltipElement && tooltipElement.classList.add(classNames_sliderTooltipStart))) : (handle[0].classList.remove(classNames_sliderHandleStart), 
            this.tooltip.isVisible && this.isMaterial && (handle[1].classList.remove(classNames_sliderHandleStart), 
            tooltipElement && tooltipElement.classList.remove(classNames_sliderTooltipStart))), 
            handle.forEach(function(handle) {
                "Horizontal" === _this.orientation ? _this.enableRtl ? handle.style.right = pos + "px" : handle.style.left = pos + "px" : handle.style.bottom = pos + "px";
            }), this.changeEvent("change");
        }, Slider.prototype.getHandle = function() {
            return 1 === this.activeHandle ? this.firstHandle : this.secondHandle;
        }, Slider.prototype.setRangeValue = function() {
            this.activeHandle;
            this.updateRangeValue(), this.activeHandle = 1, this.setHandlePosition(), this.activeHandle = 2, 
            this.setHandlePosition(), this.activeHandle = 1;
        }, Slider.prototype.changeEvent = function(eventName) {
            var previous = "change" === eventName ? this.previousVal : this.previousChanged;
            if ("Range" !== this.type) this.setProperties({
                value: this.handleVal1
            }, !0), previous !== this.value && (this.trigger(eventName, this.changeEventArgs(eventName)), 
            this.setPreviousVal(eventName, this.value)), this.setAriaAttrValue(this.firstHandle); else {
                var value = this.value = [ this.handleVal1, this.handleVal2 ];
                this.setProperties({
                    value: value
                }, !0), (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) && (this.trigger(eventName, this.changeEventArgs(eventName)), 
                this.setPreviousVal(eventName, this.value)), this.setAriaAttrValue(this.getHandle());
            }
            this.hiddenInput.value = this.value.toString();
        }, Slider.prototype.changeEventArgs = function(eventName) {
            var eventArgs;
            return this.tooltip.isVisible && this.firstTooltipObj ? (this.tooltipValue(), eventArgs = {
                value: this.value,
                previousValue: "change" === eventName ? this.previousVal : this.previousChanged,
                action: eventName,
                text: this.firstTooltipObj.content
            }) : eventArgs = {
                value: this.value,
                previousValue: "change" === eventName ? this.previousVal : this.previousChanged,
                action: eventName,
                text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() : "Range" !== this.type ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + " - " + this.formatString(this.value[1], this.ticksFormatInfo).formatString
            }, eventArgs;
        }, Slider.prototype.setPreviousVal = function(eventName, value) {
            "change" === eventName ? this.previousVal = value : this.previousChanged = value;
        }, Slider.prototype.updateRangeValue = function() {
            var values = this.value.toString().split(",").map(Number);
            if (this.enableRtl && "Vertical" !== this.orientation || this.rtl ? this.value = [ values[1], values[0] ] : this.value = [ values[0], values[1] ], 
            this.enableRtl && "Vertical" !== this.orientation ? (this.handleVal1 = this.checkHandleValue(this.value[1]), 
            this.handleVal2 = this.checkHandleValue(this.value[0])) : (this.handleVal1 = this.checkHandleValue(this.value[0]), 
            this.handleVal2 = this.checkHandleValue(this.value[1])), this.handlePos1 = this.checkHandlePosition(this.handleVal1), 
            this.handlePos2 = this.checkHandlePosition(this.handleVal2), this.handlePos1 > this.handlePos2 && (this.handlePos1 = this.handlePos2, 
            this.handleVal1 = this.handleVal2), this.preHandlePos1 = this.handlePos1, this.preHandlePos2 = this.handlePos2, 
            this.limits.enabled) {
                this.activeHandle = 1;
                var values_1 = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                this.handleVal1 = values_1[0], this.handlePos1 = values_1[1], this.preHandlePos1 = this.handlePos1, 
                this.activeHandle = 2, values_1 = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd), 
                this.handleVal2 = values_1[0], this.handlePos2 = values_1[1], this.preHandlePos2 = this.handlePos2;
            }
        }, Slider.prototype.checkHandlePosition = function(value) {
            var pos;
            return value = 100 * (value - parseFloat(formatUnit(this.min))) / (parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))), 
            pos = "Horizontal" === this.orientation ? this.element.getBoundingClientRect().width * (value / 100) : this.element.getBoundingClientRect().height * (value / 100), 
            parseFloat(formatUnit(this.max)) === parseFloat(formatUnit(this.min)) && (pos = "Horizontal" === this.orientation ? this.element.getBoundingClientRect().width : this.element.getBoundingClientRect().height), 
            pos;
        }, Slider.prototype.checkHandleValue = function(value) {
            if (this.min > this.max && (this.min = this.max), this.min === this.max) return parseFloat(formatUnit(this.max));
            var handle = this.tempStartEnd();
            return value < handle.start ? value = handle.start : value > handle.end && (value = handle.end), 
            value;
        }, Slider.prototype.onResize = function() {
            var _this = this;
            this.firstHandle.style.transition = "none", "Default" !== this.type && (this.rangeBar.style.transition = "none"), 
            "Range" === this.type && (this.secondHandle.style.transition = "none"), this.handlePos1 = this.checkHandlePosition(this.handleVal1), 
            this.handleVal2 && (this.handlePos2 = this.checkHandlePosition(this.handleVal2)), 
            "Horizontal" === this.orientation ? (this.enableRtl ? this.firstHandle.style.right = this.handlePos1 + "px" : this.firstHandle.style.left = this.handlePos1 + "px", 
            this.isMaterial && this.tooltip.isVisible && this.firstMaterialHandle && (this.enableRtl ? this.firstMaterialHandle.style.right = this.handlePos1 + "px" : this.firstMaterialHandle.style.left = this.handlePos1 + "px"), 
            "MinRange" === this.type ? (this.enableRtl ? this.rangeBar.style.right = "0px" : this.rangeBar.style.left = "0px", 
            setStyleAttribute(this.rangeBar, {
                width: isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px"
            })) : "Range" === this.type && (this.enableRtl ? this.secondHandle.style.right = this.handlePos2 + "px" : this.secondHandle.style.left = this.handlePos2 + "px", 
            this.isMaterial && this.tooltip.isVisible && this.secondMaterialHandle && (this.enableRtl ? this.secondMaterialHandle.style.right = this.handlePos2 + "px" : this.secondMaterialHandle.style.left = this.handlePos2 + "px"), 
            this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + "px" : this.rangeBar.style.left = this.handlePos1 + "px", 
            setStyleAttribute(this.rangeBar, {
                width: this.handlePos2 - this.handlePos1 + "px"
            }))) : (this.firstHandle.style.bottom = this.handlePos1 + "px", this.isMaterial && this.tooltip.isVisible && this.firstMaterialHandle && (this.firstMaterialHandle.style.bottom = this.handlePos1 + "px"), 
            "MinRange" === this.type ? (this.rangeBar.style.bottom = "0px", setStyleAttribute(this.rangeBar, {
                height: isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px"
            })) : "Range" === this.type && (this.secondHandle.style.bottom = this.handlePos2 + "px", 
            this.isMaterial && this.tooltip.isVisible && this.secondMaterialHandle && (this.secondMaterialHandle.style.bottom = this.handlePos2 + "px"), 
            this.rangeBar.style.bottom = this.handlePos1 + "px", setStyleAttribute(this.rangeBar, {
                height: this.handlePos2 - this.handlePos1 + "px"
            }))), this.limits.enabled && this.setLimitBar(), "None" !== this.ticks.placement && this.ul && (this.removeElement(this.ul), 
            this.renderScale()), this.tooltip.isVisible || setTimeout(function() {
                _this.firstHandle.style.transition = _this.scaleTransform, "Range" === _this.type && (_this.secondHandle.style.transition = _this.scaleTransform);
            }), this.refreshTooltip();
        }, Slider.prototype.changeHandleValue = function(value) {
            var position = null;
            1 === this.activeHandle ? (this.limits.enabled && this.limits.startHandleFixed || (this.handleVal1 = this.checkHandleValue(value), 
            this.handlePos1 = this.checkHandlePosition(this.handleVal1), "Range" === this.type && this.handlePos1 > this.handlePos2 && (this.handlePos1 = this.handlePos2, 
            this.handleVal1 = this.handleVal2), this.handlePos1 !== this.preHandlePos1 && (position = this.preHandlePos1 = this.handlePos1)), 
            this.modifyZindex()) : (this.limits.enabled && this.limits.endHandleFixed || (this.handleVal2 = this.checkHandleValue(value), 
            this.handlePos2 = this.checkHandlePosition(this.handleVal2), "Range" === this.type && this.handlePos2 < this.handlePos1 && (this.handlePos2 = this.handlePos1, 
            this.handleVal2 = this.handleVal1), this.handlePos2 !== this.preHandlePos2 && (position = this.preHandlePos2 = this.handlePos2)), 
            this.modifyZindex()), null !== position && ("Default" !== this.type && this.setRangeBar(), 
            this.setHandlePosition());
        }, Slider.prototype.tempStartEnd = function() {
            return this.min > this.max ? {
                start: this.max,
                end: this.min
            } : {
                start: this.min,
                end: this.max
            };
        }, Slider.prototype.xyToPosition = function(position) {
            if (this.min === this.max) return 100;
            if ("Horizontal" === this.orientation) {
                var left = position.x - this.element.getBoundingClientRect().left, num = this.element.offsetWidth / 100;
                this.val = left / num;
            } else {
                var top_1 = position.y - this.element.getBoundingClientRect().top;
                num = this.element.offsetHeight / 100;
                this.val = 100 - top_1 / num;
            }
            var val = this.stepValueCalculation(this.val);
            return val < 0 ? val = 0 : val > 100 && (val = 100), this.enableRtl && "Vertical" !== this.orientation && (val = 100 - val), 
            "Horizontal" === this.orientation ? this.element.getBoundingClientRect().width * (val / 100) : this.element.getBoundingClientRect().height * (val / 100);
        }, Slider.prototype.stepValueCalculation = function(value) {
            0 === this.step && (this.step = 1);
            var percentStep = parseFloat(formatUnit(this.step)) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100), remain = value % Math.abs(percentStep);
            return 0 !== remain && (percentStep / 2 > remain ? value -= remain : value += Math.abs(percentStep) - remain), 
            value;
        }, Slider.prototype.add = function(a, b, addition) {
            var x = Math.pow(10, 3);
            return addition ? (Math.round(a * x) + Math.round(b * x)) / x : (Math.round(a * x) - Math.round(b * x)) / x;
        }, Slider.prototype.round = function(a) {
            var f = this.step.toString().split(".");
            return f[1] ? parseFloat(a.toFixed(f[1].length)) : Math.round(a);
        }, Slider.prototype.positionToValue = function(pos) {
            var val, diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));
            val = "Horizontal" === this.orientation ? pos / this.element.getBoundingClientRect().width * diff : pos / this.element.getBoundingClientRect().height * diff;
            return this.add(val, parseFloat(this.min.toString()), !0);
        }, Slider.prototype.sliderBarClick = function(evt) {
            evt.preventDefault();
            var pos;
            "mousedown" === evt.type || "click" === evt.type ? pos = {
                x: evt.clientX,
                y: evt.clientY
            } : "touchstart" === evt.type && (pos = {
                x: evt.changedTouches[0].clientX,
                y: evt.changedTouches[0].clientY
            });
            var handlepos = this.xyToPosition(pos), handleVal = this.positionToValue(handlepos);
            if ("Range" === this.type && this.handlePos2 - handlepos < handlepos - this.handlePos1) {
                if (this.activeHandle = 2, !this.limits.enabled || !this.limits.endHandleFixed) {
                    if (this.limits.enabled) {
                        handleVal = (value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd))[0], 
                        handlepos = value[1];
                    }
                    this.secondHandle.classList.add(classNames_sliderActiveHandle), this.handlePos2 = this.preHandlePos2 = handlepos, 
                    this.handleVal2 = handleVal;
                }
                this.modifyZindex(), this.secondHandle.focus();
            } else {
                if (this.activeHandle = 1, !this.limits.enabled || !this.limits.startHandleFixed) {
                    if (this.limits.enabled) {
                        var value;
                        handleVal = (value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd))[0], 
                        handlepos = value[1];
                    }
                    this.firstHandle.classList.add(classNames_sliderActiveHandle), this.handlePos1 = this.preHandlePos1 = handlepos, 
                    this.handleVal1 = handleVal;
                }
                this.modifyZindex(), this.firstHandle.focus();
            }
            if (this.isMaterial && this.tooltip.isVisible) {
                (1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement).classList.add(classNames_materialTooltipActive);
            }
            var focusedElement = this.element.querySelector("." + classNames_sliderTabHandle);
            focusedElement && this.getHandle() !== focusedElement && focusedElement.classList.remove(classNames_sliderTabHandle);
            var handle = 1 === this.activeHandle ? this.firstHandle : this.secondHandle;
            if (evt.target === handle) return !this.isMaterial || this.tooltip.isVisible || this.getHandle().classList.contains(classNames_sliderTabHandle) || this.materialChange(), 
            void this.tooltipAnimation();
            if (this.checkRepeatedValue(handleVal)) {
                var transition = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
                this.getHandle().style.transition = transition.handle, "Default" !== this.type && (this.rangeBar.style.transition = transition.rangeBar), 
                this.setHandlePosition(), "Default" !== this.type && this.setRangeBar();
            }
        }, Slider.prototype.refreshTooltipOnMove = function() {
            this.tooltip.isVisible && (this.tooltipValue(), 1 === this.activeHandle ? this.firstTooltipObj.refresh(this.firstHandle) : this.secondTooltipObj.refresh(this.secondHandle));
        }, Slider.prototype.sliderDown = function(event) {
            var _a, _b;
            if (event.preventDefault(), this.focusSliderElement(), "Range" === this.type && this.drag && event.target === this.rangeBar) {
                var xPostion = void 0, yPostion = void 0;
                "mousedown" === event.type ? (xPostion = (_a = [ event.clientX, event.clientY ])[0], 
                yPostion = _a[1]) : "touchstart" === event.type && (xPostion = (_b = [ event.changedTouches[0].clientX, event.changedTouches[0].clientY ])[0], 
                yPostion = _b[1]), "Horizontal" === this.orientation ? (this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left, 
                this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion) : (this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top, 
                this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion), 
                this.minDiff = this.handleVal2 - this.handleVal1, this.getHandle().focus(), EventHandler.add(document, "mousemove touchmove", this.dragRangeBarMove, this), 
                EventHandler.add(document, "mouseup touchend", this.dragRangeBarUp, this);
            } else this.sliderBarClick(event), EventHandler.add(document, "mousemove touchmove", this.sliderBarMove, this), 
            EventHandler.add(document, "mouseup touchend", this.sliderBarUp, this);
        }, Slider.prototype.handleValueAdjust = function(handleValue, assignValue, handleNumber) {
            1 === handleNumber ? (this.handleVal1 = assignValue, this.handleVal2 = this.handleVal1 + this.minDiff) : 2 === handleNumber && (this.handleVal2 = assignValue, 
            this.handleVal1 = this.handleVal2 - this.minDiff), this.handlePos1 = this.checkHandlePosition(this.handleVal1), 
            this.handlePos2 = this.checkHandlePosition(this.handleVal2);
        }, Slider.prototype.dragRangeBarMove = function(event) {
            var _a, _b;
            "touchmove" !== event.type && event.preventDefault();
            var pos;
            this.rangeBar.style.transition = "none", this.firstHandle.style.transition = "none", 
            this.secondHandle.style.transition = "none";
            var xPostion, yPostion;
            if ("mousemove" === event.type ? (xPostion = (_a = [ event.clientX, event.clientY ])[0], 
            yPostion = _a[1]) : (xPostion = (_b = [ event.changedTouches[0].clientX, event.changedTouches[0].clientY ])[0], 
            yPostion = _b[1]), !(this.limits.enabled && this.limits.startHandleFixed || this.limits.enabled && this.limits.endHandleFixed)) {
                if (pos = this.enableRtl ? {
                    x: xPostion + this.secondPartRemain,
                    y: yPostion + this.secondPartRemain
                } : {
                    x: xPostion - this.firstPartRemain,
                    y: yPostion + this.secondPartRemain
                }, this.handlePos1 = this.xyToPosition(pos), this.handleVal1 = this.positionToValue(this.handlePos1), 
                pos = this.enableRtl ? {
                    x: xPostion - this.firstPartRemain,
                    y: yPostion - this.firstPartRemain
                } : {
                    x: xPostion + this.secondPartRemain,
                    y: yPostion - this.firstPartRemain
                }, this.handlePos2 = this.xyToPosition(pos), this.handleVal2 = this.positionToValue(this.handlePos2), 
                this.limits.enabled) {
                    var value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
                    this.handleVal1 = value[0], this.handlePos1 = value[1], this.handleVal1 === this.limits.minEnd && this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1), 
                    this.handleVal1 === this.limits.minStart && this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1), 
                    value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd), 
                    this.handleVal2 = value[0], this.handlePos2 = value[1], this.handleVal2 === this.limits.maxStart && this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2), 
                    this.handleVal2 === this.limits.maxEnd && this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
                }
                this.handleVal2 === this.max && this.handleValueAdjust(this.handleVal2, this.max, 2), 
                this.handleVal1 === this.min && this.handleValueAdjust(this.handleVal1, this.min, 1);
            }
            this.activeHandle = 1, this.setHandlePosition(), this.tooltip.isVisible && (this.isMaterial ? this.firstTooltipElement.classList.contains(classNames_materialTooltipOpen) ? this.refreshTooltipOnMove() : this.openMaterialTooltip() : this.firstTooltipElement ? this.refreshTooltipOnMove() : this.openTooltip()), 
            this.activeHandle = 2, this.setHandlePosition(), this.tooltip.isVisible && (this.isMaterial ? this.secondTooltipElement.classList.contains(classNames_materialTooltipOpen) ? this.refreshTooltipOnMove() : this.openMaterialTooltip() : this.secondTooltipElement ? this.refreshTooltipOnMove() : this.openTooltip()), 
            this.setRangeBar();
        }, Slider.prototype.sliderBarUp = function() {
            if (this.changeEvent("changed"), this.handleFocusOut(), this.firstHandle.classList.remove(classNames_sliderActiveHandle), 
            "Range" === this.type && this.secondHandle.classList.remove(classNames_sliderActiveHandle), 
            this.tooltip.isVisible && ("Always" !== this.tooltip.showOn && this.closeTooltip(), 
            !this.isMaterial)) {
                (1 === this.activeHandle ? this.firstTooltipObj : this.secondTooltipObj).animation = {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "None"
                    }
                };
            }
            if (this.isMaterial && (this.getHandle().classList.remove("e-large-thumb-size"), 
            this.tooltip.isVisible)) {
                (1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement).classList.remove(classNames_materialTooltipActive);
            }
            EventHandler.remove(document, "mousemove touchmove", this.sliderBarMove), EventHandler.remove(document, "mouseup touchend", this.sliderBarUp);
        }, Slider.prototype.sliderBarMove = function(evt) {
            "touchmove" !== evt.type && evt.preventDefault();
            var pos;
            pos = "mousemove" === evt.type ? {
                x: evt.clientX,
                y: evt.clientY
            } : {
                x: evt.changedTouches[0].clientX,
                y: evt.changedTouches[0].clientY
            };
            var handlepos = this.xyToPosition(pos), handleVal = this.positionToValue(handlepos);
            if (handlepos = Math.round(handlepos), "Range" !== this.type && 1 === this.activeHandle) {
                if (!this.limits.enabled || !this.limits.startHandleFixed) {
                    if (this.limits.enabled) {
                        var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                        handlepos = valueAndPostion[1], handleVal = valueAndPostion[0];
                    }
                    this.handlePos1 = handlepos, this.handleVal1 = handleVal;
                }
                this.firstHandle.classList.add(classNames_sliderActiveHandle);
            }
            if ("Range" === this.type) if (1 === this.activeHandle) {
                if (this.firstHandle.classList.add(classNames_sliderActiveHandle), !(this.limits.enabled && this.limits.startHandleFixed || (handlepos > this.handlePos2 && (handlepos = this.handlePos2, 
                handleVal = this.handleVal2), handlepos === this.preHandlePos1))) {
                    if (this.limits.enabled) {
                        handleVal = (value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd))[0], 
                        handlepos = value[1];
                    }
                    this.handlePos1 = this.preHandlePos1 = handlepos, this.handleVal1 = handleVal, this.activeHandle = 1;
                }
            } else if (2 === this.activeHandle && (this.secondHandle.classList.add(classNames_sliderActiveHandle), 
            !(this.limits.enabled && this.limits.endHandleFixed || (handlepos < this.handlePos1 && (handlepos = this.handlePos1, 
            handleVal = this.handleVal1), handlepos === this.preHandlePos2)))) {
                if (this.limits.enabled) {
                    var value;
                    handleVal = (value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd))[0], 
                    handlepos = value[1];
                }
                this.handlePos2 = this.preHandlePos2 = handlepos, this.handleVal2 = handleVal, this.activeHandle = 2;
            }
            if (this.checkRepeatedValue(handleVal)) {
                this.getHandle().style.transition = this.scaleTransform, "Default" !== this.type && (this.rangeBar.style.transition = "none"), 
                this.setHandlePosition(), !this.isMaterial || this.tooltip.isVisible || this.getHandle().classList.contains(classNames_sliderTabHandle) || this.materialChange();
                var tooltipElement = 1 === this.activeHandle ? this.firstTooltipElement : this.secondTooltipElement;
                this.tooltip.isVisible && (this.isMaterial ? tooltipElement.classList.contains(classNames_materialTooltipOpen) ? this.refreshTooltipOnMove() : this.openMaterialTooltip() : tooltipElement ? this.refreshTooltipOnMove() : this.openTooltip()), 
                "Default" !== this.type && this.setRangeBar();
            }
        }, Slider.prototype.dragRangeBarUp = function(event) {
            this.changeEvent("changed"), this.tooltip.isVisible && ("Always" === this.tooltip.showOn || this.isMaterial || (this.activeHandle = 1, 
            this.firstTooltipObj.animation = {
                open: {
                    effect: "None"
                },
                close: {
                    effect: "FadeOut",
                    duration: 500
                }
            }, this.closeTooltip(), this.activeHandle = 2, this.secondTooltipObj.animation = {
                open: {
                    effect: "None"
                },
                close: {
                    effect: "FadeOut",
                    duration: 500
                }
            }, this.closeTooltip())), EventHandler.remove(document, "mousemove touchmove", this.dragRangeBarMove), 
            EventHandler.remove(document, "mouseup touchend", this.dragRangeBarUp);
        }, Slider.prototype.checkRepeatedValue = function(currentValue) {
            if ("Range" === this.type) {
                if (currentValue === (this.enableRtl && "Vertical" !== this.orientation ? 1 === this.activeHandle ? this.previousVal[1] : this.previousVal[0] : 1 === this.activeHandle ? this.previousVal[0] : this.previousVal[1])) return 0;
            } else if (currentValue === this.previousVal) return 0;
            return 1;
        }, Slider.prototype.refreshTooltip = function() {
            this.tooltip.isVisible && this.firstTooltipObj && (this.tooltipValue(), this.firstTooltipObj.refresh(this.firstHandle), 
            "Range" === this.type && this.secondTooltipObj.refresh(this.secondHandle));
        }, Slider.prototype.openTooltip = function() {
            this.tooltip.isVisible && this.firstTooltipObj && (this.tooltipValue(), this.isMaterial ? this.openMaterialTooltip() : 1 === this.activeHandle ? this.firstTooltipObj.open(this.firstHandle) : this.secondTooltipObj.open(this.secondHandle));
        }, Slider.prototype.keyDown = function(event) {
            switch (event.keyCode) {
              case 37:
              case 38:
              case 39:
              case 40:
              case 33:
              case 34:
              case 36:
              case 35:
                event.preventDefault(), this.buttonClick(event), this.tooltip.isVisible && "Always" !== this.tooltip.showOn && !this.isMaterial && this.closeTooltip();
            }
        }, Slider.prototype.wireButtonEvt = function(destroy) {
            destroy ? (EventHandler.remove(this.firstBtn, "mouseleave touchleave", this.buttonFocusOut), 
            EventHandler.remove(this.secondBtn, "mouseleave touchleave", this.buttonFocusOut), 
            EventHandler.remove(this.firstBtn, "mousedown touchstart", this.repeatHandlerMouse), 
            EventHandler.remove(this.firstBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp), 
            EventHandler.remove(this.secondBtn, "mousedown touchstart", this.repeatHandlerMouse), 
            EventHandler.remove(this.secondBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp), 
            EventHandler.remove(this.firstBtn, "focusout", this.sliderFocusOut), EventHandler.remove(this.secondBtn, "focusout", this.sliderFocusOut)) : (EventHandler.add(this.firstBtn, "mouseleave touchleave", this.buttonFocusOut, this), 
            EventHandler.add(this.secondBtn, "mouseleave touchleave", this.buttonFocusOut, this), 
            EventHandler.add(this.firstBtn, "mousedown touchstart", this.repeatHandlerMouse, this), 
            EventHandler.add(this.firstBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp, this), 
            EventHandler.add(this.secondBtn, "mousedown touchstart", this.repeatHandlerMouse, this), 
            EventHandler.add(this.secondBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp, this), 
            EventHandler.add(this.firstBtn, "focusout", this.sliderFocusOut, this), EventHandler.add(this.secondBtn, "focusout", this.sliderFocusOut, this));
        }, Slider.prototype.wireEvents = function() {
            this.onresize = this.onResize.bind(this), window.addEventListener("resize", this.onresize), 
            this.enabled && !this.readonly && (EventHandler.add(this.element, "mousedown touchstart", this.sliderDown, this), 
            EventHandler.add(this.sliderContainer, "keydown", this.keyDown, this), EventHandler.add(this.sliderContainer, "keyup", this.keyUp, this), 
            EventHandler.add(this.element, "focusout", this.sliderFocusOut, this), EventHandler.add(this.sliderContainer, "mouseover mouseout touchstart touchend", this.hover, this), 
            this.wireFirstHandleEvt(!1), "Range" === this.type && this.wireSecondHandleEvt(!1), 
            this.showButtons && this.wireButtonEvt(!1), this.wireMaterialTooltipEvent(!1));
        }, Slider.prototype.unwireEvents = function() {
            EventHandler.remove(this.element, "mousedown touchstart", this.sliderDown), EventHandler.remove(this.sliderContainer, "keydown", this.keyDown), 
            EventHandler.remove(this.sliderContainer, "keyup", this.keyUp), EventHandler.remove(this.element, "focusout", this.sliderFocusOut), 
            EventHandler.remove(this.sliderContainer, "mouseover mouseout touchstart touchend", this.hover), 
            this.wireFirstHandleEvt(!0), "Range" === this.type && this.wireSecondHandleEvt(!0), 
            this.showButtons && this.wireButtonEvt(!0), this.wireMaterialTooltipEvent(!0);
        }, Slider.prototype.keyUp = function(event) {
            if (9 === event.keyCode && event.target.classList.contains(classNames_sliderHandle) && (this.focusSliderElement(), 
            !event.target.classList.contains(classNames_sliderTabHandle))) {
                this.element.querySelector("." + classNames_sliderTabHandle) && this.element.querySelector("." + classNames_sliderTabHandle).classList.remove(classNames_sliderTabHandle), 
                event.target.classList.add(classNames_sliderTabHandle);
                var parentElement = event.target.parentElement;
                parentElement === this.element && (parentElement.querySelector("." + classNames_sliderTrack).classList.add(classNames_sliderTabTrack), 
                "Range" !== this.type && "MinRange" !== this.type || parentElement.querySelector("." + classNames_rangeBar).classList.add(classNames_sliderTabRange)), 
                "Range" === this.type && (event.target.previousSibling.classList.contains(classNames_sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1), 
                this.getHandle().focus(), this.tooltipAnimation(), this.tooltip.isVisible && "Always" !== this.tooltip.showOn && !this.isMaterial && this.closeTooltip();
            }
            this.changeEvent("changed");
        }, Slider.prototype.hover = function(event) {
            isNullOrUndefined(event) || ("mouseover" === event.type || "touchmove" === event.type || "mousemove" === event.type || "pointermove" === event.type || "touchstart" === event.type ? this.sliderContainer.classList.add(classNames_sliderHover) : this.sliderContainer.classList.remove(classNames_sliderHover));
        }, Slider.prototype.sliderFocusOut = function(event) {
            var _this = this;
            if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {
                if (this.isMaterial && this.tooltip.isVisible) {
                    var transformProperties_1 = this.getTooltipTransformProperties(this.previousTooltipClass), tooltipElement = "Range" !== this.type ? [ this.firstTooltipElement ] : [ this.firstTooltipElement, this.secondTooltipElement ], hiddenHandle_1 = "Range" !== this.type ? [ this.firstHandle ] : [ this.firstHandle, this.secondHandle ], handle_1 = "Range" !== this.type ? [ this.firstMaterialHandle ] : [ this.firstMaterialHandle, this.secondMaterialHandle ];
                    tooltipElement.forEach(function(tooltipElement, index) {
                        tooltipElement && (tooltipElement.style.transition = _this.scaleTransform, tooltipElement.firstChild.classList.remove(classNames_materialTooltipShow), 
                        tooltipElement.firstChild.classList.add(classNames_materialTooltipHide), hiddenHandle_1[index].style.cursor = "-webkit-grab", 
                        hiddenHandle_1[index].style.cursor = "grab", handle_1[index].style.transform = "scale(1)", 
                        tooltipElement.classList.remove(classNames_materialTooltipOpen), tooltipElement.firstElementChild.innerText.length > 4 ? tooltipElement.style.transform = transformProperties_1.translate + " scale(0.01)" : tooltipElement.style.transform = transformProperties_1.translate + " " + transformProperties_1.rotate + " scale(0.01)", 
                        setTimeout(function() {
                            tooltipElement.style.transition = "none";
                        }, 2500));
                    });
                }
                this.element.querySelector("." + classNames_sliderTabHandle) && this.element.querySelector("." + classNames_sliderTabHandle).classList.remove(classNames_sliderTabHandle), 
                this.element.querySelector("." + classNames_sliderTabTrack) && (this.element.querySelector("." + classNames_sliderTabTrack).classList.remove(classNames_sliderTabTrack), 
                "Range" !== this.type && "MinRange" !== this.type || !this.element.querySelector("." + classNames_sliderTabRange) || this.element.querySelector("." + classNames_sliderTabRange).classList.remove(classNames_sliderTabRange)), 
                this.hiddenInput.focus(), this.hiddenInput.blur(), this.isElementFocused = !1;
            }
        }, Slider.prototype.closeTooltip = function() {
            this.tooltip.isVisible && (this.tooltipValue(), 1 === this.activeHandle ? this.firstTooltipObj.close() : this.secondTooltipObj.close());
        }, Slider.prototype.removeElement = function(element) {
            element.parentNode && element.parentNode.removeChild(element);
        }, Slider.prototype.changeSliderType = function(type) {
            this.isMaterial && this.firstMaterialHandle && (this.sliderContainer.classList.remove(classNames_materialSlider), 
            this.removeElement(this.firstMaterialHandle), this.firstTooltipElement = void 0, 
            this.firstHandleTooltipPosition = void 0, this.secondMaterialHandle && (this.removeElement(this.secondMaterialHandle), 
            this.secondTooltipElement = void 0, this.secondHandleTooltipPosition = void 0)), 
            this.tooltip.isVisible && this.isMaterial && this.sliderContainer.classList.add(classNames_materialSlider), 
            this.removeElement(this.firstHandle), "Default" !== type && ("Range" === type && this.removeElement(this.secondHandle), 
            this.removeElement(this.rangeBar)), this.tooltip.isVisible && !isNullOrUndefined(this.firstTooltipObj) && (this.firstTooltipObj.destroy(), 
            "Range" !== type || isNullOrUndefined(this.secondTooltipObj) || this.secondTooltipObj.destroy()), 
            (this.limits.enabled && "MinRange" === type || "Default" === type) && (isNullOrUndefined(this.limitBarFirst) || this.removeElement(this.limitBarFirst)), 
            "Range" === type && this.limits.enabled && (isNullOrUndefined(this.limitBarFirst) || isNullOrUndefined(this.limitBarSecond) || (this.removeElement(this.limitBarFirst), 
            this.removeElement(this.limitBarSecond))), this.createRangeBar(), this.limits.enabled && this.createLimitBar(), 
            this.setHandler(), this.setOrientClass(), this.wireFirstHandleEvt(!1), "Range" === this.type && this.wireSecondHandleEvt(!1), 
            this.setValue(), this.tooltip.isVisible && (this.renderTooltip(), this.wireMaterialTooltipEvent(!1)), 
            this.updateConfig();
        }, Slider.prototype.changeRtl = function() {
            if (this.enableRtl || "Range" !== this.type || (this.value = [ this.handleVal2, this.handleVal1 ]), 
            this.updateConfig(), this.tooltip.isVisible && (this.firstTooltipObj.refresh(this.firstHandle), 
            "Range" === this.type && this.secondTooltipObj.refresh(this.secondHandle)), this.showButtons) {
                var enabledRTL = this.enableRtl && "Vertical" !== this.orientation;
                attributes(enabledRTL ? this.secondBtn : this.firstBtn, {
                    "aria-label": "Decrease",
                    title: "Decrease"
                }), attributes(enabledRTL ? this.firstBtn : this.secondBtn, {
                    "aria-label": "Increase",
                    title: "Increase"
                });
            }
        }, Slider.prototype.changeOrientation = function() {
            this.changeSliderType(this.type);
        }, Slider.prototype.updateConfig = function() {
            this.setEnableRTL(), this.setValue(), this.tooltip.isVisible && this.refreshTooltip(), 
            "None" !== this.ticks.placement && this.ul && (this.removeElement(this.ul), this.renderScale()), 
            this.limitsPropertyChange();
        }, Slider.prototype.limitsPropertyChange = function() {
            this.limits.enabled ? (isNullOrUndefined(this.limitBarFirst) && "Range" !== this.type && this.createLimitBar(), 
            isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && "Range" === this.type && this.createLimitBar(), 
            this.setLimitBar(), this.setValue()) : (isNullOrUndefined(this.limitBarFirst) || detach(this.limitBarFirst), 
            isNullOrUndefined(this.limitBarSecond) || detach(this.limitBarSecond));
        }, Slider.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, Slider.prototype.destroy = function() {
            _super.prototype.destroy.call(this), this.unwireEvents(), window.removeEventListener("resize", this.onresize), 
            removeClass([ this.sliderContainer ], [ classNames_sliderDisabled ]), this.firstHandle.removeAttribute("aria-orientation"), 
            "Range" === this.type && this.secondHandle.removeAttribute("aria-orientation"), 
            this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer), 
            detach(this.sliderContainer), this.tooltip.isVisible && (this.firstTooltipObj.destroy(), 
            "Range" !== this.type || isNullOrUndefined(this.secondTooltipObj) || this.secondTooltipObj.destroy()), 
            this.element.innerHTML = "";
        }, Slider.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _this = this, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "cssClass":
                    this.setCSSClass(oldProp.cssClass);
                    break;

                  case "value":
                    var value = isNullOrUndefined(newProp.value) ? "Range" === this.type ? [ this.min, this.max ] : this.min : newProp.value;
                    this.setProperties({
                        value: value
                    }, !0), oldProp.value.toString() !== value.toString() && (this.setValue(), this.refreshTooltip(), 
                    "Range" === this.type && (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1] ? this.activeHandle = 1 : this.activeHandle = 2));
                    break;

                  case "min":
                  case "step":
                  case "max":
                    this.setMinMaxValue();
                    break;

                  case "tooltip":
                    isNullOrUndefined(newProp.tooltip) || isNullOrUndefined(oldProp.tooltip) || this.setTooltip();
                    break;

                  case "type":
                    this.changeSliderType(oldProp.type), this.setZindex();
                    break;

                  case "enableRtl":
                    oldProp.enableRtl !== newProp.enableRtl && "Vertical" !== this.orientation && (this.rtl = oldProp.enableRtl, 
                    this.changeRtl());
                    break;

                  case "limits":
                    this.limitsPropertyChange();
                    break;

                  case "orientation":
                    this.changeOrientation();
                    break;

                  case "ticks":
                    isNullOrUndefined(this.sliderContainer.querySelector("." + classNames_scale)) || (detach(this.ul), 
                    Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
                        className.match(/e-scale-/) && _this.sliderContainer.classList.remove(className);
                    })), "None" !== this.ticks.placement && (this.renderScale(), this.setZindex());
                    break;

                  case "locale":
                    this.showButtons && this.buttonTitle();
                    break;

                  case "showButtons":
                    newProp.showButtons ? (this.setButtons(), this.onResize(), this.enabled && !this.readonly && this.wireButtonEvt(!1)) : this.firstBtn && this.secondBtn && (this.sliderContainer.removeChild(this.firstBtn), 
                    this.sliderContainer.removeChild(this.secondBtn), this.firstBtn = void 0, this.secondBtn = void 0);
                    break;

                  case "enabled":
                    this.setEnabled();
                    break;

                  case "readonly":
                    this.setReadOnly();
                    break;

                  case "customValue":
                    this.setValue(), this.onResize();
                }
            }
        }, Slider.prototype.setReadOnly = function() {
            this.readonly ? (this.unwireEvents(), this.sliderContainer.classList.add(classNames_readonly)) : (this.wireEvents(), 
            this.sliderContainer.classList.remove(classNames_readonly));
        }, Slider.prototype.setMinMaxValue = function() {
            var _this = this;
            this.setValue(), this.refreshTooltip(), isNullOrUndefined(this.sliderContainer.querySelector("." + classNames_scale)) || this.ul && (detach(this.ul), 
            Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
                className.match(/e-scale-/) && _this.sliderContainer.classList.remove(className);
            })), "None" !== this.ticks.placement && (this.renderScale(), this.setZindex());
        }, Slider.prototype.setZindex = function() {
            this.zIndex = 6, isNullOrUndefined(this.ticks) || "None" === this.ticks.placement || (this.ul.style.zIndex = this.zIndex + -7 + "", 
            this.element.style.zIndex = this.zIndex + 2 + ""), this.isMaterial || isNullOrUndefined(this.ticks) || "Both" !== this.ticks.placement || (this.element.style.zIndex = this.zIndex + 2 + ""), 
            this.firstHandle.style.zIndex = this.zIndex + 3 + "", "Range" === this.type && (this.secondHandle.style.zIndex = this.zIndex + 4 + "");
        }, Slider.prototype.setTooltip = function() {
            this.changeSliderType(this.type);
        }, Slider.prototype.getModuleName = function() {
            return "slider";
        }, __decorate$16([ Property(null) ], Slider.prototype, "value", void 0), __decorate$16([ Property(null) ], Slider.prototype, "customValues", void 0), 
        __decorate$16([ Property(1) ], Slider.prototype, "step", void 0), __decorate$16([ Property(0) ], Slider.prototype, "min", void 0), 
        __decorate$16([ Property(100) ], Slider.prototype, "max", void 0), __decorate$16([ Property(!1) ], Slider.prototype, "readonly", void 0), 
        __decorate$16([ Property("Default") ], Slider.prototype, "type", void 0), __decorate$16([ Complex({}, TicksData) ], Slider.prototype, "ticks", void 0), 
        __decorate$16([ Complex({}, LimitData) ], Slider.prototype, "limits", void 0), __decorate$16([ Property(!0) ], Slider.prototype, "enabled", void 0), 
        __decorate$16([ Property(!1) ], Slider.prototype, "enableRtl", void 0), __decorate$16([ Complex({}, TooltipData) ], Slider.prototype, "tooltip", void 0), 
        __decorate$16([ Property(!1) ], Slider.prototype, "showButtons", void 0), __decorate$16([ Property(!0) ], Slider.prototype, "enableAnimation", void 0), 
        __decorate$16([ Property("Horizontal") ], Slider.prototype, "orientation", void 0), 
        __decorate$16([ Property("") ], Slider.prototype, "cssClass", void 0), __decorate$16([ Event() ], Slider.prototype, "created", void 0), 
        __decorate$16([ Event() ], Slider.prototype, "change", void 0), __decorate$16([ Event() ], Slider.prototype, "changed", void 0), 
        __decorate$16([ Event() ], Slider.prototype, "renderingTicks", void 0), __decorate$16([ Event() ], Slider.prototype, "renderedTicks", void 0), 
        __decorate$16([ Event() ], Slider.prototype, "tooltipChange", void 0), Slider = __decorate$16([ NotifyPropertyChanges ], Slider);
    }(Component), __extends$18 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$17 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, regex = {
        EMAIL: new RegExp("^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,5}|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$"),
        URL: new RegExp("^((ftp|http|https)://)?www.([A-z]{2,}).([A-z]{2,})$"),
        DATE_ISO: new RegExp("^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$"),
        DIGITS: new RegExp("^[0-9]*$"),
        PHONE: new RegExp("^[+]?[0-9]{9,13}$"),
        CREDITCARD: new RegExp("^\\d{13,16}$")
    };
    !function(ErrorOption) {
        ErrorOption[ErrorOption.Message = 0] = "Message", ErrorOption[ErrorOption.Label = 1] = "Label";
    }(ErrorOption || (ErrorOption = {}));
    var FormValidator = function(_super) {
        function FormValidator(element, options) {
            var _this = _super.call(this, options, element) || this;
            if (_this.validated = [], _this.errorRules = [], _this.allowSubmit = !1, _this.required = "required", 
            _this.infoElement = null, _this.inputElement = null, _this.selectQuery = "input:not([type=reset]):not([type=button]), select, textarea", 
            _this.defaultMessages = {
                required: "This field is required.",
                email: "Please enter a valid email address.",
                url: "Please enter a valid URL.",
                date: "Please enter a valid date.",
                dateIso: "Please enter a valid date ( ISO ).",
                creditcard: "Please enter valid card number",
                number: "Please enter a valid number.",
                digits: "Please enter only digits.",
                maxLength: "Please enter no more than {0} characters.",
                minLength: "Please enter at least {0} characters.",
                rangeLength: "Please enter a value between {0} and {1} characters long.",
                range: "Please enter a value between {0} and {1}.",
                max: "Please enter a value less than or equal to {0}.",
                min: "Please enter a value greater than or equal to {0}.",
                regex: "Please enter a correct value.",
                tel: "Please enter a valid phone number.",
                pattern: "Please enter a correct pattern value.",
                equalTo: "Please enter the valid match text"
            }, void 0 === _this.rules && (_this.rules = {}), element = "string" == typeof element ? select(element, document) : element, 
            null != _this.element) return _this.element.setAttribute("novalidate", ""), _this.inputElements = selectAll(_this.selectQuery, _this.element), 
            _this.createHTML5Rules(), _this.wireEvents(), _this;
        }
        __extends$18(FormValidator, _super), FormValidator_1 = FormValidator, FormValidator.prototype.addRules = function(name, rules) {
            name && (this.rules.hasOwnProperty(name) ? extend(this.rules[name], rules, {}) : this.rules[name] = rules);
        }, FormValidator.prototype.removeRules = function(name, rules) {
            if (name || rules) if (this.rules[name] && !rules) delete this.rules[name]; else {
                if (isNullOrUndefined(this.rules[name] && rules)) return;
                for (var i = 0; i < rules.length; i++) delete this.rules[name][rules[i]];
            } else this.rules = {};
        }, FormValidator.prototype.validate = function(selected) {
            var rules = Object.keys(this.rules);
            if (selected && rules.length) return this.validateRules(selected), -1 !== rules.indexOf(selected) && 0 === this.errorRules.filter(function(data) {
                return data.name === selected;
            }).length;
            this.errorRules = [];
            for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
                var name_1 = rules_1[_i];
                this.validateRules(name_1);
            }
            return 0 === this.errorRules.length;
        }, FormValidator.prototype.reset = function() {
            this.element.reset(), this.clearForm();
        }, FormValidator.prototype.getInputElement = function(name) {
            return this.inputElement = select("[name=" + name + "]", this.element), this.inputElement;
        }, FormValidator.prototype.destroy = function() {
            this.reset(), this.unwireEvents(), this.rules = {};
            for (var _i = 0, elements_1 = selectAll("." + this.errorClass + ", ." + this.validClass, this.element); _i < elements_1.length; _i++) {
                elements_1[_i].remove();
            }
            _super.prototype.destroy.call(this);
        }, FormValidator.prototype.onPropertyChanged = function(newProp, oldProp) {}, FormValidator.prototype.getModuleName = function() {
            return "formValidator";
        }, FormValidator.prototype.clearForm = function() {
            this.errorRules = [], this.validated = [];
            for (var _i = 0, elements_2 = selectAll(this.selectQuery, this.element); _i < elements_2.length; _i++) {
                var input = elements_2[_i];
                input.removeAttribute("aria-invalid"), input.classList.remove(this.errorClass), 
                input.name.length > 0 && (this.getInputElement(input.name), this.getErrorElement(input.name), 
                this.hideMessage(input.name)), input.classList.remove(this.validClass);
            }
        }, FormValidator.prototype.createHTML5Rules = function() {
            for (var defRules = [ "required", "validateHidden", "regex", "rangeLength", "maxLength", "minLength", "dateIso", "digits", "pattern", "data-val-required", "type", "data-validation", "min", "max", "range", "equalTo", "data-val-minlength-min", "data-val-equalto-other", "data-val-maxlength-max", "data-val-range-min", "data-val-regex-pattern", "data-val-length-max", "data-val-creditcard", "data-val-phone" ], acceptedTypes = [ "hidden", "email", "url", "date", "number", "tel" ], _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
                for (var input = _a[_i], allRule = {}, _b = 0, defRules_1 = defRules; _b < defRules_1.length; _b++) {
                    var rule = defRules_1[_b];
                    if (null !== input.getAttribute(rule)) switch (rule) {
                      case "required":
                        this.defRule(input, allRule, rule, input.required);
                        break;

                      case "data-validation":
                        rule = input.getAttribute(rule), this.defRule(input, allRule, rule, !0);
                        break;

                      case "type":
                        -1 !== acceptedTypes.indexOf(input.type) && this.defRule(input, allRule, input.type, !0);
                        break;

                      case "rangeLength":
                      case "range":
                        this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));
                        break;

                      case "equalTo":
                        var id = input.getAttribute(rule);
                        this.defRule(input, allRule, rule, id);
                        break;

                      default:
                        "true" === input.getAttribute("data-val") ? this.annotationRule(input, allRule, rule, input.getAttribute(rule)) : this.defRule(input, allRule, rule, input.getAttribute(rule));
                    }
                }
                0 !== Object.keys(allRule).length && this.addRules(input.name, allRule);
            }
        }, FormValidator.prototype.annotationRule = function(input, ruleCon, ruleName, value) {
            var annotationRule = ruleName.split("-"), rulesList = [ "required", "creditcard", "phone", "maxlength", "minlength", "range", "regex", "equalto" ], ruleFirstName = annotationRule[annotationRule.length - 1], ruleSecondName = annotationRule[annotationRule.length - 2];
            if (-1 !== rulesList.indexOf(ruleFirstName)) switch (ruleFirstName) {
              case "required":
                this.defRule(input, ruleCon, "required", value);
                break;

              case "creditcard":
                this.defRule(input, ruleCon, "creditcard", value);
                break;

              case "phone":
                this.defRule(input, ruleCon, "tel", value);
            } else if (-1 !== rulesList.indexOf(ruleSecondName)) switch (ruleSecondName) {
              case "maxlength":
                this.defRule(input, ruleCon, "maxLength", value);
                break;

              case "minlength":
                this.defRule(input, ruleCon, "minLength", value);
                break;

              case "range":
                var minvalue = input.getAttribute("data-val-range-min"), maxvalue = input.getAttribute("data-val-range-max");
                this.defRule(input, ruleCon, "range", [ minvalue, maxvalue ]);
                break;

              case "equalto":
                var id = input.getAttribute(ruleName).split(".");
                this.defRule(input, ruleCon, "equalTo", id[id.length - 1]);
                break;

              case "regex":
                this.defRule(input, ruleCon, "regex", value);
            }
        }, FormValidator.prototype.defRule = function(input, ruleCon, ruleName, value) {
            var message = input.getAttribute("data-" + ruleName + "-message"), annotationMessage = input.getAttribute("data-val-" + ruleName);
            message ? value = [ value, message ] : annotationMessage && (value = [ value, annotationMessage ]), 
            ruleCon[ruleName] = value;
        }, FormValidator.prototype.wireEvents = function() {
            for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
                var input = _a[_i];
                FormValidator_1.isCheckable(input) ? EventHandler.add(input, "click", this.clickHandler, this) : "SELECT" === input.tagName ? EventHandler.add(input, "change", this.changeHandler, this) : (EventHandler.add(input, "focusout", this.focusOutHandler, this), 
                EventHandler.add(input, "keyup", this.keyUpHandler, this));
            }
            EventHandler.add(this.element, "submit", this.submitHandler, this), EventHandler.add(this.element, "reset", this.resetHandler, this);
        }, FormValidator.prototype.unwireEvents = function() {
            for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
                var input = _a[_i];
                EventHandler.clearEvents(input);
            }
            EventHandler.remove(this.element, "submit", this.submitHandler), EventHandler.remove(this.element, "reset", this.resetHandler);
        }, FormValidator.prototype.focusOutHandler = function(e) {
            this.trigger("focusout", e);
            var element = e.target;
            this.rules[element.name] && (this.rules[element.name][this.required] || element.value.length > 0 ? this.validate(element.name) : -1 === this.validated.indexOf(element.name) && this.validated.push(element.name));
        }, FormValidator.prototype.keyUpHandler = function(e) {
            this.trigger("keyup", e);
            var element = e.target;
            (9 !== e.which || this.rules[element.name] && (!this.rules[element.name] || this.rules[element.name][this.required])) && -1 !== this.validated.indexOf(element.name) && this.rules[element.name] && -1 === [ 16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225 ].indexOf(e.which) && this.validate(element.name);
        }, FormValidator.prototype.clickHandler = function(e) {
            this.trigger("click", e);
            var element = e.target;
            "submit" !== element.type ? this.validate(element.name) : null !== element.getAttribute("formnovalidate") && (this.allowSubmit = !0);
        }, FormValidator.prototype.changeHandler = function(e) {
            this.trigger("change", e);
            var element = e.target;
            this.validate(element.name);
        }, FormValidator.prototype.submitHandler = function(e) {
            this.trigger("submit", e), this.allowSubmit || this.validate() ? this.allowSubmit = !1 : e.preventDefault();
        }, FormValidator.prototype.resetHandler = function() {
            this.clearForm();
        }, FormValidator.prototype.validateRules = function(name) {
            if (this.rules[name]) {
                var rules = Object.keys(this.rules[name]), hiddenType = !1, validateHiddenType = !1, vhPos = rules.indexOf("validateHidden"), hPos = rules.indexOf("hidden");
                if (this.getInputElement(name), -1 !== hPos && (hiddenType = !0), -1 !== vhPos && (validateHiddenType = !0), 
                !hiddenType || hiddenType && validateHiddenType) {
                    -1 !== vhPos && rules.splice(vhPos, 1), -1 !== hPos && rules.splice(hPos - 1, 1), 
                    this.getErrorElement(name);
                    for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
                        var rule = rules_2[_i], errorMessage = this.getErrorMessage(this.rules[name][rule], rule), errorRule = {
                            name: name,
                            message: errorMessage
                        }, eventArgs = {
                            inputName: name,
                            element: this.inputElement,
                            message: errorMessage
                        };
                        if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {
                            this.removeErrorRules(name), this.errorRules.push(errorRule), this.inputElement.setAttribute("aria-invalid", "true"), 
                            this.inputElement.setAttribute("aria-describedby", this.inputElement.id + "-info"), 
                            this.inputElement.classList.add(this.errorClass), this.inputElement.classList.remove(this.validClass), 
                            this.infoElement ? this.showMessage(errorRule) : this.createErrorElement(name, errorRule.message, this.inputElement), 
                            eventArgs.errorElement = this.infoElement, eventArgs.status = "failure", this.inputElement.classList.add(this.errorClass), 
                            this.inputElement.classList.remove(this.validClass), this.optionalValidationStatus(name, eventArgs), 
                            this.trigger("validationComplete", eventArgs), "required" === rule && this.inputElement.setAttribute("aria-required", "true");
                            break;
                        }
                        this.hideMessage(name), eventArgs.status = "success", this.trigger("validationComplete", eventArgs);
                    }
                }
            }
        }, FormValidator.prototype.optionalValidationStatus = function(name, refer) {
            this.rules[name][this.required] || this.inputElement.value.length || (this.infoElement.innerHTML = this.inputElement.value, 
            this.infoElement.setAttribute("aria-invalid", "false"), refer.status = "", this.hideMessage(name));
        }, FormValidator.prototype.isValid = function(name, rule) {
            var params = this.rules[name][rule], param = params instanceof Array && "string" == typeof params[1] ? params[0] : params, currentRule = this.rules[name][rule], args = {
                value: this.inputElement.value,
                param: param,
                element: this.inputElement,
                formElement: this.element
            };
            if (this.trigger("validationBegin", args), currentRule && "function" == typeof currentRule[0]) {
                return currentRule[0].call(this, {
                    element: this.inputElement,
                    value: this.inputElement.value
                });
            }
            return FormValidator_1.isCheckable(this.inputElement) ? "required" !== rule || selectAll("input[name=" + name + "]:checked", this.element).length > 0 : FormValidator_1.checkValidator[rule](args);
        }, FormValidator.prototype.getErrorMessage = function(ruleValue, rule) {
            var message = ruleValue instanceof Array && "string" == typeof ruleValue[1] ? ruleValue[1] : this.defaultMessages[rule], formats = message.match(/{(\d)}/g);
            if (!isNullOrUndefined(formats)) for (var i = 0; i < formats.length; i++) {
                var value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;
                message = message.replace(formats[i], value);
            }
            return message;
        }, FormValidator.prototype.createErrorElement = function(name, message, input) {
            var errorElement = createElement(this.errorElement, {
                className: this.errorClass,
                innerHTML: message,
                attrs: {
                    for: name
                }
            });
            if (this.errorOption === ErrorOption.Message && (errorElement.classList.remove(this.errorClass), 
            errorElement.classList.add("e-message"), errorElement = createElement(this.errorContainer, {
                className: this.errorClass,
                innerHTML: errorElement.outerHTML
            })), errorElement.id = this.inputElement.name + "-info", this.element.querySelector('[data-valmsg-for="' + input.id + '"]')) this.element.querySelector('[data-valmsg-for="' + input.id + '"]').appendChild(errorElement); else if (!0 === input.hasAttribute("data-msg-containerid")) {
                var containerId = input.getAttribute("data-msg-containerid");
                this.element.querySelector("#" + containerId).appendChild(errorElement);
            } else null != this.customPlacement ? this.customPlacement.call(this, this.inputElement, errorElement) : this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);
            errorElement.style.display = "block", this.getErrorElement(name), this.validated.push(name), 
            this.checkRequired(name);
        }, FormValidator.prototype.getErrorElement = function(name) {
            return this.infoElement = select(this.errorElement + "." + this.errorClass, this.inputElement.parentElement), 
            this.infoElement || (this.infoElement = select(this.errorElement + "." + this.errorClass + '[for="' + name + '"]', this.element)), 
            this.infoElement;
        }, FormValidator.prototype.removeErrorRules = function(name) {
            for (var i = 0; i < this.errorRules.length; i++) {
                this.errorRules[i].name === name && this.errorRules.splice(i, 1);
            }
        }, FormValidator.prototype.showMessage = function(errorRule) {
            this.infoElement.style.display = "block", this.infoElement.innerHTML = errorRule.message, 
            this.checkRequired(errorRule.name);
        }, FormValidator.prototype.hideMessage = function(name) {
            this.infoElement && (this.infoElement.style.display = "none", this.removeErrorRules(name), 
            this.inputElement.classList.add(this.validClass), this.inputElement.classList.remove(this.errorClass), 
            this.inputElement.setAttribute("aria-invalid", "false"));
        }, FormValidator.prototype.checkRequired = function(name) {
            this.rules[name][this.required] || this.inputElement.value.length || (this.infoElement.innerHTML = this.inputElement.value, 
            this.infoElement.setAttribute("aria-invalid", "false"), this.hideMessage(name));
        }, FormValidator.isCheckable = function(input) {
            var inputType = input.getAttribute("type");
            return inputType && ("checkbox" === inputType || "radio" === inputType || "submit" === inputType);
        };
        var FormValidator_1;
        return FormValidator.checkValidator = {
            required: function(option) {
                return option.value.length > 0;
            },
            email: function(option) {
                return regex.EMAIL.test(option.value);
            },
            url: function(option) {
                return regex.URL.test(option.value);
            },
            dateIso: function(option) {
                return regex.DATE_ISO.test(option.value);
            },
            tel: function(option) {
                return regex.PHONE.test(option.value);
            },
            creditcard: function(option) {
                return regex.CREDITCARD.test(option.value);
            },
            number: function(option) {
                return !isNaN(Number(option.value)) && -1 === option.value.indexOf(" ");
            },
            digits: function(option) {
                return regex.DIGITS.test(option.value);
            },
            maxLength: function(option) {
                return option.value.length <= option.param;
            },
            minLength: function(option) {
                return option.value.length >= option.param;
            },
            rangeLength: function(option) {
                var param = option.param;
                return option.value.length >= param[0] && option.value.length <= param[1];
            },
            range: function(option) {
                var param = option.param;
                return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];
            },
            date: function(option) {
                return !isNaN(new Date(option.value).getTime());
            },
            max: function(option) {
                return isNaN(Number(option.value)) ? new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime() : +option.value <= option.param;
            },
            min: function(option) {
                return isNaN(Number(option.value)) ? new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime() : +option.value >= option.param;
            },
            regex: function(option) {
                return new RegExp(option.param).test(option.value);
            },
            equalTo: function(option) {
                var compareTo = option.formElement.querySelector("#" + option.param);
                return option.param = compareTo.value, option.param === option.value;
            }
        }, __decorate$17([ Property("e-hidden") ], FormValidator.prototype, "ignore", void 0), 
        __decorate$17([ Property() ], FormValidator.prototype, "rules", void 0), __decorate$17([ Property("e-error") ], FormValidator.prototype, "errorClass", void 0), 
        __decorate$17([ Property("e-valid") ], FormValidator.prototype, "validClass", void 0), 
        __decorate$17([ Property("label") ], FormValidator.prototype, "errorElement", void 0), 
        __decorate$17([ Property("div") ], FormValidator.prototype, "errorContainer", void 0), 
        __decorate$17([ Property(ErrorOption.Label) ], FormValidator.prototype, "errorOption", void 0), 
        __decorate$17([ Event() ], FormValidator.prototype, "focusout", void 0), __decorate$17([ Event() ], FormValidator.prototype, "keyup", void 0), 
        __decorate$17([ Event() ], FormValidator.prototype, "click", void 0), __decorate$17([ Event() ], FormValidator.prototype, "change", void 0), 
        __decorate$17([ Event() ], FormValidator.prototype, "submit", void 0), __decorate$17([ Event() ], FormValidator.prototype, "validationBegin", void 0), 
        __decorate$17([ Event() ], FormValidator.prototype, "validationComplete", void 0), 
        __decorate$17([ Event() ], FormValidator.prototype, "customPlacement", void 0), 
        FormValidator = FormValidator_1 = __decorate$17([ NotifyPropertyChanges ], FormValidator);
    }(Base), __extends$19 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$18 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, FILE = "e-upload-file-list", STATUS = "e-file-status", REMOVE_ICON = "e-file-remove-btn", DELETE_ICON = "e-file-delete-btn", ABORT_ICON = "e-file-abort-btn", RETRY_ICON = "e-file-reload-btn", PROGRESS_WRAPPER = "e-upload-progress-wrap", PROGRESSBAR = "e-upload-progress-bar", UPLOAD_SUCCESS = "e-upload-success", UPLOAD_FAILED = "e-upload-fails", ICON_FOCUSED = "e-clear-icon-focus", PAUSE_UPLOAD = "e-file-pause-btn", FilesProp = function(_super) {
        function FilesProp() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$19(FilesProp, _super), __decorate$18([ Property("") ], FilesProp.prototype, "name", void 0), 
        __decorate$18([ Property(null) ], FilesProp.prototype, "size", void 0), __decorate$18([ Property("") ], FilesProp.prototype, "type", void 0), 
        FilesProp;
    }(ChildProperty), ButtonsProps = function(_super) {
        function ButtonsProps() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$19(ButtonsProps, _super), __decorate$18([ Property("Browse...") ], ButtonsProps.prototype, "browse", void 0), 
        __decorate$18([ Property("Upload") ], ButtonsProps.prototype, "upload", void 0), 
        __decorate$18([ Property("Clear") ], ButtonsProps.prototype, "clear", void 0), ButtonsProps;
    }(ChildProperty), AsyncSettings = function(_super) {
        function AsyncSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$19(AsyncSettings, _super), __decorate$18([ Property("") ], AsyncSettings.prototype, "saveUrl", void 0), 
        __decorate$18([ Property("") ], AsyncSettings.prototype, "removeUrl", void 0), __decorate$18([ Property(0) ], AsyncSettings.prototype, "chunkSize", void 0), 
        __decorate$18([ Property(3) ], AsyncSettings.prototype, "retryCount", void 0), __decorate$18([ Property(500) ], AsyncSettings.prototype, "retryAfterDelay", void 0), 
        AsyncSettings;
    }(ChildProperty), Uploader = function(_super) {
        function Uploader(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.initialAttr = {
                accept: null,
                multiple: !1,
                disabled: !1
            }, _this.fileList = [], _this.filesData = [], _this.uploadedFilesData = [], _this.isForm = !1, 
            _this.allTypes = !1, _this.pausedData = [], _this.uploadMetaData = [], _this.tabIndex = "0", 
            _this;
        }
        return __extends$19(Uploader, _super), Uploader.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "allowedExtensions":
                    this.setExtensions(this.allowedExtensions), this.clearAll();
                    break;

                  case "enabled":
                    this.setControlStatus();
                    break;

                  case "multiple":
                    this.setMultipleSelection();
                    break;

                  case "enableRtl":
                    this.setRTL(), this.reRenderFileList();
                    break;

                  case "buttons":
                    this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? "" : this.buttons.browse, 
                    this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? "" : this.buttons.clear, 
                    this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? "" : this.buttons.upload, 
                    this.renderButtonTemplates();
                    break;

                  case "dropArea":
                    this.unBindDropEvents(), this.setDropArea();
                    break;

                  case "files":
                    this.renderPreLoadFiles();
                    break;

                  case "directoryUpload":
                    this.updateDirectoryAttributes();
                    break;

                  case "minFileSize":
                  case "maxFileSize":
                  case "template":
                  case "autoUpload":
                    this.clearAll();
                    break;

                  case "locale":
                    this.l10n.setLocale(this.locale), this.setLocalizedTexts(), this.preLocaleObj = getValue("currentLocale", this.l10n);
                }
            }
        }, Uploader.prototype.setLocalizedTexts = function() {
            isNullOrUndefined(this.template) && ("string" == typeof this.buttons.browse && (this.browseButton.innerText = "Browse..." === this.buttons.browse ? this.localizedTexts("Browse") : this.buttons.browse, 
            this.browseButton.setAttribute("title", this.browseButton.innerText), this.uploadWrapper.querySelector(".e-file-drop").innerHTML = this.localizedTexts("dropFilesHint")), 
            this.updateFileList());
        }, Uploader.prototype.getKeyValue = function(val) {
            for (var keyValue, _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++) {
                var key = _a[_i];
                this.preLocaleObj[key] === val && (keyValue = key);
            }
            return keyValue;
        }, Uploader.prototype.updateFileList = function() {
            if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector(".e-upload-files"))) for (var i = 0; i < this.fileList.length; i++) this.fileList[i].querySelector(".e-file-status").innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status)), 
            this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status)), 
            this.fileList[i].classList.contains(UPLOAD_SUCCESS) && this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("delete")), 
            this.fileList[i].querySelector(".e-file-play-btn") && this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("resume")), 
            this.fileList[i].querySelector(".e-file-remove-btn") && this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("remove")), 
            this.fileList[i].querySelector(".e-file-reload-btn") && this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("retry")), 
            this.autoUpload || (this.uploadButton.innerText = "Upload" === this.buttons.upload ? this.localizedTexts("Upload") : this.buttons.upload, 
            this.uploadButton.setAttribute("title", this.localizedTexts("Upload")), this.clearButton.innerText = "Clear" === this.buttons.clear ? this.localizedTexts("Clear") : this.buttons.clear, 
            this.clearButton.setAttribute("title", this.localizedTexts("Clear")));
        }, Uploader.prototype.reRenderFileList = function() {
            this.listParent && (detach(this.listParent), this.listParent = null, this.fileList = [], 
            this.createFileList(this.filesData), this.actionButtons && (this.removeActionButtons(), 
            this.renderActionButtons(), this.checkActionButtonStatus()));
        }, Uploader.prototype.preRender = function() {
            if (this.cloneElement = this.element.cloneNode(!0), this.localeText = {
                Browse: "Browse...",
                Clear: "Clear",
                Upload: "Upload",
                dropFilesHint: "Or drop files here",
                invalidMaxFileSize: "File size is too large",
                invalidMinFileSize: "File size is too small",
                invalidFileType: "File type is not allowed",
                uploadFailedMessage: "File failed to upload",
                uploadSuccessMessage: "File uploaded successfully",
                removedSuccessMessage: "File removed successfully",
                removedFailedMessage: "Unable to remove file",
                inProgress: "Uploading",
                readyToUploadMessage: "Ready to upload",
                abort: "Abort",
                remove: "Remove",
                cancel: "Cancel",
                delete: "Delete file",
                pauseUpload: "File upload paused",
                pause: "Pause",
                resume: "Resume",
                retry: "Retry",
                fileUploadCancel: "File upload canceled"
            }, this.l10n = new L10n("uploader", this.localeText, this.locale), this.preLocaleObj = getValue("currentLocale", this.l10n), 
            this.checkHTMLAttributes(), "" === this.asyncSettings.saveUrl && "" === this.asyncSettings.removeUrl && !this.autoUpload) for (var parentEle = this.element.parentElement; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) "FORM" === parentEle.tagName && (this.isForm = !0, 
            this.formElement = parentEle, parentEle.setAttribute("enctype", "multipart/form-data"), 
            parentEle.setAttribute("encoding", "multipart/form-data"));
            var ejInstance = getValue("ej2_instances", this.element);
            if ("EJS-UPLOADER" === this.element.tagName) {
                for (var inputElement = this.createElement("input", {
                    attrs: {
                        type: "file"
                    }
                }), index = 0; index < this.element.attributes.length; index++) inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue), 
                inputElement.innerHTML = this.element.innerHTML;
                inputElement.hasAttribute("name") || inputElement.setAttribute("name", "UploadFiles"), 
                this.element.appendChild(inputElement), this.element = inputElement, setValue("ej2_instances", ejInstance, this.element);
            }
            ejInstance[0].isPureReactComponent && (isNullOrUndefined(ejInstance[0].props.name) ? !isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name) ? this.element.setAttribute("name", ejInstance[0].props.id) : this.element.setAttribute("name", "UploadFiles") : this.element.setAttribute("name", ejInstance[0].props.name)), 
            isNullOrUndefined(this.element.getAttribute("name")) && this.element.setAttribute("name", this.element.getAttribute("id")), 
            this.element.hasAttribute("type") || this.element.setAttribute("type", "file"), 
            this.updateDirectoryAttributes(), this.keyConfigs = {
                previous: "shift+tab",
                enter: "enter",
                next: "tab"
            }, this.element.hasAttribute("tabindex") && (this.tabIndex = this.element.getAttribute("tabindex"));
        }, Uploader.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, Uploader.prototype.getModuleName = function() {
            return "uploader";
        }, Uploader.prototype.updateDirectoryAttributes = function() {
            this.directoryUpload ? (this.element.setAttribute("directory", "true"), this.element.setAttribute("webkitdirectory", "true")) : (this.element.removeAttribute("directory"), 
            this.element.removeAttribute("webkitdirectory"));
        }, Uploader.prototype.render = function() {
            this.renderBrowseButton(), this.initializeUpload(), this.wireEvents(), this.setMultipleSelection(), 
            this.setExtensions(this.allowedExtensions), this.setRTL(), this.renderPreLoadFiles(), 
            this.setControlStatus();
        }, Uploader.prototype.renderBrowseButton = function() {
            this.browseButton = this.createElement("button", {
                className: "e-css e-btn",
                attrs: {
                    type: "button"
                }
            }), this.browseButton.setAttribute("tabindex", this.tabIndex), "string" == typeof this.buttons.browse ? (this.browseButton.innerText = "Browse..." === this.buttons.browse ? this.localizedTexts("Browse") : this.buttons.browse, 
            this.browseButton.setAttribute("title", this.browseButton.innerText)) : this.browseButton.appendChild(this.buttons.browse), 
            this.element.setAttribute("aria-label", "Uploader");
        }, Uploader.prototype.renderActionButtons = function() {
            this.element.setAttribute("tabindex", "-1"), this.actionButtons = this.createElement("div", {
                className: "e-upload-actions"
            }), this.uploadButton = this.createElement("button", {
                className: "e-file-upload-btn e-css e-btn e-flat e-primary",
                attrs: {
                    type: "button",
                    tabindex: "-1"
                }
            }), this.clearButton = this.createElement("button", {
                className: "e-file-clear-btn e-css e-btn e-flat",
                attrs: {
                    type: "button",
                    tabindex: "-1"
                }
            }), this.actionButtons.appendChild(this.clearButton), this.actionButtons.appendChild(this.uploadButton), 
            this.renderButtonTemplates(), this.uploadWrapper.appendChild(this.actionButtons), 
            this.browseButton.blur(), this.uploadButton.focus(), this.wireActionButtonEvents();
        }, Uploader.prototype.wireActionButtonEvents = function() {
            EventHandler.add(this.uploadButton, "click", this.uploadButtonClick, this), EventHandler.add(this.clearButton, "click", this.clearButtonClick, this);
        }, Uploader.prototype.unwireActionButtonEvents = function() {
            EventHandler.remove(this.uploadButton, "click", this.uploadButtonClick), EventHandler.remove(this.clearButton, "click", this.clearButtonClick);
        }, Uploader.prototype.removeActionButtons = function() {
            this.actionButtons && (this.unwireActionButtonEvents(), detach(this.actionButtons), 
            this.actionButtons = null);
        }, Uploader.prototype.renderButtonTemplates = function() {
            if ("string" == typeof this.buttons.browse ? (this.browseButton.innerText = "Browse..." === this.buttons.browse ? this.localizedTexts("Browse") : this.buttons.browse, 
            this.browseButton.setAttribute("title", this.browseButton.innerText)) : (this.browseButton.innerHTML = "", 
            this.browseButton.appendChild(this.buttons.browse)), this.uploadButton) {
                var uploadText = void 0;
                uploadText = isNullOrUndefined(this.buttons.upload) ? "Upload" : this.buttons.upload, 
                this.buttons.upload = uploadText, "string" == typeof this.buttons.upload ? (this.uploadButton.innerText = "Upload" === this.buttons.upload ? this.localizedTexts("Upload") : this.buttons.upload, 
                this.uploadButton.setAttribute("title", this.uploadButton.innerText)) : (this.uploadButton.innerHTML = "", 
                this.uploadButton.appendChild(this.buttons.upload));
            }
            if (this.clearButton) {
                var clearText = void 0;
                clearText = isNullOrUndefined(this.buttons.clear) ? "Clear" : this.buttons.clear, 
                this.buttons.clear = clearText, "string" == typeof this.buttons.clear ? (this.clearButton.innerText = "Clear" === this.buttons.clear ? this.localizedTexts("Clear") : this.buttons.clear, 
                this.clearButton.setAttribute("title", this.clearButton.innerText)) : (this.clearButton.innerHTML = "", 
                this.clearButton.appendChild(this.buttons.clear));
            }
        }, Uploader.prototype.initializeUpload = function() {
            this.element.setAttribute("tabindex", "-1");
            var inputWrapper = this.createElement("span", {
                className: "e-file-select"
            });
            this.element.parentElement.insertBefore(inputWrapper, this.element), this.dropAreaWrapper = this.createElement("div", {
                className: "e-file-select-wrap"
            }), this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element), 
            inputWrapper.appendChild(this.element), this.dropAreaWrapper.appendChild(this.browseButton), 
            this.dropAreaWrapper.appendChild(inputWrapper);
            var fileDropArea = this.createElement("span", {
                className: "e-file-drop"
            });
            fileDropArea.innerHTML = this.localizedTexts("dropFilesHint"), this.dropAreaWrapper.appendChild(fileDropArea), 
            this.uploadWrapper = this.createElement("div", {
                className: "e-upload",
                attrs: {
                    "aria-activedescendant": "li-focused"
                }
            }), this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper), 
            this.uploadWrapper.appendChild(this.dropAreaWrapper), this.setDropArea();
        }, Uploader.prototype.renderPreLoadFiles = function() {
            if (!isNullOrUndefined(this.files[0].size) && isNullOrUndefined(this.template)) {
                var files = [].slice.call(this.files), filesData = [];
                this.multiple || (this.clearData(), files = [ files[0] ]);
                for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
                    var data = files_1[_i], fileData = {
                        name: data.name + "." + data.type.split(".")[data.type.split(".").length - 1],
                        rawFile: "",
                        size: data.size,
                        status: this.localizedTexts("uploadSuccessMessage"),
                        type: data.type,
                        validationMessages: {
                            minSize: "",
                            maxSize: ""
                        },
                        statusCode: "2"
                    };
                    filesData.push(fileData), this.filesData.push(fileData);
                }
                this.createFileList(filesData), this.autoUpload || !this.listParent || this.actionButtons || this.isForm || !this.showFileList || this.renderActionButtons(), 
                this.checkActionButtonStatus();
            }
        }, Uploader.prototype.checkActionButtonStatus = function() {
            if (this.actionButtons) {
                var length_1 = this.uploadWrapper.querySelectorAll(".e-validation-fails").length + this.uploadWrapper.querySelectorAll(".e-upload-fails:not(.e-upload-progress)").length + this.uploadWrapper.querySelectorAll("span." + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll("span.e-upload-progress").length;
                length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll("li").length ? this.uploadButton.setAttribute("disabled", "disabled") : this.uploadButton.removeAttribute("disabled");
            }
        }, Uploader.prototype.setDropArea = function() {
            var dropTextArea = this.dropAreaWrapper.querySelector(".e-file-drop");
            if (this.dropArea) {
                this.dropZoneElement = "string" != typeof this.dropArea ? this.dropArea : document.querySelector(this.dropArea);
                for (var element = this.element, enableDropText = !1; element.parentNode; ) (element = element.parentNode) === this.dropZoneElement && (enableDropText = !0, 
                dropTextArea.textContent = this.localizedTexts("dropFilesHint"));
                enableDropText || (dropTextArea.textContent = "");
            } else this.dropZoneElement = this.uploadWrapper, dropTextArea.textContent = this.localizedTexts("dropFilesHint");
            this.bindDropEvents();
        }, Uploader.prototype.setMultipleSelection = function() {
            if (this.multiple && !this.element.hasAttribute("multiple")) {
                var newAttr = document.createAttribute("multiple");
                this.element.setAttributeNode(newAttr);
            } else this.multiple || this.element.removeAttribute("multiple");
        }, Uploader.prototype.checkAutoUpload = function(fileData) {
            this.autoUpload ? (this.upload(fileData), this.removeActionButtons()) : this.actionButtons || this.renderActionButtons(), 
            this.checkActionButtonStatus();
        }, Uploader.prototype.wireEvents = function() {
            EventHandler.add(this.browseButton, "click", this.browseButtonClick, this), EventHandler.add(this.element, "change", this.onSelectFiles, this), 
            EventHandler.add(document, "click", this.removeFocus, this), this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: "keydown"
            }), this.isForm && EventHandler.add(this.formElement, "reset", this.resetForm, this);
        }, Uploader.prototype.unWireEvents = function() {
            EventHandler.remove(this.browseButton, "click", this.browseButtonClick), EventHandler.remove(this.element, "change", this.onSelectFiles), 
            EventHandler.remove(document, "click", this.removeFocus), this.keyboardModule.destroy();
        }, Uploader.prototype.resetForm = function() {
            this.clearAll();
        }, Uploader.prototype.keyActionHandler = function(e) {
            var targetElement = e.target;
            switch (e.action) {
              case "next":
                e.target === this.browseButton && isNullOrUndefined(this.listParent) ? this.browseButton.blur() : e.target === this.uploadButton ? this.uploadButton.blur() : (this.setTabFocus(e), 
                e.preventDefault(), e.stopPropagation(), e.target === this.clearButton && this.uploadButton.hasAttribute("disabled") && this.clearButton.blur());
                break;

              case "previous":
                e.target === this.browseButton ? this.browseButton.blur() : (this.setReverseFocus(e), 
                e.preventDefault(), e.stopPropagation());
                break;

              case "enter":
                if (e.target === this.clearButton) this.clearButtonClick(); else if (e.target === this.uploadButton) this.uploadButtonClick(); else if (e.target === this.browseButton) this.browseButtonClick(); else if (targetElement.classList.contains(PAUSE_UPLOAD)) {
                    (metaData = this.getCurrentMetaData(null, e)).file.statusCode = "4", metaData.file.status = this.localizedTexts("pauseUpload"), 
                    this.abortUpload(metaData, !1);
                } else if (targetElement.classList.contains("e-file-play-btn")) this.resumeUpload(this.getCurrentMetaData(null, e), e); else if (targetElement.classList.contains(RETRY_ICON)) {
                    var metaData;
                    (metaData = this.getCurrentMetaData(null, e)).file.statusCode = "1", metaData.file.status = this.localizedTexts("readyToUploadMessage"), 
                    this.chunkUpload(metaData.file);
                } else this.removeFiles(e), targetElement.classList.contains(ABORT_ICON) || this.browseButton.focus();
                e.preventDefault(), e.stopPropagation();
            }
        }, Uploader.prototype.getCurrentMetaData = function(fileInfo, e) {
            var fileData, targetMetaData;
            if (isNullOrUndefined(fileInfo)) {
                var target = this.uploadWrapper.querySelector("." + ICON_FOCUSED).parentElement;
                fileData = this.filesData[this.fileList.indexOf(target)];
            } else fileData = fileInfo;
            for (var i = 0; i < this.uploadMetaData.length; i++) this.uploadMetaData[i].file.name === fileData.name && (targetMetaData = this.uploadMetaData[i]);
            return targetMetaData;
        }, Uploader.prototype.setReverseFocus = function(e) {
            var target = e.target;
            if (target === this.uploadButton) this.uploadButton.blur(), this.clearButton.focus(); else if (target === this.clearButton && this.listParent && this.listParent.querySelector(".e-icons")) {
                this.clearButton.blur();
                var items = [].slice.call(this.listParent.querySelectorAll("span.e-icons"));
                items[items.length - 1].classList.add(ICON_FOCUSED), items[items.length - 1].focus();
            } else {
                var iconElements = [].slice.call(this.listParent.querySelectorAll("span.e-icons")), index = iconElements.indexOf(target);
                index > 0 ? (this.removeFocus(), iconElements[index - 1].classList.add(ICON_FOCUSED), 
                iconElements[index - 1].focus()) : (this.removeFocus(), this.browseButton.focus());
            }
        }, Uploader.prototype.setTabFocus = function(e) {
            var target = e.target;
            if (target === this.clearButton) {
                if (this.removeFocus(), this.uploadButton.hasAttribute("disabled")) return;
                this.uploadButton.focus();
            } else if (target.classList.contains("e-icons")) {
                var iconElements = [].slice.call(this.listParent.querySelectorAll("span.e-icons")), index = iconElements.indexOf(target);
                index < iconElements.length - 1 ? (this.removeFocus(), iconElements[index + 1].classList.add(ICON_FOCUSED), 
                iconElements[index + 1].focus()) : (this.removeFocus(), this.clearButton.focus());
            } else {
                this.browseButton.blur();
                var iconElement = this.listParent.querySelectorAll("span.e-icons")[0];
                iconElement.focus(), iconElement.classList.add(ICON_FOCUSED);
            }
        }, Uploader.prototype.removeFocus = function() {
            this.uploadWrapper && this.listParent && this.listParent.querySelector("." + ICON_FOCUSED) && (document.activeElement.blur(), 
            this.listParent.querySelector("." + ICON_FOCUSED).classList.remove(ICON_FOCUSED));
        }, Uploader.prototype.browseButtonClick = function() {
            this.element.click();
        }, Uploader.prototype.uploadButtonClick = function() {
            this.upload(this.filesData);
        }, Uploader.prototype.clearButtonClick = function() {
            this.clearAll();
        }, Uploader.prototype.bindDropEvents = function() {
            this.dropZoneElement && (EventHandler.add(this.dropZoneElement, "drop", this.dropElement, this), 
            EventHandler.add(this.dropZoneElement, "dragover", this.dragHover, this), EventHandler.add(this.dropZoneElement, "dragleave", this.onDragLeave, this), 
            EventHandler.add(this.dropZoneElement, "paste", this.onPasteFile, this));
        }, Uploader.prototype.unBindDropEvents = function() {
            this.dropZoneElement && (EventHandler.remove(this.dropZoneElement, "drop", this.dropElement), 
            EventHandler.remove(this.dropZoneElement, "dragover", this.dragHover), EventHandler.remove(this.dropZoneElement, "dragleave", this.onDragLeave));
        }, Uploader.prototype.onDragLeave = function(e) {
            this.dropZoneElement.classList.remove("e-upload-drag-hover");
        }, Uploader.prototype.dragHover = function(e) {
            this.enabled && (this.dropZoneElement.classList.add("e-upload-drag-hover"), e.preventDefault(), 
            e.stopPropagation());
        }, Uploader.prototype.dropElement = function(e) {
            this.dropZoneElement.classList.remove("e-upload-drag-hover"), this.onSelectFiles(e), 
            e.preventDefault(), e.stopPropagation();
        }, Uploader.prototype.onPasteFile = function(event) {
            var item = event.clipboardData.items;
            if (1 === item.length) {
                var pasteFile = [].slice.call(item)[0];
                "file" === pasteFile.kind && pasteFile.type.match("^image/") && this.renderSelectedFiles(event, [ pasteFile.getAsFile() ], !1, !0);
            }
        }, Uploader.prototype.removeFiles = function(args) {
            if (this.enabled) {
                var selectedElement = args.target.parentElement, index = this.fileList.indexOf(selectedElement), liElement = this.fileList[index], fileData = this.filesData[index];
                if (args.target.classList.contains(ABORT_ICON)) {
                    if (fileData.statusCode = "5", !isNullOrUndefined(liElement)) {
                        var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
                        createSpinner({
                            target: spinnerTarget,
                            width: "20px"
                        }), showSpinner(spinnerTarget);
                    }
                } else this.remove(fileData, !1, !1, args);
                this.element.value = "", this.checkActionButtonStatus();
            }
        }, Uploader.prototype.removeFilesData = function(file, customTemplate) {
            var index;
            if (customTemplate) this.showFileList || (index = this.filesData.indexOf(file), 
            this.filesData.splice(index, 1)); else {
                var selectedElement = this.getLiElement(file);
                isNullOrUndefined(selectedElement) || (detach(selectedElement), index = this.fileList.indexOf(selectedElement), 
                this.fileList.splice(index, 1), this.filesData.splice(index, 1), 0 !== this.fileList.length || isNullOrUndefined(this.listParent) || (detach(this.listParent), 
                this.listParent = null, this.removeActionButtons()));
            }
        }, Uploader.prototype.removeUploadedFile = function(file, eventArgs, removeDirectly, custom) {
            var _this = this, selectedFiles = file, name = this.element.getAttribute("name"), ajax = new Ajax(this.asyncSettings.removeUrl, "POST", !0, null), formData = new FormData(), liElement = this.getLiElement(file);
            ajax.beforeSend = function(e) {
                if (eventArgs.currentRequest = ajax.httpRequest, removeDirectly || _this.trigger("removing", eventArgs), 
                eventArgs.cancel) e.cancel = !0; else {
                    if (!(isNullOrUndefined(liElement) || isNullOrUndefined(liElement.querySelector("." + DELETE_ICON)) && isNullOrUndefined(liElement.querySelector("." + REMOVE_ICON)))) {
                        var spinnerTarget = void 0;
                        createSpinner({
                            target: spinnerTarget = liElement.querySelector("." + DELETE_ICON) ? liElement.querySelector("." + DELETE_ICON) : liElement.querySelector("." + REMOVE_ICON),
                            width: "20px"
                        }), showSpinner(spinnerTarget);
                    }
                    eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && "" !== selectedFiles.rawFile ? formData.append(name, selectedFiles.rawFile) : formData.append(name, selectedFiles.name), 
                    _this.updateFormData(formData, eventArgs.customFormData);
                }
            }, ajax.onLoad = function(e) {
                return _this.removeCompleted(e, selectedFiles, custom), {};
            }, ajax.onError = function(e) {
                return _this.removeFailed(e, selectedFiles, custom), {};
            }, ajax.send(formData);
        }, Uploader.prototype.updateFormData = function(formData, customData) {
            if (customData.length > 0 && customData[0]) for (var _loop_1 = function(i) {
                var data = customData[i], value = Object.keys(data).map(function(e) {
                    return data[e];
                });
                formData.append(Object.keys(data)[0], value);
            }, i = 0; i < customData.length; i++) _loop_1(i);
        }, Uploader.prototype.removeCompleted = function(e, files, customTemplate) {
            var args = {
                e: e,
                operation: "remove",
                file: this.updateStatus(files, this.localizedTexts("removedSuccessMessage"), "2")
            };
            this.trigger("success", args), this.removeFilesData(files, customTemplate);
            var index = this.uploadedFilesData.indexOf(files);
            this.uploadedFilesData.splice(index, 1), this.trigger("change", {
                files: this.uploadedFilesData
            });
        }, Uploader.prototype.removeFailed = function(e, files, customTemplate) {
            var args = {
                e: e,
                operation: "remove",
                file: this.updateStatus(files, this.localizedTexts("removedFailedMessage"), "0")
            };
            if (!customTemplate) {
                var index = this.filesData.indexOf(files), rootElement = this.fileList[index];
                if (rootElement) {
                    var statusElement = rootElement.querySelector("." + STATUS);
                    rootElement.classList.remove(UPLOAD_SUCCESS), statusElement.classList.remove(UPLOAD_SUCCESS), 
                    rootElement.classList.add(UPLOAD_FAILED), statusElement.classList.add(UPLOAD_FAILED);
                }
                this.checkActionButtonStatus();
            }
            this.trigger("failure", args);
            var liElement = this.getLiElement(files);
            if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector("." + DELETE_ICON))) {
                hideSpinner(liElement.querySelector("." + DELETE_ICON)), detach(liElement.querySelector(".e-spinner-pane"));
            }
        }, Uploader.prototype.getFilesFromFolder = function(event) {
            this.filesEntries = [];
            var items;
            items = this.multiple ? event.dataTransfer.items : [ event.dataTransfer.items[0] ];
            if (this.checkDirectoryUpload(items)) for (var _loop_2 = function(i) {
                var item = items[i].webkitGetAsEntry();
                if (item.isFile) {
                    var files_2 = [];
                    item.file(function(fileObj) {
                        var path = item.fullPath;
                        files_2.push({
                            path: path,
                            file: fileObj
                        });
                    }), this_1.renderSelectedFiles(event, files_2, !0);
                } else item.isDirectory && this_1.traverseFileTree(item, event);
            }, this_1 = this, i = 0; i < items.length; i++) _loop_2(i);
        }, Uploader.prototype.checkDirectoryUpload = function(items) {
            for (var i = 0; i < items.length; i++) {
                if (items[i].webkitGetAsEntry().isDirectory) return !0;
            }
            return !1;
        }, Uploader.prototype.traverseFileTree = function(item, event) {
            var _this = this;
            if ("boolean" == typeof item) {
                for (var files_3 = [], _loop_3 = function(i) {
                    this_2.filesEntries[i].file(function(fileObj) {
                        var path = _this.filesEntries[i].fullPath;
                        files_3.push({
                            path: path,
                            file: fileObj
                        });
                    });
                }, this_2 = this, i = 0; i < this.filesEntries.length; i++) _loop_3(i);
                this.renderSelectedFiles(event, files_3, !0);
            } else if (item.isFile) this.filesEntries.push(item); else if (item.isDirectory) {
                item.createReader().readEntries(function(entries) {
                    for (var i = 0; i < entries.length; i++) _this.traverseFileTree(entries[i]);
                    _this.traverseFileTree(!0), _this.filesEntries = [];
                });
            }
        }, Uploader.prototype.onSelectFiles = function(args) {
            if (this.enabled) {
                var targetFiles;
                if ("drop" === args.type) if (this.directoryUpload) this.getFilesFromFolder(args); else {
                    var files = args.dataTransfer.files;
                    targetFiles = this.multiple ? this.sortFileList(files) : [ files[0] ], this.renderSelectedFiles(args, targetFiles);
                } else targetFiles = [].slice.call(args.target.files), this.renderSelectedFiles(args, targetFiles);
            }
        }, Uploader.prototype.renderSelectedFiles = function(args, targetFiles, directory, paste) {
            var eventArgs = {
                event: args,
                cancel: !1,
                filesData: [],
                isModified: !1,
                modifiedFilesData: [],
                progressInterval: "",
                isCanceled: !1
            };
            if (targetFiles.length < 1) return eventArgs.isCanceled = !0, void this.trigger("selected", eventArgs);
            var fileData = [];
            this.multiple || (this.clearData(!0), targetFiles = [ targetFiles[0] ]);
            for (var i = 0; i < targetFiles.length; i++) {
                var file = directory ? targetFiles[i].file : targetFiles[i], fileDetails = {
                    name: directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? getUniqueID(file.name.substring(0, file.name.lastIndexOf("."))) + "." + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name,
                    rawFile: file,
                    size: file.size,
                    status: this.localizedTexts("readyToUploadMessage"),
                    type: this.getFileType(file.name),
                    validationMessages: this.validatedFileSize(file.size),
                    statusCode: "1"
                };
                paste && (fileDetails.fileSource = "paste"), fileDetails.status = "" !== fileDetails.validationMessages.minSize ? this.localizedTexts("invalidMinFileSize") : "" !== fileDetails.validationMessages.maxSize ? this.localizedTexts("invalidMaxFileSize") : fileDetails.status, 
                "" === fileDetails.validationMessages.minSize && "" === fileDetails.validationMessages.maxSize || (fileDetails.statusCode = "0"), 
                fileData.push(fileDetails);
            }
            if (eventArgs.filesData = fileData, this.allowedExtensions.indexOf("*") > -1 && (this.allTypes = !0), 
            this.allTypes || (fileData = this.checkExtension(fileData)), this.trigger("selected", eventArgs), 
            !eventArgs.cancel) if (this.showFileList) {
                if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
                    var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);
                    this.updateSortedFileList(dataFiles), this.filesData = dataFiles, this.isForm || this.checkAutoUpload(dataFiles);
                } else this.createFileList(fileData), this.filesData = this.filesData.concat(fileData), 
                this.isForm || this.checkAutoUpload(fileData);
                isNullOrUndefined(eventArgs.progressInterval) || "" === eventArgs.progressInterval || (this.progressInterval = eventArgs.progressInterval);
            } else this.filesData = this.filesData.concat(fileData), this.autoUpload && this.upload(this.filesData, !0);
        }, Uploader.prototype.clearData = function(singleUpload) {
            isNullOrUndefined(this.listParent) || (detach(this.listParent), this.listParent = null), 
            "msie" === Browser.info.name || singleUpload || (this.element.value = ""), this.fileList = [], 
            this.filesData = [], this.removeActionButtons();
        }, Uploader.prototype.updateSortedFileList = function(filesData) {
            var previousListClone = this.createElement("div", {
                id: "clonewrapper"
            }), added = -1;
            if (this.listParent) {
                for (var i = 0; i < this.listParent.querySelectorAll("li").length; i++) {
                    var liElement = this.listParent.querySelectorAll("li")[i];
                    previousListClone.appendChild(liElement.cloneNode(!0));
                }
                for (var _i = 0, removedList_1 = this.listParent.querySelectorAll("li"); _i < removedList_1.length; _i++) {
                    detach(removedList_1[_i]);
                }
                this.removeActionButtons();
                var oldList = [].slice.call(previousListClone.childNodes);
                detach(this.listParent), this.listParent = null, this.fileList = [], this.createParentUL();
                for (var index = 0; index < filesData.length; index++) {
                    for (var j = 0; j < this.filesData.length; j++) this.filesData[j].name === filesData[index].name && (this.listParent.appendChild(oldList[j]), 
                    EventHandler.add(oldList[j].querySelector(".e-icons"), "click", this.removeFiles, this), 
                    this.fileList.push(oldList[j]), added = index);
                    added !== index && this.createFileList([ filesData[index] ]);
                }
            } else this.createFileList(filesData);
        }, Uploader.prototype.isBlank = function(str) {
            return !str || /^\s*$/.test(str);
        }, Uploader.prototype.checkExtension = function(files) {
            var dropFiles = files;
            if (!this.isBlank(this.allowedExtensions)) {
                for (var allowedExtensions = [], _i = 0, extensions_1 = this.allowedExtensions.split(","); _i < extensions_1.length; _i++) {
                    var extension = extensions_1[_i];
                    allowedExtensions.push(extension.trim().toLocaleLowerCase());
                }
                for (var i = 0; i < files.length; i++) -1 === allowedExtensions.indexOf(("." + files[i].type).toLocaleLowerCase()) && (files[i].status = this.localizedTexts("invalidFileType"), 
                files[i].statusCode = "0");
            }
            return dropFiles;
        }, Uploader.prototype.validatedFileSize = function(fileSize) {
            var minSizeError = "", maxSizeError = "";
            fileSize < this.minFileSize ? minSizeError = this.localizedTexts("invalidMinFileSize") : fileSize > this.maxFileSize ? maxSizeError = this.localizedTexts("invalidMaxFileSize") : (minSizeError = "", 
            maxSizeError = "");
            return {
                minSize: minSizeError,
                maxSize: maxSizeError
            };
        }, Uploader.prototype.createCustomfileList = function(fileData) {
            this.createParentUL();
            for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {
                var listItem = fileData_1[_i], liElement = this.createElement("li", {
                    className: FILE,
                    attrs: {
                        "data-file-name": listItem.name
                    }
                });
                this.uploadTemplateFn = this.templateComplier(this.template), this.listParent.appendChild(liElement);
                append([].slice.call(this.uploadTemplateFn(listItem)), liElement), this.fileList.push(liElement);
            }
        }, Uploader.prototype.createParentUL = function() {
            isNullOrUndefined(this.listParent) && (this.listParent = this.createElement("ul", {
                className: "e-upload-files"
            }), this.uploadWrapper.appendChild(this.listParent));
        }, Uploader.prototype.createFileList = function(fileData) {
            if (this.createParentUL(), "" === this.template || isNullOrUndefined(this.template)) for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {
                var listItem = fileData_2[_i], liElement = this.createElement("li", {
                    className: FILE,
                    attrs: {
                        "data-file-name": listItem.name
                    }
                }), textContainer = this.createElement("span", {
                    className: "e-file-container"
                }), textElement = this.createElement("span", {
                    className: "e-file-name",
                    attrs: {
                        title: listItem.name
                    }
                });
                textElement.innerHTML = this.getFileNameOnly(listItem.name);
                var fileExtension = this.createElement("span", {
                    className: "e-file-type"
                });
                if (fileExtension.innerHTML = "." + this.getFileType(listItem.name), this.enableRtl) {
                    var rtlContainer = this.createElement("span", {
                        className: "e-rtl-container"
                    });
                    rtlContainer.appendChild(fileExtension), rtlContainer.appendChild(textElement), 
                    textContainer.appendChild(rtlContainer);
                } else textContainer.appendChild(textElement), textContainer.appendChild(fileExtension);
                var fileSize = this.createElement("span", {
                    className: "e-file-size"
                });
                fileSize.innerHTML = this.bytesToSize(listItem.size), textContainer.appendChild(fileSize);
                var statusElement = this.createElement("span", {
                    className: STATUS
                });
                textContainer.appendChild(statusElement), statusElement.innerHTML = listItem.status, 
                liElement.appendChild(textContainer);
                var iconElement = this.createElement("span", {
                    className: " e-icons",
                    attrs: {
                        tabindex: "-1"
                    }
                });
                "msie" === Browser.info.name && iconElement.classList.add("e-msie"), iconElement.setAttribute("title", this.localizedTexts("remove")), 
                liElement.appendChild(iconElement), EventHandler.add(iconElement, "click", this.removeFiles, this), 
                "2" === listItem.statusCode ? (statusElement.classList.add(UPLOAD_SUCCESS), iconElement.classList.add(DELETE_ICON), 
                iconElement.setAttribute("title", this.localizedTexts("delete"))) : "1" !== listItem.statusCode && (statusElement.classList.remove(UPLOAD_SUCCESS), 
                statusElement.classList.add("e-validation-fails")), this.autoUpload && "1" === listItem.statusCode && "" !== this.asyncSettings.saveUrl && (statusElement.innerHTML = ""), 
                iconElement.classList.contains(DELETE_ICON) || iconElement.classList.add(REMOVE_ICON), 
                this.listParent.appendChild(liElement), this.fileList.push(liElement), this.truncateName(textElement);
            } else this.createCustomfileList(fileData);
        }, Uploader.prototype.truncateName = function(name) {
            var text, nameElement = name;
            nameElement.offsetWidth < nameElement.scrollWidth && (text = nameElement.textContent, 
            nameElement.dataset.tail = text.slice(text.length - 10));
        }, Uploader.prototype.getFileType = function(name) {
            var extension, index = name.lastIndexOf(".");
            return index >= 0 && (extension = name.substring(index + 1)), extension || "";
        }, Uploader.prototype.getFileNameOnly = function(name) {
            var type = this.getFileType(name);
            return type = name.split("." + type)[0];
        }, Uploader.prototype.setInitialAttributes = function() {
            if (this.initialAttr.accept && this.element.setAttribute("accept", this.initialAttr.accept), 
            this.initialAttr.disabled && this.element.setAttribute("disabled", "disabled"), 
            this.initialAttr.multiple) {
                var newAttr = document.createAttribute("multiple");
                this.element.setAttributeNode(newAttr);
            }
        }, Uploader.prototype.filterfileList = function(files) {
            for (var filterFiles = [], i = 0; i < files.length; i++) this.getLiElement(files[i]).classList.contains(UPLOAD_SUCCESS) || filterFiles.push(files[i]);
            return filterFiles;
        }, Uploader.prototype.updateStatus = function(files, status, statusCode) {
            "" === status || isNullOrUndefined(status) || "" === statusCode || isNullOrUndefined(statusCode) || (files.status = status, 
            files.statusCode = statusCode);
            var li = this.getLiElement(files);
            return isNullOrUndefined(li) || isNullOrUndefined(li.querySelector("." + STATUS)) || "" === status || isNullOrUndefined(status) || (li.querySelector("." + STATUS).textContent = status), 
            files;
        }, Uploader.prototype.getLiElement = function(files) {
            for (var index, i = 0; i < this.filesData.length; i++) this.filesData[i].name === files.name && (index = i);
            return this.fileList[index];
        }, Uploader.prototype.createProgressBar = function(liElement) {
            var progressbarWrapper = this.createElement("span", {
                className: PROGRESS_WRAPPER
            }), progressBar = this.createElement("progressbar", {
                className: PROGRESSBAR,
                attrs: {
                    value: "0",
                    max: "100"
                }
            }), progressbarInnerWrapper = this.createElement("span", {
                className: "e-progress-inner-wrap"
            });
            progressBar.setAttribute("style", "width: 0%");
            var progressbarText = this.createElement("span", {
                className: "e-progress-bar-text"
            });
            progressbarText.textContent = "0%", progressbarInnerWrapper.appendChild(progressBar), 
            progressbarWrapper.appendChild(progressbarInnerWrapper), progressbarWrapper.appendChild(progressbarText), 
            liElement.querySelector(".e-file-container").appendChild(progressbarWrapper);
        }, Uploader.prototype.updateProgressbar = function(e, li) {
            if (!isNaN(Math.round(e.loaded / e.total * 100)) && !isNullOrUndefined(li.querySelector("." + PROGRESSBAR))) if (isNullOrUndefined(this.progressInterval) || "" === this.progressInterval) this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + "%"); else {
                var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);
                0 !== value && 100 !== value || this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + "%");
            }
        }, Uploader.prototype.changeProgressValue = function(li, progressValue) {
            li.querySelector("." + PROGRESSBAR).setAttribute("style", "width:" + progressValue), 
            li.querySelector(".e-progress-bar-text").textContent = progressValue;
        }, Uploader.prototype.uploadInProgress = function(e, files, customUI, request) {
            var li = this.getLiElement(files);
            if (!isNullOrUndefined(li) || customUI) {
                if (isNullOrUndefined(li)) this.cancelUploadingFile(files, e, request); else {
                    "5" === files.statusCode && this.cancelUploadingFile(files, e, request, li), li.querySelectorAll("." + PROGRESS_WRAPPER).length > 0 || !li.querySelector("." + STATUS) || (li.querySelector("." + STATUS).classList.add("e-upload-progress"), 
                    this.createProgressBar(li), this.updateProgressBarClasses(li, "e-upload-progress"), 
                    li.querySelector("." + STATUS).classList.remove(UPLOAD_FAILED)), this.updateProgressbar(e, li);
                    var iconEle = li.querySelector("." + REMOVE_ICON);
                    isNullOrUndefined(iconEle) || (iconEle.classList.add(ABORT_ICON, "e-upload-progress"), 
                    iconEle.setAttribute("title", this.localizedTexts("abort")), iconEle.classList.remove(REMOVE_ICON));
                }
                var args = {
                    e: e,
                    operation: "upload",
                    file: this.updateStatus(files, this.localizedTexts("inProgress"), "3")
                };
                this.trigger("progress", args);
            }
        }, Uploader.prototype.cancelUploadingFile = function(files, e, request, li) {
            var _this = this;
            if ("5" === files.statusCode) {
                var eventArgs = {
                    event: e,
                    fileData: files,
                    cancel: !1
                };
                if (this.trigger("canceling", eventArgs), eventArgs.cancel) {
                    if (files.statusCode = "3", !isNullOrUndefined(li)) {
                        var spinnerTarget = li.querySelector("." + ABORT_ICON);
                        isNullOrUndefined(spinnerTarget) || (hideSpinner(spinnerTarget), detach(li.querySelector(".e-spinner-pane")));
                    }
                    return;
                }
                request.emitError = !1, request.httpRequest.abort();
                var formData = new FormData();
                if ("5" === files.statusCode) {
                    var name_1 = this.element.getAttribute("name");
                    formData.append(name_1, files.name), formData.append("cancel-uploading", files.name);
                    var ajax = new Ajax(this.asyncSettings.removeUrl, "POST", !0, null);
                    ajax.onLoad = function(e) {
                        return _this.removecanceledFile(e, files), {};
                    }, ajax.send(formData);
                }
            }
        }, Uploader.prototype.removecanceledFile = function(e, file) {
            var liElement = this.getLiElement(file);
            if (!liElement.querySelector("." + RETRY_ICON) && !isNullOrUndefined(liElement.querySelector("." + ABORT_ICON))) {
                this.updateStatus(file, this.localizedTexts("fileUploadCancel"), "5"), this.renderFailureState(e, file, liElement);
                var spinnerTarget = liElement.querySelector("." + REMOVE_ICON);
                isNullOrUndefined(liElement) || (hideSpinner(spinnerTarget), detach(liElement.querySelector(".e-spinner-pane")));
                var args = {
                    event: e,
                    operation: "cancel",
                    file: file
                };
                this.trigger("success", args);
            }
        }, Uploader.prototype.renderFailureState = function(e, file, liElement) {
            var _this = this;
            this.updateProgressBarClasses(liElement, UPLOAD_FAILED), this.removeProgressbar(liElement, "failure"), 
            isNullOrUndefined(liElement.querySelector(".e-file-status")) || liElement.querySelector(".e-file-status").classList.add(UPLOAD_FAILED);
            var deleteIcon = liElement.querySelector("." + ABORT_ICON);
            if (!isNullOrUndefined(deleteIcon)) {
                deleteIcon.classList.remove(ABORT_ICON, "e-upload-progress"), deleteIcon.classList.add(REMOVE_ICON), 
                deleteIcon.setAttribute("title", this.localizedTexts("remove")), this.pauseButton = this.createElement("span", {
                    className: "e-icons e-file-reload-btn",
                    attrs: {
                        tabindex: "-1"
                    }
                }), liElement.insertBefore(this.pauseButton, deleteIcon), this.pauseButton.setAttribute("title", this.localizedTexts("retry"));
                liElement.querySelector("." + RETRY_ICON).addEventListener("click", function(e) {
                    _this.reloadcanceledFile(e, file, liElement, !1);
                }, !1);
            }
        }, Uploader.prototype.reloadcanceledFile = function(e, file, liElement, custom) {
            file.statusCode = "1", file.status = this.localizedTexts("readyToUploadMessage"), 
            custom || (liElement.querySelector("." + STATUS).classList.remove(UPLOAD_FAILED), 
            isNullOrUndefined(liElement.querySelector("." + RETRY_ICON)) || detach(liElement.querySelector("." + RETRY_ICON)), 
            this.pauseButton = null), this.upload([ file ]);
        }, Uploader.prototype.uploadComplete = function(e, file, customUI) {
            var status = e.target;
            if (4 === status.readyState && status.status >= 200 && status.status <= 299) {
                var li = this.getLiElement(file);
                if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI))) return;
                if (!isNullOrUndefined(li)) {
                    this.updateProgressBarClasses(li, UPLOAD_SUCCESS), this.removeProgressbar(li, "success");
                    var iconEle = li.querySelector("." + ABORT_ICON);
                    isNullOrUndefined(iconEle) || (iconEle.classList.add(DELETE_ICON), iconEle.setAttribute("title", this.localizedTexts("delete")), 
                    iconEle.classList.remove(ABORT_ICON), iconEle.classList.remove("e-upload-progress"));
                }
                this.raiseSuccessEvent(e, file);
            } else this.uploadFailed(e, file);
        }, Uploader.prototype.raiseSuccessEvent = function(e, file) {
            var args = {
                e: e,
                operation: "upload",
                file: this.updateStatus(file, this.localizedTexts("uploadSuccessMessage"), "2")
            };
            this.trigger("success", args), this.uploadedFilesData.push(file), this.trigger("change", {
                file: this.uploadedFilesData
            }), this.checkActionButtonStatus();
        }, Uploader.prototype.uploadFailed = function(e, file) {
            var li = this.getLiElement(file), args = {
                e: e,
                operation: "upload",
                file: this.updateStatus(file, this.localizedTexts("uploadFailedMessage"), "0")
            };
            isNullOrUndefined(li) || this.renderFailureState(e, file, li), this.trigger("failure", args), 
            this.checkActionButtonStatus();
        }, Uploader.prototype.updateProgressBarClasses = function(li, className) {
            var progressBar = li.querySelector("." + PROGRESSBAR);
            isNullOrUndefined(progressBar) || progressBar.classList.add(className);
        }, Uploader.prototype.removeProgressbar = function(li, callType) {
            var _this = this;
            isNullOrUndefined(li.querySelector("." + PROGRESS_WRAPPER)) || (this.progressAnimation = new Animation({
                duration: 1250
            }), this.progressAnimation.animate(li.querySelector("." + PROGRESS_WRAPPER), {
                name: "FadeOut"
            }), this.progressAnimation.animate(li.querySelector(".e-progress-bar-text"), {
                name: "FadeOut"
            }), setTimeout(function() {
                _this.animateProgressBar(li, callType);
            }, 750));
        }, Uploader.prototype.animateProgressBar = function(li, callType) {
            "success" === callType ? (li.classList.add(UPLOAD_SUCCESS), isNullOrUndefined(li.querySelector("." + STATUS)) || (li.querySelector("." + STATUS).classList.remove("e-upload-progress"), 
            this.progressAnimation.animate(li.querySelector("." + STATUS), {
                name: "FadeIn"
            }), li.querySelector("." + STATUS).classList.add(UPLOAD_SUCCESS))) : isNullOrUndefined(li.querySelector("." + STATUS)) || (li.querySelector("." + STATUS).classList.remove("e-upload-progress"), 
            this.progressAnimation.animate(li.querySelector("." + STATUS), {
                name: "FadeIn"
            }), li.querySelector("." + STATUS).classList.add(UPLOAD_FAILED)), li.querySelector("." + PROGRESS_WRAPPER) && detach(li.querySelector("." + PROGRESS_WRAPPER));
        }, Uploader.prototype.setExtensions = function(extensions) {
            this.element.setAttribute("accept", extensions);
        }, Uploader.prototype.templateComplier = function(uploadTemplate) {
            if (uploadTemplate) try {
                if (document.querySelectorAll(uploadTemplate).length) return compile$$1(document.querySelector(uploadTemplate).innerHTML.trim());
            } catch (exception) {
                return compile$$1(uploadTemplate);
            }
        }, Uploader.prototype.setRTL = function() {
            this.enableRtl ? addClass([ this.uploadWrapper ], "e-rtl") : removeClass([ this.uploadWrapper ], "e-rtl");
        }, Uploader.prototype.localizedTexts = function(localeText) {
            return this.l10n.setLocale(this.locale), this.l10n.getConstant(localeText);
        }, Uploader.prototype.setControlStatus = function() {
            this.enabled ? (this.uploadWrapper.classList.contains("e-disabled") && this.uploadWrapper.classList.remove("e-disabled"), 
            !isNullOrUndefined(this.browseButton) && this.element.hasAttribute("disabled") && (this.element.removeAttribute("disabled"), 
            this.browseButton.removeAttribute("disabled")), !isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute("disabled") && this.clearButton.removeAttribute("disabled"), 
            !isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute("disabled") && this.uploadButton.hasAttribute("disabled")) : (this.uploadWrapper.classList.add("e-disabled"), 
            this.element.setAttribute("disabled", "disabled"), this.browseButton.setAttribute("disabled", "disabled"), 
            isNullOrUndefined(this.clearButton) || this.clearButton.setAttribute("disabled", "disabled"), 
            isNullOrUndefined(this.uploadButton) || this.uploadButton.setAttribute("disabled", "disabled"));
        }, Uploader.prototype.checkHTMLAttributes = function() {
            this.element.hasAttribute("accept") && (this.allowedExtensions = this.element.getAttribute("accept"), 
            this.initialAttr.accept = this.allowedExtensions), this.element.hasAttribute("multiple") && (this.multiple = !0, 
            this.initialAttr.multiple = !0), this.element.hasAttribute("disabled") && (this.enabled = !1, 
            this.initialAttr.disabled = !0);
        }, Uploader.prototype.chunkUpload = function(file, custom) {
            var end = Math.min(this.asyncSettings.chunkSize, file.size), metaData = {
                chunkIndex: 0,
                blob: file.rawFile.slice(0, end),
                file: file,
                start: 0,
                end: end,
                retryCount: 0,
                request: null
            };
            this.sendRequest(file, metaData, custom);
        }, Uploader.prototype.sendRequest = function(file, metaData, custom) {
            var _this = this, formData = new FormData(), blob = file.rawFile.slice(metaData.start, metaData.end);
            formData.append("chunkFile", blob, file.name), formData.append("chunk-index", metaData.chunkIndex.toString()), 
            formData.append("chunkIndex", metaData.chunkIndex.toString());
            var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);
            formData.append("total-chunk", totalChunk.toString()), formData.append("totalChunk", totalChunk.toString());
            var ajax = new Ajax({
                url: this.asyncSettings.saveUrl,
                type: "POST",
                async: !0,
                contentType: null
            });
            ajax.onLoad = function(e) {
                return _this.chunkUploadComplete(e, metaData, custom), {};
            }, ajax.onUploadProgress = function(e) {
                return _this.chunkUploadInProgress(e, metaData, custom), {};
            };
            var eventArgs = {
                fileData: file,
                customFormData: [],
                cancel: !1,
                chunkSize: 0 === this.asyncSettings.chunkSize ? null : this.asyncSettings.chunkSize
            };
            ajax.beforeSend = function(e) {
                0 === metaData.chunkIndex && (eventArgs.currentRequest = ajax.httpRequest, _this.trigger("uploading", eventArgs), 
                eventArgs.cancel ? _this.eventCancelByArgs(e, eventArgs, file) : _this.updateFormData(formData, eventArgs.customFormData));
            }, ajax.onError = function(e) {
                return _this.chunkUploadFailed(e, metaData, custom), {};
            }, ajax.send(formData), metaData.request = ajax;
        }, Uploader.prototype.eventCancelByArgs = function(e, eventArgs, file) {
            var _this = this;
            if (e.cancel = !0, "5" !== eventArgs.fileData.statusCode) {
                var liElement = this.getLiElement(eventArgs.fileData);
                liElement.querySelector("." + STATUS).innerHTML = this.localizedTexts("fileUploadCancel"), 
                liElement.querySelector("." + STATUS).classList.add(UPLOAD_FAILED), eventArgs.fileData.statusCode = "5", 
                eventArgs.fileData.status = this.localizedTexts("fileUploadCancel"), this.pauseButton = this.createElement("span", {
                    className: "e-icons e-file-reload-btn",
                    attrs: {
                        tabindex: "-1"
                    }
                }), liElement.insertBefore(this.pauseButton, liElement.querySelector("." + REMOVE_ICON)), 
                this.pauseButton.setAttribute("title", this.localizedTexts("retry")), this.pauseButton.addEventListener("click", function(e) {
                    _this.reloadcanceledFile(e, file, liElement);
                }, !1), this.checkActionButtonStatus();
            }
        }, Uploader.prototype.checkChunkUpload = function() {
            return !(this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize));
        }, Uploader.prototype.chunkUploadComplete = function(e, metaData, custom) {
            var liElement, _this = this, response = e.target;
            if (4 === response.readyState && response.status >= 200 && response.status < 300) {
                var totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1), eventArgs = {
                    event: e,
                    file: metaData.file,
                    chunkIndex: metaData.chunkIndex,
                    totalChunk: totalChunk,
                    chunkSize: this.asyncSettings.chunkSize
                };
                if (this.trigger("chunkSuccess", eventArgs), !isNullOrUndefined(custom) && custom || (liElement = this.getLiElement(metaData.file)), 
                this.updateMetaData(metaData), metaData.end === metaData.file.size && (metaData.file.statusCode = "3"), 
                "5" === metaData.file.statusCode) {
                    var eventArgs_1 = {
                        event: e,
                        fileData: metaData.file,
                        cancel: !1
                    };
                    if (this.trigger("canceling", eventArgs_1), eventArgs_1.cancel) {
                        metaData.file.statusCode = "3";
                        var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
                        return isNullOrUndefined(liElement) || isNullOrUndefined(spinnerTarget) || (hideSpinner(spinnerTarget), 
                        detach(liElement.querySelector(".e-spinner-pane"))), void this.sendNextRequest(metaData);
                    }
                    metaData.request.emitError = !1, response.abort();
                    var formData = new FormData(), name_2 = this.element.getAttribute("name");
                    formData.append(name_2, metaData.file.name), formData.append("cancel-uploading", metaData.file.name), 
                    formData.append("cancelUploading", metaData.file.name);
                    var ajax = new Ajax(this.asyncSettings.removeUrl, "POST", !0, null);
                    ajax.onLoad = function(e) {
                        return _this.removeChunkFile(e, metaData, custom), {};
                    }, ajax.send(formData);
                } else {
                    if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {
                        var index = this.pausedData.indexOf(metaData);
                        return index >= 0 && this.pausedData.splice(index, 1), isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement && (liElement && detach(liElement.querySelector("." + PAUSE_UPLOAD)), 
                        this.removeChunkProgressBar(metaData)), void this.raiseSuccessEvent(e, metaData.file);
                    }
                    this.sendNextRequest(metaData);
                }
            } else this.chunkUploadFailed(e, metaData);
        }, Uploader.prototype.sendNextRequest = function(metaData) {
            metaData.start = metaData.end, metaData.end += this.asyncSettings.chunkSize, metaData.end = Math.min(metaData.end, metaData.file.size), 
            metaData.chunkIndex += 1, this.sendRequest(metaData.file, metaData);
        }, Uploader.prototype.removeChunkFile = function(e, metaData, custom) {
            if (isNullOrUndefined(this.template) && isNullOrUndefined(custom) && !custom) {
                var liElement = this.getLiElement(metaData.file), deleteIcon = liElement.querySelector("." + ABORT_ICON), spinnerTarget = deleteIcon;
                this.updateStatus(metaData.file, this.localizedTexts("fileUploadCancel"), "5"), 
                this.updateProgressBarClasses(liElement, UPLOAD_FAILED), this.removeProgressbar(liElement, "failure"), 
                deleteIcon.classList.remove(ABORT_ICON), deleteIcon.classList.add(REMOVE_ICON), 
                deleteIcon.setAttribute("title", this.localizedTexts("remove"));
                var pauseIcon = liElement.querySelector("." + PAUSE_UPLOAD);
                pauseIcon.classList.add(RETRY_ICON), pauseIcon.classList.remove(PAUSE_UPLOAD), pauseIcon.setAttribute("title", this.localizedTexts("retry")), 
                isNullOrUndefined(liElement) || isNullOrUndefined(deleteIcon) || (hideSpinner(spinnerTarget), 
                detach(liElement.querySelector(".e-spinner-pane")));
            }
        }, Uploader.prototype.pauseUpload = function(metaData, e, custom) {
            metaData.file.statusCode = "4", metaData.file.status = this.localizedTexts("pause"), 
            this.updateMetaData(metaData);
            var eventArgs = {
                event: e || null,
                file: metaData.file,
                chunkIndex: metaData.chunkIndex,
                chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
                chunkSize: this.asyncSettings.chunkSize
            };
            this.abortUpload(metaData, custom, eventArgs);
        }, Uploader.prototype.abortUpload = function(metaData, custom, eventArgs) {
            metaData.request.emitError = !1, metaData.request.httpRequest.abort();
            var liElement = this.getLiElement(metaData.file);
            if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {
                var targetElement = liElement.querySelector("." + PAUSE_UPLOAD);
                targetElement.classList.remove(PAUSE_UPLOAD), targetElement.classList.add("e-file-play-btn"), 
                targetElement.setAttribute("title", this.localizedTexts("resume")), targetElement.nextElementSibling.classList.add(REMOVE_ICON), 
                targetElement.nextElementSibling.classList.remove(ABORT_ICON), targetElement.nextElementSibling.setAttribute("title", this.localizedTexts("remove"));
            }
            for (var i = 0; i < this.pausedData.length; i++) this.pausedData[i].file.name === metaData.file.name && this.pausedData.splice(i, 1);
            this.pausedData.push(metaData), this.trigger("pausing", eventArgs);
        }, Uploader.prototype.resumeUpload = function(metaData, e, custom) {
            var targetElement, liElement = this.getLiElement(metaData.file);
            isNullOrUndefined(liElement) || (targetElement = liElement.querySelector(".e-file-play-btn")), 
            isNullOrUndefined(targetElement) || !isNullOrUndefined(custom) && custom || (targetElement.classList.remove("e-file-play-btn"), 
            targetElement.classList.add(PAUSE_UPLOAD), targetElement.setAttribute("title", this.localizedTexts("pause")), 
            targetElement.nextElementSibling.classList.remove(REMOVE_ICON), targetElement.nextElementSibling.classList.add(ABORT_ICON), 
            targetElement.nextElementSibling.setAttribute("title", this.localizedTexts("abort"))), 
            metaData.file.status = this.localizedTexts("inProgress"), metaData.file.statusCode = "3", 
            this.updateMetaData(metaData);
            var eventArgs = {
                event: e || null,
                file: metaData.file,
                chunkIndex: metaData.chunkIndex,
                chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
                chunkSize: this.asyncSettings.chunkSize
            };
            this.trigger("resuming", eventArgs);
            for (var i = 0; i < this.pausedData.length; i++) this.pausedData[i].end === this.pausedData[i].file.size ? this.chunkUploadComplete(e, metaData, custom) : this.pausedData[i].file.name === metaData.file.name && (this.pausedData[i].start = this.pausedData[i].end, 
            this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize, 
            this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size), 
            this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1, this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom));
        }, Uploader.prototype.updateMetaData = function(metaData) {
            -1 === this.uploadMetaData.indexOf(metaData) ? this.uploadMetaData.push(metaData) : (this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1), 
            this.uploadMetaData.push(metaData));
        }, Uploader.prototype.removeChunkProgressBar = function(metaData) {
            var liElement = this.getLiElement(metaData.file);
            if (!isNullOrUndefined(liElement)) {
                this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS), this.removeProgressbar(liElement, "success");
                var cancelButton = liElement.querySelector("." + ABORT_ICON);
                isNullOrUndefined(cancelButton) || (cancelButton.classList.add(DELETE_ICON), cancelButton.setAttribute("title", this.localizedTexts("delete")), 
                cancelButton.classList.remove(ABORT_ICON, "e-upload-progress"));
            }
        }, Uploader.prototype.chunkUploadFailed = function(e, metaData, custom) {
            var liElement, _this = this, chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
            !isNullOrUndefined(this.template) || !isNullOrUndefined(custom) && custom || (liElement = this.getLiElement(metaData.file));
            var eventArgs = {
                event: e,
                file: metaData.file,
                chunkIndex: metaData.chunkIndex,
                totalChunk: chunkCount,
                chunkSize: this.asyncSettings.chunkSize,
                cancel: !1
            };
            this.trigger("chunkFailure", eventArgs);
            var eventArgsData = eventArgs, values = Object.keys(eventArgsData).map(function(e) {
                return eventArgsData[e];
            });
            if (!values[values.length - 2]) if (metaData.retryCount < this.asyncSettings.retryCount) setTimeout(function() {
                _this.retryRequest(liElement, metaData, custom);
            }, this.asyncSettings.retryAfterDelay); else {
                if (!isNullOrUndefined(liElement)) {
                    var pauseButton = liElement.querySelector("." + PAUSE_UPLOAD) ? liElement.querySelector("." + PAUSE_UPLOAD) : liElement.querySelector(".e-file-play-btn");
                    isNullOrUndefined(pauseButton) || (pauseButton.classList.add(RETRY_ICON), pauseButton.classList.remove(PAUSE_UPLOAD, "e-file-play-btn")), 
                    this.updateProgressBarClasses(liElement, UPLOAD_FAILED), this.removeProgressbar(liElement, "failure"), 
                    liElement.querySelector(".e-icons").classList.remove("e-upload-progress");
                    var iconElement = liElement.querySelector("." + ABORT_ICON);
                    iconElement.classList.remove(ABORT_ICON), isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD)) || detach(liElement.querySelector("." + PAUSE_UPLOAD)), 
                    metaData.start > 0 ? (iconElement.classList.add(DELETE_ICON), iconElement.setAttribute("title", this.localizedTexts("delete"))) : (iconElement.classList.add(REMOVE_ICON), 
                    iconElement.setAttribute("title", this.localizedTexts("remove")));
                }
                metaData.retryCount = 0;
                var file = metaData.file, args = {
                    e: e,
                    operation: "upload",
                    file: this.updateStatus(file, this.localizedTexts("uploadFailedMessage"), "0")
                };
                this.trigger("failure", args);
            }
        }, Uploader.prototype.retryRequest = function(liElement, metaData, custom) {
            isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement && this.updateProgressBarClasses(liElement, UPLOAD_FAILED), 
            metaData.retryCount += 1, this.sendRequest(metaData.file, metaData);
        }, Uploader.prototype.checkPausePlayAction = function(e) {
            var targetElement = e.target, selectedElement = e.target.parentElement, index = this.fileList.indexOf(selectedElement), fileData = this.filesData[index], metaData = this.getCurrentMetaData(fileData);
            targetElement.classList.contains(PAUSE_UPLOAD) ? this.pauseUpload(metaData, e) : targetElement.classList.contains("e-file-play-btn") ? this.resumeUpload(metaData, e) : targetElement.classList.contains(RETRY_ICON) && (metaData.file.status === this.localizedTexts("fileUploadCancel") ? this.retryUpload(metaData, !1) : this.retryUpload(metaData, !0));
        }, Uploader.prototype.retryUpload = function(metaData, fromcanceledStage) {
            fromcanceledStage ? (metaData.end = metaData.end + this.asyncSettings.chunkSize, 
            metaData.start = metaData.start + this.asyncSettings.chunkSize, this.sendRequest(metaData.file, metaData)) : (metaData.file.statusCode = "1", 
            metaData.file.status = this.localizedTexts("readyToUploadMessage"), this.chunkUpload(metaData.file));
        }, Uploader.prototype.chunkUploadInProgress = function(e, metaData, custom) {
            var _this = this;
            if ("4" !== metaData.file.statusCode) {
                "4" !== metaData.file.statusCode && "5" !== metaData.file.statusCode && (metaData.file.statusCode = "3", 
                metaData.file.status = this.localizedTexts("inProgress")), this.updateMetaData(metaData);
                var liElement = this.getLiElement(metaData.file);
                if (!isNullOrUndefined(liElement)) {
                    var retryElement = liElement.querySelector("." + RETRY_ICON);
                    if (isNullOrUndefined(retryElement) || (retryElement.classList.add(PAUSE_UPLOAD), 
                    retryElement.setAttribute("title", this.localizedTexts("pause")), retryElement.classList.remove(RETRY_ICON)), 
                    !isNullOrUndefined(liElement)) {
                        if (!(liElement.querySelectorAll("." + PROGRESS_WRAPPER).length > 0)) {
                            var statusElement = liElement.querySelector("." + STATUS);
                            isNullOrUndefined(this.template) && (statusElement.classList.add("e-upload-progress"), 
                            statusElement.classList.remove(UPLOAD_FAILED), this.createProgressBar(liElement), 
                            this.updateProgressBarClasses(liElement, "e-upload-progress"));
                            var clearIcon = liElement.querySelector("." + REMOVE_ICON) ? liElement.querySelector("." + REMOVE_ICON) : liElement.querySelector("." + DELETE_ICON);
                            isNullOrUndefined(clearIcon) || (clearIcon.classList.add(ABORT_ICON), clearIcon.setAttribute("title", this.localizedTexts("abort")), 
                            clearIcon.classList.remove(REMOVE_ICON));
                        }
                        if (!isNaN(Math.round(e.loaded / e.total * 100)) && isNullOrUndefined(this.template) && "4" !== metaData.file.statusCode) {
                            var loadedSize = metaData.chunkIndex * this.asyncSettings.chunkSize, value = Math.min((loadedSize + e.loaded) / metaData.file.size * 100, 100);
                            this.changeProgressValue(liElement, Math.round(value).toString() + "%");
                        }
                        0 === metaData.chunkIndex && this.checkActionButtonStatus();
                    }
                    isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD)) && isNullOrUndefined(this.template) && (this.pauseButton = this.createElement("span", {
                        className: "e-icons e-file-pause-btn",
                        attrs: {
                            tabindex: "-1"
                        }
                    }), "msie" === Browser.info.name && this.pauseButton.classList.add("e-msie"), liElement.insertBefore(this.pauseButton, liElement.querySelector("." + ABORT_ICON)), 
                    this.pauseButton.setAttribute("title", this.localizedTexts("pause")), this.pauseButton.addEventListener("click", function(e) {
                        _this.checkPausePlayAction(e);
                    }, !1));
                }
            }
        }, Uploader.prototype.bytesToSize = function(bytes) {
            var i = -1;
            if (!bytes) return "0.0 KB";
            do {
                bytes /= 1024, i++;
            } while (bytes > 99);
            return i >= 2 && (bytes *= 1024, i = 1), Math.max(bytes, 0).toFixed(1) + " " + [ "KB", "MB" ][i];
        }, Uploader.prototype.sortFileList = function(filesData) {
            for (var files = filesData, fileNames = [], i = 0; i < files.length; i++) fileNames.push(files[i].name);
            for (var sortedFilesData = [], _i = 0, sortedFileNames_1 = fileNames.sort(); _i < sortedFileNames_1.length; _i++) {
                var name_3 = sortedFileNames_1[_i];
                for (i = 0; i < files.length; i++) name_3 === files[i].name && sortedFilesData.push(files[i]);
            }
            return sortedFilesData;
        }, Uploader.prototype.destroy = function() {
            this.element.value = null, this.clearAll(), this.unWireEvents(), this.unBindDropEvents(), 
            this.multiple && this.element.removeAttribute("multiple"), this.enabled || this.element.removeAttribute("disabled"), 
            this.element.removeAttribute("accept"), this.setInitialAttributes(), this.uploadWrapper.parentElement.appendChild(this.cloneElement), 
            this.cloneElement.classList.remove("e-control", "e-uploader"), detach(this.uploadWrapper), 
            this.uploadWrapper = null, _super.prototype.destroy.call(this);
        }, Uploader.prototype.upload = function(files, custom) {
            var uploadFiles = this.validateFileType(files);
            this.uploadFiles(uploadFiles, custom);
        }, Uploader.prototype.validateFileType = function(files) {
            var uploadFiles = [];
            return files instanceof Array ? uploadFiles = files : uploadFiles.push(files), uploadFiles;
        }, Uploader.prototype.uploadFiles = function(files, custom) {
            var _this = this, selectedFiles = [];
            if ("" !== this.asyncSettings.saveUrl && !isNullOrUndefined(this.asyncSettings.saveUrl)) {
                if (!custom || isNullOrUndefined(custom)) if (this.multiple) selectedFiles = this.filterfileList(files); else {
                    var file = [];
                    file.push(files[0]), selectedFiles = this.filterfileList(file);
                } else selectedFiles = files;
                for (var chunkEnabled = this.checkChunkUpload(), _loop_4 = function(i) {
                    var ajax = new Ajax(this_3.asyncSettings.saveUrl, "POST", !0, null), eventArgs = {
                        fileData: selectedFiles[i],
                        customFormData: [],
                        cancel: !1
                    }, formData = new FormData();
                    if (ajax.beforeSend = function(e) {
                        eventArgs.currentRequest = ajax.httpRequest, _this.trigger("uploading", eventArgs), 
                        eventArgs.cancel && _this.eventCancelByArgs(e, eventArgs, selectedFiles[i]), _this.updateFormData(formData, eventArgs.customFormData);
                    }, "1" === selectedFiles[i].statusCode) {
                        var name_4 = this_3.element.getAttribute("name");
                        formData.append(name_4, selectedFiles[i].rawFile, selectedFiles[i].name), chunkEnabled && selectedFiles[i].size > this_3.asyncSettings.chunkSize ? this_3.chunkUpload(selectedFiles[i], custom) : (ajax.onLoad = function(e) {
                            return _this.uploadComplete(e, selectedFiles[i], custom), {};
                        }, ajax.onUploadProgress = function(e) {
                            return _this.uploadInProgress(e, selectedFiles[i], custom, ajax), {};
                        }, ajax.onError = function(e) {
                            return _this.uploadFailed(e, selectedFiles[i]), {};
                        }, ajax.send(formData));
                    }
                }, this_3 = this, i = 0; i < selectedFiles.length; i++) _loop_4(i);
            }
        }, Uploader.prototype.remove = function(fileData, customTemplate, removeDirectly, args) {
            var eventArgs = {
                event: args,
                cancel: !1,
                filesData: [],
                customFormData: [],
                postRawFile: !0
            };
            if (this.isForm) return eventArgs.filesData = this.getFilesData(), this.trigger("removing", eventArgs), 
            void (eventArgs.cancel || this.clearAll());
            var removeFiles = [];
            (fileData = isNullOrUndefined(fileData) ? this.filesData : fileData) instanceof Array ? removeFiles = fileData : removeFiles.push(fileData), 
            eventArgs.filesData = removeFiles;
            for (var removeUrl = this.asyncSettings.removeUrl, validUrl = "" !== removeUrl && !isNullOrUndefined(removeUrl), _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++) {
                var files = removeFiles_1[_i];
                if ("2" !== files.statusCode && "4" !== files.statusCode || !validUrl) {
                    if (removeDirectly || this.trigger("removing", eventArgs), eventArgs.cancel) return;
                    this.removeFilesData(files, customTemplate);
                } else this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);
            }
        }, Uploader.prototype.clearAll = function() {
            if (isNullOrUndefined(this.listParent)) return "msie" !== Browser.info.name && (this.element.value = ""), 
            void (this.filesData = []);
            var eventArgs = {
                cancel: !1,
                filesData: this.filesData
            };
            this.trigger("clearing", eventArgs), eventArgs.cancel || this.clearData();
        }, Uploader.prototype.getFilesData = function() {
            return this.filesData;
        }, Uploader.prototype.pause = function(fileData, custom) {
            var fileDataFiles = this.validateFileType(fileData);
            this.pauseUploading(fileDataFiles, custom);
        }, Uploader.prototype.pauseUploading = function(fileData, custom) {
            for (var files = this.getFiles(fileData), i = 0; i < files.length; i++) "3" === files[i].statusCode && this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }, Uploader.prototype.getFiles = function(fileData) {
            var files = [];
            return isNullOrUndefined(fileData) || fileData instanceof Array ? files = fileData : files.push(fileData), 
            files;
        }, Uploader.prototype.resume = function(fileData, custom) {
            var fileDataFiles = this.validateFileType(fileData);
            this.resumeFiles(fileDataFiles, custom);
        }, Uploader.prototype.resumeFiles = function(fileData, custom) {
            for (var files = this.getFiles(fileData), i = 0; i < files.length; i++) "4" === files[i].statusCode && this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }, Uploader.prototype.retry = function(fileData, fromcanceledStage, custom) {
            var fileDataFiles = this.validateFileType(fileData);
            this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);
        }, Uploader.prototype.retryFailedFiles = function(fileData, fromcanceledStage, custom) {
            for (var files = this.getFiles(fileData), i = 0; i < files.length; i++) if ("5" === files[i].statusCode || "0" === files[i].statusCode) if (this.asyncSettings.chunkSize > 0) this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage); else {
                var liElement = void 0;
                custom || (liElement = this.fileList[this.filesData.indexOf(files[i])]), this.reloadcanceledFile(null, files[i], liElement, custom);
            }
        }, Uploader.prototype.cancel = function(fileData) {
            var cancelingFiles = this.validateFileType(fileData);
            this.cancelUpload(cancelingFiles);
        }, Uploader.prototype.cancelUpload = function(fileData) {
            var files = this.getFiles(fileData);
            if (this.asyncSettings.chunkSize > 0) {
                for (var i = 0; i < files.length; i++) if ("3" === files[i].statusCode) {
                    var metaData = this.getCurrentMetaData(files[i], null);
                    metaData.file.statusCode = "5", metaData.file.status = this.localizedTexts("fileUploadCancel"), 
                    this.updateMetaData(metaData), this.showHideUploadSpinner(files[i]);
                }
            } else for (i = 0; i < files.length; i++) "3" === files[i].statusCode && (files[i].statusCode = "5", 
            files[i].status = this.localizedTexts("fileUploadCancel"), this.showHideUploadSpinner(files[i]));
        }, Uploader.prototype.showHideUploadSpinner = function(files) {
            var liElement = this.getLiElement(files);
            if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {
                var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
                createSpinner({
                    target: spinnerTarget,
                    width: "20px"
                }), showSpinner(spinnerTarget);
            }
        }, __decorate$18([ Complex({
            saveUrl: "",
            removeUrl: ""
        }, AsyncSettings) ], Uploader.prototype, "asyncSettings", void 0), __decorate$18([ Property(!1) ], Uploader.prototype, "enableRtl", void 0), 
        __decorate$18([ Property(!0) ], Uploader.prototype, "enabled", void 0), __decorate$18([ Property(null) ], Uploader.prototype, "template", void 0), 
        __decorate$18([ Property(!0) ], Uploader.prototype, "multiple", void 0), __decorate$18([ Property(!0) ], Uploader.prototype, "autoUpload", void 0), 
        __decorate$18([ Complex({}, ButtonsProps) ], Uploader.prototype, "buttons", void 0), 
        __decorate$18([ Property("") ], Uploader.prototype, "allowedExtensions", void 0), 
        __decorate$18([ Property(0) ], Uploader.prototype, "minFileSize", void 0), __decorate$18([ Property(3e7) ], Uploader.prototype, "maxFileSize", void 0), 
        __decorate$18([ Property(null) ], Uploader.prototype, "dropArea", void 0), __decorate$18([ Collection([ {} ], FilesProp) ], Uploader.prototype, "files", void 0), 
        __decorate$18([ Property(!0) ], Uploader.prototype, "showFileList", void 0), __decorate$18([ Property(!1) ], Uploader.prototype, "directoryUpload", void 0), 
        __decorate$18([ Event() ], Uploader.prototype, "created", void 0), __decorate$18([ Event() ], Uploader.prototype, "selected", void 0), 
        __decorate$18([ Event() ], Uploader.prototype, "uploading", void 0), __decorate$18([ Event() ], Uploader.prototype, "success", void 0), 
        __decorate$18([ Event() ], Uploader.prototype, "failure", void 0), __decorate$18([ Event() ], Uploader.prototype, "removing", void 0), 
        __decorate$18([ Event() ], Uploader.prototype, "clearing", void 0), __decorate$18([ Event() ], Uploader.prototype, "progress", void 0), 
        __decorate$18([ Event() ], Uploader.prototype, "change", void 0), __decorate$18([ Event() ], Uploader.prototype, "chunkSuccess", void 0), 
        __decorate$18([ Event() ], Uploader.prototype, "chunkFailure", void 0), __decorate$18([ Event() ], Uploader.prototype, "canceling", void 0), 
        __decorate$18([ Event() ], Uploader.prototype, "pausing", void 0), __decorate$18([ Event() ], Uploader.prototype, "resuming", void 0), 
        Uploader = __decorate$18([ NotifyPropertyChanges ], Uploader);
    }(Component), __extends$21 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$20 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, Item = function(_super) {
        function Item() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$21(Item, _super), __decorate$20([ Property("") ], Item.prototype, "iconCss", void 0), 
        __decorate$20([ Property("") ], Item.prototype, "id", void 0), __decorate$20([ Property(!1) ], Item.prototype, "separator", void 0), 
        __decorate$20([ Property("") ], Item.prototype, "text", void 0), __decorate$20([ Property("") ], Item.prototype, "url", void 0), 
        Item;
    }(ChildProperty), __extends$22 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$21 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, classNames$__DISABLED = "e-disabled", classNames$__FOCUS = "e-focused", classNames$__ICON = "e-menu-icon", classNames$__ITEM = "e-item", classNames$__POPUP = "e-dropdown-popup", classNames$__RTL = "e-rtl", classNames$__SEPARATOR = "e-separator", classNames$__VERTICAL = "e-vertical", DropDownButton = function(_super) {
        function DropDownButton(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$22(DropDownButton, _super), DropDownButton.prototype.preRender = function() {}, 
        DropDownButton.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, DropDownButton.prototype.toggle = function() {
            this.canOpen() ? this.openPopUp() : this.closePopup();
        }, DropDownButton.prototype.render = function() {
            this.initialize(), this.disabled || this.wireEvents();
        }, DropDownButton.prototype.createPopup = function() {
            var _a, div = this.createElement("div", {
                className: classNames$__POPUP,
                id: this.element.id + "-popup"
            });
            document.body.appendChild(div), this.dropDown = new Popup(div, {
                relateTo: this.element,
                collision: {
                    X: "fit",
                    Y: "flip"
                },
                position: {
                    X: "left",
                    Y: "bottom"
                },
                targetType: "relative",
                content: this.target ? this.getTargetElement() : "",
                enableRtl: this.enableRtl
            }), "fixed" === this.dropDown.element.style.position && this.dropDown.refreshPosition(this.element), 
            this.dropDown.hide(), attributes(this.element, (_a = {}, _a.role = "menu", _a["aria-haspopup"] = this.items.length || this.target ? "true" : "false", 
            _a["aria-expanded"] = "false", _a["aria-owns"] = this.getPopUpElement().id, _a.type = "button", 
            _a)), this.cssClass && addClass([ div ], this.cssClass.split(" "));
        }, DropDownButton.prototype.getTargetElement = function() {
            return "string" == typeof this.target ? select(this.target) : this.target;
        }, DropDownButton.prototype.createItems = function(items) {
            for (var span, item, li, eventArgs, showIcon = this.hasIcon(items, "iconCss"), ul = this.createElement("ul", {
                attrs: {
                    tabindex: "0"
                }
            }), i = 0; i < items.length; i++) item = items[i], li = this.createElement("li", {
                innerHTML: item.url ? "" : item.text,
                className: item.separator ? classNames$__ITEM + " " + classNames$__SEPARATOR : classNames$__ITEM,
                attrs: {
                    role: "menuItem",
                    tabindex: "-1"
                },
                id: item.id ? item.id : getUniqueID("e-" + this.getModuleName() + "-item")
            }), item.iconCss ? (span = this.createElement("span", {
                className: classNames$__ICON + " " + item.iconCss
            }), li.insertBefore(span, li.childNodes[0])) : showIcon && !item.separator && li.classList.add("e-blank-icon"), 
            item.url && li.appendChild(this.createAnchor(item)), eventArgs = {
                item: item,
                element: li
            }, this.trigger("beforeItemRender", eventArgs), ul.appendChild(li);
            return ul;
        }, DropDownButton.prototype.hasIcon = function(items, field) {
            for (var i = 0, len = items.length; i < len; i++) if (items[i][field]) return !0;
            return !1;
        }, DropDownButton.prototype.createAnchor = function(item) {
            return this.createElement("a", {
                className: "e-menu-text e-menu-url",
                innerHTML: item.text,
                attrs: {
                    href: item.url
                }
            });
        }, DropDownButton.prototype.initialize = function() {
            this.button = new Button({
                iconCss: this.iconCss,
                iconPosition: this.iconPosition,
                cssClass: this.cssClass,
                content: this.content,
                disabled: this.disabled,
                enableRtl: this.enableRtl,
                enablePersistence: this.enablePersistence
            }), this.button.createElement = this.createElement, this.button.appendTo(this.element), 
            this.element.id || (this.element.id = getUniqueID("e-" + this.getModuleName())), 
            this.appendArrowSpan(), this.createPopup(), this.setActiveElem([ this.element ]);
        }, DropDownButton.prototype.appendArrowSpan = function() {
            this.element.appendChild(this.createElement("span", {
                className: "e-btn-icon e-icons e-icon-" + (this.cssClass.indexOf(classNames$__VERTICAL) > -1 ? "bottom" : "right") + " e-caret"
            }));
        }, DropDownButton.prototype.setActiveElem = function(elem) {
            this.activeElem = elem;
        }, DropDownButton.prototype.getModuleName = function() {
            return "dropdown-btn";
        }, DropDownButton.prototype.canOpen = function() {
            return this.getPopUpElement().classList.contains("e-popup-close");
        }, DropDownButton.prototype.destroy = function() {
            var _this = this;
            if (_super.prototype.destroy.call(this), "dropdown-btn" === this.getModuleName()) {
                var classList_1;
                this.element.querySelector("span.e-caret") && detach(this.element.querySelector("span.e-caret")), 
                this.cssClass && (classList_1 = this.cssClass.split(" ")), this.button.destroy(), 
                classList_1 && removeClass([ this.element ], classList_1), removeClass(this.activeElem, [ "e-active" ]), 
                (this.element.getAttribute("class") ? [ "role", "aria-haspopup", "aria-expanded", "aria-owns", "type" ] : [ "role", "aria-haspopup", "aria-expanded", "aria-owns", "type", "class" ]).forEach(function(key) {
                    _this.element.removeAttribute(key);
                }), this.dropDown.destroy();
                var popupEle = document.getElementById(this.getPopUpElement().id);
                popupEle && (removeClass([ popupEle ], [ "e-popup-open", "e-popup-close" ]), detach(popupEle)), 
                this.disabled || this.unWireEvents();
            }
        }, DropDownButton.prototype.getPopUpElement = function() {
            return this.dropDown.element;
        }, DropDownButton.prototype.getULElement = function() {
            return this.getPopUpElement().children[0];
        }, DropDownButton.prototype.wireEvents = function() {
            var popupElement = this.getPopUpElement();
            this.delegateMousedownHandler = this.mousedownHandler.bind(this), EventHandler.add(document, "mousedown touchstart", this.delegateMousedownHandler, this), 
            EventHandler.add(this.element, "click", this.clickHandler, this), EventHandler.add(popupElement, "click", this.clickHandler, this), 
            EventHandler.add(this.element, "keydown", this.keyBoardHandler, this), EventHandler.add(popupElement, "keydown", this.keyBoardHandler, this), 
            this.rippleFn = rippleEffect(popupElement, {
                selector: "." + classNames$__ITEM
            });
        }, DropDownButton.prototype.keyBoardHandler = function(e) {
            if (e.target !== this.element || 9 !== e.keyCode && (e.altKey || 40 !== e.keyCode) && 38 !== e.keyCode) switch (e.keyCode) {
              case 38:
              case 40:
                !e.altKey || 38 !== e.keyCode && 40 !== e.keyCode ? this.upDownKeyHandler(e) : this.keyEventHandler(e);
                break;

              case 9:
              case 13:
              case 27:
              case 32:
                this.keyEventHandler(e);
            }
        }, DropDownButton.prototype.upDownKeyHandler = function(e) {
            if (!this.target || 38 !== e.keyCode && 40 !== e.keyCode) {
                e.preventDefault();
                var ul = this.getULElement(), defaultIdx = 40 === e.keyCode ? 0 : ul.childElementCount - 1, liIdx = defaultIdx, li = null;
                this.removeCustomSelection();
                for (var i = 0, len = ul.children.length; i < len; i++) ul.children[i].classList.contains(classNames$__FOCUS) && (liIdx = i, 
                (li = ul.children[i]).classList.remove(classNames$__FOCUS), 40 === e.keyCode ? liIdx++ : liIdx--, 
                liIdx === (40 === e.keyCode ? ul.childElementCount : -1) && (liIdx = defaultIdx));
                li = ul.children[liIdx], -1 !== (liIdx = this.isValidLI(li, liIdx, e.keyCode)) && (addClass([ ul.children[liIdx] ], classNames$__FOCUS), 
                ul.children[liIdx].focus());
            }
        }, DropDownButton.prototype.removeCustomSelection = function() {
            var selectedLi = this.getULElement().querySelector(".e-selected");
            selectedLi && selectedLi.classList.remove("e-selected");
        }, DropDownButton.prototype.isValidLI = function(li, index, keyCode, count) {
            if (void 0 === count && (count = 0), (li.classList.contains(classNames$__SEPARATOR) || li.classList.contains(classNames$__DISABLED)) && (index === (40 === keyCode ? this.items.length - 1 : 0) ? index = 40 === keyCode ? 0 : this.items.length - 1 : 40 === keyCode ? index++ : index--), 
            (li = this.getULElement().children[index]).classList.contains(classNames$__SEPARATOR) || li.classList.contains(classNames$__DISABLED)) {
                if (++count === this.items.length) return index = -1;
                index = this.isValidLI(li, index, keyCode, count);
            }
            return index;
        }, DropDownButton.prototype.keyEventHandler = function(e) {
            (!this.target || 13 !== e.keyCode && 9 !== e.keyCode) && (9 !== e.keyCode && e.preventDefault(), 
            27 === e.keyCode || 38 === e.keyCode || 9 === e.keyCode ? this.canOpen() || this.closePopup(e, this.element) : this.clickHandler(e));
        }, DropDownButton.prototype.getLI = function(elem) {
            return "LI" === elem.tagName ? elem : closest(elem, "li");
        }, DropDownButton.prototype.mousedownHandler = function(e) {
            var trgt = e.target;
            this.canOpen() || closest(trgt, "#" + this.getPopUpElement().id) || closest(trgt, "#" + this.element.id) || this.closePopup(e);
        }, DropDownButton.prototype.clickHandler = function(e) {
            var trgt = e.target, canOpen = this.canOpen();
            if (closest(trgt, "#" + this.element.id)) canOpen ? this.openPopUp(e) : this.closePopup(e, this.activeElem[0]); else if (closest(trgt, "#" + this.getPopUpElement().id)) {
                var eventArgs = void 0, liIdx = void 0, item = void 0, li = this.getLI(trgt);
                li && (liIdx = Array.prototype.indexOf.call(this.getULElement().children, li), (item = this.items[liIdx]) && (eventArgs = {
                    element: li,
                    item: item
                }, this.trigger("select", eventArgs)), this.closePopup(e, this.activeElem[0]));
            }
        }, DropDownButton.prototype.openPopUp = function(e) {
            void 0 === e && (e = null), this.target || this.getPopUpElement().appendChild(this.createItems(this.items));
            var ul = this.getULElement(), beforeOpenArgs = {
                element: ul,
                items: this.items,
                event: e,
                cancel: !1
            };
            if (this.trigger("beforeOpen", beforeOpenArgs), !beforeOpenArgs.cancel) {
                this.dropDown.show(null, this.element), addClass([ this.element ], "e-active"), 
                this.element.setAttribute("aria-expanded", "true"), ul.focus();
                var openArgs = {
                    element: ul,
                    items: this.items
                };
                this.trigger("open", openArgs);
            }
        }, DropDownButton.prototype.closePopup = function(e, focusEle) {
            void 0 === e && (e = null);
            var ul = this.getULElement(), beforeCloseArgs = {
                element: ul,
                items: this.items,
                event: e,
                cancel: !1
            };
            if (this.trigger("beforeClose", beforeCloseArgs), !beforeCloseArgs.cancel) {
                this.removeCustomSelection(), this.dropDown.hide(), removeClass(this.activeElem, "e-active"), 
                this.element.setAttribute("aria-expanded", "false"), focusEle && focusEle.focus();
                var closeArgs = {
                    element: ul,
                    items: this.items
                };
                this.trigger("close", closeArgs), !this.target && ul && detach(ul);
            }
        }, DropDownButton.prototype.unWireEvents = function() {
            EventHandler.remove(document, "mousedown touchstart", this.delegateMousedownHandler), 
            EventHandler.remove(this.element, "click", this.clickHandler), EventHandler.remove(this.getPopUpElement(), "click", this.clickHandler), 
            EventHandler.remove(this.element, "keydown", this.keyBoardHandler), EventHandler.remove(this.getPopUpElement(), "keydown", this.keyBoardHandler), 
            this.rippleFn();
        }, DropDownButton.prototype.onPropertyChanged = function(newProp, oldProp) {
            this.button.setProperties(getModel(newProp, [ "content", "cssClass", "iconCss", "iconPosition", "disabled", "enableRtl" ]));
            for (var popupElement = this.getPopUpElement(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "content":
                    this.element.querySelector("span.e-caret") || this.appendArrowSpan();
                    break;

                  case "disabled":
                    newProp.disabled ? (this.unWireEvents(), this.canOpen() || this.closePopup()) : this.wireEvents();
                    break;

                  case "cssClass":
                    if (newProp.cssClass.indexOf(classNames$__VERTICAL) > -1) {
                        classList(this.element.querySelector("span.e-caret"), [ "e-icon-bottom" ], [ "e-icon-right" ]);
                    }
                    oldProp.cssClass && removeClass([ popupElement ], oldProp.cssClass.split(" ")), 
                    newProp.cssClass && addClass([ popupElement ], newProp.cssClass.split(" "));
                    break;

                  case "enableRtl":
                    popupElement.classList.toggle(classNames$__RTL);
                    break;

                  case "target":
                    this.target = newProp.target, detach(this.getULElement()), popupElement.appendChild(this.getTargetElement()), 
                    this.dropDown.content = this.getTargetElement();
                    break;

                  case "items":
                    this.dropDown.refresh(), popupElement.classList.contains("e-popup-open") && classList(popupElement, [ "e-popup-close" ], [ "e-popup-open" ]);
                }
            }
        }, __decorate$21([ Property("") ], DropDownButton.prototype, "content", void 0), 
        __decorate$21([ Property("") ], DropDownButton.prototype, "cssClass", void 0), __decorate$21([ Property(!1) ], DropDownButton.prototype, "disabled", void 0), 
        __decorate$21([ Property("") ], DropDownButton.prototype, "iconCss", void 0), __decorate$21([ Property("Left") ], DropDownButton.prototype, "iconPosition", void 0), 
        __decorate$21([ Collection([], Item) ], DropDownButton.prototype, "items", void 0), 
        __decorate$21([ Property("") ], DropDownButton.prototype, "target", void 0), __decorate$21([ Event() ], DropDownButton.prototype, "beforeItemRender", void 0), 
        __decorate$21([ Event() ], DropDownButton.prototype, "beforeOpen", void 0), __decorate$21([ Event() ], DropDownButton.prototype, "beforeClose", void 0), 
        __decorate$21([ Event() ], DropDownButton.prototype, "close", void 0), __decorate$21([ Event() ], DropDownButton.prototype, "open", void 0), 
        __decorate$21([ Event() ], DropDownButton.prototype, "select", void 0), __decorate$21([ Event() ], DropDownButton.prototype, "created", void 0), 
        DropDownButton = __decorate$21([ NotifyPropertyChanges ], DropDownButton);
    }(Component), __extends$23 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$22 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, TAGNAME = "EJS-SPLITBUTTON", SplitButton = function(_super) {
        function SplitButton(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$23(SplitButton, _super), SplitButton.prototype.preRender = function() {
            var ele = this.element;
            if (ele.tagName === TAGNAME) {
                for (var ejInstance = getValue("ej2_instances", ele), btn = this.createElement("button", {
                    attrs: {
                        type: "button"
                    }
                }), wrapper = this.createElement(TAGNAME, {
                    className: "e-" + this.getModuleName() + "-wrapper"
                }), idx = 0, len = ele.attributes.length; idx < len; idx++) btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
                ele.parentNode.insertBefore(wrapper, ele), detach(ele), ele = btn, wrapper.appendChild(ele), 
                setValue("ej2_instances", ejInstance, ele), this.wrapper = wrapper, this.element = ele;
            }
            this.element.id || (this.element.id = getUniqueID("e-" + this.getModuleName()));
        }, SplitButton.prototype.render = function() {
            this.initWrapper(), this.createPrimaryButton(), this.createSecondaryButton(), this.setActiveElem([ this.element, this.secondaryBtnObj.element ]), 
            this.setAria(), this.wireEvents();
        }, SplitButton.prototype.initWrapper = function() {
            this.wrapper || (this.wrapper = this.createElement("div", {
                className: "e-" + this.getModuleName() + "-wrapper"
            }), this.element.parentNode.insertBefore(this.wrapper, this.element)), this.element.classList.remove("e-" + this.getModuleName()), 
            this.enableRtl && this.wrapper.classList.add("e-rtl"), this.cssClass && addClass([ this.wrapper ], this.cssClass.split(" "));
        }, SplitButton.prototype.createPrimaryButton = function() {
            var btnModel = {
                cssClass: this.cssClass,
                enableRtl: this.enableRtl,
                iconCss: this.iconCss,
                iconPosition: this.iconPosition,
                content: this.content,
                disabled: this.disabled
            };
            this.primaryBtnObj = new Button(btnModel), this.primaryBtnObj.createElement = this.createElement, 
            this.primaryBtnObj.appendTo(this.element), this.element.classList.add("e-" + this.getModuleName()), 
            this.element.type = "button", this.wrapper.appendChild(this.element);
        }, SplitButton.prototype.createSecondaryButton = function() {
            var _this = this, btnElem = this.createElement("button", {
                className: "e-icon-btn",
                attrs: {
                    tabindex: "-1"
                },
                id: this.element.id + "_dropdownbtn"
            });
            this.wrapper.appendChild(btnElem);
            var dropDownBtnModel = {
                cssClass: this.cssClass,
                disabled: this.disabled,
                enableRtl: this.enableRtl,
                items: this.items,
                target: this.target,
                beforeItemRender: function(args) {
                    _this.trigger("beforeItemRender", args);
                },
                beforeOpen: function(args) {
                    _this.trigger("beforeOpen", args);
                },
                beforeClose: function(args) {
                    _this.trigger("beforeClose", args);
                },
                open: function(args) {
                    _this.trigger("open", args);
                },
                close: function(args) {
                    _this.trigger("close", args);
                },
                select: function(args) {
                    _this.trigger("select", args);
                }
            };
            this.secondaryBtnObj = new DropDownButton(dropDownBtnModel), this.secondaryBtnObj.createElement = this.createElement, 
            this.secondaryBtnObj.appendTo(btnElem), this.secondaryBtnObj.dropDown.relateTo = this.wrapper, 
            this.dropDown = this.secondaryBtnObj.dropDown, this.secondaryBtnObj.activeElem = [ this.element, this.secondaryBtnObj.element ], 
            EventHandler.remove(this.getPopUpElement(), "keydown", this.secondaryBtnObj.keyBoardHandler), 
            this.secondaryBtnObj.element.querySelector(".e-btn-icon").classList.remove("e-icon-right");
        }, SplitButton.prototype.setAria = function() {
            attributes(this.element, {
                role: "listbox",
                "aria-expanded": "false",
                "aria-haspopup": "true",
                "aria-label": this.element.textContent + " splitbutton",
                "aria-owns": this.secondaryBtnObj.dropDown.element.id
            });
        }, SplitButton.prototype.getModuleName = function() {
            return "split-btn";
        }, SplitButton.prototype.toggle = function() {
            this.secondaryBtnObj.toggle();
        }, SplitButton.prototype.destroy = function() {
            var _this = this, classList = [ "e-rtl" ], element = document.getElementById(this.element.id);
            this.cssClass && (classList = classList.concat(this.cssClass.split(" "))), element && element.parentElement === this.wrapper && (this.wrapper.tagName === TAGNAME ? (this.wrapper.innerHTML = "", 
            removeClass([ this.wrapper ], [ "e-rtl", "e-" + this.getModuleName() + "-wrapper" ]), 
            removeClass([ this.wrapper ], this.cssClass.split(" "))) : (removeClass([ this.element ], classList), 
            [ "role", "aria-label", "aria-haspopup", "aria-expanded", "aria-owns", "type" ].forEach(function(key) {
                _this.element.removeAttribute(key);
            }), this.wrapper.parentNode.insertBefore(this.element, this.wrapper), remove(this.wrapper)), 
            this.unWireEvents()), this.primaryBtnObj.destroy(), this.secondaryBtnObj.destroy(), 
            _super.prototype.destroy.call(this), this.element.getAttribute("class") || this.element.removeAttribute("class");
        }, SplitButton.prototype.wireEvents = function() {
            EventHandler.add(this.element, "click", this.primaryBtnClickHandler, this), EventHandler.add(this.getPopUpElement(), "keydown", this.keyBoardHandler, this), 
            new KeyboardEvents(this.element, {
                keyAction: this.btnKeyBoardHandler.bind(this),
                keyConfigs: {
                    altdownarrow: "alt+downarrow"
                }
            });
        }, SplitButton.prototype.unWireEvents = function() {
            EventHandler.remove(this.element, "click", this.primaryBtnClickHandler), getInstance(this.element, KeyboardEvents).destroy();
        }, SplitButton.prototype.primaryBtnClickHandler = function() {
            this.trigger("click", {
                element: this.element
            });
        }, SplitButton.prototype.btnKeyBoardHandler = function(e) {
            switch (e.action) {
              case "altdownarrow":
                this.clickHandler(e);
            }
        }, SplitButton.prototype.onPropertyChanged = function(newProp, oldProp) {
            var model = [ "content", "iconCss", "iconPosition", "cssClass", "disabled", "enableRtl" ];
            this.primaryBtnObj.setProperties(getModel(newProp, model)), model = [ "items", "beforeOpen", "beforeItemRender", "select", "open", "close", "cssClass", "disabled", "enableRtl" ], 
            this.secondaryBtnObj.setProperties(getModel(newProp, model));
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "cssClass":
                    oldProp.cssClass && removeClass([ this.wrapper ], oldProp.cssClass.split(" ")), 
                    addClass([ this.wrapper ], newProp.cssClass.split(" "));
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? addClass([ this.wrapper ], "e-rtl") : removeClass([ this.wrapper ], "e-rtl");
                }
            }
        }, __decorate$22([ Property("") ], SplitButton.prototype, "content", void 0), __decorate$22([ Property("") ], SplitButton.prototype, "cssClass", void 0), 
        __decorate$22([ Property(!1) ], SplitButton.prototype, "disabled", void 0), __decorate$22([ Property("") ], SplitButton.prototype, "iconCss", void 0), 
        __decorate$22([ Property("Left") ], SplitButton.prototype, "iconPosition", void 0), 
        __decorate$22([ Collection([], Item) ], SplitButton.prototype, "items", void 0), 
        __decorate$22([ Property("") ], SplitButton.prototype, "target", void 0), __decorate$22([ Event() ], SplitButton.prototype, "beforeItemRender", void 0), 
        __decorate$22([ Event() ], SplitButton.prototype, "beforeOpen", void 0), __decorate$22([ Event() ], SplitButton.prototype, "beforeClose", void 0), 
        __decorate$22([ Event() ], SplitButton.prototype, "click", void 0), __decorate$22([ Event() ], SplitButton.prototype, "close", void 0), 
        __decorate$22([ Event() ], SplitButton.prototype, "open", void 0), __decorate$22([ Event() ], SplitButton.prototype, "select", void 0), 
        __decorate$22([ Event() ], SplitButton.prototype, "created", void 0), SplitButton = __decorate$22([ NotifyPropertyChanges ], SplitButton);
    }(DropDownButton), __extends$24 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$23 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, CONTENTCLS = "e-btn-content", ProgressButton = function(_super) {
        function ProgressButton(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.step = 1, _this;
        }
        return __extends$24(ProgressButton, _super), ProgressButton.prototype.preRender = function() {
            _super.prototype.preRender.call(this);
        }, ProgressButton.prototype.render = function() {
            _super.prototype.render.call(this), this.init(), this.wireEvents(), this.setAria();
        }, ProgressButton.prototype.start = function(percent) {
            this.isPaused = !1, this.startProgress(percent || this.percent, this.progressTime);
        }, ProgressButton.prototype.stop = function() {
            this.isPaused = !0, cancelAnimationFrame(this.timerId);
        }, ProgressButton.prototype.getModuleName = function() {
            return "progress-btn";
        }, ProgressButton.prototype.destroy = function() {
            var _this = this, classList = [ "e-hide-spinner", "e-progress-active", "e-round-corner", "e-" + _super.prototype.getModuleName.call(this), "e-spin-" + this.spinSettings.position.toLowerCase() ];
            _super.prototype.destroy.call(this), this.unWireEvents(), this.element.innerHTML = "", 
            this.cssClass && (classList = classList.concat(this.cssClass.split(" "))), removeClass([ this.element ], classList), 
            (this.element.getAttribute("class") ? [ "aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow" ] : [ "aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow", "class" ]).forEach(function(key) {
                _this.element.removeAttribute(key);
            }), this.disabled && this.element.removeAttribute("disabled");
        }, ProgressButton.prototype.init = function() {
            this.element.classList.add("e-" + _super.prototype.getModuleName.call(this)), this.setContent(), 
            this.createSpinner(), this.enableProgress && this.createProgress();
        }, ProgressButton.prototype.createSpinner = function() {
            var spinner = this.createElement("span", {
                className: "e-spinner"
            });
            this.setSpinPosition(spinner), createSpinner({
                target: spinner,
                width: this.spinSettings.width || 16,
                template: this.spinSettings.template
            }, this.createElement);
        }, ProgressButton.prototype.setSpinPosition = function(ele) {
            var position = this.spinSettings.position || "Left";
            "Left" === position || "Top" === position ? this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]) : this.element.appendChild(ele), 
            this.element.classList.add("e-spin-" + position.toLowerCase());
        }, ProgressButton.prototype.createProgress = function() {
            this.element.appendChild(this.createElement("span", {
                className: "e-progress"
            }));
        }, ProgressButton.prototype.setContent = function() {
            var cont = this.element.innerHTML;
            this.element.innerHTML = "", this.element.appendChild(this.createElement("span", {
                className: CONTENTCLS,
                innerHTML: cont
            }));
        }, ProgressButton.prototype.clickHandler = function() {
            this.element.classList.contains("e-progress-active") || this.startProgress();
        }, ProgressButton.prototype.startProgress = function(percent, progressTime) {
            var _this = this, clsList = this.element.classList, isVertical = clsList.contains("e-vertical");
            clsList.add("e-progress-active"), clsList.contains("e-hide-spinner") || (showSpinner(this.element), 
            this.enableProgress || setTimeout(function() {
                _this.hideSpin();
            }, this.duration)), this.enableProgress && this.startAnimate(Date.now(), progressTime || 0, progressTime ? Date.now() - 1 * this.duration / 100 : Date.now(), percent || 0, 0, this.step, 0, isVertical), 
            this.startContAnimate();
        }, ProgressButton.prototype.startAnimate = function(timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {
            var _this = this;
            try {
                var args_1, timeDiff = timestamp - prevTime, stepTime = this.duration * step / 100, timeDiffBuffer = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;
                this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer, prevTime = timestamp - timeDiffBuffer, 
                percent += (timeDiff - timeDiffBuffer) / this.duration * 100, args_1 = {
                    percent: prevPercent = (progressTime - prevProgressTime) % stepTime == 0 || 100 === percent ? percent : prevPercent,
                    currentDuration: progressTime,
                    step: step
                }, 0 === percent ? this.trigger("begin", args_1) : 100 === percent || progressTime === this.duration ? this.trigger("end", args_1) : this.trigger("progress", args_1), 
                percent !== args_1.percent && args_1.percent !== prevPercent && (percent = args_1.percent), 
                this.percent = percent, this.step = args_1.step, (progressTime - prevProgressTime) % (this.duration * args_1.step / 100) != 0 && 100 !== percent || (this.timerId = requestAnimationFrame(function() {
                    _this.element.getElementsByClassName("e-progress")[0].style[isVertical ? "height" : "width"] = percent + "%", 
                    _this.element.setAttribute("aria-valuenow", percent.toString());
                }), prevPercent = percent, prevProgressTime = progressTime), this.isPaused || (progressTime < this.duration && percent < 100 ? setTimeout(function() {
                    _this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args_1.step, prevProgressTime, isVertical);
                }, this.duration / 100 - timeDiffBuffer) : setTimeout(function() {
                    _this.progressTime = _this.percent = 0, _this.element.getElementsByClassName("e-progress")[0].style[isVertical ? "height" : "width"] = "0%", 
                    _this.element.setAttribute("aria-valuenow", "0"), _this.hideSpin();
                }, 100));
            } catch (e) {
                cancelAnimationFrame(this.timerId), this.trigger("fail", e);
            }
        }, ProgressButton.prototype.startContAnimate = function() {
            var _this = this, ele = this.element.getElementsByClassName(CONTENTCLS)[0];
            "None" !== this.animationSettings.effect ? new Animation({}).animate(ele, {
                duration: this.animationSettings.duration,
                name: "Progress" + this.animationSettings.effect,
                timingFunction: this.animationSettings.easing,
                begin: function() {
                    "Center" === _this.spinSettings.position && _this.setSpinnerSize();
                },
                end: function() {
                    ele.classList.add("e-animate-end");
                }
            }) : "Center" === this.spinSettings.position && this.setSpinnerSize();
        }, ProgressButton.prototype.setSpinnerSize = function() {
            var ele = this.element.getElementsByClassName(CONTENTCLS)[0], spinner = this.element.getElementsByClassName("e-spinner")[0];
            spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + "px", spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + "px", 
            ele.classList.add("e-cont-animate");
        }, ProgressButton.prototype.hideSpin = function() {
            var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
            if (this.element.classList.contains("e-hide-spinner") || hideSpinner(this.element), 
            this.element.classList.remove("e-progress-active"), "None" !== this.animationSettings.effect && cont.classList.remove("e-animate-end"), 
            "Center" === this.spinSettings.position) {
                var ele = this.element.getElementsByClassName("e-spinner")[0];
                cont.classList.remove("e-cont-animate"), ele.style.width = "auto", ele.style.height = "auto";
            }
        }, ProgressButton.prototype.setIconSpan = function() {
            var cont = this.element.getElementsByClassName(CONTENTCLS)[0], iconSpan = this.element.getElementsByClassName("e-btn-icon")[0];
            !cont.childNodes[0] || "Left" !== this.iconPosition && "Top" !== this.iconPosition ? cont.appendChild(iconSpan) : cont.insertBefore(iconSpan, cont.childNodes[0]);
        }, ProgressButton.prototype.setAria = function() {
            attributes(this.element, {
                "aria-label": this.element.textContent + " progress",
                "aria-valuemin": "0",
                "aria-valuemax": "100",
                "aria-valuenow": "0"
            });
        }, ProgressButton.prototype.wireEvents = function() {
            EventHandler.add(this.element, "click", this.clickHandler, this);
        }, ProgressButton.prototype.unWireEvents = function() {
            EventHandler.remove(this.element, "click", this.clickHandler);
        }, ProgressButton.prototype.onPropertyChanged = function(newProp, oldProp) {
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "content":
                    this.setContent(), this.createSpinner(), this.enableProgress && this.createProgress(), 
                    this.element.setAttribute("aria-label", this.element.textContent + " progress");
                    break;

                  case "iconCss":
                    oldProp.iconCss || this.setIconSpan();
                    break;

                  case "iconPosition":
                    this.setIconSpan();
                    break;

                  case "enableProgress":
                    newProp.enableProgress ? this.createProgress() : remove(this.element.getElementsByClassName("e-progress")[0]);
                }
            }
        }, __decorate$23([ Property(!1) ], ProgressButton.prototype, "enableProgress", void 0), 
        __decorate$23([ Property(2e3) ], ProgressButton.prototype, "duration", void 0), 
        __decorate$23([ Property("Left") ], ProgressButton.prototype, "iconPosition", void 0), 
        __decorate$23([ Property("") ], ProgressButton.prototype, "iconCss", void 0), __decorate$23([ Property(!1) ], ProgressButton.prototype, "disabled", void 0), 
        __decorate$23([ Property(!1) ], ProgressButton.prototype, "isPrimary", void 0), 
        __decorate$23([ Property("") ], ProgressButton.prototype, "cssClass", void 0), __decorate$23([ Property("") ], ProgressButton.prototype, "content", void 0), 
        __decorate$23([ Property(!1) ], ProgressButton.prototype, "isToggle", void 0), __decorate$23([ Property({
            template: null,
            width: 16,
            position: "Left"
        }) ], ProgressButton.prototype, "spinSettings", void 0), __decorate$23([ Property({
            duration: 400,
            effect: "None",
            easing: "ease"
        }) ], ProgressButton.prototype, "animationSettings", void 0), __decorate$23([ Event() ], ProgressButton.prototype, "created", void 0), 
        __decorate$23([ Event() ], ProgressButton.prototype, "begin", void 0), __decorate$23([ Event() ], ProgressButton.prototype, "progress", void 0), 
        __decorate$23([ Event() ], ProgressButton.prototype, "end", void 0), __decorate$23([ Event() ], ProgressButton.prototype, "fail", void 0), 
        ProgressButton = __decorate$23([ NotifyPropertyChanges ], ProgressButton);
    }(Button), _splitbuttons = Object.freeze({
        getModel: getModel,
        Item: Item,
        DropDownButton: DropDownButton,
        SplitButton: SplitButton,
        createButtonGroup: function(selector, options, createElement$$1) {
            void 0 === options && (options = {});
            var child, btnElem, nextChild, btnModel;
            isNullOrUndefined(createElement$$1) && (createElement$$1 = createElement);
            var wrapper = document.querySelector(selector);
            addClass([ wrapper ], [ "e-btn-group" ]), wrapper.setAttribute("role", "group");
            var childs = wrapper.children;
            options.buttons = options.buttons || [];
            for (var i = 0, j = 0; j < childs.length; i++, j++) child = childs[j], null !== (btnModel = options.buttons[i]) && ("BUTTON" === child.tagName ? btnElem = child : (btnElem = createElement$$1("label"), 
            (nextChild = childs[j + 1]) ? wrapper.insertBefore(btnElem, nextChild) : wrapper.appendChild(btnElem), 
            child.id && btnElem.setAttribute("for", child.id), btnModel && btnModel.disabled && (child.disabled = !0), 
            j++), options.cssClass && btnModel && !btnModel.cssClass && (btnModel.cssClass = options.cssClass), 
            new Button(btnModel || {}, btnElem));
            return wrapper;
        },
        ProgressButton: ProgressButton
    }), __extends$20 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$19 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, CTRLSWITCH = "e-switch-ctrl-btn", HIDEHEX = "e-hide-hex-value", HIDERGBA = "e-hide-switchable-value", HIDEVALUE = "e-hide-value", HSVAREA = "e-hsv-color", INPUTWRAPPER = "e-selected-value", MODESWITCH = "e-mode-switch-btn", NOCOLOR = "e-nocolor-item", OPACITY = "e-opacity-value", PREVIEW = "e-preview-container", SHOWVALUE = "e-show-value", SELECT = "e-selected", TILE = "e-tile", presets_default = [ "#000000", "#f44336", "#e91e63", "#9c27b0", "#673ab7", "#2196f3", "#03a9f4", "#00bcd4", "#009688", "#ffeb3b", "#ffffff", "#ffebee", "#fce4ec", "#f3e5f5", "#ede7f6", "#e3f2fd", "#e1f5fe", "#e0f7fa", "#e0f2f1", "#fffde7", "#f2f2f2", "#ffcdd2", "#f8bbd0", "#e1bee7", "#d1c4e9", "#bbdefb", "#b3e5fc", "#b2ebf2", "#b2dfdb", "#fff9c4", "#e6e6e6", "#ef9a9a", "#f48fb1", "#ce93d8", "#b39ddb", "#90caf9", "#81d4fa", "#80deea", "#80cbc4", "#fff59d", "#cccccc", "#e57373", "#f06292", "#ba68c8", "#9575cd", "#64b5f6", "#4fc3f7", "#4dd0e1", "#4db6ac", "#fff176", "#b3b3b3", "#ef5350", "#ec407a", "#ab47bc", "#7e57c2", "#42a5f5", "#29b6f6", "#26c6da", "#26a69a", "#ffee58", "#999999", "#e53935", "#d81b60", "#8e24aa", "#5e35b1", "#1e88e5", "#039be5", "#00acc1", "#00897b", "#fdd835", "#808080", "#d32f2f", "#c2185b", "#7b1fa2", "#512da8", "#1976d2", "#0288d1", "#0097a7", "#00796b", "#fbc02d", "#666666", "#c62828", "#ad1457", "#6a1b9a", "#4527a0", "#1565c0", "#0277bd", "#00838f", "#00695c", "#f9a825", "#4d4d4d", "#b71c1c", "#880e4f", "#4a148c", "#311b92", "#0d47a1", "#01579b", "#006064", "#004d40", "#f57f17" ], ColorPicker = function(_super) {
        function ColorPicker(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$20(ColorPicker, _super), ColorPicker.prototype.preRender = function() {
            this.l10n = new L10n("colorpicker", {
                Apply: "Apply",
                Cancel: "Cancel",
                ModeSwitcher: "Switch Mode"
            }, this.locale);
        }, ColorPicker.prototype.render = function() {
            this.initWrapper(), this.inline ? this.createWidget() : this.createSplitBtn(), this.enableOpacity || addClass([ this.container.parentElement ], "e-hide-opacity");
        }, ColorPicker.prototype.initWrapper = function() {
            var wrapper = this.createElement("div", {
                className: "e-" + this.getModuleName() + "-wrapper"
            });
            this.element.parentNode.insertBefore(wrapper, this.element), wrapper.appendChild(this.element), 
            attributes(this.element, {
                tabindex: "-1",
                spellcheck: "false"
            }), this.container = this.createElement("div", {
                className: "e-container"
            }), this.getWrapper().appendChild(this.container);
            var value = this.value ? this.roundValue(this.value).toLowerCase() : "#008000ff";
            this.element.value = value.slice(0, 7), this.setProperties({
                value: value
            }, !0), this.enableRtl && wrapper.classList.add("e-rtl"), this.cssClass && addClass([ wrapper ], this.cssClass.split(" ")), 
            this.tileRipple = rippleEffect(this.container, {
                selector: "." + TILE
            }), this.ctrlBtnRipple = rippleEffect(this.container, {
                selector: ".e-btn"
            });
        }, ColorPicker.prototype.getWrapper = function() {
            return this.element.parentElement;
        }, ColorPicker.prototype.createWidget = function() {
            "Palette" === this.mode ? (this.createPalette(), this.inline || this.firstPaletteFocus()) : (this.createPicker(), 
            this.inline || this.getDragHandler().focus()), this.isRgb = !0, this.createInput(), 
            this.createCtrlBtn(), this.disabled || this.wireEvents(), this.inline && this.disabled && this.toggleDisabled(!0), 
            Browser.isDevice && this.refreshPopupPos();
        }, ColorPicker.prototype.createSplitBtn = function() {
            var _this = this, splitButton = this.createElement("button", {
                className: "e-split-colorpicker"
            });
            this.getWrapper().appendChild(splitButton), this.splitBtn = new SplitButton({
                iconCss: "e-selected-color",
                target: this.container,
                disabled: this.disabled,
                enableRtl: this.enableRtl,
                beforeOpen: this.beforeOpenFn.bind(this),
                open: this.onOpen.bind(this),
                beforeClose: this.beforePopupClose.bind(this),
                click: function(args) {
                    _this.trigger("change", {
                        currentValue: {
                            hex: _this.value.slice(0, 7),
                            rgba: _this.convertToRgbString(_this.hexToRgb(_this.value))
                        },
                        previousValue: {
                            hex: null,
                            rgba: null
                        }
                    });
                }
            }), this.splitBtn.createElement = this.createElement, this.splitBtn.appendTo(splitButton);
            var preview = this.createElement("span", {
                className: "e-split-preview"
            });
            select(".e-selected-color", splitButton).appendChild(preview), preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
            var popupEle = this.getPopupEle();
            if (addClass([ popupEle ], "e-colorpicker-popup"), this.cssClass && addClass([ popupEle ], this.cssClass.split(" ")), 
            Browser.isDevice) {
                var popupInst = this.getPopupInst();
                popupInst.relateTo = document.body, popupInst.position = {
                    X: "center",
                    Y: "center"
                }, popupInst.targetType = "container", popupInst.collision = {
                    X: "fit",
                    Y: "fit"
                }, popupInst.offsetY = 4, popupEle.style.zIndex = getZindexPartial(this.splitBtn.element).toString();
            }
        }, ColorPicker.prototype.onOpen = function(args) {
            this.trigger("open", {
                element: this.container
            });
        }, ColorPicker.prototype.getPopupInst = function() {
            return getInstance(this.getPopupEle(), Popup);
        }, ColorPicker.prototype.beforeOpenFn = function(args) {
            var beforeOpenArgs = {
                element: this.container,
                event: args.event,
                cancel: !1
            };
            if (this.trigger("beforeOpen", beforeOpenArgs), args.cancel = beforeOpenArgs.cancel, 
            !args.cancel) {
                var popupEle = this.getPopupEle();
                popupEle.style.top = formatUnit(0 + pageYOffset), popupEle.style.left = formatUnit(0 + pageXOffset), 
                popupEle.style.display = "block", this.createWidget(), popupEle.style.display = "", 
                Browser.isDevice && (this.modal = this.createElement("div"), this.modal.className = "e-" + this.getModuleName() + " e-modal", 
                this.modal.style.display = "none", document.body.insertBefore(this.modal, popupEle), 
                document.body.className += " e-colorpicker-overflow", this.modal.style.display = "block", 
                this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString());
            }
        }, ColorPicker.prototype.beforePopupClose = function(args) {
            if (!isNullOrUndefined(args.event)) {
                var beforeCloseArgs = {
                    element: this.container,
                    event: args.event,
                    cancel: !1
                };
                this.trigger("beforeClose", beforeCloseArgs), Browser.isDevice && args.event.target === this.modal && (beforeCloseArgs.cancel = !0), 
                args.cancel = beforeCloseArgs.cancel, args.cancel || this.onPopupClose();
            }
        }, ColorPicker.prototype.onPopupClose = function() {
            this.unWireEvents(), this.destroyOtherComp(), this.container.style.width = "", select(".e-split-preview", this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value)), 
            this.container.innerHTML = "", removeClass([ this.container ], [ "e-color-picker", "e-color-palette" ]), 
            Browser.isDevice && this.modal && (removeClass([ document.body ], "e-colorpicker-overflow"), 
            this.modal.style.display = "none", this.modal.outerHTML = "", this.modal = null);
        }, ColorPicker.prototype.createPalette = function() {
            if (classList(this.container, [ "e-color-palette" ], [ "e-color-picker" ]), this.presetColors) {
                var paletteGroup = this.createElement("div", {
                    className: "e-custom-palette"
                });
                this.appendElement(paletteGroup);
                var keys = Object.keys(this.presetColors);
                if (1 === keys.length) this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup); else for (var i = 0, len = keys.length; i < len; i++) this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);
                selectAll(".e-row", paletteGroup).length > 10 && addClass([ paletteGroup ], "e-palette-group");
            } else this.appendPalette(presets_default, "default");
            "Palette" === this.mode && !this.modeSwitcher && this.noColor && this.setNoColor();
            var width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
            this.container.style.width = formatUnit(this.container.children[0].offsetWidth + width + width), 
            this.rgb = this.hexToRgb(this.roundValue(this.value)), this.hsv = this.rgbToHsv.apply(this, this.rgb);
        }, ColorPicker.prototype.firstPaletteFocus = function() {
            select("." + SELECT, this.container.children[0]) || selectAll(".e-palette", this.container)[0].focus();
        }, ColorPicker.prototype.appendPalette = function(colors, key, refEle) {
            var palette = this.createElement("div", {
                className: "e-palette",
                attrs: {
                    tabindex: "0"
                }
            });
            refEle ? refEle.appendChild(palette) : this.appendElement(palette);
            for (var row, tile, roundedColor, i = 0, len = colors.length; i < len; i++) 0 !== i && i % this.columns != 0 || (row = this.createElement("div", {
                className: "e-row",
                attrs: {
                    role: "row"
                }
            }), palette.appendChild(row)), roundedColor = this.roundValue(colors[i]).toLowerCase(), 
            tile = this.createElement("span", {
                className: TILE,
                attrs: {
                    role: "gridcell",
                    "aria-label": roundedColor,
                    "aria-selected": "false"
                }
            }), this.trigger("beforeTileRender", {
                element: tile,
                presetName: key,
                value: colors[i]
            }), row.appendChild(tile), this.value === roundedColor && (this.addTileSelection(tile), 
            palette.focus()), tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));
        }, ColorPicker.prototype.setNoColor = function() {
            var noColorEle = selectAll(".e-row")[0].children[0];
            noColorEle.classList.add(NOCOLOR), this.value || (noColorEle.classList.add(SELECT), 
            closest(noColorEle, ".e-palette").focus()), [ "aria-selected", "aria-label" ].forEach(function(attr) {
                noColorEle.removeAttribute(attr);
            }), noColorEle.style.backgroundColor = "";
        }, ColorPicker.prototype.appendElement = function(ele, insertPos) {
            void 0 === insertPos && (insertPos = 0);
            var refEle = this.container.children[insertPos];
            refEle ? this.container.insertBefore(ele, refEle) : this.container.appendChild(ele);
        }, ColorPicker.prototype.addTileSelection = function(ele) {
            ele.classList.add(SELECT), ele.setAttribute("aria-selected", "true");
        }, ColorPicker.prototype.createPicker = function() {
            classList(this.container, [ "e-color-picker" ], [ "e-color-palette" ]);
            var hsvContainer = this.createElement("div", {
                className: "e-hsv-container"
            });
            this.appendElement(hsvContainer), hsvContainer.appendChild(this.createElement("div", {
                className: HSVAREA
            }));
            var dragHandler = this.createElement("span", {
                className: "e-handler",
                attrs: {
                    tabindex: "0"
                }
            });
            hsvContainer.appendChild(dragHandler), this.rgb = this.hexToRgb(this.value), this.hsv = this.rgbToHsv.apply(this, this.rgb), 
            this.setHsvContainerBg(), this.setHandlerPosition(), this.createSlider(), this.createDragTooltip();
        }, ColorPicker.prototype.setHsvContainerBg = function(h) {
            void 0 === h && (h = this.hsv[0]), this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));
        }, ColorPicker.prototype.getHsvContainer = function() {
            return select(".e-hsv-container", this.container);
        }, ColorPicker.prototype.setHandlerPosition = function() {
            var dragHandler = this.getDragHandler(), hsvArea = select("." + HSVAREA, this.container);
            this.enableRtl ? dragHandler.style.left = formatUnit(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100) : dragHandler.style.left = formatUnit(hsvArea.offsetWidth * this.hsv[1] / 100), 
            dragHandler.style.top = formatUnit(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);
        }, ColorPicker.prototype.createSlider = function() {
            var sliderPreviewWrapper = this.createElement("div", {
                className: "e-slider-preview"
            });
            this.appendElement(sliderPreviewWrapper, 1), this.createPreview(sliderPreviewWrapper);
            var sliderWrapper = this.createElement("div", {
                className: "e-colorpicker-slider"
            });
            sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);
            var slider = this.createElement("div", {
                className: "e-hue-slider"
            });
            sliderWrapper.appendChild(slider), this.hueSlider = new Slider({
                value: this.hsv[0],
                min: 0,
                max: 359,
                enableRtl: this.enableRtl,
                enabled: !this.disabled,
                change: this.hueChange.bind(this)
            }), this.hueSlider.createElement = this.createElement, this.hueSlider.appendTo(slider), 
            this.enableOpacity && (slider = this.createElement("div", {
                className: "e-opacity-slider"
            }), sliderWrapper.appendChild(slider), this.createOpacitySlider(slider));
        }, ColorPicker.prototype.createOpacitySlider = function(slider) {
            this.opacitySlider = new Slider({
                value: 100 * this.rgb[3],
                min: 0,
                max: 100,
                enableRtl: this.enableRtl,
                enabled: !this.disabled,
                change: this.opacityChange.bind(this)
            }), this.opacitySlider.createElement = this.createElement, this.opacitySlider.appendTo(slider);
            var opacityBgTrack = this.createElement("div", {
                className: "e-opacity-empty-track"
            });
            slider.appendChild(opacityBgTrack), this.updateOpacitySliderBg();
        }, ColorPicker.prototype.updateOpacitySliderBg = function() {
            var direction = this.enableRtl ? "to left" : "to right";
            select(".e-slider-track", this.opacitySlider.element).style.background = "linear-gradient(" + direction + ", rgba(" + this.rgb.slice(0, 3) + ", 0) 0%, " + this.convertToRgbString(this.rgb.slice(0, 3)) + " 100%)";
        }, ColorPicker.prototype.hueChange = function(args) {
            this.hsv[0] = args.value, this.setHsvContainerBg(), this.convertToOtherFormat();
        }, ColorPicker.prototype.opacityChange = function(args) {
            var value = args.value, pValue = this.rgbToHex(this.rgb);
            this.hsv[3] = value / 100, this.rgb[3] = value / 100;
            var cValue = this.rgbToHex(this.rgb);
            this.getWrapper().classList.contains(HIDEVALUE) || (getInstance(select("." + OPACITY, this.container), NumericTextBox).value = value);
            var rgb = this.convertToRgbString(this.rgb);
            this.updatePreview(rgb), this.triggerEvent(cValue, pValue, rgb);
        }, ColorPicker.prototype.createPreview = function(parentEle) {
            var previewContainer = this.createElement("div", {
                className: PREVIEW
            });
            parentEle.appendChild(previewContainer);
            var preview = this.createElement("span", {
                className: "e-preview e-current"
            });
            previewContainer.appendChild(preview);
            var colorValue = this.convertToRgbString(this.rgb);
            preview.style.backgroundColor = colorValue, preview = this.createElement("span", {
                className: "e-preview e-previous"
            }), previewContainer.appendChild(preview), preview.style.backgroundColor = colorValue;
        }, ColorPicker.prototype.isPicker = function() {
            return !this.container.classList.contains("e-color-palette");
        }, ColorPicker.prototype.getPopupEle = function() {
            return this.container.parentElement;
        }, ColorPicker.prototype.createNumericInput = function(element, value, label, max) {
            var _this = this, numericInput = new NumericTextBox({
                value: value,
                placeholder: label,
                min: 0,
                max: max,
                format: "###.##",
                showSpinButton: !1,
                floatLabelType: "Always",
                enableRtl: this.enableRtl,
                enabled: !this.disabled,
                readonly: !this.isPicker(),
                change: function(args) {
                    args.event && _this.inputHandler(args.event);
                }
            });
            numericInput.createElement = this.createElement, numericInput.appendTo(element);
        }, ColorPicker.prototype.createInput = function() {
            var isPicker = this.isPicker(), wrapper = this.getWrapper();
            if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {
                var inputWrap = this.createElement("div", {
                    className: INPUTWRAPPER
                });
                isPicker ? this.appendElement(inputWrap, 2) : this.appendElement(inputWrap, 1);
                var container = this.createElement("div", {
                    className: "e-input-container"
                });
                if (inputWrap.appendChild(container), wrapper.classList.contains("e-hide-valueswitcher") || this.appendValueSwitchBtn(inputWrap), 
                !wrapper.classList.contains(HIDEHEX)) {
                    var hexInput = this.createElement("input", {
                        className: "e-hex",
                        attrs: {
                            maxlength: "7",
                            spellcheck: "false"
                        }
                    });
                    container.appendChild(hexInput), Input.createInput({
                        element: hexInput,
                        floatLabelType: "Always",
                        properties: {
                            placeholder: "HEX",
                            enableRtl: this.enableRtl,
                            enabled: !this.disabled,
                            readonly: !this.isPicker()
                        }
                    }, this.createElement), Input.setValue(this.value.slice(0, 7), hexInput), hexInput.addEventListener("input", this.inputHandler.bind(this));
                }
                if (!wrapper.classList.contains(HIDERGBA)) {
                    var label = void 0, value = void 0;
                    this.isRgb ? (label = "RGB", value = this.rgb) : (label = "HSV", value = this.hsv);
                    for (var clsName = [ "rh", "gs", "bv" ], i = 0; i < 3; i++) this.createNumericInput(container.appendChild(this.createElement("input", {
                        className: "e-" + clsName[i] + "-value"
                    })), value[i], label[i], 255);
                    this.enableOpacity && this.appendOpacityValue(container);
                }
            }
        }, ColorPicker.prototype.appendOpacityValue = function(container) {
            this.createNumericInput(container.appendChild(this.createElement("input", {
                className: OPACITY
            })), 100 * this.rgb[3], "A", 100);
        }, ColorPicker.prototype.appendValueSwitchBtn = function(targetEle) {
            var valueSwitchBtn = this.createElement("button", {
                className: "e-icons e-btn e-flat e-icon-btn e-value-switch-btn"
            });
            targetEle.appendChild(valueSwitchBtn), this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA) && valueSwitchBtn.addEventListener("click", this.formatSwitchHandler.bind(this));
        }, ColorPicker.prototype.createCtrlBtn = function() {
            if (this.modeSwitcher || this.showButtons) {
                this.l10n.setLocale(this.locale);
                var btnWrapper = this.createElement("div", {
                    className: CTRLSWITCH
                });
                if (this.container.appendChild(btnWrapper), this.showButtons) {
                    var controlBtnWrapper = this.createElement("div", {
                        className: "e-ctrl-btn"
                    });
                    btnWrapper.appendChild(controlBtnWrapper);
                    var apply = this.l10n.getConstant("Apply");
                    controlBtnWrapper.appendChild(this.createElement("button", {
                        innerHTML: apply,
                        className: "e-btn e-flat e-primary e-small e-apply",
                        attrs: {
                            title: apply
                        }
                    }));
                    var cancel = this.l10n.getConstant("Cancel");
                    controlBtnWrapper.appendChild(this.createElement("button", {
                        innerHTML: cancel,
                        className: "e-btn e-flat e-small e-cancel",
                        attrs: {
                            title: cancel
                        }
                    }));
                }
                this.modeSwitcher && this.appendModeSwitchBtn();
            }
        }, ColorPicker.prototype.appendModeSwitchBtn = function() {
            var modeSwitcher = this.createElement("button", {
                className: "e-icons e-btn e-flat e-icon-btn " + MODESWITCH,
                attrs: {
                    title: this.l10n.getConstant("ModeSwitcher")
                }
            });
            select("." + CTRLSWITCH, this.container).insertBefore(modeSwitcher, select(".e-ctrl-btn", this.container));
        }, ColorPicker.prototype.createDragTooltip = function() {
            var _this = this, tooltip = new Tooltip({
                opensOn: "Custom",
                showTipPointer: !1,
                cssClass: "e-color-picker-tooltip",
                beforeOpen: function(args) {
                    _this.tooltipEle = args.element;
                },
                animation: {
                    open: {
                        effect: "None"
                    },
                    close: {
                        effect: "None"
                    }
                }
            });
            tooltip.createElement = this.createElement, tooltip.appendTo(this.container), tooltip.open(this.container), 
            this.tooltipEle.style.zIndex = getZindexPartial(this.tooltipEle).toString(), select(".e-tip-content", this.tooltipEle).appendChild(this.createElement("div", {
                className: "e-tip-transparent"
            }));
        }, ColorPicker.prototype.getTooltipInst = function() {
            return getInstance(this.container, Tooltip);
        }, ColorPicker.prototype.setTooltipOffset = function(value) {
            this.getTooltipInst().offsetY = value;
        }, ColorPicker.prototype.toggleDisabled = function(enable) {
            enable ? this.getWrapper().classList.add("e-disabled") : this.getWrapper().classList.remove("e-disabled"), 
            this.showButtons && [].slice.call(selectAll(".e-btn", this.container)).forEach(function(ele) {
                enable ? attributes(ele, {
                    disabled: ""
                }) : ele.removeAttribute("disabled");
            });
        }, ColorPicker.prototype.convertToRgbString = function(rgb) {
            return rgb.length ? 4 === rgb.length ? "rgba(" + rgb.join() + ")" : "rgb(" + rgb.join() + ")" : "";
        }, ColorPicker.prototype.convertToHsvString = function(hsv) {
            return 4 === hsv.length ? "hsva(" + hsv.join() + ")" : "hsv(" + hsv.join() + ")";
        }, ColorPicker.prototype.updateHsv = function() {
            this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1], this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2], 
            this.setHandlerPosition();
        }, ColorPicker.prototype.convertToOtherFormat = function(isKey) {
            void 0 === isKey && (isKey = !1);
            var pValue = this.rgbToHex(this.rgb);
            this.rgb = this.hsvToRgb.apply(this, this.hsv);
            var cValue = this.rgbToHex(this.rgb), rgba = this.convertToRgbString(this.rgb);
            this.updatePreview(rgba), this.updateInput(cValue), this.triggerEvent(cValue, pValue, rgba, isKey);
        }, ColorPicker.prototype.updateInput = function(value) {
            var wrapper = this.getWrapper();
            wrapper.classList.contains(HIDEVALUE) || (wrapper.classList.contains(HIDEHEX) || Input.setValue(value.substr(0, 7), select(".e-hex", this.container)), 
            wrapper.classList.contains(HIDERGBA) || (this.isRgb ? this.updateValue(this.rgb, !1) : this.updateValue(this.hsv, !1)));
        }, ColorPicker.prototype.updatePreview = function(value) {
            this.enableOpacity && this.updateOpacitySliderBg(), select(".e-tip-transparent", this.tooltipEle).style.backgroundColor = value, 
            select("." + PREVIEW + " .e-current", this.container).style.backgroundColor = value, 
            select("." + PREVIEW + " .e-previous", this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
        }, ColorPicker.prototype.getDragHandler = function() {
            return select(".e-handler", this.container);
        }, ColorPicker.prototype.removeTileSelection = function() {
            [].slice.call(selectAll("." + SELECT, this.container.children[0])).forEach(function(ele) {
                ele.classList.remove(SELECT), ele.setAttribute("aria-selected", "false");
            });
        }, ColorPicker.prototype.convertRgbToNumberArray = function(value) {
            return value.slice(value.indexOf("(") + 1, value.indexOf(")")).split(",").map(function(n, i) {
                return 3 !== i ? parseInt(n, 10) : parseFloat(n);
            });
        }, ColorPicker.prototype.getValue = function(value, type) {
            if (value || (value = this.value), type = type ? type.toLowerCase() : "hex", "r" === value[0]) {
                var cValue = this.convertRgbToNumberArray(value);
                if ("hex" === type || "hexa" === type) {
                    var hex = this.rgbToHex(cValue);
                    return "hex" === type ? hex.slice(0, 7) : hex;
                }
                return "hsv" === type ? this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3))) : "hsva" === type ? this.convertToHsvString(this.rgbToHsv.apply(this, cValue)) : "null";
            }
            if ("h" === value[0]) {
                cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));
                if ("rgba" === type) return this.convertToRgbString(cValue);
                if ("hex" === type || "hexa" === type) {
                    hex = this.rgbToHex(cValue);
                    return "hex" === type ? hex.slice(0, 7) : hex;
                }
                return "rgb" === type ? this.convertToRgbString(cValue.slice(0, 3)) : "null";
            }
            value = this.roundValue(value);
            var rgb = this.hexToRgb(value);
            return "rgb" !== type && "hsv" !== type || (rgb = rgb.slice(0, 3)), "rgba" === type || "rgb" === type ? this.convertToRgbString(rgb) : "hsva" === type || "hsv" === type ? this.convertToHsvString(this.rgbToHsv.apply(this, rgb)) : "hex" === type ? value.slice(0, 7) : "a" === type ? rgb[3].toString() : "null";
        }, ColorPicker.prototype.toggle = function() {
            this.splitBtn.toggle();
        }, ColorPicker.prototype.getModuleName = function() {
            return "colorpicker";
        }, ColorPicker.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, ColorPicker.prototype.wireEvents = function() {
            if (this.isPicker()) {
                var dragHandler = this.getDragHandler();
                EventHandler.add(dragHandler, "keydown", this.pickerKeyDown, this), EventHandler.add(this.getHsvContainer(), "mousedown touchstart", this.handlerDown, this), 
                (this.modeSwitcher || this.showButtons) && this.addCtrlSwitchEvent(), EventHandler.add(select(".e-previous", this.container), "click", this.previewHandler, this);
            } else EventHandler.add(this.container, "click", this.paletteClickHandler, this), 
            EventHandler.add(this.container, "keydown", this.paletteKeyDown, this);
        }, ColorPicker.prototype.addCtrlSwitchEvent = function() {
            EventHandler.add(select("." + CTRLSWITCH, this.container), "click", this.btnClickHandler, this);
        }, ColorPicker.prototype.pickerKeyDown = function(e) {
            switch (e.keyCode) {
              case 39:
                this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
                break;

              case 37:
                this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
                break;

              case 38:
                this.handlerDragPosition(2, 1, e);
                break;

              case 40:
                this.handlerDragPosition(2, -1, e);
                break;

              case 13:
                e.preventDefault();
                var cValue = this.rgbToHex(this.rgb);
                this.enterKeyHandler(cValue, e);
            }
        }, ColorPicker.prototype.enterKeyHandler = function(value, e) {
            this.triggerChangeEvent(value), this.inline || (this.closePopup(e), this.splitBtn.element.focus());
        }, ColorPicker.prototype.closePopup = function(e) {
            var beforeCloseArgs = {
                element: this.container,
                event: e,
                cancel: !1
            };
            this.trigger("beforeClose", beforeCloseArgs), beforeCloseArgs.cancel || (this.toggle(), 
            this.onPopupClose());
        }, ColorPicker.prototype.triggerChangeEvent = function(value) {
            var hex = value.slice(0, 7);
            this.trigger("change", {
                currentValue: {
                    hex: hex,
                    rgba: this.convertToRgbString(this.rgb)
                },
                previousValue: {
                    hex: this.value.slice(0, 7),
                    rgba: this.convertToRgbString(this.hexToRgb(this.value))
                }
            }), this.setProperties({
                value: value
            }, !0), this.element.value = hex || "#000000";
        }, ColorPicker.prototype.handlerDragPosition = function(prob, value, e) {
            e.preventDefault(), this.hsv[prob] += value * (e.ctrlKey ? 1 : 3), this.hsv[prob] < 0 && (this.hsv[prob] = 0), 
            this.updateHsv(), this.convertToOtherFormat(!0);
        }, ColorPicker.prototype.handlerDown = function(e) {
            e.preventDefault(), "mousedown" === e.type ? (this.clientX = Math.abs(e.pageX - pageXOffset), 
            this.clientY = Math.abs(e.pageY - pageYOffset), this.setTooltipOffset(8)) : (this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset), 
            this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset), this.setTooltipOffset(-8)), 
            this.setHsv(this.clientX, this.clientY), this.getDragHandler().style.transition = "left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)", 
            this.updateHsv(), this.convertToOtherFormat(), this.getDragHandler().focus(), EventHandler.add(document, "mousemove touchmove", this.handlerMove, this), 
            EventHandler.add(document, "mouseup touchend", this.handlerEnd, this);
        }, ColorPicker.prototype.handlerMove = function(e) {
            "touchmove" !== e.type && e.preventDefault();
            var x, y;
            "mousemove" === e.type ? (x = Math.abs(e.pageX - pageXOffset), y = Math.abs(e.pageY - pageYOffset)) : (x = Math.abs(e.changedTouches[0].pageX - pageXOffset), 
            y = Math.abs(e.changedTouches[0].pageY - pageYOffset)), this.setHsv(x, y);
            var dragHandler = this.getDragHandler();
            parseInt(dragHandler.style.left, 10), parseInt(dragHandler.style.top, 10);
            this.updateHsv(), this.convertToOtherFormat(), this.getTooltipInst().refresh(dragHandler), 
            this.tooltipEle.style.transform || (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) && (select("." + HSVAREA, this.container).style.cursor = "pointer", 
            dragHandler.style.transition = "none", this.inline || (this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString()), 
            this.tooltipEle.style.transform = "rotate(45deg)", dragHandler.classList.add("e-hide-handler"));
        }, ColorPicker.prototype.setHsv = function(clientX, clientY) {
            var ele = select("." + HSVAREA, this.container), position = ele.getBoundingClientRect();
            clientX = this.enableRtl ? clientX > position.right ? 0 : Math.abs(clientX - position.right) : clientX > position.left ? Math.abs(clientX - position.left) : 0, 
            clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0, this.hsv[2] = Math.round(10 * Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight)) / 10, 
            this.hsv[1] = Math.round(10 * Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth)) / 10;
        }, ColorPicker.prototype.handlerEnd = function(e) {
            "touchend" !== e.type && e.preventDefault(), EventHandler.remove(document, "mousemove touchmove", this.handlerMove), 
            EventHandler.remove(document, "mouseup touchend", this.handlerEnd);
            var dragHandler = this.getDragHandler();
            select("." + HSVAREA, this.container).style.cursor = "", this.tooltipEle.style.transform && (this.tooltipEle.style.transform = "", 
            dragHandler.classList.remove("e-hide-handler")), this.inline || this.showButtons || this.closePopup(e);
        }, ColorPicker.prototype.btnClickHandler = function(e) {
            var target = e.target;
            closest(target, "." + MODESWITCH) ? (e.stopPropagation(), this.switchToPalette()) : (target.classList.contains("e-apply") || target.classList.contains("e-cancel")) && this.ctrlBtnClick(target, e);
        }, ColorPicker.prototype.switchToPalette = function() {
            this.trigger("beforeModeSwitch", {
                element: this.container,
                mode: "Palette"
            }), this.unWireEvents(), this.destroyOtherComp(), detach(select(".e-slider-preview", this.container)), 
            this.getWrapper().classList.contains(HIDEVALUE) || remove(select("." + INPUTWRAPPER, this.container)), 
            detach(this.getHsvContainer()), this.createPalette(), this.firstPaletteFocus(), 
            this.createInput(), this.refreshPopupPos(), this.wireEvents();
        }, ColorPicker.prototype.refreshPopupPos = function() {
            if (!this.inline) {
                var popupEle = this.getPopupEle();
                popupEle.style.left = formatUnit(0 + pageXOffset), popupEle.style.top = formatUnit(0 + pageYOffset), 
                this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
            }
        }, ColorPicker.prototype.formatSwitchHandler = function(e) {
            e.target.parentElement;
            this.isRgb ? (this.updateValue(this.hsv, !0, 3, [ 360, 100, 100 ]), this.isRgb = !1) : (this.updateValue(this.rgb, !0, 2), 
            this.isRgb = !0);
        }, ColorPicker.prototype.updateValue = function(value, format, idx, max) {
            for (var inst, clsName = [ "e-rh-value", "e-gs-value", "e-bv-value" ], i = 0, len = clsName.length; i < len; i++) (inst = getInstance(select("." + clsName[i], this.container), NumericTextBox)).value = Math.round(value[i]), 
            format && (inst.placeholder = clsName[i].substr(idx, 1).toUpperCase(), inst.max = max ? max[i] : 255), 
            inst.dataBind();
        }, ColorPicker.prototype.previewHandler = function(e) {
            var target = e.target, pValue = this.rgbToHex(this.rgb);
            this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor), this.rgb[3] || (this.rgb[3] = 1);
            var cValue = this.rgbToHex(this.rgb), hsv = this.rgbToHsv.apply(this, this.rgb);
            hsv[0] !== this.hsv[0] && (this.hueSlider.setProperties({
                value: hsv[0]
            }, !0), this.hueSlider.refresh()), this.setHsvContainerBg(hsv[0]), this.enableOpacity && hsv[3] !== this.hsv[3] && (this.opacitySlider.setProperties({
                value: 100 * hsv[3]
            }, !0), this.opacitySlider.refresh(), this.updateOpacitySliderBg()), this.hsv = hsv, 
            this.setHandlerPosition(), this.updateInput(cValue), select("." + PREVIEW + " .e-current", this.container).style.backgroundColor = this.convertToRgbString(this.rgb), 
            this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
        }, ColorPicker.prototype.paletteClickHandler = function(e) {
            e.preventDefault();
            var target = e.target;
            if (target.classList.contains(TILE)) {
                if (this.removeTileSelection(), this.addTileSelection(target), target.classList.contains(NOCOLOR)) this.noColorTile(); else {
                    var cValue = target.getAttribute("aria-label"), pValue = this.rgbToHex(this.rgb);
                    this.rgb = this.hexToRgb(this.roundValue(cValue)), this.hsv = this.rgbToHsv.apply(this, this.rgb), 
                    this.getWrapper().classList.contains(SHOWVALUE) && this.updateInput(cValue), this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
                }
                this.inline || this.showButtons || this.closePopup(e);
            } else closest(target, "." + MODESWITCH) ? this.switchToPicker() : target.classList.contains("e-apply") || target.classList.contains("e-cancel") ? this.ctrlBtnClick(target, e) : this.getWrapper().classList.contains(SHOWVALUE) && closest(target, ".e-value-switch-btn") && this.formatSwitchHandler(e);
        }, ColorPicker.prototype.noColorTile = function(isKey) {
            void 0 === isKey && (isKey = !1);
            var pValue = this.rgbToHex(this.rgb);
            this.rgb = [], this.hsv = [], this.triggerEvent("", pValue, "", isKey);
        }, ColorPicker.prototype.switchToPicker = function() {
            var wrapper = this.getWrapper();
            this.trigger("beforeModeSwitch", {
                element: this.container,
                mode: "Picker"
            }), this.unWireEvents(), [].slice.call(selectAll(".e-palette", this.container)).forEach(function(ele) {
                detach(ele);
            }), wrapper.classList.contains(SHOWVALUE) && detach(select("." + INPUTWRAPPER, this.container)), 
            this.container.style.width = "";
            var grpEle = select(".e-custom-palette", this.container);
            this.presetColors && remove(grpEle), this.createPicker(), this.getDragHandler().focus(), 
            this.createInput(), this.refreshPopupPos(), this.wireEvents();
        }, ColorPicker.prototype.ctrlBtnClick = function(ele, e) {
            if (ele.classList.contains("e-apply")) {
                var cValue = this.rgbToHex(this.rgb);
                this.triggerChangeEvent(cValue);
            }
            this.inline || (this.closePopup(e), this.splitBtn.element.focus());
        }, ColorPicker.prototype.paletteKeyDown = function(e) {
            var target = e.target;
            if (target.classList.contains("e-palette")) {
                var selectedEle, idx, tiles = [].slice.call(selectAll("." + TILE, target)), prevSelectedEle = tiles.filter(function(tile) {
                    return tile.classList.contains("e-selected");
                }).pop();
                switch (!e.altKey && e.keyCode) {
                  case 39:
                    e.preventDefault(), selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0], 
                    this.keySelectionChanges(selectedEle);
                    break;

                  case 37:
                    e.preventDefault(), selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1], 
                    this.keySelectionChanges(selectedEle);
                    break;

                  case 38:
                    e.preventDefault(), selectedEle = tiles[idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0] ? tiles[idx] : tiles[idx - this.columns], 
                    this.keySelectionChanges(selectedEle);
                    break;

                  case 40:
                    e.preventDefault(), tiles[idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1] ? selectedEle = tiles[idx] : (idx %= tiles.length, 
                    selectedEle = tiles[idx += tiles[tiles.length - 1].parentElement.childElementCount]), 
                    this.keySelectionChanges(selectedEle);
                    break;

                  case 13:
                    if (e.preventDefault(), prevSelectedEle) {
                        var cValue = prevSelectedEle.getAttribute("aria-label");
                        this.enterKeyHandler(cValue || "", e);
                    }
                }
            }
        }, ColorPicker.prototype.keySelectionChanges = function(newEle) {
            if (this.removeTileSelection(), this.addTileSelection(newEle), newEle.classList.contains(NOCOLOR)) this.noColorTile(!0); else {
                var cValue = newEle.getAttribute("aria-label"), pValue = this.rgbToHex(this.rgb);
                this.rgb = this.hexToRgb(cValue), this.hsv = this.rgbToHsv.apply(this, this.rgb), 
                this.getWrapper().classList.contains(SHOWVALUE) && this.updateInput(cValue), this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), !0);
            }
        }, ColorPicker.prototype.tilePosition = function(items, element, cIdx) {
            var n = (items = Array.prototype.slice.call(items)).length, emptyCount = this.columns - items[n - 1].parentElement.childElementCount, idx = items.indexOf(element);
            return (idx += cIdx) < 0 ? idx += n + emptyCount : idx %= n + emptyCount, idx;
        }, ColorPicker.prototype.inputHandler = function(e) {
            var target = e.target;
            if (target.value.length) {
                var hsv, pValue;
                switch (select(".e-float-text", target.parentElement).textContent) {
                  case "HEX":
                    var value = "";
                    if (("#" === target.value[0] && 5 !== target.value.length || "#" !== target.value[0] && 4 !== target.value.length) && (value = this.roundValue(target.value)), 
                    9 !== value.length) return;
                    pValue = this.rgbToHex(this.rgb), this.rgb = this.hexToRgb(value + value.substr(-2)), 
                    this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);
                    break;

                  case "R":
                    this.rgb[0] !== Number(target.value) && (pValue = this.rgbToHex(this.rgb), this.rgb[0] = Number(target.value), 
                    hsv = this.rgbToHsv.apply(this, this.rgb), this.inputValueChange(hsv, pValue));
                    break;

                  case "G":
                    this.rgb[1] !== Number(target.value) && (pValue = this.rgbToHex(this.rgb), this.rgb[1] = Number(target.value), 
                    hsv = this.rgbToHsv.apply(this, this.rgb), this.inputValueChange(hsv, pValue));
                    break;

                  case "B":
                    this.rgb[2] !== Number(target.value) && (pValue = this.rgbToHex(this.rgb), this.rgb[2] = Number(target.value), 
                    hsv = this.rgbToHsv.apply(this, this.rgb), this.inputValueChange(hsv, pValue));
                    break;

                  case "H":
                    this.hueSlider.value = Number(target.value);
                    break;

                  case "S":
                    this.hsv[1] !== Number(target.value) && (this.hsv[1] = Number(target.value), this.updateHsv(), 
                    this.convertToOtherFormat());
                    break;

                  case "V":
                    this.hsv[2] !== Number(target.value) && (this.hsv[2] = Number(target.value), this.updateHsv(), 
                    this.convertToOtherFormat());
                    break;

                  case "A":
                    this.opacitySlider.value = Number(target.value);
                }
            }
        }, ColorPicker.prototype.inputValueChange = function(hsv, pValue, value) {
            hsv[0] !== this.hsv[0] && (this.hueSlider.setProperties({
                value: hsv[0]
            }, !0), this.hueSlider.refresh(), this.setHsvContainerBg(hsv[0])), this.hsv = hsv;
            var cValue = this.rgbToHex(this.rgb);
            this.setHandlerPosition(), this.updateInput(value || cValue);
            var rgba = this.convertToRgbString(this.rgb);
            this.updatePreview(rgba), this.triggerEvent(cValue, pValue, rgba);
        }, ColorPicker.prototype.triggerEvent = function(cValue, pValue, rgba, isKey) {
            void 0 === isKey && (isKey = !1);
            var hex = cValue.slice(0, 7), eventArgs = {
                currentValue: {
                    hex: hex,
                    rgba: rgba
                },
                previousValue: {
                    hex: pValue.slice(0, 7),
                    rgba: this.convertToRgbString(this.hexToRgb(pValue))
                }
            };
            this.showButtons || isKey ? this.trigger("select", eventArgs) : (eventArgs.previousValue = {
                hex: this.value.slice(0, 7),
                rgba: this.convertToRgbString(this.hexToRgb(this.value))
            }, this.trigger("change", eventArgs), this.setProperties({
                value: cValue
            }, !0), this.element.value = hex || "#000000");
        }, ColorPicker.prototype.destroy = function() {
            var _this = this, wrapper = this.getWrapper();
            _super.prototype.destroy.call(this), [ "tabindex", "spellcheck" ].forEach(function(attr) {
                _this.element.removeAttribute(attr);
            }), this.inline ? (this.unWireEvents(), this.destroyOtherComp()) : (this.isPopupOpen() && (this.unWireEvents(), 
            this.destroyOtherComp()), this.splitBtn.destroy(), this.splitBtn = null), this.tileRipple(), 
            this.tileRipple = null, this.ctrlBtnRipple(), this.ctrlBtnRipple = null, detach(this.element.nextElementSibling), 
            wrapper.parentElement.insertBefore(this.element, wrapper), detach(wrapper), this.container = null;
        }, ColorPicker.prototype.destroyOtherComp = function() {
            if (this.isPicker()) {
                this.hueSlider.destroy(), this.enableOpacity && (this.opacitySlider.destroy(), this.opacitySlider = null), 
                this.hueSlider = null;
                var tooltipInst = this.getTooltipInst();
                tooltipInst.close(), tooltipInst.destroy(), this.tooltipEle = null;
            }
        }, ColorPicker.prototype.isPopupOpen = function() {
            return this.getPopupEle().classList.contains("e-popup-open");
        }, ColorPicker.prototype.unWireEvents = function() {
            if (this.isPicker()) {
                this.getWrapper();
                var dragHandler = this.getDragHandler();
                EventHandler.remove(dragHandler, "keydown", this.pickerKeyDown), EventHandler.remove(this.getHsvContainer(), "mousedown touchstart", this.handlerDown), 
                (this.modeSwitcher || this.showButtons) && EventHandler.remove(select("." + CTRLSWITCH, this.container), "click", this.btnClickHandler), 
                EventHandler.remove(select(".e-previous", this.container), "click", this.previewHandler);
            } else EventHandler.remove(this.container, "click", this.paletteClickHandler), EventHandler.remove(this.container, "keydown", this.paletteKeyDown);
        }, ColorPicker.prototype.roundValue = function(value) {
            if (!value) return "";
            "#" !== value[0] && (value = "#" + value);
            var len = value.length;
            if (4 === len && (value += "f", len = 5), 5 === len) {
                for (var tempValue = "", i = 1, len_1 = value.length; i < len_1; i++) tempValue += value.charAt(i) + value.charAt(i);
                value = "#" + tempValue, len = 9;
            }
            return 7 === len && (value += "ff"), value;
        }, ColorPicker.prototype.hexToRgb = function(hex) {
            if (!hex) return [];
            9 !== (hex = hex.trim()).length && (hex = this.roundValue(hex));
            var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));
            hex = hex.slice(1, 7);
            var bigInt = parseInt(hex, 16), h = [];
            return h.push(bigInt >> 16 & 255), h.push(bigInt >> 8 & 255), h.push(255 & bigInt), 
            h.push(opacity), h;
        }, ColorPicker.prototype.rgbToHsv = function(r, g, b, opacity) {
            if (this.rgb && !this.rgb.length) return [];
            r /= 255, g /= 255, b /= 255;
            var h, s, max = Math.max(r, g, b), min = Math.min(r, g, b), v = max, d = max - min;
            if (s = 0 === max ? 0 : d / max, max === min) h = 0; else {
                switch (max) {
                  case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;

                  case g:
                    h = (b - r) / d + 2;
                    break;

                  case b:
                    h = (r - g) / d + 4;
                }
                h /= 6;
            }
            var hsv = [ Math.round(360 * h), Math.round(1e3 * s) / 10, Math.round(1e3 * v) / 10 ];
            return isNullOrUndefined(opacity) || hsv.push(opacity), hsv;
        }, ColorPicker.prototype.hsvToRgb = function(h, s, v, opacity) {
            var r, g, b, i, f, p, q, t;
            if (s /= 100, v /= 100, 0 === s) return r = g = b = v, [ Math.round(255 * r), Math.round(255 * g), Math.round(255 * b), opacity ];
            switch (h /= 60, i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - s * f), 
            t = v * (1 - s * (1 - f)), i) {
              case 0:
                r = v, g = t, b = p;
                break;

              case 1:
                r = q, g = v, b = p;
                break;

              case 2:
                r = p, g = v, b = t;
                break;

              case 3:
                r = p, g = q, b = v;
                break;

              case 4:
                r = t, g = p, b = v;
                break;

              default:
                r = v, g = p, b = q;
            }
            var rgb = [ Math.round(255 * r), Math.round(255 * g), Math.round(255 * b) ];
            return isNullOrUndefined(opacity) || rgb.push(opacity), rgb;
        }, ColorPicker.prototype.rgbToHex = function(rgb) {
            return rgb.length ? "#" + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + (isNullOrUndefined(rgb[3]) ? "" : 0 !== rgb[3] ? (Math.round(255 * rgb[3]) + 65536).toString(16).substr(-2) : "00") : "";
        }, ColorPicker.prototype.hex = function(x) {
            return ("0" + x.toString(16)).slice(-2);
        }, ColorPicker.prototype.changeModeSwitcherProp = function(prop) {
            var ctrlSwitchWrapper = select("." + CTRLSWITCH, this.container);
            prop ? ctrlSwitchWrapper ? this.appendModeSwitchBtn() : (this.createCtrlBtn(), this.isPicker() && !this.disabled && this.addCtrlSwitchEvent()) : ctrlSwitchWrapper && (this.showButtons ? detach(select("." + MODESWITCH, ctrlSwitchWrapper)) : remove(ctrlSwitchWrapper));
        }, ColorPicker.prototype.changeShowBtnProps = function(prop) {
            var ctrlBtnWrapper = select("." + CTRLSWITCH, this.container);
            prop ? (ctrlBtnWrapper && remove(ctrlBtnWrapper), this.createCtrlBtn(), this.isPicker() && !this.disabled && this.addCtrlSwitchEvent()) : this.modeSwitcher ? detach(select(".e-ctrl-btn", ctrlBtnWrapper)) : remove(ctrlBtnWrapper);
        }, ColorPicker.prototype.changeValueProp = function(newProp) {
            this.isPicker() ? (this.rgb = this.hexToRgb(newProp), this.hsv = this.rgbToHsv.apply(this, this.rgb), 
            this.setHandlerPosition(), detach(closest(this.hueSlider.element, ".e-slider-preview")), 
            this.createSlider(), this.setHsvContainerBg(), this.updateInput(newProp)) : (this.removeTileSelection(), 
            this.addTileSelection(select('span[aria-label="' + this.roundValue(newProp) + '"]', this.container))), 
            this.element.value = newProp.slice(0, 7);
        }, ColorPicker.prototype.setInputEleProps = function(prop) {
            remove(select("." + INPUTWRAPPER, this.container)), this.createInput();
        }, ColorPicker.prototype.changeDisabledProp = function(newProp) {
            this.isPicker() && (this.hueSlider.enabled = !newProp, this.opacitySlider.enabled = !newProp, 
            this.setInputEleProps(newProp)), newProp ? (this.toggleDisabled(!0), this.unWireEvents()) : (this.toggleDisabled(!1), 
            this.wireEvents());
        }, ColorPicker.prototype.changeCssClassProps = function(newProp, oldProp) {
            var wrapper = this.getWrapper(), popupWrapper = this.getPopupEle();
            oldProp && removeClass([ wrapper, popupWrapper ], oldProp.split(" ")), newProp && addClass([ wrapper, popupWrapper ], newProp.split(" "));
        }, ColorPicker.prototype.changeRtlProps = function(newProp) {
            newProp ? addClass([ this.getWrapper() ], "e-rtl") : removeClass([ this.getWrapper() ], "e-rtl");
        }, ColorPicker.prototype.changePaletteProps = function() {
            detach(this.container.children[0]), this.container.style.width = "", this.createPalette();
        }, ColorPicker.prototype.changeOpacityProps = function(newProp) {
            var wrapper = this.getWrapper();
            newProp ? (removeClass([ this.container.parentElement ], "e-hide-opacity"), this.createOpacitySlider(select(".e-colorpicker-slider", this.container).appendChild(this.createElement("div", {
                className: "e-opacity-slider"
            }))), wrapper.classList.contains(HIDEVALUE) || wrapper.classList.contains(HIDERGBA) || this.appendOpacityValue(select(".e-input-container", this.container))) : (addClass([ this.container.parentElement ], "e-hide-opacity"), 
            this.opacitySlider.destroy(), remove(this.opacitySlider.element), this.opacitySlider = null, 
            wrapper.classList.contains(HIDEVALUE) || wrapper.classList.contains(HIDERGBA) || remove(select("." + OPACITY, this.container).parentElement));
        }, ColorPicker.prototype.onPropertyChanged = function(newProp, oldProp) {
            var _this = this;
            this.getWrapper();
            if (!this.inline && isNullOrUndefined(newProp.inline)) {
                if (this.splitBtn.setProperties(getModel(newProp, [ "disabled", "enableRtl" ])), 
                !this.isPopupOpen()) return newProp.value && (select(".e-split-preview", this.splitBtn.element).style.backgroundColor = newProp.value), 
                this.changeCssClassProps(newProp.cssClass, oldProp.cssClass), void this.changeRtlProps(newProp.enableRtl);
            }
            for (var _loop_1 = function(prop) {
                switch (prop) {
                  case "inline":
                    newProp.inline ? (this_1.getWrapper().appendChild(this_1.container), this_1.splitBtn.destroy(), 
                    detach(this_1.element.nextElementSibling), this_1.container.children.length || this_1.createWidget()) : (this_1.destroyOtherComp(), 
                    this_1.unWireEvents(), this_1.container.innerHTML = "", this_1.createSplitBtn());
                    break;

                  case "cssClass":
                    this_1.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
                    var props = newProp.cssClass.split(" ").concat(oldProp.cssClass.split(" ")), count_1 = 0;
                    (props = props.reduce(function(a, b) {
                        return a.indexOf(b) < 0 && a.push(b), a;
                    }, [])).forEach(function(cls) {
                        if (0 === count_1 && (cls === HIDEVALUE || "e-hide-valueswitcher" === cls || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {
                            select("." + INPUTWRAPPER, _this.container) && remove(select("." + INPUTWRAPPER, _this.container)), 
                            _this.createInput(), count_1++;
                        }
                    });
                    break;

                  case "enableRtl":
                    this_1.isPicker() && (this_1.hueSlider.enableRtl = newProp.enableRtl, this_1.enableOpacity && (this_1.opacitySlider.enableRtl = newProp.enableRtl), 
                    this_1.setInputEleProps(newProp.enableRtl)), this_1.changeRtlProps(newProp.enableRtl);
                    break;

                  case "disabled":
                    this_1.changeDisabledProp(newProp.disabled);
                    break;

                  case "value":
                    this_1.changeValueProp(newProp.value);
                    break;

                  case "showButtons":
                    this_1.changeShowBtnProps(newProp.showButtons);
                    break;

                  case "mode":
                    "Picker" === newProp.mode ? this_1.switchToPicker() : this_1.switchToPalette();
                    break;

                  case "modeSwitcher":
                    this_1.changeModeSwitcherProp(newProp.modeSwitcher);
                    break;

                  case "columns":
                  case "presetColors":
                    this_1.isPicker() || this_1.changePaletteProps();
                    break;

                  case "noColor":
                    newProp.noColor ? "Palette" !== this_1.mode || this_1.modeSwitcher || this_1.setNoColor() : this_1.changePaletteProps();
                    break;

                  case "enableOpacity":
                    this_1.changeOpacityProps(newProp.enableOpacity);
                }
            }, this_1 = this, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                _loop_1(_a[_i]);
            }
        }, __decorate$19([ Property("#008000ff") ], ColorPicker.prototype, "value", void 0), 
        __decorate$19([ Property("") ], ColorPicker.prototype, "cssClass", void 0), __decorate$19([ Property(!1) ], ColorPicker.prototype, "disabled", void 0), 
        __decorate$19([ Property(!1) ], ColorPicker.prototype, "enableRtl", void 0), __decorate$19([ Property("Picker") ], ColorPicker.prototype, "mode", void 0), 
        __decorate$19([ Property(!0) ], ColorPicker.prototype, "modeSwitcher", void 0), 
        __decorate$19([ Property(null) ], ColorPicker.prototype, "presetColors", void 0), 
        __decorate$19([ Property(!0) ], ColorPicker.prototype, "showButtons", void 0), __decorate$19([ Property(10) ], ColorPicker.prototype, "columns", void 0), 
        __decorate$19([ Property(!1) ], ColorPicker.prototype, "inline", void 0), __decorate$19([ Property(!1) ], ColorPicker.prototype, "noColor", void 0), 
        __decorate$19([ Property(!1) ], ColorPicker.prototype, "enablePersistence", void 0), 
        __decorate$19([ Property(!0) ], ColorPicker.prototype, "enableOpacity", void 0), 
        __decorate$19([ Event() ], ColorPicker.prototype, "select", void 0), __decorate$19([ Event() ], ColorPicker.prototype, "change", void 0), 
        __decorate$19([ Event() ], ColorPicker.prototype, "beforeTileRender", void 0), __decorate$19([ Event() ], ColorPicker.prototype, "beforeOpen", void 0), 
        __decorate$19([ Event() ], ColorPicker.prototype, "open", void 0), __decorate$19([ Event() ], ColorPicker.prototype, "beforeClose", void 0), 
        __decorate$19([ Event() ], ColorPicker.prototype, "beforeModeSwitch", void 0), __decorate$19([ Event() ], ColorPicker.prototype, "created", void 0), 
        ColorPicker = __decorate$19([ NotifyPropertyChanges ], ColorPicker);
    }(Component), __extends$25 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$24 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, TextBox = function(_super) {
        function TextBox(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.previousValue = null, _this;
        }
        return __extends$25(TextBox, _super), TextBox.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "floatLabelType":
                    Input.removeFloating(this.textboxWrapper), Input.addFloating(this.element, this.floatLabelType, this.placeholder);
                    break;

                  case "enabled":
                    Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container);
                    break;

                  case "value":
                    var prevOnChange = this.isProtectedOnChange;
                    this.isProtectedOnChange = !0, this.isBlank(this.value) || (this.value = this.value.toString()), 
                    this.isProtectedOnChange = prevOnChange, Input.setValue(this.value, this.element, this.floatLabelType, this.showClearButton), 
                    this.raiseChangeEvent();
                    break;

                  case "readonly":
                    Input.setReadonly(this.readonly, this.element);
                    break;

                  case "type":
                    this.element.setAttribute("type", this.type), this.raiseChangeEvent();
                    break;

                  case "showClearButton":
                    Input.setClearButton(this.showClearButton, this.element, this.textboxWrapper), this.bindClearEvent();
                    break;

                  case "enableRtl":
                    Input.setEnableRtl(this.enableRtl, [ this.textboxWrapper.container ]);
                    break;

                  case "placeholder":
                    Input.setPlaceholder(this.placeholder, this.element);
                    break;

                  case "cssClass":
                    Input.setCssClass(this.cssClass, [ this.textboxWrapper.container ]);
                    break;

                  case "locale":
                    this.globalize = new Internationalization(this.locale), this.l10n.setLocale(this.locale), 
                    this.setProperties({
                        placeholder: this.l10n.getConstant("placeholder")
                    }, !0), Input.setPlaceholder(this.placeholder, this.element);
                }
            }
        }, TextBox.prototype.getModuleName = function() {
            return "textbox";
        }, TextBox.prototype.isBlank = function(str) {
            return !str || /^\s*$/.test(str);
        }, TextBox.prototype.preRender = function() {
            if (this.cloneElement = this.element.cloneNode(!0), "EJS-TEXTBOX" === this.element.tagName) {
                for (var ejInstance = getValue("ej2_instances", this.element), inputElement = this.createElement("input"), index = 0; index < this.element.attributes.length; index++) inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue), 
                inputElement.innerHTML = this.element.innerHTML;
                this.element.appendChild(inputElement), this.element = inputElement, setValue("ej2_instances", ejInstance, this.element);
            }
            var attributes = this.element.attributes;
            this.checkAttributes(attributes), this.element.setAttribute("type", this.type), 
            this.globalize = new Internationalization(this.locale);
            var localeText = {
                placeholder: this.placeholder
            };
            this.l10n = new L10n("textbox", localeText, this.locale), "" !== this.l10n.getConstant("placeholder") && this.setProperties({
                placeholder: this.placeholder || this.l10n.getConstant("placeholder")
            }, !0), this.element.hasAttribute("id") || this.element.setAttribute("id", getUniqueID("textbox")), 
            this.element.hasAttribute("name") || this.element.setAttribute("name", this.element.getAttribute("id"));
        }, TextBox.prototype.checkAttributes = function(attrs) {
            for (var i = 0; i < attrs.length; i++) {
                var key = attrs[i].nodeName;
                "disabled" === key ? this.setProperties({
                    enabled: !1
                }, !0) : "readonly" === key ? this.setProperties({
                    readonly: !0
                }, !0) : "placeholder" === key && this.setProperties({
                    placeholder: attrs[i].nodeValue
                }, !0);
            }
        }, TextBox.prototype.render = function() {
            this.textboxWrapper = Input.createInput({
                element: this.element,
                floatLabelType: this.floatLabelType,
                properties: {
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    cssClass: this.cssClass,
                    readonly: this.readonly,
                    placeholder: this.placeholder,
                    showClearButton: this.showClearButton
                }
            }), this.wireEvents(), "" !== this.element.value && (this.value = this.element.value), 
            isNullOrUndefined(this.value) || Input.setValue(this.value, this.element, this.floatLabelType, this.showClearButton);
        }, TextBox.prototype.wireEvents = function() {
            EventHandler.add(this.element, "focus", this.focusHandler, this), EventHandler.add(this.element, "blur", this.focusOutHandler, this), 
            EventHandler.add(this.element, "input", this.inputHandler, this), EventHandler.add(this.element, "change", this.changeHandler, this), 
            this.enabled && this.bindClearEvent();
        }, TextBox.prototype.focusHandler = function(args) {
            var eventArgs = {
                container: this.textboxWrapper.container,
                event: args,
                value: this.value
            };
            this.trigger("focus", eventArgs);
        }, TextBox.prototype.focusOutHandler = function(args) {
            null === this.previousValue && null === this.value && "" === this.element.value || this.previousValue === this.element.value || this.raiseChangeEvent(args, !0);
            var eventArgs = {
                container: this.textboxWrapper.container,
                event: args,
                value: this.value
            };
            this.trigger("blur", eventArgs);
        }, TextBox.prototype.inputHandler = function(args) {
            var eventArgs = {
                event: args,
                value: this.element.value,
                previousValue: this.value,
                container: this.textboxWrapper.container
            };
            this.trigger("input", eventArgs);
        }, TextBox.prototype.changeHandler = function(args) {
            this.setProperties({
                value: this.element.value
            }, !0), this.raiseChangeEvent(args, !0);
        }, TextBox.prototype.raiseChangeEvent = function(event, interaction) {
            var eventArgs = {
                event: event,
                value: this.value,
                previousValue: this.previousValue,
                container: this.textboxWrapper.container,
                isInteraction: interaction || !1
            };
            this.trigger("change", eventArgs), this.previousValue = this.value;
        }, TextBox.prototype.bindClearEvent = function() {
            this.showClearButton && EventHandler.add(this.textboxWrapper.clearButton, "mousedown touchstart", this.resetInputHandler, this);
        }, TextBox.prototype.resetInputHandler = function(event) {
            event.preventDefault(), this.textboxWrapper.clearButton.classList.contains("e-clear-icon-hide") || Input.setValue("", this.element, this.floatLabelType, this.showClearButton);
        }, TextBox.prototype.unWireEvents = function() {
            EventHandler.remove(this.element, "focus", this.focusHandler), EventHandler.remove(this.element, "blur", this.focusOutHandler), 
            EventHandler.remove(this.element, "input", this.inputHandler), EventHandler.remove(this.element, "change", this.changeHandler);
        }, TextBox.prototype.destroy = function() {
            this.unWireEvents(), this.textboxWrapper.container.parentElement.appendChild(this.cloneElement), 
            detach(this.textboxWrapper.container), this.textboxWrapper = null, this.cloneElement.classList.remove("e-textbox", "e-control"), 
            _super.prototype.destroy.call(this);
        }, TextBox.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, TextBox.prototype.addAttributes = function(attributes) {
            for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
                var key = _a[_i];
                "disabled" === key ? (this.setProperties({
                    enabled: !1
                }, !0), Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container)) : "readonly" === key ? (this.setProperties({
                    readonly: !0
                }, !0), Input.setReadonly(this.readonly, this.element)) : "class" === key ? this.element.classList.add(attributes[key]) : "placeholder" === key ? (this.setProperties({
                    placeholder: attributes[key]
                }, !0), Input.setPlaceholder(this.placeholder, this.element)) : this.element.setAttribute(key, attributes[key]);
            }
        }, TextBox.prototype.removeAttributes = function(attributes) {
            for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                var key = attributes_1[_i];
                "disabled" === key ? (this.setProperties({
                    enabled: !0
                }, !0), Input.setEnabled(this.enabled, this.element, this.floatLabelType, this.textboxWrapper.container)) : "readonly" === key ? (this.setProperties({
                    readonly: !1
                }, !0), Input.setReadonly(this.readonly, this.element)) : "placeholder" === key ? (this.setProperties({
                    placeholder: null
                }, !0), Input.setPlaceholder(this.placeholder, this.element)) : this.element.removeAttribute(key);
            }
        }, __decorate$24([ Property("text") ], TextBox.prototype, "type", void 0), __decorate$24([ Property(!1) ], TextBox.prototype, "readonly", void 0), 
        __decorate$24([ Property(null) ], TextBox.prototype, "value", void 0), __decorate$24([ Property("Never") ], TextBox.prototype, "floatLabelType", void 0), 
        __decorate$24([ Property("") ], TextBox.prototype, "cssClass", void 0), __decorate$24([ Property(null) ], TextBox.prototype, "placeholder", void 0), 
        __decorate$24([ Property(!1) ], TextBox.prototype, "enableRtl", void 0), __decorate$24([ Property(!0) ], TextBox.prototype, "enabled", void 0), 
        __decorate$24([ Property(!1) ], TextBox.prototype, "showClearButton", void 0), __decorate$24([ Property(!1) ], TextBox.prototype, "enablePersistence", void 0), 
        __decorate$24([ Event() ], TextBox.prototype, "created", void 0), __decorate$24([ Event() ], TextBox.prototype, "destroyed", void 0), 
        __decorate$24([ Event() ], TextBox.prototype, "change", void 0), __decorate$24([ Event() ], TextBox.prototype, "blur", void 0), 
        __decorate$24([ Event() ], TextBox.prototype, "focus", void 0), __decorate$24([ Event() ], TextBox.prototype, "input", void 0), 
        TextBox = __decorate$24([ NotifyPropertyChanges ], TextBox);
    }(Component), _inputs = Object.freeze({
        NumericTextBox: NumericTextBox,
        regularExpressions: regularExpressions,
        createMask: createMask,
        applyMask: applyMask,
        wireEvents: wireEvents,
        unwireEvents: unwireEvents,
        bindClearEvent: bindClearEvent,
        unstrippedValue: unstrippedValue,
        strippedValue: strippedValue,
        maskInputFocusHandler: maskInputFocusHandler,
        maskInputBlurHandler: maskInputBlurHandler,
        maskInputDropHandler: maskInputDropHandler,
        mobileRemoveFunction: mobileRemoveFunction,
        setMaskValue: setMaskValue,
        setElementValue: setElementValue,
        maskInput: function(args) {
            var inputEle = getMaskInput(args);
            applyMask.call(inputEle);
            var val = strippedValue.call(this, this.element);
            this.prevValue = val, this.value = val, args.mask && (unwireEvents.call(inputEle), 
            wireEvents.call(inputEle));
        },
        getVal: function(args) {
            return strippedValue.call(getUtilMaskEle(args), args.element);
        },
        getMaskedVal: function(args) {
            return unstrippedValue.call(getUtilMaskEle(args), args.element);
        },
        MaskUndo: MaskUndo,
        MaskedTextBox: MaskedTextBox,
        get Input() {
            return Input;
        },
        TicksData: TicksData,
        LimitData: LimitData,
        TooltipData: TooltipData,
        Slider: Slider,
        regex: regex,
        get ErrorOption() {
            return ErrorOption;
        },
        FormValidator: FormValidator,
        FilesProp: FilesProp,
        ButtonsProps: ButtonsProps,
        AsyncSettings: AsyncSettings,
        Uploader: Uploader,
        ColorPicker: ColorPicker,
        TextBox: TextBox
    }), CheckBoxFilter = function() {
        function CheckBoxFilter(parent, filterSettings, serviceLocator) {
            this.existingPredicate = {}, this.foreignKeyQuery = new Query(), this.filterState = !0, 
            this.values = {}, this.renderEmpty = !1, this.parent = parent, this.id = this.parent.element.id, 
            this.serviceLocator = serviceLocator, this.filterSettings = filterSettings, this.valueFormatter = new ValueFormatter(this.parent.locale), 
            this.cBoxTrue = createCheckBox(this.parent.createElement, !1, {
                checked: !0,
                label: " "
            }), this.cBoxFalse = createCheckBox(this.parent.createElement, !1, {
                checked: !1,
                label: " "
            }), this.cBoxTrue.insertBefore(this.parent.createElement("input", {
                className: "e-chk-hidden",
                attrs: {
                    type: "checkbox"
                }
            }), this.cBoxTrue.firstChild), this.cBoxFalse.insertBefore(this.parent.createElement("input", {
                className: "e-chk-hidden",
                attrs: {
                    type: "checkbox"
                }
            }), this.cBoxFalse.firstChild), this.cBoxFalse.querySelector(".e-frame").classList.add("e-uncheck"), 
            this.parent.enableRtl && addClass([ this.cBoxTrue, this.cBoxFalse ], [ "e-rtl" ]);
        }
        return CheckBoxFilter.prototype.destroy = function() {
            this.closeDialog();
        }, CheckBoxFilter.prototype.wireEvents = function() {
            EventHandler.add(this.dlg, "click", this.clickHandler, this), this.searchHandler = debounce(this.searchBoxKeyUp, 200), 
            EventHandler.add(this.dlg.querySelector(".e-searchinput"), "keyup", this.searchHandler, this);
        }, CheckBoxFilter.prototype.unWireEvents = function() {
            EventHandler.remove(this.dlg, "click", this.clickHandler);
            var elem = this.dlg.querySelector(".e-searchinput");
            elem && EventHandler.remove(elem, "keyup", this.searchHandler);
        }, CheckBoxFilter.prototype.foreignKeyFilter = function(args, fColl, mPredicate) {
            var _this = this, fPredicate = {}, filterCollection = [], query = this.foreignKeyQuery.clone();
            this.options.column.dataSource.executeQuery(query.where(mPredicate)).then(function(e) {
                _this.options.column.columnData = e.result, _this.parent.notify("generateQuery", {
                    predicate: fPredicate,
                    column: _this.options.column
                }), args.ejpredicate = fPredicate.predicate.predicates, fPredicate.predicate.predicates.forEach(function(fpred) {
                    filterCollection.push({
                        field: fpred.field,
                        predicate: "or",
                        matchCase: fpred.ignoreCase,
                        ignoreAccent: fpred.ignoreAccent,
                        operator: fpred.operator,
                        value: fpred.value,
                        type: _this.options.type
                    });
                }), args.filterCollection = filterCollection.length ? filterCollection : fColl.filter(function(col) {
                    return col.field = _this.options.field;
                }), _this.options.handler(args);
            });
        }, CheckBoxFilter.prototype.foreignFilter = function(args, value) {
            var operator = this.parent.getDataModule().isRemote() ? "string" === this.options.column.type ? "contains" : "equal" : this.options.column.type ? "startswith" : "contains", initalPredicate = new Predicate$1(this.options.column.foreignKeyValue, operator, value, !0, this.parent.filterSettings.ignoreAccent);
            this.foreignKeyFilter(args, [ args.filterCollection ], initalPredicate);
        }, CheckBoxFilter.prototype.searchBoxClick = function(e) {
            e.target.classList.contains("e-searchclear") && (this.sInput.value = "", this.refreshCheckboxes(), 
            this.updateSearchIcon(), this.sInput.focus());
        }, CheckBoxFilter.prototype.searchBoxKeyUp = function(e) {
            this.refreshCheckboxes(), this.updateSearchIcon();
        }, CheckBoxFilter.prototype.updateSearchIcon = function() {
            this.sInput.value.length ? classList(this.sIcon, [ "e-chkcancel-icon" ], [ "e-search-icon" ]) : classList(this.sIcon, [ "e-search-icon" ], [ "e-chkcancel-icon" ]);
        }, CheckBoxFilter.prototype.getLocalizedLabel = function(key) {
            return this.localeObj.getConstant(key);
        }, CheckBoxFilter.prototype.updateDataSource = function() {
            var dataSource = this.options.dataSource;
            if (!(dataSource instanceof DataManager)) for (var i = 0; i < dataSource.length; i++) if ("object" != typeof dataSource) {
                var obj = {};
                obj[this.options.field] = dataSource[i], dataSource[i] = obj;
            }
        }, CheckBoxFilter.prototype.updateModel = function(options) {
            this.options = options, this.existingPredicate = options.actualPredicate || {}, 
            this.options.dataSource = options.dataSource, this.updateDataSource(), this.options.type = options.type || "string", 
            this.options.format = options.format || "", this.options.filteredColumns = options.filteredColumns || this.parent.filterSettings.columns, 
            this.options.sortedColumns = options.sortedColumns || this.parent.sortSettings.columns, 
            this.options.query = options.query || new Query(), this.options.allowCaseSensitive = options.allowCaseSensitive || !1, 
            this.values = {}, this.localeObj = options.localeObj, this.isFiltered = options.filteredColumns.length;
        }, CheckBoxFilter.prototype.getAndSetChkElem = function(options) {
            if (this.dlg = this.parent.createElement("div", {
                id: this.id + this.options.type + "_excelDlg",
                className: "e-checkboxfilter e-filter-popup"
            }), this.sBox = this.parent.createElement("div", {
                className: "e-searchcontainer"
            }), !options.hideSearchbox) {
                this.sInput = this.parent.createElement("input", {
                    id: this.id + "_SearchBox",
                    className: "e-searchinput"
                }), this.sIcon = this.parent.createElement("span", {
                    className: "e-searchclear e-search-icon e-icons e-input-group-icon",
                    attrs: {
                        type: "text",
                        title: this.getLocalizedLabel("Search")
                    }
                }), this.searchBox = this.parent.createElement("span", {
                    className: "e-searchbox e-fields"
                }), this.searchBox.appendChild(this.sInput), this.sBox.appendChild(this.searchBox);
                var inputargs = {
                    element: this.sInput,
                    floatLabelType: "Never",
                    properties: {
                        placeholder: this.getLocalizedLabel("Search")
                    }
                };
                Input.createInput(inputargs, this.parent.createElement), this.searchBox.querySelector(".e-input-group").appendChild(this.sIcon);
            }
            return this.spinner = this.parent.createElement("div", {
                className: "e-spinner"
            }), this.cBox = this.parent.createElement("div", {
                id: this.id + this.options.type + "_CheckBoxList",
                className: "e-checkboxlist e-fields"
            }), this.spinner.appendChild(this.cBox), this.sBox.appendChild(this.spinner), this.sBox;
        }, CheckBoxFilter.prototype.showDialog = function(options) {
            var args = {
                requestType: "filterbeforeopen",
                filterModel: this,
                columnName: this.options.field,
                columnType: this.options.type,
                cancel: !1
            };
            this.parent.trigger(actionBegin, args), args.cancel || (this.dialogObj = new Dialog({
                visible: !1,
                content: this.sBox,
                close: this.closeDialog.bind(this),
                width: !isNullOrUndefined(parentsUntil(options.target, "e-bigger")) || this.parent.element.classList.contains("e-device") ? 260 : 255,
                target: this.parent.element,
                animationSettings: {
                    effect: "None"
                },
                buttons: [ {
                    click: this.btnClick.bind(this),
                    buttonModel: {
                        content: this.getLocalizedLabel(this.isExcel ? "OKButton" : "FilterButton"),
                        cssClass: "e-primary",
                        isPrimary: !0
                    }
                }, {
                    click: this.btnClick.bind(this),
                    buttonModel: {
                        cssClass: "e-flat",
                        content: this.getLocalizedLabel(this.isExcel ? "CancelButton" : "ClearButton")
                    }
                } ],
                created: this.dialogCreated.bind(this),
                open: this.dialogOpen.bind(this)
            }), this.dialogObj.appendTo(this.dlg), this.dialogObj.element.style.maxHeight = "800px", 
            this.dialogObj.show(), this.wireEvents(), createSpinner({
                target: this.spinner
            }, this.parent.createElement), showSpinner(this.spinner), this.getAllData());
        }, CheckBoxFilter.prototype.dialogCreated = function(e) {
            Browser.isDevice ? this.dialogObj.position = {
                X: "center",
                Y: "center"
            } : getFilterMenuPostion(this.options.target, this.dialogObj, this.parent), this.parent.notify("filterDialogCreated", e);
        }, CheckBoxFilter.prototype.openDialog = function(options) {
            this.updateModel(options), this.getAndSetChkElem(options), this.showDialog(options);
        }, CheckBoxFilter.prototype.closeDialog = function() {
            if (this.dialogObj && !this.dialogObj.isDestroyed) {
                this.parent.getColumns().filter(function(col) {
                    return col.getFilterItemTemplate();
                }).length && this.parent.destroyTemplate([ "filterItemTemplate" ]), this.parent.notify("filter-menu-close", {
                    field: this.options.field
                }), this.dialogObj.destroy(), this.unWireEvents(), remove(this.dlg), this.dlg = null;
            }
        }, CheckBoxFilter.prototype.clearFilter = function() {
            isActionPrevent(this.parent) ? this.parent.notify(preventBatch, {
                instance: this,
                handler: this.clearFilter
            }) : this.options.handler({
                action: "clear-filter",
                field: this.options.field
            });
        }, CheckBoxFilter.prototype.btnClick = function(e) {
            if (this.filterState) {
                if ("input" === e.target.tagName.toLowerCase()) {
                    var value = e.target.value, args = {
                        action: "filtering",
                        filterCollection: {
                            field: this.options.field,
                            operator: this.parent.getDataModule().isRemote() ? "string" === this.options.column.type ? "contains" : "equal" : "date" === this.options.column.type || "datetime" === this.options.column.type || "boolean" === this.options.column.type ? "equal" : "contains",
                            value: value,
                            matchCase: !1,
                            type: this.options.column.type
                        },
                        field: this.options.field
                    };
                    value ? this.options.column.isForeignColumn() ? this.foreignFilter(args, value) : this.options.handler(args) : this.closeDialog();
                } else {
                    var text = e.target.firstChild.textContent.toLowerCase();
                    this.getLocalizedLabel(this.isExcel ? "OKButton" : "FilterButton").toLowerCase() === text ? this.fltrBtnHandler() : this.getLocalizedLabel("ClearButton").toLowerCase() === text && this.clearFilter();
                }
                this.closeDialog();
            } else "input" !== e.target.tagName.toLowerCase() && (this.clearFilter(), this.closeDialog());
        }, CheckBoxFilter.prototype.fltrBtnHandler = function() {
            var checked = [].slice.call(this.cBox.querySelectorAll(".e-check:not(.e-selectall)")), optr = "equal", caseSen = "string" !== this.options.type || this.options.allowCaseSensitive, defaults = {
                field: this.options.field,
                predicate: "or",
                operator: optr,
                type: this.options.type,
                matchCase: caseSen,
                ignoreAccent: this.parent.filterSettings.ignoreAccent
            }, isNotEqual = this.itemsCnt !== checked.length && this.itemsCnt - checked.length < checked.length;
            isNotEqual && (optr = "notequal", checked = [].slice.call(this.cBox.querySelectorAll(".e-uncheck:not(.e-selectall)")), 
            defaults.predicate = "and", defaults.operator = "notequal");
            var value, fObj, coll = [], searchInput = this.searchBox.querySelector(".e-searchinput");
            if (checked.length !== this.itemsCnt || searchInput.value && "" !== searchInput.value) {
                for (var i = 0; i < checked.length; i++) if (value = this.values[parentsUntil(checked[i], "e-ftrchk").getAttribute("uid")], 
                fObj = extend({}, {
                    value: value
                }, defaults), value && !value.toString().length && (fObj.operator = isNotEqual ? "notequal" : "equal"), 
                coll.push(fObj), isActionPrevent(this.parent)) return void this.parent.notify(preventBatch, {
                    instance: this,
                    handler: this.fltrBtnHandler,
                    arg1: fObj.field,
                    arg2: fObj.predicate,
                    arg3: fObj.operator,
                    arg4: fObj.matchCase,
                    arg5: fObj.ignoreAccent,
                    arg6: fObj.value
                });
                this.initiateFilter(coll);
            } else this.clearFilter();
        }, CheckBoxFilter.prototype.initiateFilter = function(fColl) {
            var predicate, firstVal = fColl[0];
            if (!isNullOrUndefined(firstVal)) {
                predicate = firstVal.ejpredicate ? firstVal.ejpredicate : new Predicate$1(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchCase, firstVal.ignoreAccent);
                for (var j = 1; j < fColl.length; j++) predicate = void 0 !== fColl[j].ejpredicate ? predicate[fColl[j].predicate](fColl[j].ejpredicate) : predicate[fColl[j].predicate](fColl[j].field, fColl[j].operator, fColl[j].value, !fColl[j].matchCase, fColl[j].ignoreAccent);
                var args = {
                    action: "filtering",
                    filterCollection: fColl,
                    field: this.options.field,
                    ejpredicate: Predicate$1.or(predicate)
                };
                this.options.handler(args);
            }
        }, CheckBoxFilter.prototype.refreshCheckboxes = function() {
            var _this = this, val = this.sInput.value, column = this.options.column, query = column.isForeignColumn() ? this.foreignKeyQuery.clone() : this.options.query.clone(), foreignQuery = this.options.query.clone(), parsed = "string" !== this.options.type && parseFloat(val) ? parseFloat(val) : val, operator = this.parent.getDataModule().isRemote() ? "string" === this.options.type ? "contains" : "equal" : this.options.type ? "startswith" : "contains", ignoreAccent = this.parent.filterSettings.ignoreAccent, field = column.isForeignColumn() ? column.foreignKeyValue : column.field;
            parsed = "" === parsed || void 0 === parsed ? void 0 : parsed;
            var predicte;
            "boolean" === this.options.type && (void 0 !== parsed && -1 !== this.getLocalizedLabel("FilterTrue").toLowerCase().indexOf(parsed.toLowerCase()) ? parsed = "true" : void 0 !== parsed && -1 !== this.getLocalizedLabel("FilterFalse").toLowerCase().indexOf(parsed.toLowerCase()) && (parsed = "false"), 
            parsed = "true" === parsed, operator = "equal"), this.addDistinct(query);
            var args = {
                requestType: "filtersearchbegin",
                filterModel: this,
                columnName: field,
                column: column,
                operator: operator,
                matchCase: !0,
                ignoreAccent: ignoreAccent,
                filterChoiceCount: null,
                query: query
            };
            if (this.parent.trigger(actionBegin, args), predicte = new Predicate$1(field, args.operator, parsed, args.matchCase, args.ignoreAccent), 
            "date" === this.options.type || "datetime" === this.options.type) {
                if (parsed = this.valueFormatter.fromView(val, this.options.parserFn, this.options.type), 
                operator = "equal", isNullOrUndefined(parsed) && val.length) return;
                predicte = getDatePredicate({
                    field: field,
                    operator: operator,
                    value: parsed,
                    matchCase: !0,
                    ignoreAccent: ignoreAccent
                }, this.options.type);
            }
            val.length && query.where(predicte), args.filterChoiceCount = isNullOrUndefined(args.filterChoiceCount) ? 1e3 : args.filterChoiceCount;
            var fPredicate = {};
            showSpinner(this.spinner), this.renderEmpty = !1, column.isForeignColumn() && val.length ? column.dataSource.executeQuery(query).then(function(e) {
                var columnData = _this.options.column.columnData;
                _this.options.column.columnData = e.result, _this.parent.notify("generateQuery", {
                    predicate: fPredicate,
                    column: column
                }), fPredicate.predicate.predicates.length ? foreignQuery.where(fPredicate.predicate) : _this.renderEmpty = !0, 
                _this.options.column.columnData = columnData, foreignQuery.take(args.filterChoiceCount), 
                _this.search(args, foreignQuery);
            }) : (query.take(args.filterChoiceCount), this.search(args, query));
        }, CheckBoxFilter.prototype.search = function(args, query) {
            this.parent.dataSource && "result" in this.parent.dataSource ? this.filterEvent(args, query) : this.processSearch(query);
        }, CheckBoxFilter.prototype.getPredicateFromCols = function(columns) {
            for (var predicates = CheckBoxFilter.getPredicate(columns), predicateList = [], fPredicate = {}, foreignColumn = this.parent.getForeignKeyColumns(), _i = 0, _a = Object.keys(predicates); _i < _a.length; _i++) {
                var prop = _a[_i], col = getColumnByForeignKeyValue(prop, foreignColumn);
                col ? (this.parent.notify("generateQuery", {
                    predicate: fPredicate,
                    column: col
                }), fPredicate.predicate.predicates.length && predicateList.push(Predicate$1.or(fPredicate.predicate.predicates))) : predicateList.push(predicates[prop]);
            }
            return predicateList.length && Predicate$1.and(predicateList);
        }, CheckBoxFilter.prototype.addDistinct = function(query) {
            var filteredColumn = DataUtil.distinct(this.parent.filterSettings.columns, "field");
            return filteredColumn.indexOf(this.options.column.field) <= -1 && (filteredColumn = filteredColumn.concat(this.options.column.field)), 
            query.distinct(filteredColumn), query;
        }, CheckBoxFilter.prototype.getAllData = function() {
            var query = this.parent.query.clone();
            query.requiresCount(), this.addDistinct(query);
            var args = {
                requestType: "filterchoicerequest",
                filterModel: this,
                query: query,
                filterChoiceCount: null
            };
            this.parent.trigger(actionBegin, args), args.filterChoiceCount = isNullOrUndefined(args.filterChoiceCount) ? 1e3 : args.filterChoiceCount, 
            query.take(args.filterChoiceCount), this.parent.dataSource && "result" in this.parent.dataSource ? this.filterEvent(args, query) : this.processDataOperation(query, !0);
        }, CheckBoxFilter.prototype.filterEvent = function(args, query) {
            var _this = this;
            this.eventPromise(args, query).promise.then(function(e) {
                _this.dataSuccess(e);
            });
        }, CheckBoxFilter.prototype.eventPromise = function(args, query) {
            var state;
            state = this.getStateEventArgument(query);
            var def = new Deferred();
            return state.dataSource = def.resolve, state.action = args, this.parent.trigger("dataStateChange", state), 
            def;
        }, CheckBoxFilter.prototype.getStateEventArgument = function(query) {
            var adaptr = new UrlAdaptor(), dm = new DataManager({
                url: "",
                adaptor: new UrlAdaptor()
            }), state = adaptr.processQuery(dm, query);
            return JSON.parse(state.data);
        }, CheckBoxFilter.prototype.processDataOperation = function(query, isInitial) {
            var _this = this;
            this.options.dataSource = this.options.dataSource instanceof DataManager ? this.options.dataSource : new DataManager(this.options.dataSource);
            var allPromise = [], runArray = [];
            this.options.column.isForeignColumn() && isInitial && (allPromise.push(this.options.column.dataSource.executeQuery(this.foreignKeyQuery)), 
            runArray.push(function(data) {
                return _this.foreignKeyData = data;
            })), allPromise.push(this.options.dataSource.executeQuery(query)), runArray.push(this.dataSuccess.bind(this));
            var i = 0;
            Promise.all(allPromise).then(function(e) {
                e.forEach(function(data) {
                    runArray[i++](data.result);
                });
            });
        }, CheckBoxFilter.prototype.dataSuccess = function(e) {
            this.fullData = e;
            var query = new Query();
            if (this.options.filteredColumns.length) {
                for (var cols = [], i = 0; i < this.options.filteredColumns.length; i++) this.options.filteredColumns[i].field !== this.options.field && this.options.filteredColumns[i].field !== this.options.foreignKeyValue && cols.push(this.options.filteredColumns[i]);
                var predicate = this.getPredicateFromCols(cols);
                predicate && query.where(predicate);
            }
            var result = new DataManager(this.fullData).executeLocal(query), col = this.options.column;
            this.filteredData = CheckBoxFilter.getDistinct(result, this.options.field, col, this.foreignKeyData).records || [], 
            this.processDataSource(null, !0, this.filteredData), this.sInput.focus();
            var args = {
                requestType: "filterafteropen",
                filterModel: this,
                columnName: this.options.field,
                columnType: this.options.type
            };
            this.parent.trigger(actionComplete, args);
        }, CheckBoxFilter.prototype.processDataSource = function(query, isInitial, dataSource) {
            showSpinner(this.spinner), this.updateResult(), this.createFilterItems(dataSource, isInitial);
        }, CheckBoxFilter.prototype.processSearch = function(query) {
            this.processDataOperation(query);
        }, CheckBoxFilter.prototype.updateResult = function() {
            this.result = {};
            var predicate = this.getPredicateFromCols(this.options.filteredColumns), query = new Query();
            predicate && query.where(predicate);
            for (var _i = 0, result_1 = new DataManager(this.fullData).executeLocal(query); _i < result_1.length; _i++) {
                var res = result_1[_i];
                this.result[getValue(this.options.field, res)] = !0;
            }
        }, CheckBoxFilter.prototype.clickHandler = function(e) {
            var target = e.target, elem = parentsUntil(target, "e-checkbox-wrapper");
            if (parentsUntil(target, "e-searchbox") && this.searchBoxClick(e), elem) {
                var selectAll = elem.querySelector(".e-selectall");
                selectAll ? this.updateAllCBoxes(!selectAll.classList.contains("e-check")) : toogleCheckbox(elem.parentElement), 
                this.updateIndeterminatenBtn(), elem.querySelector(".e-chk-hidden").focus();
            }
        }, CheckBoxFilter.prototype.updateAllCBoxes = function(checked) {
            for (var _i = 0, cBoxes_1 = [].slice.call(this.cBox.querySelectorAll(".e-frame")); _i < cBoxes_1.length; _i++) {
                removeAddCboxClasses(cBoxes_1[_i], checked);
            }
        }, CheckBoxFilter.prototype.dialogOpen = function() {
            this.parent.element.classList.contains("e-device") && (this.dialogObj.element.querySelector(".e-input-group").classList.remove("e-input-focus"), 
            this.dialogObj.element.querySelector(".e-btn").focus());
        }, CheckBoxFilter.prototype.createCheckbox = function(value, checked, data) {
            var elem = checked ? this.cBoxTrue.cloneNode(!0) : this.cBoxFalse.cloneNode(!0), label = elem.querySelector(".e-label");
            return label.innerHTML = !isNullOrUndefined(value) && value.toString().length ? value : this.getLocalizedLabel("Blanks"), 
            addClass([ label ], [ "e-checkboxfiltertext" ]), this.options.template && (label.innerHTML = "", 
            appendChildren(label, this.options.template(data, this.parent, "filterItemTemplate"))), 
            elem;
        }, CheckBoxFilter.prototype.updateIndeterminatenBtn = function() {
            var cnt = this.cBox.children.length - 1, className = [], elem = this.cBox.querySelector(".e-selectall"), selected = this.cBox.querySelectorAll(".e-check:not(.e-selectall)").length, btn = this.dialogObj.btnObj[0];
            btn.disabled = !1, cnt === selected ? className = [ "e-check" ] : selected ? className = [ "e-stop" ] : (className = [ "e-uncheck" ], 
            btn.disabled = !0), this.filterState = !btn.disabled, btn.dataBind(), removeClass([ elem ], [ "e-check", "e-stop", "e-uncheck" ]), 
            addClass([ elem ], className);
        }, CheckBoxFilter.prototype.createFilterItems = function(data, isInitial) {
            var cBoxes = this.parent.createElement("div"), btn = this.dialogObj.btnObj[0];
            if (this.itemsCnt = data.length, data.length && !this.renderEmpty) {
                var selectAllValue = this.getLocalizedLabel("SelectAll"), checkBox = this.createCheckbox(selectAllValue, !1, (_a = {}, 
                _a[this.options.field] = selectAllValue, _a)), selectAll = createCboxWithWrap(getUid("cbox"), checkBox, "e-ftrchk");
                selectAll.querySelector(".e-frame").classList.add("e-selectall"), cBoxes.appendChild(selectAll);
                var predicate = new Predicate$1("field", "equal", this.options.field);
                this.options.foreignKeyValue && (predicate = predicate.or("field", "equal", this.options.foreignKeyValue));
                for (var isColFiltered = new DataManager(this.options.filteredColumns).executeLocal(new Query().where(predicate)).length, i = 0; i < data.length; i++) {
                    var uid = getUid("cbox");
                    this.values[uid] = getValue("ejValue", data[i]);
                    var value = this.valueFormatter.toView(getValue(this.options.field, data[i]), this.options.formatFn), checkbox = this.createCheckbox(value, this.getCheckedState(isColFiltered, this.values[uid]), getValue("dataObj", data[i]));
                    cBoxes.appendChild(createCboxWithWrap(uid, checkbox, "e-ftrchk"));
                }
                this.cBox.innerHTML = "", appendChildren(this.cBox, cBoxes.children), this.updateIndeterminatenBtn(), 
                btn.disabled = !1;
            } else cBoxes.appendChild(this.parent.createElement("span", {
                innerHTML: this.getLocalizedLabel("NoResult")
            })), this.cBox.innerHTML = "", appendChildren(this.cBox, cBoxes.children), btn.disabled = !0;
            this.filterState = !btn.disabled, btn.dataBind();
            var args = {
                requestType: "filterchoicerequest",
                filterModel: this,
                dataSource: this.renderEmpty ? [] : data
            };
            this.parent.trigger(actionComplete, args), hideSpinner(this.spinner);
            var _a;
        }, CheckBoxFilter.prototype.getCheckedState = function(isColFiltered, value) {
            return !this.isFiltered || !isColFiltered || this.result[value];
        }, CheckBoxFilter.getDistinct = function(json, field, column, foreignKeyData$$1) {
            for (var value, len = json.length, result = [], lookup = {}, isForeignKey = column && column.isForeignColumn(); len--; ) if (value = json[len], 
            value = getValue(field, value), !(isNullOrUndefined(value) || value in lookup)) {
                var obj = {};
                if (obj.ejValue = value, lookup[value] = !0, isForeignKey) {
                    var foreignDataObj = getForeignData(column, {}, value, foreignKeyData$$1)[0];
                    setValue("foreignKeyData", foreignDataObj, json[len]), value = getValue(column.foreignKeyValue, foreignDataObj);
                }
                setValue(field, isNullOrUndefined(value) ? null : value, obj), setValue("dataObj", json[len], obj), 
                result.push(obj);
            }
            return DataUtil.group(DataUtil.sort(result, field, DataUtil.fnAscending), "ejValue");
        }, CheckBoxFilter.getPredicate = function(columns) {
            for (var cols = DataUtil.distinct(columns, "field", !0) || [], collection = [], pred = {}, i = 0; i < cols.length; i++) 0 !== (collection = new DataManager(columns).executeLocal(new Query().where("field", "equal", cols[i].field))).length && (pred[cols[i].field] = CheckBoxFilter.generatePredicate(collection));
            return pred;
        }, CheckBoxFilter.generatePredicate = function(cols) {
            var predicate, first, len = cols ? cols.length : 0;
            (first = CheckBoxFilter.updateDateFilter(cols[0])).ignoreAccent = !isNullOrUndefined(first.ignoreAccent) && first.ignoreAccent, 
            predicate = "date" === first.type || "datetime" === first.type ? getDatePredicate(first, first.type) : first.ejpredicate ? first.ejpredicate : new Predicate$1(first.field, first.operator, first.value, !CheckBoxFilter.getCaseValue(first), first.ignoreAccent);
            for (var p = 1; p < len; p++) cols[p] = CheckBoxFilter.updateDateFilter(cols[p]), 
            len > 2 && p > 1 && "or" === cols[p].predicate ? "date" === cols[p].type || "datetime" === cols[p].type ? predicate.predicates.push(getDatePredicate(cols[p], cols[p].type)) : predicate.predicates.push(new Predicate$1(cols[p].field, cols[p].operator, cols[p].value, !CheckBoxFilter.getCaseValue(cols[p]), cols[p].ignoreAccent)) : predicate = "date" === cols[p].type || "datetime" === cols[p].type ? predicate[cols[p].predicate](getDatePredicate(cols[p]), cols[p].type, cols[p].ignoreAccent) : cols[p].ejpredicate ? predicate[cols[p].predicate](cols[p].ejpredicate) : predicate[cols[p].predicate](cols[p].field, cols[p].operator, cols[p].value, !CheckBoxFilter.getCaseValue(cols[p]), cols[p].ignoreAccent);
            return predicate || null;
        }, CheckBoxFilter.getCaseValue = function(filter) {
            return !!isNullOrUndefined(filter.matchCase) || filter.matchCase;
        }, CheckBoxFilter.updateDateFilter = function(filter) {
            return ("date" === filter.type || "datetime" === filter.type || filter.value instanceof Date) && (filter.type = filter.type || "date"), 
            filter;
        }, CheckBoxFilter.prototype.getModuleName = function() {
            return "checkboxFilter";
        }, CheckBoxFilter;
    }(), Data = function() {
        function Data(parent, serviceLocator) {
            this.dataState = {
                isPending: !1,
                resolver: null,
                group: []
            }, this.parent = parent, this.serviceLocator = serviceLocator, this.initDataManager(), 
            this.parent.isDestroyed || "foreignKey" === this.getModuleName() || (this.parent.on(rowsAdded, this.addRows, this), 
            this.parent.on(rowsRemoved, this.removeRows, this), this.parent.on(dataSourceModified, this.initDataManager, this), 
            this.parent.on(destroy$1, this.destroy, this), this.parent.on(updateData, this.crudActions, this), 
            this.parent.on(addDeleteAction, this.getData, this));
        }
        return Data.prototype.getModuleName = function() {
            return "data";
        }, Data.prototype.initDataManager = function() {
            var gObj = this.parent;
            this.dataManager = gObj.dataSource instanceof DataManager ? gObj.dataSource : isNullOrUndefined(gObj.dataSource) ? new DataManager() : new DataManager(gObj.dataSource), 
            gObj.query = gObj.query instanceof Query ? gObj.query : new Query();
        }, Data.prototype.generateQuery = function(skipPage) {
            var query = this.parent.query.clone();
            if ("ExcludeHidden" === this.parent.columnQueryMode) query.select(this.parent.getColumns().filter(function(column) {
                return !(!0 !== column.isPrimaryKey && !1 === column.visible || void 0 === column.field);
            }).map(function(column) {
                return column.field;
            })); else if ("Schema" === this.parent.columnQueryMode) {
                for (var selectQueryFields = [], columns = this.parent.columns, i = 0; i < columns.length; i++) selectQueryFields.push(columns[i].field);
                query.select(selectQueryFields);
            }
            return this.filterQuery(query), this.searchQuery(query), this.aggregateQuery(query), 
            this.sortQuery(query), this.pageQuery(query, skipPage), this.groupQuery(query), 
            query;
        }, Data.prototype.aggregateQuery = function(query, isForeign) {
            return this.parent.aggregates.forEach(function(row) {
                row.columns.forEach(function(column) {
                    (column.type instanceof Array ? column.type : [ column.type ]).forEach(function(type) {
                        return query.aggregate(type.toLowerCase(), column.field);
                    });
                });
            }), query;
        }, Data.prototype.pageQuery = function(query, skipPage) {
            var gObj = this.parent;
            return (gObj.allowPaging || gObj.enableVirtualization) && !0 !== skipPage && (gObj.pageSettings.currentPage = Math.max(1, gObj.pageSettings.currentPage), 
            gObj.pageSettings.pageCount <= 0 && (gObj.pageSettings.pageCount = 8), gObj.pageSettings.pageSize <= 0 && (gObj.pageSettings.pageSize = 12), 
            query.page(gObj.pageSettings.currentPage, gObj.pageSettings.pageSize)), query;
        }, Data.prototype.groupQuery = function(query) {
            var gObj = this.parent;
            if (gObj.allowGrouping && gObj.groupSettings.columns.length) for (var columns = gObj.groupSettings.columns, i = 0, len = columns.length; i < len; i++) {
                var column = this.getColumnByField(columns[i]), isGrpFmt = column.enableGroupByFormat, format = column.format;
                isGrpFmt ? query.group(columns[i], this.formatGroupColumn.bind(this), format) : query.group(columns[i], null);
            }
            return query;
        }, Data.prototype.sortQuery = function(query) {
            var gObj = this.parent;
            if ((gObj.allowSorting || gObj.allowGrouping) && gObj.sortSettings.columns.length) {
                for (var columns = gObj.sortSettings.columns, sortGrp = [], i = columns.length - 1; i > -1; i--) {
                    var col = this.getColumnByField(columns[i].field);
                    col && col.setSortDirection(columns[i].direction);
                    var fn = col.sortComparer && !this.isRemote() ? col.sortComparer.bind(col) : columns[i].direction;
                    -1 === gObj.groupSettings.columns.indexOf(columns[i].field) ? query.sortBy(col.field, fn) : sortGrp.push({
                        direction: fn,
                        field: col.field
                    });
                }
                i = 0;
                for (var len = sortGrp.length; i < len; i++) query.sortBy(sortGrp[i].field, sortGrp[i].direction);
            }
            return query;
        }, Data.prototype.searchQuery = function(query) {
            var _this = this, sSettings = this.parent.searchSettings, fields = sSettings.fields.length ? sSettings.fields : this.parent.getColumns().map(function(f) {
                return f.field;
            }), predicateList = [];
            return this.parent.searchSettings.key.length && (!this.parent.getForeignKeyColumns().some(function(col) {
                return fields.indexOf(col.field) > -1;
            }) || this.dataManager.adaptor.getModulename && "ODataV4Adaptor" === this.dataManager.adaptor.getModulename() ? query.search(sSettings.key, fields, sSettings.operator, sSettings.ignoreCase, sSettings.ignoreAccent) : (fields.forEach(function(columnName) {
                var column = _this.getColumnByField(columnName);
                column.isForeignColumn() ? predicateList = _this.fGeneratePredicate(column, predicateList) : predicateList.push(new Predicate$1(column.field, sSettings.operator, sSettings.key, sSettings.ignoreCase, sSettings.ignoreAccent));
            }), query.where(Predicate$1.or(predicateList)))), query;
        }, Data.prototype.filterQuery = function(query, column, skipFoerign) {
            var gObj = this.parent, predicateList = [], actualFilter = [], foreignColumn = this.parent.getForeignKeyColumns();
            if (gObj.allowFiltering && gObj.filterSettings.columns.length) {
                for (var columns = column || gObj.filterSettings.columns, colType = {}, _i = 0, _a = gObj.getColumns(); _i < _a.length; _i++) {
                    colType[(col = _a[_i]).field] = col.filter.type ? col.filter.type : gObj.filterSettings.type;
                }
                for (var checkBoxCols = [], defaultFltrCols = [], _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {
                    "CheckBox" === colType[(col = columns_1[_b]).field] || "Excel" === colType[col.field] ? checkBoxCols.push(col) : defaultFltrCols.push(col);
                }
                if (checkBoxCols.length) for (var excelPredicate = CheckBoxFilter.getPredicate(checkBoxCols), _c = 0, _d = Object.keys(excelPredicate); _c < _d.length; _c++) {
                    var prop = _d[_c];
                    (col = getColumnByForeignKeyValue(prop, foreignColumn)) && !skipFoerign ? (predicateList = this.fGeneratePredicate(col, predicateList), 
                    actualFilter.push(col)) : predicateList.push(excelPredicate[prop]);
                }
                if (defaultFltrCols.length) for (var _e = 0, defaultFltrCols_1 = defaultFltrCols; _e < defaultFltrCols_1.length; _e++) {
                    var col = defaultFltrCols_1[_e], column_1 = this.getColumnByField(col.field) || getColumnByForeignKeyValue(col.field, this.parent.getForeignKeyColumns()), sType = column_1.type;
                    getColumnByForeignKeyValue(col.field, foreignColumn) && !skipFoerign ? (actualFilter.push(col), 
                    predicateList = this.fGeneratePredicate(column_1, predicateList)) : "date" !== sType && "datetime" !== sType ? predicateList.push(new Predicate$1(col.field, col.operator, col.value, !col.matchCase, this.parent.filterSettings.ignoreAccent)) : predicateList.push(getDatePredicate(col, sType));
                }
                predicateList.length ? query.where(Predicate$1.and(predicateList)) : this.parent.notify("showEmptyGrid", {});
            }
            return query;
        }, Data.prototype.fGeneratePredicate = function(col, predicateList) {
            var fPredicate = {};
            return col && (this.parent.notify("generateQuery", {
                predicate: fPredicate,
                column: col
            }), fPredicate.predicate.predicates.length && predicateList.push(fPredicate.predicate)), 
            predicateList;
        }, Data.prototype.getData = function(args, query) {
            var _this = this;
            void 0 === args && (args = {
                requestType: ""
            });
            var key = this.getKey(args.foreignKeyData && Object.keys(args.foreignKeyData).length ? args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
            if (this.parent.dataSource && "result" in this.parent.dataSource) {
                return this.eventPromise(args, query, key).promise;
            }
            var crud = void 0;
            switch (args.requestType) {
              case "delete":
                query = query || this.generateQuery();
                if (1 === Object.keys(args.data).length) crud = this.dataManager.remove(key, args.data[0], query.fromTable, query); else {
                    var changes = {
                        addedRecords: [],
                        deletedRecords: [],
                        changedRecords: []
                    };
                    changes.deletedRecords = args.data, crud = this.dataManager.saveChanges(changes, key, query.fromTable, query.requiresCount());
                }
                break;

              case "save":
                query = query || this.generateQuery(), args.index = isNullOrUndefined(args.index) ? 0 : args.index, 
                crud = this.dataManager.insert(args.data, query.fromTable, query, args.index);
            }
            return !crud || Array.isArray(crud) || crud.hasOwnProperty("deletedRecords") ? this.insert(query, args) : crud.then(function(result) {
                return _this.insert(query, args);
            });
        }, Data.prototype.insert = function(query, args) {
            return "save" === args.requestType && this.parent.notify("recordAdded", args), this.executeQuery(query);
        }, Data.prototype.executeQuery = function(query) {
            var _this = this;
            if (this.dataManager.ready) {
                var deferred_1 = new Deferred();
                return this.dataManager.ready.then(function(e) {
                    _this.dataManager.executeQuery(query).then(function(result) {
                        deferred_1.resolve(result);
                    });
                }).catch(function(e) {
                    deferred_1.reject(e);
                }), deferred_1.promise;
            }
            return this.dataManager.executeQuery(query);
        }, Data.prototype.formatGroupColumn = function(value, field) {
            this.parent;
            var serviceLocator = this.serviceLocator, column = this.getColumnByField(field), date = value;
            column.type || (column.type = date.getDay ? date.getHours() > 0 || date.getMinutes() > 0 || date.getSeconds() > 0 || date.getMilliseconds() > 0 ? "datetime" : "date" : typeof value), 
            isNullOrUndefined(column.getFormatter()) && setFormatter(serviceLocator, column);
            return ValueFormatter.prototype.toView(value, column.getFormatter());
        }, Data.prototype.crudActions = function(args) {
            var query = this.generateQuery(), promise = null, key = this.getKey(args.foreignKeyData && Object.keys(args.foreignKeyData).length ? args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
            switch (this.parent.dataSource && "result" in this.parent.dataSource && this.eventPromise(args, query, key), 
            args.requestType) {
              case "save":
                promise = this.dataManager.update(key, args.data, query.fromTable, query, args.previousData);
            }
            args.promise = promise, this.parent.notify("crud-Action", args);
        }, Data.prototype.saveChanges = function(changes, key, original) {
            var query = this.generateQuery().requiresCount();
            if ("result" in this.parent.dataSource) {
                this.getStateEventArgument(query);
                var deff = new Deferred(), args = {
                    requestType: "batchsave",
                    changes: changes,
                    key: key,
                    query: query,
                    endEdit: deff.resolve
                };
                return this.setState({
                    isPending: !0,
                    resolver: deff.resolve
                }), this.parent.trigger("dataSourceChanged", args), deff.promise;
            }
            return this.dataManager.saveChanges(changes, key, query.fromTable, query, original);
        }, Data.prototype.getKey = function(keys) {
            if (keys && keys.length) return keys[0];
        }, Data.prototype.isRemote = function() {
            return !0 !== this.dataManager.dataSource.offline && void 0 !== this.dataManager.dataSource.url;
        }, Data.prototype.addRows = function(e) {
            for (var i = e.records.length; i > 0; i--) this.dataManager.dataSource.json.splice(e.toIndex, 0, e.records[i - 1]);
        }, Data.prototype.removeRows = function(e) {
            var json = this.dataManager.dataSource.json;
            this.dataManager.dataSource.json = json.filter(function(value, index) {
                return -1 === e.records.indexOf(value);
            });
        }, Data.prototype.getColumnByField = function(field) {
            var col;
            return this.parent.columnModel.some(function(column) {
                return col = column, column.field === field;
            }) && col;
        }, Data.prototype.destroy = function() {
            this.parent.isDestroyed || (this.parent.off(rowsAdded, this.addRows), this.parent.off(rowsRemoved, this.removeRows), 
            this.parent.off(dataSourceModified, this.initDataManager), this.parent.off(destroy$1, this.destroy), 
            this.parent.off(updateData, this.crudActions), this.parent.off(addDeleteAction, this.getData));
        }, Data.prototype.getState = function() {
            return this.dataState;
        }, Data.prototype.setState = function(state) {
            return this.dataState = state;
        }, Data.prototype.getStateEventArgument = function(query) {
            var adaptr = new UrlAdaptor(), dm = new DataManager({
                url: "",
                adaptor: new UrlAdaptor()
            }), state = adaptr.processQuery(dm, query);
            return extend(JSON.parse(state.data), state.pvtData);
        }, Data.prototype.eventPromise = function(args, query, key) {
            var state, _this = this, dataArgs = args;
            state = this.getStateEventArgument(query);
            var def = new Deferred(), deff = new Deferred();
            if (void 0 !== args.requestType && !1 !== this.dataState.isDataChanged) if (state.action = args, 
            "save" === args.requestType || "delete" === args.requestType) {
                var editArgs = args;
                editArgs.key = key, editArgs.state = state, this.setState({
                    isPending: !0,
                    resolver: deff.resolve
                }), dataArgs.endEdit = deff.resolve, this.parent.trigger("dataSourceChanged", editArgs), 
                deff.promise.then(function(e) {
                    _this.setState({
                        isPending: !0,
                        resolver: def.resolve,
                        group: state.group,
                        aggregates: state.aggregates
                    }), _this.parent.trigger("dataStateChange", state);
                });
            } else this.setState({
                isPending: !0,
                resolver: def.resolve,
                group: state.group,
                aggregates: state.aggregates
            }), this.parent.trigger("dataStateChange", state); else this.setState({}), def.resolve(this.parent.dataSource);
            return def;
        }, Data;
    }(), Row = function() {
        function Row(options) {
            merge(this, options);
        }
        return Row.prototype.clone = function() {
            var row = new Row({});
            return merge(row, this), row.cells = this.cells.map(function(cell) {
                return cell.clone();
            }), row;
        }, Row;
    }(), Cell = function() {
        function Cell(options) {
            this.isSpanned = !1, merge(this, options);
        }
        return Cell.prototype.clone = function() {
            var cell = new Cell({});
            return merge(cell, this), cell;
        }, Cell;
    }(), CellMergeRender = function() {
        function CellMergeRender(serviceLocator, parent) {
            this.serviceLocator = serviceLocator, this.parent = parent;
        }
        return CellMergeRender.prototype.render = function(cellArgs, row, i, td) {
            for (var cellRenderer = this.serviceLocator.getService("cellRendererFactory").getCellRenderer(row.cells[i].cellType || CellType.Data), span = row.cells[i].cellSpan ? row.cells[i].cellSpan : cellArgs.colSpan + i <= row.cells.length ? cellArgs.colSpan : row.cells.length - i, visible = 0, j = i + 1; j < i + span && j < row.cells.length; j++) !1 === row.cells[j].visible ? visible++ : row.cells[j].isSpanned = !0;
            if (visible > 0) {
                for (j = i + span; j < i + span + visible && j < row.cells.length; j++) row.cells[j].isSpanned = !0;
                i + span + visible >= row.cells.length && (span -= i + span + visible - row.cells.length);
            }
            return row.cells[i].cellSpan && (row.data[cellArgs.column.field] = row.cells[i].spanText, 
            td = cellRenderer.render(row.cells[i], row.data, {
                index: isNullOrUndefined(row.index) ? "" : row.index.toString()
            })), span > 1 && attributes(td, {
                colSpan: span.toString(),
                "aria-colSpan": span.toString()
            }), !this.parent.enableColumnVirtualization || row.cells[i].cellSpan || this.containsKey(cellArgs.column.field, cellArgs.data[cellArgs.column.field]) || this.backupMergeCells(cellArgs.column.field, cellArgs.data[cellArgs.column.field], cellArgs.colSpan), 
            td;
        }, CellMergeRender.prototype.backupMergeCells = function(fName, data, span) {
            this.setMergeCells(this.generteKey(fName, data), span);
        }, CellMergeRender.prototype.generteKey = function(fname, data) {
            return fname + "__" + data.toString();
        }, CellMergeRender.prototype.splitKey = function(key) {
            return key.split("__");
        }, CellMergeRender.prototype.containsKey = function(fname, data) {
            return this.getMergeCells().hasOwnProperty(this.generteKey(fname, data));
        }, CellMergeRender.prototype.getMergeCells = function() {
            return this.parent.mergeCells;
        }, CellMergeRender.prototype.setMergeCells = function(key, span) {
            this.parent.mergeCells[key] = span;
        }, CellMergeRender.prototype.updateVirtualCells = function(rows) {
            for (var mCells = this.getMergeCells(), _i = 0, _a = Object.keys(mCells); _i < _a.length; _i++) {
                var key = _a[_i], value = mCells[key], merge = this.splitKey(key), columnIndex = this.getIndexFromAllColumns(merge[0]), vColumnIndices = this.parent.getColumnIndexesInView(), span = value - (vColumnIndices[0] - columnIndex);
                if (columnIndex < vColumnIndices[0] && span > 1) for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {
                    var row = rows_1[_b];
                    if (row.data[merge[0]].toString() === merge[1].toString()) {
                        row.cells[0].cellSpan = span, row.cells[0].spanText = merge[1];
                        break;
                    }
                }
            }
            return rows;
        }, CellMergeRender.prototype.getIndexFromAllColumns = function(field) {
            return iterateArrayOrObject(this.parent.getVisibleColumns(), function(item, index) {
                if (item.field === field) return index;
            })[0];
        }, CellMergeRender;
    }(), RowRenderer = function() {
        function RowRenderer(serviceLocator, cellType, parent) {
            this.cellType = cellType, this.serviceLocator = serviceLocator, this.parent = parent, 
            this.element = this.parent.createElement("tr", {
                attrs: {
                    role: "row"
                }
            });
        }
        return RowRenderer.prototype.render = function(row, columns, attributes$$1, rowTemplate, cloneNode) {
            return this.refreshRow(row, columns, attributes$$1, rowTemplate, cloneNode);
        }, RowRenderer.prototype.refresh = function(row, columns, isChanged, attributes$$1, rowTemplate) {
            isChanged && (row.data = extend({}, row.changes), this.refreshMergeCells(row));
            var node = this.parent.element.querySelector("[data-uid=" + row.uid + "]"), tr = this.refreshRow(row, columns, attributes$$1, rowTemplate), cells = [].slice.call(tr.cells);
            node.innerHTML = "";
            for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                var cell = cells_1[_i];
                node.appendChild(cell);
            }
        }, RowRenderer.prototype.refreshRow = function(row, columns, attributes$$1, rowTemplate, cloneNode) {
            var tr = isNullOrUndefined(cloneNode) ? this.element.cloneNode() : cloneNode, rowArgs = {
                data: row.data
            }, cellArgs = {
                data: row.data
            }, attrCopy = extend({}, attributes$$1, {}), chekBoxEnable = this.parent.getColumns().filter(function(col) {
                return "checkbox" === col.type && col.field;
            })[0], value = !1;
            chekBoxEnable && (value = getObject$1(chekBoxEnable.field, rowArgs.data)), row.isDataRow && (row.isSelected = this.parent.getSelectedRowIndexes().indexOf(row.index) > -1 || value), 
            row.isDataRow && this.parent.isCheckBoxSelection && "Check" === this.parent.checkAllRows && this.parent.enableVirtualization && (row.isSelected = !0, 
            -1 === this.parent.getSelectedRowIndexes().indexOf(row.index) && this.parent.getSelectedRowIndexes().push(row.index)), 
            this.buildAttributeFromRow(tr, row), attributes(tr, attrCopy), setStyleAndAttributes(tr, row.attributes);
            for (var cellRendererFact = this.serviceLocator.getService("cellRendererFactory"), i = 0, len = row.cells.length; i < len; i++) {
                var cell = row.cells[i];
                cell.isSelected = row.isSelected;
                var cellRenderer = cellRendererFact.getCellRenderer(row.cells[i].cellType || CellType.Data), attrs = {
                    index: isNullOrUndefined(row.index) ? "" : row.index.toString()
                };
                row.isExpand && row.cells[i].cellType === CellType.DetailExpand && (attrs.class = "e-detailrowexpand");
                var td = cellRenderer.render(row.cells[i], row.data, attrs);
                if (row.cells[i].cellType !== CellType.Filter) {
                    if ((row.cells[i].cellType === CellType.Data || row.cells[i].cellType === CellType.CommandColumn) && (this.parent.trigger("queryCellInfo", extend(cellArgs, {
                        cell: td,
                        column: cell.column,
                        colSpan: 1,
                        foreignKeyData: row.cells[i].foreignKeyData
                    })), cellArgs.colSpan > 1 || row.cells[i].cellSpan > 1)) {
                        td = new CellMergeRender(this.serviceLocator, this.parent).render(cellArgs, row, i, td);
                    }
                    row.cells[i].isSpanned || tr.appendChild(td);
                }
            }
            var args = {
                row: tr,
                rowHeight: this.parent.rowHeight
            };
            if (row.isDataRow && this.parent.trigger("rowDataBound", extend(rowArgs, args)), 
            this.parent.enableVirtualization && (rowArgs.rowHeight = this.parent.rowHeight), 
            rowArgs.rowHeight ? tr.style.height = rowArgs.rowHeight + "px" : this.parent.rowHeight && (tr.querySelector(".e-headercell") || tr.querySelector(".e-groupcaption")) && (tr.style.height = this.parent.rowHeight + "px"), 
            row.cssClass && tr.classList.add(row.cssClass), this.parent.element.scrollHeight > this.parent.height && this.parent.aggregates.length) for (i = 0; i < this.parent.aggregates.length; i++) {
                if (this.parent.aggregates[i].properties.columns[0].footerTemplate) {
                    var summarycell = tr.querySelectorAll(".e-summarycell");
                    if (summarycell.length) {
                        addClass([ summarycell[summarycell.length - 1] ], [ "e-lastsummarycell" ]);
                    }
                }
            }
            return tr;
        }, RowRenderer.prototype.refreshMergeCells = function(row) {
            for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
                _a[_i].isSpanned = !1;
            }
            return row;
        }, RowRenderer.prototype.buildAttributeFromRow = function(tr, row) {
            var attr = {}, prop_rowindex = "aria-rowindex", prop_dataUID = "data-uid", prop_ariaSelected = "aria-selected", classes = [];
            row.isDataRow && classes.push("e-row"), row.isAltRow && classes.push("e-altrow"), 
            isNullOrUndefined(row.index) || (attr[prop_rowindex] = row.index), row.rowSpan && (attr.rowSpan = row.rowSpan), 
            row.uid && (attr[prop_dataUID] = row.uid), row.isSelected && (attr[prop_ariaSelected] = !0), 
            !1 === row.visible && classes.push("e-hide"), attr.class = classes, setStyleAndAttributes(tr, attr);
        }, RowRenderer;
    }(), RowModelGenerator = function() {
        function RowModelGenerator(parent) {
            this.parent = parent;
        }
        return RowModelGenerator.prototype.generateRows = function(data, args) {
            for (var rows = [], startIndex = this.parent.enableVirtualization ? args.startIndex : 0, i = 0, len = Object.keys(data).length; i < len; i++, 
            startIndex++) rows[i] = this.generateRow(data[i], startIndex);
            return rows;
        }, RowModelGenerator.prototype.ensureColumns = function() {
            var cols = [];
            return (this.parent.detailTemplate || this.parent.childGrid) && cols.push(this.generateCell({}, null, CellType.DetailExpand)), 
            cols;
        }, RowModelGenerator.prototype.generateRow = function(data, index, cssClass, indent) {
            var options = {};
            options.foreignKeyData = {}, options.uid = getUid("grid-row"), options.data = data, 
            options.index = index, options.indent = indent, options.isDataRow = !0, options.isExpand = !1, 
            options.cssClass = cssClass, options.isAltRow = !!this.parent.enableAltRow && index % 2 != 0, 
            options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1, this.refreshForeignKeyRow(options);
            var cells = this.ensureColumns(), row = new Row(options);
            return row.cells = cells.concat(this.generateCells(options)), row;
        }, RowModelGenerator.prototype.refreshForeignKeyRow = function(options) {
            this.parent.getForeignKeyColumns().forEach(function(col) {
                setValue(col.field, getForeignData(col, options.data), options.foreignKeyData);
            });
        }, RowModelGenerator.prototype.generateCells = function(options) {
            var _this = this, tmp = [];
            return this.parent.getColumns().forEach(function(dummy, index) {
                return tmp.push(_this.generateCell(dummy, options.uid, isNullOrUndefined(dummy.commands) ? void 0 : CellType.CommandColumn, null, index, options.foreignKeyData));
            }), tmp;
        }, RowModelGenerator.prototype.generateCell = function(column, rowId, cellType, colSpan, oIndex, foreignKeyData) {
            var opt = {
                visible: column.visible,
                isDataCell: !isNullOrUndefined(column.field || column.template),
                isTemplate: !isNullOrUndefined(column.template),
                rowID: rowId,
                column: column,
                cellType: isNullOrUndefined(cellType) ? CellType.Data : cellType,
                colSpan: colSpan,
                commands: column.commands,
                isForeignKey: column.isForeignColumn && column.isForeignColumn(),
                foreignKeyData: column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData)
            };
            return (opt.isDataCell || "checkbox" === opt.column.type) && (opt.index = oIndex), 
            new Cell(opt);
        }, RowModelGenerator.prototype.refreshRows = function(input) {
            var _this = this;
            return input.forEach(function(row) {
                _this.refreshForeignKeyRow(row), row.cells = _this.generateCells(row);
            }), input;
        }, RowModelGenerator;
    }(), __extends$27 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), SummaryModelGenerator = function() {
        function SummaryModelGenerator(parent) {
            this.parent = parent;
        }
        return SummaryModelGenerator.prototype.getData = function() {
            var _this = this, rows = [];
            return this.parent.aggregates.slice().forEach(function(row) {
                var columns = row.columns.filter(function(column) {
                    return !(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate) || _this.columnSelector(column);
                });
                columns.length && rows.push({
                    columns: columns
                });
            }), rows;
        }, SummaryModelGenerator.prototype.columnSelector = function(column) {
            return void 0 !== column.footerTemplate;
        }, SummaryModelGenerator.prototype.getColumns = function(start, end) {
            var columns = [];
            return this.parent.allowGrouping && this.parent.groupSettings.columns.forEach(function(value) {
                return columns.push(new Column({}));
            }), !this.parent.detailTemplate && isNullOrUndefined(this.parent.childGrid) || columns.push(new Column({})), 
            columns.push.apply(columns, this.parent.getColumns()), isNullOrUndefined(start) ? columns : columns.slice(start, end);
        }, SummaryModelGenerator.prototype.generateRows = function(input, args, start, end) {
            var _this = this;
            if (0 === this.parent.currentViewData.length) return [];
            var data = this.buildSummaryData(input, args), rows = [];
            return this.getData().forEach(function(row, index) {
                rows.push(_this.getGeneratedRow(row, data[index], args ? args.level : void 0, start, end));
            }), rows;
        }, SummaryModelGenerator.prototype.getGeneratedRow = function(summaryRow, data, raw, start, end) {
            var _this = this, tmp = [], indents = this.getIndentByLevel(raw), isDetailGridAlone = !isNullOrUndefined(this.parent.childGrid), indentLength = this.parent.groupSettings.columns.length + (this.parent.detailTemplate || !isNullOrUndefined(this.parent.childGrid) ? 1 : 0);
            this.getColumns(start, end).forEach(function(value, index) {
                return tmp.push(_this.getGeneratedCell(value, summaryRow, index >= indentLength ? _this.getCellType() : CellType.Indent, indents[index], isDetailGridAlone));
            });
            var row = new Row({
                data: data,
                attributes: {
                    class: "e-summaryrow"
                }
            });
            return row.cells = tmp, row.uid = getUid("grid-row"), row.visible = tmp.some(function(cell) {
                return cell.isDataCell && cell.visible;
            }), row;
        }, SummaryModelGenerator.prototype.getGeneratedCell = function(column, summaryRow, cellType, indent, isDetailGridAlone) {
            var sColumn = summaryRow.columns.filter(function(scolumn) {
                return scolumn.columnName === column.field;
            })[0], attrs = {
                style: {
                    textAlign: column.textAlign
                }
            };
            indent && (attrs.class = indent), isNullOrUndefined(indent) && isDetailGridAlone && (attrs.class = "e-detailindentcelltop");
            var opt = {
                visible: column.visible,
                isDataCell: !isNullOrUndefined(sColumn),
                isTemplate: sColumn && !isNullOrUndefined(sColumn.footerTemplate || sColumn.groupFooterTemplate || sColumn.groupCaptionTemplate),
                column: sColumn || {},
                attributes: attrs,
                cellType: cellType
            };
            return new Cell(opt);
        }, SummaryModelGenerator.prototype.buildSummaryData = function(data, args) {
            var _this = this, dummy = [], single = {};
            return this.getData().forEach(function(row) {
                single = {}, row.columns.forEach(function(column) {
                    single = _this.setTemplate(column, args && args.aggregates ? args : data, single);
                }), dummy.push(single);
            }), dummy;
        }, SummaryModelGenerator.prototype.getIndentByLevel = function(data) {
            return this.parent.groupSettings.columns.map(function() {
                return "e-indentcelltop";
            });
        }, SummaryModelGenerator.prototype.setTemplate = function(column, data, single) {
            var _this = this, types = column.type, helper = {}, formatFn = column.getFormatter() || function(a) {
                return a;
            }, group = data;
            return types instanceof Array || (types = [ column.type ]), types.forEach(function(type) {
                var key = column.field + " - " + type.toLowerCase(), disp = column.columnName, val = "Custom" !== type && group.aggregates && key in group.aggregates ? group.aggregates[key] : calculateAggregate(type, group.aggregates ? group : data, column, _this.parent);
                single[disp] = single[disp] || {}, single[disp][key] = val, single[disp][type] = isNullOrUndefined(val) ? " " : formatFn(val), 
                group.field && (single[disp].field = group.field, single[disp].key = group.key);
            }), helper.format = column.getFormatter(), column.setTemplate(helper), single;
        }, SummaryModelGenerator.prototype.getCellType = function() {
            return CellType.Summary;
        }, SummaryModelGenerator;
    }(), GroupSummaryModelGenerator = function(_super) {
        function GroupSummaryModelGenerator() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$27(GroupSummaryModelGenerator, _super), GroupSummaryModelGenerator.prototype.columnSelector = function(column) {
            return void 0 !== column.groupFooterTemplate;
        }, GroupSummaryModelGenerator.prototype.getIndentByLevel = function(level) {
            return void 0 === level && (level = this.parent.groupSettings.columns.length), this.parent.groupSettings.columns.map(function(v, indx) {
                return indx <= level - 1 ? "" : "e-indentcelltop";
            });
        }, GroupSummaryModelGenerator.prototype.getCellType = function() {
            return CellType.GroupSummary;
        }, GroupSummaryModelGenerator;
    }(SummaryModelGenerator), CaptionSummaryModelGenerator = function(_super) {
        function CaptionSummaryModelGenerator() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$27(CaptionSummaryModelGenerator, _super), CaptionSummaryModelGenerator.prototype.columnSelector = function(column) {
            return void 0 !== column.groupCaptionTemplate;
        }, CaptionSummaryModelGenerator.prototype.getData = function() {
            return [ _super.prototype.getData.call(this).reduce(function(prev, cur) {
                return prev.columns = prev.columns.concat(cur.columns), prev;
            }, {
                columns: []
            }) ];
        }, CaptionSummaryModelGenerator.prototype.isEmpty = function() {
            return 0 === (this.getData()[0].columns || []).length;
        }, CaptionSummaryModelGenerator.prototype.getCellType = function() {
            return CellType.CaptionSummary;
        }, CaptionSummaryModelGenerator;
    }(SummaryModelGenerator), __extends$26 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), GroupModelGenerator = function(_super) {
        function GroupModelGenerator(parent) {
            var _this = _super.call(this, parent) || this;
            return _this.rows = [], _this.index = 0, _this.parent = parent, _this.summaryModelGen = new GroupSummaryModelGenerator(parent), 
            _this.captionModelGen = new CaptionSummaryModelGenerator(parent), _this;
        }
        return __extends$26(GroupModelGenerator, _super), GroupModelGenerator.prototype.generateRows = function(data, args) {
            if (0 === this.parent.groupSettings.columns.length) return _super.prototype.generateRows.call(this, data, args);
            this.rows = [], this.index = this.parent.enableVirtualization ? args.startIndex : 0;
            for (var i = 0, len = data.length; i < len; i++) this.getGroupedRecords(0, data[i], data.level);
            return this.index = 0, this.rows;
        }, GroupModelGenerator.prototype.getGroupedRecords = function(index, data, raw) {
            var level = raw;
            if (isNullOrUndefined(data.items)) if (isNullOrUndefined(data.GroupGuid)) this.rows = this.rows.concat(this.generateDataRows(data, index)); else for (var j = 0, len = data.length; j < len; j++) this.getGroupedRecords(index, data[j], data.level); else this.rows = this.rows.concat(this.generateCaptionRow(data, index)), 
            data.items && data.items.length && this.getGroupedRecords(index + 1, data.items, data.items.level), 
            this.parent.aggregates.length && (_a = this.rows).push.apply(_a, this.summaryModelGen.generateRows(data, {
                level: level
            }));
            var _a;
        }, GroupModelGenerator.prototype.getCaptionRowCells = function(field, indent, data) {
            var _this = this, cells = [], visibles = [], column = this.parent.getColumnByField(field), indexes = this.parent.getColumnIndexesInView();
            this.parent.enableColumnVirtualization && (column = this.parent.columns.filter(function(c) {
                return c.field === field;
            })[0]);
            var groupedLen = this.parent.groupSettings.columns.length, gObj = this.parent;
            if (!this.parent.enableColumnVirtualization || -1 !== indexes.indexOf(indent)) {
                for (var i = 0; i < indent; i++) cells.push(this.generateIndentCell());
                cells.push(this.generateCell({}, null, CellType.Expand));
            }
            if (indent = this.parent.enableColumnVirtualization ? 1 : this.parent.getVisibleColumns().length + groupedLen + (gObj.detailTemplate || gObj.childGrid ? 1 : 0) - indent + (this.parent.getVisibleColumns().length ? -1 : 0), 
            this.parent.aggregates.length && !this.captionModelGen.isEmpty()) {
                var captionCells = this.captionModelGen.generateRows(data)[0];
                extend(data, captionCells.data);
                var cIndex_1 = 0;
                captionCells.cells.some(function(cell, index) {
                    return cIndex_1 = index, cell.visible && cell.isDataCell;
                }), visibles = captionCells.cells.slice(cIndex_1).filter(function(cell) {
                    return cell.visible;
                }), captionCells.visible && visibles[0].column.field === this.parent.getVisibleColumns()[0].field && (visibles = visibles.slice(1)), 
                1 === this.parent.getVisibleColumns().length && (visibles = []), indent -= visibles.length;
            }
            var wFlag = !0;
            return (this.parent.enableColumnVirtualization ? this.parent.getColumns() : [ column ]).forEach(function(col, index) {
                var tmpFlag = wFlag && -1 !== indexes.indexOf(indent);
                tmpFlag && (wFlag = !1);
                var cellType = !_this.parent.enableColumnVirtualization || tmpFlag ? CellType.GroupCaption : CellType.GroupCaptionEmpty;
                indent = _this.parent.enableColumnVirtualization && cellType === CellType.GroupCaption ? indent + groupedLen : indent, 
                cells.push(_this.generateCell(column, null, cellType, indent));
            }), cells.push.apply(cells, visibles), cells;
        }, GroupModelGenerator.prototype.generateCaptionRow = function(data, indent) {
            var options = {}, col = this.parent.getColumnByField(data.field);
            options.data = extend({}, data), col && (options.data.field = data.field), options.isDataRow = !1, 
            options.uid = getUid("grid-row");
            var row = new Row(options);
            return row.indent = indent, this.getForeignKeyData(row), row.cells = this.getCaptionRowCells(data.field, indent, row.data), 
            row;
        }, GroupModelGenerator.prototype.getForeignKeyData = function(row) {
            var data = row.data, col = this.parent.getColumnByField(data.field);
            col && col.isForeignColumn && col.isForeignColumn() && setValue("foreignKey", col.valueAccessor(col.foreignKeyValue, getForeignData(col, {}, data.key)[0], col), row.data);
        }, GroupModelGenerator.prototype.generateDataRows = function(data, indent) {
            for (var rows = [], indexes = this.parent.getColumnIndexesInView(), i = 0, len = data.length; i < len; i++) {
                rows[i] = this.generateRow(data[i], this.index, i ? void 0 : "e-firstchildrow", indent);
                for (var j = 0; j < indent; j++) this.parent.enableColumnVirtualization && -1 === indexes.indexOf(indent) || rows[i].cells.unshift(this.generateIndentCell());
                this.index++;
            }
            return rows;
        }, GroupModelGenerator.prototype.generateIndentCell = function() {
            return this.generateCell({}, null, CellType.Indent);
        }, GroupModelGenerator.prototype.refreshRows = function(input) {
            var _this = this, indexes = this.parent.getColumnIndexesInView();
            return input.forEach(function(row) {
                if (row.isDataRow) {
                    row.cells = _this.generateCells(row);
                    for (var j = 0; j < row.indent; j++) _this.parent.enableColumnVirtualization && -1 === indexes.indexOf(row.indent) || row.cells.unshift(_this.generateIndentCell());
                } else {
                    var cRow = _this.generateCaptionRow(row.data, row.indent);
                    row.cells = cRow.cells;
                }
            }), input;
        }, GroupModelGenerator;
    }(RowModelGenerator), ContentRender = function() {
        function ContentRender(parent, serviceLocator) {
            var _this = this;
            this.rows = [], this.freezeRows = [], this.movableRows = [], this.isLoaded = !0, 
            this.drop = function(e) {
                _this.parent.notify(columnDrop, {
                    target: e.target,
                    droppedElement: e.droppedElement
                }), remove(e.droppedElement);
            }, this.rafCallback = function(args) {
                var arg = args;
                return function() {
                    if (_this.ariaService.setBusy(_this.getPanel().firstChild, !1), !_this.parent.isDestroyed) {
                        var rows = _this.rows.slice(0);
                        if (0 !== _this.parent.getFrozenColumns() && (rows = args.isFrozen ? _this.freezeRows : _this.movableRows), 
                        _this.parent.notify(contentReady, {
                            rows: rows,
                            args: arg
                        }), _this.isLoaded && (_this.parent.trigger(dataBound, {}), _this.parent.allowTextWrap && _this.parent.notify(freezeRender, {
                            case: "textwrap"
                        })), arg) {
                            var action = (arg.requestType || "").toLowerCase() + "-complete";
                            _this.parent.notify(action, arg), "batchsave" === args.requestType && (args.cancel = !1, 
                            _this.parent.trigger(actionComplete, args));
                        }
                        _this.isLoaded && _this.parent.hideSpinner();
                    }
                };
            }, this.parent = parent, this.serviceLocator = serviceLocator, this.ariaService = this.serviceLocator.getService("ariaService"), 
            this.generator = this.getModelGenerator(), this.parent.isDestroyed || (this.parent.on(columnVisibilityChanged, this.setVisible, this), 
            this.parent.on(colGroupRefresh, this.colGroupRefresh, this), this.parent.on(uiUpdate, this.enableAfterRender, this));
        }
        return ContentRender.prototype.renderPanel = function() {
            var gObj = this.parent, div = this.parent.createElement("div", {
                className: "e-gridcontent"
            }), innerDiv = this.parent.createElement("div", {
                className: "e-content"
            });
            this.ariaService.setOptions(innerDiv, {
                busy: !1
            }), div.appendChild(innerDiv), this.setPanel(div), gObj.element.appendChild(div);
        }, ContentRender.prototype.renderTable = function() {
            var contentDiv = this.getPanel();
            contentDiv.appendChild(this.createContentTable("_content_table")), this.setTable(contentDiv.querySelector(".e-table")), 
            this.ariaService.setOptions(this.getTable(), {
                multiselectable: "Multiple" === this.parent.selectionSettings.type
            }), this.initializeContentDrop(), this.parent.frozenRows && this.parent.getHeaderContent().classList.add("e-frozenhdrcont");
        }, ContentRender.prototype.createContentTable = function(id) {
            var innerDiv = this.getPanel().firstChild, table = this.parent.createElement("table", {
                className: "e-table",
                attrs: {
                    cellspacing: "0.25px",
                    role: "grid",
                    id: this.parent.element.id + id
                }
            });
            return this.setColGroup(this.parent.element.querySelector(".e-gridheader").querySelector("colgroup").cloneNode(!0)), 
            table.appendChild(this.getColGroup()), table.appendChild(this.parent.createElement("tbody")), 
            innerDiv.appendChild(table), innerDiv;
        }, ContentRender.prototype.splitRows = function(idx) {
            this.parent.getFrozenColumns() && (0 === idx ? (this.freezeRows = this.rows, this.freezeRowElements = this.rowElements) : this.movableRows = this.rows);
        }, ContentRender.prototype.refreshContentRows = function(args) {
            var _this = this;
            void 0 === args && (args = {});
            var gObj = this.parent;
            if (0 !== gObj.currentViewData.length) {
                var tr, hdrTbody, dataSource = gObj.currentViewData, frag = document.createDocumentFragment(), hdrfrag = document.createDocumentFragment(), columns = gObj.getColumns(), frzCols = gObj.getFrozenColumns(), row = new RowRenderer(this.serviceLocator, null, this.parent);
                this.rowElements = [], this.rows = [];
                var fCont = this.getPanel().querySelector(".e-frozencontent"), mCont = this.getPanel().querySelector(".e-movablecontent"), cont = this.getPanel().querySelector(".e-content"), modelData = this.generator.generateRows(dataSource, args);
                isNullOrUndefined(modelData[0].cells[0]) && (mCont.querySelector("tbody").innerHTML = "");
                var idx = modelData[0].cells[0].index;
                if (this.parent.registeredTemplate && this.parent.registeredTemplate.template && !args.isFrozen && this.parent.destroyTemplate([ "template" ]), 
                this.parent.enableColumnVirtualization) {
                    new CellMergeRender(this.serviceLocator, this.parent).updateVirtualCells(modelData);
                }
                this.tbody = frzCols && idx >= frzCols ? mCont.querySelector("tbody") : this.getTable().querySelector("tbody");
                for (var i = 0, len = modelData.length; i < len; i++) {
                    if (gObj.rowTemplate) {
                        var elements = gObj.getRowTemplate()(extend({
                            index: i
                        }, dataSource[i]), gObj, "rowTemplate");
                        if ("TBODY" === elements[0].tagName) {
                            for (var j = 0; j < elements.length; j++) {
                                var isTR = "tr" === elements[j].nodeName.toLowerCase();
                                (isTR || elements[j].querySelectorAll && elements[j].querySelectorAll("tr").length) && (tr = isTR ? elements[j] : elements[j].querySelector("tr"));
                            }
                            gObj.frozenRows && i < gObj.frozenRows ? hdrfrag.appendChild(tr) : frag.appendChild(tr);
                        } else tr = gObj.frozenRows && i < gObj.frozenRows ? appendChildren(hdrfrag, elements) : appendChildren(frag, elements);
                    } else tr = row.render(modelData[i], columns), gObj.frozenRows && i < gObj.frozenRows ? hdrfrag.appendChild(tr) : frag.appendChild(tr);
                    if (this.rows.push(modelData[i]), modelData[i].isDataRow) {
                        var td = tr.querySelectorAll(".e-rowcell:not(.e-hide)")[0];
                        td && td.classList.add("e-detailrowvisible"), this.rowElements.push(tr);
                    }
                    this.ariaService.setOptions(this.getTable(), {
                        colcount: gObj.getColumns().length.toString()
                    });
                }
                this.splitRows(idx), gObj.frozenRows && ((hdrTbody = frzCols ? gObj.getHeaderContent().querySelector(0 === idx ? ".e-frozenheader" : ".e-movableheader").querySelector("tbody") : gObj.getHeaderTable().querySelector("tbody")).innerHTML = "", 
                hdrTbody.appendChild(hdrfrag)), gObj.frozenRows && 0 === idx && cont.offsetHeight === Number(gObj.height) && (cont.style.height = cont.offsetHeight - hdrTbody.offsetHeight + "px"), 
                frzCols && 0 === idx && (this.getPanel().firstChild.style.overflowY = "hidden"), 
                args.rows = this.rows.slice(0), args.isFrozen = 0 !== this.parent.getFrozenColumns() && !args.isFrozen, 
                this.index = idx, getUpdateUsingRaf(function() {
                    _this.parent.notify("beforeFragAppend", args), _this.parent.enableVirtualization || (remove(_this.tbody), 
                    _this.tbody = _this.parent.createElement("tbody")), frzCols ? (_this.tbody.appendChild(frag), 
                    0 === _this.index ? (_this.isLoaded = !1, fCont.querySelector("table").appendChild(_this.tbody)) : (_this.tbody.childElementCount < 1 && _this.tbody.appendChild(_this.parent.createElement("tr").appendChild(_this.parent.createElement("td"))), 
                    _this.isLoaded = !0, mCont.querySelector("table").appendChild(_this.tbody), fCont.style.height = mCont.offsetHeight - getScrollBarWidth() + "px", 
                    mCont.style.overflowY = "auto" !== _this.parent.height ? "scroll" : "auto", fCont.style.borderRightWidth = "1px")) : _this.appendContent(_this.tbody, frag, args), 
                    frzCols && 0 === idx && _this.refreshContentRows(extend({}, args)), frag = null;
                }, this.rafCallback(extend({}, args)));
            }
        }, ContentRender.prototype.appendContent = function(tbody, frag, args) {
            tbody.appendChild(frag), this.getTable().appendChild(tbody);
        }, ContentRender.prototype.getPanel = function() {
            return this.contentPanel;
        }, ContentRender.prototype.setPanel = function(panel) {
            this.contentPanel = panel;
        }, ContentRender.prototype.getTable = function() {
            return this.contentTable;
        }, ContentRender.prototype.setTable = function(table) {
            this.contentTable = table;
        }, ContentRender.prototype.getRows = function() {
            return this.parent.getFrozenColumns() ? this.freezeRows : this.rows;
        }, ContentRender.prototype.getMovableRows = function() {
            return this.movableRows;
        }, ContentRender.prototype.getRowElements = function() {
            return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;
        }, ContentRender.prototype.getMovableRowElements = function() {
            return this.rowElements;
        }, ContentRender.prototype.setRowElements = function(elements) {
            this.rowElements = elements;
        }, ContentRender.prototype.getColGroup = function() {
            return this.colgroup;
        }, ContentRender.prototype.setColGroup = function(colGroup) {
            return this.colgroup = colGroup;
        }, ContentRender.prototype.setVisible = function(columns) {
            var gObj = this.parent, frzCols = gObj.getFrozenColumns(), rows = [];
            if (frzCols) for (var fRows = this.freezeRows, mRows = this.movableRows, rowLen = fRows.length, cellLen = void 0, i = 0, row = void 0; i < rowLen; i++) {
                cellLen = mRows[i].cells.length, row = fRows[i].clone();
                for (var j = 0; j < cellLen; j++) row.cells.push(mRows[i].cells[j]);
                rows.push(row);
            } else rows = this.getRows();
            var testRow;
            rows.some(function(r) {
                return r.isDataRow && (testRow = r), r.isDataRow;
            });
            for (var c = 0, clen = columns.length; c < clen; c++) {
                var column = columns[c], idx = this.parent.getNormalizedColumnIndex(column.uid);
                if (!this.canSkip(column, testRow, idx)) {
                    var displayVal = !0 === column.visible ? "" : "none";
                    if (frzCols) if (idx < frzCols) setStyleAttribute(this.getColGroup().childNodes[idx], {
                        display: displayVal
                    }); else {
                        setStyleAttribute(gObj.getContent().querySelector(".e-movablecontent").querySelector("colgroup").childNodes[idx - frzCols], {
                            display: displayVal
                        });
                    } else setStyleAttribute(this.getColGroup().childNodes[idx], {
                        display: displayVal
                    });
                }
            }
            this.refreshContentRows({
                requestType: "refresh"
            });
        }, ContentRender.prototype.colGroupRefresh = function() {
            if (this.getColGroup()) {
                var colGroup = this.parent.element.querySelector(".e-gridheader").querySelector("colgroup").cloneNode(!0);
                this.getTable().replaceChild(colGroup, this.getColGroup()), this.setColGroup(colGroup);
            }
        }, ContentRender.prototype.initializeContentDrop = function() {
            var gObj = this.parent;
            new Droppable(gObj.getContent(), {
                accept: ".e-dragclone",
                drop: this.drop
            });
        }, ContentRender.prototype.canSkip = function(column, row, index) {
            return isNullOrUndefined(row) || isNullOrUndefined(column.visible) || row.cells[index].visible === column.visible;
        }, ContentRender.prototype.getModelGenerator = function() {
            return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
        }, ContentRender.prototype.renderEmpty = function(tbody) {
            this.getTable().appendChild(tbody), this.parent.frozenRows && (this.parent.getHeaderContent().querySelector("tbody").innerHTML = "");
        }, ContentRender.prototype.setSelection = function(uid, set, clearAll) {
            this.parent.getFrozenColumns() && this.getMovableRows().filter(function(row) {
                return clearAll || uid === row.uid;
            }).forEach(function(row) {
                return row.isSelected = set;
            }), this.getRows().filter(function(row) {
                return clearAll || uid === row.uid;
            }).forEach(function(row) {
                row.isSelected = set, row.cells.forEach(function(cell) {
                    return cell.isSelected = set;
                });
            });
        }, ContentRender.prototype.getRowByIndex = function(index) {
            return this.parent.getDataRows()[index];
        }, ContentRender.prototype.getVirtualRowIndex = function(index) {
            return index;
        }, ContentRender.prototype.getMovableRowByIndex = function(index) {
            return this.parent.getMovableDataRows()[index];
        }, ContentRender.prototype.enableAfterRender = function(e) {
            "group" === e.module && e.enable && (this.generator = this.getModelGenerator());
        }, ContentRender.prototype.setRowObjects = function(rows) {
            this.rows = rows;
        }, ContentRender;
    }(), HeaderRender = function() {
        function HeaderRender(parent, serviceLocator) {
            var _this = this;
            this.frzIdx = 0, this.helper = function(e) {
                var gObj = _this.parent, target = e.sender.target, parentEle = parentsUntil(target, "e-headercell");
                if (!gObj.allowReordering && !gObj.allowGrouping || !isNullOrUndefined(parentEle) && parentEle.querySelectorAll(".e-checkselectall").length > 0) return !1;
                var visualElement = _this.parent.createElement("div", {
                    className: "e-cloneproperties e-dragclone e-headerclone"
                }), element = target.classList.contains("e-headercell") ? target : parentEle;
                if (!element || !gObj.allowReordering && element.classList.contains("e-stackedheadercell")) return !1;
                var col, height = element.offsetHeight, headercelldiv = element.querySelector(".e-headercelldiv") || element.querySelector(".e-stackedheadercelldiv");
                return headercelldiv && (col = element.querySelector(".e-stackedheadercelldiv") ? gObj.getStackedHeaderColumnByHeaderText(headercelldiv.innerText.trim(), gObj.columns) : gObj.getColumnByUid(headercelldiv.getAttribute("e-mappinguid")), 
                _this.column = col, visualElement.setAttribute("e-mappinguid", _this.column.uid)), 
                col && !isNullOrUndefined(col.headerTemplate) ? -1 !== col.headerTemplate.indexOf("#") ? visualElement.innerHTML = document.querySelector(col.headerTemplate).innerHTML.trim() : visualElement.innerHTML = col.headerTemplate : visualElement.innerHTML = headercelldiv ? col.headerText : element.firstElementChild.innerHTML, 
                visualElement.style.width = element.offsetWidth + "px", visualElement.style.height = element.offsetHeight + "px", 
                visualElement.style.lineHeight = (height - 6).toString() + "px", gObj.element.appendChild(visualElement), 
                visualElement;
            }, this.dragStart = function(e) {
                var gObj = _this.parent;
                gObj.element.querySelector(".e-gridpopup").style.display = "none", gObj.notify(columnDragStart, {
                    target: e.target,
                    column: _this.column,
                    event: e.event
                });
            }, this.drag = function(e) {
                var gObj = _this.parent, target = e.target;
                if (target) {
                    var closest$$1 = closest(target, ".e-grid"), cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
                    if (!closest$$1 || closest$$1.getAttribute("id") !== gObj.element.getAttribute("id")) return classList(cloneElement, [ "e-notallowedcur" ], [ "e-defaultcur" ]), 
                    void (gObj.allowReordering && (gObj.element.querySelector(".e-reorderuparrow").style.display = "none", 
                    gObj.element.querySelector(".e-reorderdownarrow").style.display = "none"));
                    gObj.notify(columnDrag, {
                        target: e.target,
                        column: _this.column,
                        event: e.event
                    });
                }
            }, this.dragStop = function(e) {
                var cancel, gObj = _this.parent;
                gObj.element.querySelector(".e-gridpopup").style.display = "none", (!parentsUntil(e.target, "e-headercell") && !parentsUntil(e.target, "e-groupdroparea") || !gObj.allowReordering && parentsUntil(e.target, "e-headercell") || !e.helper.getAttribute("e-mappinguid") && parentsUntil(e.target, "e-groupdroparea")) && (remove(e.helper), 
                cancel = !0), gObj.notify(columnDragStop, {
                    target: e.target,
                    event: e.event,
                    column: _this.column,
                    cancel: cancel
                });
            }, this.drop = function(e) {
                var gObj = _this.parent, uid = e.droppedElement.getAttribute("e-mappinguid"), closest$$1 = closest(e.target, ".e-grid");
                remove(e.droppedElement), closest$$1 && closest$$1.getAttribute("id") !== gObj.element.getAttribute("id") || !gObj.allowReordering && !gObj.allowGrouping || gObj.notify(headerDrop, {
                    target: e.target,
                    uid: uid
                });
            }, this.parent = parent, this.serviceLocator = serviceLocator, this.ariaService = this.serviceLocator.getService("ariaService"), 
            this.widthService = this.serviceLocator.getService("widthService"), this.parent.isDestroyed || (this.parent.on(columnVisibilityChanged, this.setVisible, this), 
            this.parent.on(columnPositionChanged, this.colPosRefresh, this));
        }
        return HeaderRender.prototype.renderPanel = function() {
            var div = this.parent.createElement("div", {
                className: "e-gridheader"
            }), innerDiv = this.parent.createElement("div", {
                className: "e-headercontent"
            });
            div.appendChild(innerDiv), this.setPanel(div), this.parent.element.appendChild(div);
        }, HeaderRender.prototype.renderTable = function() {
            var headerDiv = this.getPanel();
            headerDiv.appendChild(this.createHeaderTable()), this.setTable(headerDiv.querySelector(".e-table")), 
            this.parent.getFrozenColumns() || (this.initializeHeaderDrag(), this.initializeHeaderDrop()), 
            this.parent.notify(headerRefreshed, {
                rows: this.rows,
                args: {
                    isFrozen: 0 !== this.parent.getFrozenColumns()
                }
            });
        }, HeaderRender.prototype.getPanel = function() {
            return this.headerPanel;
        }, HeaderRender.prototype.setPanel = function(panel) {
            this.headerPanel = panel;
        }, HeaderRender.prototype.getTable = function() {
            return this.headerTable;
        }, HeaderRender.prototype.setTable = function(table) {
            this.headerTable = table;
        }, HeaderRender.prototype.getColGroup = function() {
            return this.colgroup;
        }, HeaderRender.prototype.setColGroup = function(colGroup) {
            return this.colgroup = colGroup;
        }, HeaderRender.prototype.getRows = function() {
            return this.getTable().tHead.rows;
        }, HeaderRender.prototype.createHeaderTable = function() {
            var table = this.createTable(), innerDiv = this.getPanel().firstChild;
            return innerDiv.appendChild(table), innerDiv;
        }, HeaderRender.prototype.createTable = function() {
            var gObj = this.parent, table = (gObj.getColumns(), this.parent.createElement("table", {
                className: "e-table",
                attrs: {
                    cellspacing: "0.25px",
                    role: "grid"
                }
            })), findHeaderRow = (this.getPanel().firstChild, this.createHeaderContent()), thead = findHeaderRow.thead, tbody = this.parent.createElement("tbody", {
                className: this.parent.frozenRows ? "" : "e-hide"
            });
            this.caption = this.parent.createElement("caption", {
                innerHTML: this.parent.element.id + "_header_table",
                className: "e-hide"
            });
            for (var bodyCell, colGroup = this.parent.createElement("colgroup"), rowBody = this.parent.createElement("tr"), rows = this.rows = findHeaderRow.rows, i = (new RowRenderer(this.serviceLocator, CellType.Header, this.parent), 
            0), len = rows.length; i < len; i++) for (var j = 0, len_1 = rows[i].cells.length; j < len_1; j++) {
                rows[i].cells[j];
                bodyCell = this.parent.createElement("td"), rowBody.appendChild(bodyCell);
            }
            return (gObj.allowFiltering || gObj.allowSorting || gObj.allowGrouping) && table.classList.add("e-sortfilter"), 
            this.updateColGroup(colGroup), tbody.appendChild(rowBody), table.appendChild(this.setColGroup(colGroup)), 
            table.appendChild(thead), table.appendChild(tbody), table.appendChild(this.caption), 
            this.ariaService.setOptions(table, {
                colcount: gObj.getColumns().length.toString()
            }), table;
        }, HeaderRender.prototype.createHeaderContent = function() {
            var gObj = this.parent, columns = gObj.getColumns(), thead = this.parent.createElement("thead"), colHeader = this.parent.createElement("tr", {
                className: "e-columnheader"
            }), rowRenderer = new RowRenderer(this.serviceLocator, CellType.Header, gObj);
            rowRenderer.element = colHeader;
            var headerRow, rows = [];
            this.colDepth = this.getObjDepth();
            for (var i = 0, len = this.colDepth; i < len; i++) rows[i] = this.generateRow(i), 
            rows[i].cells = [];
            rows = this.ensureColumns(rows), rows = this.getHeaderCells(rows);
            for (i = 0, len = this.colDepth; i < len; i++) headerRow = rowRenderer.render(rows[i], columns), 
            this.parent.rowHeight && headerRow.querySelector(".e-headercell") && (headerRow.style.height = this.parent.rowHeight + "px"), 
            thead.appendChild(headerRow);
            return {
                thead: thead,
                rows: rows
            };
        }, HeaderRender.prototype.updateColGroup = function(colGroup) {
            var col, cols = this.parent.getColumns(), indexes = this.parent.getColumnIndexesInView();
            if (this.parent.allowGrouping) for (var i = 0, len = this.parent.groupSettings.columns.length; i < len; i++) this.parent.enableColumnVirtualization && -1 === indexes.indexOf(i) || (col = this.parent.createElement("col"), 
            colGroup.appendChild(col));
            (this.parent.detailTemplate || this.parent.childGrid) && (col = this.parent.createElement("col"), 
            colGroup.appendChild(col));
            for (i = 0, len = cols.length; i < len; i++) col = this.parent.createElement("col"), 
            !1 === cols[i].visible && setStyleAttribute(col, {
                display: "none"
            }), colGroup.appendChild(col);
            return colGroup;
        }, HeaderRender.prototype.ensureColumns = function(rows) {
            for (var gObj = this.parent, indexes = this.parent.getColumnIndexesInView(), i = 0, len = rows.length; i < len; i++) {
                if (gObj.allowGrouping) for (var c = 0, len_2 = gObj.groupSettings.columns.length; c < len_2; c++) this.parent.enableColumnVirtualization && -1 === indexes.indexOf(c) || rows[i].cells.push(this.generateCell({}, CellType.HeaderIndent));
                (gObj.detailTemplate || gObj.childGrid) && rows[i].cells.push(this.generateCell({}, CellType.DetailHeader));
            }
            return rows;
        }, HeaderRender.prototype.getHeaderCells = function(rows) {
            var thead = this.parent.getHeaderTable() && this.parent.getHeaderTable().querySelector("thead"), cols = this.parent.enableColumnVirtualization ? this.parent.getColumns() : this.parent.columns;
            this.frzIdx = 0;
            for (var i = 0, len = cols.length; i < len; i++) rows = this.appendCells(cols[i], rows, 0, 0 === i, !1, i === len - 1, thead);
            return rows;
        }, HeaderRender.prototype.appendCells = function(cols, rows, index, isFirstObj, isFirstCol, isLastCol, isMovable) {
            var lastCol = isLastCol ? "e-lastcell" : "", frzCols = this.parent.getFrozenColumns();
            if (cols.columns) {
                var colSpan = this.getCellCnt(cols, 0);
                if (colSpan) {
                    var frzObj = this.refreshFrozenHdr(cols.columns, {
                        isPartial: !1,
                        isComp: !0,
                        cnt: 0
                    });
                    (!frzCols || frzCols && (!isMovable && (this.parent.frozenColumns - this.frzIdx > 0 || frzObj.isPartial) || isMovable && colSpan + this.frzIdx > this.parent.frozenColumns && !frzObj.isComp)) && rows[index].cells.push(new Cell({
                        cellType: CellType.StackedHeader,
                        column: cols,
                        colSpan: this.getColSpan(colSpan, isMovable, frzObj.cnt)
                    }));
                }
                for (var i = 0, len = cols.columns.length; i < len; i++) rows = this.appendCells(cols.columns[i], rows, index + 1, isFirstObj, 0 === i, i === len - 1 && isLastCol, isMovable);
            } else (!frzCols || frzCols && (!isMovable && (this.frzIdx < this.parent.frozenColumns || cols.isFrozen) || isMovable && this.frzIdx >= this.parent.frozenColumns && !cols.isFrozen)) && rows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? "" : isFirstCol ? "e-firstcell" : "") + lastCol, index, this.parent.getColumnIndexByUid(cols.uid))), 
            this.frzIdx++;
            return rows;
        }, HeaderRender.prototype.refreshFrozenHdr = function(cols, frzObj) {
            for (var i = 0; i < cols.length; i++) cols[i].columns ? frzObj = this.refreshFrozenHdr(cols[i].columns, frzObj) : (cols[i].isFrozen && (frzObj.isPartial = !0, 
            frzObj.cnt++), frzObj.isComp = frzObj.isComp && (cols[i].isFrozen || this.parent.getColumnIndexByField(cols[i].field) < this.parent.frozenColumns));
            return frzObj;
        }, HeaderRender.prototype.getColSpan = function(colSpan, isMovable, frozenCnt) {
            var frzCol = this.parent.frozenColumns;
            return this.parent.getFrozenColumns() && this.frzIdx + colSpan > frzCol && (isMovable ? colSpan = colSpan - (frzCol > this.frzIdx ? frzCol - this.frzIdx : 0) - frozenCnt : colSpan -= colSpan - (frzCol > this.frzIdx ? frzCol + frozenCnt - this.frzIdx : frozenCnt)), 
            colSpan;
        }, HeaderRender.prototype.generateRow = function(index) {
            return new Row({});
        }, HeaderRender.prototype.generateCell = function(column, cellType, rowSpan, className, rowIndex, colIndex) {
            var opt = {
                visible: column.visible,
                isDataCell: !1,
                isTemplate: !isNullOrUndefined(column.headerTemplate),
                rowID: "",
                column: column,
                cellType: cellType,
                rowSpan: rowSpan,
                className: className,
                index: rowIndex,
                colIndex: colIndex
            };
            return (!opt.rowSpan || opt.rowSpan < 2) && delete opt.rowSpan, new Cell(opt);
        }, HeaderRender.prototype.setVisible = function(columns) {
            for (var idx, gObj = this.parent, displayVal = ([].slice.call(this.getRows()), ""), frzCols = gObj.getFrozenColumns(), c = 0, clen = columns.length; c < clen; c++) {
                var column = columns[c];
                if (idx = gObj.getNormalizedColumnIndex(column.uid), !1 === column.visible && (displayVal = "none"), 
                frzCols) if (idx < frzCols) setStyleAttribute(this.getColGroup().children[idx], {
                    display: displayVal
                }); else {
                    setStyleAttribute(gObj.getHeaderContent().querySelector(".e-movableheader").querySelector("colgroup").children[idx - frzCols], {
                        display: displayVal
                    });
                } else setStyleAttribute(this.getColGroup().children[idx], {
                    display: displayVal
                });
                this.refreshUI();
            }
        }, HeaderRender.prototype.colPosRefresh = function() {
            this.refreshUI();
        }, HeaderRender.prototype.refreshUI = function() {
            var headerDiv = this.getPanel(), table = this.getTable(), frzCols = this.parent.getFrozenColumns();
            if (this.getTable()) {
                remove(this.getTable()), table.removeChild(table.firstChild), table.removeChild(table.childNodes[0]);
                var colGroup = this.parent.createElement("colgroup"), findHeaderRow = this.createHeaderContent();
                this.rows = findHeaderRow.rows, table.insertBefore(findHeaderRow.thead, table.firstChild), 
                this.updateColGroup(colGroup), table.insertBefore(this.setColGroup(colGroup), table.firstChild), 
                this.setTable(table), this.appendContent(table), this.parent.notify(colGroupRefresh, {}), 
                this.widthService.setWidthToColumns(), this.parent.updateDefaultCursor(), frzCols || this.initializeHeaderDrag();
                for (var rows = [].slice.call(headerDiv.querySelectorAll("tr.e-columnheader")), _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                    var row = rows_1[_i], gCells = [].slice.call(row.querySelectorAll(".e-grouptopleftcell"));
                    gCells.length && gCells[gCells.length - 1].classList.add("e-lastgrouptopleftcell");
                }
                frzCols || this.parent.notify(headerRefreshed, {
                    rows: this.rows,
                    args: {
                        isFrozen: 0 !== this.parent.getFrozenColumns()
                    }
                }), this.parent.allowTextWrap && "Header" === this.parent.textWrapSettings.wrapMode && wrap(rows, !0);
            }
        }, HeaderRender.prototype.appendContent = function(table) {
            this.getPanel().firstChild.appendChild(table);
        }, HeaderRender.prototype.getObjDepth = function() {
            for (var max = 0, cols = this.parent.columns, i = 0, len = cols.length; i < len; i++) {
                var depth = this.checkDepth(cols[i], 0);
                max < depth && (max = depth);
            }
            return max + 1;
        }, HeaderRender.prototype.checkDepth = function(col, index) {
            var max = index, indices = [];
            if (col.columns) {
                index++;
                for (var i = 0, len = col.columns.length; i < len; i++) indices[i] = this.checkDepth(col.columns[i], index);
                for (var j = 0; j < indices.length; j++) max < indices[j] && (max = indices[j]);
                index = max;
            }
            return index;
        }, HeaderRender.prototype.getCellCnt = function(col, cnt) {
            if (col.columns) for (var i = 0, len = col.columns.length; i < len; i++) cnt = this.getCellCnt(col.columns[i], cnt); else col.visible && cnt++;
            return cnt;
        }, HeaderRender.prototype.initializeHeaderDrag = function() {
            var gObj = this.parent;
            if (this.parent.allowReordering || this.parent.allowGrouping && this.parent.groupSettings.showDropArea) for (var headerRows = [].slice.call(gObj.getHeaderContent().querySelectorAll(".e-columnheader")), i = 0, len = headerRows.length; i < len; i++) new Draggable(headerRows[i], {
                dragTarget: ".e-headercell",
                distance: 5,
                helper: this.helper,
                dragStart: this.dragStart,
                drag: this.drag,
                dragStop: this.dragStop,
                abort: ".e-rhandler"
            });
        }, HeaderRender.prototype.initializeHeaderDrop = function() {
            var gObj = this.parent;
            new Droppable(gObj.getHeaderContent(), {
                accept: ".e-dragclone",
                drop: this.drop
            });
        }, HeaderRender;
    }(), CellRenderer = function() {
        function CellRenderer(parent, locator) {
            this.localizer = locator.getService("localization"), this.formatter = locator.getService("valueFormatter"), 
            this.parent = parent, this.element = this.parent.createElement("TD", {
                className: "e-rowcell",
                attrs: {
                    role: "gridcell",
                    tabindex: "-1"
                }
            }), this.rowChkBox = this.parent.createElement("input", {
                className: "e-checkselect",
                attrs: {
                    type: "checkbox"
                }
            });
        }
        return CellRenderer.prototype.getGui = function() {
            return "";
        }, CellRenderer.prototype.format = function(column, value, data) {
            return isNullOrUndefined(column.format) || (value = this.formatter.toView(value, column.getFormatter())), 
            isNullOrUndefined(value) ? "" : value.toString();
        }, CellRenderer.prototype.evaluate = function(node, cell, data, attributes, fData) {
            var result;
            if (cell.column.template) {
                var dummyData = extend({}, data, (_a = {}, _a.foreignKeyData = fData, _a));
                return result = cell.column.getColumnTemplate()(extend({
                    index: attributes.index
                }, dummyData), this.parent, "template"), appendChildren(node, result), result = null, 
                node.setAttribute("aria-label", node.innerText + " is template cell column header " + cell.column.headerText), 
                !1;
            }
            return !0;
            var _a;
        }, CellRenderer.prototype.invokeFormatter = function(column, value, data) {
            if (!isNullOrUndefined(column.formatter)) if (doesImplementInterface(column.formatter, "getValue")) {
                value = new (0, column.formatter)().getValue(column, data);
            } else value = "function" == typeof column.formatter ? column.formatter(column, data) : column.formatter.getValue(column, data);
            return value;
        }, CellRenderer.prototype.render = function(cell, data, attributes) {
            return this.refreshCell(cell, data, attributes);
        }, CellRenderer.prototype.refreshTD = function(td, cell, data, attributes) {
            var node = this.refreshCell(cell, data, attributes);
            td.innerHTML = "";
            for (var _i = 0, elements_1 = [].slice.call(node.childNodes); _i < elements_1.length; _i++) {
                var elem = elements_1[_i];
                td.appendChild(elem);
            }
        }, CellRenderer.prototype.refreshCell = function(cell, data, attributes) {
            var fData, node = this.element.cloneNode(), column = cell.column;
            cell.isForeignKey && (fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : "", 
            _a));
            var innerHtml = this.getGui(), value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) : this.getValue(column.field, data, column);
            if ("date" !== column.type && "datetime" !== column.type || isNullOrUndefined(value) || (value = new Date(value)), 
            value = this.format(column, value, data), innerHtml = value.toString(), "boolean" === column.type && !column.displayAsCheckBox) {
                var localeStr = "true" !== value && "false" !== value ? null : "true" === value ? "True" : "False";
                innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;
            }
            var fromFormatter = this.invokeFormatter(column, value, data);
            if (innerHtml = isNullOrUndefined(column.formatter) ? innerHtml : isNullOrUndefined(fromFormatter) ? "" : fromFormatter.toString(), 
            node.setAttribute("aria-label", ("" === innerHtml ? "empty" : innerHtml) + " column header " + cell.column.headerText), 
            isNullOrUndefined(cell.column.headerText) || node.setAttribute("aria-label", innerHtml + " column header " + cell.column.headerText), 
            this.evaluate(node, cell, data, attributes, fData) && "checkbox" !== column.type) this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : "innerHTML"); else if ("checkbox" === column.type) {
                node.classList.add("e-gridchkbox"), node.setAttribute("aria-label", "checkbox"), 
                value = !!this.parent.selectionSettings.persistSelection && "true" === value;
                (checkWrap = createCheckBox(this.parent.createElement, !1, {
                    checked: value,
                    label: " "
                })).insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild), node.appendChild(checkWrap);
            }
            if ("Check" === this.parent.checkAllRows && this.parent.enableVirtualization && (cell.isSelected = !0), 
            this.setAttributes(node, cell, attributes), "boolean" === column.type && column.displayAsCheckBox) {
                var checked = isNaN(parseInt(value.toString(), 10)) ? "true" === value : parseInt(value.toString(), 10) > 0, checkWrap = createCheckBox(this.parent.createElement, !1, {
                    checked: checked,
                    label: " "
                });
                node.innerHTML = "", checkWrap.classList.add("e-checkbox-disabled"), node.appendChild(checkWrap), 
                node.setAttribute("aria-label", checked + " column header " + cell.column.headerText);
            }
            return node;
            var _a;
        }, CellRenderer.prototype.appendHtml = function(node, innerHtml, property) {
            return void 0 === property && (property = "innerHTML"), node[property] = innerHtml, 
            node;
        }, CellRenderer.prototype.setAttributes = function(node, cell, attributes) {
            var column = cell.column;
            this.buildAttributeFromCell(node, cell, "checkbox" === column.type), setStyleAndAttributes(node, attributes), 
            setStyleAndAttributes(node, cell.attributes), column.customAttributes && setStyleAndAttributes(node, column.customAttributes), 
            column.textAlign && (node.style.textAlign = column.textAlign), "Clip" === column.clipMode ? node.classList.add("e-gridclip") : "EllipsisWithTooltip" === column.clipMode && node.classList.add("e-ellipsistooltip");
        }, CellRenderer.prototype.buildAttributeFromCell = function(node, cell, isCheckBoxType) {
            var attr = {}, classes = [];
            cell.colSpan && (attr.colSpan = cell.colSpan), cell.rowSpan && (attr.rowSpan = cell.rowSpan), 
            cell.isTemplate && classes.push("e-templatecell"), cell.isSelected && (classes.push.apply(classes, [ "e-selectionbackground", "e-active" ]), 
            isCheckBoxType && node.querySelector(".e-frame").classList.add("e-check")), isNullOrUndefined(cell.index) || (attr["aria-colindex"] = cell.index), 
            cell.visible || classes.push("e-hide"), attr.class = classes, setStyleAndAttributes(node, attr);
        }, CellRenderer.prototype.getValue = function(field, data, column) {
            return column.valueAccessor(field, data, column);
        }, CellRenderer;
    }(), AriaService = function() {
        function AriaService() {}
        return AriaService.prototype.setOptions = function(target, options) {
            Object.keys(options).forEach(function(name) {
                return setStateAndProperties(target, config[name], options[name]);
            });
        }, AriaService.prototype.setExpand = function(target, expand) {
            setStateAndProperties(target, config.expand, expand);
        }, AriaService.prototype.setSort = function(target, direction) {
            setStateAndProperties(target, config.sort, direction, "boolean" == typeof direction);
        }, AriaService.prototype.setBusy = function(target, isBusy) {
            setStateAndProperties(target, config.busy, isBusy), setStateAndProperties(target, config.invalid, null, !0);
        }, AriaService.prototype.setGrabbed = function(target, isGrabbed, remove) {
            setStateAndProperties(target, config.grabbed, isGrabbed, remove);
        }, AriaService.prototype.setDropTarget = function(target, isTarget) {
            setStateAndProperties(target, config.dropeffect, "copy", !isTarget);
        }, AriaService;
    }(), config = {
        expand: "aria-expanded",
        role: "role",
        selected: "aria-selected",
        multiselectable: "aria-multiselectable",
        sort: "aria-sort",
        busy: "aria-busy",
        invalid: "aria-invalid",
        grabbed: "aria-grabbed",
        dropeffect: "aria-dropeffect",
        haspopup: "aria-haspopup",
        level: "aria-level",
        colcount: "aria-colcount"
    }, __extends$28 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), HeaderCellRenderer = function(_super) {
        function HeaderCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TH", {
                className: "e-headercell",
                attrs: {
                    role: "columnheader",
                    tabindex: "-1"
                }
            }), _this.ariaService = new AriaService(), _this.hTxtEle = _this.parent.createElement("span", {
                className: "e-headertext"
            }), _this.sortEle = _this.parent.createElement("div", {
                className: "e-sortfilterdiv e-icons"
            }), _this.gui = _this.parent.createElement("div"), _this.chkAllBox = _this.parent.createElement("input", {
                className: "e-checkselectall",
                attrs: {
                    type: "checkbox"
                }
            }), _this;
        }
        return __extends$28(HeaderCellRenderer, _super), HeaderCellRenderer.prototype.getGui = function() {
            return this.gui.cloneNode();
        }, HeaderCellRenderer.prototype.render = function(cell, data, attributes) {
            var node = this.element.cloneNode(), fltrMenuEle = this.parent.createElement("div", {
                className: "e-filtermenudiv e-icons e-icon-filter"
            });
            return this.prepareHeader(cell, node, fltrMenuEle);
        }, HeaderCellRenderer.prototype.refresh = function(cell, node) {
            this.clean(node);
            var fltrMenuEle = this.parent.createElement("div", {
                className: "e-filtermenudiv e-icons e-icon-filter"
            });
            return this.prepareHeader(cell, node, fltrMenuEle);
        }, HeaderCellRenderer.prototype.clean = function(node) {
            node.innerHTML = "";
        }, HeaderCellRenderer.prototype.prepareHeader = function(cell, node, fltrMenuEle) {
            var column = cell.column, ariaAttr = {}, innerDIV = this.getGui();
            if (attributes(innerDIV, {
                "e-mappinguid": column.uid,
                class: "e-headercelldiv"
            }), "checkbox" !== column.type) {
                var value = column.headerText, headerText = this.hTxtEle.cloneNode();
                headerText[column.getDomSetter()] = value, innerDIV.appendChild(headerText);
            } else {
                column.editType = "booleanedit";
                var checkAllWrap = createCheckBox(this.parent.createElement, !1, {
                    checked: !1,
                    label: " "
                });
                checkAllWrap.insertBefore(this.chkAllBox.cloneNode(), checkAllWrap.firstChild), 
                innerDIV.appendChild(checkAllWrap), innerDIV.classList.add("e-headerchkcelldiv");
            }
            if (this.buildAttributeFromCell(node, cell), this.appendHtml(node, innerDIV), node.appendChild(this.sortEle.cloneNode()), 
            this.parent.allowFiltering && "FilterBar" !== this.parent.filterSettings.type && column.allowFiltering && !isNullOrUndefined(column.field) && (!this.parent.showColumnMenu || !column.showColumnMenu)) {
                attributes(fltrMenuEle, {
                    "e-mappinguid": "e-flmenu-" + column.uid
                }), node.classList.add("e-fltr-icon");
                var matchFlColumns = [];
                if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFlColumns.length) for (var index = 0; index < this.parent.columns.length; index++) for (var count = 0; count < this.parent.filterSettings.columns.length; count++) if (this.parent.filterSettings.columns[count].field === column.field) {
                    fltrMenuEle.classList.add("e-filtered"), matchFlColumns.push(column.field);
                    break;
                }
                node.appendChild(fltrMenuEle.cloneNode());
            }
            cell.className && node.classList.add(cell.className), column.customAttributes && setStyleAndAttributes(node, column.customAttributes), 
            column.allowSorting && (ariaAttr.sort = "none"), column.allowGrouping && (ariaAttr.grabbed = !1), 
            node = this.extendPrepareHeader(column, node);
            var result, gridObj = this.parent, colIndex = gridObj.getColumnIndexByField(column.field);
            if (isNullOrUndefined(column.headerTemplate) || (result = column.getHeaderTemplate()(extend({
                index: colIndex
            }, column), gridObj, "headerTemplate"), node.firstElementChild.innerHTML = "", appendChildren(node.firstElementChild, result)), 
            this.ariaService.setOptions(node, ariaAttr), !isNullOrUndefined(column.headerTextAlign) || !isNullOrUndefined(column.textAlign)) {
                var alignment = column.headerTextAlign || column.textAlign;
                innerDIV.style.textAlign = alignment, "Right" === alignment || "Left" === alignment ? node.classList.add("Right" === alignment ? "e-rightalign" : "e-leftalign") : "Center" === alignment && node.classList.add("e-centeralign");
            }
            return "Clip" === column.clipMode ? node.classList.add("e-gridclip") : "EllipsisWithTooltip" === column.clipMode && node.classList.add("e-ellipsistooltip"), 
            node.setAttribute("aria-rowspan", (isNullOrUndefined(cell.rowSpan) ? 1 : cell.rowSpan).toString()), 
            node.setAttribute("aria-colspan", "1"), this.parent.trigger("headerCellInfo", {
                cell: cell,
                node: node
            }), node;
        }, HeaderCellRenderer.prototype.extendPrepareHeader = function(column, node) {
            if (this.parent.showColumnMenu && column.showColumnMenu && !isNullOrUndefined(column.field)) {
                var element = this.parent.createElement("div", {
                    className: "e-icons e-columnmenu"
                }), matchFilteredColumns = [];
                if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFilteredColumns.length) for (var i = 0; i < this.parent.columns.length; i++) for (var j = 0; j < this.parent.filterSettings.columns.length; j++) if (this.parent.filterSettings.columns[j].field === column.field) {
                    element.classList.add("e-filtered"), matchFilteredColumns.push(column.field);
                    break;
                }
                node.classList.add("e-fltr-icon"), node.appendChild(element);
            }
            if (this.parent.allowResizing) {
                var handler = this.parent.createElement("div");
                handler.className = column.allowResizing ? "e-rhandler e-rcursor" : "e-rsuppress", 
                node.appendChild(handler);
            }
            return node;
        }, HeaderCellRenderer.prototype.appendHtml = function(node, innerHtml) {
            return node.appendChild(innerHtml), node;
        }, HeaderCellRenderer;
    }(CellRenderer), __extends$29 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), StackedHeaderCellRenderer = function(_super) {
        function StackedHeaderCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TH", {
                className: "e-headercell e-stackedheadercell",
                attrs: {
                    role: "columnheader",
                    tabindex: "-1"
                }
            }), _this;
        }
        return __extends$29(StackedHeaderCellRenderer, _super), StackedHeaderCellRenderer.prototype.render = function(cell, data, attributes) {
            var node = this.element.cloneNode(), div = this.parent.createElement("div", {
                className: "e-stackedheadercelldiv"
            });
            return node.appendChild(div), div.innerHTML = cell.column.headerText, cell.column.toolTip && node.setAttribute("title", cell.column.toolTip), 
            isNullOrUndefined(cell.column.textAlign) || (div.style.textAlign = cell.column.textAlign), 
            node.setAttribute("colspan", cell.colSpan.toString()), node.setAttribute("aria-colspan", cell.colSpan.toString()), 
            node.setAttribute("aria-rowspan", "1"), this.parent.trigger("headerCellInfo", {
                cell: cell,
                node: node
            }), node;
        }, StackedHeaderCellRenderer;
    }(CellRenderer), __extends$30 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), IndentCellRenderer = function(_super) {
        function IndentCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TD", {
                className: "e-indentcell"
            }), _this;
        }
        return __extends$30(IndentCellRenderer, _super), IndentCellRenderer.prototype.render = function(cell, data) {
            var node = this.element.cloneNode();
            return setStyleAndAttributes(node, cell.attributes), node;
        }, IndentCellRenderer;
    }(CellRenderer), __extends$31 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), GroupCaptionCellRenderer = function(_super) {
        function GroupCaptionCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TD", {
                className: "e-groupcaption",
                attrs: {
                    role: "gridcell",
                    tabindex: "-1"
                }
            }), _this;
        }
        return __extends$31(GroupCaptionCellRenderer, _super), GroupCaptionCellRenderer.prototype.render = function(cell, data) {
            var fKeyValue, node = this.element.cloneNode(), gObj = this.parent;
            data.headerText = cell.column.headerText, cell.isForeignKey && (fKeyValue = this.format(cell.column, cell.column.valueAccessor("foreignKey", data, cell.column)));
            var value = cell.isForeignKey ? fKeyValue : cell.column.enableGroupByFormat ? data.key : this.format(cell.column, cell.column.valueAccessor("key", data, cell.column));
            return isNullOrUndefined(gObj.groupSettings.captionTemplate) ? node.innerHTML = cell.column.headerText + ": " + value + " - " + data.count + " " + (data.count < 2 ? this.localizer.getConstant("Item") : this.localizer.getConstant("Items")) : appendChildren(node, -1 !== gObj.groupSettings.captionTemplate.indexOf("#") ? templateCompiler(document.querySelector(gObj.groupSettings.captionTemplate).innerHTML.trim())(data) : templateCompiler(gObj.groupSettings.captionTemplate)(data)), 
            node.setAttribute("colspan", cell.colSpan.toString()), node.setAttribute("aria-label", node.innerHTML + " is groupcaption cell"), 
            node.setAttribute("title", node.innerHTML), node;
        }, GroupCaptionCellRenderer;
    }(CellRenderer), GroupCaptionEmptyCellRenderer = function(_super) {
        function GroupCaptionEmptyCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TD", {
                className: "e-groupcaption"
            }), _this;
        }
        return __extends$31(GroupCaptionEmptyCellRenderer, _super), GroupCaptionEmptyCellRenderer.prototype.render = function(cell, data) {
            var node = this.element.cloneNode();
            return node.innerHTML = "&nbsp;", node.setAttribute("colspan", cell.colSpan.toString()), 
            node;
        }, GroupCaptionEmptyCellRenderer;
    }(CellRenderer), __extends$32 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), ExpandCellRenderer = function(_super) {
        function ExpandCellRenderer() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$32(ExpandCellRenderer, _super), ExpandCellRenderer.prototype.render = function(cell, data) {
            var node = this.element.cloneNode();
            return node.className = "e-recordplusexpand", node.setAttribute("ej-mappingname", data.field), 
            node.setAttribute("ej-mappingvalue", data.key), node.setAttribute("aria-expanded", "true"), 
            node.setAttribute("tabindex", "-1"), node.appendChild(this.parent.createElement("div", {
                className: "e-icons e-gdiagonaldown e-icon-gdownarrow"
            })), node;
        }, ExpandCellRenderer;
    }(IndentCellRenderer), __extends$33 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), HeaderIndentCellRenderer = function(_super) {
        function HeaderIndentCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TH", {
                className: "e-grouptopleftcell"
            }), _this;
        }
        return __extends$33(HeaderIndentCellRenderer, _super), HeaderIndentCellRenderer.prototype.render = function(cell, data) {
            var node = this.element.cloneNode();
            return node.appendChild(this.parent.createElement("div", {
                className: "e-headercelldiv e-emptycell",
                innerHTML: ""
            })), node;
        }, HeaderIndentCellRenderer;
    }(CellRenderer), __extends$34 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), DetailHeaderIndentCellRenderer = function(_super) {
        function DetailHeaderIndentCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TH", {
                className: "e-detailheadercell"
            }), _this;
        }
        return __extends$34(DetailHeaderIndentCellRenderer, _super), DetailHeaderIndentCellRenderer.prototype.render = function(cell, data) {
            var node = this.element.cloneNode();
            return node.appendChild(this.parent.createElement("div", {
                className: "e-emptycell"
            })), node;
        }, DetailHeaderIndentCellRenderer;
    }(CellRenderer), __extends$35 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), DetailExpandCellRenderer = function(_super) {
        function DetailExpandCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TD", {
                className: "e-detailrowcollapse",
                attrs: {
                    "aria-expanded": "false",
                    role: "gridcell",
                    tabindex: "-1"
                }
            }), _this;
        }
        return __extends$35(DetailExpandCellRenderer, _super), DetailExpandCellRenderer.prototype.render = function(cell, data, attributes) {
            var node = this.element.cloneNode();
            return attributes && !isNullOrUndefined(attributes.class) ? (node.className = "", 
            node.className = attributes.class, node.appendChild(this.parent.createElement("div", {
                className: "e-icons e-dtdiagonaldown e-icon-gdownarrow"
            }))) : node.appendChild(this.parent.createElement("div", {
                className: "e-icons e-dtdiagonalright e-icon-grightarrow"
            })), node;
        }, DetailExpandCellRenderer;
    }(CellRenderer), Render = function() {
        function Render(parent, locator) {
            this.emptyGrid = !1, this.parent = parent, this.locator = locator, this.data = new Data(parent, locator), 
            this.l10n = locator.getService("localization"), this.ariaService = this.locator.getService("ariaService"), 
            this.renderer = this.locator.getService("rendererFactory"), this.addEventListener();
        }
        return Render.prototype.render = function() {
            var gObj = this.parent;
            this.headerRenderer = this.renderer.getRenderer(RenderType.Header), this.contentRenderer = this.renderer.getRenderer(RenderType.Content), 
            this.headerRenderer.renderPanel(), this.contentRenderer.renderPanel(), gObj.getColumns().length && (this.isLayoutRendered = !0, 
            this.headerRenderer.renderTable(), this.contentRenderer.renderTable(), this.emptyRow(!1)), 
            this.refreshDataManager();
        }, Render.prototype.refresh = function(e) {
            void 0 === e && (e = {
                requestType: "refresh"
            }), this.parent.notify(e.requestType + "-begin", e), this.parent.trigger(actionBegin, e), 
            e.cancel ? this.parent.notify("cancel-Begin", e) : this.refreshDataManager(e);
        }, Render.prototype.refreshComplete = function(e) {
            this.parent.trigger(actionComplete, e);
        }, Render.prototype.refreshDataManager = function(args) {
            var _this = this;
            void 0 === args && (args = {}), "virtualscroll" !== args.requestType && this.parent.showSpinner(), 
            this.emptyGrid = !1;
            var dataManager, isFActon = this.isNeedForeignAction();
            if (this.ariaService.setBusy(this.parent.getContent().firstChild, !0), isFActon) {
                var deffered = new Deferred();
                dataManager = this.getFData(deffered);
            }
            if (dataManager = dataManager ? dataManager.then(function(e) {
                var query = _this.data.generateQuery().requiresCount();
                if (_this.emptyGrid) {
                    var def = new Deferred();
                    return def.resolve({
                        result: [],
                        count: 0
                    }), def.promise;
                }
                return _this.data.getData(args, query);
            }) : this.data.getData(args, this.data.generateQuery().requiresCount()), this.parent.getForeignKeyColumns().length && (!isFActon || this.parent.searchSettings.key.length)) {
                var deffered_1 = new Deferred();
                dataManager = dataManager.then(function(e) {
                    return _this.parent.notify("getForeignKeyData", {
                        dataManager: dataManager,
                        result: e,
                        promise: deffered_1
                    }), deffered_1.promise;
                });
            }
            this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length && (dataManager = dataManager.then(function(e) {
                return _this.validateGroupRecords(e);
            })), dataManager.then(function(e) {
                return _this.dataManagerSuccess(e, args);
            }).catch(function(e) {
                return _this.dataManagerFailure(e, args);
            });
        }, Render.prototype.getFData = function(deferred) {
            return this.parent.notify("getForeignKeyData", {
                isComplex: !0,
                promise: deferred
            }), deferred.promise;
        }, Render.prototype.isNeedForeignAction = function() {
            var gObj = this.parent;
            return !!(gObj.allowFiltering && gObj.filterSettings.columns.length || gObj.searchSettings.key.length) && this.foreignKey(this.parent.getForeignKeyColumns());
        }, Render.prototype.foreignKey = function(columns) {
            var _this = this;
            return columns.some(function(col) {
                return !(!_this.parent.filterSettings.columns.some(function(value) {
                    return col.foreignKeyValue === value.field;
                }) && !_this.parent.searchSettings.key.length);
            });
        }, Render.prototype.sendBulkRequest = function(args) {
            var _this = this;
            args.requestType = "batchsave";
            var promise = this.data.saveChanges(args.changes, this.parent.getPrimaryKeyFieldNames()[0], args.original), query = this.data.generateQuery().requiresCount();
            this.data.dataManager.dataSource.offline ? this.refreshDataManager({
                requestType: "batchsave"
            }) : promise.then(function(e) {
                _this.data.getData(args, query).then(function(e) {
                    return _this.dmSuccess(e, args);
                }).catch(function(e) {
                    return _this.dmFailure(e, args);
                });
            }).catch(function(e) {
                return _this.dmFailure(e, args);
            });
        }, Render.prototype.dmSuccess = function(e, args) {
            this.dataManagerSuccess(e, args);
        }, Render.prototype.dmFailure = function(e, args) {
            this.dataManagerFailure(e, args);
        }, Render.prototype.renderEmptyRow = function() {
            this.emptyRow(!0);
        }, Render.prototype.emptyRow = function(isTrigger) {
            var tr, gObj = this.parent, tbody = this.contentRenderer.getTable().querySelector("tbody");
            isNullOrUndefined(tbody) || remove(tbody), tbody = this.parent.createElement("tbody"), 
            (tr = this.parent.createElement("tr", {
                className: "e-emptyrow"
            })).appendChild(this.parent.createElement("td", {
                innerHTML: this.l10n.getConstant("EmptyRecord"),
                attrs: {
                    colspan: gObj.getColumns().length.toString()
                }
            })), tbody.appendChild(tr), this.contentRenderer.renderEmpty(tbody), isTrigger && (this.parent.trigger(dataBound, {}), 
            this.parent.notify(onEmpty, {
                rows: [ new Row({
                    isDataRow: !0,
                    cells: [ new Cell({
                        isDataCell: !0,
                        visible: !0
                    }) ]
                }) ]
            }));
        }, Render.prototype.dynamicColumnChange = function() {
            this.parent.getCurrentViewRecords().length && this.updateColumnType(this.parent.getCurrentViewRecords()[0]);
        }, Render.prototype.updateColumnType = function(record) {
            for (var value, columns = this.parent.getColumns(), data = record && record.items ? record.items[0] : record, fmtr = this.locator.getService("valueFormatter"), i = 0, len = columns.length; i < len; i++) {
                value = getObject$1(columns[i].field || "", data), columns[i].isForeignColumn() && columns[i].columnData && (value = getObject$1(columns[i].foreignKeyValue || "", columns[i].columnData[0])), 
                isNullOrUndefined(value) ? columns[i].type = columns[i].type || null : (this.isColTypeDef = !0, 
                columns[i].type || (columns[i].type = value.getDay ? value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date" : typeof value));
                var valueFormatter = new ValueFormatter();
                columns[i].format && (columns[i].format.skeleton || columns[i].format.format) && (columns[i].setFormatter(valueFormatter.getFormatFunction(columns[i].format)), 
                columns[i].setParser(valueFormatter.getParserFunction(columns[i].format))), "string" == typeof columns[i].format ? setFormatter(this.locator, columns[i]) : columns[i].format || "number" !== columns[i].type || columns[i].setParser(fmtr.getParserFunction({
                    format: "n2"
                }));
            }
        }, Render.prototype.dataManagerSuccess = function(e, args) {
            var gObj = this.parent;
            gObj.trigger("beforeDataBound", e);
            var len = Object.keys(e.result).length;
            if (!this.parent.isDestroyed) if (gObj.getColumns().length || len || gObj.columns.length && gObj.columns[0] instanceof Column) {
                if (this.parent.isEdit = !1, this.parent.notify("tooltip-destroy", {}), gObj.currentViewData = e.result, 
                !len && e.count && gObj.allowPaging) return gObj.prevPageMoving = !0, gObj.pageSettings.totalRecordsCount = e.count, 
                gObj.pageSettings.currentPage = Math.ceil(e.count / gObj.pageSettings.pageSize), 
                void gObj.dataBind();
                if ((!gObj.getColumns().length && len || !this.isLayoutRendered) && this.updatesOnInitialRender(e), 
                !this.isColTypeDef && gObj.getCurrentViewRecords() && this.updateColumnType(gObj.getCurrentViewRecords()[0]), 
                this.parent.notify(dataReady, extend({
                    count: e.count,
                    result: e.result,
                    aggregates: e.aggregates
                }, args)), (gObj.groupSettings.columns.length || args && "ungrouping" === args.requestType) && this.headerRenderer.refreshUI(), 
                len) this.contentRenderer.refreshContentRows(args); else {
                    if (!gObj.getColumns().length) return gObj.element.innerHTML = "", void alert(this.l10n.getConstant("EmptyDataSourceError"));
                    if (this.contentRenderer.setRowElements([]), this.contentRenderer.setRowObjects([]), 
                    this.renderEmptyRow(), args) {
                        var action = (args.requestType || "").toLowerCase() + "-complete";
                        this.parent.notify(action, args);
                    }
                    this.parent.hideSpinner();
                }
                this.parent.notify("toolbar-refresh", {});
            } else gObj.hideSpinner();
        }, Render.prototype.dataManagerFailure = function(e, args) {
            this.ariaService.setOptions(this.parent.getContent().firstChild, {
                busy: !1,
                invalid: !0
            }), this.parent.trigger("actionFailure", {
                error: e
            }), this.parent.hideSpinner(), "save" !== args.requestType && "delete" !== args.requestType && "bulk-save" !== args.name && (this.parent.currentViewData = [], 
            this.renderEmptyRow());
        }, Render.prototype.updatesOnInitialRender = function(e) {
            this.isLayoutRendered = !0, this.parent.columns.length < 1 && this.buildColumns(e.result[0]), 
            prepareColumns(this.parent.columns), this.headerRenderer.renderTable(), this.contentRenderer.renderTable(), 
            this.parent.notify("auto-col", {});
        }, Render.prototype.buildColumns = function(record) {
            for (var columns = Object.keys(record), cols = [], i = 0, len = columns.length; i < len; i++) cols[i] = {
                field: columns[i]
            }, this.parent.enableColumnVirtualization && (cols[i].width = isNullOrUndefined(cols[i].width) ? 200 : cols[i].width);
            this.parent.columns = cols;
        }, Render.prototype.instantiateRenderer = function() {
            this.renderer.addRenderer(RenderType.Header, new HeaderRender(this.parent, this.locator)), 
            this.renderer.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));
            var cellrender = this.locator.getService("cellRendererFactory");
            cellrender.addCellRenderer(CellType.Header, new HeaderCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.Data, new CellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.Indent, new IndentCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.GroupCaption, new GroupCaptionCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.GroupCaptionEmpty, new GroupCaptionEmptyCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.Expand, new ExpandCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.HeaderIndent, new HeaderIndentCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.DetailHeader, new DetailHeaderIndentCellRenderer(this.parent, this.locator)), 
            cellrender.addCellRenderer(CellType.DetailExpand, new DetailExpandCellRenderer(this.parent, this.locator));
        }, Render.prototype.addEventListener = function() {
            var _this = this;
            this.parent.isDestroyed || (this.parent.on(initialLoad, this.instantiateRenderer, this), 
            this.parent.on(modelChanged, this.refresh, this), this.parent.on("refresh-complete", this.refreshComplete, this), 
            this.parent.on("bulk-save", this.sendBulkRequest, this), this.parent.on("showEmptyGrid", function() {
                _this.emptyGrid = !0;
            }, this), this.parent.on("auto-col", this.dynamicColumnChange, this));
        }, Render.prototype.validateGroupRecords = function(e) {
            var _this = this, index = e.result.length - 1;
            if (index < 0) return Promise.resolve(e);
            var group0 = e.result[0], groupN = e.result[index], predicate = [], addWhere = function(input) {
                [ group0, groupN ].forEach(function(group) {
                    return predicate.push(new Predicate$1("field", "==", group.field).and(_this.getPredicate("key", "equal", group.key)));
                }), input.where(Predicate$1.or(predicate));
            }, query = new Query();
            addWhere(query);
            var curFilter = new DataManager(e.result).executeLocal(query), newQuery = this.data.generateQuery(!0), rPredicate = [];
            this.data.isRemote() ? ([ group0, groupN ].forEach(function(group) {
                return rPredicate.push(_this.getPredicate(group.field, "equal", group.key));
            }), newQuery.where(Predicate$1.or(rPredicate))) : addWhere(newQuery);
            var deferred = new Deferred();
            return this.data.getData({}, newQuery).then(function(r) {
                _this.updateGroupInfo(curFilter, r.result), deferred.resolve(e);
            }).catch(function(e) {
                return deferred.reject(e);
            }), deferred.promise;
        }, Render.prototype.getPredicate = function(key, operator, value) {
            return value instanceof Date ? getDatePredicate({
                field: key,
                operator: operator,
                value: value
            }) : new Predicate$1(key, operator, value);
        }, Render.prototype.updateGroupInfo = function(current, untouched) {
            var _this = this, dm = new DataManager(untouched);
            return current.forEach(function(element, index, array) {
                var uGroup = dm.executeLocal(new Query().where(new Predicate$1("field", "==", element.field).and(_this.getPredicate("key", "equal", element.key))))[0];
                element.count = uGroup.count;
                var itemGroup = element.items, uGroupItem = uGroup.items;
                itemGroup.GroupGuid && (element.items = _this.updateGroupInfo(element.items, uGroup.items)), 
                _this.parent.aggregates.forEach(function(row) {
                    return row.columns.forEach(function(column) {
                        (column.type instanceof Array ? column.type : [ column.type ]).forEach(function(type) {
                            var key = column.field + " - " + type.toLowerCase(), data = itemGroup.level ? uGroupItem.records : uGroup.items, context = _this.parent;
                            if ("Custom" === type) {
                                var data_1 = itemGroup.level ? uGroupItem : uGroup;
                                element.aggregates[key] = column.customAggregate ? column.customAggregate.call(context, data_1, column) : "";
                            } else element.aggregates[key] = DataUtil.aggregates[type.toLowerCase()](data, column.field);
                        });
                    });
                });
            }), current;
        }, Render;
    }(), CellRendererFactory = function() {
        function CellRendererFactory() {
            this.cellRenderMap = {};
        }
        return CellRendererFactory.prototype.addCellRenderer = function(name, type) {
            name = "string" == typeof name ? name : getEnumValue(CellType, name), isNullOrUndefined(this.cellRenderMap[name]) && (this.cellRenderMap[name] = type);
        }, CellRendererFactory.prototype.getCellRenderer = function(name) {
            if (name = "string" == typeof name ? name : getEnumValue(CellType, name), isNullOrUndefined(this.cellRenderMap[name])) throw "The cellRenderer " + name + " is not found";
            return this.cellRenderMap[name];
        }, CellRendererFactory;
    }(), ServiceLocator = function() {
        function ServiceLocator() {
            this.services = {};
        }
        return ServiceLocator.prototype.register = function(name, type) {
            isNullOrUndefined(this.services[name]) && (this.services[name] = type);
        }, ServiceLocator.prototype.getService = function(name) {
            if (isNullOrUndefined(this.services[name])) throw "The service " + name + " is not registered";
            return this.services[name];
        }, ServiceLocator;
    }(), RendererFactory = function() {
        function RendererFactory() {
            this.rendererMap = {};
        }
        return RendererFactory.prototype.addRenderer = function(name, type) {
            var rName = getEnumValue(RenderType, name);
            isNullOrUndefined(this.rendererMap[rName]) && (this.rendererMap[rName] = type);
        }, RendererFactory.prototype.getRenderer = function(name) {
            var rName = getEnumValue(RenderType, name);
            if (isNullOrUndefined(this.rendererMap[rName])) throw "The renderer " + rName + " is not found";
            return this.rendererMap[rName];
        }, RendererFactory;
    }(), ColumnWidthService = function() {
        function ColumnWidthService(parent) {
            this.parent = parent;
        }
        return ColumnWidthService.prototype.setWidthToColumns = function() {
            var _this = this, i = 0, indexes = this.parent.getColumnIndexesInView(), wFlag = !0;
            if (this.parent.allowGrouping) for (var len = this.parent.groupSettings.columns.length; i < len; i++) this.parent.enableColumnVirtualization && -1 === indexes.indexOf(i) ? wFlag = !1 : this.setColumnWidth(new Column({
                width: "30px"
            }), i);
            (this.parent.detailTemplate || this.parent.childGrid) && this.setColumnWidth(new Column({
                width: "30px"
            }), i), this.parent.getColumns().forEach(function(column, index) {
                _this.setColumnWidth(column, wFlag ? void 0 : index);
            });
        }, ColumnWidthService.prototype.setColumnWidth = function(column, index, module) {
            var columnIndex = isNullOrUndefined(index) ? this.parent.getNormalizedColumnIndex(column.uid) : index, cWidth = this.getWidth(column);
            null !== cWidth && (this.setWidth(cWidth, columnIndex), (this.parent.allowResizing && "resize" === module || this.parent.getFrozenColumns() && this.parent.allowResizing) && this.setWidthToTable(), 
            this.parent.notify("column-width-changed", {
                index: columnIndex,
                width: cWidth,
                column: column,
                module: module
            }));
        }, ColumnWidthService.prototype.setWidth = function(width, index) {
            if ("string" == typeof width && -1 !== width.indexOf("%") && (!Boolean(window.chrome) || !Boolean(window.chrome.webstore)) && this.parent.allowGrouping) {
                var elementWidth = this.parent.element.offsetWidth;
                width = parseInt(width, 10) / 100 * elementWidth;
            }
            var headerCol, header = this.parent.getHeaderTable(), content = this.parent.getContentTable(), fWidth = formatUnit(width), frzCols = this.parent.getFrozenColumns(), mHdr = this.parent.getHeaderContent().querySelector(".e-movableheader");
            (headerCol = frzCols && index >= frzCols && mHdr && mHdr.querySelector("colgroup") ? mHdr.querySelector("colgroup").children[index - frzCols] : header.querySelector("colgroup").children[index]) && (headerCol.style.width = fWidth);
            var contentCol;
            (contentCol = frzCols && index >= frzCols ? this.parent.getContent().querySelector(".e-movablecontent").querySelector("colgroup").children[index - frzCols] : content.querySelector("colgroup").children[index]) && (contentCol.style.width = fWidth);
            var edit = content.querySelector(".e-table.e-inline-edit");
            edit && edit.querySelector("colgroup").children[index] && (edit.querySelector("colgroup").children[index].style.width = fWidth);
        }, ColumnWidthService.prototype.getSiblingsHeight = function(element) {
            return this.getHeightFromDirection(element, "previous") + this.getHeightFromDirection(element, "next");
        }, ColumnWidthService.prototype.getHeightFromDirection = function(element, direction) {
            for (var sibling = element[direction + "ElementSibling"], result = 0, classList = [ "e-gridheader", "e-gridfooter", "e-groupdroparea", "e-gridpager", "e-toolbar" ]; sibling; ) classList.some(function(value) {
                return sibling.classList.contains(value);
            }) && (result += sibling.offsetHeight), sibling = sibling[direction + "ElementSibling"];
            return result;
        }, ColumnWidthService.prototype.getWidth = function(column) {
            if (isNullOrUndefined(column.width) && this.parent.allowResizing && (column.width = 200), 
            !column.width) return null;
            var width = parseInt(column.width.toString(), 10);
            return column.minWidth && width < parseInt(column.minWidth.toString(), 10) ? column.minWidth : column.maxWidth && width > parseInt(column.maxWidth.toString(), 10) ? column.maxWidth : column.width;
        }, ColumnWidthService.prototype.getTableWidth = function(columns) {
            for (var tWidth = 0, _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                var column = columns_1[_i], cWidth = this.getWidth(column);
                !1 !== column.visible && null !== cWidth && (tWidth += parseInt(cWidth.toString(), 10));
            }
            return tWidth;
        }, ColumnWidthService.prototype.setWidthToFrozenTable = function() {
            var columns = this.parent.getColumns();
            columns.splice(this.parent.getFrozenColumns(), columns.length);
            var freezeWidth = formatUnit(this.getTableWidth(columns));
            this.parent.getHeaderTable().style.width = freezeWidth, this.parent.getContentTable().style.width = freezeWidth;
        }, ColumnWidthService.prototype.setWidthToMovableTable = function() {
            var columns = this.parent.getColumns();
            columns.splice(0, this.parent.getFrozenColumns());
            var movableWidth = formatUnit(this.getTableWidth(columns));
            this.parent.getHeaderContent().querySelector(".e-movableheader").firstElementChild && (this.parent.getHeaderContent().querySelector(".e-movableheader").firstElementChild.style.width = movableWidth), 
            this.parent.getContent().querySelector(".e-movablecontent").firstElementChild.style.width = movableWidth;
        }, ColumnWidthService.prototype.setWidthToTable = function() {
            var tWidth = formatUnit(this.getTableWidth(this.parent.getColumns()));
            this.parent.getFrozenColumns() ? (this.setWidthToFrozenTable(), this.setWidthToMovableTable()) : ((this.parent.detailTemplate || this.parent.childGrid) && this.setColumnWidth(new Column({
                width: "30px"
            })), this.parent.getHeaderTable().style.width = tWidth, this.parent.getContentTable().style.width = tWidth);
            var edit = this.parent.element.querySelector(".e-table.e-inline-edit");
            edit && (edit.style.width = tWidth);
        }, ColumnWidthService;
    }(), __extends$36 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), FocusStrategy = function() {
        function FocusStrategy(parent) {
            this.currentInfo = {}, this.oneTime = !0, this.swap = {}, this.forget = !0, this.skipFocus = !0, 
            this.focusByClick = !1, this.prevIndexes = {}, this.parent = parent, this.addEventListener();
        }
        return FocusStrategy.prototype.focusCheck = function(e) {
            var target = e.target;
            this.focusByClick = !0, this.skipFocus = target.classList.contains("e-grid");
        }, FocusStrategy.prototype.onFocus = function() {
            if (!(this.parent.isDestroyed || Browser.isDevice || this.parent.enableVirtualization)) {
                this.setActive(0 === this.parent.frozenRows, 0 !== this.parent.frozenColumns);
                var current = this.getContent().matrix.get(0, -1, [ 0, 1 ], null, this.getContent().validator());
                this.getContent().matrix.select(current[0], current[1]), this.skipFocus && (this.focus(), 
                this.skipFocus = !1);
            }
        }, FocusStrategy.prototype.passiveFocus = function(e) {
            this.parent.isDestroyed || e.target && e.target.classList.contains("e-detailcell") && (this.currentInfo.skipAction = !1, 
            addClass([ this.currentInfo.element ], [ "e-focused", "e-focus" ]));
        }, FocusStrategy.prototype.onBlur = function(e) {
            this.parent.isEdit || e && (!e.relatedTarget || closest(e.relatedTarget, ".e-grid")) || (this.removeFocus(), 
            this.skipFocus = !1, this.currentInfo.skipAction = !1, this.getContent().getFocusInfo().elementToFocus && (this.getContent().getFocusInfo().elementToFocus.tabIndex = 0));
        }, FocusStrategy.prototype.onClick = function(e, force) {
            var isContent = !isNullOrUndefined(closest(e.target, ".e-gridcontent")), isHeader = !isNullOrUndefined(closest(e.target, ".e-gridheader"));
            isContent = isContent && isHeader ? !isContent : isContent;
            var isFrozen = !isNullOrUndefined(closest(e.target, ".e-frozencontent")) || !isNullOrUndefined(closest(e.target, ".e-frozenheader"));
            if (!(!isContent && isNullOrUndefined(closest(e.target, ".e-gridheader")) || e.target.classList.contains("e-content"))) if (this.setActive(isContent, isFrozen), 
            !isContent && isNullOrUndefined(closest(e.target, ".e-gridheader")) || e.target.classList.contains("e-filtermenudiv")) this.clearOutline(); else {
                var beforeArgs = {
                    cancel: !1,
                    byKey: !1,
                    byClick: !isNullOrUndefined(e.target),
                    clickArgs: e
                };
                if (this.parent.notify("beforecellfocused", beforeArgs), !beforeArgs.cancel && !closest(e.target, ".e-inline-edit") && (this.setActive(isContent, isFrozen), 
                this.getContent())) {
                    if (!1 === this.getContent().onClick(e, force)) return;
                    this.focus();
                }
            }
        }, FocusStrategy.prototype.onKeyPress = function(e) {
            if (!this.skipOn(e)) {
                var beforeArgs = {
                    cancel: !1,
                    byKey: !0,
                    byClick: !1,
                    keyArgs: e
                };
                if (this.parent.notify("beforecellfocused", beforeArgs), !beforeArgs.cancel) {
                    var bValue = this.getContent().matrix.current;
                    this.currentInfo.outline = !0;
                    var swapInfo = this.getContent().jump(e.action, bValue);
                    this.swap = swapInfo, swapInfo.swap && (this.setActive(!swapInfo.toHeader, swapInfo.toFrozen), 
                    this.getContent().matrix.current = this.getContent().getNextCurrent(bValue, swapInfo, this.active, e.action), 
                    this.prevIndexes = {}), this.setActiveByKey(e.action, this.getContent());
                    !1 !== this.getContent().onKeyPress(e) ? (e.preventDefault(), this.focus(e)) : this.clearIndicator();
                }
            }
        }, FocusStrategy.prototype.skipOn = function(e) {
            var target = e.target;
            return !!target && (this.currentInfo.skipAction ? (this.clearIndicator(), !0) : [ "pageUp", "pageDown" ].indexOf(e.action) > -1 ? (this.clearIndicator(), 
            !0) : "delete" === e.action || "Batch" !== this.parent.editSettings.mode && (this.parent.isEdit || [ "insert", "f2" ].indexOf(e.action) > -1) || null !== closest(document.activeElement, ".e-filterbarcell") || null !== closest(document.activeElement, "#" + this.parent.element.id + "_searchbar") && [ "enter", "leftArrow", "rightArrow", "shiftLeft", "shiftRight", "ctrlPlusA" ].indexOf(e.action) > -1 || null === closest(target, ".e-gridcontent") && null === closest(target, ".e-gridheader") || "space" === e.action && !target.classList.contains("e-gridchkbox") && null === closest(target, ".e-gridchkbox") && null === closest(target, ".e-headerchkcelldiv"));
        }, FocusStrategy.prototype.getFocusedElement = function() {
            return this.currentInfo.elementToFocus;
        }, FocusStrategy.prototype.getContent = function() {
            return this.active || this.content;
        }, FocusStrategy.prototype.setActive = function(content, isFrozen) {
            this.active = content ? isFrozen ? this.fContent : this.content : isFrozen ? this.fHeader : this.header;
        }, FocusStrategy.prototype.setFocusedElement = function(element) {
            var _this = this;
            this.currentInfo.elementToFocus = element, setTimeout(function() {
                return _this.currentInfo.elementToFocus.focus();
            }, 0);
        }, FocusStrategy.prototype.focus = function(e) {
            this.removeFocus(), this.addFocus(this.getContent().getFocusInfo(), e);
        }, FocusStrategy.prototype.removeFocus = function(e) {
            this.currentInfo.element && (removeClass([ this.currentInfo.element, this.currentInfo.elementToFocus ], [ "e-focused", "e-focus" ]), 
            this.currentInfo.element.tabIndex = -1);
        }, FocusStrategy.prototype.addFocus = function(info, e) {
            if (this.currentInfo = info, this.currentInfo.outline = info.outline && !isNullOrUndefined(e), 
            info.element) {
                var isFocused = info.elementToFocus.classList.contains("e-focus");
                if (!isFocused) {
                    this.currentInfo.outline && addClass([ info.element ], [ "e-focused" ]), addClass([ info.elementToFocus ], [ "e-focus" ]), 
                    info.element.tabIndex = 0, isFocused || this.setFocusedElement(info.elementToFocus), 
                    this.parent.notify("cellfocused", {
                        element: info.elementToFocus,
                        parent: info.element,
                        indexes: this.getContent().matrix.current,
                        byKey: !isNullOrUndefined(e),
                        byClick: isNullOrUndefined(e),
                        keyArgs: e,
                        isJump: this.swap.swap,
                        container: this.getContent().getInfo(e),
                        outline: !isNullOrUndefined(e),
                        swapInfo: this.swap
                    });
                    var _a = this.getContent().matrix.current, rowIndex = _a[0], cellIndex = _a[1];
                    this.prevIndexes = {
                        rowIndex: rowIndex,
                        cellIndex: cellIndex
                    }, this.focusedColumnUid = this.parent.getColumnByIndex(cellIndex).uid, this.focusByClick = !1;
                }
            }
        }, FocusStrategy.prototype.refreshMatrix = function(content) {
            var _this = this;
            return function(e) {
                content && e.args && e.args.isFrozen && !_this.fContent ? _this.fContent = new FixedContentFocus(_this.parent) : content && !_this.content && (_this.content = new ContentFocus(_this.parent)), 
                !content && e.args && e.args.isFrozen && !_this.fHeader ? _this.fHeader = new FixedHeaderFocus(_this.parent) : content || _this.header || (_this.header = new HeaderFocus(_this.parent));
                var cFocus = content ? e.args && e.args.isFrozen ? _this.fContent : _this.content : e.args && e.args.isFrozen ? _this.fHeader : _this.header, rows = content ? e.rows.slice(_this.parent.frozenRows) : e.rows, updateRow = content ? e.rows.slice(0, _this.parent.frozenRows) : e.rows, matrix = cFocus.matrix.generate(updateRow, cFocus.selector);
                if (cFocus.matrix.generate(rows, cFocus.selector), cFocus.generateRows(updateRow, {
                    matrix: matrix,
                    handlerInstance: e.args && e.args.isFrozen ? _this.fHeader : _this.header
                }), !Browser.isDevice && !_this.focusByClick && e && e.args && "paging" === e.args.requestType && (_this.skipFocus = !1, 
                _this.parent.element.focus()), e && e.args && "virtualscroll" === e.args.requestType) if (_this.currentInfo.uid) {
                    var index_1;
                    if (e.rows.some(function(row, i) {
                        return index_1 = i, row.uid === _this.currentInfo.uid;
                    })) {
                        _this.content.matrix.current[0] = index_1, _this.content.matrix.current[1] = _this.parent.getColumnIndexByUid(_this.focusedColumnUid) || 0;
                        if (focusElement = _this.getContent().getFocusInfo().elementToFocus) {
                            var cellPosition = focusElement.getBoundingClientRect(), gridPosition = _this.parent.element.getBoundingClientRect();
                            cellPosition.top >= 0 && cellPosition.left >= 0 && cellPosition.right <= Math.min(gridPosition.right, window.innerWidth || document.documentElement.clientWidth) && cellPosition.bottom <= Math.min(gridPosition.bottom, window.innerHeight || document.documentElement.clientHeight) && _this.focus();
                        }
                    }
                } else if (e.args.focusElement && e.args.focusElement.classList.contains("e-filtertext")) {
                    var focusElement;
                    (focusElement = _this.parent.element.querySelector("#" + e.args.focusElement.id)) && focusElement.focus();
                }
            };
        }, FocusStrategy.prototype.addEventListener = function() {
            var _this = this;
            this.parent.isDestroyed || (EventHandler.add(this.parent.element, "mousedown", this.focusCheck, this), 
            EventHandler.add(this.parent.element, "focus", this.onFocus, this), this.parent.element.addEventListener("focus", this.passiveHandler = function(e) {
                return _this.passiveFocus(e);
            }, !0), EventHandler.add(this.parent.element, "focusout", this.onBlur, this), this.parent.on(keyPressed, this.onKeyPress, this), 
            this.parent.on(click, this.onClick, this), this.parent.on(contentReady, this.refreshMatrix(!0), this), 
            this.parent.on(headerRefreshed, this.refreshMatrix(), this), this.parent.on("close-edit", this.restoreFocus, this), 
            [ "start-edit", "start-add" ].forEach(function(evt) {
                return _this.parent.on(evt, _this.clearIndicator, _this);
            }), [ "sorting" ].forEach(function(action) {
                return _this.parent.on(action + "-complete", _this.restoreFocus, _this);
            }), this.parent.on("batchAdd", this.refreshMatrix(!0), this), this.parent.on("batchCancel", this.refreshMatrix(!0), this), 
            this.parent.on("batchDelete", this.refreshMatrix(!0), this), this.parent.on("detailDataBound", this.refreshMatrix(!0), this), 
            this.parent.on(onEmpty, this.refreshMatrix(!0), this), this.parent.on("cellfocused", this.internalCellFocus, this));
        }, FocusStrategy.prototype.removeEventListener = function() {
            var _this = this;
            this.parent.isDestroyed || (EventHandler.remove(this.parent.element, "mousedown", this.focusCheck), 
            EventHandler.remove(this.parent.element, "focus", this.onFocus), EventHandler.remove(this.parent.element, "focusout", this.onBlur), 
            this.parent.element.removeEventListener("focus", this.passiveHandler, !0), this.parent.off(keyPressed, this.onKeyPress), 
            this.parent.off(click, this.onClick), this.parent.off(contentReady, this.refreshMatrix(!0)), 
            this.parent.off(headerRefreshed, this.refreshMatrix()), this.parent.off("close-edit", this.restoreFocus), 
            [ "start-edit", "start-add" ].forEach(function(evt) {
                return _this.parent.off(evt, _this.clearOutline);
            }), [ "sorting" ].forEach(function(action) {
                return _this.parent.off(action + "-complete", _this.restoreFocus);
            }), this.parent.off("batchAdd", this.refreshMatrix(!0)), this.parent.off("batchDelete", this.refreshMatrix(!0)), 
            this.parent.off("batchCancel", this.refreshMatrix(!0)), this.parent.off("detailDataBound", this.refreshMatrix(!0)), 
            this.parent.off(onEmpty, this.refreshMatrix(!0)), this.parent.off("cellfocused", this.internalCellFocus));
        }, FocusStrategy.prototype.destroy = function() {
            this.removeEventListener();
        }, FocusStrategy.prototype.restoreFocus = function() {
            this.addFocus(this.getContent().getFocusInfo());
        }, FocusStrategy.prototype.clearOutline = function() {
            this.getContent().matrix.current = this.getContent().matrix.get(0, -1, [ 0, 1 ], "downArrow", this.getContent().validator()), 
            this.clearIndicator();
        }, FocusStrategy.prototype.clearIndicator = function() {
            this.currentInfo.element && this.currentInfo.elementToFocus && removeClass([ this.currentInfo.element, this.currentInfo.elementToFocus ], [ "e-focus", "e-focused" ]);
        }, FocusStrategy.prototype.getPrevIndexes = function() {
            var forget = this.forget;
            return this.forget = !1, forget ? {
                rowIndex: null,
                cellIndex: null
            } : this.prevIndexes;
        }, FocusStrategy.prototype.forgetPrevious = function() {
            this.forget = !0;
        }, FocusStrategy.prototype.setActiveByKey = function(action, active) {
            var _this = this;
            if (0 !== this.parent.frozenColumns || 0 !== this.parent.frozenRows) {
                var info, actions = {
                    home: function() {
                        return {
                            toHeader: !info.isContent,
                            toFrozen: !0
                        };
                    },
                    end: function() {
                        return {
                            toHeader: !info.isContent,
                            toFrozen: !1
                        };
                    },
                    ctrlHome: function() {
                        return {
                            toHeader: !0,
                            toFrozen: 0 !== _this.parent.frozenColumns
                        };
                    },
                    ctrlEnd: function() {
                        return {
                            toHeader: !1,
                            toFrozen: !1
                        };
                    }
                };
                if (action in actions) {
                    info = active.getInfo();
                    var swap = actions[action]();
                    this.setActive(!swap.toHeader, swap.toFrozen), this.getContent().matrix.current = active.matrix.current;
                }
            }
        }, FocusStrategy.prototype.internalCellFocus = function(e) {
            if (e.byKey && e.container.isContent && "enter" === e.keyArgs.action && (e.parent.classList.contains("e-detailcell") || e.parent.classList.contains("e-unboundcell") || e.parent.classList.contains("e-templatecell"))) {
                this.clearIndicator();
                var focusEle = this.getContent().getFocusable(this.getFocusedElement());
                this.setFocusedElement(focusEle), this.currentInfo.skipAction = !0;
            }
        }, FocusStrategy;
    }(), Matrix = function() {
        function Matrix() {
            this.matrix = [], this.current = [];
        }
        return Matrix.prototype.set = function(rowIndex, columnIndex, allow) {
            rowIndex = Math.max(0, Math.min(rowIndex, this.rows)), columnIndex = Math.max(0, Math.min(columnIndex, this.columns)), 
            this.matrix[rowIndex] = this.matrix[rowIndex] || [], this.matrix[rowIndex][columnIndex] = allow ? 1 : 0;
        }, Matrix.prototype.get = function(rowIndex, columnIndex, navigator, action, validator) {
            var tmp = columnIndex;
            if (rowIndex + navigator[0] < 0) return [ rowIndex, columnIndex ];
            if (rowIndex = Math.max(0, Math.min(rowIndex + navigator[0], this.rows)), columnIndex = Math.max(0, Math.min(columnIndex + navigator[1], this.matrix[rowIndex].length - 1)), 
            tmp + navigator[1] > this.matrix[rowIndex].length - 1 && validator(rowIndex, columnIndex, action)) return [ rowIndex, tmp ];
            var first = this.first(this.matrix[rowIndex], columnIndex, navigator, !0, action), val = getValue(rowIndex + "." + (columnIndex = null === first ? tmp : first), this.matrix);
            return rowIndex === this.rows && "downArrow" === action && (navigator[0] = -1), 
            this.inValid(val) || !validator(rowIndex, columnIndex, action) ? this.get(rowIndex, tmp, navigator, action, validator) : [ rowIndex, columnIndex ];
        }, Matrix.prototype.first = function(vector, index, navigator, moveTo, action) {
            return (index < 0 || index === vector.length) && this.inValid(vector[index]) && "upArrow" !== action && "downArrow" !== action || !vector.some(function(v) {
                return 1 === v;
            }) ? null : this.inValid(vector[index]) ? this.first(vector, -1 !== [ "upArrow", "downArrow", "shiftUp", "shiftDown" ].indexOf(action) ? moveTo ? 0 : ++index : index + navigator[1], navigator, !1, action) : index;
        }, Matrix.prototype.select = function(rowIndex, columnIndex) {
            rowIndex = Math.max(0, Math.min(rowIndex, this.rows)), columnIndex = Math.max(0, Math.min(columnIndex, this.matrix[rowIndex].length - 1)), 
            this.current = [ rowIndex, columnIndex ];
        }, Matrix.prototype.generate = function(rows, selector) {
            var _this = this;
            return this.rows = rows.length - 1, this.matrix = [], rows.forEach(function(row, rIndex) {
                var cells = row.cells.filter(function(c) {
                    return !0 !== c.isSpanned;
                });
                _this.columns = Math.max(cells.length - 1, 0 | _this.columns), cells.forEach(function(cell, cIndex) {
                    _this.set(rIndex, cIndex, selector(row, cell));
                });
            }), this.matrix;
        }, Matrix.prototype.inValid = function(value) {
            return 0 === value || void 0 === value;
        }, Matrix;
    }(), ContentFocus = function() {
        function ContentFocus(parent) {
            var _this = this;
            this.matrix = new Matrix(), this.parent = parent, this.keyActions = {
                rightArrow: [ 0, 1 ],
                tab: [ 0, 1 ],
                leftArrow: [ 0, -1 ],
                shiftTab: [ 0, -1 ],
                upArrow: [ -1, 0 ],
                downArrow: [ 1, 0 ],
                shiftUp: [ -1, 0 ],
                shiftDown: [ 1, 0 ],
                shiftRight: [ 0, 1 ],
                shiftLeft: [ 0, -1 ],
                enter: [ 1, 0 ],
                shiftEnter: [ -1, 0 ]
            }, this.indexesByKey = function(action) {
                return {
                    home: [ _this.matrix.current[0], -1, 0, 1 ],
                    end: [ _this.matrix.current[0], _this.matrix.columns + 1, 0, -1 ],
                    ctrlHome: [ 0, -1, 0, 1 ],
                    ctrlEnd: [ _this.matrix.rows, _this.matrix.columns + 1, 0, -1 ]
                }[action] || null;
            };
        }
        return ContentFocus.prototype.getTable = function() {
            return this.parent.frozenColumns ? this.parent.getContent().querySelector(".e-movablecontent .e-table") : this.parent.getContentTable();
        }, ContentFocus.prototype.onKeyPress = function(e) {
            var navigator = this.keyActions[e.action], current = this.getCurrentFromAction(e.action, navigator, e.action in this.keyActions, e);
            if (current) return (([ "tab", "shiftTab" ].indexOf(e.action) > -1 && this.matrix.current || []).toString() !== current.toString() || current.toString() !== [ this.matrix.rows, this.matrix.columns ].toString() && current.toString() !== [ 0, 0 ].toString()) && void this.matrix.select(current[0], current[1]);
        }, ContentFocus.prototype.getCurrentFromAction = function(action, navigator, isPresent, e) {
            if (void 0 === navigator && (navigator = [ 0, 0 ]), !isPresent && !this.indexesByKey(action)) return null;
            if (!this.shouldFocusChange(e)) return this.matrix.current;
            var _a = this.indexesByKey(action) || this.matrix.current.concat(navigator), rowIndex = _a[0], cellIndex = _a[1], rN = _a[2], cN = _a[3];
            return this.matrix.get(rowIndex, cellIndex, [ rN, cN ], action, this.validator());
        }, ContentFocus.prototype.onClick = function(e, force) {
            var target = e.target;
            if (target = target.classList.contains("e-rowcell") ? target : closest(target, "td"), 
            target = target || (closest(e.target, "td.e-detailrowcollapse") || closest(e.target, "td.e-detailrowexpand")), 
            target = closest(e.target, "td.e-detailcell") && isNullOrUndefined(closest(closest(e.target, ".e-grid"), "td.e-detailcell")) ? null : target, 
            !(target = target && closest(target, "table").classList.contains("e-table") ? target : null)) return !1;
            var _a = [ target.parentElement.rowIndex, target.cellIndex ], rowIndex = _a[0], cellIndex = _a[1], _b = this.matrix.current, oRowIndex = _b[0], oCellIndex = _b[1], val = getValue(rowIndex + "." + cellIndex, this.matrix.matrix);
            if (this.matrix.inValid(val) || !force && oRowIndex === rowIndex && oCellIndex === cellIndex) return !1;
            this.matrix.select(rowIndex, cellIndex);
        }, ContentFocus.prototype.getFocusInfo = function() {
            var info = {}, _a = this.matrix.current, _b = _a[0], rowIndex = void 0 === _b ? 0 : _b, _c = _a[1], cellIndex = void 0 === _c ? 0 : _c;
            return this.matrix.current = [ rowIndex, cellIndex ], info.element = isNullOrUndefined(this.getTable().rows[rowIndex]) ? null : this.getTable().rows[rowIndex].cells[cellIndex], 
            info.element ? (info.elementToFocus = info.element.classList.contains("e-unboundcell") || info.element.classList.contains("e-detailcell") ? info.element : this.getFocusable(info.element), 
            info.outline = !0, info.uid = info.element.parentElement.getAttribute("data-uid"), 
            info) : info;
        }, ContentFocus.prototype.getFocusable = function(element) {
            var query = 'button, [href], input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])';
            this.parent.isEdit && (query = 'input:not([type="hidden"]), select:not([aria-hidden="true"]), textarea');
            var child = [].slice.call(element.querySelectorAll(query));
            return child.length ? child[0] : element;
        }, ContentFocus.prototype.selector = function(row, cell) {
            var types = [ CellType.Expand, CellType.GroupCaption, CellType.CaptionSummary, CellType.GroupSummary ];
            return (row.isDataRow && cell.visible && (cell.isDataCell || cell.isTemplate) || row.isDataRow && cell.cellType === CellType.DetailExpand || !row.isDataRow && types.indexOf(cell.cellType) > -1 || cell.column && "checkbox" === cell.column.type || cell.cellType === CellType.CommandColumn) && !("delete" === row.edit && row.isDirty);
        }, ContentFocus.prototype.jump = function(action, current) {
            var frozenSwap = this.parent.frozenColumns > 0 && ("leftArrow" === action || "shiftTab" === action) && 0 === current[1], enterFrozen = 0 !== this.parent.frozenRows && "shiftEnter" === action;
            return {
                swap: ("upArrow" === action || enterFrozen) && 0 === current[0] || frozenSwap,
                toHeader: ("upArrow" === action || enterFrozen) && 0 === current[0],
                toFrozen: frozenSwap
            };
        }, ContentFocus.prototype.getNextCurrent = function(previous, swap, active, action) {
            void 0 === previous && (previous = []);
            var current = [];
            return "rightArrow" === action || "tab" === action ? (current[0] = previous[0], 
            current[1] = -1) : "downArrow" !== action && "enter" !== action || (current[0] = -1, 
            current[1] = previous[1]), current;
        }, ContentFocus.prototype.generateRows = function(rows, optionals) {
            var matrix = optionals.matrix, handlerInstance = optionals.handlerInstance, len = handlerInstance.matrix.matrix.length, defaultLen = this.parent.allowFiltering && "FilterBar" === this.parent.filterSettings.type ? len + 1 : len;
            handlerInstance.matrix.matrix = handlerInstance.matrix.matrix.slice(0, defaultLen), 
            handlerInstance.matrix.rows = defaultLen, (_a = handlerInstance.matrix.matrix).push.apply(_a, matrix), 
            handlerInstance.matrix.rows += matrix.length;
            var _a;
        }, ContentFocus.prototype.getInfo = function(e) {
            var info = this.getFocusInfo(), _a = this.matrix.current, rIndex = _a[0], cIndex = _a[1], isData = info.element.classList.contains("e-rowcell"), isSelectable = isData || e && "enter" !== e.action && (info.element.classList.contains("e-detailrowcollapse") || info.element.classList.contains("e-detailrowexpand")), _b = [ Math.min(parseInt(info.element.parentElement.getAttribute("aria-rowindex"), 10), rIndex), Math.min(parseInt(info.element.getAttribute("aria-colindex"), 10), cIndex) ];
            return {
                isContent: !0,
                isDataCell: isData,
                indexes: [ _b[0], _b[1] ],
                isSelectable: isSelectable
            };
        }, ContentFocus.prototype.validator = function() {
            var table = this.getTable();
            return function(rowIndex, cellIndex, action) {
                var cell = table.rows[rowIndex].cells[cellIndex];
                return "enter" === action || "shiftEnter" === action ? cell.classList.contains("e-rowcell") : !("shiftUp" !== action && "shiftDown" !== action || !cell.classList.contains("e-rowcell")) || "shiftUp" !== action && "shiftDown" !== action && 0 !== cell.getBoundingClientRect().width;
            };
        }, ContentFocus.prototype.shouldFocusChange = function(e) {
            var _a = this.matrix.current, _b = _a[0], rIndex = void 0 === _b ? -1 : _b, _c = _a[1], cIndex = void 0 === _c ? -1 : _c;
            if (rIndex < 0 || cIndex < 0) return !0;
            var cell = getValue(rIndex + ".cells." + cIndex, this.getTable().rows);
            return !cell || ("enter" !== e.action && "shiftEnter" !== e.action || cell.classList.contains("e-rowcell") && !cell.classList.contains("e-unboundcell") && !cell.classList.contains("e-templatecell") && !cell.classList.contains("e-detailcell"));
        }, ContentFocus;
    }(), HeaderFocus = function(_super) {
        function HeaderFocus(parent) {
            return _super.call(this, parent) || this;
        }
        return __extends$36(HeaderFocus, _super), HeaderFocus.prototype.getTable = function() {
            return this.parent.getFrozenColumns() ? this.parent.getHeaderContent().querySelector(".e-movableheader .e-table") : this.parent.getHeaderTable();
        }, HeaderFocus.prototype.onClick = function(e) {
            var target = e.target;
            if ((target = target.classList.contains("e-headercell") ? target : closest(target, "th")) || 0 === this.parent.frozenRows || (target = e.target.classList.contains("e-rowcell") ? e.target : closest(e.target, "td")), 
            target) {
                var _a = [ target.parentElement.rowIndex, target.cellIndex ], val = getValue(_a[0] + "." + _a[1], this.matrix.matrix);
                if (this.matrix.inValid(val)) return !1;
                this.matrix.select(target.parentElement.rowIndex, target.cellIndex);
            }
        }, HeaderFocus.prototype.getFocusInfo = function() {
            var info = {}, _a = this.matrix.current, _b = _a[0], rowIndex = void 0 === _b ? 0 : _b, _c = _a[1], cellIndex = void 0 === _c ? 0 : _c;
            return info.element = this.getTable().rows[rowIndex].cells[cellIndex], info.elementToFocus = this.getFocusable(info.element), 
            info.outline = !info.element.classList.contains("e-filterbarcell"), info;
        }, HeaderFocus.prototype.selector = function(row, cell) {
            return cell.visible && (void 0 !== cell.column.field || cell.isTemplate) || "checkbox" === cell.column.type || cell.cellType === CellType.StackedHeader;
        }, HeaderFocus.prototype.jump = function(action, current) {
            var frozenSwap = this.parent.frozenColumns > 0 && ("leftArrow" === action || "shiftTab" === action) && 0 === current[1], enterFrozen = 0 !== this.parent.frozenRows && "enter" === action;
            return {
                swap: ("downArrow" === action || enterFrozen) && current[0] === this.matrix.matrix.length - 1 || frozenSwap,
                toHeader: frozenSwap,
                toFrozen: frozenSwap
            };
        }, HeaderFocus.prototype.getNextCurrent = function(previous, swap, active, action) {
            void 0 === previous && (previous = []);
            var current1 = [];
            return "upArrow" === action || "shiftEnter" === action ? (current1[0] = this.matrix.matrix.length, 
            current1[1] = previous[1]) : "rightArrow" !== action && "tab" !== action || (current1[0] = previous[0], 
            current1[1] = -1), current1;
        }, HeaderFocus.prototype.generateRows = function(rows) {
            var _this = this, length = this.matrix.matrix.length;
            this.parent.allowFiltering && "FilterBar" === this.parent.filterSettings.type && (this.matrix.rows = ++this.matrix.rows, 
            rows[0].cells.forEach(function(cell, cIndex) {
                return _this.matrix.set(length, cIndex, cell.visible && !1 !== cell.column.allowFiltering);
            }));
        }, HeaderFocus.prototype.getInfo = function(e) {
            return extend(_super.prototype.getInfo.call(this, e), {
                isContent: !1,
                isHeader: !0
            });
        }, HeaderFocus.prototype.validator = function() {
            return function() {
                return !0;
            };
        }, HeaderFocus.prototype.shouldFocusChange = function(e) {
            var _a = this.matrix.current, rowIndex = _a[0], columnIndex = _a[1];
            if (rowIndex < 0 || columnIndex < 0) return !0;
            var cell = getValue(rowIndex + ".cells." + columnIndex, this.getTable().rows);
            return !cell || ("enter" !== e.action && "altDownArrow" !== e.action || !cell.classList.contains("e-headercell"));
        }, HeaderFocus;
    }(ContentFocus), FixedContentFocus = function(_super) {
        function FixedContentFocus() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$36(FixedContentFocus, _super), FixedContentFocus.prototype.getTable = function() {
            return this.parent.getContent().querySelector(".e-frozencontent .e-table");
        }, FixedContentFocus.prototype.jump = function(action, current) {
            var enterFrozen = 0 !== this.parent.frozenRows && "shiftEnter" === action;
            return {
                swap: ("upArrow" === action || enterFrozen) && 0 === current[0] || ("tab" === action || "rightArrow" === action) && current[1] === this.matrix.columns,
                toHeader: ("upArrow" === action || enterFrozen) && 0 === current[0],
                toFrozen: ("upArrow" === action || enterFrozen) && 0 === current[0]
            };
        }, FixedContentFocus.prototype.getNextCurrent = function(previous, swap, active, action) {
            void 0 === previous && (previous = []);
            var current2 = [];
            return "leftArrow" === action || "shiftTab" === action ? (current2[0] = previous[0], 
            current2[1] = active.matrix.columns + 1) : "downArrow" !== action && "enter" !== action || (current2[0] = -1, 
            current2[1] = previous[1]), current2;
        }, FixedContentFocus;
    }(ContentFocus), FixedHeaderFocus = function(_super) {
        function FixedHeaderFocus() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$36(FixedHeaderFocus, _super), FixedHeaderFocus.prototype.jump = function(action, current) {
            var enterFrozen = 0 !== this.parent.frozenRows && "enter" === action;
            return {
                swap: ("downArrow" === action || enterFrozen) && current[0] === this.matrix.matrix.length - 1 || ("rightArrow" === action || "tab" === action) && current[1] === this.matrix.columns,
                toHeader: ("rightArrow" === action || "tab" === action) && current[1] === this.matrix.columns,
                toFrozen: ("downArrow" === action || enterFrozen) && current[0] === this.matrix.matrix.length - 1
            };
        }, FixedHeaderFocus.prototype.getTable = function() {
            return this.parent.getHeaderContent().querySelector(".e-frozenheader .e-table");
        }, FixedHeaderFocus.prototype.getNextCurrent = function(previous, swap, active, action) {
            void 0 === previous && (previous = []);
            var current3 = [];
            return "leftArrow" === action || "shiftTab" === action ? (current3[0] = previous[0], 
            current3[1] = active.matrix.columns + 1) : "upArrow" !== action && "shiftEnter" !== action || (current3[0] = this.matrix.matrix.length, 
            current3[1] = previous[1]), current3;
        }, FixedHeaderFocus;
    }(HeaderFocus), SearchBox = function() {
        function SearchBox(searchBox) {
            this.searchBox = searchBox;
        }
        return SearchBox.prototype.searchFocus = function(args) {
            args.target.parentElement.classList.add("e-input-focus");
        }, SearchBox.prototype.searchBlur = function(args) {
            args.target.parentElement.classList.remove("e-input-focus");
        }, SearchBox.prototype.wireEvent = function() {
            this.searchBox && (EventHandler.add(this.searchBox, "focus", this.searchFocus, this), 
            EventHandler.add(this.searchBox, "blur", this.searchBlur, this));
        }, SearchBox.prototype.unWireEvent = function() {
            this.searchBox && (EventHandler.remove(this.searchBox, "focus", this.searchFocus), 
            EventHandler.remove(this.searchBox, "blur", this.searchBlur));
        }, SearchBox;
    }(), __extends$37 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$25 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, PageSettings = function(_super) {
        function PageSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$37(PageSettings, _super), __decorate$25([ Property(12) ], PageSettings.prototype, "pageSize", void 0), 
        __decorate$25([ Property(8) ], PageSettings.prototype, "pageCount", void 0), __decorate$25([ Property(1) ], PageSettings.prototype, "currentPage", void 0), 
        __decorate$25([ Property() ], PageSettings.prototype, "totalRecordsCount", void 0), 
        __decorate$25([ Property(!1) ], PageSettings.prototype, "enableQueryString", void 0), 
        __decorate$25([ Property(!1) ], PageSettings.prototype, "pageSizes", void 0), __decorate$25([ Property(null) ], PageSettings.prototype, "template", void 0), 
        PageSettings;
    }(ChildProperty), __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        }
        return t;
    }, Selection = function() {
        function Selection(parent, selectionSettings, locator) {
            this.selectedRowIndexes = [], this.selectedRowCellIndexes = [], this.selectedRecords = [], 
            this.preventFocus = !1, this.isMultiShiftRequest = !1, this.isMultiCtrlRequest = !1, 
            this.enableSelectMultiTouch = !1, this.selectedRowState = {}, this.totalRecordsCount = 0, 
            this.chkAllCollec = [], this.isCheckedOnAdd = !1, this.persistSelectedData = [], 
            this.isCancelDeSelect = !1, this.isPreventCellSelect = !1, this.disableUI = !1, 
            this.parent = parent, this.selectionSettings = selectionSettings, this.factory = locator.getService("rendererFactory"), 
            this.focus = locator.getService("focus"), this.addEventListener();
        }
        return Selection.prototype.initializeSelection = function() {
            EventHandler.add(this.parent.getContent(), "mousedown", this.mouseDownHandler, this);
        }, Selection.prototype.onActionBegin = function(args, type) {
            this.parent.trigger(type, this.fDataUpdate(args));
        }, Selection.prototype.fDataUpdate = function(args) {
            if (args.cellIndex || args.rowIndex) {
                var rowObj = this.getRowObj(isNullOrUndefined(args.rowIndex) ? isNullOrUndefined(args.cellIndex) ? this.currentIndex : args.cellIndex.rowIndex : args.rowIndex);
                args.foreignKeyData = rowObj.foreignKeyData;
            }
            return args;
        }, Selection.prototype.onActionComplete = function(args, type) {
            this.parent.trigger(type, this.fDataUpdate(args));
        }, Selection.prototype.getModuleName = function() {
            return "selection";
        }, Selection.prototype.destroy = function() {
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.hidePopUp(), 
            this.clearSelection(), this.removeEventListener(), EventHandler.remove(this.parent.getContent(), "mousedown", this.mouseDownHandler));
        }, Selection.prototype.isEditing = function() {
            return ("Normal" === this.parent.editSettings.mode || "Batch" === this.parent.editSettings.mode && this.parent.editModule.formObj && !this.parent.editModule.formObj.validate()) && this.parent.isEdit && !this.parent.isPersistSelection;
        }, Selection.prototype.getSelectedMovableRow = function(index) {
            var gObj = this.parent;
            return gObj.getFrozenColumns() ? gObj.getMovableRowByIndex(index) : null;
        }, Selection.prototype.getCurrentBatchRecordChanges = function() {
            var gObj = this.parent;
            if ("Batch" === gObj.editSettings.mode) {
                var currentRecords = iterateExtend(this.parent.getCurrentViewRecords());
                currentRecords = this.parent.editModule.getBatchChanges().addedRecords.concat(currentRecords);
                for (var deletedRecords = this.parent.editModule.getBatchChanges().deletedRecords, primaryKey = this.parent.getPrimaryKeyFieldNames()[0], i = 0; i < deletedRecords.length; i++) for (var j = 0; j < currentRecords.length; j++) if (deletedRecords[i][primaryKey] === currentRecords[j][primaryKey]) {
                    currentRecords.splice(j, 1);
                    break;
                }
                return currentRecords;
            }
            return gObj.getCurrentViewRecords();
        }, Selection.prototype.selectRow = function(index, isToggle) {
            var gObj = this.parent, selectedRow = gObj.getRowByIndex(index), selectedMovableRow = this.getSelectedMovableRow(index), selectData = this.getCurrentBatchRecordChanges()[index];
            if (gObj.enableVirtualization && gObj.allowGrouping && gObj.groupSettings.columns.length && selectedRow && (selectData = gObj.getRowObjectFromUID(selectedRow.getAttribute("data-uid")).data), 
            this.isRowType() && selectedRow && !this.isEditing()) {
                var args;
                selectedRow.hasAttribute("aria-selected");
                (isToggle = isToggle ? !!this.selectedRowIndexes.length && (1 === this.selectedRowIndexes.length && index === this.selectedRowIndexes[0]) : isToggle) || (args = {
                    data: selectData,
                    rowIndex: index,
                    isCtrlPressed: this.isMultiCtrlRequest,
                    isShiftPressed: this.isMultiShiftRequest,
                    row: selectedRow,
                    previousRow: gObj.getRowByIndex(this.prevRowIndex),
                    previousRowIndex: this.prevRowIndex,
                    target: this.target,
                    cancel: !1
                }, args = this.addMovableArgs(args, selectedMovableRow), this.onActionBegin(args, "rowSelecting")), 
                (isNullOrUndefined(args) || !0 !== args.cancel) && (this.selectionSettings.persistSelection || this.clearRow(), 
                isToggle || (this.updateRowSelection(selectedRow, index), gObj.getFrozenColumns() && this.updateRowSelection(selectedMovableRow, index), 
                gObj.selectedRowIndex = index), isToggle || (args = {
                    data: selectData,
                    rowIndex: index,
                    row: selectedRow,
                    previousRow: gObj.getRowByIndex(this.prevRowIndex),
                    previousRowIndex: this.prevRowIndex,
                    target: this.target
                }, args = this.addMovableArgs(args, selectedMovableRow), this.onActionComplete(args, "rowSelected")), 
                this.updateRowProps(index));
            }
        }, Selection.prototype.addMovableArgs = function(targetObj, mRow) {
            if (this.parent.getFrozenColumns()) {
                var mObj = {
                    mRow: mRow,
                    previousMovRow: this.parent.getMovableRows()[this.prevRowIndex]
                };
                targetObj = __assign({}, targetObj, mObj);
            }
            return targetObj;
        }, Selection.prototype.selectRowsByRange = function(startIndex, endIndex) {
            this.selectRows(this.getCollectionFromIndexes(startIndex, endIndex)), this.parent.selectedRowIndex = endIndex;
        }, Selection.prototype.selectRows = function(rowIndexes) {
            var gObj = this.parent, rowIndex = this.isSingleSel() ? rowIndexes[rowIndexes.length - 1] : rowIndexes[0], selectedRow = gObj.getRowByIndex(rowIndex), selectedMovableRow = this.getSelectedMovableRow(rowIndex), frzCols = gObj.getFrozenColumns(), selectedData = this.getCurrentBatchRecordChanges()[rowIndexes[0]];
            if (this.isRowType() && !this.isEditing()) {
                var args = {
                    rowIndexes: rowIndexes,
                    row: selectedRow,
                    rowIndex: rowIndex,
                    target: this.target,
                    prevRow: gObj.getRows()[this.prevRowIndex],
                    previousRowIndex: this.prevRowIndex,
                    isCtrlPressed: this.isMultiCtrlRequest,
                    isShiftPressed: this.isMultiShiftRequest,
                    data: selectedData
                };
                if (args = this.addMovableArgs(args, selectedMovableRow), this.onActionBegin(args, "rowSelecting"), 
                isNullOrUndefined(args) || !0 !== args.cancel) {
                    if (this.clearRow(), gObj.selectedRowIndex = rowIndexes.slice(-1)[0], this.isSingleSel()) this.updateRowSelection(gObj.getRowByIndex(rowIndex), rowIndex), 
                    frzCols && this.updateRowSelection(gObj.getMovableRowByIndex(rowIndex), rowIndex), 
                    this.updateRowProps(rowIndex); else for (var _i = 0, rowIndexes_1 = rowIndexes; _i < rowIndexes_1.length; _i++) {
                        var rowIdx = rowIndexes_1[_i];
                        this.updateRowSelection(gObj.getRowByIndex(rowIdx), rowIdx), frzCols && this.updateRowSelection(gObj.getMovableRowByIndex(rowIdx), rowIdx), 
                        this.updateRowProps(rowIndex);
                    }
                    args = {
                        rowIndexes: rowIndexes,
                        row: selectedRow,
                        rowIndex: rowIndex,
                        target: this.target,
                        prevRow: gObj.getRows()[this.prevRowIndex],
                        previousRowIndex: this.prevRowIndex,
                        data: selectedData
                    }, args = this.addMovableArgs(args, selectedMovableRow), this.onActionComplete(args, "rowSelected");
                }
            }
        }, Selection.prototype.addRowsToSelection = function(rowIndexes) {
            var gObj = this.parent, selectedRow = this.isSingleSel() ? gObj.getRowByIndex(rowIndexes[rowIndexes.length - 1]) : gObj.getRowByIndex(rowIndexes[0]), selectedMovableRow = this.isSingleSel() ? this.getSelectedMovableRow(rowIndexes[rowIndexes.length - 1]) : this.getSelectedMovableRow(rowIndexes[0]), frzCols = gObj.getFrozenColumns();
            if (this.isRowType() && !this.isEditing()) for (var args, _i = 0, rowIndexes_2 = rowIndexes; _i < rowIndexes_2.length; _i++) {
                var rowIndex = rowIndexes_2[_i], rowObj = this.getRowObj(rowIndex), isUnSelected = this.selectedRowIndexes.indexOf(rowIndex) > -1;
                if (gObj.selectedRowIndex = rowIndex, isUnSelected) this.rowDeselect("rowDeselecting", [ rowIndex ], [ rowObj.data ], [ selectedRow ], [ rowObj.foreignKeyData ]), 
                this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(rowIndex), 1), this.selectedRecords.splice(this.selectedRecords.indexOf(selectedRow), 1), 
                selectedRow.removeAttribute("aria-selected"), this.addRemoveClassesForRow(selectedRow, !1, null, "e-selectionbackground", "e-active"), 
                selectedMovableRow && (this.selectedRecords.splice(this.selectedRecords.indexOf(selectedMovableRow), 1), 
                selectedMovableRow.removeAttribute("aria-selected"), this.addRemoveClassesForRow(selectedMovableRow, !1, null, "e-selectionbackground", "e-active")), 
                this.rowDeselect("rowDeselected", [ rowIndex ], [ rowObj.data ], [ selectedRow ], [ rowObj.foreignKeyData ], [ selectedMovableRow ]); else {
                    if (args = {
                        data: rowObj.data,
                        rowIndex: rowIndex,
                        row: selectedRow,
                        target: this.target,
                        prevRow: gObj.getRows()[this.prevRowIndex],
                        previousRowIndex: this.prevRowIndex,
                        isCtrlPressed: this.isMultiCtrlRequest,
                        isShiftPressed: this.isMultiShiftRequest,
                        foreignKeyData: rowObj.foreignKeyData
                    }, args = this.addMovableArgs(args, selectedMovableRow), this.onActionBegin(args, "rowSelecting"), 
                    !isNullOrUndefined(args) && !0 === args.cancel) return;
                    this.isSingleSel() && this.clearRow(), this.updateRowSelection(selectedRow, rowIndex), 
                    frzCols && this.updateRowSelection(selectedMovableRow, rowIndex);
                }
                if (isUnSelected || (args = {
                    data: rowObj.data,
                    rowIndex: rowIndex,
                    row: selectedRow,
                    target: this.target,
                    prevRow: gObj.getRows()[this.prevRowIndex],
                    previousRowIndex: this.prevRowIndex,
                    foreignKeyData: rowObj.foreignKeyData
                }, args = this.addMovableArgs(args, selectedMovableRow), this.onActionComplete(args, "rowSelected")), 
                this.updateRowProps(rowIndex), this.isSingleSel()) break;
            }
        }, Selection.prototype.getCollectionFromIndexes = function(startIndex, endIndex) {
            for (var indexes = [], _a = startIndex < endIndex ? {
                i: startIndex,
                max: endIndex
            } : {
                i: endIndex,
                max: startIndex
            }, i = _a.i, max = _a.max; i <= max; i++) indexes.push(i);
            return startIndex > endIndex && indexes.reverse(), indexes;
        }, Selection.prototype.clearRow = function() {
            this.clearRowSelection(), this.selectedRowIndexes = [], this.selectedRecords = [], 
            this.parent.selectedRowIndex = -1, this.isSingleSel() && this.parent.isPersistSelection && (this.selectedRowState = {});
        }, Selection.prototype.updateRowProps = function(startIndex) {
            this.prevRowIndex = startIndex, this.isRowSelected = this.selectedRowIndexes.length && !0;
        }, Selection.prototype.updatePersistCollection = function(selectedRow, chkState) {
            var _this = this;
            if (this.parent.isPersistSelection && !isNullOrUndefined(selectedRow)) {
                var rowObj = this.getRowObj(selectedRow), pKey_1 = rowObj.data ? rowObj.data[this.primaryKey] : null;
                if (null === pKey_1) return;
                rowObj.isSelected = chkState, chkState ? (this.selectedRowState[pKey_1] = chkState, 
                this.persistSelectedData.some(function(data) {
                    return data[_this.primaryKey] === pKey_1;
                }) || this.persistSelectedData.push(rowObj.data)) : this.updatePersistDelete(pKey_1);
            }
        }, Selection.prototype.updatePersistDelete = function(pKey) {
            var _this = this;
            delete this.selectedRowState[pKey];
            var index;
            this.persistSelectedData.some(function(data, i) {
                return index = i, data[_this.primaryKey] === pKey;
            }) && this.persistSelectedData.splice(index, 1);
        }, Selection.prototype.updateCheckBoxes = function(row, chkState) {
            if (!isNullOrUndefined(row)) {
                var chkBox = row.querySelector(".e-checkselect");
                isNullOrUndefined(chkBox) || (removeAddCboxClasses(chkBox.nextElementSibling, chkState), 
                (isNullOrUndefined(this.checkedTarget) || !isNullOrUndefined(this.checkedTarget) && !this.checkedTarget.classList.contains("e-checkselectall")) && this.setCheckAllState(parseInt(row.getAttribute("aria-rowindex"), 10)));
            }
        }, Selection.prototype.updateRowSelection = function(selectedRow, startIndex) {
            if (selectedRow) {
                this.selectedRowIndexes.push(startIndex);
                var len = this.selectedRowIndexes.length;
                if (this.parent.getFrozenColumns() && len > 1 && this.selectedRowIndexes[len - 2] === this.selectedRowIndexes[len - 1] && this.selectedRowIndexes.pop(), 
                this.selectedRecords.push(selectedRow), selectedRow.setAttribute("aria-selected", "true"), 
                this.updatePersistCollection(selectedRow, !0), this.updateCheckBoxes(selectedRow, !0), 
                this.addRemoveClassesForRow(selectedRow, !0, null, "e-selectionbackground", "e-active"), 
                !this.preventFocus) {
                    var target = this.focus.getPrevIndexes().cellIndex ? selectedRow.cells[this.focus.getPrevIndexes().cellIndex] : selectedRow.querySelector(".e-selectionbackground:not(.e-hide)");
                    if (!target) return;
                    this.focus.onClick({
                        target: target
                    }, !0);
                }
            }
        }, Selection.prototype.clearSelection = function() {
            if (!this.parent.isPersistSelection || this.parent.isPersistSelection && !this.parent.isEdit || !isNullOrUndefined(this.checkedTarget) && this.checkedTarget.classList.contains("e-checkselectall")) {
                var span = this.parent.element.querySelector(".e-gridpopup").querySelector("span");
                span.classList.contains("e-rowselect") && span.classList.remove("e-spanclicked"), 
                this.clearRowSelection(), this.clearCellSelection(), this.enableSelectMultiTouch = !1;
            }
        }, Selection.prototype.clearRowSelection = function() {
            var _this = this;
            if (this.isRowSelected) {
                for (var gObj = this.parent, rows = this.parent.getDataRows(), data = [], row = [], mRow = [], rowIndex = [], frzCols = gObj.getFrozenColumns(), foreignKeyData$$1 = [], i = (this.parent.getCurrentViewRecords(), 
                0), len = this.selectedRowIndexes.length; i < len; i++) {
                    var currentRow = this.parent.getDataRows()[this.selectedRowIndexes[i]], rowObj = this.getRowObj(currentRow);
                    rowObj && (data.push(rowObj.data), row.push(currentRow), rowIndex.push(this.selectedRowIndexes[i]), 
                    foreignKeyData$$1.push(rowObj.foreignKeyData)), frzCols && mRow.push(gObj.getMovableRows()[this.selectedRowIndexes[i]]);
                }
                if (this.rowDeselect("rowDeselecting", rowIndex, data, row, foreignKeyData$$1, mRow), 
                !0 === this.isCancelDeSelect) return;
                rows.filter(function(record) {
                    return record.hasAttribute("aria-selected");
                }).forEach(function(ele) {
                    _this.disableUI || (ele.removeAttribute("aria-selected"), _this.addRemoveClassesForRow(ele, !1, !0, "e-selectionbackground", "e-active")), 
                    _this.updatePersistCollection(ele, !1), _this.updateCheckBoxes(ele);
                });
                for (i = 0, len = this.selectedRowIndexes.length; i < len; i++) {
                    var movableRow = this.getSelectedMovableRow(this.selectedRowIndexes[i]);
                    movableRow && (this.disableUI || (movableRow.removeAttribute("aria-selected"), this.addRemoveClassesForRow(movableRow, !1, !0, "e-selectionbackground", "e-active")), 
                    this.updatePersistCollection(movableRow, !1));
                }
                this.selectedRowIndexes = [], this.selectedRecords = [], this.isRowSelected = !1, 
                this.parent.selectedRowIndex = -1, this.rowDeselect("rowDeselected", rowIndex, data, row, foreignKeyData$$1, mRow);
            }
        }, Selection.prototype.rowDeselect = function(type, rowIndex, data, row, foreignKeyData$$1, mRow) {
            this.updatePersistCollection(row[0], !1);
            var rowDeselectObj = {
                rowIndex: rowIndex,
                data: data,
                row: row,
                foreignKeyData: foreignKeyData$$1,
                cancel: !1
            };
            this.parent.trigger(type, this.parent.getFrozenColumns() ? __assign({}, rowDeselectObj, {
                mRow: mRow
            }) : rowDeselectObj), this.isCancelDeSelect = rowDeselectObj.cancel, this.updateCheckBoxes(row[0]);
        }, Selection.prototype.getRowObj = function(row) {
            return void 0 === row && (row = this.currentIndex), isNullOrUndefined(row) ? {} : ("number" == typeof row && (row = this.parent.getRowByIndex(row)), 
            row ? this.parent.getRowObjectFromUID(row.getAttribute("data-uid")) || {} : {});
        }, Selection.prototype.getSelectedMovableCell = function(cellIndex) {
            var gObj = this.parent, frzCols = gObj.getFrozenColumns();
            return frzCols && cellIndex.cellIndex >= frzCols ? gObj.getMovableCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex)) : null;
        }, Selection.prototype.selectCell = function(cellIndex, isToggle) {
            if (this.isCellType()) {
                var args, gObj = this.parent, selectedCell = this.getSelectedMovableCell(cellIndex);
                selectedCell || (selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex))), 
                this.currentIndex = cellIndex.rowIndex;
                var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
                if (this.isCellType() && selectedCell && !this.isEditing()) {
                    var isCellSelected = selectedCell.classList.contains("e-cellselectionbackground");
                    (isToggle = isToggle ? !isUndefined(this.prevCIdxs) && cellIndex.rowIndex === this.prevCIdxs.rowIndex && cellIndex.cellIndex === this.prevCIdxs.cellIndex && isCellSelected : isToggle) || (args = {
                        data: selectedData,
                        cellIndex: cellIndex,
                        currentCell: selectedCell,
                        isCtrlPressed: this.isMultiCtrlRequest,
                        isShiftPressed: this.isMultiShiftRequest,
                        previousRowCellIndex: this.prevECIdxs,
                        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0,
                        cancel: !1
                    }, this.onActionBegin(args, "cellSelecting")), (isNullOrUndefined(args) || !0 !== args.cancel) && (this.clearCell(), 
                    isToggle || this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex), 
                    this.updateCellProps(cellIndex, cellIndex), isToggle || this.onActionComplete({
                        data: selectedData,
                        cellIndex: cellIndex,
                        currentCell: selectedCell,
                        previousRowCellIndex: this.prevECIdxs,
                        selectedRowCellIndex: this.selectedRowCellIndexes,
                        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
                    }, "cellSelected"));
                }
            }
        }, Selection.prototype.getCellIndex = function(rIdx, cIdx) {
            return this.parent.getFrozenColumns() && cIdx >= this.parent.getFrozenColumns() ? this.parent.getMovableCellFromIndex(rIdx, cIdx) : this.parent.getCellFromIndex(rIdx, cIdx);
        }, Selection.prototype.selectCellsByRange = function(startIndex, endIndex) {
            if (this.isCellType()) {
                var gObj = this.parent, selectedCell = this.getSelectedMovableCell(startIndex), frzCols = gObj.getFrozenColumns();
                selectedCell || (selectedCell = gObj.getCellFromIndex(startIndex.rowIndex, startIndex.cellIndex));
                var min, max, cellIndexes, stIndex = startIndex, edIndex = endIndex = endIndex || startIndex;
                this.currentIndex = startIndex.rowIndex;
                var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
                if (!this.isSingleSel() && this.isCellType() && !this.isEditing()) {
                    var args = {
                        data: selectedData,
                        cellIndex: startIndex,
                        currentCell: selectedCell,
                        isCtrlPressed: this.isMultiCtrlRequest,
                        isShiftPressed: this.isMultiShiftRequest,
                        previousRowCellIndex: this.prevECIdxs,
                        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
                    };
                    if (this.onActionBegin(args, "cellSelecting"), isNullOrUndefined(args) || !0 !== args.cancel) {
                        if (this.clearCell(), startIndex.rowIndex > endIndex.rowIndex) {
                            var temp = startIndex;
                            startIndex = endIndex, endIndex = temp;
                        }
                        for (var i = startIndex.rowIndex; i <= endIndex.rowIndex; i++) {
                            "Box" !== this.selectionSettings.cellSelectionMode ? (min = i === startIndex.rowIndex ? startIndex.cellIndex : 0, 
                            max = i === endIndex.rowIndex ? endIndex.cellIndex : this.getLastColIndex(i)) : (min = startIndex.cellIndex, 
                            max = endIndex.cellIndex), cellIndexes = [];
                            for (var j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) (selectedCell = frzCols ? j < frzCols ? gObj.getCellFromIndex(i, j) : gObj.getMovableCellFromIndex(i, j) : gObj.getCellFromIndex(i, j)) && (cellIndexes.push(j), 
                            this.updateCellSelection(selectedCell), this.addAttribute(selectedCell));
                            this.selectedRowCellIndexes.push({
                                rowIndex: i,
                                cellIndexes: cellIndexes
                            });
                        }
                        this.updateCellProps(stIndex, edIndex), this.onActionComplete({
                            data: selectedData,
                            cellIndex: startIndex,
                            currentCell: selectedCell,
                            previousRowCellIndex: this.prevECIdxs,
                            selectedRowCellIndex: this.selectedRowCellIndexes,
                            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
                        }, "cellSelected");
                    }
                }
            }
        }, Selection.prototype.selectCells = function(rowCellIndexes) {
            if (this.isCellType()) {
                var gObj = this.parent, selectedCell = this.getSelectedMovableCell(rowCellIndexes[0]), frzCols = gObj.getFrozenColumns();
                selectedCell || (selectedCell = gObj.getCellFromIndex(rowCellIndexes[0].rowIndex, rowCellIndexes[0].cellIndexes[0])), 
                this.currentIndex = rowCellIndexes[0].rowIndex;
                var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
                if (!this.isSingleSel() && this.isCellType() && !this.isEditing()) {
                    this.onActionBegin({
                        data: selectedData,
                        cellIndex: rowCellIndexes[0].cellIndexes[0],
                        currentCell: selectedCell,
                        isCtrlPressed: this.isMultiCtrlRequest,
                        isShiftPressed: this.isMultiShiftRequest,
                        previousRowCellIndex: this.prevECIdxs,
                        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
                    }, "cellSelecting");
                    for (var i = 0, len = rowCellIndexes.length; i < len; i++) for (var j = 0, cellLen = rowCellIndexes[i].cellIndexes.length; j < cellLen; j++) (selectedCell = frzCols ? rowCellIndexes[i].cellIndexes[j] < frzCols ? gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]) : gObj.getMovableCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]) : gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j])) && (this.updateCellSelection(selectedCell), 
                    this.addAttribute(selectedCell), this.addRowCellIndex({
                        rowIndex: rowCellIndexes[i].rowIndex,
                        cellIndex: rowCellIndexes[i].cellIndexes[j]
                    }));
                    this.updateCellProps({
                        rowIndex: rowCellIndexes[0].rowIndex,
                        cellIndex: rowCellIndexes[0].cellIndexes[0]
                    }, {
                        rowIndex: rowCellIndexes[0].rowIndex,
                        cellIndex: rowCellIndexes[0].cellIndexes[0]
                    }), this.onActionComplete({
                        data: selectedData,
                        cellIndex: rowCellIndexes[0].cellIndexes[0],
                        currentCell: selectedCell,
                        previousRowCellIndex: this.prevECIdxs,
                        selectedRowCellIndex: this.selectedRowCellIndexes,
                        previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
                    }, "cellSelected");
                }
            }
        }, Selection.prototype.addCellsToSelection = function(cellIndexes) {
            if (this.isCellType()) {
                var selectedCell, index, gObj = this.parent, frzCols = gObj.getFrozenColumns();
                this.currentIndex = cellIndexes[0].rowIndex;
                var selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
                if (!this.isSingleSel() && this.isCellType() && !this.isEditing()) {
                    var rowObj;
                    rowObj = frzCols && cellIndexes[0].cellIndex >= frzCols ? gObj.getMovableRowsObject()[cellIndexes[0].rowIndex] : this.getRowObj(cellIndexes[0].rowIndex);
                    for (var foreignKeyData$$1 = [], _i = 0, cellIndexes_1 = cellIndexes; _i < cellIndexes_1.length; _i++) {
                        for (var cellIndex = cellIndexes_1[_i], i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) if (this.selectedRowCellIndexes[i].rowIndex === cellIndex.rowIndex) {
                            index = i;
                            break;
                        }
                        (selectedCell = this.getSelectedMovableCell(cellIndex)) || (selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex))), 
                        foreignKeyData$$1.push(rowObj.cells[frzCols && cellIndexes[0].cellIndex >= frzCols ? cellIndex.cellIndex - frzCols : cellIndex.cellIndex].foreignKeyData);
                        var args = {
                            data: selectedData,
                            cellIndex: cellIndexes[0],
                            isShiftPressed: this.isMultiShiftRequest,
                            previousRowCellIndex: this.prevECIdxs,
                            currentCell: selectedCell,
                            isCtrlPressed: this.isMultiCtrlRequest,
                            previousRowCell: this.prevECIdxs ? gObj.getCellFromIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0
                        }, isUnSelected = index > -1;
                        if (isUnSelected) {
                            var selectedCellIdx = this.selectedRowCellIndexes[index].cellIndexes;
                            selectedCellIdx.indexOf(cellIndex.cellIndex) > -1 ? (this.cellDeselect("cellDeselecting", [ {
                                rowIndex: cellIndex.rowIndex,
                                cellIndexes: [ cellIndex.cellIndex ]
                            } ], selectedData, [ selectedCell ], foreignKeyData$$1), selectedCellIdx.splice(selectedCellIdx.indexOf(cellIndex.cellIndex), 1), 
                            selectedCell.classList.remove("e-cellselectionbackground"), selectedCell.removeAttribute("aria-selected"), 
                            this.cellDeselect("cellDeselected", [ {
                                rowIndex: cellIndex.rowIndex,
                                cellIndexes: [ cellIndex.cellIndex ]
                            } ], selectedData, [ selectedCell ], foreignKeyData$$1)) : (isUnSelected = !1, this.onActionBegin(args, "cellSelecting"), 
                            this.addRowCellIndex({
                                rowIndex: cellIndex.rowIndex,
                                cellIndex: cellIndex.cellIndex
                            }), this.updateCellSelection(selectedCell), this.addAttribute(selectedCell));
                        } else this.onActionBegin(args, "cellSelecting"), this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
                        this.updateCellProps(cellIndex, cellIndex), isUnSelected || this.onActionComplete({
                            data: selectedData,
                            cellIndex: cellIndexes[0],
                            currentCell: selectedCell,
                            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : void 0,
                            previousRowCellIndex: this.prevECIdxs,
                            selectedRowCellIndex: this.selectedRowCellIndexes
                        }, "cellSelected");
                    }
                }
            }
        }, Selection.prototype.getColIndex = function(rowIndex, index) {
            var cells, frzCols = this.parent.getFrozenColumns();
            frzCols && index >= frzCols && (cells = this.parent.getMovableDataRows()[rowIndex].querySelectorAll("td.e-rowcell")), 
            cells || (cells = this.parent.getDataRows()[rowIndex].querySelectorAll("td.e-rowcell"));
            for (var m = 0; m < cells.length; m++) {
                if (parseInt(cells[m].getAttribute("aria-colindex"), 10) === index) return frzCols && index >= frzCols && (m += frzCols), 
                m;
            }
            return -1;
        }, Selection.prototype.getLastColIndex = function(rowIndex) {
            var cells = this.parent.getFrozenColumns() ? this.parent.getMovableDataRows()[rowIndex].querySelectorAll("td.e-rowcell") : this.parent.getDataRows()[rowIndex].querySelectorAll("td.e-rowcell");
            return parseInt(cells[cells.length - 1].getAttribute("aria-colindex"), 10);
        }, Selection.prototype.clearCell = function() {
            this.clearCellSelection();
        }, Selection.prototype.cellDeselect = function(type, cellIndexes, data, cells, foreignKeyData$$1) {
            cells[0] && cells[0].classList.contains("e-gridchkbox") && this.updateCheckBoxes(closest(cells[0], "tr"));
            var args = {
                cells: cells,
                data: data,
                cellIndexes: cellIndexes,
                foreignKeyData: foreignKeyData$$1,
                cancel: !1
            };
            this.parent.trigger(type, args), this.isPreventCellSelect = args.cancel;
        }, Selection.prototype.updateCellSelection = function(selectedCell, rowIndex, cellIndex) {
            isNullOrUndefined(rowIndex) || this.addRowCellIndex({
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }), selectedCell.classList.add("e-cellselectionbackground"), selectedCell.classList.contains("e-gridchkbox") && this.updateCheckBoxes(closest(selectedCell, "tr"), !0), 
            this.addAttribute(selectedCell);
        }, Selection.prototype.addAttribute = function(cell) {
            this.target = cell, isNullOrUndefined(cell) || (cell.setAttribute("aria-selected", "true"), 
            this.preventFocus || this.focus.onClick({
                target: cell
            }, !0));
        }, Selection.prototype.updateCellProps = function(startIndex, endIndex) {
            this.prevCIdxs = startIndex, this.prevECIdxs = endIndex, this.isCellSelected = this.selectedRowCellIndexes.length && !0;
        }, Selection.prototype.addRowCellIndex = function(rowCellIndex) {
            for (var isRowAvail, index, i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) if (this.selectedRowCellIndexes[i].rowIndex === rowCellIndex.rowIndex) {
                isRowAvail = !0, index = i;
                break;
            }
            isRowAvail ? this.selectedRowCellIndexes[index].cellIndexes.indexOf(rowCellIndex.cellIndex) < 0 && this.selectedRowCellIndexes[index].cellIndexes.push(rowCellIndex.cellIndex) : this.selectedRowCellIndexes.push({
                rowIndex: rowCellIndex.rowIndex,
                cellIndexes: [ rowCellIndex.cellIndex ]
            });
        }, Selection.prototype.clearCellSelection = function() {
            if (this.isCellSelected) {
                for (var gObj = this.parent, selectedCells = this.getSelectedCellsElement(), rowCell = this.selectedRowCellIndexes, data = [], cells = [], foreignKeyData$$1 = [], currentViewData = this.getCurrentBatchRecordChanges(), frzCols = gObj.getFrozenColumns(), i = 0, len = rowCell.length; i < len; i++) {
                    data.push(currentViewData[rowCell[i].rowIndex]);
                    for (var rowObj = this.getRowObj(rowCell[i].rowIndex), j = 0, cLen = rowCell[i].cellIndexes.length; j < cLen; j++) frzCols ? rowCell[i].cellIndexes[j] < frzCols ? cells.push(gObj.getCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j])) : cells.push(gObj.getMovableCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j])) : (foreignKeyData$$1.push(rowObj.cells[rowCell[i].cellIndexes[j]].foreignKeyData), 
                    cells.push(gObj.getCellFromIndex(rowCell[i].rowIndex, rowCell[i].cellIndexes[j])));
                }
                if (this.cellDeselect("cellDeselecting", rowCell, data, cells, foreignKeyData$$1), 
                !0 === this.isPreventCellSelect) return;
                for (i = 0, len = selectedCells.length; i < len; i++) selectedCells[i].classList.remove("e-cellselectionbackground"), 
                selectedCells[i].removeAttribute("aria-selected");
                this.selectedRowCellIndexes = [], this.isCellSelected = !1, this.cellDeselect("cellDeselected", rowCell, data, cells, foreignKeyData$$1), 
                this.prevECIdxs = void 0;
            }
        }, Selection.prototype.getSelectedCellsElement = function() {
            var mRows, gObj = this.parent, rows = gObj.getDataRows();
            gObj.getFrozenColumns() && (mRows = gObj.getMovableDataRows(), rows = gObj.addMovableRows(rows, mRows));
            for (var cells = [], i = 0, len = rows.length; i < len; i++) cells = cells.concat([].slice.call(rows[i].querySelectorAll(".e-cellselectionbackground")));
            return cells;
        }, Selection.prototype.mouseMoveHandler = function(e) {
            e.preventDefault();
            var tmp, gBRect = this.parent.element.getBoundingClientRect(), x1 = this.x, y1 = this.y, position = getPosition(e), x2 = position.x - gBRect.left, y2 = position.y - gBRect.top, target = closest(e.target, "tr");
            if (this.isDragged = !0, this.isCellDrag || (target || (target = closest(document.elementFromPoint(this.parent.element.offsetLeft + 2, e.clientY), "tr")), 
            x1 > x2 && (tmp = x2, x2 = x1, x1 = tmp), y1 > y2 && (tmp = y2, y2 = y1, y1 = tmp), 
            this.element.style.left = x1 + "px", this.element.style.top = y1 + "px", this.element.style.width = x2 - x1 + "px", 
            this.element.style.height = y2 - y1 + "px"), target && !e.ctrlKey && !e.shiftKey) {
                var rowIndex = parseInt(target.getAttribute("aria-rowindex"), 10);
                if (this.isCellDrag) {
                    var td = parentsUntil(e.target, "e-rowcell");
                    td && this.selectLikeExcel(rowIndex, parseInt(td.getAttribute("aria-colindex"), 10));
                } else this.selectRowsByRange(this.startIndex, rowIndex);
            }
        }, Selection.prototype.selectLikeExcel = function(rowIndex, cellIndex) {
            this.clearCellSelection(), this.selectCellsByRange({
                rowIndex: this.startIndex,
                cellIndex: this.startCellIndex
            }, {
                rowIndex: rowIndex,
                cellIndex: cellIndex
            });
        }, Selection.prototype.mouseUpHandler = function(e) {
            document.body.classList.remove("e-disableuserselect"), this.element && remove(this.element), 
            EventHandler.remove(this.parent.getContent(), "mousemove", this.mouseMoveHandler), 
            EventHandler.remove(document.body, "mouseup", this.mouseUpHandler), this.isDragged = !1;
        }, Selection.prototype.mouseDownHandler = function(e) {
            var isDrag, target = e.target, gObj = this.parent, gridElement = parentsUntil(target, "e-grid");
            if ((!gridElement || gridElement.id === gObj.element.id) && ((e.shiftKey || e.ctrlKey) && e.preventDefault(), 
            target.classList.contains("e-rowcell") && !e.shiftKey && !e.ctrlKey)) {
                if ("Box" !== gObj.selectionSettings.cellSelectionMode || this.isRowType() || this.isSingleSel()) {
                    if (gObj.allowRowDragAndDrop) {
                        if (!this.isRowType() || this.isSingleSel() || closest(target, "td").classList.contains("e-selectionbackground")) return void (this.isDragged = !1);
                        isDrag = !0, this.element = this.parent.createElement("div", {
                            className: "e-griddragarea"
                        }), gObj.getContent().appendChild(this.element);
                    }
                } else this.isCellDrag = !0, isDrag = !0;
                if (isDrag) {
                    var tr = closest(e.target, "tr");
                    this.startIndex = parseInt(tr.getAttribute("aria-rowindex"), 10), this.startCellIndex = parseInt(parentsUntil(target, "e-rowcell").getAttribute("aria-colindex"), 10), 
                    document.body.classList.add("e-disableuserselect");
                    var gBRect = gObj.element.getBoundingClientRect(), postion = getPosition(e);
                    this.x = postion.x - gBRect.left, this.y = postion.y - gBRect.top, EventHandler.add(gObj.getContent(), "mousemove", this.mouseMoveHandler, this), 
                    EventHandler.add(document.body, "mouseup", this.mouseUpHandler, this);
                }
            }
        }, Selection.prototype.clearSelAfterRefresh = function(e) {
            "virtualscroll" === e.requestType || this.parent.isPersistSelection || this.clearSelection();
        }, Selection.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(uiUpdate, this.enableAfterRender, this), 
            this.parent.on(initialEnd, this.initializeSelection, this), this.parent.on("rowselected", this.onActionComplete, this), 
            this.parent.on("cellselected", this.onActionComplete, this), this.parent.on(inBoundModelChanged, this.onPropertyChanged, this), 
            this.parent.on("cellfocused", this.onCellFocused, this), this.parent.on("beforeFragAppend", this.clearSelAfterRefresh, this), 
            this.parent.on(columnPositionChanged, this.columnPositionChanged, this), this.parent.on(contentReady, this.initialEnd, this), 
            this.actionBeginFunction = this.actionBegin.bind(this), this.actionCompleteFunction = this.actionComplete.bind(this), 
            this.parent.addEventListener(actionBegin, this.actionBeginFunction), this.parent.addEventListener(actionComplete, this.actionCompleteFunction), 
            this.parent.on(rowsRemoved, this.rowsRemoved, this), this.parent.on(headerRefreshed, this.refreshHeader, this), 
            this.addEventListener_checkbox());
        }, Selection.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(uiUpdate, this.enableAfterRender), this.parent.off(initialEnd, this.initializeSelection), 
            this.parent.off("rowselected", this.onActionComplete), this.parent.off("cellselected", this.onActionComplete), 
            this.parent.off(inBoundModelChanged, this.onPropertyChanged), this.parent.off("cellfocused", this.onCellFocused), 
            this.parent.off("beforeFragAppend", this.clearSelAfterRefresh), this.parent.off(columnPositionChanged, this.columnPositionChanged), 
            this.parent.removeEventListener(actionBegin, this.actionBeginFunction), this.parent.removeEventListener(actionComplete, this.actionCompleteFunction), 
            this.parent.off(rowsRemoved, this.rowsRemoved), this.parent.off(headerRefreshed, this.refreshHeader), 
            this.removeEventListener_checkbox());
        }, Selection.prototype.columnPositionChanged = function() {
            this.parent.isPersistSelection || this.clearSelection();
        }, Selection.prototype.refreshHeader = function() {
            this.setCheckAllState();
        }, Selection.prototype.rowsRemoved = function(e) {
            for (var i = 0; i < e.records.length; i++) delete this.selectedRowState[e.records[i][this.primaryKey]], 
            --this.totalRecordsCount;
            this.setCheckAllState();
        }, Selection.prototype.beforeFragAppend = function(e) {
            "virtualscroll" === e.requestType || this.parent.isPersistSelection || this.clearSelection();
        }, Selection.prototype.getCheckAllBox = function() {
            return this.parent.getHeaderContent().querySelector(".e-checkselectall");
        }, Selection.prototype.enableAfterRender = function(e) {
            e.module === this.getModuleName() && e.enable && this.render();
        }, Selection.prototype.render = function(e) {
            EventHandler.add(this.parent.getContent(), "mousedown", this.mouseDownHandler, this);
        }, Selection.prototype.onPropertyChanged = function(e) {
            if (e.module === this.getModuleName()) {
                var gObj = this.parent;
                isNullOrUndefined(e.properties.type) || "Single" !== this.selectionSettings.type || (this.selectedRowCellIndexes.length > 1 && this.clearCellSelection(), 
                this.selectedRowIndexes.length > 1 && this.clearRowSelection(), this.enableSelectMultiTouch = !1, 
                this.hidePopUp()), isNullOrUndefined(e.properties.mode) && isNullOrUndefined(e.properties.cellSelectionMode) || this.clearSelection(), 
                this.checkBoxSelectionChanged(), this.initPerisistSelection();
                this.parent.getColumns().filter(function(col) {
                    return "checkbox" === col.type;
                }).length && (gObj.isCheckBoxSelection = !("ResetOnRowClick" === this.selectionSettings.checkboxMode));
            }
        }, Selection.prototype.hidePopUp = function() {
            this.parent.element.querySelector(".e-gridpopup").querySelectorAll(".e-rowselect").length && (this.parent.element.querySelector(".e-gridpopup").style.display = "none");
        }, Selection.prototype.initialEnd = function() {
            this.parent.off(contentReady, this.initialEnd), this.selectRow(this.parent.selectedRowIndex);
        }, Selection.prototype.checkBoxSelectionChanged = function() {
            this.parent.off(contentReady, this.checkBoxSelectionChanged);
            var gobj = this.parent, checkboxColumn = gobj.getColumns().filter(function(col) {
                return "checkbox" === col.type;
            });
            checkboxColumn.length > 0 && (gobj.isCheckBoxSelection = !0, this.chkField = checkboxColumn[0].field, 
            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount, isNullOrUndefined(this.totalRecordsCount) && (this.totalRecordsCount = this.getCurrentBatchRecordChanges().length), 
            this.isSingleSel() ? (gobj.selectionSettings.type = "Multiple", gobj.dataBind()) : this.initPerisistSelection()), 
            gobj.isCheckBoxSelection || (this.chkField = null, this.initPerisistSelection());
        }, Selection.prototype.initPerisistSelection = function() {
            var gobj = this.parent;
            this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0 ? (gobj.isPersistSelection = !0, 
            this.ensureCheckboxFieldSelection()) : this.parent.getPrimaryKeyFieldNames().length > 0 ? (gobj.isPersistSelection = !1, 
            this.ensureCheckboxFieldSelection()) : (gobj.isPersistSelection = !1, this.selectedRowState = {});
        }, Selection.prototype.ensureCheckboxFieldSelection = function() {
            var gobj = this.parent;
            if (this.primaryKey = this.parent.getPrimaryKeyFieldNames()[0], !gobj.enableVirtualization && this.chkField && (gobj.isPersistSelection && 0 === Object.keys(this.selectedRowState).length || !gobj.isPersistSelection)) {
                var data = this.parent.getDataModule(), query = new Query().where(this.chkField, "equal", !0), dataManager = data.getData({}, query), proxy_1 = this;
                this.parent.showSpinner(), dataManager.then(function(e) {
                    proxy_1.dataSuccess(e.result), proxy_1.refreshPersistSelection(), proxy_1.parent.hideSpinner();
                });
            }
        }, Selection.prototype.dataSuccess = function(res) {
            for (var i = 0; i < res.length; i++) isNullOrUndefined(this.selectedRowState[res[i][this.primaryKey]]) && res[i][this.chkField] && (this.selectedRowState[res[i][this.primaryKey]] = res[i][this.chkField]);
            this.persistSelectedData = res;
        }, Selection.prototype.setRowSelection = function(state) {
            if (!this.parent.getDataModule().isRemote()) if (state) for (var _i = 0, _a = this.getData(); _i < _a.length; _i++) {
                var data = _a[_i];
                this.selectedRowState[data[this.primaryKey]] = !0;
            } else this.selectedRowState = {};
        }, Selection.prototype.getData = function() {
            return this.parent.getDataModule().dataManager.dataSource.json;
        }, Selection.prototype.refreshPersistSelection = function() {
            var rows = this.parent.getRows();
            if (rows.length > 0 && (this.parent.isPersistSelection || this.chkField)) {
                for (var indexes = [], j = 0; j < rows.length; j++) {
                    var rowObj = this.getRowObj(rows[j]), pKey = rowObj ? rowObj.data[this.primaryKey] : null;
                    if (null === pKey) return;
                    var checkState = void 0, chkBox = rows[j].querySelector(".e-checkselect");
                    this.selectedRowState[pKey] || "Check" === this.parent.checkAllRows && this.chkAllCollec.indexOf(pKey) < 0 || "Uncheck" === this.parent.checkAllRows && this.chkAllCollec.indexOf(pKey) > 0 || "Intermediate" === this.parent.checkAllRows && !isNullOrUndefined(this.chkField) && rowObj.data[this.chkField] ? (indexes.push(parseInt(rows[j].getAttribute("aria-rowindex"), 10)), 
                    checkState = !0) : (checkState = !1, this.checkedTarget !== chkBox && this.parent.isCheckBoxSelection && removeAddCboxClasses(chkBox.nextElementSibling, checkState)), 
                    this.updatePersistCollection(rows[j], checkState);
                }
                this.isSingleSel() && indexes.length > 0 ? this.selectRow(indexes[0], !0) : this.selectRows(indexes);
            }
            this.parent.isCheckBoxSelection && this.getCurrentBatchRecordChanges().length > 0 && this.setCheckAllState();
        }, Selection.prototype.actionBegin = function(e) {
            if ("save" === e.requestType && this.parent.isPersistSelection) {
                var editChkBox = this.parent.element.querySelector(".e-edit-checkselect");
                if (!isNullOrUndefined(editChkBox)) {
                    var row = closest(editChkBox, ".e-editedrow");
                    if (row) {
                        "Dialog" === this.parent.editSettings.mode && (row = this.parent.element.querySelector(".e-dlgeditrow"));
                        var rowObj = this.getRowObj(row);
                        if (!rowObj) return;
                        this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = editChkBox.checked;
                    } else this.isCheckedOnAdd = editChkBox.checked;
                }
            }
        }, Selection.prototype.actionComplete = function(e) {
            var _this = this;
            if ("save" === e.requestType && this.parent.isPersistSelection) {
                if ("add" === e.action && this.isCheckedOnAdd) {
                    var rowObj = this.parent.getRowObjectFromUID(this.parent.getRows()[e.selectedRow].getAttribute("data-uid"));
                    this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = this.isCheckedOnAdd;
                }
                this.refreshPersistSelection();
            }
            "delete" === e.requestType && this.parent.isPersistSelection && (e.data.slice().forEach(function(data) {
                isNullOrUndefined(data[_this.primaryKey]) || _this.updatePersistDelete(data[_this.primaryKey]);
            }), this.setCheckAllState(), this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount);
        }, Selection.prototype.onDataBound = function() {
            !this.parent.enableVirtualization && this.parent.isPersistSelection && this.refreshPersistSelection();
        }, Selection.prototype.checkSelectAllAction = function(checkState) {
            var cRenderer = this.getRenderer(), editForm = this.parent.element.querySelector(".e-gridform");
            if (this.checkedTarget = this.getCheckAllBox(), checkState && this.getCurrentBatchRecordChanges().length ? (this.selectRowsByRange(cRenderer.getVirtualRowIndex(0), cRenderer.getVirtualRowIndex(this.getCurrentBatchRecordChanges().length)), 
            this.parent.checkAllRows = "Check") : (this.clearSelection(), this.parent.checkAllRows = "Uncheck"), 
            this.chkAllCollec = [], this.parent.isPersistSelection) {
                for (var rows = this.parent.getRows(), i = 0; i < rows.length; i++) this.updatePersistCollection(rows[i], checkState);
                "Uncheck" === this.parent.checkAllRows ? (this.setRowSelection(!1), this.persistSelectedData = this.parent.getDataModule().isRemote() ? this.persistSelectedData : []) : "Check" === this.parent.checkAllRows && (this.setRowSelection(!0), 
                this.persistSelectedData = this.parent.getDataModule().isRemote() ? this.persistSelectedData : this.getData().slice());
            }
            if (!isNullOrUndefined(editForm)) {
                removeAddCboxClasses(editForm.querySelector(".e-edit-checkselect").nextElementSibling, checkState);
            }
        }, Selection.prototype.checkSelectAll = function(checkBox) {
            var _this = this, stateStr = this.getCheckAllStatus(checkBox), state = "Check" === stateStr;
            "Intermediate" === stateStr && (state = this.getCurrentBatchRecordChanges().some(function(data) {
                return data[_this.primaryKey] in _this.selectedRowState;
            })), this.checkSelectAllAction(!state), this.target = null, this.getCurrentBatchRecordChanges().length > 0 && this.setCheckAllState(), 
            this.triggerChkChangeEvent(checkBox, !state);
        }, Selection.prototype.getCheckAllStatus = function(ele) {
            var classes = ele ? ele.nextElementSibling.classList : this.getCheckAllBox().nextElementSibling.classList;
            return classes.contains("e-check") ? "Check" : classes.contains("e-uncheck") ? "Uncheck" : classes.contains("e-stop") ? "Intermediate" : "None";
        }, Selection.prototype.checkSelect = function(checkBox) {
            var target = closest(this.checkedTarget, ".e-rowcell");
            this.isMultiCtrlRequest = !0;
            var rIndex = parseInt(target.parentElement.getAttribute("aria-rowindex"), 10);
            this.parent.isPersistSelection && this.parent.element.querySelectorAll(".e-addedrow").length > 0 && ++rIndex, 
            this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute("aria-colindex"), 10)), 
            this.moveIntoUncheckCollection(closest(target, ".e-row")), this.setCheckAllState(), 
            this.isMultiCtrlRequest = !1, this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains("e-check"));
        }, Selection.prototype.moveIntoUncheckCollection = function(row) {
            if ("Check" === this.parent.checkAllRows || "Uncheck" === this.parent.checkAllRows) {
                var rowObj = this.getRowObj(row), pKey = rowObj && rowObj.data ? rowObj.data[this.primaryKey] : null;
                if (!pKey) return;
                this.chkAllCollec.indexOf(pKey) < 0 ? this.chkAllCollec.push(pKey) : this.chkAllCollec.splice(this.chkAllCollec.indexOf(pKey), 1);
            }
        }, Selection.prototype.triggerChkChangeEvent = function(checkBox, checkState) {
            this.parent.trigger("checkBoxChange", {
                checked: checkState,
                selectedRowIndexes: this.parent.getSelectedRowIndexes(),
                target: checkBox
            }), this.parent.isEdit || (this.checkedTarget = null);
        }, Selection.prototype.updateSelectedRowIndex = function(index) {
            if (this.parent.isCheckBoxSelection && this.parent.enableVirtualization && !this.parent.getDataModule().isRemote()) if ("Check" === this.parent.checkAllRows) {
                this.selectedRowIndexes = [];
                for (var data = 0; data < this.getData().length; data++) this.selectedRowIndexes.push(data);
            } else if ("Uncheck" === this.parent.checkAllRows) this.selectedRowIndexes = []; else if (index && "false" === this.parent.getRowByIndex(index).getAttribute("aria-selected")) {
                var selectedVal = this.selectedRowIndexes.indexOf(index);
                this.selectedRowIndexes.splice(selectedVal, 1);
            }
        }, Selection.prototype.setCheckAllState = function(index, isInteraction) {
            if (this.parent.isCheckBoxSelection || "ResetOnRowClick" === this.parent.selectionSettings.checkboxMode) {
                var checkedLen = Object.keys(this.selectedRowState).length;
                if (this.parent.isPersistSelection || (checkedLen = this.selectedRecords.length, 
                this.totalRecordsCount = this.getCurrentBatchRecordChanges().length), this.getCheckAllBox()) {
                    var spanEle = this.getCheckAllBox().nextElementSibling;
                    removeClass([ spanEle ], [ "e-check", "e-stop", "e-uncheck" ]), checkedLen === this.totalRecordsCount && this.totalRecordsCount || this.parent.enableVirtualization && !this.parent.allowPaging && !this.parent.getDataModule().isRemote() && checkedLen === this.getData().length ? (addClass([ spanEle ], [ "e-check" ]), 
                    isInteraction && this.getRenderer().setSelection(null, !0, !0), this.parent.checkAllRows = "Check") : 0 === checkedLen || 0 === this.getCurrentBatchRecordChanges().length ? (addClass([ spanEle ], [ "e-uncheck" ]), 
                    isInteraction && this.getRenderer().setSelection(null, !1, !0), this.parent.checkAllRows = "Uncheck", 
                    0 === checkedLen && 0 === this.getCurrentBatchRecordChanges().length ? addClass([ spanEle.parentElement ], [ "e-checkbox-disabled" ]) : removeClass([ spanEle.parentElement ], [ "e-checkbox-disabled" ])) : (addClass([ spanEle ], [ "e-stop" ]), 
                    this.parent.checkAllRows = "Intermediate"), !this.parent.enableVirtualization || this.parent.allowPaging || this.parent.getDataModule().isRemote() || this.updateSelectedRowIndex(index);
                }
            }
        }, Selection.prototype.clickHandler = function(e) {
            var target = e.target;
            this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch, this.isMultiShiftRequest = e.shiftKey, 
            this.popUpClickHandler(e);
            var chkSelect = !1;
            this.preventFocus = !0;
            var checkBox, checkWrap = parentsUntil(target, "e-checkbox-wrapper");
            if (checkWrap && checkWrap.querySelectorAll(".e-checkselect,.e-checkselectall").length > 0 && (checkBox = checkWrap.querySelector('input[type="checkbox"]'), 
            chkSelect = !0), (target = parentsUntil(target, "e-rowcell")) && target.parentElement.classList.contains("e-row") && !this.parent.selectionSettings.checkboxOnly || chkSelect) {
                if (this.parent.isCheckBoxSelection && (this.isMultiCtrlRequest = !0), this.target = target, 
                isNullOrUndefined(checkBox)) {
                    var rIndex = parseInt(target.parentElement.getAttribute("aria-rowindex"), 10);
                    this.parent.isPersistSelection && this.parent.element.querySelectorAll(".e-addedrow").length > 0 && ++rIndex, 
                    this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute("aria-colindex"), 10)), 
                    this.parent.isCheckBoxSelection && (this.moveIntoUncheckCollection(closest(target, ".e-row")), 
                    this.setCheckAllState());
                } else this.checkedTarget = checkBox, checkBox.classList.contains("e-checkselectall") ? this.checkSelectAll(checkBox) : (this.checkSelect(checkBox), 
                this.target = closest(target, ".e-rowcell"));
                this.parent.isCheckBoxSelection || !Browser.isDevice || this.isSingleSel() || this.showPopup(e);
            }
            this.isMultiCtrlRequest = !1, this.isMultiShiftRequest = !1, this.preventFocus = !1;
        }, Selection.prototype.popUpClickHandler = function(e) {
            var target = e.target;
            closest(target, ".e-headercell") || e.target.classList.contains("e-rowcell") || closest(target, ".e-gridpopup") ? target.classList.contains("e-rowselect") && (target.classList.contains("e-spanclicked") ? (target.classList.remove("e-spanclicked"), 
            this.enableSelectMultiTouch = !1, this.parent.element.querySelector(".e-gridpopup").style.display = "none") : (target.classList.add("e-spanclicked"), 
            this.enableSelectMultiTouch = !0)) : this.parent.element.querySelector(".e-gridpopup").style.display = "none";
        }, Selection.prototype.showPopup = function(e) {
            setCssInGridPopUp(this.parent.element.querySelector(".e-gridpopup"), e, "e-rowselect e-icons e-icon-rowselect" + (!this.isSingleSel() && (this.selectedRecords.length > (this.parent.getFrozenColumns() ? 2 : 1) || this.selectedRowCellIndexes.length > 1) ? " e-spanclicked" : ""));
        }, Selection.prototype.rowCellSelectionHandler = function(rowIndex, cellIndex) {
            !this.isMultiCtrlRequest && !this.isMultiShiftRequest || this.isSingleSel() ? (this.isDragged || this.selectRow(rowIndex, !0), 
            this.selectCell({
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }, !0)) : this.isMultiShiftRequest ? (this.parent.isCheckBoxSelection || !this.parent.isCheckBoxSelection && !this.target.classList.contains("e-gridchkbox") ? this.selectRowsByRange(isUndefined(this.prevRowIndex) ? rowIndex : this.prevRowIndex, rowIndex) : this.addRowsToSelection([ rowIndex ]), 
            this.selectCellsByRange(isUndefined(this.prevCIdxs) ? {
                rowIndex: rowIndex,
                cellIndex: cellIndex
            } : this.prevCIdxs, {
                rowIndex: rowIndex,
                cellIndex: cellIndex
            })) : (this.addRowsToSelection([ rowIndex ]), this.addCellsToSelection([ {
                rowIndex: rowIndex,
                cellIndex: cellIndex
            } ])), this.isDragged = !1;
        }, Selection.prototype.onCellFocused = function(e) {
            if (this.parent.frozenRows && e.container.isHeader && e.byKey) if ("upArrow" === e.keyArgs.action) this.parent.allowFiltering ? e.isJump = "INPUT" === e.element.tagName : e.isJump = "TH" === e.element.tagName; else if ("downArrow" === e.keyArgs.action) {
                var rIdx = Number(e.element.parentElement.getAttribute("aria-rowindex"));
                e.isJump = 0 === rIdx;
            } else "ctrlHome" === e.keyArgs.action && (e.isJump = !0);
            var clear = this.parent.getFrozenColumns() ? (e.container.isHeader && "TD" !== e.element.tagName && e.isJump || (e.container.isContent || "TD" === e.element.tagName) && !(e.container.isSelectable || "TD" === e.element.tagName)) && !(e.byKey && "space" === e.keyArgs.action) : (e.container.isHeader && e.isJump || e.container.isContent && !e.container.isSelectable) && !(e.byKey && "space" === e.keyArgs.action), headerAction = e.container.isHeader && "TD" !== e.element.tagName && !closest(e.element, ".e-rowcell") && !(e.byKey && "space" === e.keyArgs.action);
            if (e.byKey && !clear) {
                var _a = e.container.isContent ? e.container.indexes : e.indexes, rowIndex = _a[0], cellIndex = _a[1], prev = this.focus.getPrevIndexes();
                if (this.parent.frozenRows) {
                    if (e.container.isHeader && ("TD" === e.element.tagName || closest(e.element, ".e-rowcell"))) {
                        var thLen = this.parent.getHeaderTable().querySelector("thead").childElementCount;
                        rowIndex -= thLen, prev.rowIndex = prev.rowIndex ? prev.rowIndex - thLen : null;
                    } else rowIndex += this.parent.frozenRows, prev.rowIndex = 0 !== prev.rowIndex && isNullOrUndefined(prev.rowIndex) ? null : prev.rowIndex + this.parent.frozenRows;
                    if (this.parent.getFrozenColumns()) {
                        var cIdx = Number(e.element.getAttribute("aria-colindex"));
                        prev.cellIndex = prev.cellIndex ? prev.cellIndex === cellIndex ? cIdx : cIdx - 1 : null, 
                        cellIndex = cIdx;
                    }
                }
                if (!(headerAction || -1 === [ "ctrlPlusA", "escape" ].indexOf(e.keyArgs.action) && "space" !== e.keyArgs.action && rowIndex === prev.rowIndex && cellIndex === prev.cellIndex)) {
                    switch (this.preventFocus = !0, e.keyArgs.action) {
                      case "downArrow":
                      case "upArrow":
                      case "enter":
                      case "shiftEnter":
                        this.applyDownUpKey(rowIndex, cellIndex);
                        break;

                      case "rightArrow":
                      case "leftArrow":
                        this.applyRightLeftKey(rowIndex, cellIndex);
                        break;

                      case "shiftDown":
                      case "shiftUp":
                        this.shiftDownKey(rowIndex, cellIndex);
                        break;

                      case "shiftLeft":
                      case "shiftRight":
                        this.applyShiftLeftRightKey(rowIndex, cellIndex);
                        break;

                      case "home":
                      case "end":
                        cellIndex = "end" === e.keyArgs.action ? this.getLastColIndex(rowIndex) : 0, this.applyHomeEndKey(rowIndex, cellIndex);
                        break;

                      case "ctrlHome":
                      case "ctrlEnd":
                        this.applyCtrlHomeEndKey(rowIndex, cellIndex);
                        break;

                      case "escape":
                        this.clearSelection();
                        break;

                      case "ctrlPlusA":
                        this.ctrlPlusA();
                        break;

                      case "space":
                        this.applySpaceSelection(e.element);
                    }
                    this.preventFocus = !1;
                }
            } else clear && !this.parent.isCheckBoxSelection && this.clearSelection();
        }, Selection.prototype.ctrlPlusA = function() {
            this.isRowType() && !this.isSingleSel() && this.selectRowsByRange(0, this.parent.getRows().length - 1), 
            this.isCellType() && !this.isSingleSel() && this.selectCellsByRange({
                rowIndex: 0,
                cellIndex: 0
            }, {
                rowIndex: this.parent.getRows().length - 1,
                cellIndex: this.parent.getColumns().length - 1
            });
        }, Selection.prototype.applySpaceSelection = function(target) {
            target.classList.contains("e-checkselectall") ? (this.checkedTarget = target, this.checkSelectAll(this.checkedTarget)) : target.classList.contains("e-checkselect") && (this.checkedTarget = target, 
            this.checkSelect(this.checkedTarget));
        }, Selection.prototype.applyDownUpKey = function(rowIndex, cellIndex) {
            var gObj = this.parent;
            this.parent.isCheckBoxSelection && "Check" === this.parent.checkAllRows && !this.selectionSettings.persistSelection && (this.checkSelectAllAction(!1), 
            this.checkedTarget = null), this.isRowType() && (this.parent.frozenRows, this.selectRow(rowIndex, !0), 
            this.applyUpDown(gObj.selectedRowIndex)), this.isCellType() && this.selectCell({
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }, !0);
        }, Selection.prototype.applyUpDown = function(rowIndex) {
            if (!(rowIndex < 0)) {
                this.target || (this.target = this.parent.getRows()[0].children[this.parent.groupSettings.columns.length || 0]);
                var cIndex = parseInt(this.target.getAttribute("aria-colindex"), 10), frzCols = this.parent.getFrozenColumns();
                this.target = frzCols && cIndex >= frzCols ? this.contentRenderer.getMovableRowByIndex(rowIndex).querySelectorAll(".e-rowcell")[cIndex - frzCols] : this.contentRenderer.getRowByIndex(rowIndex).querySelectorAll(".e-rowcell")[cIndex], 
                this.addAttribute(this.target);
            }
        }, Selection.prototype.applyRightLeftKey = function(rowIndex, cellIndex) {
            this.parent;
            this.isCellType() && (this.selectCell({
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }, !0), this.addAttribute(this.target));
        }, Selection.prototype.applyHomeEndKey = function(rowIndex, cellIndex) {
            this.isCellType() ? this.selectCell({
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }, !0) : this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
        }, Selection.prototype.shiftDownKey = function(rowIndex, cellIndex) {
            this.parent;
            this.isMultiShiftRequest = !0, this.isRowType() && !this.isSingleSel() && (isUndefined(this.prevRowIndex) ? this.selectRow(0, !0) : (this.selectRowsByRange(this.prevRowIndex, rowIndex), 
            this.applyUpDown(rowIndex))), this.isCellType() && !this.isSingleSel() && this.selectCellsByRange(this.prevCIdxs || {
                rowIndex: 0,
                cellIndex: 0
            }, {
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }), this.isMultiShiftRequest = !1;
        }, Selection.prototype.applyShiftLeftRightKey = function(rowIndex, cellIndex) {
            this.parent;
            this.isMultiShiftRequest = !0, this.selectCellsByRange(this.prevCIdxs, {
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }), this.isMultiShiftRequest = !1;
        }, Selection.prototype.applyCtrlHomeEndKey = function(rowIndex, cellIndex) {
            this.isRowType() && (this.selectRow(rowIndex, !0), this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex))), 
            this.isCellType() && this.selectCell({
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }, !0);
        }, Selection.prototype.addRemoveClassesForRow = function(row, isAdd, clearAll) {
            for (var args = [], _i = 3; _i < arguments.length; _i++) args[_i - 3] = arguments[_i];
            if (row) {
                var cells = [].slice.call(row.querySelectorAll(".e-rowcell")), cell = row.querySelector(".e-detailrowcollapse") || row.querySelector(".e-detailrowexpand");
                cell && cells.push(cell), addRemoveActiveClasses.apply(void 0, [ cells, isAdd ].concat(args));
            }
            this.getRenderer().setSelection(row ? row.getAttribute("data-uid") : null, isAdd, clearAll);
        }, Selection.prototype.isRowType = function() {
            return "Row" === this.selectionSettings.mode || "Both" === this.selectionSettings.mode;
        }, Selection.prototype.isCellType = function() {
            return "Cell" === this.selectionSettings.mode || "Both" === this.selectionSettings.mode;
        }, Selection.prototype.isSingleSel = function() {
            return "Single" === this.selectionSettings.type;
        }, Selection.prototype.getRenderer = function() {
            return isNullOrUndefined(this.contentRenderer) && (this.contentRenderer = this.factory.getRenderer(RenderType.Content)), 
            this.contentRenderer;
        }, Selection.prototype.getSelectedRecords = function() {
            return this.selectionSettings.persistSelection ? this.persistSelectedData : this.parent.getRowsObject().filter(function(row) {
                return row.isSelected;
            }).map(function(m) {
                return m.data;
            });
        }, Selection.prototype.addEventListener_checkbox = function() {
            this.parent.on(dataReady, this.dataReady, this), this.onDataBoundFunction = this.onDataBound.bind(this), 
            this.parent.addEventListener(dataBound, this.onDataBoundFunction), this.parent.on(contentReady, this.checkBoxSelectionChanged, this), 
            this.actionCompleteFunc = this.actionCompleteHandler.bind(this), this.parent.addEventListener(actionComplete, this.actionCompleteFunc), 
            this.parent.on(click, this.clickHandler, this);
        }, Selection.prototype.removeEventListener_checkbox = function() {
            this.parent.off(dataReady, this.dataReady), this.parent.removeEventListener(dataBound, this.onDataBoundFunction), 
            this.parent.removeEventListener(actionComplete, this.actionCompleteFunc), this.parent.off(click, this.clickHandler);
        }, Selection.prototype.dataReady = function(e) {
            "virtualscroll" === e.requestType || this.parent.isPersistSelection || (this.disableUI = !0, 
            this.clearSelection(), this.disableUI = !1);
        }, Selection.prototype.actionCompleteHandler = function(e) {
            "save" === e.requestType && this.parent.isPersistSelection && this.refreshPersistSelection();
        }, Selection;
    }(), Search = function() {
        function Search(parent) {
            this.parent = parent, this.addEventListener();
        }
        return Search.prototype.search = function(searchString) {
            var gObj = this.parent;
            searchString = isNullOrUndefined(searchString) ? "" : searchString, isActionPrevent(gObj) ? gObj.notify(preventBatch, {
                instance: this,
                handler: this.search,
                arg1: searchString
            }) : searchString !== gObj.searchSettings.key ? (gObj.searchSettings.key = searchString.toString(), 
            gObj.dataBind()) : this.refreshSearch && gObj.refresh();
        }, Search.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(inBoundModelChanged, this.onPropertyChanged, this), 
            this.parent.on("searching-complete", this.onSearchComplete, this), this.parent.on(destroy$1, this.destroy, this), 
            this.actionCompleteFunc = this.onActionComplete.bind(this), this.parent.addEventListener(actionComplete, this.actionCompleteFunc), 
            this.parent.on("cancel-Begin", this.cancelBeginEvent, this));
        }, Search.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(inBoundModelChanged, this.onPropertyChanged), 
            this.parent.off("searching-complete", this.onSearchComplete), this.parent.off(destroy$1, this.destroy), 
            this.parent.removeEventListener(actionComplete, this.actionCompleteFunc), this.parent.off("cancel-Begin", this.cancelBeginEvent));
        }, Search.prototype.destroy = function() {
            this.removeEventListener();
        }, Search.prototype.onPropertyChanged = function(e) {
            e.module === this.getModuleName() && (isNullOrUndefined(e.properties.key) ? this.parent.notify(modelChanged, {
                requestType: "searching",
                type: actionBegin
            }) : this.parent.notify(modelChanged, {
                requestType: "searching",
                type: actionBegin,
                searchString: this.parent.searchSettings.key
            }));
        }, Search.prototype.onSearchComplete = function(e) {
            this.parent.trigger(actionComplete, extend(e, {
                searchString: this.parent.searchSettings.key,
                requestType: "searching",
                type: actionComplete
            }));
        }, Search.prototype.onActionComplete = function(e) {
            this.refreshSearch = "searching" !== e.requestType;
        }, Search.prototype.cancelBeginEvent = function(e) {
            "searching" === e.requestType && this.parent.setProperties({
                searchSettings: {
                    key: ""
                }
            }, !0);
        }, Search.prototype.getModuleName = function() {
            return "search";
        }, Search;
    }(), ShowHide = function() {
        function ShowHide(parent) {
            this.parent = parent;
        }
        return ShowHide.prototype.show = function(columnName, showBy) {
            var keys = this.getToggleFields(columnName), columns = this.getColumns(keys, showBy);
            this.parent.notify("tooltip-destroy", {
                module: "edit"
            }), columns.forEach(function(value) {
                value.visible = !0;
            }), this.setVisible(columns);
        }, ShowHide.prototype.hide = function(columnName, hideBy) {
            var keys = this.getToggleFields(columnName), columns = this.getColumns(keys, hideBy);
            this.parent.notify("tooltip-destroy", {
                module: "edit"
            }), columns.forEach(function(value) {
                value.visible = !1;
            }), this.setVisible(columns);
        }, ShowHide.prototype.getToggleFields = function(key) {
            return "string" == typeof key ? [ key ] : key;
        }, ShowHide.prototype.getColumns = function(keys, getKeyBy) {
            var _this = this;
            return iterateArrayOrObject(keys, function(key, index) {
                return iterateArrayOrObject(_this.parent.getColumns(), function(item, index) {
                    if (item[getKeyBy] === key) return item;
                })[0];
            });
        }, ShowHide.prototype.setVisible = function(columns) {
            isActionPrevent(this.parent) ? this.parent.notify(preventBatch, {
                instance: this,
                handler: this.setVisible,
                arg1: columns
            }) : (columns = isNullOrUndefined(columns) ? this.parent.getColumns() : columns, 
            this.parent.allowSelection && this.parent.getSelectedRecords().length && this.parent.clearSelection(), 
            this.parent.notify(columnVisibilityChanged, columns), "All" !== this.parent.columnQueryMode && this.parent.refresh());
        }, ShowHide;
    }(), Scroll = function() {
        function Scroll(parent) {
            this.lastScrollTop = 0, this.previousValues = {
                top: 0,
                left: 0
            }, this.oneTimeReady = !0, this.parent = parent, this.widthService = new ColumnWidthService(parent), 
            this.addEventListener();
        }
        return Scroll.prototype.getModuleName = function() {
            return "scroll";
        }, Scroll.prototype.setWidth = function() {
            this.parent.element.style.width = formatUnit(this.parent.width), this.parent.toolbarModule && this.parent.toolbarModule.toolbar && this.parent.toolbarModule.toolbar.element && this.parent.toolbarModule.toolbar.refreshOverflow();
        }, Scroll.prototype.setHeight = function() {
            var mHdrHeight = 0, content = this.parent.getContent().firstChild;
            this.parent.frozenRows && "auto" !== this.parent.height ? (mHdrHeight = this.parent.getHeaderContent().querySelector("tbody").offsetHeight, 
            content.style.height = formatUnit(this.parent.height - mHdrHeight)) : content.style.height = formatUnit(this.parent.height), 
            this.ensureOverflow(content);
        }, Scroll.prototype.setPadding = function() {
            var content = this.parent.getHeaderContent(), scrollWidth = Scroll.getScrollBarWidth() - this.getThreshold(), cssProps = this.getCssProperties();
            content.firstChild.style[cssProps.border] = scrollWidth > 0 ? "1px" : "0px", content.style[cssProps.padding] = scrollWidth > 0 ? scrollWidth + "px" : "0px";
        }, Scroll.prototype.removePadding = function(rtl) {
            var cssProps = this.getCssProperties(rtl);
            this.parent.getHeaderContent().firstChild.style[cssProps.border] = "", this.parent.getHeaderContent().firstChild.parentElement.style[cssProps.padding] = "";
        }, Scroll.prototype.refresh = function() {
            if ("100%" === this.parent.height) {
                var content = this.parent.getContent();
                this.parent.element.style.height = "100%";
                var height = this.widthService.getSiblingsHeight(content);
                content.style.height = "calc(100% - " + height + "px)";
            }
        }, Scroll.prototype.getThreshold = function() {
            return "mozilla" === Browser.info.name ? .5 : 1;
        }, Scroll.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(onEmpty, this.wireEvents, this), this.parent.on(contentReady, this.wireEvents, this), 
            this.parent.on(uiUpdate, this.onPropertyChanged, this), this.parent.on(headerRefreshed, this.setScrollLeft, this));
        }, Scroll.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(onEmpty, this.wireEvents), this.parent.off(contentReady, this.wireEvents), 
            this.parent.off(uiUpdate, this.onPropertyChanged), this.parent.off(headerRefreshed, this.setScrollLeft));
        }, Scroll.prototype.setScrollLeft = function() {
            this.parent.frozenColumns && (this.parent.headerModule.getMovableHeader().scrollLeft = this.previousValues.left);
        }, Scroll.prototype.onContentScroll = function(scrollTarget) {
            var _this = this, element = scrollTarget, isHeader = element.classList.contains("e-headercontent");
            return function(e) {
                if (null !== _this.content.querySelector("tbody") && !_this.parent.isPreventScrollEvent) {
                    var target = e.target, left = target.scrollLeft, isFooter = (target.scrollWidth, 
                    target.classList.contains("e-summarycontent"));
                    _this.previousValues.left !== left ? (element.scrollLeft = left, isFooter && (_this.header.scrollLeft = left), 
                    _this.previousValues.left = left, _this.parent.notify("scroll", {
                        left: left
                    })) : _this.previousValues.top = isHeader ? target.scrollTop : _this.previousValues.top;
                }
            };
        }, Scroll.prototype.onFreezeContentScroll = function(scrollTarget) {
            var _this = this, element = scrollTarget;
            return function(e) {
                if (null !== _this.content.querySelector("tbody")) {
                    var top = e.target.scrollTop;
                    _this.previousValues.top !== top && (element.scrollTop = top, _this.previousValues.top = top, 
                    _this.parent.isDestroyed);
                }
            };
        }, Scroll.prototype.onWheelScroll = function(scrollTarget) {
            var _this = this, element = scrollTarget;
            return function(e) {
                if (null !== _this.content.querySelector("tbody")) {
                    var top = element.scrollTop + (1 === e.deltaMode ? 30 * e.deltaY : e.deltaY);
                    _this.previousValues.top !== top && (e.preventDefault(), _this.parent.getContent().querySelector(".e-frozencontent").scrollTop = top, 
                    element.scrollTop = top, _this.previousValues.top = top);
                }
            };
        }, Scroll.prototype.onTouchScroll = function(scrollTarget) {
            var _this = this, element = scrollTarget;
            return function(e) {
                if ("mouse" !== e.pointerType) {
                    var cont, mHdr, pageXY = _this.getPointXY(e), top = element.scrollTop + (_this.pageXY.y - pageXY.y), left = element.scrollLeft + (_this.pageXY.x - pageXY.x);
                    if (_this.parent.getHeaderContent().contains(e.target)) {
                        if (mHdr = _this.parent.getFrozenColumns() ? _this.parent.getHeaderContent().querySelector(".e-movableheader") : _this.parent.getHeaderContent().firstChild, 
                        _this.previousValues.left === left || left < 0 || mHdr.scrollWidth - mHdr.clientWidth < left) return;
                        e.preventDefault(), mHdr.scrollLeft = left, element.scrollLeft = left, _this.pageXY.x = pageXY.x, 
                        _this.previousValues.left = left;
                    } else {
                        if (cont = _this.parent.getContent().querySelector(".e-frozencontent"), _this.previousValues.top === top || top < 0 || cont.scrollHeight - cont.clientHeight < top) return;
                        e.preventDefault(), cont.scrollTop = top, element.scrollTop = top, _this.pageXY.y = pageXY.y, 
                        _this.previousValues.top = top;
                    }
                }
            };
        }, Scroll.prototype.setPageXY = function() {
            var _this = this;
            return function(e) {
                "mouse" !== e.pointerType && (_this.pageXY = _this.getPointXY(e));
            };
        }, Scroll.prototype.getPointXY = function(e) {
            var pageXY = {
                x: 0,
                y: 0
            };
            return e.touches && e.touches.length ? (pageXY.x = e.touches[0].pageX, pageXY.y = e.touches[0].pageY) : (pageXY.x = e.pageX, 
            pageXY.y = e.pageY), pageXY;
        }, Scroll.prototype.wireEvents = function() {
            var _this = this;
            if (this.oneTimeReady) {
                var frzCols = this.parent.getFrozenColumns();
                this.content = this.parent.getContent().firstChild, this.header = this.parent.getHeaderContent().firstChild;
                var mCont = this.content.querySelector(".e-movablecontent"), fCont = this.content.querySelector(".e-frozencontent"), mHdr = this.header.querySelector(".e-movableheader");
                this.parent.frozenRows && (EventHandler.add(frzCols ? mHdr : this.header, "touchstart pointerdown", this.setPageXY(), this), 
                EventHandler.add(frzCols ? mHdr : this.header, "touchmove pointermove", this.onTouchScroll(frzCols ? mCont : this.content), this)), 
                frzCols ? (EventHandler.add(mCont, "scroll", this.onContentScroll(mHdr), this), 
                EventHandler.add(mCont, "scroll", this.onFreezeContentScroll(fCont), this), EventHandler.add(fCont, "scroll", this.onFreezeContentScroll(mCont), this), 
                EventHandler.add(mHdr, "scroll", this.onContentScroll(mCont), this), EventHandler.add(fCont, "wheel", this.onWheelScroll(mCont), this), 
                EventHandler.add(fCont, "touchstart pointerdown", this.setPageXY(), this), EventHandler.add(fCont, "touchmove pointermove", this.onTouchScroll(mCont), this)) : (EventHandler.add(this.content, "scroll", this.onContentScroll(this.header), this), 
                EventHandler.add(this.header, "scroll", this.onContentScroll(this.content), this)), 
                this.parent.aggregates.length && EventHandler.add(this.parent.getFooterContent().firstChild, "scroll", this.onContentScroll(this.content), this), 
                this.refresh(), this.oneTimeReady = !1;
            }
            var sLeft, sHeight, clientHeight, table = this.parent.getContentTable();
            getUpdateUsingRaf(function() {
                sLeft = _this.header.scrollLeft, sHeight = table.scrollHeight, clientHeight = _this.parent.getContent().clientHeight;
            }, function() {
                _this.parent.enableVirtualization || (sHeight < clientHeight && (addClass(table.querySelectorAll("tr:last-child td"), "e-lastrowcell"), 
                _this.parent.getFrozenColumns() && addClass(_this.parent.getContent().querySelector(".e-movablecontent").querySelectorAll("tr:last-child td"), "e-lastrowcell")), 
                (_this.parent.frozenRows > 0 || _this.parent.frozenColumns > 0) && _this.header.querySelector(".e-movableheader") ? _this.header.querySelector(".e-movableheader").scrollLeft = _this.previousValues.left : _this.header.scrollLeft = _this.previousValues.left, 
                _this.content.scrollLeft = _this.previousValues.left, _this.content.scrollTop = _this.previousValues.top), 
                _this.parent.enableColumnVirtualization || (_this.content.scrollLeft = sLeft), _this.parent.frozenColumns && _this.header.querySelector(".e-movableheader") && (_this.header.querySelector(".e-movableheader").scrollLeft = _this.content.querySelector(".e-movablecontent").scrollLeft);
            }), this.parent.isPreventScrollEvent = !1;
        }, Scroll.prototype.getCssProperties = function(rtl) {
            var css = {}, enableRtl = isNullOrUndefined(rtl) ? this.parent.enableRtl : rtl;
            return css.border = enableRtl ? "borderLeftWidth" : "borderRightWidth", css.padding = enableRtl ? "paddingLeft" : "paddingRight", 
            css;
        }, Scroll.prototype.ensureOverflow = function(content) {
            this.parent.getFrozenColumns() ? content.querySelector(".e-movablecontent").style.overflowY = "auto" === this.parent.height ? "auto" : "scroll" : content.style.overflowY = "auto" === this.parent.height ? "auto" : "scroll";
        }, Scroll.prototype.onPropertyChanged = function(e) {
            e.module === this.getModuleName() && (this.setPadding(), this.oneTimeReady = !0, 
            "auto" === this.parent.height && this.removePadding(), this.wireEvents(), this.setHeight(), 
            this.setWidth());
        }, Scroll.prototype.destroy = function() {
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.removeEventListener(), 
            this.removePadding(), removeClass([ this.parent.getHeaderContent().firstChild ], "e-headercontent"), 
            removeClass([ this.parent.getContent().firstChild ], "e-content"), this.parent.getContent().firstChild.style.height = "", 
            this.parent.element.style.width = "", EventHandler.remove(this.parent.getContent().firstChild, "scroll", this.onContentScroll));
        }, Scroll.getScrollBarWidth = function() {
            return getScrollBarWidth();
        }, Scroll;
    }(), Print = function() {
        function Print(parent, scrollModule) {
            this.isAsyncPrint = !1, this.printing = "isPrinting", this.parent = parent, this.parent.isDestroyed || (this.parent.on(contentReady, this.contentReady.bind(this)), 
            this.parent.addEventListener(actionBegin, this.actionBegin.bind(this)), this.parent.on(onEmpty, this.onEmpty.bind(this)), 
            this.scrollModule = scrollModule);
        }
        return Print.prototype.print = function() {
            this.renderPrintGrid(), this.printWind = window.open("", "print", "height=" + window.outerHeight + ",width=" + window.outerWidth + ",tabbar=no"), 
            this.printWind.moveTo(0, 0), this.printWind.resizeTo(screen.availWidth, screen.availHeight);
        }, Print.prototype.onEmpty = function() {
            this.isPrintGrid() && this.contentReady();
        }, Print.prototype.actionBegin = function() {
            this.isPrintGrid() && (this.isAsyncPrint = !0);
        }, Print.prototype.renderPrintGrid = function() {
            var gObj = this.parent, printGridModel = {}, element = createElement("div", {
                id: this.parent.element.id + "_print",
                className: gObj.element.className + " e-print-grid"
            });
            document.body.appendChild(element);
            for (var _i = 0, _a = Print.printGridProp; _i < _a.length; _i++) {
                var key = _a[_i];
                printGridModel[key] = "columns" === key ? getActualPropFromColl(gObj[key]) : "allowPaging" === key ? "CurrentPage" === this.parent.printMode : getActualProperties(gObj[key]);
            }
            var printGrid = new Grid(printGridModel);
            printGrid.appendTo(element), printGrid.registeredTemplate = this.parent.registeredTemplate, 
            printGrid[this.printing] = !0, printGrid.trigger = gObj.trigger;
        }, Print.prototype.contentReady = function() {
            if (this.isPrintGrid()) {
                var gObj = this.parent;
                if (this.isAsyncPrint) return void this.printGrid();
                var args = {
                    requestType: "print",
                    element: gObj.element,
                    selectedRows: gObj.getContentTable().querySelectorAll('tr[aria-selected="true"]'),
                    cancel: !1
                };
                if (this.isAsyncPrint || gObj.trigger("beforePrint", args), args.cancel) return void detach(gObj.element);
                this.isAsyncPrint || this.printGrid();
            }
        }, Print.prototype.printGrid = function() {
            var gObj = this.parent;
            if (gObj.allowPaging && "CurrentPage" === gObj.printMode && (gObj.element.querySelector(".e-gridpager").style.display = "none"), 
            "auto" !== gObj.height) {
                var cssProps = this.scrollModule.getCssProperties(), contentDiv = gObj.element.querySelector(".e-content"), headerDiv = gObj.element.querySelector(".e-gridheader");
                contentDiv.style.height = "auto", contentDiv.style.overflowY = "auto", headerDiv.style[cssProps.padding] = "", 
                headerDiv.firstElementChild.style[cssProps.border] = "";
            }
            gObj.allowGrouping && (gObj.groupSettings.columns.length ? (this.removeColGroup(gObj.groupSettings.columns.length, gObj.element), 
            removeElement(gObj.element, ".e-grouptopleftcell"), removeElement(gObj.element, ".e-recordpluscollapse"), 
            removeElement(gObj.element, ".e-indentcell"), removeElement(gObj.element, ".e-recordplusexpand")) : gObj.element.querySelector(".e-groupdroparea").style.display = "none"), 
            gObj.element.querySelector(".e-content").style.overflowX = "hidden", gObj.allowFiltering && "FilterBar" === gObj.filterSettings.type && (gObj.element.querySelector(".e-filterbar").style.display = "none");
            var waitingPop = gObj.element.querySelectorAll(".e-spin-show");
            waitingPop.length > 0 && (waitingPop[0].classList.add("e-spin-hide"), waitingPop[0].classList.remove("e-spin-show")), 
            gObj[this.printing] && detach(gObj.element), gObj.element.classList.remove("e-print-grid"), 
            this.printWind = print(gObj.element, this.printWind), gObj[this.printing] = !1;
            var args = {
                element: gObj.element
            };
            gObj.trigger("printComplete", args);
        }, Print.prototype.removeColGroup = function(depth, element) {
            for (var groupCaption = element.querySelectorAll(".e-groupcaption"), colSpan = groupCaption[depth - 1].getAttribute("colspan"), i = 0; i < groupCaption.length; i++) groupCaption[i].setAttribute("colspan", colSpan);
            var colGroups = element.querySelectorAll("colgroup");
            for (i = 0; i < colGroups.length; i++) for (var j = 0; j < depth; j++) colGroups[i].childNodes[j].style.display = "none";
        }, Print.prototype.isPrintGrid = function() {
            return this.parent.element.id.indexOf("_print") > 0 && this.parent[this.printing];
        }, Print.prototype.destroy = function() {
            this.parent.isDestroyed || (this.parent.off(contentReady, this.contentReady.bind(this)), 
            this.parent.removeEventListener(actionBegin, this.actionBegin.bind(this)), this.parent.off(onEmpty, this.onEmpty.bind(this)));
        }, Print.prototype.getModuleName = function() {
            return "print";
        }, Print.printGridProp = [ "aggregates", "allowGrouping", "allowFiltering", "allowMultiSorting", "allowReordering", "allowSorting", "allowTextWrap", "childGrid", "columns", "currentViewData", "dataSource", "detailTemplate", "enableAltRow", "enableColumnVirtualization", "filterSettings", "gridLines", "groupSettings", "height", "locale", "pageSettings", "printMode", "query", "queryString", "rowHeight", "rowTemplate", "sortSettings", "textWrapSettings", "allowPaging", "beforePrint", "printComplete" ], 
        Print;
    }(), __extends$38 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$26 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, AggregateColumn = function(_super) {
        function AggregateColumn() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.templateFn = {}, _this;
        }
        return __extends$38(AggregateColumn, _super), AggregateColumn.prototype.setFormatter = function(cultureName) {
            var valueFormatter = new ValueFormatter(cultureName);
            this.format && (this.format.skeleton || this.format.format) && (this.formatFn = valueFormatter.getFormatFunction(this.format));
        }, AggregateColumn.prototype.getFormatter = function() {
            return this.formatFn;
        }, AggregateColumn.prototype.setTemplate = function(helper) {
            void 0 === helper && (helper = {}), void 0 !== this.footerTemplate && (this.templateFn[getEnumValue(CellType, CellType.Summary)] = {
                fn: compile$$1(this.footerTemplate, helper),
                property: "footerTemplate"
            }), void 0 !== this.groupFooterTemplate && (this.templateFn[getEnumValue(CellType, CellType.GroupSummary)] = {
                fn: compile$$1(this.groupFooterTemplate, helper),
                property: "groupFooterTemplate"
            }), void 0 !== this.groupCaptionTemplate && (this.templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = {
                fn: compile$$1(this.groupCaptionTemplate, helper),
                property: "groupCaptionTemplate"
            });
        }, AggregateColumn.prototype.getTemplate = function(type) {
            return this.templateFn[getEnumValue(CellType, type)];
        }, AggregateColumn.prototype.setPropertiesSilent = function(prop) {
            this.setProperties(prop, !0);
        }, __decorate$26([ Property() ], AggregateColumn.prototype, "type", void 0), __decorate$26([ Property() ], AggregateColumn.prototype, "field", void 0), 
        __decorate$26([ Property() ], AggregateColumn.prototype, "columnName", void 0), 
        __decorate$26([ Property() ], AggregateColumn.prototype, "format", void 0), __decorate$26([ Property() ], AggregateColumn.prototype, "footerTemplate", void 0), 
        __decorate$26([ Property() ], AggregateColumn.prototype, "groupFooterTemplate", void 0), 
        __decorate$26([ Property() ], AggregateColumn.prototype, "groupCaptionTemplate", void 0), 
        __decorate$26([ Property() ], AggregateColumn.prototype, "customAggregate", void 0), 
        AggregateColumn;
    }(ChildProperty), AggregateRow = function(_super) {
        function AggregateRow() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$38(AggregateRow, _super), __decorate$26([ Collection([], AggregateColumn) ], AggregateRow.prototype, "columns", void 0), 
        AggregateRow;
    }(ChildProperty), Clipboard = function() {
        function Clipboard(parent) {
            this.copyContent = "", this.isSelect = !1, this.parent = parent, this.addEventListener();
        }
        return Clipboard.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(contentReady, this.initialEnd, this), 
            this.parent.on(keyPressed, this.keyDownHandler, this));
        }, Clipboard.prototype.removeEventListener = function() {
            this.parent.isDestroyed || this.parent.off(keyPressed, this.keyDownHandler);
        }, Clipboard.prototype.initialEnd = function() {
            this.parent.off(contentReady, this.initialEnd), this.clipBoardTextArea = this.parent.createElement("textarea", {
                className: "e-clipboard",
                styles: "opacity: 0",
                attrs: {
                    readonly: "true",
                    tabindex: "-1",
                    "aria-label": "clipboard"
                }
            }), this.parent.element.appendChild(this.clipBoardTextArea);
        }, Clipboard.prototype.keyDownHandler = function(e) {
            "ctrlPlusC" === e.action ? this.copy() : "ctrlShiftPlusH" === e.action && this.copy(!0);
        }, Clipboard.prototype.setCopyData = function(withHeader) {
            if ("" === window.getSelection().toString()) {
                var isFrozen = this.parent.getFrozenColumns();
                this.clipBoardTextArea.value = this.copyContent = "";
                var mRows = void 0, rows = this.parent.getRows();
                if (isFrozen && (mRows = this.parent.getMovableDataRows()), "Cell" !== this.parent.selectionSettings.mode) {
                    var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function(a, b) {
                        return a - b;
                    });
                    if (withHeader) {
                        for (var headerTextArray = [], i = 0; i < this.parent.getVisibleColumns().length; i++) headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;
                        this.getCopyData(headerTextArray, !1, "\t", withHeader), this.copyContent += "\n";
                    }
                    for (i = 0; i < selectedIndexes.length; i++) {
                        i > 0 && (this.copyContent += "\n");
                        var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll(".e-rowcell"));
                        isFrozen && cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll(".e-rowcell"))), 
                        this.getCopyData(cells, !1, "\t", withHeader);
                    }
                } else {
                    var obj = this.checkBoxSelection();
                    if (obj.status) {
                        if (withHeader) {
                            var headers = [];
                            for (i = 0; i < obj.colIndexes.length; i++) headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));
                            this.getCopyData(headers, !1, "\t", withHeader), this.copyContent += "\n";
                        }
                        for (i = 0; i < obj.rowIndexes.length; i++) {
                            i > 0 && (this.copyContent += "\n");
                            cells = [].slice.call(rows[obj.rowIndexes[i]].querySelectorAll(".e-cellselectionbackground"));
                            isFrozen && cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]].querySelectorAll(".e-cellselectionbackground"))), 
                            this.getCopyData(cells, !1, "\t", withHeader);
                        }
                    } else this.getCopyData([].slice.call(this.parent.element.querySelectorAll(".e-cellselectionbackground")), !0, "\n", withHeader);
                }
                var args = {
                    data: this.copyContent,
                    cancel: !1
                };
                if (this.parent.trigger("beforeCopy", args), args.cancel) return;
                this.clipBoardTextArea.value = this.copyContent = args.data, Browser.userAgent.match(/ipad|ipod|iphone/i) ? this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length) : this.clipBoardTextArea.select(), 
                this.isSelect = !0;
            }
        }, Clipboard.prototype.getCopyData = function(cells, isCell, splitKey, withHeader) {
            for (var isElement = "string" != typeof cells[0], j = 0; j < cells.length; j++) withHeader && isCell && (this.copyContent += this.parent.getColumns()[parseInt(cells[j].getAttribute("aria-colindex"), 10)].headerText + "\n"), 
            isElement ? cells[j].classList.contains("e-hide") || (this.copyContent += cells[j].textContent) : this.copyContent += cells[j], 
            j < cells.length - 1 && (this.copyContent += splitKey);
        }, Clipboard.prototype.copy = function(withHeader) {
            document.queryCommandSupported("copy") && (this.setCopyData(withHeader), document.execCommand("copy"), 
            this.clipBoardTextArea.blur()), this.isSelect && (window.getSelection().removeAllRanges(), 
            this.isSelect = !1);
        }, Clipboard.prototype.getModuleName = function() {
            return "clipboard";
        }, Clipboard.prototype.destroy = function() {
            this.removeEventListener(), this.clipBoardTextArea && remove(this.clipBoardTextArea);
        }, Clipboard.prototype.checkBoxSelection = function() {
            var gridObj = this.parent, obj = {
                status: !1
            };
            if ("Cell" === gridObj.selectionSettings.mode) {
                var rowCellIndxes = gridObj.getSelectedRowCellIndexes(), str = void 0, rowIndexes = [], i = void 0;
                for (i = 0; i < rowCellIndxes.length && (rowCellIndxes[i].cellIndexes.length && rowIndexes.push(rowCellIndxes[i].rowIndex), 
                !rowCellIndxes[i].cellIndexes.length || (str || (str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort())), 
                str === JSON.stringify(rowCellIndxes[i].cellIndexes.sort()))); i++) ;
                rowIndexes.sort(), i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] == rowIndexes.length - 1 && (obj = {
                    status: !0,
                    rowIndexes: rowIndexes,
                    colIndexes: rowCellIndxes[0].cellIndexes
                });
            }
            return obj;
        }, Clipboard;
    }(), __extends = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, SortDescriptor = function(_super) {
        function SortDescriptor() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(SortDescriptor, _super), __decorate([ Property() ], SortDescriptor.prototype, "field", void 0), 
        __decorate([ Property() ], SortDescriptor.prototype, "direction", void 0), SortDescriptor;
    }(ChildProperty), SortSettings = function(_super) {
        function SortSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(SortSettings, _super), __decorate([ Collection([], SortDescriptor) ], SortSettings.prototype, "columns", void 0), 
        __decorate([ Property(!0) ], SortSettings.prototype, "allowUnsort", void 0), SortSettings;
    }(ChildProperty), Predicate = function(_super) {
        function Predicate() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(Predicate, _super), __decorate([ Property() ], Predicate.prototype, "field", void 0), 
        __decorate([ Property() ], Predicate.prototype, "operator", void 0), __decorate([ Property() ], Predicate.prototype, "value", void 0), 
        __decorate([ Property() ], Predicate.prototype, "matchCase", void 0), __decorate([ Property() ], Predicate.prototype, "ignoreAccent", void 0), 
        __decorate([ Property() ], Predicate.prototype, "predicate", void 0), __decorate([ Property({}) ], Predicate.prototype, "actualFilterValue", void 0), 
        __decorate([ Property({}) ], Predicate.prototype, "actualOperator", void 0), __decorate([ Property() ], Predicate.prototype, "type", void 0), 
        __decorate([ Property() ], Predicate.prototype, "ejpredicate", void 0), Predicate;
    }(ChildProperty), FilterSettings = function(_super) {
        function FilterSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(FilterSettings, _super), __decorate([ Collection([], Predicate) ], FilterSettings.prototype, "columns", void 0), 
        __decorate([ Property("FilterBar") ], FilterSettings.prototype, "type", void 0), 
        __decorate([ Property() ], FilterSettings.prototype, "mode", void 0), __decorate([ Property(!0) ], FilterSettings.prototype, "showFilterBarStatus", void 0), 
        __decorate([ Property(1500) ], FilterSettings.prototype, "immediateModeDelay", void 0), 
        __decorate([ Property() ], FilterSettings.prototype, "operators", void 0), __decorate([ Property(!1) ], FilterSettings.prototype, "ignoreAccent", void 0), 
        FilterSettings;
    }(ChildProperty), SelectionSettings = function(_super) {
        function SelectionSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(SelectionSettings, _super), __decorate([ Property("Row") ], SelectionSettings.prototype, "mode", void 0), 
        __decorate([ Property("Flow") ], SelectionSettings.prototype, "cellSelectionMode", void 0), 
        __decorate([ Property("Single") ], SelectionSettings.prototype, "type", void 0), 
        __decorate([ Property(!1) ], SelectionSettings.prototype, "checkboxOnly", void 0), 
        __decorate([ Property(!1) ], SelectionSettings.prototype, "persistSelection", void 0), 
        __decorate([ Property("Default") ], SelectionSettings.prototype, "checkboxMode", void 0), 
        SelectionSettings;
    }(ChildProperty), SearchSettings = function(_super) {
        function SearchSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(SearchSettings, _super), __decorate([ Property([]) ], SearchSettings.prototype, "fields", void 0), 
        __decorate([ Property("") ], SearchSettings.prototype, "key", void 0), __decorate([ Property("contains") ], SearchSettings.prototype, "operator", void 0), 
        __decorate([ Property(!0) ], SearchSettings.prototype, "ignoreCase", void 0), __decorate([ Property(!1) ], SearchSettings.prototype, "ignoreAccent", void 0), 
        SearchSettings;
    }(ChildProperty), RowDropSettings = function(_super) {
        function RowDropSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(RowDropSettings, _super), __decorate([ Property() ], RowDropSettings.prototype, "targetID", void 0), 
        RowDropSettings;
    }(ChildProperty), TextWrapSettings = function(_super) {
        function TextWrapSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(TextWrapSettings, _super), __decorate([ Property("Both") ], TextWrapSettings.prototype, "wrapMode", void 0), 
        TextWrapSettings;
    }(ChildProperty), GroupSettings = function(_super) {
        function GroupSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(GroupSettings, _super), __decorate([ Property(!0) ], GroupSettings.prototype, "showDropArea", void 0), 
        __decorate([ Property(!1) ], GroupSettings.prototype, "showToggleButton", void 0), 
        __decorate([ Property(!1) ], GroupSettings.prototype, "showGroupedColumn", void 0), 
        __decorate([ Property(!0) ], GroupSettings.prototype, "showUngroupButton", void 0), 
        __decorate([ Property(!1) ], GroupSettings.prototype, "disablePageWiseAggregates", void 0), 
        __decorate([ Property([]) ], GroupSettings.prototype, "columns", void 0), __decorate([ Property() ], GroupSettings.prototype, "captionTemplate", void 0), 
        GroupSettings;
    }(ChildProperty), EditSettings = function(_super) {
        function EditSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends(EditSettings, _super), __decorate([ Property(!1) ], EditSettings.prototype, "allowAdding", void 0), 
        __decorate([ Property(!1) ], EditSettings.prototype, "allowEditing", void 0), __decorate([ Property(!1) ], EditSettings.prototype, "allowDeleting", void 0), 
        __decorate([ Property("Normal") ], EditSettings.prototype, "mode", void 0), __decorate([ Property(!0) ], EditSettings.prototype, "allowEditOnDblClick", void 0), 
        __decorate([ Property(!0) ], EditSettings.prototype, "showConfirmDialog", void 0), 
        __decorate([ Property(!1) ], EditSettings.prototype, "showDeleteConfirmDialog", void 0), 
        __decorate([ Property("") ], EditSettings.prototype, "template", void 0), EditSettings;
    }(ChildProperty), Grid = function(_super) {
        function Grid(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.isPreventScrollEvent = !1, _this.inViewIndexes = [], _this.freezeRefresh = Component.prototype.refresh, 
            _this.currentViewData = [], _this.prevPageMoving = !1, _this.needsID = !0, setValue("mergePersistData", _this.mergePersistGridData, _this), 
            _this;
        }
        return __extends(Grid, _super), Grid.prototype.getPersistData = function() {
            var _this = this, keyEntity = [ "pageSettings", "sortSettings", "filterSettings", "groupSettings", "columns", "searchSettings", "selectedRowIndex" ], ignoreOnPersist = {
                pageSettings: [ "template", "pageSizes", "enableQueryString", "totalRecordsCount", "pageCount" ],
                filterSettings: [ "type", "mode", "showFilterBarStatus", "immediateModeDelay", "ignoreAccent" ],
                groupSettings: [ "showDropArea", "showToggleButton", "showGroupedColumn", "showUngroupButton", "disablePageWiseAggregates", "hideCaptionCount" ],
                searchSettings: [ "fields", "operator", "ignoreCase" ],
                sortSettings: [],
                columns: [],
                selectedRowIndex: []
            };
            return keyEntity.forEach(function(value) {
                for (var currentObject = _this[value], _i = 0, _a = ignoreOnPersist[value]; _i < _a.length; _i++) {
                    delete currentObject[_a[_i]];
                }
            }), this.ignoreInArrays([ "filter", "edit", "filterBarTemplate", "headerTemplate", "template", "commandTemplate", "commands", "dataSource" ], this.columns), 
            this.addOnPersist(keyEntity);
        }, Grid.prototype.ignoreInArrays = function(ignoreOnColumn, columns) {
            var _this = this;
            columns.forEach(function(column) {
                column.columns ? (_this.ignoreInColumn(ignoreOnColumn, column), _this.ignoreInArrays(ignoreOnColumn, column.columns)) : _this.ignoreInColumn(ignoreOnColumn, column);
            });
        }, Grid.prototype.ignoreInColumn = function(ignoreOnColumn, column) {
            ignoreOnColumn.forEach(function(val) {
                delete column[val], column.filter = {};
            });
        }, Grid.prototype.requiredModules = function() {
            var modules = [];
            return this.isDestroyed ? modules : (this.allowFiltering && modules.push({
                member: "filter",
                args: [ this, this.filterSettings, this.serviceLocator ]
            }), this.allowExcelExport && modules.push({
                member: "ExcelExport",
                args: [ this ]
            }), this.allowPdfExport && modules.push({
                member: "PdfExport",
                args: [ this ]
            }), this.allowSorting && modules.push({
                member: "sort",
                args: [ this, this.sortSettings, this.sortedColumns, this.serviceLocator ]
            }), this.allowPaging && modules.push({
                member: "pager",
                args: [ this, this.pageSettings ]
            }), this.allowSelection && modules.push({
                member: "selection",
                args: [ this, this.selectionSettings, this.serviceLocator ]
            }), modules.push({
                member: "resize",
                args: [ this ]
            }), this.allowReordering && modules.push({
                member: "reorder",
                args: [ this ]
            }), this.allowRowDragAndDrop && modules.push({
                member: "rowDragAndDrop",
                args: [ this ]
            }), this.allowGrouping && modules.push({
                member: "group",
                args: [ this, this.groupSettings, this.sortedColumns, this.serviceLocator ]
            }), this.aggregates.length && modules.push({
                member: "aggregate",
                args: [ this, this.serviceLocator ]
            }), this.isDetail() && modules.push({
                member: "detailRow",
                args: [ this, this.serviceLocator ]
            }), (this.toolbar || this.toolbarTemplate) && modules.push({
                member: "toolbar",
                args: [ this, this.serviceLocator ]
            }), (this.enableVirtualization || this.enableColumnVirtualization) && modules.push({
                member: "virtualscroll",
                args: [ this, this.serviceLocator ]
            }), (this.getFrozenColumns() || this.frozenRows) && modules.push({
                member: "freeze",
                args: [ this, this.serviceLocator ]
            }), this.isCommandColumn(this.columns) && modules.push({
                member: "commandColumn",
                args: [ this, this.serviceLocator ]
            }), (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) && modules.push({
                member: "edit",
                args: [ this, this.serviceLocator ]
            }), this.extendRequiredModules(modules), modules);
        }, Grid.prototype.extendRequiredModules = function(modules) {
            this.contextMenuItems && modules.push({
                member: "contextMenu",
                args: [ this, this.serviceLocator ]
            }), this.showColumnMenu && modules.push({
                member: "columnMenu",
                args: [ this, this.serviceLocator ]
            }), this.showColumnChooser && modules.push({
                member: "columnChooser",
                args: [ this, this.serviceLocator ]
            }), this.isForeignKeyEnabled(this.columns) && modules.push({
                member: "foreignKey",
                args: [ this, this.serviceLocator ]
            });
        }, Grid.prototype.preRender = function() {
            this.serviceLocator = new ServiceLocator(), this.initProperties(), this.initializeServices();
        }, Grid.prototype.initProperties = function() {
            this.isInitial = !0, this.sortedColumns = [], this.inViewIndexes = [], this.mediaCol = [], 
            this.isInitialLoad = !1, this.mergeCells = {}, this.isEdit = !1, this.checkAllRows = "None", 
            this.isCheckBoxSelection = !1, this.isPersistSelection = !1, this.freezeRefresh = Component.prototype.refresh, 
            this.filterOperators = {
                contains: "contains",
                endsWith: "endswith",
                equal: "equal",
                greaterThan: "greaterthan",
                greaterThanOrEqual: "greaterthanorequal",
                lessThan: "lessthan",
                lessThanOrEqual: "lessthanorequal",
                notEqual: "notequal",
                startsWith: "startswith"
            }, this.defaultLocale = {
                EmptyRecord: "No records to display",
                True: "true",
                False: "false",
                InvalidFilterMessage: "Invalid Filter Data",
                GroupDropArea: "Drag a column header here to group its column",
                UnGroup: "Click here to ungroup",
                GroupDisable: "Grouping is disabled for this column",
                FilterbarTitle: "'s filter bar cell",
                EmptyDataSourceError: "DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid",
                Add: "Add",
                Edit: "Edit",
                Cancel: "Cancel",
                Update: "Update",
                Delete: "Delete",
                Print: "Print",
                Pdfexport: "PDF Export",
                Excelexport: "Excel Export",
                Wordexport: "Word Export",
                Csvexport: "CSV Export",
                Search: "Search",
                Columnchooser: "Columns",
                Save: "Save",
                Item: "item",
                Items: "items",
                EditOperationAlert: "No records selected for edit operation",
                DeleteOperationAlert: "No records selected for delete operation",
                SaveButton: "Save",
                OKButton: "OK",
                CancelButton: "Cancel",
                EditFormTitle: "Details of ",
                AddFormTitle: "Add New Record",
                BatchSaveConfirm: "Are you sure you want to save changes?",
                BatchSaveLostChanges: "Unsaved changes will be lost. Are you sure you want to continue?",
                ConfirmDelete: "Are you sure you want to Delete Record?",
                CancelEdit: "Are you sure you want to Cancel the changes?",
                ChooseColumns: "Choose Column",
                SearchColumns: "search columns",
                Matchs: "No Matches Found",
                FilterButton: "Filter",
                ClearButton: "Clear",
                StartsWith: "Starts With",
                EndsWith: "Ends With",
                Contains: "Contains",
                Equal: "Equal",
                NotEqual: "Not Equal",
                LessThan: "Less Than",
                LessThanOrEqual: "Less Than Or Equal",
                GreaterThan: "Greater Than",
                GreaterThanOrEqual: "Greater Than Or Equal",
                ChooseDate: "Choose a Date",
                EnterValue: "Enter the value",
                Copy: "Copy",
                Group: "Group by this column",
                Ungroup: "Ungroup by this column",
                autoFitAll: "Auto Fit all columns",
                autoFit: "Auto Fit this column",
                Export: "Export",
                FirstPage: "First Page",
                LastPage: "Last Page",
                PreviousPage: "Previous Page",
                NextPage: "Next Page",
                SortAscending: "Sort Ascending",
                SortDescending: "Sort Descending",
                EditRecord: "Edit Record",
                DeleteRecord: "Delete Record",
                FilterMenu: "Filter",
                SelectAll: "Select All",
                Blanks: "Blanks",
                FilterTrue: "True",
                FilterFalse: "False",
                NoResult: "No Matches Found",
                ClearFilter: "Clear Filter",
                NumberFilter: "Number Filters",
                TextFilter: "Text Filters",
                DateFilter: "Date Filters",
                DateTimeFilter: "DateTime Filters",
                MatchCase: "Match Case",
                Between: "Between",
                CustomFilter: "Custom Filter",
                CustomFilterPlaceHolder: "Enter the value",
                CustomFilterDatePlaceHolder: "Choose a date",
                AND: "AND",
                OR: "OR",
                ShowRowsWhere: "Show rows where:"
            }, this.keyConfigs = {
                downArrow: "downarrow",
                upArrow: "uparrow",
                rightArrow: "rightarrow",
                leftArrow: "leftarrow",
                shiftDown: "shift+downarrow",
                shiftUp: "shift+uparrow",
                shiftRight: "shift+rightarrow",
                shiftLeft: "shift+leftarrow",
                home: "home",
                end: "end",
                escape: "escape",
                ctrlHome: "ctrl+home",
                ctrlEnd: "ctrl+end",
                pageUp: "pageup",
                pageDown: "pagedown",
                ctrlAltPageUp: "ctrl+alt+pageup",
                ctrlAltPageDown: "ctrl+alt+pagedown",
                altPageUp: "alt+pageup",
                altPageDown: "alt+pagedown",
                altDownArrow: "alt+downarrow",
                altUpArrow: "alt+uparrow",
                ctrlDownArrow: "ctrl+downarrow",
                ctrlUpArrow: "ctrl+uparrow",
                ctrlPlusA: "ctrl+A",
                ctrlPlusP: "ctrl+P",
                insert: "insert",
                delete: "delete",
                f2: "f2",
                enter: "enter",
                ctrlEnter: "ctrl+enter",
                shiftEnter: "shift+enter",
                tab: "tab",
                shiftTab: "shift+tab",
                space: "space",
                ctrlPlusC: "ctrl+C",
                ctrlShiftPlusH: "ctrl+shift+H"
            };
        }, Grid.prototype.render = function() {
            this.ariaService.setOptions(this.element, {
                role: "grid"
            }), createSpinner({
                target: this.element
            }, this.createElement), this.renderModule = new Render(this, this.serviceLocator), 
            this.getMediaColumns(), this.searchModule = new Search(this), this.scrollModule = new Scroll(this), 
            this.notify(initialLoad, {}), this.trigger("load"), prepareColumns(this.columns, this.enableColumnVirtualization), 
            this.getColumns(), this.processModel(), this.gridRender(), this.wireEvents(), this.addListener(), 
            this.updateDefaultCursor(), this.updateStackedFilter(), this.showSpinner(), this.notify(initialEnd, {});
        }, Grid.prototype.showSpinner = function() {
            showSpinner(this.element);
        }, Grid.prototype.hideSpinner = function() {
            hideSpinner(this.element);
        }, Grid.prototype.updateStackedFilter = function() {
            this.allowFiltering && "FilterBar" === this.filterSettings.type && this.getHeaderContent().querySelectorAll(".e-stackedheadercell").length ? this.getHeaderContent().classList.add("e-stackedfilter") : this.getHeaderContent().classList.remove("e-stackedfilter");
        }, Grid.prototype.getMediaColumns = function() {
            if (!this.enableColumnVirtualization) {
                var gcol = this.getColumns();
                if (this.getShowHideService = this.serviceLocator.getService("showHideService"), 
                !isNullOrUndefined(gcol)) for (var index = 0; index < gcol.length; index++) if (!isNullOrUndefined(gcol[index].hideAtMedia)) {
                    this.mediaCol.push(gcol[index]);
                    var media = window.matchMedia(gcol[index].hideAtMedia);
                    this.mediaQueryUpdate(index, media), media.addListener(this.mediaQueryUpdate.bind(this, index));
                }
            }
        }, Grid.prototype.mediaQueryUpdate = function(columnIndex, e) {
            var col = this.getColumns()[columnIndex];
            col.visible = e.matches, this.isInitialLoad && (col.visible ? this.showHider.show(col.headerText, "headerText") : this.showHider.hide(col.headerText, "headerText"));
        }, Grid.prototype.refreshMediaCol = function() {
            if (this.isInitialLoad = !0, this.aggregates.length && this.element.scrollHeight > this.height) {
                addClass([ this.element.querySelector(".e-gridfooter") ], [ "e-footerpadding" ]);
            }
            this.getColumns().filter(function(col) {
                return "checkbox" === col.type;
            }).length && "ResetOnRowClick" === this.selectionSettings.checkboxMode && (this.isCheckBoxSelection = !1, 
            this.refreshHeader());
        }, Grid.prototype.eventInitializer = function() {}, Grid.prototype.destroy = function() {
            var gridElement = this.element;
            if (gridElement) {
                var hasGridChild = !(!gridElement.querySelector(".e-gridheader") || !gridElement.querySelector(".e-gridcontent"));
                hasGridChild && this.unwireEvents(), this.removeListener(), this.notify(destroy$1, {}), 
                this.destroyDependentModules(), hasGridChild && _super.prototype.destroy.call(this), 
                this.toolTipObj.destroy();
                for (var modules = [ "renderModule", "headerModule", "contentModule", "valueFormatterService", "serviceLocator", "ariaService", "keyboardModule", "widthService", "searchModule", "showHider", "scrollModule", "printModule", "clipboardModule", "focusModule" ], i = 0; i < modules.length; i++) this[modules[i]] && (this[modules[i]] = null);
                this.element.innerHTML = "", classList(this.element, [], [ "e-rtl", "e-gridhover", "e-responsive", "e-default", "e-device", "e-grid-min-height" ]);
            }
        }, Grid.prototype.destroyDependentModules = function() {
            var gridElement = this.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.scrollModule.destroy(), 
            this.keyboardModule.destroy(), this.focusModule.destroy());
        }, Grid.prototype.getModuleName = function() {
            return "grid";
        }, Grid.prototype.onPropertyChanged = function(newProp, oldProp) {
            var checkCursor, requireRefresh = !1, requireGridRefresh = !1, freezeRefresh$$1 = !1;
            if (!this.isDestroyed) {
                var properties = Object.keys(newProp);
                properties.indexOf("columns") > -1 && (this.updateColumnObject(), requireGridRefresh = !0);
                for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
                    var prop = properties_1[_i];
                    switch (prop) {
                      case "allowPaging":
                        this.notify(uiUpdate, {
                            module: "pager",
                            enable: this.allowPaging
                        }), requireRefresh = !0;
                        break;

                      case "pageSettings":
                        this.notify(inBoundModelChanged, {
                            module: "pager",
                            properties: newProp.pageSettings
                        }), (isNullOrUndefined(newProp.pageSettings.currentPage) && isNullOrUndefined(newProp.pageSettings.totalRecordsCount) || !isNullOrUndefined(oldProp.pageSettings) && newProp.pageSettings.currentPage !== oldProp.pageSettings.currentPage && !this.enableColumnVirtualization && !this.enableVirtualization && this.pageSettings.totalRecordsCount <= this.pageSettings.pageSize) && (requireRefresh = !0);
                        break;

                      case "currencyCode":
                      case "locale":
                        _super.prototype.refresh.call(this);
                        break;

                      case "allowSorting":
                        this.notify(uiUpdate, {
                            module: "sort",
                            enable: this.allowSorting
                        }), requireRefresh = !0, checkCursor = !0;
                        break;

                      case "allowFiltering":
                        this.updateStackedFilter(), this.notify(uiUpdate, {
                            module: "filter",
                            enable: this.allowFiltering
                        }), requireRefresh = !0, "FilterBar" !== this.filterSettings.type && this.refreshHeader();
                        break;

                      case "height":
                      case "width":
                        this.notify(uiUpdate, {
                            module: "scroll",
                            properties: {
                                width: newProp.width,
                                height: newProp.height
                            }
                        });
                        break;

                      case "allowReordering":
                        this.headerModule.refreshUI(), checkCursor = !0;
                        break;

                      case "allowRowDragAndDrop":
                        this.notify(uiUpdate, {
                            module: "rowDragAndDrop",
                            enable: this.allowRowDragAndDrop
                        });
                        break;

                      case "allowSelection":
                        this.notify(uiUpdate, {
                            module: "selection",
                            enable: this.allowSelection
                        });
                        break;

                      case "rowTemplate":
                        this.rowTemplateFn = templateCompiler(this.rowTemplate), requireRefresh = !0;
                        break;

                      case "detailTemplate":
                        this.detailTemplateFn = templateCompiler(this.detailTemplate), requireRefresh = !0;
                        break;

                      case "allowGrouping":
                        this.notify(uiUpdate, {
                            module: "group",
                            enable: this.allowGrouping
                        }), this.headerModule.refreshUI(), requireRefresh = !0, checkCursor = !0;
                        break;

                      case "childGrid":
                        requireRefresh = !0;
                        break;

                      case "toolbar":
                        this.notify(uiUpdate, {
                            module: "toolbar"
                        });
                        break;

                      case "groupSettings":
                        this.notify(inBoundModelChanged, {
                            module: "group",
                            properties: newProp.groupSettings,
                            oldProperties: oldProp.groupSettings
                        });
                        break;

                      case "aggregates":
                        !this.aggregates.length && this.allowGrouping && this.groupSettings.columns.length && (requireRefresh = !0), 
                        this.notify(uiUpdate, {
                            module: "aggregate",
                            properties: newProp
                        });
                        break;

                      case "frozenColumns":
                      case "frozenRows":
                        freezeRefresh$$1 = !0, requireGridRefresh = !0;
                        break;

                      case "enableVirtualization":
                        _super.prototype.refresh.call(this);
                        break;

                      default:
                        this.extendedPropertyChange(prop, newProp);
                    }
                }
                checkCursor && this.updateDefaultCursor(), requireGridRefresh ? freezeRefresh$$1 || this.frozenColumns || this.frozenRows ? this.freezeRefresh() : this.refresh() : requireRefresh && (this.notify(modelChanged, {
                    requestType: "refresh"
                }), requireRefresh = !1);
            }
        }, Grid.prototype.extendedPropertyChange = function(prop, newProp) {
            switch (prop) {
              case "enableRtl":
                this.updateRTL(), this.allowPaging && (this.element.querySelector(".e-gridpager").ej2_instances[0].enableRtl = newProp.enableRtl, 
                this.element.querySelector(".e-gridpager").ej2_instances[0].dataBind()), "auto" !== this.height && (this.scrollModule.removePadding(!newProp.enableRtl), 
                this.scrollModule.setPadding()), this.toolbar && (this.toolbarModule.getToolbar().ej2_instances[0].enableRtl = newProp.enableRtl, 
                this.toolbarModule.getToolbar().ej2_instances[0].dataBind()), this.contextMenuItems && (this.contextMenuModule.getContextMenu().ej2_instances[0].enableRtl = newProp.enableRtl, 
                this.contextMenuModule.getContextMenu().ej2_instances[0].dataBind()), this.showColumnMenu && (this.columnMenuModule.getColumnMenu().ej2_instances[0].enableRtl = newProp.enableRtl, 
                this.columnMenuModule.getColumnMenu().ej2_instances[0].dataBind()), this.notify("rtl-updated", {});
                break;

              case "enableAltRow":
                this.renderModule.refresh();
                break;

              case "allowResizing":
                this.headerModule.refreshUI(), this.updateResizeLines();
                break;

              case "rowHeight":
                this.rowHeight ? addClass([ this.element ], "e-grid-min-height") : removeClass([ this.element ], "e-grid-min-height"), 
                this.renderModule.refresh(), this.headerModule.refreshUI();
                break;

              case "gridLines":
                this.updateGridLines();
                break;

              case "showColumnMenu":
                this.headerModule.refreshUI(), this.notify(uiUpdate, {
                    module: "columnMenu",
                    enable: !0
                });
                break;

              case "columnMenuItems":
                this.notify(uiUpdate, {
                    module: "columnMenu",
                    enable: this.columnMenuItems
                });
                break;

              case "contextMenuItems":
                this.notify(uiUpdate, {
                    module: "contextMenu",
                    enable: this.contextMenuItems
                });
                break;

              case "showColumnChooser":
                this.notify(uiUpdate, {
                    module: "columnChooser",
                    enable: this.showColumnChooser
                });
                break;

              case "filterSettings":
                this.updateStackedFilter(), this.notify(inBoundModelChanged, {
                    module: "filter",
                    properties: newProp.filterSettings
                });
                break;

              case "searchSettings":
                this.notify(inBoundModelChanged, {
                    module: "search",
                    properties: newProp.searchSettings
                });
                break;

              case "sortSettings":
                this.notify(inBoundModelChanged, {
                    module: "sort"
                });
                break;

              case "selectionSettings":
                this.notify(inBoundModelChanged, {
                    module: "selection",
                    properties: newProp.selectionSettings
                });
                break;

              case "editSettings":
                this.notify(inBoundModelChanged, {
                    module: "edit",
                    properties: newProp.editSettings
                });
                break;

              case "allowTextWrap":
              case "textWrapSettings":
                this.allowTextWrap ? this.applyTextWrap() : this.removeTextWrap(), this.notify(freezeRender, {
                    case: "textwrap",
                    isModeChg: "textWrapSettings" === prop
                });
                break;

              case "dataSource":
                var pending_1 = this.getDataModule().getState();
                if (pending_1.isPending) {
                    var gResult_1 = isNullOrUndefined(this.dataSource) ? [] : this.dataSource.result;
                    (pending_1.group || []).forEach(function(name) {
                        gResult_1 = DataUtil.group(gResult_1, name, pending_1.aggregates || []);
                    }), this.dataSource = {
                        result: gResult_1,
                        count: this.dataSource.count,
                        aggregates: this.dataSource.aggregates
                    }, pending_1.resolver(this.dataSource);
                } else this.getDataModule().setState({
                    isDataChanged: !1
                }), this.notify(dataSourceModified, {}), this.renderModule.refresh();
                break;

              case "enableHover":
                (newProp.enableHover ? addClass : removeClass)([ this.element ], "e-gridhover");
            }
        }, Grid.prototype.setProperties = function(prop, muteOnChange) {
            _super.prototype.setProperties.call(this, prop, muteOnChange), this.filterModule && muteOnChange && this.filterModule.refreshFilter();
        }, Grid.prototype.updateDefaultCursor = function() {
            for (var _i = 0, headerRows_1 = [].slice.call(this.element.querySelectorAll(".e-columnheader")); _i < headerRows_1.length; _i++) {
                var row = headerRows_1[_i];
                this.allowSorting || this.allowGrouping && this.groupSettings.showDropArea || this.allowReordering ? row.classList.remove("e-defaultcursor") : row.classList.add("e-defaultcursor");
            }
        }, Grid.prototype.updateColumnModel = function(columns) {
            for (var i = 0, len = columns.length; i < len; i++) columns[i].columns ? this.updateColumnModel(columns[i].columns) : this.columnModel.push(columns[i]);
            this.updateFrozenColumns();
        }, Grid.prototype.updateFrozenColumns = function() {
            for (var cols = this.columnModel, count = 0, i = 0, len = cols.length; i < len; i++) cols[i].isFrozen && (cols.splice(this.frozenColumns + count, 0, cols.splice(i, 1)[0]), 
            count++);
        }, Grid.prototype.getColumns = function(isRefresh) {
            var _this = this, inview = this.inViewIndexes.map(function(v) {
                return v - _this.groupSettings.columns.length;
            }).filter(function(v) {
                return v > -1;
            }), vLen = inview.length;
            (!this.enableColumnVirtualization || isNullOrUndefined(this.columnModel) || 0 === this.columnModel.length || isRefresh) && (this.columnModel = [], 
            this.updateColumnModel(this.columns));
            return 0 === vLen ? this.columnModel : this.columnModel.slice(inview[0], inview[vLen - 1] + 1);
        }, Grid.prototype.getStackedHeaderColumnByHeaderText = function(stackedHeader, col) {
            for (var i = 0; i < col.length; i++) {
                var individualColumn = col[i];
                if (individualColumn.field === stackedHeader || individualColumn.headerText === stackedHeader) {
                    this.stackedColumn = individualColumn;
                    break;
                }
                individualColumn.columns && this.getStackedHeaderColumnByHeaderText(stackedHeader, individualColumn.columns);
            }
            return this.stackedColumn;
        }, Grid.prototype.getColumnIndexesInView = function() {
            return this.inViewIndexes;
        }, Grid.prototype.getLocaleConstants = function() {
            return this.defaultLocale;
        }, Grid.prototype.setColumnIndexesInView = function(indexes) {
            this.inViewIndexes = indexes;
        }, Grid.prototype.getVisibleColumns = function() {
            for (var cols = [], _i = 0, _a = this.columnModel; _i < _a.length; _i++) {
                var col = _a[_i];
                col.visible && cols.push(col);
            }
            return cols;
        }, Grid.prototype.getHeaderContent = function() {
            return this.headerModule.getPanel();
        }, Grid.prototype.setGridHeaderContent = function(element) {
            this.headerModule.setPanel(element);
        }, Grid.prototype.getContentTable = function() {
            return this.contentModule.getTable();
        }, Grid.prototype.setGridContentTable = function(element) {
            this.contentModule.setTable(element);
        }, Grid.prototype.getContent = function() {
            return this.contentModule.getPanel();
        }, Grid.prototype.setGridContent = function(element) {
            this.contentModule.setPanel(element);
        }, Grid.prototype.getHeaderTable = function() {
            return this.headerModule.getTable();
        }, Grid.prototype.setGridHeaderTable = function(element) {
            this.headerModule.setTable(element);
        }, Grid.prototype.getFooterContent = function() {
            return isNullOrUndefined(this.footerElement) && (this.footerElement = this.element.getElementsByClassName("e-gridfooter")[0]), 
            this.footerElement;
        }, Grid.prototype.getFooterContentTable = function() {
            return isNullOrUndefined(this.footerElement) && (this.footerElement = this.element.getElementsByClassName("e-gridfooter")[0]), 
            this.footerElement.firstChild.firstChild;
        }, Grid.prototype.getPager = function() {
            return this.gridPager;
        }, Grid.prototype.setGridPager = function(element) {
            this.gridPager = element;
        }, Grid.prototype.getRowByIndex = function(index) {
            return this.contentModule.getRowByIndex(index);
        }, Grid.prototype.getMovableRowByIndex = function(index) {
            return this.contentModule.getMovableRowByIndex(index);
        }, Grid.prototype.getRows = function() {
            return this.contentModule.getRowElements();
        }, Grid.prototype.getRowInfo = function(target) {
            var ele = target, args = {
                target: target
            };
            if (!isNullOrUndefined(target) && isNullOrUndefined(parentsUntil(ele, "e-detailrowcollapse") && isNullOrUndefined(parentsUntil(ele, "e-recordplusexpand"))) && !this.isEdit) {
                var cell = closest(ele, ".e-rowcell");
                if (!cell) return args;
                var cellIndex = parseInt(cell.getAttribute("aria-colindex"), 10);
                if (!isNullOrUndefined(cell) && !isNaN(cellIndex)) {
                    var row_1 = closest(cell, ".e-row"), rowIndex = parseInt(row_1.getAttribute("aria-rowindex"), 10), frzCols = this.getFrozenColumns(), isMovable = !!frzCols && cellIndex >= frzCols, rowsObject = (isMovable ? this.contentModule.getMovableRows() : this.contentModule.getRows()).filter(function(r) {
                        return r.uid === row_1.getAttribute("data-uid");
                    }), rowData = rowsObject[0].data, column = rowsObject[0].cells[isMovable ? cellIndex - frzCols : cellIndex].column;
                    args = {
                        cell: cell,
                        cellIndex: cellIndex,
                        row: row_1,
                        rowIndex: rowIndex,
                        rowData: rowData,
                        column: column,
                        target: target
                    };
                }
            }
            return args;
        }, Grid.prototype.getMovableRows = function() {
            return this.contentModule.getMovableRowElements();
        }, Grid.prototype.getDataRows = function() {
            var rows = [].slice.call(this.getContentTable().querySelector("tbody").children);
            if (this.frozenRows) {
                var freezeRows = [].slice.call(this.getHeaderTable().querySelector("tbody").children);
                rows = this.addMovableRows(freezeRows, rows);
            }
            return this.generateDataRows(rows);
        }, Grid.prototype.addMovableRows = function(fRows, mrows) {
            for (var i = 0, len = mrows.length; i < len; i++) fRows.push(mrows[i]);
            return fRows;
        }, Grid.prototype.generateDataRows = function(rows) {
            for (var dRows = [], i = 0, len = rows.length; i < len; i++) rows[i].classList.contains("e-row") && !rows[i].classList.contains("e-hiddenrow") && dRows.push(rows[i]);
            return dRows;
        }, Grid.prototype.getMovableDataRows = function() {
            var rows = [].slice.call(this.getContent().querySelector(".e-movablecontent").querySelector("tbody").children);
            if (this.frozenRows) {
                var freezeRows = [].slice.call(this.getHeaderContent().querySelector(".e-movableheader").querySelector("tbody").children);
                rows = this.addMovableRows(freezeRows, rows);
            }
            return this.generateDataRows(rows);
        }, Grid.prototype.setCellValue = function(key, field, value) {
            var fieldIdx, col, tr, mTr, pkName = this.getPrimaryKeyFieldNames()[0], cell = new CellRenderer(this, this.serviceLocator), selectedRow = {}, movableSelectedRow = {}, rowObjects = this.contentModule.getRows(), movableRowObjects = this.contentModule.getMovableRows();
            if (fieldIdx = this.getColumnIndexByField(field), (this.groupSettings.columns.length > 0 || this.childGrid || this.detailTemplate) && (fieldIdx += 1), 
            col = this.getColumnByField(field), selectedRow = rowObjects.filter(function(r) {
                return getValue(pkName, r.data) === key;
            })[0], movableSelectedRow = movableRowObjects.filter(function(r) {
                return getValue(pkName, r.data) === key;
            })[0], tr = isNullOrUndefined(selectedRow) ? null : this.element.querySelector("[data-uid=" + selectedRow.uid + "]"), 
            mTr = isNullOrUndefined(movableSelectedRow) ? null : this.element.querySelector("[data-uid=" + movableSelectedRow.uid + "]"), 
            !isNullOrUndefined(tr)) {
                setValue(field, value, selectedRow.data);
                var td = isNullOrUndefined(tr.childNodes[fieldIdx]) ? mTr.childNodes[fieldIdx - this.frozenColumns] : tr.childNodes[fieldIdx];
                if (!isNullOrUndefined(td)) {
                    var sRow = selectedRow.cells[fieldIdx], mRow = void 0;
                    this.frozenColumns && (mRow = movableSelectedRow.cells[fieldIdx - this.frozenColumns]), 
                    cell.refreshTD(td, isNullOrUndefined(sRow) ? mRow : sRow, selectedRow.data, {
                        index: selectedRow.index
                    }), this.aggregates.length > 0 && (this.notify("refresh-footer-rendered", {}), this.groupSettings.columns.length > 0 && this.notify("group-aggregates", {})), 
                    isNullOrUndefined(movableSelectedRow) || isNullOrUndefined(movableSelectedRow.changes) || (movableSelectedRow.changes[field] = value), 
                    this.trigger("queryCellInfo", {
                        cell: td,
                        column: col,
                        data: selectedRow.data
                    });
                }
            }
        }, Grid.prototype.setRowData = function(key, rowData) {
            var selectedRow, rowObjects = this.contentModule.getRows(), pkName = this.getPrimaryKeyFieldNames()[0], rowRenderer = new RowRenderer(this.serviceLocator, null, this);
            this.groupSettings.columns.length > 0 && this.aggregates.length > 0 && (rowObjects = rowObjects.filter(function(row) {
                return row.isDataRow;
            })), !isNullOrUndefined(selectedRow = rowObjects.filter(function(r) {
                return getValue(pkName, r.data) === key;
            })[0]) && this.element.querySelectorAll("[data-uid=" + selectedRow.uid + "]").length && (selectedRow.changes = rowData, 
            refreshForeignData(selectedRow, this.getForeignKeyColumns(), selectedRow.changes), 
            rowRenderer.refresh(selectedRow, this.getColumns(), !0), this.aggregates.length > 0 && (this.notify("refresh-footer-rendered", {}), 
            this.groupSettings.columns.length > 0 && this.notify("group-aggregates", {})));
        }, Grid.prototype.getCellFromIndex = function(rowIndex, columnIndex) {
            return this.getDataRows()[rowIndex].querySelectorAll(".e-rowcell")[columnIndex];
        }, Grid.prototype.getMovableCellFromIndex = function(rowIndex, columnIndex) {
            return this.getMovableDataRows()[rowIndex].querySelectorAll(".e-rowcell")[columnIndex - this.getFrozenColumns()];
        }, Grid.prototype.getColumnHeaderByIndex = function(index) {
            return this.getHeaderTable().querySelectorAll(".e-headercell")[index];
        }, Grid.prototype.getRowObjectFromUID = function(uid) {
            var rows = this.contentModule.getRows(), row = this.rowObject(rows, uid);
            return this.getFrozenColumns() && !row ? row = this.rowObject(this.contentModule.getMovableRows(), uid) : row;
        }, Grid.prototype.rowObject = function(rows, uid) {
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                if (row.uid === uid) return row;
            }
            return null;
        }, Grid.prototype.getRowsObject = function() {
            return this.contentModule.getRows();
        }, Grid.prototype.getMovableRowsObject = function() {
            return this.contentModule.getMovableRows();
        }, Grid.prototype.getColumnHeaderByField = function(field) {
            return this.getColumnHeaderByUid(this.getColumnByField(field).uid);
        }, Grid.prototype.getColumnHeaderByUid = function(uid) {
            return this.getHeaderContent().querySelector("[e-mappinguid=" + uid + "]").parentElement;
        }, Grid.prototype.getColumnByIndex = function(index) {
            var column;
            return this.getColumns().some(function(col, i) {
                return column = col, i === index;
            }), column;
        }, Grid.prototype.getColumnByField = function(field) {
            return iterateArrayOrObject(this.getColumns(), function(item, index) {
                if (item.field === field) return item;
            })[0];
        }, Grid.prototype.getColumnIndexByField = function(field) {
            for (var cols = this.getColumns(), i = 0; i < cols.length; i++) if (cols[i].field === field) return i;
            return -1;
        }, Grid.prototype.getColumnByUid = function(uid) {
            return iterateArrayOrObject(this.getColumns(), function(item, index) {
                if (item.uid === uid) return item;
            })[0];
        }, Grid.prototype.getColumnIndexByUid = function(uid) {
            var index = iterateArrayOrObject(this.getColumns(), function(item, index) {
                if (item.uid === uid) return index;
            })[0];
            return isNullOrUndefined(index) ? -1 : index;
        }, Grid.prototype.getUidByColumnField = function(field) {
            return iterateArrayOrObject(this.getColumns(), function(item, index) {
                if (item.field === field) return item.uid;
            })[0];
        }, Grid.prototype.getNormalizedColumnIndex = function(uid) {
            var index = this.getColumnIndexByUid(uid);
            return this.allowGrouping && (index += this.groupSettings.columns.length), this.isDetail() && index++, 
            index;
        }, Grid.prototype.getColumnFieldNames = function() {
            for (var column, columnNames = [], i = 0, len = this.getColumns().length; i < len; i++) (column = this.getColumns()[i]).visible && columnNames.push(column.field);
            return columnNames;
        }, Grid.prototype.getRowTemplate = function() {
            return this.rowTemplateFn;
        }, Grid.prototype.getDetailTemplate = function() {
            return this.detailTemplateFn;
        }, Grid.prototype.getEditTemplate = function() {
            return this.editTemplateFn;
        }, Grid.prototype.getPrimaryKeyFieldNames = function() {
            for (var keys = [], k = 0; k < this.columnModel.length; k++) this.columnModel[k].isPrimaryKey && keys.push(this.columnModel[k].field);
            return keys;
        }, Grid.prototype.refresh = function() {
            this.headerModule.refreshUI(), this.updateStackedFilter(), this.renderModule.refresh();
        }, Grid.prototype.refreshHeader = function() {
            this.headerModule.refreshUI();
        }, Grid.prototype.getSelectedRows = function() {
            return this.selectionModule ? this.selectionModule.selectedRecords : [];
        }, Grid.prototype.getSelectedRowIndexes = function() {
            return this.selectionModule ? this.selectionModule.selectedRowIndexes : [];
        }, Grid.prototype.getSelectedRowCellIndexes = function() {
            return this.selectionModule.selectedRowCellIndexes;
        }, Grid.prototype.getSelectedRecords = function() {
            return this.selectionModule ? this.selectionModule.getSelectedRecords() : [];
        }, Grid.prototype.getDataModule = function() {
            return this.renderModule.data;
        }, Grid.prototype.showColumns = function(keys, showBy) {
            showBy = showBy || "headerText", this.showHider.show(keys, showBy);
        }, Grid.prototype.hideColumns = function(keys, hideBy) {
            hideBy = hideBy || "headerText", this.showHider.hide(keys, hideBy);
        }, Grid.prototype.getFrozenColumns = function() {
            return this.frozenColumns + this.getFrozenCount(this.columns, 0);
        }, Grid.prototype.getVisibleFrozenColumns = function() {
            return this.getVisibleFrozenColumnsCount() + this.getVisibleFrozenCount(this.columns, 0);
        }, Grid.prototype.getVisibleFrozenColumnsCount = function() {
            for (var visibleFrozenColumns = 0, col = this.columns, i = 0; i < this.frozenColumns; i++) col[i].visible && visibleFrozenColumns++;
            return visibleFrozenColumns;
        }, Grid.prototype.getVisibleFrozenCount = function(cols, cnt) {
            for (var i = 0, len = cols.length; i < len; i++) cols[i].columns ? cnt = this.getVisibleFrozenCount(cols[i].columns, cnt) : cols[i].isFrozen && cols[i].visible && cnt++;
            return cnt;
        }, Grid.prototype.getFrozenCount = function(cols, cnt) {
            for (var i = 0, len = cols.length; i < len; i++) cols[i].columns ? cnt = this.getFrozenCount(cols[i].columns, cnt) : cols[i].isFrozen && cnt++;
            return cnt;
        }, Grid.prototype.goToPage = function(pageNo) {
            this.pagerModule.goToPage(pageNo);
        }, Grid.prototype.updateExternalMessage = function(message) {
            this.pagerModule.updateExternalMessage(message);
        }, Grid.prototype.sortColumn = function(columnName, direction, isMultiSort) {
            this.sortModule.sortColumn(columnName, direction, isMultiSort);
        }, Grid.prototype.clearSorting = function() {
            this.sortModule.clearSorting();
        }, Grid.prototype.removeSortColumn = function(field) {
            this.sortModule.removeSortColumn(field);
        }, Grid.prototype.filterByColumn = function(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {
            this.filterModule.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);
        }, Grid.prototype.clearFiltering = function() {
            this.filterModule.clearFiltering();
        }, Grid.prototype.removeFilteredColsByField = function(field, isClearFilterBar) {
            this.filterModule.removeFilteredColsByField(field, isClearFilterBar);
        }, Grid.prototype.selectRow = function(index, isToggle) {
            this.selectionModule.selectRow(index, isToggle);
        }, Grid.prototype.selectRows = function(rowIndexes) {
            this.selectionModule.selectRows(rowIndexes);
        }, Grid.prototype.clearSelection = function() {
            this.selectionModule.clearSelection();
        }, Grid.prototype.selectCell = function(cellIndex, isToggle) {
            this.selectionModule.selectCell(cellIndex, isToggle);
        }, Grid.prototype.search = function(searchString) {
            this.searchModule.search(searchString);
        }, Grid.prototype.print = function() {
            this.printModule.print();
        }, Grid.prototype.deleteRecord = function(fieldname, data) {
            this.editModule.deleteRecord(fieldname, data);
        }, Grid.prototype.startEdit = function() {
            this.editModule.startEdit();
        }, Grid.prototype.endEdit = function() {
            this.editModule.endEdit();
        }, Grid.prototype.closeEdit = function() {
            this.editModule.closeEdit();
        }, Grid.prototype.addRecord = function(data, index) {
            this.editModule.addRecord(data, index);
        }, Grid.prototype.deleteRow = function(tr) {
            this.editModule.deleteRow(tr);
        }, Grid.prototype.copy = function(withHeader) {
            this.clipboardModule.copy(withHeader);
        }, Grid.prototype.recalcIndentWidth = function() {
            if (this.getHeaderTable().querySelector(".e-emptycell") && (this.groupSettings.columns.length || this.isDetail()) && !this.getHeaderTable().querySelector(".e-emptycell").getAttribute("indentRefreshed") && this.getContentTable()) {
                var indentWidth = this.getHeaderTable().querySelector(".e-emptycell").parentElement.offsetWidth, headerCol = [].slice.call(this.getHeaderTable().querySelector("colgroup").childNodes), contentCol = [].slice.call(this.getContentTable().querySelector("colgroup").childNodes), perPixel = indentWidth / 30, i = 0;
                for (perPixel >= 1 && (indentWidth = 30 / perPixel), this.enableColumnVirtualization && (indentWidth = 30); i < this.groupSettings.columns.length; ) headerCol[i].style.width = indentWidth + "px", 
                contentCol[i].style.width = indentWidth + "px", this.notify("column-width-changed", {
                    index: i,
                    width: indentWidth
                }), i++;
                this.isDetail() && (headerCol[i].style.width = indentWidth + "px", contentCol[i].style.width = indentWidth + "px", 
                this.notify("column-width-changed", {
                    index: i,
                    width: indentWidth
                })), this.getHeaderTable().querySelector(".e-emptycell").setAttribute("indentRefreshed", "true");
            }
        }, Grid.prototype.reorderColumns = function(fromFName, toFName) {
            this.reorderModule.reorderColumns(fromFName, toFName);
        }, Grid.prototype.autoFitColumns = function(fieldNames) {
            this.resizeModule.autoFitColumns(fieldNames);
        }, Grid.prototype.createColumnchooser = function(x, y, target) {
            this.columnChooserModule.renderColumnChooser(x, y, target);
        }, Grid.prototype.initializeServices = function() {
            this.serviceLocator.register("widthService", this.widthService = new ColumnWidthService(this)), 
            this.serviceLocator.register("cellRendererFactory", new CellRendererFactory()), 
            this.serviceLocator.register("rendererFactory", new RendererFactory()), this.serviceLocator.register("localization", this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale)), 
            this.serviceLocator.register("valueFormatter", this.valueFormatterService = new ValueFormatter(this.locale)), 
            this.serviceLocator.register("showHideService", this.showHider = new ShowHide(this)), 
            this.serviceLocator.register("ariaService", this.ariaService = new AriaService()), 
            this.serviceLocator.register("focus", this.focusModule = new FocusStrategy(this));
        }, Grid.prototype.processModel = function() {
            var flag, j, _this = this, gCols = this.groupSettings.columns, sCols = this.sortSettings.columns;
            if (this.allowGrouping) for (var _loop_1 = function(i, len) {
                j = 0;
                for (var sLen = sCols.length; j < sLen; j++) if (sCols[j].field === gCols[i]) {
                    flag = !0;
                    break;
                }
                if (flag ? this_1.allowSorting ? this_1.sortedColumns.push(sCols[j].field) : sCols[j].direction = "Ascending" : sCols.push({
                    field: gCols[i],
                    direction: "Ascending"
                }), !this_1.groupSettings.showGroupedColumn) {
                    (this_1.enableColumnVirtualization ? this_1.columns.filter(function(c) {
                        return c.field === gCols[i];
                    })[0] : this_1.getColumnByField(gCols[i])).visible = !1;
                }
            }, this_1 = this, i = 0, len = gCols.length; i < len; i++) _loop_1(i);
            if (gCols.length || sCols.forEach(function(col) {
                _this.sortedColumns.push(col.field);
            }), this.rowTemplateFn = templateCompiler(this.rowTemplate), this.detailTemplateFn = templateCompiler(this.detailTemplate), 
            this.editTemplateFn = templateCompiler(this.editSettings.template), !isNullOrUndefined(this.parentDetails)) {
                var value = isNullOrUndefined(this.parentDetails.parentKeyFieldValue) ? "undefined" : this.parentDetails.parentKeyFieldValue;
                this.query.where(this.queryString, "equal", value, !0);
            }
            this.initForeignColumn();
        }, Grid.prototype.initForeignColumn = function() {
            this.isForeignKeyEnabled(this.getColumns()) && this.notify("initForeignKeyColumn", this.getForeignKeyColumns());
        }, Grid.prototype.gridRender = function() {
            this.updateRTL(), this.enableHover && this.element.classList.add("e-gridhover"), 
            Browser.isDevice && this.element.classList.add("e-device"), this.rowHeight && this.element.classList.add("e-grid-min-height"), 
            classList(this.element, [ "e-responsive", "e-default" ], []);
            var rendererFactory = this.serviceLocator.getService("rendererFactory");
            this.headerModule = rendererFactory.getRenderer(RenderType.Header), this.contentModule = rendererFactory.getRenderer(RenderType.Content), 
            this.printModule = new Print(this, this.scrollModule), this.clipboardModule = new Clipboard(this), 
            this.renderModule.render(), this.eventInitializer(), this.createGridPopUpElement(), 
            this.widthService.setWidthToColumns(), this.updateGridLines(), this.applyTextWrap(), 
            this.createTooltip();
        }, Grid.prototype.dataReady = function() {
            this.scrollModule.setWidth(), this.scrollModule.setHeight(), "auto" !== this.height && this.scrollModule.setPadding();
        }, Grid.prototype.updateRTL = function() {
            this.enableRtl ? this.element.classList.add("e-rtl") : this.element.classList.remove("e-rtl");
        }, Grid.prototype.createGridPopUpElement = function() {
            var popup = this.createElement("div", {
                className: "e-gridpopup",
                styles: "display:none;"
            }), content = this.createElement("div", {
                className: "e-content",
                attrs: {
                    tabIndex: "-1"
                }
            });
            append([ content, this.createElement("div", {
                className: "e-uptail e-tail"
            }) ], popup), content.appendChild(this.createElement("span")), append([ content, this.createElement("div", {
                className: "e-downtail e-tail"
            }) ], popup), this.element.appendChild(popup);
        }, Grid.prototype.updateGridLines = function() {
            switch (classList(this.element, [], [ "e-verticallines", "e-horizontallines", "e-hidelines", "e-bothlines" ]), 
            this.gridLines) {
              case "Horizontal":
                this.element.classList.add("e-horizontallines");
                break;

              case "Vertical":
                this.element.classList.add("e-verticallines");
                break;

              case "None":
                this.element.classList.add("e-hidelines");
                break;

              case "Both":
                this.element.classList.add("e-bothlines");
            }
            this.updateResizeLines();
        }, Grid.prototype.updateResizeLines = function() {
            this.allowResizing && "Vertical" !== this.gridLines && "Both" !== this.gridLines ? this.element.classList.add("e-resize-lines") : this.element.classList.remove("e-resize-lines");
        }, Grid.prototype.applyTextWrap = function() {
            if (this.allowTextWrap) {
                var headerRows = [].slice.call(this.element.querySelectorAll(".e-columnheader"));
                switch (this.textWrapSettings.wrapMode) {
                  case "Header":
                    wrap(this.element, !1), wrap(this.getContent(), !1), wrap(headerRows, !0);
                    break;

                  case "Content":
                    wrap(this.getContent(), !0), wrap(this.element, !1), wrap(headerRows, !1);
                    break;

                  default:
                    wrap(this.element, !0), wrap(this.getContent(), !1), wrap(headerRows, !1);
                }
            }
        }, Grid.prototype.removeTextWrap = function() {
            wrap(this.element, !1);
            wrap([].slice.call(this.element.querySelectorAll(".e-columnheader")), !1), wrap(this.getContent(), !1);
        }, Grid.prototype.createTooltip = function() {
            this.toolTipObj = new Tooltip({
                opensOn: "custom",
                content: ""
            }, this.element);
        }, Grid.prototype.getTooltipStatus = function(element) {
            var width, headerTable = this.getHeaderTable(), htable = (this.getContentTable(), 
            this.createTable(headerTable, "e-gridheader", "header")), ctable = this.createTable(headerTable, "e-gridheader", "content"), table = headerTable.contains(element) ? htable : ctable, ele = headerTable.contains(element) ? "th" : "tr";
            return table.querySelector(ele).className = element.className, table.querySelector(ele).innerHTML = element.innerHTML, 
            width = table.querySelector(ele).getBoundingClientRect().width, document.body.removeChild(htable), 
            document.body.removeChild(ctable), width > element.getBoundingClientRect().width;
        }, Grid.prototype.mouseMoveHandler = function(e) {
            if (this.isEllipsisTooltip()) {
                var element = parentsUntil(e.target, "e-ellipsistooltip");
                if (element) {
                    if (element.getAttribute("aria-describedby")) return;
                    this.getTooltipStatus(element) ? (element.getElementsByClassName("e-headertext").length ? this.toolTipObj.content = element.getElementsByClassName("e-headertext")[0].innerText : this.toolTipObj.content = element.innerText, 
                    this.toolTipObj.open(element)) : this.toolTipObj.close();
                } else this.toolTipObj.close();
            }
        }, Grid.prototype.isEllipsisTooltip = function() {
            for (var cols = this.getColumns(), i = 0; i < cols.length; i++) if ("EllipsisWithTooltip" === cols[i].clipMode) return !0;
            return !1;
        }, Grid.prototype.scrollHandler = function() {
            this.isEllipsisTooltip() && this.toolTipObj.close();
        }, Grid.prototype.createTable = function(table, tag, type) {
            var myTableDiv = this.createElement("div");
            myTableDiv.className = this.element.className, myTableDiv.style.cssText = "display: inline-block;visibility:hidden;position:absolute";
            var mySubDiv = this.createElement("div");
            mySubDiv.className = tag;
            var myTable = this.createElement("table");
            myTable.className = table.className, myTable.style.cssText = "table-layout: auto;width: auto";
            var ele = "header" === type ? "th" : "td", myTr = this.createElement("tr"), mytd = this.createElement(ele);
            return myTr.appendChild(mytd), myTable.appendChild(myTr), mySubDiv.appendChild(myTable), 
            myTableDiv.appendChild(mySubDiv), document.body.appendChild(myTableDiv), myTableDiv;
        }, Grid.prototype.keyPressed = function(e) {
            "tab" !== e.action && "shiftTab" !== e.action || this.toolTipObj.close();
        }, Grid.prototype.wireEvents = function() {
            EventHandler.add(this.element, "click", this.mouseClickHandler, this), EventHandler.add(this.element, "touchend", this.mouseClickHandler, this), 
            EventHandler.add(this.element, "focusout", this.focusOutHandler, this), EventHandler.add(this.getContent(), "dblclick", this.dblClickHandler, this), 
            this.allowKeyboard && (this.element.tabIndex = -1 === this.element.tabIndex ? 0 : this.element.tabIndex), 
            this.keyboardModule = new KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: "keydown"
            }), EventHandler.add(this.getContent().firstElementChild, "scroll", this.scrollHandler, this), 
            EventHandler.add(this.element, "mousemove", this.mouseMoveHandler, this);
        }, Grid.prototype.unwireEvents = function() {
            EventHandler.remove(this.element, "click", this.mouseClickHandler), EventHandler.remove(this.element, "touchend", this.mouseClickHandler), 
            EventHandler.remove(this.element, "focusout", this.focusOutHandler), EventHandler.remove(this.getContent().firstElementChild, "scroll", this.scrollHandler), 
            EventHandler.remove(this.element, "mousemove", this.mouseMoveHandler);
        }, Grid.prototype.addListener = function() {
            this.isDestroyed || (this.on(dataReady, this.dataReady, this), this.on(contentReady, this.recalcIndentWidth, this), 
            this.on(headerRefreshed, this.recalcIndentWidth, this), this.dataBoundFunction = this.refreshMediaCol.bind(this), 
            this.addEventListener(dataBound, this.dataBoundFunction), this.on(keyPressed, this.keyPressed, this));
        }, Grid.prototype.removeListener = function() {
            this.isDestroyed || (this.off(dataReady, this.dataReady), this.off(contentReady, this.recalcIndentWidth), 
            this.off(headerRefreshed, this.recalcIndentWidth), this.removeEventListener(dataBound, this.dataBoundFunction), 
            this.off(keyPressed, this.keyPressed));
        }, Grid.prototype.getCurrentViewRecords = function() {
            return this.allowGrouping && this.groupSettings.columns.length && this.currentViewData.length ? this.currentViewData.records : this.currentViewData;
        }, Grid.prototype.mouseClickHandler = function(e) {
            this.isChildGrid(e) || parentsUntil(e.target, "e-gridpopup") && e.touches || this.element.querySelectorAll(".e-cloneproperties").length || this.checkEdit(e) || (!this.allowRowDragAndDrop && (parentsUntil(e.target, "e-gridcontent") || "TD" === e.target.tagName) || !this.allowGrouping && !this.allowReordering && parentsUntil(e.target, "e-gridheader")) && e.touches || (parentsUntil(e.target, "e-gridheader") && this.allowRowDragAndDrop && e.preventDefault(), 
            this.notify(click, e));
        }, Grid.prototype.checkEdit = function(e) {
            var tr = parentsUntil(e.target, "e-row"), isEdit = "Batch" !== this.editSettings.mode && this.isEdit && tr && (tr.classList.contains("e-editedrow") || tr.classList.contains("e-addedrow"));
            return !parentsUntil(e.target, "e-unboundcelldiv") && (isEdit || parentsUntil(e.target, "e-rowcell") && parentsUntil(e.target, "e-rowcell").classList.contains("e-editedbatchcell"));
        }, Grid.prototype.dblClickHandler = function(e) {
            var grid = parentsUntil(e.target, "e-grid");
            if (!isNullOrUndefined(grid) && grid.id === this.element.id && !closest(e.target, ".e-unboundcelldiv")) {
                var args = this.getRowInfo(e.target);
                args.target = e.target, this.trigger("recordDoubleClick", args), this.notify("dblclick", e);
            }
        }, Grid.prototype.focusOutHandler = function(e) {
            if (!this.isChildGrid(e)) {
                parentsUntil(e.target, "e-grid") || (this.element.querySelector(".e-gridpopup").style.display = "None");
                var filterClear = this.element.querySelector(".e-cancel:not(.e-hide)");
                filterClear && filterClear.classList.add("e-hide"), e.relatedTarget && parentsUntil(e.relatedTarget, "e-grid") || this.keyPress || "Batch" !== this.editSettings.mode || !this.isEdit || Browser.isDevice || (this.editModule.saveCell(), 
                this.notify("editNextValCell", {})), this.keyPress = !1;
            }
        }, Grid.prototype.isChildGrid = function(e) {
            var gridElement = parentsUntil(e.target, "e-grid");
            return !(!gridElement || gridElement.id === this.element.id);
        }, Grid.prototype.mergePersistGridData = function() {
            var data = window.localStorage.getItem(this.getModuleName() + this.element.id);
            if (!isNullOrUndefined(data) && "" !== data) {
                var dataObj = JSON.parse(data), keys = Object.keys(dataObj);
                this.isProtectedOnChange = !0;
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var key = keys_1[_i];
                    "object" != typeof this[key] || isNullOrUndefined(this[key]) ? this[key] = dataObj[key] : Array.isArray(this[key]) && "columns" === key ? (this.mergeColumns(dataObj[key], this[key]), 
                    this[key] = dataObj[key]) : extend(this[key], dataObj[key]);
                }
                this.isProtectedOnChange = !1;
            }
        }, Grid.prototype.mergeColumns = function(storedColumn, columns) {
            var _this = this;
            storedColumn.forEach(function(col, index, arr) {
                var ind, localCol = _this.getColumnByField(col.field) || columns.some(function(element, i) {
                    return ind = i, element.headerText === col.headerText;
                }) && columns[ind];
                isNullOrUndefined(localCol) || (localCol.columns && localCol.columns.length ? _this.mergeColumns(col.columns, localCol.columns) : arr[index] = extend({}, localCol, col, !0));
            });
        }, Grid.prototype.isDetail = function() {
            return !isNullOrUndefined(this.detailTemplate) || !isNullOrUndefined(this.childGrid);
        }, Grid.prototype.isCommandColumn = function(columns) {
            var _this = this;
            return columns.some(function(col) {
                return col.columns ? _this.isCommandColumn(col.columns) : !(!col.commands && !col.commandsTemplate);
            });
        }, Grid.prototype.isForeignKeyEnabled = function(columns) {
            var _this = this;
            return columns.some(function(col) {
                return col.columns ? _this.isForeignKeyEnabled(col.columns) : !(!col.dataSource || !col.foreignKeyValue);
            });
        }, Grid.prototype.keyActionHandler = function(e) {
            this.keyPress = "space" !== e.action, this.isChildGrid(e) || this.isEdit && "escape" !== e.action && "enter" !== e.action && "shiftEnter" !== e.action && "tab" !== e.action && "shiftTab" !== e.action || this.allowKeyboard && ("ctrlPlusP" === e.action && (e.preventDefault(), 
            this.print()), this.notify(keyPressed, e));
        }, Grid.prototype.setInjectedModules = function(modules) {
            this.injectedModules = modules;
        }, Grid.prototype.updateColumnObject = function() {
            prepareColumns(this.columns, this.enableColumnVirtualization), this.initForeignColumn(), 
            this.notify("auto-col", {});
        }, Grid.prototype.getForeignKeyColumns = function() {
            return this.getColumns().filter(function(col) {
                return col.isForeignColumn();
            });
        }, Grid.prototype.getRowHeight = function() {
            return this.rowHeight ? this.rowHeight : getRowHeight(this.element);
        }, Grid.prototype.refreshColumns = function() {
            this.isPreventScrollEvent = !0, this.updateColumnObject(), this.refresh();
        }, Grid.prototype.excelExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
            return this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, !1, isBlob);
        }, Grid.prototype.csvExport = function(excelExportProperties, isMultipleExport, workbook, isBlob) {
            return this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, !0, isBlob);
        }, Grid.prototype.pdfExport = function(pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
            return this.pdfExportModule.Map(this, pdfExportProperties, isMultipleExport, pdfDoc, isBlob);
        }, Grid.prototype.groupColumn = function(columnName) {
            this.groupModule.groupColumn(columnName);
        }, Grid.prototype.ungroupColumn = function(columnName) {
            this.groupModule.ungroupColumn(columnName);
        }, Grid.prototype.isContextMenuOpen = function() {
            return this.contextMenuModule && this.contextMenuModule.isOpen;
        }, Grid.prototype.ensureModuleInjected = function(module) {
            return this.getInjectedModules().indexOf(module) >= 0;
        }, Grid.prototype.destroyTemplate = function(propertyNames) {
            this.clearTemplate(propertyNames);
        }, __decorate([ Property([]) ], Grid.prototype, "columns", void 0), __decorate([ Property(!0) ], Grid.prototype, "enableAltRow", void 0), 
        __decorate([ Property(!0) ], Grid.prototype, "enableHover", void 0), __decorate([ Property(!0) ], Grid.prototype, "allowKeyboard", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "allowTextWrap", void 0), __decorate([ Complex({}, TextWrapSettings) ], Grid.prototype, "textWrapSettings", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "allowPaging", void 0), __decorate([ Complex({}, PageSettings) ], Grid.prototype, "pageSettings", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "enableVirtualization", void 0), __decorate([ Property(!1) ], Grid.prototype, "enableColumnVirtualization", void 0), 
        __decorate([ Complex({}, SearchSettings) ], Grid.prototype, "searchSettings", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "allowSorting", void 0), __decorate([ Property(!0) ], Grid.prototype, "allowMultiSorting", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "allowExcelExport", void 0), __decorate([ Property(!1) ], Grid.prototype, "allowPdfExport", void 0), 
        __decorate([ Complex({}, SortSettings) ], Grid.prototype, "sortSettings", void 0), 
        __decorate([ Property(!0) ], Grid.prototype, "allowSelection", void 0), __decorate([ Property(-1) ], Grid.prototype, "selectedRowIndex", void 0), 
        __decorate([ Complex({}, SelectionSettings) ], Grid.prototype, "selectionSettings", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "allowFiltering", void 0), __decorate([ Property(!1) ], Grid.prototype, "allowReordering", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "allowResizing", void 0), __decorate([ Property(!1) ], Grid.prototype, "allowRowDragAndDrop", void 0), 
        __decorate([ Complex({}, RowDropSettings) ], Grid.prototype, "rowDropSettings", void 0), 
        __decorate([ Complex({}, FilterSettings) ], Grid.prototype, "filterSettings", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "allowGrouping", void 0), __decorate([ Property(!1) ], Grid.prototype, "showColumnMenu", void 0), 
        __decorate([ Complex({}, GroupSettings) ], Grid.prototype, "groupSettings", void 0), 
        __decorate([ Complex({}, EditSettings) ], Grid.prototype, "editSettings", void 0), 
        __decorate([ Collection([], AggregateRow) ], Grid.prototype, "aggregates", void 0), 
        __decorate([ Property(!1) ], Grid.prototype, "showColumnChooser", void 0), __decorate([ Property("auto") ], Grid.prototype, "height", void 0), 
        __decorate([ Property("auto") ], Grid.prototype, "width", void 0), __decorate([ Property("Default") ], Grid.prototype, "gridLines", void 0), 
        __decorate([ Property() ], Grid.prototype, "rowTemplate", void 0), __decorate([ Property() ], Grid.prototype, "detailTemplate", void 0), 
        __decorate([ Property() ], Grid.prototype, "childGrid", void 0), __decorate([ Property() ], Grid.prototype, "queryString", void 0), 
        __decorate([ Property("AllPages") ], Grid.prototype, "printMode", void 0), __decorate([ Property([]) ], Grid.prototype, "dataSource", void 0), 
        __decorate([ Property(null) ], Grid.prototype, "rowHeight", void 0), __decorate([ Property() ], Grid.prototype, "query", void 0), 
        __decorate([ Property("USD") ], Grid.prototype, "currencyCode", void 0), __decorate([ Property() ], Grid.prototype, "toolbar", void 0), 
        __decorate([ Property() ], Grid.prototype, "contextMenuItems", void 0), __decorate([ Property() ], Grid.prototype, "columnMenuItems", void 0), 
        __decorate([ Property() ], Grid.prototype, "toolbarTemplate", void 0), __decorate([ Property() ], Grid.prototype, "pagerTemplate", void 0), 
        __decorate([ Property(0) ], Grid.prototype, "frozenRows", void 0), __decorate([ Property(0) ], Grid.prototype, "frozenColumns", void 0), 
        __decorate([ Property("All") ], Grid.prototype, "columnQueryMode", void 0), __decorate([ Event() ], Grid.prototype, "created", void 0), 
        __decorate([ Event() ], Grid.prototype, "destroyed", void 0), __decorate([ Event() ], Grid.prototype, "load", void 0), 
        __decorate([ Event() ], Grid.prototype, "rowDataBound", void 0), __decorate([ Event() ], Grid.prototype, "queryCellInfo", void 0), 
        __decorate([ Event() ], Grid.prototype, "headerCellInfo", void 0), __decorate([ Event() ], Grid.prototype, "actionBegin", void 0), 
        __decorate([ Event() ], Grid.prototype, "actionComplete", void 0), __decorate([ Event() ], Grid.prototype, "actionFailure", void 0), 
        __decorate([ Event() ], Grid.prototype, "dataBound", void 0), __decorate([ Event() ], Grid.prototype, "recordDoubleClick", void 0), 
        __decorate([ Event() ], Grid.prototype, "rowSelecting", void 0), __decorate([ Event() ], Grid.prototype, "rowSelected", void 0), 
        __decorate([ Event() ], Grid.prototype, "rowDeselecting", void 0), __decorate([ Event() ], Grid.prototype, "rowDeselected", void 0), 
        __decorate([ Event() ], Grid.prototype, "cellSelecting", void 0), __decorate([ Event() ], Grid.prototype, "cellSelected", void 0), 
        __decorate([ Event() ], Grid.prototype, "cellDeselecting", void 0), __decorate([ Event() ], Grid.prototype, "cellDeselected", void 0), 
        __decorate([ Event() ], Grid.prototype, "columnDragStart", void 0), __decorate([ Event() ], Grid.prototype, "columnDrag", void 0), 
        __decorate([ Event() ], Grid.prototype, "columnDrop", void 0), __decorate([ Event() ], Grid.prototype, "printComplete", void 0), 
        __decorate([ Event() ], Grid.prototype, "beforePrint", void 0), __decorate([ Event() ], Grid.prototype, "pdfQueryCellInfo", void 0), 
        __decorate([ Event() ], Grid.prototype, "pdfHeaderQueryCellInfo", void 0), __decorate([ Event() ], Grid.prototype, "excelQueryCellInfo", void 0), 
        __decorate([ Event() ], Grid.prototype, "excelHeaderQueryCellInfo", void 0), __decorate([ Event() ], Grid.prototype, "beforeExcelExport", void 0), 
        __decorate([ Event() ], Grid.prototype, "excelExportComplete", void 0), __decorate([ Event() ], Grid.prototype, "beforePdfExport", void 0), 
        __decorate([ Event() ], Grid.prototype, "pdfExportComplete", void 0), __decorate([ Event() ], Grid.prototype, "detailDataBound", void 0), 
        __decorate([ Event() ], Grid.prototype, "rowDragStart", void 0), __decorate([ Event() ], Grid.prototype, "rowDrag", void 0), 
        __decorate([ Event() ], Grid.prototype, "rowDrop", void 0), __decorate([ Event() ], Grid.prototype, "toolbarClick", void 0), 
        __decorate([ Event() ], Grid.prototype, "beforeOpenColumnChooser", void 0), __decorate([ Event() ], Grid.prototype, "batchAdd", void 0), 
        __decorate([ Event() ], Grid.prototype, "batchDelete", void 0), __decorate([ Event() ], Grid.prototype, "batchCancel", void 0), 
        __decorate([ Event() ], Grid.prototype, "beforeBatchAdd", void 0), __decorate([ Event() ], Grid.prototype, "beforeBatchDelete", void 0), 
        __decorate([ Event() ], Grid.prototype, "beforeBatchSave", void 0), __decorate([ Event() ], Grid.prototype, "beginEdit", void 0), 
        __decorate([ Event() ], Grid.prototype, "cellEdit", void 0), __decorate([ Event() ], Grid.prototype, "cellSave", void 0), 
        __decorate([ Event() ], Grid.prototype, "cellSaved", void 0), __decorate([ Event() ], Grid.prototype, "resizeStart", void 0), 
        __decorate([ Event() ], Grid.prototype, "resizing", void 0), __decorate([ Event() ], Grid.prototype, "resizeStop", void 0), 
        __decorate([ Event() ], Grid.prototype, "beforeDataBound", void 0), __decorate([ Event() ], Grid.prototype, "contextMenuOpen", void 0), 
        __decorate([ Event() ], Grid.prototype, "contextMenuClick", void 0), __decorate([ Event() ], Grid.prototype, "columnMenuOpen", void 0), 
        __decorate([ Event() ], Grid.prototype, "columnMenuClick", void 0), __decorate([ Event() ], Grid.prototype, "checkBoxChange", void 0), 
        __decorate([ Event() ], Grid.prototype, "beforeCopy", void 0), __decorate([ Event() ], Grid.prototype, "dataStateChange", void 0), 
        __decorate([ Event() ], Grid.prototype, "dataSourceChanged", void 0), Grid = __decorate([ NotifyPropertyChanges ], Grid);
    }(Component);
    Grid.Inject(Selection);
    var ListBase, Sort = function() {
        function Sort(parent, sortSettings, sortedColumns, locator) {
            this.contentRefresh = !0, this.isModelChanged = !0, this.aria = new AriaService(), 
            this.parent = parent, this.sortSettings = sortSettings, this.sortedColumns = sortedColumns, 
            this.focus = locator.getService("focus"), this.addEventListener();
        }
        return Sort.prototype.updateModel = function() {
            var index, sortedColumn = {
                field: this.columnName,
                direction: this.direction
            }, gCols = this.parent.groupSettings.columns, flag = !1;
            if (this.isMultiSort) (index = this.getSortedColsIndexByField(this.columnName)) > -1 && this.sortSettings.columns.splice(index, 1), 
            this.sortSettings.columns.push(sortedColumn), this.sortSettings.columns = this.sortSettings.columns; else if (gCols.length) {
                for (var sortedCols = [], i = 0, len = gCols.length; i < len; i++) if (index = this.getSortedColsIndexByField(gCols[i], sortedCols), 
                this.columnName === gCols[i]) flag = !0, sortedCols.push(sortedColumn); else {
                    var sCol = this.getSortColumnFromField(gCols[i]);
                    sortedCols.push({
                        field: sCol.field,
                        direction: sCol.direction
                    });
                }
                flag || sortedCols.push(sortedColumn), this.sortSettings.columns = sortedCols;
            } else this.sortSettings.columns = [ sortedColumn ];
            this.parent.dataBind(), this.lastSortedCol = this.columnName;
        }, Sort.prototype.onActionComplete = function(e) {
            var args = this.isRemove ? {
                requestType: "sorting",
                type: actionComplete
            } : {
                columnName: this.columnName,
                direction: this.direction,
                requestType: "sorting",
                type: actionComplete
            };
            this.isRemove = !1, this.parent.trigger(actionComplete, extend(e, args));
        }, Sort.prototype.sortColumn = function(columnName, direction, isMultiSort) {
            var gObj = this.parent;
            if (!1 !== this.parent.getColumnByField(columnName).allowSorting && !this.parent.isContextMenuOpen()) if (gObj.allowMultiSorting || (isMultiSort = gObj.allowMultiSorting), 
            this.isActionPrevent()) gObj.notify(preventBatch, {
                instance: this,
                handler: this.sortColumn,
                arg1: columnName,
                arg2: direction,
                arg3: isMultiSort
            }); else {
                this.backupSettings(), this.columnName = columnName, this.direction = direction, 
                this.isMultiSort = isMultiSort, this.removeSortIcons();
                gObj.getColumnHeaderByField(columnName);
                this.updateSortedCols(columnName, isMultiSort), this.updateModel();
            }
        }, Sort.prototype.backupSettings = function() {
            this.lastSortedCols = iterateExtend(this.sortSettings.columns), this.lastCols = this.sortedColumns;
        }, Sort.prototype.restoreSettings = function() {
            this.isModelChanged = !1, this.isMultiSort = !0, this.parent.setProperties({
                sortSettings: {
                    columns: this.lastSortedCols
                }
            }, !0), this.sortedColumns = this.lastCols, this.isModelChanged = !0;
        }, Sort.prototype.updateSortedCols = function(columnName, isMultiSort) {
            if (!isMultiSort) if (this.parent.allowGrouping) for (var i = 0, len = this.sortedColumns.length; i < len; i++) this.parent.groupSettings.columns.indexOf(this.sortedColumns[i]) < 0 && (this.sortedColumns.splice(i, 1), 
            len--, i--); else this.sortedColumns.splice(0, this.sortedColumns.length);
            this.sortedColumns.indexOf(columnName) < 0 && this.sortedColumns.push(columnName);
        }, Sort.prototype.onPropertyChanged = function(e) {
            if (e.module === this.getModuleName()) {
                if (this.contentRefresh) {
                    var args = this.sortSettings.columns.length ? {
                        columnName: this.columnName,
                        direction: this.direction,
                        requestType: "sorting",
                        type: actionBegin
                    } : {
                        requestType: "sorting",
                        type: actionBegin,
                        cancel: !1
                    };
                    this.parent.notify(modelChanged, args);
                }
                this.refreshSortSettings(), this.removeSortIcons(), this.addSortIcons();
            }
        }, Sort.prototype.refreshSortSettings = function() {
            var _this = this;
            this.sortedColumns = [], this.sortSettings.columns.forEach(function(e) {
                _this.sortedColumns.push(e.field);
            });
        }, Sort.prototype.clearSorting = function() {
            var cols = getActualPropFromColl(this.sortSettings.columns);
            if (this.isActionPrevent()) this.parent.notify(preventBatch, {
                instance: this,
                handler: this.clearSorting
            }); else for (var i = 0, len = cols.length; i < len; i++) this.removeSortColumn(cols[i].field);
        }, Sort.prototype.isActionPrevent = function() {
            return isActionPrevent(this.parent);
        }, Sort.prototype.removeSortColumn = function(field) {
            var gObj = this.parent, cols = this.sortSettings.columns;
            if (!(this.sortedColumns.indexOf(field) < 0)) if (this.isActionPrevent()) this.parent.notify(preventBatch, {
                instance: this,
                handler: this.removeSortColumn,
                arg1: field
            }); else {
                this.backupSettings(), this.removeSortIcons();
                for (var i = 0, len = cols.length; i < len; i++) if (cols[i].field === field) {
                    if (gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[i].field) > -1) continue;
                    this.sortedColumns.splice(this.sortedColumns.indexOf(cols[i].field), 1), cols.splice(i, 1), 
                    this.isRemove = !0, this.isModelChanged && this.parent.notify(modelChanged, {
                        requestType: "sorting",
                        type: actionBegin
                    });
                    break;
                }
                this.addSortIcons();
            }
        }, Sort.prototype.getSortedColsIndexByField = function(field, sortedColumns) {
            for (var cols = sortedColumns || this.sortSettings.columns, i = 0, len = cols.length; i < len; i++) if (cols[i].field === field) return i;
            return -1;
        }, Sort.prototype.getModuleName = function() {
            return "sort";
        }, Sort.prototype.initialEnd = function() {
            if (this.parent.off(contentReady, this.initialEnd), this.parent.getColumns().length && this.sortSettings.columns.length) {
                var gObj = this.parent;
                this.contentRefresh = !1, this.isMultiSort = this.sortSettings.columns.length > 1;
                for (var _i = 0, _a = gObj.sortSettings.columns.slice(); _i < _a.length; _i++) {
                    var col = _a[_i];
                    this.sortedColumns.indexOf(col.field) > -1 && this.sortColumn(col.field, col.direction, !0);
                }
                this.isMultiSort = !1, this.contentRefresh = !0;
            }
        }, Sort.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(contentReady, this.initialEnd, this), 
            this.parent.on("sorting-complete", this.onActionComplete, this), this.parent.on(inBoundModelChanged, this.onPropertyChanged, this), 
            this.parent.on(click, this.clickHandler, this), this.parent.on(headerRefreshed, this.refreshSortIcons, this), 
            this.parent.on(keyPressed, this.keyPressed, this), this.parent.on("cancel-Begin", this.cancelBeginEvent, this));
        }, Sort.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off("sorting-complete", this.onActionComplete), 
            this.parent.off(inBoundModelChanged, this.onPropertyChanged), this.parent.off(click, this.clickHandler), 
            this.parent.off(headerRefreshed, this.refreshSortIcons), this.parent.off(keyPressed, this.keyPressed), 
            this.parent.off("cancel-Begin", this.cancelBeginEvent));
        }, Sort.prototype.destroy = function() {
            this.isModelChanged = !1;
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.parent.element.querySelector(".e-gridpopup").querySelectorAll(".e-sortdirect").length && (this.parent.element.querySelector(".e-gridpopup").style.display = "none"), 
            this.clearSorting(), this.isModelChanged = !0, this.removeEventListener());
        }, Sort.prototype.cancelBeginEvent = function(e) {
            "sorting" === e.requestType && (this.restoreSettings(), this.refreshSortIcons(), 
            this.isMultiSort = !0);
        }, Sort.prototype.clickHandler = function(e) {
            this.popUpClickHandler(e);
            var target = closest(e.target, ".e-headercell");
            if (target && !e.target.classList.contains("e-grptogglebtn") && !e.target.classList.contains("e-stackedheadercell") && !e.target.classList.contains("e-stackedheadercelldiv") && !target.classList.contains("e-resized") && !e.target.classList.contains("e-rhandler") && !e.target.classList.contains("e-columnmenu") && !e.target.classList.contains("e-filtermenudiv")) {
                var colObj = this.parent.getColumnByUid(target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
                target.querySelectorAll(".e-ascending").length;
                "checkbox" !== colObj.type && (this.initiateSort(target, e, colObj), Browser.isDevice && this.showPopUp(e));
            }
            target && target.classList.remove("e-resized");
        }, Sort.prototype.keyPressed = function(e) {
            var ele = e.target;
            if (!this.parent.isEdit && ("enter" === e.action || "ctrlEnter" === e.action || "shiftEnter" === e.action) && closest(ele, ".e-headercell")) {
                var target = this.focus.getFocusedElement();
                if (isNullOrUndefined(target) || !target.classList.contains("e-headercell") || !target.querySelector(".e-headercelldiv")) return;
                var col = this.parent.getColumnByUid(target.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"));
                this.initiateSort(target, e, col);
            }
        }, Sort.prototype.initiateSort = function(target, e, column) {
            var gObj = this.parent, field = column.field, direction = target.querySelectorAll(".e-ascending").length ? "Descending" : "Ascending";
            e.shiftKey || this.sortSettings.allowUnsort && target.querySelectorAll(".e-descending").length && !(gObj.groupSettings.columns.indexOf(field) > -1) ? this.removeSortColumn(field) : this.sortColumn(field, direction, e.ctrlKey || this.enableSortMultiTouch);
        }, Sort.prototype.showPopUp = function(e) {
            isNullOrUndefined(closest(e.target, ".e-headercell")) && !this.parent.isContextMenuOpen() || setCssInGridPopUp(this.parent.element.querySelector(".e-gridpopup"), e, "e-sortdirect e-icons e-icon-sortdirect" + (this.sortedColumns.length > 1 ? " e-spanclicked" : ""));
        }, Sort.prototype.popUpClickHandler = function(e) {
            var target = e.target;
            closest(target, ".e-headercell") || e.target.classList.contains("e-rowcell") || closest(target, ".e-gridpopup") ? target.classList.contains("e-sortdirect") && (target.classList.contains("e-spanclicked") ? (target.classList.remove("e-spanclicked"), 
            this.enableSortMultiTouch = !1, this.parent.element.querySelector(".e-gridpopup").style.display = "none") : (target.classList.add("e-spanclicked"), 
            this.enableSortMultiTouch = !0)) : this.parent.element.querySelector(".e-gridpopup").style.display = "none";
        }, Sort.prototype.addSortIcons = function() {
            for (var header, filterElement, gObj = this.parent, cols = this.sortSettings.columns, fieldNames = this.parent.getColumns().map(function(c) {
                return c.field;
            }), i = 0, len = cols.length; i < len; i++) -1 !== fieldNames.indexOf(cols[i].field) && (header = gObj.getColumnHeaderByField(cols[i].field), 
            this.aria.setSort(header, cols[i].direction), this.isMultiSort && cols.length > 1 && header.querySelector(".e-headercelldiv").insertBefore(this.parent.createElement("span", {
                className: "e-sortnumber",
                innerHTML: (i + 1).toString()
            }), header.querySelector(".e-headertext")), filterElement = header.querySelector(".e-sortfilterdiv"), 
            "Ascending" === cols[i].direction ? classList(filterElement, [ "e-ascending", "e-icon-ascending" ], []) : classList(filterElement, [ "e-descending", "e-icon-descending" ], []));
        }, Sort.prototype.removeSortIcons = function(position) {
            for (var header, gObj = this.parent, cols = this.sortSettings.columns, fieldNames = this.parent.getColumns().map(function(c) {
                return c.field;
            }), i = position || 0, len = isNullOrUndefined(position) ? cols.length : position + 1; i < len; i++) header = gObj.getColumnHeaderByField(cols[i].field), 
            gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[i].field) > -1 && (isNullOrUndefined(header) || !header.querySelector(".e-sortfilterdiv")) || -1 !== fieldNames.indexOf(cols[i].field) && (this.aria.setSort(header, "none"), 
            classList(header.querySelector(".e-sortfilterdiv"), [], [ "e-descending", "e-icon-descending", "e-ascending", "e-icon-ascending" ]), 
            header.querySelector(".e-sortnumber") && header.querySelector(".e-headercelldiv").removeChild(header.querySelector(".e-sortnumber")));
        }, Sort.prototype.getSortColumnFromField = function(field) {
            for (var i = 0, len = this.sortSettings.columns.length; i < len; i++) if (this.sortSettings.columns[i].field === field) return this.sortSettings.columns[i];
            return !1;
        }, Sort.prototype.updateAriaAttr = function() {
            for (var fieldNames = this.parent.getColumns().map(function(c) {
                return c.field;
            }), _i = 0, _a = this.sortedColumns; _i < _a.length; _i++) {
                var col = _a[_i];
                if (-1 !== fieldNames.indexOf(col)) {
                    var header = this.parent.getColumnHeaderByField(col);
                    this.aria.setSort(header, this.getSortColumnFromField(col).direction);
                }
            }
        }, Sort.prototype.refreshSortIcons = function(params) {
            void 0 === params && (params = {
                args: {
                    isFrozen: !1
                }
            }), params.args.isFrozen || (this.removeSortIcons(), this.isMultiSort = !0, this.removeSortIcons(), 
            this.addSortIcons(), this.isMultiSort = !1, this.updateAriaAttr());
        }, Sort;
    }(), NumericContainer = function() {
        function NumericContainer(pagerModule) {
            this.pagerModule = pagerModule;
        }
        return NumericContainer.prototype.render = function() {
            this.pagerElement = this.pagerModule.element, this.renderNumericContainer(), this.refreshNumericLinks(), 
            this.wireEvents();
        }, NumericContainer.prototype.refresh = function() {
            this.pagerModule.updateTotalPages(), this.links.length && this.updateLinksHtml(), 
            this.updateStyles();
        }, NumericContainer.prototype.refreshNumericLinks = function() {
            var link, pagerObj = this.pagerModule, div = pagerObj.element.querySelector(".e-numericcontainer"), frag = document.createDocumentFragment();
            div.innerHTML = "";
            for (var i = 1; i <= pagerObj.pageCount; i++) link = createElement("a", {
                className: "e-link e-numericitem e-spacing e-pager-default",
                attrs: {
                    role: "link",
                    tabindex: "-1",
                    "aria-label": "Goto Page " + i,
                    href: "javascript:void(0);",
                    name: "Goto page" + i
                }
            }), pagerObj.currentPage === i && classList(link, [ "e-currentitem", "e-active" ], [ "e-pager-default" ]), 
            frag.appendChild(link);
            div.appendChild(frag), this.links = [].slice.call(div.childNodes);
        }, NumericContainer.prototype.wireEvents = function() {
            EventHandler.add(this.pagerElement, "click", this.clickHandler, this);
        }, NumericContainer.prototype.unwireEvents = function() {
            EventHandler.remove(this.pagerElement, "click", this.clickHandler);
        }, NumericContainer.prototype.destroy = function() {
            this.unwireEvents();
        }, NumericContainer.prototype.renderNumericContainer = function() {
            this.element = createElement("div", {
                className: "e-pagercontainer",
                attrs: {
                    role: "navigation"
                }
            }), this.renderFirstNPrev(this.element), this.renderPrevPagerSet(this.element), 
            this.element.appendChild(createElement("div", {
                className: "e-numericcontainer"
            })), this.renderNextPagerSet(this.element), this.renderNextNLast(this.element), 
            this.pagerModule.element.appendChild(this.element);
        }, NumericContainer.prototype.renderFirstNPrev = function(pagerContainer) {
            this.first = createElement("div", {
                className: "e-first e-icons e-icon-first",
                attrs: {
                    title: this.pagerModule.getLocalizedLabel("firstPageTooltip"),
                    "aria-label": this.pagerModule.getLocalizedLabel("firstPageTooltip"),
                    tabindex: "-1"
                }
            }), this.prev = createElement("div", {
                className: "e-prev e-icons e-icon-prev",
                attrs: {
                    title: this.pagerModule.getLocalizedLabel("previousPageTooltip"),
                    "aria-label": this.pagerModule.getLocalizedLabel("previousPageTooltip"),
                    tabindex: "-1"
                }
            }), append([ this.first, this.prev ], pagerContainer);
        }, NumericContainer.prototype.renderPrevPagerSet = function(pagerContainer) {
            var prevPager = createElement("div");
            this.PP = createElement("a", {
                className: "e-link e-pp e-spacing",
                innerHTML: "...",
                attrs: {
                    title: this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
                    role: "link",
                    "aria-label": this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
                    tabindex: "-1",
                    name: this.pagerModule.getLocalizedLabel("previousPagerTooltip"),
                    href: "javascript:void(0);"
                }
            }), prevPager.appendChild(this.PP), pagerContainer.appendChild(prevPager);
        }, NumericContainer.prototype.renderNextPagerSet = function(pagerContainer) {
            var nextPager = createElement("div");
            this.NP = createElement("a", {
                className: "e-link e-np e-spacing",
                innerHTML: "...",
                attrs: {
                    title: this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
                    role: "link",
                    "aria-label": this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
                    tabindex: "-1",
                    name: this.pagerModule.getLocalizedLabel("nextPagerTooltip"),
                    href: "javascript:void(0);"
                }
            }), nextPager.appendChild(this.NP), pagerContainer.appendChild(nextPager);
        }, NumericContainer.prototype.renderNextNLast = function(pagerContainer) {
            this.next = createElement("div", {
                className: "e-next e-icons e-icon-next",
                attrs: {
                    title: this.pagerModule.getLocalizedLabel("nextPageTooltip"),
                    "aria-label": this.pagerModule.getLocalizedLabel("nextPageTooltip"),
                    tabindex: "-1"
                }
            }), this.last = createElement("div", {
                className: "e-last e-icons e-icon-last",
                attrs: {
                    title: this.pagerModule.getLocalizedLabel("lastPageTooltip"),
                    "aria-label": this.pagerModule.getLocalizedLabel("lastPageTooltip"),
                    tabindex: "-1"
                }
            }), append([ this.next, this.last ], pagerContainer);
        }, NumericContainer.prototype.clickHandler = function(e) {
            var pagerObj = this.pagerModule, target = e.target;
            return pagerObj.previousPageNo = pagerObj.currentPage, target.classList.contains("e-disable") || isNullOrUndefined(target.getAttribute("index")) || (pagerObj.currentPage = parseInt(target.getAttribute("index"), 10), 
            pagerObj.dataBind()), !1;
        }, NumericContainer.prototype.updateLinksHtml = function() {
            var currentPageSet, pageNo, pagerObj = this.pagerModule;
            pagerObj.currentPage = 1 === pagerObj.totalPages ? 1 : pagerObj.currentPage, pagerObj.currentPage > pagerObj.totalPages && pagerObj.totalPages && (pagerObj.currentPage = pagerObj.totalPages), 
            currentPageSet = parseInt((pagerObj.currentPage / pagerObj.pageCount).toString(), 10), 
            pagerObj.currentPage % pagerObj.pageCount == 0 && currentPageSet > 0 && (currentPageSet -= 1);
            for (var i = 0; i < pagerObj.pageCount; i++) (pageNo = currentPageSet * pagerObj.pageCount + 1 + i) <= pagerObj.totalPages ? (this.links[i].style.display = "", 
            this.links[i].setAttribute("index", pageNo.toString()), this.links[i].innerHTML = pagerObj.customText ? pagerObj.customText + pageNo : pageNo.toString(), 
            pagerObj.currentPage !== pageNo ? this.links[i].classList.add("e-pager-default") : this.links[i].classList.remove("e-pager-default")) : (this.links[i].innerHTML = pagerObj.customText ? pagerObj.customText + pageNo : pageNo.toString(), 
            this.links[i].style.display = "none"), classList(this.links[i], [], [ "e-currentitem", "e-active" ]);
            this.first.setAttribute("index", "1"), this.last.setAttribute("index", pagerObj.totalPages.toString()), 
            this.prev.setAttribute("index", (pagerObj.currentPage - 1).toString()), this.next.setAttribute("index", (pagerObj.currentPage + 1).toString()), 
            this.pagerElement.querySelector(".e-mfirst").setAttribute("index", "1"), this.pagerElement.querySelector(".e-mlast").setAttribute("index", pagerObj.totalPages.toString()), 
            this.pagerElement.querySelector(".e-mprev").setAttribute("index", (pagerObj.currentPage - 1).toString()), 
            this.pagerElement.querySelector(".e-mnext").setAttribute("index", (pagerObj.currentPage + 1).toString()), 
            this.PP.setAttribute("index", (parseInt(this.links[0].getAttribute("index"), 10) - pagerObj.pageCount).toString()), 
            this.NP.setAttribute("index", (parseInt(this.links[this.links.length - 1].getAttribute("index"), 10) + 1).toString());
        }, NumericContainer.prototype.updateStyles = function() {
            this.updateFirstNPrevStyles(), this.updatePrevPagerSetStyles(), this.updateNextPagerSetStyles(), 
            this.updateNextNLastStyles(), this.links.length && classList(this.links[(this.pagerModule.currentPage - 1) % this.pagerModule.pageCount], [ "e-currentitem", "e-active" ], []);
        }, NumericContainer.prototype.updateFirstNPrevStyles = function() {
            var firstPage = [ "e-firstpage", "e-pager-default" ], firstPageDisabled = [ "e-firstpagedisabled", "e-disable" ], prevPage = [ "e-prevpage", "e-pager-default" ], prevPageDisabled = [ "e-prevpagedisabled", "e-disable" ];
            this.pagerModule.totalPages > 0 && this.pagerModule.currentPage > 1 ? (classList(this.prev, prevPage, prevPageDisabled), 
            classList(this.first, firstPage, firstPageDisabled), classList(this.pagerElement.querySelector(".e-mfirst"), firstPage, firstPageDisabled), 
            classList(this.pagerElement.querySelector(".e-mprev"), prevPage, prevPageDisabled)) : (classList(this.prev, prevPageDisabled, prevPage), 
            classList(this.first, firstPageDisabled, firstPage), classList(this.pagerElement.querySelector(".e-mprev"), prevPageDisabled, prevPage), 
            classList(this.pagerElement.querySelector(".e-mfirst"), firstPageDisabled, firstPage));
        }, NumericContainer.prototype.updatePrevPagerSetStyles = function() {
            this.pagerModule.currentPage > this.pagerModule.pageCount ? classList(this.PP, [ "e-numericitem", "e-pager-default" ], [ "e-nextprevitemdisabled", "e-disable" ]) : classList(this.PP, [ "e-nextprevitemdisabled", "e-disable" ], [ "e-numericitem", "e-pager-default" ]);
        }, NumericContainer.prototype.updateNextPagerSetStyles = function() {
            var pagerObj = this.pagerModule, firstPage = this.links[0].innerHTML.replace(pagerObj.customText, "");
            !firstPage.length || !this.links.length || parseInt(firstPage, 10) + pagerObj.pageCount > pagerObj.totalPages ? classList(this.NP, [ "e-nextprevitemdisabled", "e-disable" ], [ "e-numericitem", "e-pager-default" ]) : classList(this.NP, [ "e-numericitem", "e-pager-default" ], [ "e-nextprevitemdisabled", "e-disable" ]);
        }, NumericContainer.prototype.updateNextNLastStyles = function() {
            var lastPage = [ "e-lastpage", "e-pager-default" ], lastPageDisabled = [ "e-lastpagedisabled", "e-disable" ], nextPage = [ "e-nextpage", "e-pager-default" ], nextPageDisabled = [ "e-nextpagedisabled", "e-disable" ], pagerObj = this.pagerModule;
            pagerObj.currentPage === pagerObj.totalPages || 0 === pagerObj.totalRecordsCount ? (classList(this.last, lastPageDisabled, lastPage), 
            classList(this.next, nextPageDisabled, nextPage), classList(this.pagerElement.querySelector(".e-mlast"), lastPageDisabled, lastPage), 
            classList(this.pagerElement.querySelector(".e-mnext"), nextPageDisabled, nextPage)) : (classList(this.last, lastPage, lastPageDisabled), 
            classList(this.next, nextPage, nextPageDisabled), classList(this.pagerElement.querySelector(".e-mlast"), lastPage, lastPageDisabled), 
            classList(this.pagerElement.querySelector(".e-mnext"), nextPage, nextPageDisabled));
        }, NumericContainer;
    }(), PagerMessage = function() {
        function PagerMessage(pagerModule) {
            this.pagerModule = pagerModule;
        }
        return PagerMessage.prototype.render = function() {
            var div = createElement("div", {
                className: "e-parentmsgbar",
                attrs: {
                    "aria-label": "Pager Information"
                }
            });
            this.pageNoMsgElem = createElement("span", {
                className: "e-pagenomsg",
                styles: "textalign:right"
            }), this.pageCountMsgElem = createElement("span", {
                className: "e-pagecountmsg",
                styles: "textalign:right"
            }), append([ this.pageNoMsgElem, this.pageCountMsgElem ], div), this.pagerModule.element.appendChild(div), 
            this.refresh();
        }, PagerMessage.prototype.refresh = function() {
            var pagerObj = this.pagerModule;
            this.pageNoMsgElem.textContent = this.format(pagerObj.getLocalizedLabel("currentPageInfo"), [ 0 === pagerObj.totalRecordsCount ? 0 : pagerObj.currentPage, pagerObj.totalPages || 0 ]) + " ", 
            this.pageCountMsgElem.textContent = this.format(pagerObj.getLocalizedLabel("totalItemsInfo"), [ pagerObj.totalRecordsCount || 0 ]), 
            this.pageNoMsgElem.parentElement.setAttribute("aria-label", this.pageNoMsgElem.textContent + this.pageCountMsgElem.textContent);
        }, PagerMessage.prototype.hideMessage = function() {
            this.pageNoMsgElem && (this.pageNoMsgElem.style.display = "none"), this.pageCountMsgElem && (this.pageCountMsgElem.style.display = "none");
        }, PagerMessage.prototype.showMessage = function() {
            this.pageNoMsgElem || this.render(), this.pageNoMsgElem.style.display = "", this.pageCountMsgElem.style.display = "";
        }, PagerMessage.prototype.destroy = function() {}, PagerMessage.prototype.format = function(str, args) {
            for (var regx, i = 0; i < args.length; i++) regx = new RegExp("\\{" + i + "\\}", "gm"), 
            str = str.replace(regx, args[i].toString());
            return str;
        }, PagerMessage;
    }(), __extends$39 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$27 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, Pager = function(_super) {
        function Pager(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.defaultConstants = {
                currentPageInfo: "{0} of {1} pages",
                totalItemsInfo: "({0} items)",
                firstPageTooltip: "Go to first page",
                lastPageTooltip: "Go to last page",
                nextPageTooltip: "Go to next page",
                previousPageTooltip: "Go to previous page",
                nextPagerTooltip: "Go to next pager",
                previousPagerTooltip: "Go to previous pager",
                pagerDropDown: "Items per page",
                pagerAllDropDown: "Items",
                All: "All"
            }, _this.containerModule = new NumericContainer(_this), _this.pagerMessageModule = new PagerMessage(_this), 
            _this;
        }
        return __extends$39(Pager, _super), Pager.prototype.requiredModules = function() {
            var modules = [];
            return this.enableExternalMessage && modules.push({
                member: "externalMessage",
                args: [ this ]
            }), this.checkpagesizes() && modules.push({
                member: "pagerdropdown",
                args: [ this ]
            }), modules;
        }, Pager.prototype.preRender = function() {}, Pager.prototype.render = function() {
            this.template ? this.pagerTemplate() : (this.initLocalization(), this.updateRTL(), 
            this.totalRecordsCount = this.totalRecordsCount || 0, this.renderFirstPrevDivForDevice(), 
            this.containerModule.render(), this.enablePagerMessage && this.pagerMessageModule.render(), 
            this.renderNextLastDivForDevice(), this.checkpagesizes() && this.pagerdropdownModule && this.pagerdropdownModule.render(), 
            this.addAriaLabel(), this.enableExternalMessage && this.externalMessageModule && this.externalMessageModule.render(), 
            this.refresh(), this.trigger("created", {
                currentPage: this.currentPage,
                totalRecordsCount: this.totalRecordsCount
            }));
        }, Pager.prototype.getPersistData = function() {
            return this.addOnPersist([ "currentPage", "pageSize" ]);
        }, Pager.prototype.destroy = function() {
            _super.prototype.destroy.call(this), this.containerModule.destroy(), this.pagerMessageModule.destroy(), 
            this.element.innerHTML = "";
        }, Pager.prototype.getModuleName = function() {
            return "pager";
        }, Pager.prototype.onPropertyChanged = function(newProp, oldProp) {
            if (!this.isDestroyed) {
                newProp.pageCount !== oldProp.pageCount && (this.containerModule.refreshNumericLinks(), 
                this.containerModule.refresh());
                for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                    switch (_a[_i]) {
                      case "currentPage":
                        this.checkGoToPage(newProp.currentPage, oldProp.currentPage) && this.currentPageChanged();
                        break;

                      case "pageSize":
                      case "totalRecordsCount":
                      case "customText":
                        this.checkpagesizes() && this.pagerdropdownModule && this.pagerdropdownModule.setDropDownValue("value", this.pageSize), 
                        this.refresh();
                        break;

                      case "pageSizes":
                        this.checkpagesizes() && (this.pagerdropdownModule.destroy(), this.pagerdropdownModule.render()), 
                        this.refresh();
                        break;

                      case "template":
                        this.templateFn = this.compile(this.template), this.refresh();
                        break;

                      case "locale":
                        this.initLocalization(), this.refresh();
                        break;

                      case "enableExternalMessage":
                        this.enableExternalMessage && this.externalMessageModule && this.externalMessageModule.render();
                        break;

                      case "externalMessage":
                        this.externalMessageModule && this.externalMessageModule.refresh();
                        break;

                      case "enableRtl":
                        this.updateRTL();
                        break;

                      case "enablePagerMessage":
                        this.enablePagerMessage ? this.pagerMessageModule.showMessage() : this.pagerMessageModule.hideMessage();
                    }
                }
            }
        }, Pager.prototype.getLocalizedLabel = function(key) {
            return this.localeObj.getConstant(key);
        }, Pager.prototype.goToPage = function(pageNo) {
            this.checkGoToPage(pageNo) && (this.currentPage = pageNo, this.dataBind());
        }, Pager.prototype.checkpagesizes = function() {
            return !(!0 !== this.pageSizes && !this.pageSizes.length);
        }, Pager.prototype.checkGoToPage = function(newPageNo, oldPageNo) {
            return newPageNo !== this.currentPage && (this.previousPageNo = this.currentPage), 
            isNullOrUndefined(oldPageNo) || (this.previousPageNo = oldPageNo), this.previousPageNo !== newPageNo && newPageNo >= 1 && newPageNo <= this.totalPages;
        }, Pager.prototype.currentPageChanged = function() {
            this.enableQueryString && this.updateQueryString(this.currentPage);
            var args = {
                currentPage: this.currentPage,
                cancel: !1
            };
            this.trigger("click", args), args.cancel || this.refresh();
        }, Pager.prototype.pagerTemplate = function() {
            var result;
            this.element.classList.add("e-pagertemplate"), this.compile(this.template);
            var data = {
                currentPage: this.currentPage,
                pageSize: this.pageSize,
                pageCount: this.pageCount,
                totalRecordsCount: this.totalRecordsCount,
                totalPages: this.totalPages
            };
            result = this.getPagerTemplate()(data), appendChildren(this.element, result);
        }, Pager.prototype.updateTotalPages = function() {
            this.totalPages = this.totalRecordsCount % this.pageSize == 0 ? this.totalRecordsCount / this.pageSize : parseInt((this.totalRecordsCount / this.pageSize).toString(), 10) + 1;
        }, Pager.prototype.getPagerTemplate = function() {
            return this.templateFn;
        }, Pager.prototype.compile = function(template) {
            if (template) try {
                document.querySelectorAll(template).length && (this.templateFn = compile$$1(document.querySelector(template).innerHTML.trim()));
            } catch (e) {
                this.templateFn = compile$$1(template);
            }
        }, Pager.prototype.refresh = function() {
            this.template ? (this.element.innerHTML = "", this.updateTotalPages(), this.pagerTemplate()) : (this.updateRTL(), 
            this.containerModule.refresh(), this.enablePagerMessage && this.pagerMessageModule.refresh(), 
            this.enableExternalMessage && this.externalMessageModule && this.externalMessageModule.refresh());
        }, Pager.prototype.updateRTL = function() {
            this.enableRtl ? this.element.classList.add("e-rtl") : this.element.classList.remove("e-rtl");
        }, Pager.prototype.initLocalization = function() {
            this.localeObj = new L10n(this.getModuleName(), this.defaultConstants, this.locale);
        }, Pager.prototype.updateQueryString = function(value) {
            var updatedUrl = this.getUpdatedURL(window.location.href, "page", value.toString());
            window.history.pushState({
                path: updatedUrl
            }, "", updatedUrl);
        }, Pager.prototype.getUpdatedURL = function(uri, key, value) {
            var regx = new RegExp("([?|&])" + key + "=.*?(&|#|$)", "i");
            if (uri.match(regx)) return uri.replace(regx, "$1" + key + "=" + value + "$2");
            var hash = "";
            return -1 !== uri.indexOf("#") && (hash = uri.replace(/.*#/, "#"), uri = uri.replace(/#.*/, "")), 
            uri + (-1 !== uri.indexOf("?") ? "&" : "?") + key + "=" + value + hash;
        }, Pager.prototype.renderFirstPrevDivForDevice = function() {
            this.element.appendChild(createElement("div", {
                className: "e-mfirst e-icons e-icon-first",
                attrs: {
                    title: this.getLocalizedLabel("firstPageTooltip"),
                    tabindex: "-1"
                }
            })), this.element.appendChild(createElement("div", {
                className: "e-mprev e-icons e-icon-prev",
                attrs: {
                    title: this.getLocalizedLabel("previousPageTooltip"),
                    tabindex: "-1"
                }
            }));
        }, Pager.prototype.renderNextLastDivForDevice = function() {
            this.element.appendChild(createElement("div", {
                className: "e-mnext e-icons e-icon-next",
                attrs: {
                    title: this.getLocalizedLabel("nextPageTooltip"),
                    tabindex: "-1"
                }
            })), this.element.appendChild(createElement("div", {
                className: "e-mlast e-icons e-icon-last",
                attrs: {
                    title: this.getLocalizedLabel("lastPageTooltip"),
                    tabindex: "-1"
                }
            }));
        }, Pager.prototype.addAriaLabel = function() {
            var _this = this;
            Browser.isDevice || [ ".e-mfirst", ".e-mprev", ".e-mnext", ".e-mlast" ].forEach(function(value) {
                var element = _this.element.querySelector(value);
                element.setAttribute("aria-label", element.getAttribute("title"));
            });
        }, __decorate$27([ Property(!1) ], Pager.prototype, "enableQueryString", void 0), 
        __decorate$27([ Property(!1) ], Pager.prototype, "enableExternalMessage", void 0), 
        __decorate$27([ Property(!0) ], Pager.prototype, "enablePagerMessage", void 0), 
        __decorate$27([ Property(12) ], Pager.prototype, "pageSize", void 0), __decorate$27([ Property(10) ], Pager.prototype, "pageCount", void 0), 
        __decorate$27([ Property(1) ], Pager.prototype, "currentPage", void 0), __decorate$27([ Property() ], Pager.prototype, "totalRecordsCount", void 0), 
        __decorate$27([ Property() ], Pager.prototype, "externalMessage", void 0), __decorate$27([ Property(!1) ], Pager.prototype, "pageSizes", void 0), 
        __decorate$27([ Property() ], Pager.prototype, "template", void 0), __decorate$27([ Property("") ], Pager.prototype, "customText", void 0), 
        __decorate$27([ Event() ], Pager.prototype, "click", void 0), __decorate$27([ Event() ], Pager.prototype, "dropDownChanged", void 0), 
        __decorate$27([ Event() ], Pager.prototype, "created", void 0), Pager = __decorate$27([ NotifyPropertyChanges ], Pager);
    }(Component), queryString = "", prevString = "", matches$1 = [], activeClass = "e-active", cssClass = {
        li: "e-list-item",
        ul: "e-list-parent e-ul",
        group: "e-list-group-item",
        icon: "e-list-icon",
        text: "e-list-text",
        check: "e-list-check",
        checked: "e-checked",
        selected: "e-selected",
        expanded: "e-expanded",
        textContent: "e-text-content",
        hasChild: "e-has-child",
        level: "e-level",
        url: "e-list-url",
        collapsible: "e-icon-collapsible",
        disabled: "e-disabled",
        image: "e-list-img",
        iconWrapper: "e-icon-wrapper"
    };
    !function(ListBase) {
        function createListFromArray(createElement, dataSource, isSingleLevel, options) {
            return generateUL(createElement, createListItemFromArray(createElement, dataSource, isSingleLevel, options), null, options);
        }
        function createListItemFromArray(createElement, dataSource, isSingleLevel, options) {
            var subChild = [], curOpt = extend({}, defaultListBaseOptions, options);
            cssClass = getModuleClass(curOpt.moduleName);
            for (var id = generateId(), i = 0; i < dataSource.length; i++) if (!isNullOrUndefined(dataSource[i])) {
                var li = void 0;
                if (curOpt.itemCreating && "function" == typeof curOpt.itemCreating) {
                    var curData = {
                        dataSource: dataSource,
                        curData: dataSource[i],
                        text: dataSource[i],
                        options: curOpt
                    };
                    curOpt.itemCreating(curData);
                }
                if (li = isSingleLevel ? generateSingleLevelLI(createElement, dataSource[i], void 0, null, null, [], null, id, i, options) : generateLI(createElement, dataSource[i], void 0, null, null, options), 
                curOpt.itemCreated && "function" == typeof curOpt.itemCreated) {
                    curData = {
                        dataSource: dataSource,
                        curData: dataSource[i],
                        text: dataSource[i],
                        item: li,
                        options: curOpt
                    };
                    curOpt.itemCreated(curData);
                }
                subChild.push(li);
            }
            return subChild;
        }
        function createListItemFromJson(createElement, dataSource, options, level, isSingleLevel) {
            var curOpt = extend({}, defaultListBaseOptions, options);
            cssClass = getModuleClass(curOpt.moduleName);
            var id, fields = extend({}, ListBase.defaultMappedFields, curOpt.fields), ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
            level && (ariaAttributes.level = level);
            var li, child = [];
            dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) && !typeofData(dataSource).item.hasOwnProperty(fields.id) && (id = generateId());
            for (var i = 0; i < dataSource.length; i++) {
                var fieldData = getFieldValues(dataSource[i], fields);
                if (!isNullOrUndefined(dataSource[i])) {
                    if (curOpt.itemCreating && "function" == typeof curOpt.itemCreating) {
                        var curData = {
                            dataSource: dataSource,
                            curData: dataSource[i],
                            text: fieldData[fields.text],
                            options: curOpt,
                            fields: fields
                        };
                        curOpt.itemCreating(curData);
                    }
                    var curItem = dataSource[i];
                    curOpt.itemCreating && "function" == typeof curOpt.itemCreating && (fieldData = getFieldValues(dataSource[i], fields)), 
                    fieldData.hasOwnProperty(fields.id) && !isNullOrUndefined(fieldData[fields.id]) && (id = fieldData.id);
                    var innerEle = [];
                    if (curOpt.showCheckBox && innerEle.push(createElement("input", {
                        className: cssClass.check,
                        attrs: {
                            type: "checkbox"
                        }
                    })), !0 === isSingleLevel) curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss]) && innerEle.push(createElement("span", {
                        className: cssClass.icon + " " + fieldData[fields.iconCss]
                    })), li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, !(!curItem.hasOwnProperty("isHeader") || !curItem.isHeader), id, i, options); else {
                        if ((li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options)).classList.add(cssClass.level + "-" + ariaAttributes.level), 
                        li.setAttribute("aria-level", ariaAttributes.level.toString()), fieldData.hasOwnProperty(fields.tooltip) && li.setAttribute("title", fieldData[fields.tooltip]), 
                        fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes] && setAttribute(li, fieldData[fields.htmlAttributes]), 
                        fieldData.hasOwnProperty(fields.enabled) && !1 === fieldData[fields.enabled] && li.classList.add(cssClass.disabled), 
                        fieldData.hasOwnProperty(fields.isVisible) && !1 === fieldData[fields.isVisible] && (li.style.display = "none"), 
                        fieldData.hasOwnProperty(fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl]) && !curOpt.template) {
                            var attr = {
                                src: fieldData[fields.imageUrl]
                            };
                            merge(attr, fieldData[fields.imageAttributes]), prepend([ createElement("img", {
                                className: cssClass.image,
                                attrs: attr
                            }) ], li.firstElementChild);
                        }
                        curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template && prepend([ createElement("div", {
                            className: cssClass.icon + " " + fieldData[fields.iconCss]
                        }) ], li.firstElementChild), innerEle.length && prepend(innerEle, li.firstElementChild), 
                        function(createElement, fieldData, fields, ds, options, element, level) {
                            var subDS = fieldData[fields.child] || [], hasChildren = fieldData[fields.hasChildren];
                            if (subDS.length && (hasChildren = !0, element.classList.add(cssClass.hasChild), 
                            options.processSubChild)) {
                                var subLi = createListFromJson(createElement, subDS, options, ++level);
                                element.appendChild(subLi);
                            }
                            if (options.expandCollapse && hasChildren && !options.template) {
                                element.firstElementChild.classList.add(cssClass.iconWrapper);
                                var expandElement = "Left" === options.expandIconPosition ? prepend : append;
                                expandElement([ createElement("div", {
                                    className: "e-icons " + options.expandIconClass
                                }) ], element.querySelector("." + cssClass.textContent));
                            }
                        }(createElement, fieldData, fields, 0, curOpt, li, ariaAttributes.level);
                    }
                    if (curOpt.itemCreated && "function" == typeof curOpt.itemCreated) {
                        curData = {
                            dataSource: dataSource,
                            curData: dataSource[i],
                            text: fieldData[fields.text],
                            item: li,
                            options: curOpt,
                            fields: fields
                        };
                        curOpt.itemCreated(curData);
                    }
                    child.push(li);
                }
            }
            return child;
        }
        function createListFromJson(createElement, dataSource, options, level, isSingleLevel) {
            var curOpt = extend({}, defaultListBaseOptions, options);
            return generateUL(createElement, createListItemFromJson(createElement, dataSource, options, level, isSingleLevel), curOpt.listClass, options);
        }
        function indexOf(item, elementArray) {
            if (elementArray && item) {
                return Array.prototype.slice.call(elementArray).indexOf(item);
            }
        }
        function addSorting(sortOrder, sortBy, query) {
            if (void 0 === query && (query = new Query()), "Ascending" === sortOrder) query.sortBy(sortBy, "ascending", !0); else if ("Descending" === sortOrder) query.sortBy(sortBy, "descending", !0); else for (var i = 0; i < query.queries.length; i++) "onSortBy" === query.queries[i].fn && query.queries.splice(i, 1);
            return query;
        }
        function getDataSource(dataSource, query) {
            return new DataManager(dataSource).executeLocal(query);
        }
        function createJsonFromElement(element, options) {
            var curOpt = extend({}, defaultListBaseOptions, options), fields = extend({}, ListBase.defaultMappedFields, curOpt.fields), curEle = element.cloneNode(!0), jsonAr = [];
            curEle.classList.add("json-parent");
            var childs = curEle.querySelectorAll(".json-parent>li");
            curEle.classList.remove("json-parent");
            for (var i = 0; i < childs.length; i++) {
                for (var li = childs[i], anchor = li.querySelector("a"), ul = li.querySelector("ul"), json = {}, childNodes = anchor ? anchor.childNodes : li.childNodes, keys = Object.keys(childNodes), i_1 = 0; i_1 < childNodes.length; i_1++) childNodes[Number(keys[i_1])].hasChildNodes() || (json[fields.text] = childNodes[Number(keys[i_1])].textContent);
                var attributes_1 = getAllAttributes(li);
                attributes_1.id ? (json[fields.id] = attributes_1.id, delete attributes_1.id) : json[fields.id] = generateId(), 
                Object.keys(attributes_1).length && (json[fields.htmlAttributes] = attributes_1), 
                anchor && (attributes_1 = getAllAttributes(anchor), Object.keys(attributes_1).length && (json[fields.urlAttributes] = attributes_1)), 
                ul && (json[fields.child] = createJsonFromElement(ul, options)), jsonAr.push(json);
            }
            return jsonAr;
        }
        function typeofData(data) {
            for (var match = {
                typeof: null,
                item: null
            }, i = 0; i < data.length; i++) if (!isNullOrUndefined(data[i])) return match = {
                typeof: typeof data[i],
                item: data[i]
            };
            return match;
        }
        function setAttribute(element, elementAttributes) {
            var attr = {};
            merge(attr, elementAttributes), attr.class && (addClass([ element ], attr.class.split(" ")), 
            delete attr.class), attributes(element, attr);
        }
        function getAllAttributes(element) {
            for (var attributes = {}, attr = element.attributes, index = 0; index < attr.length; index++) attributes[attr[index].nodeName] = attr[index].nodeValue;
            return attributes;
        }
        function generateId() {
            return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
        }
        function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {
            var dataSource, curOpt = extend({}, defaultListBaseOptions, options), ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes), text = item, value = item;
            "string" != typeof item && "number" != typeof item && "boolean" != typeof item && (dataSource = item, 
            text = "boolean" == typeof fieldData[fields.text] || "number" == typeof fieldData[fields.text] ? fieldData[fields.text] : fieldData[fields.text] || "", 
            value = fieldData[fields.value]);
            var elementID;
            elementID = isNullOrUndefined(dataSource) || isNullOrUndefined(fieldData[fields.id]) || "" === fieldData[fields.id] ? id + "-" + index : id;
            var li = createElement("li", {
                className: (!0 === grpLI ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
                id: elementID,
                attrs: "" !== ariaAttributes.groupItemRole && "" !== ariaAttributes.itemRole ? {
                    role: !0 === grpLI ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
                } : {}
            });
            return dataSource && fieldData.hasOwnProperty(fields.enabled) && "false" === fieldData[fields.enabled].toString() && li.classList.add(cssClass.disabled), 
            grpLI ? li.innerText = text : (isNullOrUndefined(value) || li.setAttribute("data-value", value), 
            li.setAttribute("role", "option"), dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes] && setAttribute(li, fieldData[fields.htmlAttributes]), 
            innerElements.length && append(innerElements, li), dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href) ? li.appendChild(anchorTag(createElement, dataSource, fields, text)) : li.appendChild(document.createTextNode(text))), 
            li;
        }
        function getModuleClass(moduleName) {
            return {
                li: "e-" + moduleName + "-item",
                ul: "e-" + moduleName + "-parent e-ul",
                group: "e-" + moduleName + "-group-item",
                icon: "e-" + moduleName + "-icon",
                text: "e-" + moduleName + "-text",
                check: "e-" + moduleName + "-check",
                checked: "e-checked",
                selected: "e-selected",
                expanded: "e-expanded",
                textContent: "e-text-content",
                hasChild: "e-has-child",
                level: "e-level",
                url: "e-" + moduleName + "-url",
                collapsible: "e-icon-collapsible",
                disabled: "e-disabled",
                image: "e-" + moduleName + "-img",
                iconWrapper: "e-icon-wrapper"
            };
        }
        function anchorTag(createElement, dataSource, fields, text) {
            var fieldData = getFieldValues(dataSource, fields), attr = {
                href: fieldData[fields.url]
            };
            fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes] && (merge(attr, fieldData[fields.urlAttributes]), 
            attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href);
            var anchorTag = createElement("a", {
                className: cssClass.text + " " + cssClass.url,
                innerHTML: text
            });
            return setAttribute(anchorTag, attr), anchorTag;
        }
        function generateLI(createElement, item, fieldData, fields, className, options) {
            var uID, grpLI, dataSource, curOpt = extend({}, defaultListBaseOptions, options), ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes), text = item;
            "string" != typeof item && "number" != typeof item && (dataSource = item, text = fieldData[fields.text] || "", 
            uID = fieldData[fields.id], grpLI = !(!item.hasOwnProperty("isHeader") || !item.isHeader));
            var li = createElement("li", {
                className: (!0 === grpLI ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
                attrs: "" !== ariaAttributes.groupItemRole && "" !== ariaAttributes.itemRole ? {
                    role: !0 === grpLI ? ariaAttributes.groupItemRole : ariaAttributes.itemRole
                } : {}
            });
            if (isNullOrUndefined(uID) ? li.setAttribute("data-uid", generateId()) : li.setAttribute("data-uid", uID), 
            grpLI && options && options.groupTemplate) {
                append(compile$$1(options.groupTemplate)(item), li);
            } else if (!grpLI && options && options.template) {
                append(compile$$1(options.template)(item), li);
            } else {
                var innerDiv = createElement("div", {
                    className: cssClass.textContent,
                    attrs: "" !== ariaAttributes.wrapperRole ? {
                        role: ariaAttributes.wrapperRole
                    } : {}
                });
                dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href) ? innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text)) : innerDiv.appendChild(createElement("span", {
                    className: cssClass.text,
                    innerHTML: text,
                    attrs: "" !== ariaAttributes.itemText ? {
                        role: ariaAttributes.itemText
                    } : {}
                })), li.appendChild(innerDiv);
            }
            return li;
        }
        function generateUL(createElement, liElement, className, options) {
            var curOpt = extend({}, defaultListBaseOptions, options), ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes), ulElement = createElement("ul", {
                className: (cssClass = getModuleClass(curOpt.moduleName)).ul + " " + (isNullOrUndefined(className) ? "" : className),
                attrs: "" !== ariaAttributes.listRole ? {
                    role: ariaAttributes.listRole
                } : {}
            });
            return append(liElement, ulElement), ulElement;
        }
        ListBase.defaultMappedFields = {
            id: "id",
            text: "text",
            url: "url",
            value: "value",
            isChecked: "isChecked",
            enabled: "enabled",
            expanded: "expanded",
            selected: "selected",
            iconCss: "iconCss",
            child: "child",
            isVisible: "isVisible",
            hasChildren: "hasChildren",
            tooltip: "tooltip",
            htmlAttributes: "htmlAttributes",
            urlAttributes: "urlAttributes",
            imageAttributes: "imageAttributes",
            imageUrl: "imageUrl",
            groupBy: null
        };
        var defaultAriaAttributes = {
            level: 1,
            listRole: "presentation",
            itemRole: "presentation",
            groupItemRole: "group",
            itemText: "list-item",
            wrapperRole: "presentation"
        }, defaultListBaseOptions = {
            showCheckBox: !1,
            showIcon: !1,
            expandCollapse: !1,
            fields: ListBase.defaultMappedFields,
            ariaAttributes: defaultAriaAttributes,
            listClass: "",
            itemClass: "",
            processSubChild: !1,
            sortOrder: "None",
            template: null,
            groupTemplate: null,
            headerTemplate: null,
            expandIconClass: "e-icon-collapsible",
            moduleName: "list",
            expandIconPosition: "Right"
        };
        ListBase.createList = function(createElement, dataSource, options, isSingleLevel) {
            var curOpt = extend({}, defaultListBaseOptions, options), ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes), type = typeofData(dataSource).typeof;
            return "string" === type || "number" === type ? createListFromArray(createElement, dataSource, isSingleLevel, options) : createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel);
        }, ListBase.createListFromArray = createListFromArray, ListBase.createListItemFromArray = createListItemFromArray, 
        ListBase.createListItemFromJson = createListItemFromJson, ListBase.createListFromJson = createListFromJson, 
        ListBase.getSiblingLI = function(elementArray, element, isPrevious) {
            if (cssClass = getModuleClass(defaultListBaseOptions.moduleName), elementArray && elementArray.length) {
                var siblingLI, liIndex, liCollections = Array.prototype.slice.call(elementArray);
                for (siblingLI = liCollections[(liIndex = element ? indexOf(element, liCollections) : !0 === isPrevious ? liCollections.length : -1) + (!0 === isPrevious ? -1 : 1)]; siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled)); ) siblingLI = liCollections[liIndex += !0 === isPrevious ? -1 : 1];
                return siblingLI;
            }
        }, ListBase.indexOf = indexOf, ListBase.groupDataSource = function(dataSource, fields, sortOrder) {
            void 0 === sortOrder && (sortOrder = "None");
            var curFields = extend({}, ListBase.defaultMappedFields, fields), cusQuery = new Query().group(curFields.groupBy), ds = getDataSource(dataSource, cusQuery = addSorting(sortOrder, "key", cusQuery));
            dataSource = [];
            for (var j = 0; j < ds.length; j++) {
                var itemObj = ds[j].items, grpItem = {};
                grpItem[curFields.text] = ds[j].key, grpItem.isHeader = !0, grpItem.id = "group-list-item-" + (ds[j].key ? ds[j].key.toString().trim() : "undefined"), 
                grpItem.items = itemObj, dataSource.push(grpItem);
                for (var k = 0; k < itemObj.length; k++) dataSource.push(itemObj[k]);
            }
            return dataSource;
        }, ListBase.addSorting = addSorting, ListBase.getDataSource = getDataSource, ListBase.createJsonFromElement = createJsonFromElement, 
        ListBase.renderContentTemplate = function(createElement, template, dataSource, fields, options) {
            for (var ulElement = createElement("ul", {
                className: (cssClass = getModuleClass(defaultListBaseOptions.moduleName)).ul,
                attrs: {
                    role: "presentation"
                }
            }), curOpt = extend({}, defaultListBaseOptions, options), curFields = extend({}, ListBase.defaultMappedFields, fields), compiledString = compile$$1(template), liCollection = [], id = generateId(), i = 0; i < dataSource.length; i++) {
                var fieldData = getFieldValues(dataSource[i], curFields), curItem = dataSource[i], isHeader = curItem.isHeader, value = fieldData[curFields.value];
                if (curOpt.itemCreating && "function" == typeof curOpt.itemCreating) {
                    var curData = {
                        dataSource: dataSource,
                        curData: curItem,
                        text: value,
                        options: curOpt,
                        fields: curFields
                    };
                    curOpt.itemCreating(curData);
                }
                curOpt.itemCreating && "function" == typeof curOpt.itemCreating && (value = (fieldData = getFieldValues(dataSource[i], curFields))[curFields.value]);
                var li = createElement("li", {
                    id: id + "-" + i,
                    className: isHeader ? cssClass.group : cssClass.li,
                    attrs: {
                        role: "presentation"
                    }
                });
                isHeader ? li.innerText = fieldData[curFields.text] : (append(compiledString(curItem), li), 
                li.setAttribute("data-value", value), li.setAttribute("role", "option")), curOpt.itemCreated && "function" == typeof curOpt.itemCreated && (curData = {
                    dataSource: dataSource,
                    curData: curItem,
                    text: value,
                    item: li,
                    options: curOpt,
                    fields: curFields
                }, curOpt.itemCreated(curData)), liCollection.push(li);
            }
            return append(liCollection, ulElement), ulElement;
        }, ListBase.renderGroupTemplate = function(groupTemplate, groupDataSource, fields, headerItems) {
            for (var compiledString = compile$$1(groupTemplate), category = extend({}, ListBase.defaultMappedFields, fields).groupBy, _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {
                var header = headerItems_1[_i], headerData = {};
                headerData[category] = header.textContent, header.innerHTML = "", append(compiledString(headerData), header);
            }
            return headerItems;
        }, ListBase.generateId = generateId, ListBase.generateUL = generateUL, ListBase.generateIcon = function(createElement, liElement, className, options) {
            var curOpt = extend({}, defaultListBaseOptions, options);
            return cssClass = getModuleClass(curOpt.moduleName), ("Left" === curOpt.expandIconPosition ? prepend : append)([ createElement("div", {
                className: "e-icons " + curOpt.expandIconClass + " " + (isNullOrUndefined(className) ? "" : className)
            }) ], liElement.querySelector("." + cssClass.textContent)), liElement;
        };
    }(ListBase || (ListBase = {}));
    var __extends$41 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$29 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, effectsConfig = {
        None: [],
        SlideLeft: [ "SlideRightOut", "SlideLeftOut", "SlideLeftIn", "SlideRightIn" ],
        SlideDown: [ "SlideTopOut", "SlideBottomOut", "SlideBottomIn", "SlideTopIn" ],
        Zoom: [ "FadeOut", "FadeZoomOut", "FadeZoomIn", "FadeIn" ],
        Fade: [ "FadeOut", "FadeOut", "FadeIn", "FadeIn" ]
    }, effectsRTLConfig = {
        None: [],
        SlideLeft: [ "SlideLeftOut", "SlideRightOut", "SlideRightIn", "SlideLeftIn" ],
        SlideDown: [ "SlideBottomOut", "SlideTopOut", "SlideTopIn", "SlideBottomIn" ],
        Zoom: [ "FadeZoomOut", "FadeOut", "FadeIn", "FadeZoomIn" ],
        Fade: [ "FadeOut", "FadeOut", "FadeIn", "FadeIn" ]
    }, classNames$2 = {
        root: "e-listview",
        hover: "e-hover",
        selected: "e-active",
        focused: "e-focused",
        parentItem: "e-list-parent",
        listItem: "e-list-item",
        listIcon: "e-list-icon",
        textContent: "e-text-content",
        listItemText: "e-list-text",
        groupListItem: "e-list-group-item",
        hasChild: "e-has-child",
        view: "e-view",
        header: "e-list-header",
        headerText: "e-headertext",
        headerTemplateText: "e-headertemplate-text",
        text: "e-text",
        disable: "e-disabled",
        content: "e-content",
        icon: "e-icons",
        backIcon: "e-icon-back",
        checkboxWrapper: "e-checkbox-wrapper",
        checkbox: "e-checkbox",
        checked: "e-check",
        checklist: "e-checklist",
        checkboxIcon: "e-frame",
        checkboxRight: "e-checkbox-right",
        checkboxLeft: "e-checkbox-left",
        listviewCheckbox: "e-listview-checkbox",
        itemCheckList: "e-checklist"
    }, FieldSettings$1 = function(_super) {
        function FieldSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$41(FieldSettings, _super), __decorate$29([ Property("id") ], FieldSettings.prototype, "id", void 0), 
        __decorate$29([ Property("text") ], FieldSettings.prototype, "text", void 0), __decorate$29([ Property("isChecked") ], FieldSettings.prototype, "isChecked", void 0), 
        __decorate$29([ Property("isVisible") ], FieldSettings.prototype, "isVisible", void 0), 
        __decorate$29([ Property("enabled") ], FieldSettings.prototype, "enabled", void 0), 
        __decorate$29([ Property("iconCss") ], FieldSettings.prototype, "iconCss", void 0), 
        __decorate$29([ Property("child") ], FieldSettings.prototype, "child", void 0), 
        __decorate$29([ Property("tooltip") ], FieldSettings.prototype, "tooltip", void 0), 
        __decorate$29([ Property("groupBy") ], FieldSettings.prototype, "groupBy", void 0), 
        __decorate$29([ Property("text") ], FieldSettings.prototype, "sortBy", void 0), 
        __decorate$29([ Property("htmlAttributes") ], FieldSettings.prototype, "htmlAttributes", void 0), 
        __decorate$29([ Property("tableName") ], FieldSettings.prototype, "tableName", void 0), 
        FieldSettings;
    }(ChildProperty), __extends$40 = (function(_super) {
        function ListView(options, element) {
            return _super.call(this, options, element) || this;
        }
        __extends$41(ListView, _super), ListView.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "htmlAttributes":
                    this.setHTMLAttribute();
                    break;

                  case "cssClass":
                    this.setCSSClass(oldProp.cssClass);
                    break;

                  case "enable":
                    this.setEnable();
                    break;

                  case "width":
                  case "height":
                    this.setSize();
                    break;

                  case "enableRtl":
                    this.setEnableRTL();
                    break;

                  case "fields":
                    this.listBaseOption.fields = this.fields.properties, this.enableVirtualization ? this.virtualizationModule.reRenderUiVirtualization() : this.reRender();
                    break;

                  case "headerTitle":
                    this.curDSLevel.length || this.header(this.headerTitle, !1);
                    break;

                  case "showHeader":
                    this.header(this.headerTitle, !1);
                    break;

                  case "enableVirtualization":
                    detach(this.contentContainer), this.refresh();
                    break;

                  case "showCheckBox":
                  case "checkBoxPosition":
                    this.enableVirtualization ? this.virtualizationModule.reRenderUiVirtualization() : this.setCheckbox();
                    break;

                  case "dataSource":
                    this.enableVirtualization ? this.virtualizationModule.reRenderUiVirtualization() : this.reRender();
                    break;

                  case "sortOrder":
                  case "showIcon":
                    this.enableVirtualization ? this.virtualizationModule.reRenderUiVirtualization() : (this.listBaseOption.showIcon = this.showIcon, 
                    this.curViewDS = this.getSubDS(), this.resetCurrentList());
                }
            }
        }, ListView.prototype.setHTMLAttribute = function() {
            Object.keys(this.htmlAttributes).length && attributes(this.element, this.htmlAttributes);
        }, ListView.prototype.setCSSClass = function(oldCSSClass) {
            this.cssClass && addClass([ this.element ], this.cssClass.split(" ").filter(function(css) {
                return css;
            })), oldCSSClass && removeClass([ this.element ], oldCSSClass.split(" ").filter(function(css) {
                return css;
            }));
        }, ListView.prototype.setSize = function() {
            this.element.style.height = formatUnit(this.height), this.element.style.width = formatUnit(this.width), 
            this.isWindow = !this.element.getBoundingClientRect().height;
        }, ListView.prototype.setEnable = function() {
            this.enableElement(this.element, this.enable);
        }, ListView.prototype.setEnableRTL = function() {
            this.enableRtl ? this.element.classList.add("e-rtl") : this.element.classList.remove("e-rtl");
        }, ListView.prototype.enableElement = function(element, isEnabled) {
            isEnabled ? element.classList.remove(classNames$2.disable) : element.classList.add(classNames$2.disable);
        }, ListView.prototype.header = function(text, showBack) {
            if (void 0 === this.headerEle && this.showHeader) {
                this.headerEle = this.createElement("div", {
                    className: classNames$2.header
                });
                var innerHeaderEle = this.createElement("span", {
                    className: classNames$2.headerText,
                    innerHTML: this.headerTitle
                }), textEle = this.createElement("div", {
                    className: classNames$2.text,
                    innerHTML: innerHeaderEle.outerHTML
                }), hedBackButton = this.createElement("div", {
                    className: classNames$2.icon + " " + classNames$2.backIcon + " e-but-back",
                    attrs: {
                        style: "display:none;"
                    }
                });
                if (this.headerEle.appendChild(hedBackButton), this.headerEle.appendChild(textEle), 
                this.headerTemplate) {
                    var compiledString = compile$$1(this.headerTemplate), headerTemplateEle = this.createElement("div", {
                        className: classNames$2.headerTemplateText
                    });
                    append(compiledString({}), headerTemplateEle), append([ headerTemplateEle ], this.headerEle);
                }
                this.headerTemplate && this.headerTitle && textEle.classList.add("header"), this.element.classList.add("e-has-header"), 
                prepend([ this.headerEle ], this.element);
            } else if (this.headerEle) if (this.showHeader) {
                this.headerEle.style.display = "";
                textEle = this.headerEle.querySelector("." + classNames$2.headerText), hedBackButton = this.headerEle.querySelector("." + classNames$2.backIcon);
                textEle.innerHTML = text, this.headerTemplate && showBack && (textEle.parentElement.classList.remove("header"), 
                this.headerEle.querySelector("." + classNames$2.headerTemplateText).classList.add("nested-header")), 
                this.headerTemplate && !showBack && (textEle.parentElement.classList.add("header"), 
                this.headerEle.querySelector("." + classNames$2.headerTemplateText).classList.remove("nested-header"), 
                this.headerEle.querySelector("." + classNames$2.headerTemplateText).classList.add("header")), 
                hedBackButton.style.display = !0 === showBack ? "" : "none";
            } else this.headerEle.style.display = "none";
        }, ListView.prototype.switchView = function(fromView, toView, reverse) {
            var _this = this;
            if (fromView && toView) {
                var fPos_1 = fromView.style.position, overflow_1 = "hidden" !== this.element.style.overflow ? this.element.style.overflow : "";
                fromView.style.position = "absolute", fromView.classList.add("e-view");
                var anim = void 0, duration = this.animation.duration;
                if (this.animation.effect) anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect]; else {
                    anim = effectsConfig.SlideLeft, reverse = this.enableRtl, duration = 0;
                }
                this.element.style.overflow = "hidden", this.aniObj.animate(fromView, {
                    name: !0 === reverse ? anim[0] : anim[1],
                    duration: duration,
                    timingFunction: this.animation.easing,
                    end: function(model) {
                        fromView.style.display = "none", _this.element.style.overflow = overflow_1, fromView.style.position = fPos_1, 
                        fromView.classList.remove("e-view");
                    }
                }), toView.style.display = "", this.aniObj.animate(toView, {
                    name: !0 === reverse ? anim[2] : anim[3],
                    duration: duration,
                    timingFunction: this.animation.easing,
                    end: function() {
                        _this.trigger("actionComplete");
                    }
                }), this.curUL = toView;
            }
        }, ListView.prototype.preRender = function() {
            this.listBaseOption = {
                template: this.template,
                headerTemplate: this.headerTemplate,
                groupTemplate: this.groupTemplate,
                expandCollapse: !0,
                listClass: "",
                ariaAttributes: {
                    itemRole: "listitem",
                    listRole: "list",
                    itemText: "",
                    groupItemRole: "group",
                    wrapperRole: "presentation"
                },
                fields: this.fields.properties,
                sortOrder: this.sortOrder,
                showIcon: this.showIcon,
                itemCreated: this.renderCheckbox.bind(this)
            }, this.initialization();
        }, ListView.prototype.initialization = function() {
            this.curDSLevel = [], this.animateOptions = {}, this.curViewDS = [], this.currentLiElements = [], 
            this.isNestedList = !1, this.selectedData = [], this.selectedId = [], this.aniObj = new Animation(this.animateOptions);
        }, ListView.prototype.renderCheckbox = function(args) {
            if (args.item.classList.contains(classNames$2.hasChild) && (this.isNestedList = !0), 
            this.showCheckBox && this.isValidLI(args.item)) {
                var checkboxElement = void 0;
                (checkboxElement = createCheckBox(this.createElement, !1, {
                    checked: !1,
                    enableRtl: this.enableRtl,
                    cssClass: classNames$2.listviewCheckbox
                })).setAttribute("role", "checkbox");
                var frameElement_1 = checkboxElement.querySelector("." + classNames$2.checkboxIcon);
                args.item.classList.add(classNames$2.itemCheckList), args.item.firstElementChild.classList.add(classNames$2.checkbox), 
                "string" != typeof this.dataSource[0] && "number" != typeof this.dataSource[0] ? getFieldValues(args.curData, this.listBaseOption.fields)[this.listBaseOption.fields.isChecked] && this.checkInternally(args, checkboxElement) : "string" != typeof this.dataSource[0] && "number" != typeof this.dataSource[0] || -1 === this.selectedData.indexOf(args.text) || this.checkInternally(args, checkboxElement), 
                checkboxElement.setAttribute("aria-checked", frameElement_1.classList.contains(classNames$2.checked) ? "true" : "false"), 
                "Left" === this.checkBoxPosition ? (checkboxElement.classList.add(classNames$2.checkboxLeft), 
                args.item.firstElementChild.classList.add(classNames$2.checkboxLeft), args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0])) : (checkboxElement.classList.add(classNames$2.checkboxRight), 
                args.item.firstElementChild.classList.add(classNames$2.checkboxRight), args.item.firstElementChild.appendChild(checkboxElement)), 
                this.currentLiElements.push(args.item);
            }
        }, ListView.prototype.checkInternally = function(args, checkboxElement) {
            args.item.classList.add(classNames$2.selected), args.item.setAttribute("aria-selected", "true"), 
            checkboxElement.querySelector("." + classNames$2.checkboxIcon).classList.add(classNames$2.checked), 
            checkboxElement.setAttribute("aria-checked", "true");
        }, ListView.prototype.checkItem = function(item) {
            this.toggleCheckBase(item, !0);
        }, ListView.prototype.toggleCheckBase = function(item, checked) {
            if (this.showCheckBox) {
                var liElement = item;
                if (item instanceof Object && item.constructor !== HTMLLIElement && (liElement = this.getLiFromObjOrElement(item)), 
                !isNullOrUndefined(liElement)) {
                    var checkboxIcon = liElement.querySelector("." + classNames$2.checkboxIcon);
                    checked ? liElement.classList.add(classNames$2.selected) : liElement.classList.remove(classNames$2.selected), 
                    liElement.setAttribute("aria-selected", checked ? "true" : "false"), checked ? checkboxIcon.classList.add(classNames$2.checked) : checkboxIcon.classList.remove(classNames$2.checked), 
                    checkboxIcon.parentElement.setAttribute("aria-checked", checked ? "true" : "false");
                }
                this.setSelectedItemData(liElement);
            }
        }, ListView.prototype.uncheckItem = function(item) {
            this.toggleCheckBase(item, !1);
        }, ListView.prototype.checkAllItems = function() {
            this.toggleAllCheckBase(!0);
        }, ListView.prototype.uncheckAllItems = function() {
            this.toggleAllCheckBase(!1);
        }, ListView.prototype.toggleAllCheckBase = function(checked) {
            if (this.showCheckBox) {
                for (var i = 0; i < this.liCollection.length; i++) {
                    var checkIcon = this.liCollection[i].querySelector("." + classNames$2.checkboxIcon);
                    checkIcon && (checked ? checkIcon.classList.contains(classNames$2.checked) || this.checkItem(this.liCollection[i]) : checkIcon.classList.contains(classNames$2.checked) && this.uncheckItem(this.liCollection[i]));
                }
                this.enableVirtualization && this.virtualizationModule.checkedItem(checked);
            }
        }, ListView.prototype.setCheckbox = function() {
            var _this = this;
            if (this.showCheckBox) {
                var args_1 = {
                    item: void 0,
                    curData: void 0,
                    dataSource: void 0,
                    fields: void 0,
                    options: void 0,
                    text: ""
                };
                Array.prototype.slice.call(this.element.querySelectorAll("." + classNames$2.listItem)).forEach(function(element) {
                    args_1.item = element, args_1.curData = _this.getItemData(element), element.querySelector("." + classNames$2.checkboxWrapper) && _this.removeElement(element.querySelector("." + classNames$2.checkboxWrapper)), 
                    _this.renderCheckbox(args_1), args_1.item.classList.contains(classNames$2.selected) && _this.checkInternally(args_1, args_1.item.querySelector("." + classNames$2.checkboxWrapper));
                });
            } else {
                Array.prototype.slice.call(this.element.querySelectorAll("." + classNames$2.itemCheckList)).forEach(function(element) {
                    element.classList.remove(classNames$2.selected), element.firstElementChild.classList.remove(classNames$2.checkbox), 
                    _this.removeElement(element.querySelector("." + classNames$2.checkboxWrapper));
                }), this.selectedItems && this.selectedItems.item.classList.add(classNames$2.selected);
            }
        }, ListView.prototype.refreshItemHeight = function() {
            this.virtualizationModule.refreshItemHeight();
        }, ListView.prototype.clickHandler = function(e) {
            var target = e.target, classList = target.classList;
            if (classList.contains(classNames$2.backIcon) || classList.contains(classNames$2.headerText)) this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1] && this.uncheckAllItems(), 
            this.back(); else {
                var li = closest(target.parentNode, "." + classNames$2.listItem);
                if (null === li && (li = target), this.removeFocus(), this.enable && this.showCheckBox && this.isValidLI(li)) if (e.target.classList.contains(classNames$2.checkboxIcon)) {
                    if (li.classList.add(classNames$2.focused), isNullOrUndefined(li.querySelector("." + classNames$2.checked))) {
                        var args = {
                            curData: void 0,
                            dataSource: void 0,
                            fields: void 0,
                            options: void 0,
                            text: void 0,
                            item: li
                        };
                        this.checkInternally(args, args.item.querySelector("." + classNames$2.checkboxWrapper));
                    } else this.uncheckItem(li), li.classList.add(classNames$2.focused);
                    if (e) {
                        var eventArgs = this.selectEventData(li, e);
                        merge(eventArgs, {
                            isChecked: li.querySelector("." + classNames$2.checkboxIcon).classList.contains(classNames$2.checked)
                        }), this.trigger("select", eventArgs);
                    }
                } else li.classList.contains(classNames$2.hasChild) ? (this.removeHover(), this.removeSelect(), 
                this.removeSelect(li), this.setSelectLI(li, e), li.classList.remove(classNames$2.selected)) : this.setCheckboxLI(li, e); else this.setSelectLI(li, e);
            }
        }, ListView.prototype.removeElement = function(element) {
            return element && element.parentNode && element.parentNode.removeChild(element);
        }, ListView.prototype.hoverHandler = function(e) {
            var curLi = closest(e.target.parentNode, "." + classNames$2.listItem);
            this.setHoverLI(curLi);
        }, ListView.prototype.leaveHandler = function(e) {
            this.removeHover();
        }, ListView.prototype.homeKeyHandler = function(e, end) {
            if (Object.keys(this.dataSource).length && this.curUL) {
                var li = this.curUL.querySelectorAll("." + classNames$2.listItem), focusedElement = this.curUL.querySelector("." + classNames$2.focused) || this.curUL.querySelector("." + classNames$2.selected);
                focusedElement && (focusedElement.classList.remove(classNames$2.focused), this.showCheckBox || focusedElement.classList.remove(classNames$2.selected));
                var index = end ? li.length - 1 : 0;
                li[index].classList.contains(classNames$2.hasChild) || this.showCheckBox ? li[index].classList.add(classNames$2.focused) : this.setSelectLI(li[index], e);
            }
        }, ListView.prototype.onArrowKeyDown = function(e, prev) {
            var siblingLI, li;
            return !isNullOrUndefined(this.curUL.querySelector("." + classNames$2.hasChild)) || this.showCheckBox ? (li = this.curUL.querySelector("." + classNames$2.focused) || this.curUL.querySelector("." + classNames$2.selected), 
            isNullOrUndefined(siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames$2.listItem), li, prev)) || (li && (li.classList.remove(classNames$2.focused), 
            this.showCheckBox || li.classList.remove(classNames$2.selected)), siblingLI.classList.contains(classNames$2.hasChild) || this.showCheckBox ? siblingLI.classList.add(classNames$2.focused) : this.setSelectLI(siblingLI, e))) : (li = this.curUL.querySelector("." + classNames$2.selected), 
            siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames$2.listItem), li, prev), 
            this.setSelectLI(siblingLI, e)), siblingLI;
        }, ListView.prototype.arrowKeyHandler = function(e, prev) {
            var _this = this;
            if (Object.keys(this.dataSource).length && this.curUL) {
                var siblingLI = this.onArrowKeyDown(e, prev), elementTop = this.element.getBoundingClientRect().top, elementHeight = this.element.getBoundingClientRect().height, firstItemBounds = this.curUL.querySelector("." + classNames$2.listItem).getBoundingClientRect(), heightDiff = void 0, groupItemBounds = void 0;
                if (this.fields.groupBy && (groupItemBounds = this.curUL.querySelector("." + classNames$2.groupListItem).getBoundingClientRect()), 
                siblingLI) {
                    var siblingTop = siblingLI.getBoundingClientRect().top, siblingHeight = siblingLI.getBoundingClientRect().height;
                    if (prev) (heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop) < 0 && (this.isWindow ? window.scrollTo(0, pageYOffset + heightDiff) : this.element.scrollTo(0, this.element.scrollTop + heightDiff)); else {
                        var height = this.isWindow ? window.innerHeight : elementHeight;
                        (heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight) > height && (this.isWindow ? window.scrollTo(0, pageYOffset + (heightDiff - height)) : this.element.scrollTo(0, this.element.scrollTop + (heightDiff - height)));
                    }
                } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) this.onUIScrolled = function() {
                    _this.onArrowKeyDown(e, prev), _this.onUIScrolled = void 0;
                }, heightDiff = this.virtualizationModule.listItemHeight, this.isWindow ? window.scrollTo(0, pageYOffset - heightDiff) : this.element.scrollTo(0, this.element.scrollTop - heightDiff); else if (prev) if (this.showHeader && this.headerEle) {
                    var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top, headerBounds = this.headerEle.getBoundingClientRect();
                    heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0, this.isWindow ? window.scrollTo(0, pageYOffset - heightDiff) : this.element.scrollTo(0, 0);
                } else this.fields.groupBy && (heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height, 
                this.isWindow ? window.scrollTo(0, pageYOffset + heightDiff) : this.element.scrollTo(0, this.element.scrollTop - heightDiff));
            }
        }, ListView.prototype.enterKeyHandler = function(e) {
            if (Object.keys(this.dataSource).length && this.curUL) {
                var hasChild = !isNullOrUndefined(this.curUL.querySelector("." + classNames$2.hasChild)), li = this.curUL.querySelector("." + classNames$2.focused);
                hasChild && li && (li.classList.remove(classNames$2.focused), this.showCheckBox && (this.removeSelect(), 
                this.removeSelect(li), this.removeHover()), this.setSelectLI(li, e));
            }
        }, ListView.prototype.spaceKeyHandler = function(e) {
            if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {
                var li = this.curUL.querySelector("." + classNames$2.focused);
                if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector("." + classNames$2.checked))) {
                    var args = {
                        curData: void 0,
                        dataSource: void 0,
                        fields: void 0,
                        options: void 0,
                        text: void 0,
                        item: li
                    };
                    this.checkInternally(args, args.item.querySelector("." + classNames$2.checkboxWrapper));
                } else this.uncheckItem(li);
            }
        }, ListView.prototype.keyActionHandler = function(e) {
            switch (e.preventDefault(), e.keyCode) {
              case 36:
                this.homeKeyHandler(e);
                break;

              case 35:
                this.homeKeyHandler(e, !0);
                break;

              case 40:
                this.arrowKeyHandler(e);
                break;

              case 38:
                this.arrowKeyHandler(e, !0);
                break;

              case 13:
                this.enterKeyHandler(e);
                break;

              case 8:
                this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1] && this.uncheckAllItems(), 
                this.back();
                break;

              case 9:
                this.tabFocus(e);
                break;

              case 32:
                this.spaceKeyHandler(e);
            }
        }, ListView.prototype.swipeActionHandler = function(e) {
            "Right" === e.swipeDirection && (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1] && this.uncheckAllItems(), 
            this.back());
        }, ListView.prototype.focusout = function() {
            if (Object.keys(this.dataSource).length && this.curUL) {
                var focusedElement = this.curUL.querySelector("." + classNames$2.focused), activeElement = this.curUL.querySelector("[aria-selected = true]");
                focusedElement && !this.showCheckBox && (focusedElement.classList.remove(classNames$2.focused), 
                activeElement && activeElement.classList.add(classNames$2.selected));
            }
        }, ListView.prototype.wireEvents = function() {
            EventHandler.add(this.element, "keydown", this.keyActionHandler, this), EventHandler.add(this.element, "click", this.clickHandler, this), 
            this.enableVirtualization || (EventHandler.add(this.element, "mouseover", this.hoverHandler, this), 
            EventHandler.add(this.element, "mouseout", this.leaveHandler, this)), EventHandler.add(this.element, "focusout", this.focusout, this), 
            this.touchModule = new Touch(this.element, {
                swipe: this.swipeActionHandler.bind(this)
            });
        }, ListView.prototype.unWireEvents = function() {
            EventHandler.remove(this.element, "click", this.clickHandler), this.enableVirtualization || (EventHandler.remove(this.element, "mouseover", this.hoverHandler), 
            EventHandler.remove(this.element, "mouseout", this.leaveHandler)), EventHandler.remove(this.element, "mouseover", this.hoverHandler), 
            EventHandler.remove(this.element, "mouseout", this.leaveHandler), this.touchModule.destroy();
        }, ListView.prototype.tabFocus = function(e) {
            if (Object.keys(this.dataSource).length && this.curUL) {
                if (!this.curUL.querySelector("." + classNames$2.selected) && this.curUL || this.showCheckBox) {
                    var li = this.curUL.querySelector("." + classNames$2.listItem);
                    if (li.classList.contains(classNames$2.hasChild) || this.showCheckBox) {
                        isNullOrUndefined(this.curUL.querySelector("." + classNames$2.focused)) && li.classList.add(classNames$2.focused);
                    } else this.setSelectLI(li, e);
                }
            }
        }, ListView.prototype.removeFocus = function() {
            for (var _i = 0, focusedLI_1 = this.element.querySelectorAll("." + classNames$2.focused); _i < focusedLI_1.length; _i++) {
                focusedLI_1[_i].classList.remove(classNames$2.focused);
            }
        }, ListView.prototype.removeHover = function() {
            var hoverLI = this.element.querySelector("." + classNames$2.hover);
            hoverLI && hoverLI.classList.remove(classNames$2.hover);
        }, ListView.prototype.removeSelect = function(li) {
            if (isNullOrUndefined(li)) for (var _i = 0, selectedLI_1 = this.element.querySelectorAll("." + classNames$2.selected); _i < selectedLI_1.length; _i++) {
                var ele = selectedLI_1[_i];
                this.showCheckBox && ele.querySelector("." + classNames$2.checked) || (ele.setAttribute("aria-selected", "false"), 
                ele.classList.remove(classNames$2.selected));
            } else li.classList.remove(classNames$2.selected), li.setAttribute("aria-selected", "false");
        }, ListView.prototype.isValidLI = function(li) {
            return li && li.classList.contains(classNames$2.listItem) && !li.classList.contains(classNames$2.groupListItem) && !li.classList.contains(classNames$2.disable);
        }, ListView.prototype.setCheckboxLI = function(li, e) {
            if (this.isValidLI(li) && this.enable && this.showCheckBox) {
                this.curUL.querySelector("." + classNames$2.focused) && this.curUL.querySelector("." + classNames$2.focused).classList.remove(classNames$2.focused), 
                li.classList.add(classNames$2.focused);
                var checkboxElement = li.querySelector("." + classNames$2.checkboxWrapper), checkIcon = checkboxElement.querySelector("." + classNames$2.checkboxIcon + "." + classNames$2.icon);
                this.removeHover(), checkIcon.classList.contains(classNames$2.checked) ? (checkIcon.classList.remove(classNames$2.checked), 
                li.classList.remove(classNames$2.selected), li.setAttribute("aria-selected", "false")) : (checkIcon.classList.add(classNames$2.checked), 
                li.classList.add(classNames$2.selected), li.setAttribute("aria-selected", "true")), 
                checkboxElement.setAttribute("aria-checked", checkIcon.classList.contains(classNames$2.checked) ? "true" : "false");
                var eventArgs = this.selectEventData(li, e);
                merge(eventArgs, {
                    isChecked: checkIcon.classList.contains(classNames$2.checked)
                }), this.enableVirtualization && this.virtualizationModule.setCheckboxLI(li, e), 
                this.trigger("select", eventArgs), this.setSelectedItemData(li), this.renderSubList(li);
            }
        }, ListView.prototype.selectEventData = function(li, e) {
            var data = this.getItemData(li), fieldData = getFieldValues(data, this.listBaseOption.fields), eventArgs = {};
            return merge(eventArgs, !isNullOrUndefined(data) && "string" == typeof this.dataSource[0] || "number" == typeof this.dataSource[0] ? {
                item: li,
                text: li && li.innerText.trim(),
                data: this.dataSource
            } : {
                item: li,
                text: fieldData && fieldData[this.listBaseOption.fields.text],
                data: data
            }), e && merge(eventArgs, {
                isInteracted: !0,
                event: e,
                index: Array.prototype.indexOf.call(this.curUL.children, li)
            }), eventArgs;
        }, ListView.prototype.setSelectedItemData = function(li) {
            var data = this.getItemData(li), fieldData = getFieldValues(data, this.listBaseOption.fields);
            isNullOrUndefined(data) || "string" != typeof this.dataSource[0] && "number" != typeof this.dataSource[0] ? this.selectedItems = {
                item: li,
                text: fieldData && fieldData[this.listBaseOption.fields.text],
                data: data
            } : this.selectedItems = {
                item: li,
                text: li && li.innerText.trim(),
                data: this.dataSource
            };
        }, ListView.prototype.setSelectLI = function(li, e) {
            if (this.isValidLI(li) && !li.classList.contains(classNames$2.selected) && this.enable) {
                this.showCheckBox || this.removeSelect(), li.classList.add(classNames$2.selected), 
                li.setAttribute("aria-selected", "true"), this.removeHover(), this.setSelectedItemData(li), 
                this.enableVirtualization && this.virtualizationModule.setSelectLI(li, e);
                var eventArgs = this.selectEventData(li, e);
                this.trigger("select", eventArgs), this.selectedLI = li, this.renderSubList(li);
            }
        }, ListView.prototype.setHoverLI = function(li) {
            if (this.isValidLI(li) && !li.classList.contains(classNames$2.hover) && this.enable) {
                var lastLi = this.element.querySelectorAll("." + classNames$2.hover);
                lastLi && lastLi.length && removeClass(lastLi, classNames$2.hover), li.classList.contains(classNames$2.selected) && !this.showCheckBox || li.classList.add(classNames$2.hover);
            }
        }, ListView.prototype.getSubDS = function() {
            var levelKeys = this.curDSLevel;
            if (levelKeys.length) {
                for (var ds = this.localData, _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {
                    var key = levelKeys_1[_i], field = {};
                    field[this.fields.id] = key, this.curDSJSON = this.findItemFromDS(ds, field);
                    var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
                    ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
                }
                return ds;
            }
            return this.localData;
        }, ListView.prototype.getItemData = function(li) {
            var curDS, dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource, fields = this.getElementUID(li);
            return curDS = isNullOrUndefined(this.element.querySelector("." + classNames$2.hasChild)) && this.fields.groupBy ? this.curViewDS : dataSource, 
            this.findItemFromDS(curDS, fields);
        }, ListView.prototype.findItemFromDS = function(dataSource, fields, parent) {
            var resultJSON, _this = this;
            return dataSource && dataSource.length && fields ? dataSource.some(function(data) {
                var fieldData = getFieldValues(data, _this.listBaseOption.fields);
                if (!fields[_this.fields.id] && !fields[_this.fields.text] || fields[_this.fields.id] && (!isNullOrUndefined(fieldData[_this.fields.id]) && fieldData[_this.fields.id].toString()) !== fields[_this.fields.id].toString() || fields[_this.fields.text] && fieldData[_this.fields.text] !== fields[_this.fields.text]) if ("object" != typeof data && -1 !== dataSource.indexOf(data)) resultJSON = parent ? dataSource : data; else if (!isNullOrUndefined(fields[_this.fields.id]) && isNullOrUndefined(fieldData[_this.fields.id])) {
                    var li = _this.element.querySelector('[data-uid="' + fields[_this.fields.id] + '"]');
                    li && li.innerText.trim() === fieldData[_this.fields.text] && (resultJSON = data);
                } else fieldData.hasOwnProperty(_this.fields.child) && fieldData[_this.fields.child].length && (resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent)); else resultJSON = parent ? dataSource : data;
                return !!resultJSON;
            }) : resultJSON = dataSource, resultJSON;
        }, ListView.prototype.getQuery = function() {
            var columns = [], query = this.query ? this.query : new Query();
            if (!this.query) {
                for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {
                    var column = _a[_i];
                    "tableName" !== column && this.fields[column] && this.fields[column] !== ListBase.defaultMappedFields[column] && -1 === columns.indexOf(this.fields[column]) && columns.push(this.fields[column]);
                }
                query.select(columns), this.fields.properties.hasOwnProperty("tableName") && query.from(this.fields.tableName);
            }
            return query;
        }, ListView.prototype.setViewDataSource = function(dataSource) {
            void 0 === dataSource && (dataSource = this.localData), dataSource && this.fields.groupBy ? this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder) : dataSource && "None" !== this.sortOrder ? this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy)) : this.curViewDS = dataSource;
        }, ListView.prototype.isInAnimation = function() {
            return this.curUL.classList.contains(".e-animate");
        }, ListView.prototype.setLocalData = function() {
            var _this = this;
            if (this.trigger("actionBegin"), this.dataSource instanceof DataManager) this.dataSource.executeQuery(this.getQuery()).then(function(e) {
                _this.isDestroyed || (_this.localData = e.result, _this.renderList(), _this.trigger("actionComplete", e));
            }).catch(function(e) {
                _this.isDestroyed || _this.trigger("actionFailure", e);
            }); else if (this.dataSource && this.dataSource.length) this.localData = this.dataSource, 
            this.renderList(), this.trigger("actionComplete", {
                data: this.localData
            }); else {
                var ul = this.element.querySelector("ul");
                ul && (remove(ul), this.setProperties({
                    dataSource: ListBase.createJsonFromElement(ul)
                }, !0), this.localData = this.dataSource, this.renderList(), this.trigger("actionComplete", {
                    data: this.localData
                }));
            }
        }, ListView.prototype.reRender = function() {
            this.element.innerHTML = "", this.headerEle = this.ulElement = this.liCollection = void 0, 
            this.setLocalData(), this.header();
        }, ListView.prototype.resetCurrentList = function() {
            this.setViewDataSource(this.curViewDS), this.contentContainer.innerHTML = "", this.createList(), 
            this.renderIntoDom(this.curUL);
        }, ListView.prototype.createList = function() {
            this.currentLiElements = [], this.isNestedList = !1, this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption), 
            this.liCollection = this.curUL.querySelectorAll("." + classNames$2.listItem);
        }, ListView.prototype.renderSubList = function(li) {
            var uID = li.getAttribute("data-uid");
            if (li.classList.contains(classNames$2.hasChild) && uID) {
                var ul = closest(li.parentNode, "." + classNames$2.parentItem), ele = this.element.querySelector("[pid='" + uID + "']");
                if (this.curDSLevel.push(uID), this.setViewDataSource(this.getSubDS()), !ele) {
                    var data = this.curViewDS;
                    (ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length)).setAttribute("pID", uID), 
                    ele.style.display = "none", this.renderIntoDom(ele);
                }
                if (this.switchView(ul, ele), this.liCollection = this.curUL.querySelectorAll("." + classNames$2.listItem), 
                this.selectedItems) {
                    var fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);
                    this.header(fieldData[this.listBaseOption.fields.text], !0);
                }
                this.selectedLI = void 0;
            }
        }, ListView.prototype.renderIntoDom = function(ele) {
            this.contentContainer.appendChild(ele);
        }, ListView.prototype.renderList = function(data) {
            this.setViewDataSource(data), this.enableVirtualization && Object.keys(this.dataSource).length ? (!this.template && !this.groupTemplate || this.virtualizationModule.isNgTemplate() || (this.listBaseOption.template = null, 
            this.listBaseOption.groupTemplate = null, this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule)), 
            this.virtualizationModule.uiVirtualization()) : (this.createList(), this.contentContainer = this.createElement("div", {
                className: classNames$2.content
            }), this.element.appendChild(this.contentContainer), this.renderIntoDom(this.ulElement));
        }, ListView.prototype.getElementUID = function(obj) {
            var fields = {};
            return obj instanceof Element ? fields[this.fields.id] = obj.getAttribute("data-uid") : fields = obj, 
            fields;
        }, ListView.prototype.render = function() {
            this.element.classList.add(classNames$2.root), attributes(this.element, {
                role: "list",
                tabindex: "0"
            }), this.setCSSClass(), this.setEnableRTL(), this.setEnable(), this.setSize(), this.wireEvents(), 
            this.header(), this.setLocalData(), this.setHTMLAttribute(), this.rippleFn = rippleEffect(this.element, {
                selector: "." + classNames$2.listItem
            });
        }, ListView.prototype.destroy = function() {
            this.unWireEvents();
            var classAr = [ classNames$2.root, classNames$2.disable, "e-rtl", "e-has-header", "e-control" ].concat(this.cssClass.split(" ").filter(function(css) {
                return css;
            }));
            removeClass([ this.element ], classAr), this.rippleFn(), this.element.removeAttribute("role"), 
            this.element.removeAttribute("tabindex"), this.element.innerHTML = "", this.curUL = this.ulElement = this.liCollection = this.headerEle = void 0, 
            _super.prototype.destroy.call(this);
        }, ListView.prototype.back = function() {
            var pID = this.curDSLevel[this.curDSLevel.length - 1];
            if (void 0 !== pID && !this.isInAnimation()) {
                this.curDSLevel.pop(), this.setViewDataSource(this.getSubDS());
                var toUL = this.element.querySelector("[data-uid='" + pID + "']"), fromUL = this.curUL;
                toUL ? toUL = toUL.parentElement : (this.createList(), this.renderIntoDom(this.ulElement), 
                toUL = this.curUL);
                var text = getFieldValues(this.curDSJSON, this.listBaseOption.fields)[this.fields.text];
                this.switchView(fromUL, toUL, !0), this.removeFocus();
                var li = this.element.querySelector("[data-uid='" + pID + "']");
                li.classList.add(classNames$2.focused), this.showCheckBox && li.querySelector("." + classNames$2.checkboxIcon).classList.contains(classNames$2.checked) ? li.setAttribute("aria-selected", "true") : (li.classList.remove(classNames$2.selected), 
                li.setAttribute("aria-selected", "false")), this.liCollection = this.curUL.querySelectorAll("." + classNames$2.listItem), 
                this.header(this.curDSLevel.length ? text : this.headerTitle, !!this.curDSLevel.length);
            }
        }, ListView.prototype.selectItem = function(obj) {
            this.enableVirtualization ? this.virtualizationModule.selectItem(obj) : this.showCheckBox ? this.setCheckboxLI(this.getLiFromObjOrElement(obj)) : isNullOrUndefined(obj) ? this.removeSelect() : this.setSelectLI(this.getLiFromObjOrElement(obj));
        }, ListView.prototype.getLiFromObjOrElement = function(obj) {
            var li, dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
            if (!isNullOrUndefined(obj)) if ("string" == typeof dataSource[0] || "number" == typeof dataSource[0]) if (obj instanceof Element) {
                for (var uid = obj.getAttribute("data-uid").toString(), i = 0; i < this.liCollection.length; i++) if (this.liCollection[i].getAttribute("data-uid").toString() === uid) {
                    li = this.liCollection[i];
                    break;
                }
            } else Array.prototype.some.call(this.curUL.querySelectorAll("." + classNames$2.listItem), function(item) {
                return item.innerText.trim() === obj.toString() && (li = item, !0);
            }); else {
                var resultJSON = this.getItemData(obj), fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
                if (resultJSON && (li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]'), 
                !this.enableVirtualization && isNullOrUndefined(li))) {
                    var curLi = this.element.querySelectorAll("." + classNames$2.listItem);
                    for (i = 0; i < curLi.length; i++) curLi[i].innerText.trim() === fieldData[this.fields.text] && (li = curLi[i]);
                }
            }
            return li;
        }, ListView.prototype.selectMultipleItems = function(obj) {
            if (!isNullOrUndefined(obj)) for (var i = 0; i < obj.length; i++) isNullOrUndefined(obj[i]) || this.selectItem(obj[i]);
        }, ListView.prototype.getParentId = function() {
            var parentId = [];
            if (this.isNestedList) for (var i = this.curDSLevel.length - 1; i >= 0; i--) parentId.push(this.curDSLevel[i]);
            return parentId;
        }, ListView.prototype.getSelectedItems = function() {
            this.selectedId = [];
            var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
            if (this.enableVirtualization) return this.virtualizationModule.getSelectedItems();
            if (this.showCheckBox) {
                var liCollection = this.curUL.getElementsByClassName(classNames$2.selected), liTextCollection = [], liDataCollection = [];
                this.selectedId = [];
                for (var dataParent = [], i = 0; i < liCollection.length; i++) if ("string" == typeof dataSource[0] || "number" == typeof dataSource[0]) liTextCollection.push(liCollection[i].innerText.trim()); else {
                    var tempData = this.getItemData(liCollection[i]), fieldData = getFieldValues(tempData, this.listBaseOption.fields);
                    this.isNestedList ? dataParent.push({
                        data: tempData,
                        parentId: this.getParentId()
                    }) : liDataCollection.push(tempData), fieldData ? (liTextCollection.push(fieldData[this.listBaseOption.fields.text]), 
                    this.selectedId.push(fieldData[this.listBaseOption.fields.id])) : (liTextCollection.push(void 0), 
                    this.selectedId.push(void 0));
                }
                return "string" == typeof dataSource[0] || "number" == typeof dataSource[0] ? {
                    item: liCollection,
                    data: dataSource,
                    text: liTextCollection
                } : this.isNestedList ? {
                    item: liCollection,
                    data: dataParent,
                    text: liTextCollection
                } : {
                    item: liCollection,
                    data: liDataCollection,
                    text: liTextCollection
                };
            }
            var liElement = this.element.getElementsByClassName(classNames$2.selected)[0];
            fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);
            return "string" == typeof dataSource[0] || "number" == typeof dataSource[0] ? isNullOrUndefined(liElement) ? void 0 : {
                item: liElement,
                data: dataSource,
                text: liElement.innerText.trim()
            } : isNullOrUndefined(fieldData) || isNullOrUndefined(liElement) ? void 0 : (this.selectedId.push(fieldData[this.listBaseOption.fields.id]), 
            {
                text: fieldData[this.listBaseOption.fields.text],
                item: liElement,
                data: this.getItemData(liElement)
            });
        }, ListView.prototype.findItem = function(obj) {
            return this.getItemData(obj);
        }, ListView.prototype.enableItem = function(obj) {
            this.setItemState(obj, !0), this.enableVirtualization && this.virtualizationModule.enableItem(obj);
        }, ListView.prototype.disableItem = function(obj) {
            this.setItemState(obj, !1), this.enableVirtualization && this.virtualizationModule.disableItem(obj);
        }, ListView.prototype.setItemState = function(obj, isEnable) {
            var resultJSON = this.getItemData(obj), fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
            if (resultJSON) {
                var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
                isEnable ? (li && li.classList.remove(classNames$2.disable), delete resultJSON[this.fields.enabled]) : isEnable || (li && li.classList.add(classNames$2.disable), 
                resultJSON[this.fields.enabled] = !1);
            }
        }, ListView.prototype.showItem = function(obj) {
            this.showHideItem(obj, !1, ""), this.enableVirtualization && this.virtualizationModule.showItem(obj);
        }, ListView.prototype.hideItem = function(obj) {
            this.showHideItem(obj, !0, "none"), this.enableVirtualization && this.virtualizationModule.hideItem(obj);
        }, ListView.prototype.showHideItem = function(obj, isHide, display) {
            var resultJSON = this.getItemData(obj), fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
            if (resultJSON) {
                var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
                li && (li.style.display = display), isHide ? resultJSON[this.fields.isVisible] = !1 : delete resultJSON[this.fields.isVisible];
            }
        }, ListView.prototype.addItem = function(data, fields) {
            var _this = this;
            if (void 0 === fields && (fields = void 0), !(this.dataSource instanceof DataManager) && data instanceof Array) if (this.enableVirtualization) this.virtualizationModule.addItem(data, fields); else {
                var ds = this.findItemFromDS(this.dataSource, fields), child = getFieldValues(ds, this.listBaseOption.fields)[this.fields.child];
                child || (child = []), child = child.concat(data), ds instanceof Array ? (data.forEach(function(dataSource) {
                    if (_this.dataSource.push(dataSource), _this.setViewDataSource(_this.dataSource), 
                    _this.ulElement) {
                        var index = _this.curViewDS.indexOf(dataSource);
                        _this.addListItem(dataSource, index);
                        var curViewDS = _this.curViewDS[index - 1];
                        curViewDS && curViewDS.isHeader && 1 === curViewDS.items.length && _this.addListItem(curViewDS, index - 1);
                    } else _this.reRender();
                }), this.liCollection = this.curUL.querySelectorAll("." + classNames$2.listItem)) : (ds[this.fields.child] = child, 
                this.reRender());
            }
        }, ListView.prototype.addListItem = function(dataSource, index) {
            var target = this.getLiFromObjOrElement(this.curViewDS[index + 1]) || this.getLiFromObjOrElement(this.curViewDS[index + 2]) || null, li = ListBase.createListItemFromJson(this.createElement, [ dataSource ], this.listBaseOption);
            this.ulElement.insertBefore(li[0], target);
        }, ListView.prototype.removeItem = function(obj) {
            this.dataSource instanceof DataManager || (this.enableVirtualization ? this.virtualizationModule.removeItem(obj) : this.removeItemFromList(obj));
        }, ListView.prototype.removeItemFromList = function(obj) {
            var dataSource, fields = obj instanceof Element ? this.getElementUID(obj) : obj;
            if (dataSource = this.findItemFromDS(this.dataSource, fields, !0)) {
                var data = void 0;
                data = this.findItemFromDS(dataSource, fields);
                var index = this.curViewDS.indexOf(data), li = this.getLiFromObjOrElement(obj), groupLi = void 0;
                this.fields.groupBy && this.curViewDS[index - 1] && this.curViewDS[index - 1].isHeader && 1 === this.curViewDS[index - 1].items.length && li && li.previousElementSibling.classList.contains(classNames$2.groupListItem) && (isNullOrUndefined(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames$2.groupListItem)) && (groupLi = li.previousElementSibling), 
                li && detach(li), groupLi && detach(groupLi);
                var dsIndex = dataSource.indexOf(data);
                dataSource.splice(dsIndex, 1), this.setViewDataSource(this.dataSource), this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames$2.listItem));
            }
        }, ListView.prototype.removeMultipleItems = function(obj) {
            if (!(this.dataSource instanceof DataManager) && obj.length) for (var i = 0; i < obj.length; i++) this.enableVirtualization ? this.removeItem(obj[i]) : this.removeItemFromList(obj[i]);
        }, ListView.prototype.getModuleName = function() {
            return "listview";
        }, ListView.prototype.requiredModules = function() {
            var modules = [];
            return this.enableVirtualization && modules.push({
                args: [ this ],
                member: "virtualization"
            }), modules;
        }, ListView.prototype.getPersistData = function() {
            return this.addOnPersist([ "cssClass", "enableRtl", "htmlAttributes", "enable", "fields", "animation", "headerTitle", "sortOrder", "showIcon", "height", "width", "showCheckBox", "checkBoxPosition" ]);
        }, __decorate$29([ Property("") ], ListView.prototype, "cssClass", void 0), __decorate$29([ Property(!1) ], ListView.prototype, "enableVirtualization", void 0), 
        __decorate$29([ Property({}) ], ListView.prototype, "htmlAttributes", void 0), __decorate$29([ Property(!0) ], ListView.prototype, "enable", void 0), 
        __decorate$29([ Property([]) ], ListView.prototype, "dataSource", void 0), __decorate$29([ Property() ], ListView.prototype, "query", void 0), 
        __decorate$29([ Complex(ListBase.defaultMappedFields, FieldSettings$1) ], ListView.prototype, "fields", void 0), 
        __decorate$29([ Property({
            effect: "SlideLeft",
            duration: 400,
            easing: "ease"
        }) ], ListView.prototype, "animation", void 0), __decorate$29([ Property("None") ], ListView.prototype, "sortOrder", void 0), 
        __decorate$29([ Property(!1) ], ListView.prototype, "showIcon", void 0), __decorate$29([ Property(!1) ], ListView.prototype, "showCheckBox", void 0), 
        __decorate$29([ Property("Left") ], ListView.prototype, "checkBoxPosition", void 0), 
        __decorate$29([ Property("") ], ListView.prototype, "headerTitle", void 0), __decorate$29([ Property(!1) ], ListView.prototype, "showHeader", void 0), 
        __decorate$29([ Property("") ], ListView.prototype, "height", void 0), __decorate$29([ Property("") ], ListView.prototype, "width", void 0), 
        __decorate$29([ Property(null) ], ListView.prototype, "template", void 0), __decorate$29([ Property(null) ], ListView.prototype, "headerTemplate", void 0), 
        __decorate$29([ Property(null) ], ListView.prototype, "groupTemplate", void 0), 
        __decorate$29([ Event() ], ListView.prototype, "select", void 0), __decorate$29([ Event() ], ListView.prototype, "actionBegin", void 0), 
        __decorate$29([ Event() ], ListView.prototype, "actionComplete", void 0), __decorate$29([ Event() ], ListView.prototype, "actionFailure", void 0), 
        ListView = __decorate$29([ NotifyPropertyChanges ], ListView);
    }(Component), function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }()), __decorate$28 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, FieldSettings = function(_super) {
        function FieldSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$40(FieldSettings, _super), __decorate$28([ Property() ], FieldSettings.prototype, "text", void 0), 
        __decorate$28([ Property() ], FieldSettings.prototype, "value", void 0), __decorate$28([ Property() ], FieldSettings.prototype, "iconCss", void 0), 
        __decorate$28([ Property() ], FieldSettings.prototype, "groupBy", void 0), __decorate$28([ Property() ], FieldSettings.prototype, "htmlAttributes", void 0), 
        FieldSettings;
    }(ChildProperty), dropDownBaseClasses = {
        root: "e-dropdownbase",
        rtl: "e-rtl",
        content: "e-content",
        selected: "e-active",
        hover: "e-hover",
        noData: "e-nodata",
        fixedHead: "e-fixed-head",
        focus: "e-item-focus",
        li: cssClass.li,
        group: cssClass.group,
        disabled: cssClass.disabled,
        grouping: "e-dd-group"
    }, DropDownBase = function(_super) {
        function DropDownBase(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$40(DropDownBase, _super), DropDownBase.prototype.getPropObject = function(prop, newProp, oldProp) {
            var newProperty = new Object(), oldProperty = new Object(), propName = new Function("prop", "return prop");
            newProperty[propName(prop)] = newProp[propName(prop)], oldProperty[propName(prop)] = oldProp[propName(prop)];
            var data = new Object();
            return data.newProperty = newProperty, data.oldProperty = oldProperty, data;
        }, DropDownBase.prototype.getValueByText = function(text, ignoreCase, ignoreAccent) {
            var value = null;
            return isNullOrUndefined(this.listData) || (value = ignoreCase ? this.checkValueCase(text, !0, ignoreAccent) : this.checkValueCase(text, !1, ignoreAccent)), 
            value;
        }, DropDownBase.prototype.checkValueCase = function(text, ignoreCase, ignoreAccent, isTextByValue) {
            var _this = this, value = null;
            isTextByValue && (value = text);
            var dataSource = this.listData, fields = this.fields, type = this.typeOfData(dataSource).typeof;
            if ("string" === type || "number" === type || "boolean" === type) for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
                var item = dataSource_1[_i];
                isNullOrUndefined(item) || (ignoreAccent ? value = this.checkingAccent(String(item), text, ignoreCase) : ignoreCase ? this.checkIgnoreCase(String(item), text) && (value = this.getItemValue(String(item), text, ignoreCase)) : this.checkNonIgnoreCase(String(item), text) && (value = this.getItemValue(String(item), text, ignoreCase, isTextByValue)));
            } else ignoreCase ? dataSource.filter(function(item) {
                _this.checkIgnoreCase(getValue(fields.text, item).toString(), text) && (value = getValue(fields.value, item));
            }) : isTextByValue ? dataSource.filter(function(item) {
                var itemValue = getValue(fields.value, item);
                isNullOrUndefined(itemValue) || itemValue.toString() !== value.toString() || (value = getValue(fields.text, item));
            }) : dataSource.filter(function(item) {
                _this.checkNonIgnoreCase(getValue(fields.text, item), text) && (value = getValue(fields.value, item));
            });
            return value;
        }, DropDownBase.prototype.checkingAccent = function(item, text, ignoreCase) {
            var dataItem = DataUtil.ignoreDiacritics(String(item)), textItem = DataUtil.ignoreDiacritics(text.toString()), value = null;
            return ignoreCase ? this.checkIgnoreCase(dataItem, textItem) && (value = this.getItemValue(String(item), text, ignoreCase)) : this.checkNonIgnoreCase(String(item), text) && (value = this.getItemValue(String(item), text, ignoreCase)), 
            value;
        }, DropDownBase.prototype.checkIgnoreCase = function(item, text) {
            return String(item).toLowerCase() === text.toString().toLowerCase();
        }, DropDownBase.prototype.checkNonIgnoreCase = function(item, text) {
            return String(item) === text.toString();
        }, DropDownBase.prototype.getItemValue = function(dataItem, typedText, ignoreCase, isTextByValue) {
            var dataSource = this.listData, type = this.typeOfData(dataSource).typeof;
            return isTextByValue ? dataItem.toString() : ignoreCase ? "string" === type ? String(dataItem) : this.getFormattedValue(String(dataItem)) : "string" === type ? typedText : this.getFormattedValue(typedText);
        }, DropDownBase.prototype.l10nUpdate = function(actionFailure) {
            if ("No Records Found" !== this.noRecordsTemplate || "The Request Failed" !== this.actionFailureTemplate) {
                var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;
                this.list.innerHTML = "";
                for (var _i = 0, _a = compile$$1(template)({}); _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.list.appendChild(item);
                }
            } else {
                this.l10n = new L10n("dropdowns", {
                    noRecordsTemplate: "No Records Found",
                    actionFailureTemplate: "The Request Failed"
                }, this.locale), this.list.innerHTML = actionFailure ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
            }
        }, DropDownBase.prototype.getTextByValue = function(value) {
            return this.checkValueCase(value, !1, !1, !0);
        }, DropDownBase.prototype.getFormattedValue = function(value) {
            if (this.listData && this.listData.length) {
                var item = this.typeOfData(this.listData);
                if ("number" == typeof getValue(this.fields.value ? this.fields.value : "value", item.item) || "number" === item.typeof) return parseInt(value, 10);
                if ("boolean" == typeof getValue(this.fields.value ? this.fields.value : "value", item.item) || "boolean" === item.typeof) return "true" === value;
            }
            return value;
        }, DropDownBase.prototype.setEnableRtl = function() {
            this.list && this.enableRtlElements.push(this.list), this.enableRtl ? addClass(this.enableRtlElements, dropDownBaseClasses.rtl) : removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        }, DropDownBase.prototype.initialize = function() {
            if (this.bindEvent = !0, "UL" === this.element.tagName) {
                var jsonElement = ListBase.createJsonFromElement(this.element);
                this.setProperties({
                    fields: {
                        text: "text",
                        value: "text"
                    }
                }, !0), this.resetList(jsonElement, this.fields);
            } else if ("SELECT" === this.element.tagName) {
                (this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource)) || this.renderItemsBySelect();
            } else this.setListData(this.dataSource, this.fields, this.query);
        }, DropDownBase.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, DropDownBase.prototype.setEnabled = function() {
            this.enabled ? this.element.setAttribute("aria-disabled", "false") : this.element.setAttribute("aria-disabled", "true");
        }, DropDownBase.prototype.renderItemsBySelect = function() {
            var element = this.element, fields = {
                value: "value",
                text: "text"
            }, jsonElement = [], group = element.querySelectorAll("select>optgroup"), option = element.querySelectorAll("select>option");
            if (this.getJSONfromOption(jsonElement, option, fields), group.length) {
                for (var i = 0; i < group.length; i++) {
                    var item = group[i], optionGroup = {};
                    optionGroup[fields.text] = item.label, optionGroup.isHeader = !0;
                    var child = item.querySelectorAll("option");
                    jsonElement.push(optionGroup), this.getJSONfromOption(jsonElement, child, fields);
                }
                element.querySelectorAll("select>option");
            }
            this.fields.text = fields.text, this.fields.value = fields.value, this.resetList(jsonElement, fields);
        }, DropDownBase.prototype.getJSONfromOption = function(items, options, fields) {
            for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
                var option = options_1[_i], json = {};
                json[fields.text] = option.innerText, json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText, 
                items.push(json);
            }
        }, DropDownBase.prototype.preRender = function() {
            this.scrollTimer = -1, this.enableRtlElements = [], this.isRequested = !1, this.isDataFetched = !1;
        }, DropDownBase.prototype.setListData = function(dataSource, fields, query) {
            var _this = this;
            fields = fields || this.fields;
            var ulElement;
            this.isActive = !0;
            var eventArgs = {
                cancel: !1,
                data: dataSource,
                query: query
            };
            if (this.trigger("actionBegin", eventArgs), !eventArgs.cancel) if (this.showSpinner(), 
            dataSource instanceof DataManager) {
                if (this.isRequested = !0, this.isDataFetched) return void this.emptyDataRequest(fields);
                eventArgs.data.executeQuery(this.getQuery(eventArgs.query)).then(function(e) {
                    if (_this.trigger("actionComplete", e), !e.cancel) {
                        var listItems = e.result;
                        0 === listItems.length && (_this.isDataFetched = !0), ulElement = _this.renderItems(listItems, fields), 
                        _this.onActionComplete(ulElement, listItems, e), _this.isRequested = !1, _this.hideSpinner(), 
                        _this.trigger("dataBound", {
                            items: listItems,
                            e: e
                        });
                    }
                }).catch(function(e) {
                    _this.isRequested = !1, _this.onActionFailure(e), _this.hideSpinner();
                });
            } else {
                var dataManager = new DataManager(eventArgs.data), localDataArgs = {
                    cancel: !1,
                    result: this.getQuery(eventArgs.query).executeLocal(dataManager)
                };
                if (this.trigger("actionComplete", localDataArgs), localDataArgs.cancel) return;
                ulElement = this.renderItems(localDataArgs.result, fields), this.onActionComplete(ulElement, localDataArgs.result), 
                this.hideSpinner(), this.trigger("dataBound", {
                    items: localDataArgs.result
                });
            }
        }, DropDownBase.prototype.emptyDataRequest = function(fields) {
            var listItems = [];
            this.onActionComplete(this.renderItems(listItems, fields), listItems), this.isRequested = !1, 
            this.hideSpinner();
        }, DropDownBase.prototype.showSpinner = function() {}, DropDownBase.prototype.hideSpinner = function() {}, 
        DropDownBase.prototype.onActionFailure = function(e) {
            this.liCollections = [], this.trigger("actionFailure", e), this.l10nUpdate(!0), 
            addClass([ this.list ], dropDownBaseClasses.noData);
        }, DropDownBase.prototype.onActionComplete = function(ulElement, list, e) {
            this.listData = list, this.list.innerHTML = "", this.list.appendChild(ulElement), 
            this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li), this.ulElement = this.list.querySelector("ul"), 
            this.postRender(this.list, list, this.bindEvent);
        }, DropDownBase.prototype.postRender = function(listElement, list, bindEvent) {
            var focusItem = listElement.querySelector("." + dropDownBaseClasses.li), selectedItem = listElement.querySelector("." + dropDownBaseClasses.selected);
            focusItem && !selectedItem && addClass([ focusItem ], dropDownBaseClasses.focus), 
            list.length <= 0 ? (this.l10nUpdate(), addClass([ listElement ], dropDownBaseClasses.noData)) : listElement.classList.remove(dropDownBaseClasses.noData), 
            this.groupTemplate && this.renderGroupTemplate(listElement);
        }, DropDownBase.prototype.getQuery = function(query) {
            return query || (this.query ? this.query : new Query());
        }, DropDownBase.prototype.renderGroupTemplate = function(listEle) {
            if (null !== this.fields.groupBy && this.dataSource || this.element.querySelector("." + dropDownBaseClasses.group)) {
                var dataSource = this.dataSource, headerItems = listEle.querySelectorAll("." + dropDownBaseClasses.group);
                ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems);
            }
        }, DropDownBase.prototype.createListItems = function(dataSource, fields) {
            dataSource && fields.groupBy || this.element.querySelector("optgroup") ? (fields.groupBy && ("None" !== this.sortOrder && (dataSource = this.getSortedDataSource(dataSource)), 
            dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder)), 
            addClass([ this.list ], dropDownBaseClasses.grouping)) : dataSource = this.getSortedDataSource(dataSource);
            var options = this.listOption(dataSource, fields);
            return ListBase.createList(this.createElement, dataSource, options, !0);
        }, DropDownBase.prototype.listOption = function(dataSource, fields) {
            var iconCss = !isNullOrUndefined(fields.iconCss), fieldValues = isNullOrUndefined(fields.properties) ? fields : fields.properties;
            return extend({}, null !== fields.text || null !== fields.value ? {
                fields: fieldValues,
                showIcon: iconCss,
                ariaAttributes: {
                    groupItemRole: "presentation"
                }
            } : {
                fields: {
                    value: "text"
                }
            }, fields, !0);
        }, DropDownBase.prototype.setFloatingHeader = function(e) {
            isNullOrUndefined(this.fixedHeaderElement) && (this.fixedHeaderElement = this.createElement("div", {
                className: dropDownBaseClasses.fixedHead
            }), this.list.querySelector("li").classList.contains(dropDownBaseClasses.group) || (this.fixedHeaderElement.style.display = "none"), 
            prepend([ this.fixedHeaderElement ], this.list), this.setFixedHeader()), isNullOrUndefined(this.fixedHeaderElement) || "0" !== this.fixedHeaderElement.style.zIndex || this.setFixedHeader(), 
            this.scrollStop(e);
        }, DropDownBase.prototype.scrollStop = function(e) {
            for (var target = e.target, liHeight = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10), topIndex = Math.round(target.scrollTop / liHeight), liCollections = this.ulElement.querySelectorAll("li"), i = topIndex; i > -1; i--) {
                if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {
                    var currentLi = liCollections[i];
                    this.fixedHeaderElement.innerHTML = currentLi.innerHTML, this.fixedHeaderElement.style.top = e.target.scrollTop + "px", 
                    this.fixedHeaderElement.style.display = "block";
                    break;
                }
                this.fixedHeaderElement.style.display = "none", this.fixedHeaderElement.style.top = "none";
            }
        }, DropDownBase.prototype.renderItems = function(listData, fields) {
            var ulElement;
            if (this.itemTemplate && listData) {
                var dataSource = listData;
                dataSource && fields.groupBy ? ("None" !== this.sortOrder && (dataSource = this.getSortedDataSource(dataSource)), 
                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder)) : dataSource = this.getSortedDataSource(dataSource), 
                ulElement = this.templateListItem(dataSource, fields);
            } else ulElement = this.createListItems(listData, fields);
            return ulElement;
        }, DropDownBase.prototype.templateListItem = function(dataSource, fields) {
            var option = this.listOption(dataSource, fields);
            return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option);
        }, DropDownBase.prototype.typeOfData = function(items) {
            for (var item = {
                typeof: null,
                item: null
            }, i = 0; !isNullOrUndefined(items) && i < items.length; i++) if (!isNullOrUndefined(items[i])) return item = {
                typeof: typeof items[i],
                item: items[i]
            };
            return item;
        }, DropDownBase.prototype.setFixedHeader = function() {
            this.list.parentElement.style.display = "block";
            var liWidth = this.liCollections[0].offsetWidth;
            this.fixedHeaderElement.style.width = liWidth.toString() + "px", setStyleAttribute(this.fixedHeaderElement, {
                zIndex: 10
            });
            var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group);
            this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
        }, DropDownBase.prototype.getSortedDataSource = function(dataSource) {
            if (dataSource && "None" !== this.sortOrder) {
                var textField = this.fields.text ? this.fields.text : "text";
                dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));
            }
            return dataSource;
        }, DropDownBase.prototype.getIndexByValue = function(value) {
            for (var index, listItems = this.getItems(), i = 0; i < listItems.length; i++) if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
                index = i;
                break;
            }
            return index;
        }, DropDownBase.prototype.dispatchEvent = function(element, type) {
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent(type, !1, !0), element.dispatchEvent(evt);
        }, DropDownBase.prototype.setFields = function() {
            var fields = this.fields;
            this.fields.value && !this.fields.text ? this.fields.text = this.fields.value : !fields.value && fields.text ? this.fields.value = this.fields.text : this.fields.value || this.fields.text || (this.fields.value = this.fields.text = "text");
        }, DropDownBase.prototype.resetList = function(dataSource, fields, query) {
            this.list && this.setListData(dataSource, fields, query);
        }, DropDownBase.prototype.updateSelection = function() {}, DropDownBase.prototype.renderList = function() {
            this.render();
        }, DropDownBase.prototype.updateDataSource = function(props) {
            this.resetList(this.dataSource);
        }, DropDownBase.prototype.setUpdateInitial = function(props, newProp) {
            this.isDataFetched = !1;
            for (var updateData = {}, j = 0; props.length > j; j++) newProp[props[j]] && "fields" === props[j] ? this.setFields() : newProp[props[j]] && (updateData[props[j]] = newProp[props[j]]);
            Object.keys(updateData).length > 0 && this.updateDataSource(updateData);
        }, DropDownBase.prototype.onPropertyChanged = function(newProp, oldProp) {
            "dropdownbase" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp), 
            this.setUpdateInitial([ "sortOrder", "itemTemplate" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "query":
                  case "sortOrder":
                  case "dataSource":
                  case "itemTemplate":
                    break;

                  case "enableRtl":
                    this.setEnableRtl();
                    break;

                  case "enabled":
                    this.setEnabled();
                    break;

                  case "groupTemplate":
                    if (this.renderGroupTemplate(this.list), this.ulElement && this.fixedHeaderElement) {
                        var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group);
                        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
                    }
                    break;

                  case "locale":
                    this.list && !isNullOrUndefined(this.liCollections) && 0 === this.liCollections.length && this.l10nUpdate();
                    break;

                  case "zIndex":
                    this.setProperties({
                        zIndex: newProp.zIndex
                    }, !0), this.setZIndex();
                }
            }
        }, DropDownBase.prototype.render = function(isEmptyData) {
            this.list = this.createElement("div", {
                className: dropDownBaseClasses.content,
                attrs: {
                    tabindex: "0"
                }
            }), this.list.classList.add(dropDownBaseClasses.root), this.setFields();
            var rippleModel = {
                duration: 300,
                selector: "." + dropDownBaseClasses.li
            };
            this.rippleFun = rippleEffect(this.list, rippleModel);
            var group = this.element.querySelector("select>optgroup");
            if (!this.fields.groupBy && isNullOrUndefined(group) || EventHandler.add(this.list, "scroll", this.setFloatingHeader, this), 
            "dropdownbase" === this.getModuleName()) {
                this.element.getAttribute("tabindex") && this.list.setAttribute("tabindex", this.element.getAttribute("tabindex")), 
                removeClass([ this.element ], dropDownBaseClasses.root), this.element.style.display = "none";
                var wrapperElement = this.createElement("div");
                this.element.parentElement.insertBefore(wrapperElement, this.element), wrapperElement.appendChild(this.element), 
                wrapperElement.appendChild(this.list);
            }
            this.setEnableRtl(), this.setEnabled(), isEmptyData || this.initialize();
        }, DropDownBase.prototype.getModuleName = function() {
            return "dropdownbase";
        }, DropDownBase.prototype.getItems = function() {
            return this.ulElement.querySelectorAll("." + dropDownBaseClasses.li);
        }, DropDownBase.prototype.addItem = function(items, itemIndex) {
            this.list && this.list.textContent !== this.noRecordsTemplate || this.renderList();
            var itemsCount = this.getItems().length, selectedItemValue = this.list.querySelector("." + dropDownBaseClasses.selected);
            items = items instanceof Array ? items : [ items ];
            var index;
            index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
            var fields = this.fields;
            items && fields.groupBy && (items = ListBase.groupDataSource(items, fields.properties));
            for (var liCollections = [], i = 0; i < items.length; i++) {
                var item = items[i], isHeader = item.isHeader, li = this.createElement("li", {
                    className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li,
                    id: "option-add-" + i
                });
                if (isHeader && (li.innerText = getValue(fields.text, item)), this.itemTemplate && !isHeader) {
                    append(compile$$1(this.itemTemplate)(item), li);
                } else isHeader || li.appendChild(document.createTextNode(getValue(fields.text, item)));
                li.setAttribute("data-value", getValue(fields.value, item)), li.setAttribute("role", "option"), 
                this.notify("addItem", {
                    module: "CheckBoxSelection",
                    item: li
                }), liCollections.push(li), this.listData.push(item), this.updateActionCompleteData(li, item);
            }
            if (0 === itemsCount && isNullOrUndefined(this.list.querySelector("ul"))) this.list.innerHTML = "", 
            this.list.appendChild(this.ulElement), append(liCollections, this.ulElement); else for (i = 0; i < items.length; i++) {
                this.liCollections[index] ? this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]) : this.ulElement.appendChild(liCollections[i]);
                var tempLi = [].slice.call(this.liCollections);
                tempLi.splice(index, 0, liCollections[i]), this.liCollections = tempLi, index += 1;
            }
            (selectedItemValue || 0 === itemIndex) && this.updateSelection();
        }, DropDownBase.prototype.validationAttribute = function(target, hidden) {
            var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
            hidden.setAttribute("name", name), target.removeAttribute("name");
            for (var attributes = [ "required", "aria-required", "form" ], i = 0; i < attributes.length; i++) if (target.getAttribute(attributes[i])) {
                var attr = target.getAttribute(attributes[i]);
                hidden.setAttribute(attributes[i], attr), target.removeAttribute(attributes[i]);
            }
        }, DropDownBase.prototype.setZIndex = function() {}, DropDownBase.prototype.updateActionCompleteData = function(li, item) {}, 
        DropDownBase.prototype.getDataByValue = function(value) {
            if (!isNullOrUndefined(this.listData)) {
                var type = this.typeOfData(this.listData).typeof;
                if ("string" === type || "number" === type || "boolean" === type) for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
                    if (!isNullOrUndefined(item = _a[_i]) && item === value) return item;
                } else for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
                    var item;
                    if (!isNullOrUndefined(item = _c[_b]) && getValue(this.fields.value ? this.fields.value : "value", item) === value) return item;
                }
            }
            return null;
        }, DropDownBase.prototype.destroy = function() {
            document.body.contains(this.list) && (EventHandler.remove(this.list, "scroll", this.setFloatingHeader), 
            isNullOrUndefined(this.rippleFun) || this.rippleFun(), detach(this.list)), _super.prototype.destroy.call(this);
        }, __decorate$28([ Complex({
            text: null,
            value: null,
            iconCss: null,
            groupBy: null
        }, FieldSettings) ], DropDownBase.prototype, "fields", void 0), __decorate$28([ Property(!1) ], DropDownBase.prototype, "enableRtl", void 0), 
        __decorate$28([ Property(!1) ], DropDownBase.prototype, "enablePersistence", void 0), 
        __decorate$28([ Property(null) ], DropDownBase.prototype, "itemTemplate", void 0), 
        __decorate$28([ Property(null) ], DropDownBase.prototype, "groupTemplate", void 0), 
        __decorate$28([ Property("No Records Found") ], DropDownBase.prototype, "noRecordsTemplate", void 0), 
        __decorate$28([ Property("The Request Failed") ], DropDownBase.prototype, "actionFailureTemplate", void 0), 
        __decorate$28([ Property("None") ], DropDownBase.prototype, "sortOrder", void 0), 
        __decorate$28([ Property(!0) ], DropDownBase.prototype, "enabled", void 0), __decorate$28([ Property([]) ], DropDownBase.prototype, "dataSource", void 0), 
        __decorate$28([ Property(null) ], DropDownBase.prototype, "query", void 0), __decorate$28([ Property(1e3) ], DropDownBase.prototype, "zIndex", void 0), 
        __decorate$28([ Property(!1) ], DropDownBase.prototype, "ignoreAccent", void 0), 
        __decorate$28([ Event() ], DropDownBase.prototype, "actionBegin", void 0), __decorate$28([ Event() ], DropDownBase.prototype, "actionComplete", void 0), 
        __decorate$28([ Event() ], DropDownBase.prototype, "actionFailure", void 0), __decorate$28([ Event() ], DropDownBase.prototype, "select", void 0), 
        __decorate$28([ Event() ], DropDownBase.prototype, "dataBound", void 0), __decorate$28([ Event() ], DropDownBase.prototype, "created", void 0), 
        __decorate$28([ Event() ], DropDownBase.prototype, "destroyed", void 0), DropDownBase = __decorate$28([ NotifyPropertyChanges ], DropDownBase);
    }(Component), __extends$42 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$30 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, dropDownListClasses = {
        root: "e-dropdownlist",
        hover: dropDownBaseClasses.hover,
        selected: dropDownBaseClasses.selected,
        rtl: dropDownBaseClasses.rtl,
        li: dropDownBaseClasses.li,
        disable: dropDownBaseClasses.disabled,
        base: dropDownBaseClasses.root,
        focus: dropDownBaseClasses.focus,
        input: "e-input-group",
        inputFocus: "e-input-focus",
        icon: "e-input-group-icon e-ddl-icon",
        iconAnimation: "e-icon-anim",
        value: "e-input-value",
        device: "e-ddl-device",
        backIcon: "e-input-group-icon e-back-icon e-icons",
        filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
        filterInput: "e-input-filter",
        filterParent: "e-filter-parent",
        mobileFilter: "e-ddl-device-filter",
        footer: "e-ddl-footer",
        header: "e-ddl-header",
        clearIcon: "e-clear-icon",
        clearIconHide: "e-clear-icon-hide",
        popupFullScreen: "e-popup-full-page",
        disableIcon: "e-ddl-disable-icon",
        hiddenElement: "e-ddl-hidden"
    }, inputObject = {
        container: null,
        buttons: []
    }, DropDownList = function(_super) {
        function DropDownList(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.previousValue = null, _this;
        }
        return __extends$42(DropDownList, _super), DropDownList.prototype.preRender = function() {
            this.element.style.opacity = "0", this.initializeData(), _super.prototype.preRender.call(this), 
            this.activeIndex = this.index, this.queryString = "";
        }, DropDownList.prototype.initializeData = function() {
            this.isPopupOpen = !1, this.isDocumentClick = !1, this.isInteracted = !1, this.isFilterFocus = !1, 
            this.beforePopupOpen = !1, this.initial = !0, this.initRemoteRender = !1, this.isNotSearchList = !1, 
            this.isTyped = !1, this.isSelected = !1, this.preventFocus = !1, this.preventAutoFill = !1, 
            this.isValidKey = !1, this.typedString = "", this.isEscapeKey = !1, this.isPreventBlur = !1, 
            this.isTabKey = !1, this.actionCompleteData = {
                isUpdated: !1
            }, this.prevSelectPoints = {}, this.isSelectCustom = !1, this.isDropDownClick = !1, 
            this.preventAltUp = !1, this.isCustomFilter = !1, this.isSecondClick = !1, this.keyConfigure = {
                tab: "tab",
                enter: "13",
                escape: "27",
                end: "35",
                home: "36",
                down: "40",
                up: "38",
                pageUp: "33",
                pageDown: "34",
                open: "alt+40",
                close: "shift+tab",
                hide: "alt+38",
                space: "32"
            };
        }, DropDownList.prototype.setZIndex = function() {
            this.popupObj && this.popupObj.setProperties({
                zIndex: this.zIndex
            });
        }, DropDownList.prototype.renderList = function(isEmptyData) {
            _super.prototype.render.call(this, isEmptyData), this.wireListEvents();
        }, DropDownList.prototype.floatLabelChange = function() {
            if ("dropdownlist" === this.getModuleName() && "Auto" === this.floatLabelType) {
                var floatElement = this.inputWrapper.container.querySelector(".e-float-text");
                "" !== this.inputElement.value || this.isInteracted ? classList(floatElement, [ "e-label-top" ], [ "e-label-bottom" ]) : classList(floatElement, [ "e-label-bottom" ], [ "e-label-top" ]);
            }
        }, DropDownList.prototype.resetHandler = function(e) {
            e.preventDefault(), this.clear(e), this.onChangeEvent(e);
        }, DropDownList.prototype.resetFocusElement = function() {
            if (this.removeHover(), this.removeSelection(), this.removeFocus(), this.list.scrollTop = 0, 
            "autocomplete" !== this.getModuleName()) {
                var li = this.ulElement.querySelector("." + dropDownListClasses.li);
                li && li.classList.add(dropDownListClasses.focus);
            }
        }, DropDownList.prototype.clear = function(e, properties) {
            !isNullOrUndefined(properties) && (isNullOrUndefined(properties) || !isNullOrUndefined(properties.dataSource) && (properties.dataSource instanceof DataManager || 0 !== properties.dataSource.length)) || this.resetSelection(properties);
            var dataItem = this.getItemData();
            this.previousValue !== dataItem.value && this.onChangeEvent(e);
        }, DropDownList.prototype.resetSelection = function(properties) {
            this.list && (isNullOrUndefined(properties) || !isNullOrUndefined(properties.dataSource) && (properties.dataSource instanceof DataManager || 0 !== properties.dataSource.length) ? (!this.allowFiltering || "autocomplete" === this.getModuleName() || isNullOrUndefined(this.actionCompleteData.ulElement) || isNullOrUndefined(this.actionCompleteData.list) || this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(!0), this.actionCompleteData.list), 
            this.resetFocusElement()) : (this.selectedLI = null, this.actionCompleteData.isUpdated = !1, 
            this.actionCompleteData.ulElement = null, this.actionCompleteData.list = null, this.resetList(properties.dataSource))), 
            this.hiddenElement.innerHTML = "", this.inputElement.value = "", this.value = null, 
            this.itemData = null, this.text = null, this.index = null, this.activeIndex = null, 
            this.item = null, this.queryString = "", this.valueTempElement && (detach(this.valueTempElement), 
            this.inputElement.style.display = "block", this.valueTempElement = null), this.setSelection(null, null), 
            this.isSelectCustom = !1, this.updateIconState();
        }, DropDownList.prototype.setHTMLAttributes = function() {
            if (Object.keys(this.htmlAttributes).length) for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
                var htmlAttr = _a[_i];
                if ("class" === htmlAttr) this.inputWrapper.container.classList.add(this.htmlAttributes[htmlAttr]); else if ("disabled" === htmlAttr && "disabled" === this.htmlAttributes[htmlAttr]) this.enabled = !1, 
                this.setEnable(); else if ("readonly" === htmlAttr && "readonly" === this.htmlAttributes[htmlAttr]) this.readonly = !0, 
                this.dataBind(); else if ("style" === htmlAttr) this.inputWrapper.container.setAttribute("style", this.htmlAttributes[htmlAttr]); else {
                    0 === htmlAttr.indexOf("data") || [ "name", "required" ].indexOf(htmlAttr) > -1 ? this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]) : [ "title", "id", "placeholder" ].indexOf(htmlAttr) > -1 ? "placeholder" === htmlAttr ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputElement) : this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]) : this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                }
            }
        }, DropDownList.prototype.getAriaAttributes = function() {
            return {
                "aria-disabled": "false",
                "aria-owns": this.element.id + "_options",
                role: "listbox",
                "aria-haspopup": "true",
                "aria-expanded": "false",
                "aria-activedescendant": "null",
                "aria-labelledby": this.hiddenElement.id
            };
        }, DropDownList.prototype.setEnableRtl = function() {
            Input.setEnableRtl(this.enableRtl, [ this.inputElement.parentElement ]), this.popupObj && (this.popupObj.enableRtl = this.enableRtl, 
            this.popupObj.dataBind());
        }, DropDownList.prototype.setEnable = function() {
            Input.setEnabled(this.enabled, this.inputElement), this.enabled ? (removeClass([ this.inputWrapper.container ], dropDownListClasses.disable), 
            this.inputElement.setAttribute("aria-disabled", "false"), this.targetElement().setAttribute("tabindex", this.tabIndex)) : (this.hidePopup(), 
            addClass([ this.inputWrapper.container ], dropDownListClasses.disable), this.inputElement.setAttribute("aria-disabled", "true"), 
            this.targetElement().tabIndex = -1);
        }, DropDownList.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, DropDownList.prototype.preventTabIndex = function(element) {
            "dropdownlist" === this.getModuleName() && (element.tabIndex = -1);
        }, DropDownList.prototype.targetElement = function() {
            return this.inputWrapper.container;
        }, DropDownList.prototype.getNgDirective = function() {
            return "EJS-DROPDOWNLIST";
        }, DropDownList.prototype.getElementByText = function(text) {
            return this.getElementByValue(this.getValueByText(text));
        }, DropDownList.prototype.getElementByValue = function(value) {
            for (var item, _i = 0, listItems_1 = this.getItems(); _i < listItems_1.length; _i++) {
                var liItem = listItems_1[_i];
                if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
                    item = liItem;
                    break;
                }
            }
            return item;
        }, DropDownList.prototype.initValue = function() {
            this.renderList(), this.dataSource instanceof DataManager ? this.initRemoteRender = !0 : this.updateValues();
        }, DropDownList.prototype.updateValues = function() {
            if (isNullOrUndefined(this.value)) if (this.text && isNullOrUndefined(this.value)) {
                var element = this.getElementByText(this.text);
                if (isNullOrUndefined(element)) return void this.setProperties({
                    text: null
                });
                this.setSelection(element, null);
            } else this.setSelection(this.liCollections[this.activeIndex], null); else this.setSelection(this.getElementByValue(this.value), null);
            this.setHiddenValue(), Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }, DropDownList.prototype.onBlur = function(e) {
            if (this.enabled) {
                var target = e.relatedTarget, currentTarget = e.target, isPreventBlur = this.isPreventBlur;
                this.isPreventBlur = !1, !isPreventBlur || this.isDocumentClick || !this.isPopupOpen || isNullOrUndefined(currentTarget) && (this.isFilterLayout() || !isNullOrUndefined(target)) ? this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter) ? this.beforePopupOpen || (this.isDocumentClick = !1) : (("dropdownlist" === this.getModuleName() && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || isNullOrUndefined(target) && "dropdownlist" === this.getModuleName() && this.allowFiltering && currentTarget !== this.inputWrapper.container || "dropdownlist" !== this.getModuleName() && !this.inputWrapper.container.contains(target) || this.isTabKey) && (this.isDocumentClick = !!this.isPopupOpen, 
                this.focusOutAction(), this.isTabKey = !1), !this.isRequested || this.isPopupOpen || this.isPreventBlur || (this.isActive = !1, 
                this.beforePopupOpen = !1)) : "dropdownlist" === this.getModuleName() && this.allowFiltering && this.isPopupOpen ? this.filterInput.focus() : this.targetElement().focus();
            }
        }, DropDownList.prototype.focusOutAction = function() {
            this.isInteracted = !1, this.focusOut(), this.onFocusOut();
        }, DropDownList.prototype.onFocusOut = function() {
            this.enabled && (this.isSelected && (this.isSelectCustom = !1, this.onChangeEvent(null)), 
            this.floatLabelChange(), this.dispatchEvent(this.hiddenElement, "change"), "dropdownlist" === this.getModuleName() && "INPUT" !== this.element.tagName && this.dispatchEvent(this.inputElement, "blur"), 
            this.inputWrapper.clearButton && addClass([ this.inputWrapper.clearButton ], dropDownListClasses.clearIconHide), 
            this.trigger("blur"));
        }, DropDownList.prototype.onFocus = function(e) {
            if (!this.isInteracted) {
                this.isInteracted = !0;
                var args = {
                    isInteracted: !!e,
                    event: e
                };
                this.trigger("focus", args);
            }
            this.updateIconState();
        }, DropDownList.prototype.resetValueHandler = function(e) {
            var formElement = closest(this.inputElement, "form");
            formElement && e.target === formElement && (this.value = null);
        }, DropDownList.prototype.wireEvent = function() {
            EventHandler.add(this.inputWrapper.container, "mousedown", this.dropDownClick, this), 
            EventHandler.add(this.inputWrapper.container, "focus", this.focusIn, this), EventHandler.add(this.inputWrapper.container, "keypress", this.onSearch, this), 
            this.bindCommonEvent();
        }, DropDownList.prototype.bindCommonEvent = function() {
            EventHandler.add(this.targetElement(), "blur", this.onBlur, this);
            var formElement = closest(this.inputElement, "form");
            formElement && EventHandler.add(formElement, "reset", this.resetValueHandler, this), 
            Browser.isDevice || (this.keyboardModule = new KeyboardEvents(this.targetElement(), {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigure,
                eventName: "keydown"
            })), this.bindClearEvent();
        }, DropDownList.prototype.bindClearEvent = function() {
            this.showClearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
        }, DropDownList.prototype.unBindCommonEvent = function() {
            EventHandler.remove(this.targetElement(), "blur", this.onBlur);
            var formElement = closest(this.inputElement, "form");
            formElement && EventHandler.remove(formElement, "reset", this.resetValueHandler), 
            Browser.isDevice || this.keyboardModule.destroy(), this.showClearButton && EventHandler.remove(this.inputWrapper.clearButton, "mousedown", this.resetHandler);
        }, DropDownList.prototype.updateIconState = function() {
            this.showClearButton && ("" !== this.inputElement.value ? removeClass([ this.inputWrapper.clearButton ], dropDownListClasses.clearIconHide) : addClass([ this.inputWrapper.clearButton ], dropDownListClasses.clearIconHide));
        }, DropDownList.prototype.wireListEvents = function() {
            EventHandler.add(this.list, "click", this.onMouseClick, this), EventHandler.add(this.list, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
        }, DropDownList.prototype.onSearch = function(e) {
            32 !== e.charCode && 13 !== e.charCode && (void 0 === this.list && this.renderList(), 
            this.searchKeyEvent = e, this.isRequested || isNullOrUndefined(this.list.querySelector("li")) || this.incrementalSearch(e));
        }, DropDownList.prototype.onMouseClick = function(e) {
            var target = e.target, li = (target.classList, closest(target, "." + dropDownBaseClasses.li));
            if (this.isValidLI(li)) if (this.setSelection(li, e), Browser.isDevice && this.isFilterLayout()) history.back(); else {
                this.closePopup(100);
            }
        }, DropDownList.prototype.onMouseOver = function(e) {
            var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
            this.setHover(currentLi);
        }, DropDownList.prototype.setHover = function(li) {
            this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover) && (this.removeHover(), 
            addClass([ li ], dropDownBaseClasses.hover));
        }, DropDownList.prototype.onMouseLeave = function(e) {
            this.removeHover();
        }, DropDownList.prototype.removeHover = function() {
            var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
            hoveredItem && hoveredItem.length && removeClass(hoveredItem, dropDownBaseClasses.hover);
        }, DropDownList.prototype.isValidLI = function(li) {
            return li && li.hasAttribute("role") && "option" === li.getAttribute("role");
        }, DropDownList.prototype.incrementalSearch = function(e) {
            if (this.liCollections.length > 0) {
                var li = function(keyCode, items, selectedIndex, ignoreCase) {
                    queryString += String.fromCharCode(keyCode), setTimeout(function() {
                        queryString = "";
                    }, 1e3);
                    var index;
                    if (queryString = ignoreCase ? queryString.toLowerCase() : queryString, prevString === queryString) {
                        for (var i = 0; i < matches$1.length; i++) if (matches$1[i].classList.contains(activeClass)) {
                            index = i;
                            break;
                        }
                        return index += 1, matches$1[index];
                    }
                    var listItems = items, strLength = queryString.length, item = void 0;
                    i = selectedIndex = selectedIndex ? selectedIndex + 1 : 0, matches$1 = [];
                    do {
                        i === listItems.length && (i = -1), item = listItems[index = -1 === i ? 0 : i], 
                        (ignoreCase ? item.innerText.toLowerCase() : item.innerText).substr(0, strLength) === queryString && matches$1.push(listItems[index]), 
                        i++;
                    } while (i !== selectedIndex);
                    return prevString = queryString, matches$1[0];
                }(e.charCode, this.liCollections, this.activeIndex, !0);
                isNullOrUndefined(li) || (this.setSelection(li, e), this.setScrollPosition());
            }
        }, DropDownList.prototype.hideSpinner = function() {
            isNullOrUndefined(this.spinnerElement) || (hideSpinner(this.spinnerElement), removeClass([ this.spinnerElement ], dropDownListClasses.disableIcon), 
            this.spinnerElement.innerHTML = "", this.spinnerElement = null);
        }, DropDownList.prototype.showSpinner = function() {
            isNullOrUndefined(this.spinnerElement) && (this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0], 
            addClass([ this.spinnerElement ], dropDownListClasses.disableIcon), createSpinner({
                target: this.spinnerElement,
                width: Browser.isDevice ? "16px" : "14px"
            }, this.createElement), showSpinner(this.spinnerElement));
        }, DropDownList.prototype.keyActionHandler = function(e) {
            var preventAction = "pageUp" === e.action || "pageDown" === e.action, preventHomeEnd = "dropdownlist" !== this.getModuleName() && ("home" === e.action || "end" === e.action);
            this.isEscapeKey = "escape" === e.action, this.isTabKey = !this.isPopupOpen && "tab" === e.action;
            var isNavigation = "down" === e.action || "up" === e.action || "pageUp" === e.action || "pageDown" === e.action || "home" === e.action || "end" === e.action;
            if ((!(this.isEditTextBox() || preventAction || preventHomeEnd) || this.isPopupOpen) && !this.readonly) {
                var isTabAction = "tab" === e.action || "close" === e.action;
                if (void 0 !== this.list || this.isRequested || isTabAction || "escape" === e.action || (this.searchKeyEvent = e, 
                this.renderList()), isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && 0 === this.liCollections.length || this.isRequested) return;
                switch ((isTabAction && this.isPopupOpen || "escape" === e.action) && e.preventDefault(), 
                this.isSelected = "escape" !== e.action && this.isSelected, this.isTyped = !isNavigation && "escape" !== e.action && this.isTyped, 
                e.action) {
                  case "down":
                  case "up":
                    var focusEle = this.list.querySelector("." + dropDownListClasses.focus);
                    if (this.isSelectFocusItem(focusEle)) this.setSelection(focusEle, e); else {
                        var nextItem = void 0, index = "down" === e.action ? this.activeIndex + 1 : this.activeIndex - 1, startIndex = 0;
                        "autocomplete" === this.getModuleName() && (startIndex = "down" === e.action && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1, 
                        index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index), 
                        nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index], 
                        this.setSelection(nextItem, e);
                    }
                    e.preventDefault();
                    break;

                  case "pageUp":
                    this.pageUpSelection(this.activeIndex - this.getPageCount(), e), e.preventDefault();
                    break;

                  case "pageDown":
                    this.pageDownSelection(this.activeIndex + this.getPageCount(), e), e.preventDefault();
                    break;

                  case "home":
                    if ("dropdownlist" === this.getModuleName()) {
                        if (e.preventDefault(), 0 === this.activeIndex) return;
                        this.setSelection(this.liCollections[0], e);
                    }
                    break;

                  case "end":
                    if ("dropdownlist" === this.getModuleName()) {
                        e.preventDefault();
                        var lastLi = this.getItems().length - 1;
                        if (this.activeIndex === lastLi) return;
                        this.setSelection(this.liCollections[lastLi], e);
                    }
                    break;

                  case "space":
                    "dropdownlist" === this.getModuleName() && (this.beforePopupOpen || this.showPopup());
                    break;

                  case "open":
                    this.showPopup();
                    break;

                  case "hide":
                    this.preventAltUp = this.isPopupOpen, this.hidePopup(), this.focusDropDown(e);
                    break;

                  case "enter":
                    this.selectCurrentItem(e);
                    break;

                  case "escape":
                  case "tab":
                  case "close":
                    this.isPopupOpen && (this.hidePopup(), this.focusDropDown(e));
                }
            }
        }, DropDownList.prototype.selectCurrentItem = function(e) {
            if (this.isPopupOpen) {
                var li = this.list.querySelector("." + dropDownListClasses.focus);
                li && (this.setSelection(li, e), this.isTyped = !1), this.isSelected && (this.isSelectCustom = !1, 
                this.onChangeEvent(e)), this.hidePopup(), this.focusDropDown(e);
            } else this.showPopup();
        }, DropDownList.prototype.isSelectFocusItem = function(element) {
            return !isNullOrUndefined(element);
        }, DropDownList.prototype.getPageCount = function() {
            var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
            return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
        }, DropDownList.prototype.pageUpSelection = function(steps, event) {
            var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
            this.setSelection(previousItem, event);
        }, DropDownList.prototype.pageDownSelection = function(steps, event) {
            var list = this.getItems(), previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
            this.setSelection(previousItem, event);
        }, DropDownList.prototype.unWireEvent = function() {
            EventHandler.remove(this.inputWrapper.container, "mousedown", this.dropDownClick), 
            EventHandler.remove(this.inputWrapper.container, "keypress", this.onSearch), EventHandler.remove(this.inputWrapper.container, "focus", this.focusIn), 
            this.unBindCommonEvent();
        }, DropDownList.prototype.unWireListEvents = function() {
            EventHandler.remove(this.list, "click", this.onMouseClick), EventHandler.remove(this.list, "mouseover", this.onMouseOver), 
            EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
        }, DropDownList.prototype.onDocumentClick = function(e) {
            var target = e.target;
            if (!isNullOrUndefined(this.popupObj) && closest(target, "#" + this.popupObj.element.id) || this.inputWrapper.container.contains(e.target)) target === this.inputElement || this.allowFiltering && target === this.filterInput || "combobox" === this.getModuleName() && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0] || (this.isPreventBlur = (Browser.isIE || "edge" === Browser.info.name) && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput), 
            e.preventDefault()); else if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {
                this.isDocumentClick = !0;
                var isActive = this.isRequested;
                this.isInteracted = !1, this.hidePopup(), isActive || (this.onFocusOut(), this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus));
            }
        }, DropDownList.prototype.activeStateChange = function() {
            this.isDocumentClick && (this.hidePopup(), this.onFocusOut(), this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus));
        }, DropDownList.prototype.focusDropDown = function(e) {
            !this.initial && this.isFilterLayout() && this.focusIn(e);
        }, DropDownList.prototype.dropDownClick = function(e) {
            if (3 !== e.which && 2 !== e.button && !this.targetElement().classList.contains(dropDownListClasses.disable) && this.inputWrapper.clearButton !== e.target) {
                var target = e.target;
                if (target === this.inputElement || this.allowFiltering && target === this.filterInput || "combobox" === this.getModuleName() || e.preventDefault(), 
                this.readonly) this.focusIn(e); else {
                    this.isPopupOpen ? (this.hidePopup(), this.isFilterLayout() && this.focusDropDown(e)) : (this.focusIn(e), 
                    this.floatLabelChange(), this.queryString = "" === this.inputElement.value.trim() ? null : this.inputElement.value, 
                    this.isDropDownClick = !0, this.showPopup());
                    var proxy_1 = this;
                    this.isSecondClick || setTimeout(function() {
                        proxy_1.cloneElements();
                    }, 100);
                }
            }
        }, DropDownList.prototype.cloneElements = function() {
            if (this.list) {
                var ulElement = this.list.querySelector("ul");
                ulElement && (ulElement = ulElement.cloneNode ? ulElement.cloneNode(!0) : ulElement, 
                this.actionCompleteData.ulElement = ulElement, this.isSecondClick = !0);
            }
        }, DropDownList.prototype.updateSelectedItem = function(li, e, preventSelect) {
            this.removeSelection(), li.classList.add(dropDownBaseClasses.selected), this.removeHover();
            var value = this.getFormattedValue(li.getAttribute("data-value"));
            if (this.item = li, this.itemData = this.getDataByValue(value), !this.initial && !preventSelect) {
                var items = this.detachChanges();
                this.isSelected = !0;
                var eventArgs = {
                    e: e,
                    item: this.item,
                    itemData: items,
                    isInteracted: !!e,
                    cancel: !1
                };
                if (this.trigger("select", eventArgs), eventArgs.cancel) return !0;
            }
            var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
            return focusedItem && removeClass([ focusedItem ], dropDownBaseClasses.focus), li.setAttribute("aria-selected", "true"), 
            this.activeIndex = this.getIndexByValue(value), !1;
        }, DropDownList.prototype.activeItem = function(li) {
            this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected) && (this.removeSelection(), 
            li.classList.add(dropDownBaseClasses.selected), this.removeHover(), li.setAttribute("aria-selected", "true"));
        }, DropDownList.prototype.setValue = function(e) {
            var dataItem = this.getItemData();
            return null === dataItem.value ? Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton) : Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.valueTemplate && null !== this.itemData ? this.setValueTemplate() : this.inputElement.previousSibling === this.valueTempElement && (detach(this.valueTempElement), 
            this.inputElement.style.display = "block"), this.previousValue === dataItem.value ? (this.isSelected = !1, 
            !0) : (this.isSelected = !this.initial, this.isSelectCustom = !1, "dropdownlist" === this.getModuleName() && this.updateIconState(), 
            !1);
        }, DropDownList.prototype.setSelection = function(li, e) {
            if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {
                this.previousItemData = isNullOrUndefined(this.itemData) ? null : this.itemData;
                if (this.updateSelectedItem(li, e, !1)) return;
            }
            this.list && this.removeHover(), this.previousSelectedLI = isNullOrUndefined(this.selectedLI) ? null : this.selectedLI, 
            this.selectedLI = li, this.setValue(e) || (this.isPopupOpen && (attributes(this.targetElement(), {
                "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
            }), this.isFilterLayout() && attributes(this.filterInput, {
                "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
            })), (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && ("keydown" !== e.type || "keydown" === e.type && "enter" === e.action)) && (this.isSelectCustom = !1, 
            this.onChangeEvent(e)), !this.isPopupOpen || isNullOrUndefined(this.selectedLI) || null === this.itemData || e && "click" === e.type || this.setScrollPosition(e));
        }, DropDownList.prototype.setValueTemplate = function() {
            this.valueTempElement || (this.valueTempElement = this.createElement("span", {
                className: dropDownListClasses.value
            }), this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement), 
            this.inputElement.style.display = "none"), this.valueTempElement.innerHTML = "";
            for (var _i = 0, _a = compile$$1(this.valueTemplate)(this.itemData); _i < _a.length; _i++) {
                var item = _a[_i];
                this.valueTempElement.appendChild(item);
            }
        }, DropDownList.prototype.removeSelection = function() {
            var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
            selectedItems.length && (removeClass(selectedItems, dropDownBaseClasses.selected), 
            selectedItems[0].removeAttribute("aria-selected"));
        }, DropDownList.prototype.getItemData = function() {
            var dataValue, dataText, fields = this.fields, dataItem = null;
            isNullOrUndefined(dataItem = this.itemData) || (dataValue = getValue(fields.value, dataItem), 
            dataText = getValue(fields.text, dataItem));
            return {
                value: isNullOrUndefined(dataItem) || isUndefined(dataValue) ? dataItem : dataValue,
                text: isNullOrUndefined(dataItem) || isUndefined(dataValue) ? dataItem : dataText
            };
        }, DropDownList.prototype.onChangeEvent = function(eve) {
            var dataItem = this.getItemData(), index = this.isSelectCustom ? null : this.activeIndex;
            this.setProperties({
                value: dataItem.value,
                index: index,
                text: dataItem.text
            }, !0), this.detachChangeEvent(eve);
        }, DropDownList.prototype.detachChanges = function() {
            return "string" == typeof this.itemData || "boolean" == typeof this.itemData || "number" == typeof this.itemData ? Object.defineProperties({}, {
                value: {
                    value: this.itemData,
                    enumerable: !0
                },
                text: {
                    value: this.itemData,
                    enumerable: !0
                }
            }) : this.itemData;
        }, DropDownList.prototype.detachChangeEvent = function(eve) {
            if (this.isSelected = !1, this.previousValue = this.value, this.activeIndex = this.index, 
            this.typedString = isNullOrUndefined(this.text) ? "" : this.text, !this.initial) {
                var items = this.detachChanges(), preItems = void 0;
                preItems = "string" == typeof this.previousItemData || "boolean" == typeof this.previousItemData || "number" == typeof this.previousItemData ? Object.defineProperties({}, {
                    value: {
                        value: this.previousItemData,
                        enumerable: !0
                    },
                    text: {
                        value: this.previousItemData,
                        enumerable: !0
                    }
                }) : this.previousItemData, this.setHiddenValue();
                var eventArgs = {
                    e: eve,
                    item: this.item,
                    itemData: items,
                    previousItem: this.previousSelectedLI,
                    previousItemData: preItems,
                    isInteracted: !!eve,
                    value: this.value,
                    element: this.element
                };
                this.trigger("change", eventArgs);
            }
        }, DropDownList.prototype.setHiddenValue = function() {
            if (isNullOrUndefined(this.value)) this.hiddenElement.innerHTML = ""; else {
                this.hiddenElement.innerHTML = "<option selected>" + this.text + "</option>";
                this.hiddenElement.querySelector("option").setAttribute("value", this.value.toString());
            }
        }, DropDownList.prototype.onFilterUp = function(e) {
            if (this.isValidKey = 40 === e.keyCode || 38 === e.keyCode || this.isValidKey, this.isValidKey) switch (this.isValidKey = !1, 
            e.keyCode) {
              case 38:
              case 40:
                "autocomplete" !== this.getModuleName() || this.isPopupOpen || this.preventAltUp || this.isRequested ? this.preventAutoFill = !1 : (this.preventAutoFill = !0, 
                this.searchLists(e)), this.preventAltUp = !1, e.preventDefault();
                break;

              case 46:
              case 8:
                this.typedString = this.filterInput.value, !this.isPopupOpen && "" !== this.typedString || this.isPopupOpen && this.queryString.length > 0 ? (this.preventAutoFill = !0, 
                this.searchLists(e)) : "" === this.typedString && (this.resetFocusElement(), this.activeIndex = null, 
                "autocomplete" === this.getModuleName() && this.hidePopup()), e.preventDefault();
                break;

              default:
                this.typedString = this.filterInput.value, this.preventAutoFill = !1, this.searchLists(e);
            }
        }, DropDownList.prototype.onFilterDown = function(e) {
            switch (e.keyCode) {
              case 13:
                break;

              case 40:
              case 38:
                this.queryString = this.filterInput.value, e.preventDefault();
                break;

              case 9:
                this.isPopupOpen && e.preventDefault();
                break;

              default:
                this.prevSelectPoints = this.getSelectionPoints(), this.queryString = this.filterInput.value;
            }
        }, DropDownList.prototype.removeFillSelection = function() {
            if (this.isInteracted) {
                var selection = this.getSelectionPoints();
                this.inputElement.setSelectionRange(selection.end, selection.end);
            }
        }, DropDownList.prototype.getSelectionPoints = function() {
            var input = this.inputElement;
            return {
                start: Math.abs(input.selectionStart),
                end: Math.abs(input.selectionEnd)
            };
        }, DropDownList.prototype.searchLists = function(e) {
            var _this = this;
            if (this.isTyped = !0, this.activeIndex = null, this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon)) {
                this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon).style.visibility = "" === this.filterInput.value ? "hidden" : "visible";
            }
            if (this.isDataFetched = !1, this.isFiltering()) {
                var eventArgs_1 = {
                    preventDefaultAction: !1,
                    text: this.filterInput.value,
                    updateData: function(dataSource, query, fields) {
                        eventArgs_1.cancel || (_this.isCustomFilter = !0, _this.filteringAction(dataSource, query, fields));
                    },
                    baseEventArgs: e,
                    cancel: !1
                };
                if (this.trigger("filtering", eventArgs_1), eventArgs_1.cancel) return;
                if (!this.isCustomFilter && !eventArgs_1.preventDefaultAction) {
                    var filterQuery = this.query ? this.query.clone() : new Query(), dataType = this.typeOfData(this.dataSource).typeof;
                    if ((this.dataSource instanceof DataManager || "string" !== dataType) && "number" !== dataType) {
                        var fields = this.fields;
                        filterQuery.where(isNullOrUndefined(fields.text) ? "" : fields.text, "startswith", this.filterInput.value, !0, this.ignoreAccent);
                    } else filterQuery.where("", "startswith", this.filterInput.value, !0, this.ignoreAccent);
                    this.filteringAction(this.dataSource, filterQuery, this.fields);
                }
            }
        }, DropDownList.prototype.filteringAction = function(dataSource, query, fields) {
            isNullOrUndefined(this.filterInput) || (this.beforePopupOpen = !0, "" === this.filterInput.value.trim() ? (this.actionCompleteData.isUpdated = !1, 
            this.isTyped = !1, isNullOrUndefined(this.actionCompleteData.ulElement) || isNullOrUndefined(this.actionCompleteData.list) || this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list), 
            this.isTyped = !0, isNullOrUndefined(this.itemData) || "dropdownlist" !== this.getModuleName() || (this.focusIndexItem(), 
            this.setScrollPosition()), this.isNotSearchList = !0) : (this.isNotSearchList = !1, 
            this.resetList(dataSource, fields, query)));
        }, DropDownList.prototype.setSearchBox = function(popupElement) {
            if (this.isFiltering()) {
                var parentElement = this.createElement("span", {
                    className: dropDownListClasses.filterParent
                });
                this.filterInput = this.createElement("input", {
                    attrs: {
                        type: "text"
                    },
                    className: dropDownListClasses.filterInput
                }), this.element.parentNode.insertBefore(this.filterInput, this.element);
                var backIcon = !1;
                return Browser.isDevice && (backIcon = !0), this.filterInputObj = Input.createInput({
                    element: this.filterInput,
                    buttons: backIcon ? [ dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon ] : [ dropDownListClasses.filterBarClearIcon ],
                    properties: {
                        placeholder: this.filterBarPlaceholder
                    }
                }, this.createElement), append([ this.filterInputObj.container ], parentElement), 
                prepend([ parentElement ], popupElement), attributes(this.filterInput, {
                    "aria-disabled": "false",
                    "aria-owns": this.element.id + "_options",
                    role: "listbox",
                    "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null,
                    autocomplete: "off",
                    autocorrect: "off",
                    autocapitalize: "off",
                    spellcheck: "false"
                }), this.clearIconElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon), 
                !Browser.isDevice && this.clearIconElement && (EventHandler.add(this.clearIconElement, "click", this.clearText, this), 
                this.clearIconElement.style.visibility = "hidden"), Browser.isDevice || (this.searchKeyModule = new KeyboardEvents(this.filterInput, {
                    keyAction: this.keyActionHandler.bind(this),
                    keyConfigs: this.keyConfigure,
                    eventName: "keydown"
                })), EventHandler.add(this.filterInput, "input", this.onInput, this), EventHandler.add(this.filterInput, "keyup", this.onFilterUp, this), 
                EventHandler.add(this.filterInput, "keydown", this.onFilterDown, this), EventHandler.add(this.filterInput, "blur", this.onBlur, this), 
                this.filterInputObj;
            }
            return inputObject;
        }, DropDownList.prototype.onInput = function() {
            this.isValidKey = !0;
        }, DropDownList.prototype.onActionFailure = function(e) {
            _super.prototype.onActionFailure.call(this, e), this.beforePopupOpen && this.renderPopup();
        }, DropDownList.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
            if (this.isNotSearchList) this.isNotSearchList = !1; else if (this.isActive) {
                var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(!0) : null;
                _super.prototype.onActionComplete.call(this, ulElement, list, e), this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && "keydown" === this.searchKeyEvent.type && (this.isRequested = !1, 
                this.keyActionHandler(this.searchKeyEvent), this.searchKeyEvent = null), this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && (this.incrementalSearch(this.searchKeyEvent), 
                this.searchKeyEvent = null), this.list.scrollTop = 0, isNullOrUndefined(ulElement) || attributes(ulElement, {
                    id: this.element.id + "_options",
                    role: "listbox",
                    "aria-hidden": "false"
                }), this.initRemoteRender && (this.initial = !0, this.activeIndex = this.index, 
                this.updateValues(), this.initRemoteRender = !1, this.initial = !1), "autocomplete" !== this.getModuleName() && this.isFiltering() && !this.isTyped && (this.actionCompleteData.isUpdated && (this.isCustomFilter || this.isFilterFocus || !(this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) && 0 !== this.dataSource.length)) || (this.actionCompleteData = {
                    ulElement: ulElement.cloneNode(!0),
                    list: list,
                    isUpdated: !0
                }), this.addNewItem(list, selectedItem), isNullOrUndefined(this.itemData) || this.focusIndexItem()), 
                this.beforePopupOpen && this.renderPopup();
            }
        }, DropDownList.prototype.addNewItem = function(listData, newElement) {
            var _this = this;
            if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {
                var value_1 = this.getItemData().value;
                listData.some(function(data) {
                    return ("string" == typeof data || "number" == typeof data) && data === value_1 || getValue(_this.fields.value, data) === value_1;
                }) || this.addItem(this.itemData);
            }
        }, DropDownList.prototype.updateActionCompleteData = function(li, item) {
            "autocomplete" !== this.getModuleName() && this.actionCompleteData.ulElement && (this.actionCompleteData.ulElement.appendChild(li.cloneNode(!0)), 
            this.isFiltering() && this.actionCompleteData.list.push(item));
        }, DropDownList.prototype.focusIndexItem = function() {
            var value = this.getItemData().value;
            this.activeIndex = this.getIndexByValue(value);
            var element = this.list.querySelector('[data-value="' + value + '"]');
            this.selectedLI = element, this.activeItem(element), this.removeFocus();
        }, DropDownList.prototype.updateSelection = function() {
            var selectedItem = this.list.querySelector("." + dropDownBaseClasses.selected);
            selectedItem ? (this.setProperties({
                index: this.getIndexByValue(selectedItem.getAttribute("data-value"))
            }), this.activeIndex = this.index) : (this.removeFocus(), this.list.querySelector("." + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus));
        }, DropDownList.prototype.removeFocus = function() {
            var highlightedItem = this.list.querySelectorAll("." + dropDownListClasses.focus);
            highlightedItem && highlightedItem.length && removeClass(highlightedItem, dropDownListClasses.focus);
        }, DropDownList.prototype.renderPopup = function() {
            if (this.popupObj && document.body.contains(this.popupObj.element)) this.refreshPopup(); else {
                var args = {
                    cancel: !1
                };
                if (this.trigger("beforeOpen", args), !args.cancel) {
                    var popupEle = this.createElement("div", {
                        id: this.element.id + "_popup",
                        className: "e-ddl e-popup " + (null != this.cssClass ? this.cssClass : "")
                    }), searchBox = this.setSearchBox(popupEle);
                    if (this.listHeight = formatUnit(this.popupHeight), this.headerTemplate && this.setHeaderTemplate(popupEle), 
                    append([ this.list ], popupEle), this.footerTemplate && this.setFooterTemplate(popupEle), 
                    document.body.appendChild(popupEle), popupEle.style.visibility = "hidden", "auto" !== this.popupHeight) {
                        if (this.searchBoxHeight = 0, isNullOrUndefined(searchBox.container) || (this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height, 
                        this.listHeight = (parseInt(this.listHeight, 10) - this.searchBoxHeight).toString() + "px"), 
                        this.headerTemplate) {
                            var height = Math.round(this.header.getBoundingClientRect().height);
                            this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + "px";
                        }
                        if (this.footerTemplate) {
                            height = Math.round(this.footer.getBoundingClientRect().height);
                            this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + "px";
                        }
                        this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + "px", 
                        popupEle.style.maxHeight = formatUnit(this.popupHeight);
                    } else popupEle.style.height = "auto";
                    var left, offsetValue = 0;
                    if (!isNullOrUndefined(this.selectedLI) && !isNullOrUndefined(this.activeIndex) && this.activeIndex >= 0 ? this.setScrollPosition() : this.list.scrollTop = 0, 
                    Browser.isDevice && !this.allowFiltering && ("dropdownlist" === this.getModuleName() || this.isDropDownClick && "combobox" === this.getModuleName())) {
                        offsetValue = this.getOffsetValue(popupEle);
                        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
                        left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10));
                    }
                    this.getFocusElement(), this.createPopup(popupEle, offsetValue, left), this.checkCollision(popupEle), 
                    Browser.isDevice && (this.popupObj.element.classList.add(dropDownListClasses.device), 
                    ("dropdownlist" === this.getModuleName() || "combobox" === this.getModuleName() && !this.allowFiltering && this.isDropDownClick) && (this.popupObj.collision = {
                        X: "fit",
                        Y: "fit"
                    }), this.isFilterLayout() && (this.popupObj.element.classList.add(dropDownListClasses.mobileFilter), 
                    this.popupObj.position = {
                        X: 0,
                        Y: 0
                    }, this.popupObj.dataBind(), attributes(this.popupObj.element, {
                        style: "left:0px;right:0px;top:0px;bottom:0px;"
                    }), addClass([ document.body, this.popupObj.element ], dropDownListClasses.popupFullScreen), 
                    this.setSearchBoxPosition(), this.backIconElement = searchBox.container.querySelector(".e-back-icon"), 
                    this.clearIconElement = searchBox.container.querySelector("." + dropDownListClasses.clearIcon), 
                    EventHandler.add(this.backIconElement, "click", this.clickOnBackIcon, this), EventHandler.add(this.clearIconElement, "click", this.clearText, this))), 
                    popupEle.style.visibility = "visible", addClass([ popupEle ], "e-popup-close");
                    for (var _i = 0, scrollParentElements_1 = this.popupObj.getScrollableParent(this.inputWrapper.container); _i < scrollParentElements_1.length; _i++) {
                        var element = scrollParentElements_1[_i];
                        EventHandler.add(element, "scroll", this.scrollHandler, this);
                    }
                    Browser.isDevice && this.isFilterLayout() && EventHandler.add(this.list, "scroll", this.listScroll, this), 
                    attributes(this.targetElement(), {
                        "aria-expanded": "true"
                    });
                    addClass([ this.isFiltering() ? this.filterInput.parentElement : this.inputWrapper.container ], [ dropDownListClasses.inputFocus ]);
                    this.beforePopupOpen = !0;
                    var eventArgs = {
                        popup: this.popupObj,
                        cancel: !1,
                        animation: {
                            name: "FadeIn",
                            duration: 100
                        }
                    };
                    this.trigger("open", eventArgs), eventArgs.cancel || (addClass([ this.inputWrapper.container ], [ dropDownListClasses.iconAnimation ]), 
                    this.popupObj.show(new Animation(eventArgs.animation), 1e3 === this.zIndex ? this.element : null));
                }
            }
        }, DropDownList.prototype.checkCollision = function(popupEle) {
            if (!Browser.isDevice || Browser.isDevice && "dropdownlist" !== this.getModuleName() && !this.isDropDownClick) {
                isCollide(popupEle).length > 0 && (popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px");
            }
        }, DropDownList.prototype.getOffsetValue = function(popupEle) {
            var popupStyles = getComputedStyle(popupEle), borderTop = parseInt(popupStyles.borderTop, 10), borderBottom = parseInt(popupStyles.borderBottom, 10);
            return this.setPopupPosition(borderTop + borderBottom);
        }, DropDownList.prototype.createPopup = function(element, offsetValue, left) {
            var _this = this;
            this.popupObj = new Popup(element, {
                width: this.setWidth(),
                targetType: "relative",
                relateTo: this.inputWrapper.container,
                collision: {
                    X: "flip",
                    Y: "flip"
                },
                offsetY: offsetValue,
                enableRtl: this.enableRtl,
                offsetX: left,
                position: {
                    X: "left",
                    Y: "bottom"
                },
                zIndex: this.zIndex,
                close: function() {
                    _this.isDocumentClick || _this.focusDropDown(), _this.isDocumentClick = !1, _this.destroyPopup();
                },
                open: function() {
                    EventHandler.add(document, "mousedown", _this.onDocumentClick, _this), _this.isPopupOpen = !0, 
                    _this.isFilterLayout() && (removeClass([ _this.inputWrapper.container ], [ dropDownListClasses.inputFocus ]), 
                    _this.isFilterFocus = !0, _this.filterInput.focus(), _this.inputWrapper.clearButton && addClass([ _this.inputWrapper.clearButton ], dropDownListClasses.clearIconHide)), 
                    _this.activeStateChange();
                }
            });
        }, DropDownList.prototype.isEmptyList = function() {
            return !isNullOrUndefined(this.liCollections) && 0 === this.liCollections.length;
        }, DropDownList.prototype.getFocusElement = function() {}, DropDownList.prototype.isFilterLayout = function() {
            return "dropdownlist" === this.getModuleName() && this.allowFiltering;
        }, DropDownList.prototype.scrollHandler = function() {
            Browser.isDevice && ("dropdownlist" === this.getModuleName() && !this.isFilterLayout() || "combobox" === this.getModuleName() && !this.allowFiltering && this.isDropDownClick) && this.hidePopup(), 
            this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) && (this.fixedHeaderElement.style.zIndex = "0", 
            this.fixedHeaderElement.style.display = "none");
        }, DropDownList.prototype.setSearchBoxPosition = function() {
            var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
            this.popupObj.element.style.maxHeight = "100%", this.popupObj.element.style.width = "100%", 
            this.list.style.maxHeight = window.innerHeight - searchBoxHeight + "px", this.list.style.height = window.innerHeight - searchBoxHeight + "px";
            var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
            detach(this.filterInput), clearElement.parentElement.insertBefore(this.filterInput, clearElement);
        }, DropDownList.prototype.setPopupPosition = function(border) {
            var offsetValue, popupOffset = border, selectedLI = this.list.querySelector("." + dropDownListClasses.focus) || this.selectedLI, firstItem = this.isEmptyList() ? this.list : this.liCollections[0], lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1], liHeight = firstItem.getBoundingClientRect().height, listHeight = this.list.offsetHeight / 2, height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
            if (lastItem.offsetTop - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {
                var count = this.list.offsetHeight / liHeight, paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
                offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom, 
                this.list.scrollTop = selectedLI.offsetTop;
            } else height > listHeight ? (offsetValue = listHeight - liHeight / 2, this.list.scrollTop = height - listHeight + liHeight / 2) : offsetValue = height;
            return -(offsetValue = offsetValue + liHeight + popupOffset - (liHeight - this.inputWrapper.container.offsetHeight) / 2);
        }, DropDownList.prototype.setWidth = function() {
            var width = formatUnit(this.popupWidth);
            if (width.indexOf("%") > -1) {
                width = (this.inputWrapper.container.offsetWidth * parseFloat(width) / 100).toString() + "px";
            }
            if (Browser.isDevice && !this.allowFiltering && ("dropdownlist" === this.getModuleName() || this.isDropDownClick && "combobox" === this.getModuleName())) {
                var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
                width = parseInt(width, 10) + 2 * (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) + "px";
            }
            return width;
        }, DropDownList.prototype.scrollBottom = function(isInitial) {
            var currentOffset = this.list.offsetHeight, nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop, nextOffset = this.list.scrollTop + nextBottom - currentOffset;
            nextOffset = isInitial ? nextOffset + 2 * parseInt(getComputedStyle(this.list).paddingTop, 10) : nextOffset;
            var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
            boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange, 
            0 === this.activeIndex ? this.list.scrollTop = 0 : (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) && (this.list.scrollTop = nextOffset);
        }, DropDownList.prototype.scrollTop = function() {
            var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
            this.selectedLI.offsetTop, this.selectedLI.offsetHeight, this.list.scrollTop;
            nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
            var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
            0 === this.activeIndex ? this.list.scrollTop = 0 : nextOffset < 0 ? this.list.scrollTop = this.list.scrollTop + nextOffset : boxRange > 0 && this.list.offsetHeight > boxRange || (this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0));
        }, DropDownList.prototype.isEditTextBox = function() {
            return !1;
        }, DropDownList.prototype.isFiltering = function() {
            return this.allowFiltering;
        }, DropDownList.prototype.isPopupButton = function() {
            return !0;
        }, DropDownList.prototype.setScrollPosition = function(e) {
            if (isNullOrUndefined(e)) this.scrollBottom(!0); else switch (e.action) {
              case "pageDown":
              case "down":
              case "end":
                this.scrollBottom();
                break;

              default:
                this.scrollTop();
            }
        }, DropDownList.prototype.clearText = function() {
            this.filterInput.value = "", this.searchLists(null);
        }, DropDownList.prototype.listScroll = function() {
            this.filterInput.blur();
        }, DropDownList.prototype.closePopup = function(delay) {
            if (this.isTyped = !1, this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen) {
                EventHandler.remove(document, "mousedown", this.onDocumentClick), this.isActive = !1, 
                this.filterInputObj = null, this.isDropDownClick = !1, this.preventAutoFill = !1;
                for (var _i = 0, scrollableParentElements_1 = this.popupObj.getScrollableParent(this.inputWrapper.container); _i < scrollableParentElements_1.length; _i++) {
                    var element = scrollableParentElements_1[_i];
                    EventHandler.remove(element, "scroll", this.scrollHandler);
                }
                Browser.isDevice && this.isFilterLayout() && (removeClass([ document.body, this.popupObj.element ], dropDownListClasses.popupFullScreen), 
                EventHandler.remove(this.list, "scroll", this.listScroll)), this.isFilterLayout() && (Browser.isDevice || (this.searchKeyModule.destroy(), 
                this.clearIconElement && EventHandler.remove(this.clearIconElement, "click", this.clearText)), 
                this.backIconElement && (EventHandler.remove(this.backIconElement, "click", this.clickOnBackIcon), 
                EventHandler.remove(this.clearIconElement, "click", this.clearText)), EventHandler.remove(this.filterInput, "input", this.onInput), 
                EventHandler.remove(this.filterInput, "keyup", this.onFilterUp), EventHandler.remove(this.filterInput, "keydown", this.onFilterDown), 
                EventHandler.remove(this.filterInput, "blur", this.onBlur), this.filterInput = null), 
                attributes(this.targetElement(), {
                    "aria-expanded": "false",
                    "aria-activedescendant": null
                }), this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation), 
                this.isFiltering() && (this.actionCompleteData.isUpdated = !1), this.beforePopupOpen = !1;
                var animModel = {
                    name: "FadeOut",
                    duration: 100,
                    delay: delay || 0
                }, eventArgs = {
                    popup: this.popupObj,
                    cancel: !1,
                    animation: animModel
                };
                this.trigger("close", eventArgs), eventArgs.cancel || ("autocomplete" === this.getModuleName() && this.rippleFun(), 
                this.isPopupOpen ? this.popupObj.hide(new Animation(eventArgs.animation)) : this.destroyPopup());
            }
        }, DropDownList.prototype.destroyPopup = function() {
            this.isPopupOpen = !1, this.isFilterFocus = !1, this.popupObj.destroy(), detach(this.popupObj.element);
        }, DropDownList.prototype.clickOnBackIcon = function() {
            this.hidePopup(), this.focusIn();
        }, DropDownList.prototype.render = function() {
            "INPUT" === this.element.tagName ? this.inputElement = this.element : (this.inputElement = this.createElement("input"), 
            this.element.tagName !== this.getNgDirective() && (this.element.style.display = "none"), 
            this.element.parentElement.insertBefore(this.inputElement, this.element), this.preventTabIndex(this.inputElement)), 
            this.inputWrapper = Input.createInput({
                element: this.inputElement,
                buttons: this.isPopupButton() ? [ dropDownListClasses.icon ] : null,
                floatLabelType: this.floatLabelType,
                properties: {
                    readonly: "dropdownlist" === this.getModuleName() || this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton
                }
            }, this.createElement), this.element.tagName === this.getNgDirective() ? this.element.appendChild(this.inputWrapper.container) : this.inputElement.parentElement.insertBefore(this.element, this.inputElement), 
            this.hiddenElement = this.createElement("select", {
                attrs: {
                    "aria-hidden": "true",
                    tabindex: "-1",
                    class: dropDownListClasses.hiddenElement
                }
            }), prepend([ this.hiddenElement ], this.inputWrapper.container), this.validationAttribute(this.element, this.hiddenElement), 
            this.setFields(), this.inputWrapper.container.style.width = formatUnit(this.width), 
            this.inputWrapper.container.classList.add("e-ddl"), this.wireEvent(), this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0", 
            this.element.removeAttribute("tabindex");
            var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
            this.element.id = id, this.hiddenElement.id = id + "_hidden", this.targetElement().setAttribute("tabindex", this.tabIndex), 
            attributes(this.targetElement(), this.getAriaAttributes());
            for (var invalidAttr = [ "class", "style", "id" ], htmlAttr = {}, a = 0; a < this.element.attributes.length; a++) -1 === invalidAttr.indexOf(this.element.attributes[a].name) && (htmlAttr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name));
            if (extend(htmlAttr, this.htmlAttributes, htmlAttr), this.setProperties({
                htmlAttributes: htmlAttr
            }, !0), this.setHTMLAttributes(), null !== this.value || null !== this.activeIndex || null !== this.text) this.initValue(); else if ("SELECT" === this.element.tagName && this.element.options[0]) {
                var selectElement = this.element;
                this.value = selectElement.options[selectElement.selectedIndex].value, this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent, 
                this.initValue();
            }
            this.preventTabIndex(this.element), this.enabled || (this.targetElement().tabIndex = -1), 
            this.initial = !1, this.element.style.opacity = "", this.inputElement.onselect = function(e) {
                e.stopImmediatePropagation();
            }, this.inputElement.onchange = function(e) {
                e.stopImmediatePropagation();
            }, this.element.hasAttribute("autofocus") && this.focusIn();
        }, DropDownList.prototype.setFooterTemplate = function(popupEle) {
            this.footer ? this.footer.innerHTML = "" : (this.footer = this.createElement("div"), 
            addClass([ this.footer ], dropDownListClasses.footer));
            for (var _i = 0, _a = compile$$1(this.footerTemplate)({}); _i < _a.length; _i++) {
                var item = _a[_i];
                this.footer.appendChild(item);
            }
            append([ this.footer ], popupEle);
        }, DropDownList.prototype.setHeaderTemplate = function(popupEle) {
            this.header ? this.header.innerHTML = "" : (this.header = this.createElement("div"), 
            addClass([ this.header ], dropDownListClasses.header));
            for (var _i = 0, _a = compile$$1(this.headerTemplate)({}); _i < _a.length; _i++) {
                var item = _a[_i];
                this.header.appendChild(item);
            }
            var contentEle = popupEle.querySelector("div.e-content");
            popupEle.insertBefore(this.header, contentEle);
        }, DropDownList.prototype.setOldText = function(text) {
            this.text = text;
        }, DropDownList.prototype.setOldValue = function(value) {
            this.value = value;
        }, DropDownList.prototype.refreshPopup = function() {
            isNullOrUndefined(this.popupObj) || !document.body.contains(this.popupObj.element) || (!this.allowFiltering || Browser.isDevice && this.isFilterLayout()) && "autocomplete" !== this.getModuleName() || this.popupObj.refreshPosition(this.inputWrapper.container);
        }, DropDownList.prototype.updateDataSource = function(props) {
            if (this.clear(null, props), (isNullOrUndefined(props) || !isNullOrUndefined(props.dataSource) && (props.dataSource instanceof DataManager || 0 !== props.dataSource.length)) && this.resetList(this.dataSource), 
            !this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
                this.itemData = this.getDataByValue(this.value);
                var dataItem = this.getItemData();
                this.setProperties({
                    value: dataItem.value,
                    text: dataItem.text
                });
            }
        }, DropDownList.prototype.onPropertyChanged = function(newProp, oldProp) {
            "dropdownlist" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "query":
                  case "dataSource":
                    break;

                  case "htmlAttributes":
                    this.setHTMLAttributes();
                    break;

                  case "width":
                    setStyleAttribute(this.inputWrapper.container, {
                        width: formatUnit(newProp.width)
                    });
                    break;

                  case "placeholder":
                    Input.setPlaceholder(newProp.placeholder, this.inputElement);
                    break;

                  case "filterBarPlaceholder":
                    this.filterInput && Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
                    break;

                  case "readonly":
                    "dropdownlist" !== this.getModuleName() && Input.setReadonly(newProp.readonly, this.inputElement);
                    break;

                  case "cssClass":
                    this.setCssClass(newProp, oldProp);
                    break;

                  case "enableRtl":
                    this.setEnableRtl();
                    break;

                  case "enabled":
                    this.setEnable();
                    break;

                  case "text":
                    if (null === newProp.text) {
                        this.clear();
                        break;
                    }
                    if (this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
                    this.renderList()), !this.initRemoteRender) {
                        var li = this.getElementByText(newProp.text);
                        this.isValidLI(li) ? this.setSelection(li, null) : this.setOldText(oldProp.text);
                    }
                    break;

                  case "value":
                    if (null === newProp.value) {
                        this.clear();
                        break;
                    }
                    if (this.notify("beforeValueChange", {
                        newProp: newProp
                    }), this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
                    this.renderList()), !this.initRemoteRender) {
                        var item = this.getElementByValue(newProp.value);
                        this.isValidLI(item) ? this.setSelection(item, null) : this.setOldValue(oldProp.value);
                    }
                    break;

                  case "index":
                    if (null === newProp.index) {
                        this.clear();
                        break;
                    }
                    if (this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
                    this.renderList()), !this.initRemoteRender) {
                        var element = this.liCollections[newProp.index];
                        this.isValidLI(element) ? this.setSelection(element, null) : this.index = oldProp.index;
                    }
                    break;

                  case "footerTemplate":
                    this.popupObj && this.setFooterTemplate(this.popupObj.element);
                    break;

                  case "headerTemplate":
                    this.popupObj && this.setHeaderTemplate(this.popupObj.element);
                    break;

                  case "valueTemplate":
                    isNullOrUndefined(this.itemData) || null == this.valueTemplate || this.setValueTemplate();
                    break;

                  case "floatLabelType":
                    Input.removeFloating(this.inputWrapper), Input.addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);
                    break;

                  case "showClearButton":
                    Input.setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement), 
                    this.bindClearEvent();
                    break;

                  default:
                    var ddlProps = void 0;
                    ddlProps = this.getPropObject(prop, newProp, oldProp), _super.prototype.onPropertyChanged.call(this, ddlProps.newProperty, ddlProps.oldProperty);
                }
            }
        }, DropDownList.prototype.setCssClass = function(newProp, oldProp) {
            this.inputWrapper.container.classList.remove(oldProp.cssClass), Input.setCssClass(newProp.cssClass, [ this.inputWrapper.container ]), 
            this.popupObj && (this.popupObj.element.classList.remove(oldProp.cssClass), this.popupObj.element.classList.add(newProp.cssClass));
        }, DropDownList.prototype.getModuleName = function() {
            return "dropdownlist";
        }, DropDownList.prototype.showPopup = function() {
            if (this.enabled) if (this.beforePopupOpen) this.refreshPopup(); else {
                if (this.beforePopupOpen = !0, this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0] ? (this.isActive = !0, 
                this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, !0)) : (isNullOrUndefined(this.list) || !isUndefined(this.list) && this.list.classList.contains(dropDownBaseClasses.noData)) && this.renderList(), 
                Browser.isDevice && this.isFilterLayout()) {
                    var proxy_2 = this;
                    window.onpopstate = function() {
                        proxy_2.hidePopup();
                    }, history.pushState({}, "");
                }
                isNullOrUndefined(this.list.children[0]) && !this.list.classList.contains(dropDownBaseClasses.noData) || this.renderPopup(), 
                attributes(this.targetElement(), {
                    "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
                });
            }
        }, DropDownList.prototype.hidePopup = function() {
            this.isEscapeKey && "dropdownlist" === this.getModuleName() && (Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.isEscapeKey = !1, isNullOrUndefined(this.index) ? this.resetSelection() : (this.selectedLI = this.liCollections[this.index], 
            this.updateSelectedItem(this.selectedLI, null, !0), this.valueTemplate && null !== this.itemData && this.setValueTemplate())), 
            this.closePopup();
            var dataItem = this.getItemData();
            "" !== this.inputElement.value.trim() || this.isInteracted || !this.isSelectCustom && (isNullOrUndefined(this.selectedLI) || this.inputElement.value === dataItem.text) || (this.isSelectCustom = !1, 
            this.clear());
        }, DropDownList.prototype.focusIn = function(e) {
            if (this.enabled && !this.targetElement().classList.contains(dropDownListClasses.disable)) {
                var isFocused = !1;
                this.preventFocus && Browser.isDevice && (this.inputWrapper.container.tabIndex = 1, 
                this.inputWrapper.container.focus(), this.preventFocus = !1, isFocused = !0), isFocused || this.targetElement().focus(), 
                addClass([ this.inputWrapper.container ], [ dropDownListClasses.inputFocus ]), this.onFocus(e);
            }
        }, DropDownList.prototype.focusOut = function() {
            this.enabled && (this.isTyped = !0, this.hidePopup(), this.targetElement().blur(), 
            removeClass([ this.inputWrapper.container ], [ dropDownListClasses.inputFocus ]));
        }, DropDownList.prototype.destroy = function() {
            var _this = this;
            if (this.isActive = !1, this.hidePopup(), this.unWireEvent(), this.list && this.unWireListEvents(), 
            !this.element || this.element.classList.contains("e-" + this.getModuleName())) {
                [ "readonly", "aria-disabled", "aria-placeholder", "placeholder", "aria-owns", "aria-labelledby", "aria-haspopup", "aria-expanded", "aria-activedescendant", "autocomplete", "aria-readonly", "autocorrect", "autocapitalize", "spellcheck", "aria-autocomplete" ].forEach(function(value) {
                    _this.inputElement.removeAttribute(value);
                }), this.inputElement.setAttribute("tabindex", this.tabIndex), this.inputElement.classList.remove("e-input"), 
                Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
                this.element.style.display = "block", this.inputWrapper.container.parentElement.tagName === this.getNgDirective() ? detach(this.inputWrapper.container) : (this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container), 
                detach(this.inputWrapper.container)), _super.prototype.destroy.call(this);
            }
        }, DropDownList.prototype.getItems = function() {
            return this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
            this.renderList()), this.ulElement ? _super.prototype.getItems.call(this) : [];
        }, __decorate$30([ Property(null) ], DropDownList.prototype, "cssClass", void 0), 
        __decorate$30([ Property("100%") ], DropDownList.prototype, "width", void 0), __decorate$30([ Property("300px") ], DropDownList.prototype, "popupHeight", void 0), 
        __decorate$30([ Property("100%") ], DropDownList.prototype, "popupWidth", void 0), 
        __decorate$30([ Property(null) ], DropDownList.prototype, "placeholder", void 0), 
        __decorate$30([ Property(null) ], DropDownList.prototype, "filterBarPlaceholder", void 0), 
        __decorate$30([ Property({}) ], DropDownList.prototype, "htmlAttributes", void 0), 
        __decorate$30([ Property(null) ], DropDownList.prototype, "query", void 0), __decorate$30([ Property(null) ], DropDownList.prototype, "valueTemplate", void 0), 
        __decorate$30([ Property(null) ], DropDownList.prototype, "headerTemplate", void 0), 
        __decorate$30([ Property(null) ], DropDownList.prototype, "footerTemplate", void 0), 
        __decorate$30([ Property(!1) ], DropDownList.prototype, "allowFiltering", void 0), 
        __decorate$30([ Property(!1) ], DropDownList.prototype, "readonly", void 0), __decorate$30([ Property(null) ], DropDownList.prototype, "text", void 0), 
        __decorate$30([ Property(null) ], DropDownList.prototype, "value", void 0), __decorate$30([ Property(null) ], DropDownList.prototype, "index", void 0), 
        __decorate$30([ Property("Never") ], DropDownList.prototype, "floatLabelType", void 0), 
        __decorate$30([ Property(!1) ], DropDownList.prototype, "showClearButton", void 0), 
        __decorate$30([ Event() ], DropDownList.prototype, "filtering", void 0), __decorate$30([ Event() ], DropDownList.prototype, "change", void 0), 
        __decorate$30([ Event() ], DropDownList.prototype, "beforeOpen", void 0), __decorate$30([ Event() ], DropDownList.prototype, "open", void 0), 
        __decorate$30([ Event() ], DropDownList.prototype, "close", void 0), __decorate$30([ Event() ], DropDownList.prototype, "blur", void 0), 
        __decorate$30([ Event() ], DropDownList.prototype, "focus", void 0), DropDownList = __decorate$30([ NotifyPropertyChanges ], DropDownList);
    }(DropDownBase), __extends$43 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$31 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    dropDownListClasses.root = "e-combobox";
    var inputObject$1 = {
        container: null,
        buttons: []
    }, ComboBox = function(_super) {
        function ComboBox(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$43(ComboBox, _super), ComboBox.prototype.preRender = function() {
            _super.prototype.preRender.call(this);
        }, ComboBox.prototype.wireEvent = function() {
            "combobox" === this.getModuleName() && (EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.preventBlur, this), 
            EventHandler.add(this.inputWrapper.container, "blur", this.onBlur, this)), isNullOrUndefined(this.inputWrapper.buttons[0]) || EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick, this), 
            EventHandler.add(this.inputElement, "focus", this.targetFocus, this), this.readonly || (EventHandler.add(this.inputElement, "input", this.onInput, this), 
            EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this), EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this)), 
            this.bindCommonEvent();
        }, ComboBox.prototype.preventBlur = function(e) {
            (this.allowFiltering || document.activeElement === this.inputElement || document.activeElement.classList.contains(dropDownListClasses.input) || !Browser.isDevice) && Browser.isDevice || e.preventDefault();
        }, ComboBox.prototype.targetElement = function() {
            return this.inputElement;
        }, ComboBox.prototype.setOldText = function(text) {
            Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.customValue(), this.removeSelection();
        }, ComboBox.prototype.setOldValue = function(value) {
            this.allowCustom ? this.valueMuteChange(this.value) : this.valueMuteChange(null), 
            this.removeSelection(), this.setHiddenValue();
        }, ComboBox.prototype.valueMuteChange = function(value) {
            var inputValue = isNullOrUndefined(value) ? null : value.toString();
            Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.setProperties({
                value: value,
                text: value,
                index: null
            }, !0), this.activeIndex = this.index;
            var fields = this.fields, dataItem = {};
            dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString(), dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString(), 
            this.itemData = dataItem, this.item = null, this.previousValue !== this.value && this.detachChangeEvent(null);
        }, ComboBox.prototype.updateValues = function() {
            if (isNullOrUndefined(this.value)) if (this.text && isNullOrUndefined(this.value)) {
                (li = this.getElementByText(this.text)) ? this.setSelection(li, null) : (Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.customValue());
            } else this.setSelection(this.liCollections[this.activeIndex], null); else {
                var li;
                (li = this.getElementByValue(this.value)) ? this.setSelection(li, null) : this.allowCustom ? this.valueMuteChange(this.value) : this.valueMuteChange(null);
            }
            this.setHiddenValue(), Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }, ComboBox.prototype.updateIconState = function() {
            this.showClearButton && ("" === this.inputElement.value || this.readonly ? addClass([ this.inputWrapper.clearButton ], dropDownListClasses.clearIconHide) : removeClass([ this.inputWrapper.clearButton ], dropDownListClasses.clearIconHide));
        }, ComboBox.prototype.getAriaAttributes = function() {
            return {
                "aria-owns": this.element.id + "_options",
                role: "combobox",
                "aria-autocomplete": "both",
                "aria-labelledby": this.hiddenElement.id,
                "aria-hasPopup": "true",
                "aria-expanded": "false",
                "aria-readonly": this.readonly.toString(),
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false"
            };
        }, ComboBox.prototype.searchLists = function(e) {
            this.isTyped = !0, this.isFiltering() ? (_super.prototype.searchLists.call(this, e), 
            "" === this.filterInput.value.trim() && this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li))) : (this.ulElement && "" === this.inputElement.value && this.preventAutoFill && this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li)), 
            this.incrementalSearch(e));
        }, ComboBox.prototype.getNgDirective = function() {
            return "EJS-COMBOBOX";
        }, ComboBox.prototype.setSearchBox = function() {
            return this.filterInput = this.inputElement, this.isFiltering() ? this.inputWrapper : inputObject$1;
        }, ComboBox.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
            _super.prototype.onActionComplete.call(this, ulElement, list, e), this.isSelectCustom && this.removeSelection(), 
            !this.preventAutoFill && "combobox" === this.getModuleName() && this.isTyped && this.inlineSearch();
        }, ComboBox.prototype.getFocusElement = function() {
            var dataItem = this.isSelectCustom ? {
                text: ""
            } : this.getItemData(), selected = this.list.querySelector("." + dropDownListClasses.selected);
            if (dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) return selected;
            if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {
                var activeElement = Search$1(this.inputElement.value, this.liCollections, "StartsWith", !0).item;
                if (isNullOrUndefined(activeElement)) this.isSelectCustom && "" !== this.inputElement.value.trim() && (this.removeFocus(), 
                this.list.scrollTop = 0); else {
                    var count = this.getIndexByValue(activeElement.getAttribute("data-value")) - 1, height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10);
                    if (!isNaN(height) && "autocomplete" !== this.getModuleName()) {
                        this.removeFocus();
                        var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
                        this.list.scrollTop = count * height + fixedHead, addClass([ activeElement ], dropDownListClasses.focus);
                    }
                }
                return activeElement;
            }
            return null;
        }, ComboBox.prototype.setValue = function(e) {
            return e && "keydown" === e.type && "enter" === e.action && this.removeFillSelection(), 
            this.autofill && "combobox" === this.getModuleName() && e && "keydown" === e.type && "enter" !== e.action ? (this.preventAutoFill = !1, 
            this.inlineSearch(e), !1) : _super.prototype.setValue.call(this, e);
        }, ComboBox.prototype.showSpinner = function() {
            isNullOrUndefined(this.spinnerElement) && (this.spinnerElement = "autocomplete" === this.getModuleName() ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan("e-input-group-icon e-atc-spinner-icon", this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton, 
            addClass([ this.spinnerElement ], dropDownListClasses.disableIcon), createSpinner({
                target: this.spinnerElement,
                width: Browser.isDevice ? "16px" : "14px"
            }, this.createElement), showSpinner(this.spinnerElement));
        }, ComboBox.prototype.hideSpinner = function() {
            isNullOrUndefined(this.spinnerElement) || (hideSpinner(this.spinnerElement), removeClass([ this.spinnerElement ], dropDownListClasses.disableIcon), 
            this.spinnerElement.classList.contains("e-atc-spinner-icon") ? detach(this.spinnerElement) : this.spinnerElement.innerHTML = "", 
            this.spinnerElement = null);
        }, ComboBox.prototype.setAutoFill = function(activeElement, isHover) {
            if (isHover || this.setHoverList(activeElement), this.autofill && !this.preventAutoFill) {
                var currentValue = this.getTextByValue(activeElement.getAttribute("data-value")).toString(), currentFillValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
                "combobox" === this.getModuleName() && (this.isSelected || this.previousValue === currentFillValue ? this.updateSelectedItem(activeElement, null, !0) : (this.updateSelectedItem(activeElement, null), 
                this.isSelected = !0, this.previousValue = this.getFormattedValue(activeElement.getAttribute("data-value")))), 
                this.isAndroidAutoFill(currentValue) || this.setAutoFillSelection(currentValue);
            }
        }, ComboBox.prototype.isAndroidAutoFill = function(value) {
            if (Browser.isAndroid) {
                var currentPoints = this.getSelectionPoints(), prevEnd = this.prevSelectPoints.end, curEnd = currentPoints.end, prevStart = this.prevSelectPoints.start, curStart = currentPoints.start;
                return 0 !== prevEnd && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart);
            }
            return !1;
        }, ComboBox.prototype.clear = function(e, property) {
            (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) && _super.prototype.clear.call(this, e);
        }, ComboBox.prototype.isSelectFocusItem = function(element) {
            return !isNullOrUndefined(element);
        }, ComboBox.prototype.inlineSearch = function(e) {
            var isKeyNavigate = e && ("down" === e.action || "up" === e.action || "home" === e.action || "end" === e.action || "pageUp" === e.action || "pageDown" === e.action), activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();
            if (isNullOrUndefined(activeElement)) if ("" === this.inputElement.value) {
                this.activeIndex = null, this.list.scrollTop = 0;
                var focusItem = this.list.querySelector("." + dropDownListClasses.li);
                this.setHoverList(focusItem);
            } else this.activeIndex = null, this.removeSelection(), this.removeFocus(); else {
                if (!isKeyNavigate) {
                    var value = this.getFormattedValue(activeElement.getAttribute("data-value"));
                    this.activeIndex = this.getIndexByValue(value), this.activeIndex = isNullOrUndefined(this.activeIndex) ? null : this.activeIndex;
                }
                this.preventAutoFill = "" !== this.inputElement.value && this.preventAutoFill, this.setAutoFill(activeElement, isKeyNavigate);
            }
        }, ComboBox.prototype.incrementalSearch = function(e) {
            this.showPopup(), isNullOrUndefined(this.listData) || (this.inlineSearch(e), e.preventDefault());
        }, ComboBox.prototype.setAutoFillSelection = function(currentValue) {
            var selection = this.getSelectionPoints(), value = this.inputElement.value.substr(0, selection.start);
            if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
                var inputValue = value + currentValue.substr(value.length, currentValue.length);
                Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
            } else Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.inputElement.setSelectionRange(0, this.inputElement.value.length);
        }, ComboBox.prototype.getValueByText = function(text) {
            return _super.prototype.getValueByText.call(this, text, !0, this.ignoreAccent);
        }, ComboBox.prototype.unWireEvent = function() {
            "combobox" === this.getModuleName() && (EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.preventBlur), 
            EventHandler.remove(this.inputWrapper.container, "blur", this.onBlur)), isNullOrUndefined(this.inputWrapper.buttons[0]) || EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick), 
            EventHandler.remove(this.inputElement, "focus", this.targetFocus), this.readonly || (EventHandler.remove(this.inputElement, "input", this.onInput), 
            EventHandler.remove(this.inputElement, "keyup", this.onFilterUp), EventHandler.remove(this.inputElement, "keydown", this.onFilterDown)), 
            this.unBindCommonEvent();
        }, ComboBox.prototype.setSelection = function(li, e) {
            _super.prototype.setSelection.call(this, li, e), isNullOrUndefined(li) || this.autofill || this.isDropDownClick || this.removeFocus();
        }, ComboBox.prototype.selectCurrentItem = function(e) {
            var li;
            this.isPopupOpen && ((li = this.list.querySelector("." + dropDownListClasses.focus)) && (this.setSelection(li, e), 
            this.isTyped = !1), this.isSelected && (this.isSelectCustom = !1, this.onChangeEvent(e))), 
            "enter" === e.action && "" === this.inputElement.value.trim() ? this.clear(e) : this.isTyped && !this.isSelected && isNullOrUndefined(li) && this.customValue(), 
            this.hidePopup();
        }, ComboBox.prototype.setHoverList = function(li) {
            this.removeSelection(), this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected) && (this.removeFocus(), 
            li.classList.add(dropDownListClasses.focus));
        }, ComboBox.prototype.targetFocus = function(e) {
            Browser.isDevice && !this.allowFiltering && (this.preventFocus = !1), this.onFocus();
        }, ComboBox.prototype.dropDownClick = function(e) {
            e.preventDefault(), Browser.isDevice && !this.allowFiltering && (this.preventFocus = !0), 
            _super.prototype.dropDownClick.call(this, e);
        }, ComboBox.prototype.customValue = function() {
            var value = this.getValueByText(this.inputElement.value);
            if (this.allowCustom || "" === this.inputElement.value) if ("" !== this.inputElement.value.trim()) {
                var previousValue = this.value;
                if (isNullOrUndefined(value)) {
                    var value_1 = "" === this.inputElement.value ? null : this.inputElement.value, fields = this.fields, eventArgs = void 0;
                    eventArgs = {
                        text: value_1,
                        item: {}
                    }, this.initial || this.trigger("customValueSpecifier", eventArgs);
                    var item = eventArgs.item, dataItem = {};
                    item && getValue(fields.text, item) && getValue(fields.value, item) ? dataItem = item : (setValue(fields.text, value_1, dataItem), 
                    setValue(fields.value, value_1, dataItem)), this.itemData = dataItem;
                    var changeData = {
                        text: getValue(fields.text, this.itemData),
                        value: getValue(fields.value, this.itemData),
                        index: null
                    };
                    this.setProperties(changeData, !0), this.setSelection(null, null), this.isSelectCustom = !0;
                } else this.isSelectCustom = !1, this.setProperties({
                    value: value
                });
                previousValue !== this.value && this.onChangeEvent(null);
            } else this.allowCustom && (this.isSelectCustom = !0); else this.setProperties({
                value: value
            }), isNullOrUndefined(this.value) && Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
        }, ComboBox.prototype.onPropertyChanged = function(newProp, oldProp) {
            "combobox" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "readonly":
                    Input.setReadonly(this.readonly, this.inputElement), this.readonly ? (EventHandler.remove(this.inputElement, "keyup", this.onFilterUp), 
                    EventHandler.remove(this.inputElement, "keydown", this.onFilterDown)) : (EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this), 
                    EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this));
                    break;

                  case "allowFiltering":
                    this.setSearchBox(), this.isFiltering() && "combobox" === this.getModuleName() && isNullOrUndefined(this.list) && _super.prototype.renderList.call(this);
                    break;

                  case "allowCustom":
                    break;

                  default:
                    var comboProps = void 0;
                    comboProps = this.getPropObject(prop, newProp, oldProp), _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);
                }
            }
        }, ComboBox.prototype.render = function() {
            _super.prototype.render.call(this), this.setSearchBox(), this.isFiltering() && "combobox" === this.getModuleName() && isNullOrUndefined(this.list) && _super.prototype.renderList.call(this);
        }, ComboBox.prototype.getModuleName = function() {
            return "combobox";
        }, ComboBox.prototype.hidePopup = function() {
            var inputValue = "" === this.inputElement.value ? null : this.inputElement.value;
            if (!isNullOrUndefined(this.listData)) {
                var isEscape = this.isEscapeKey;
                this.isEscapeKey && (Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.isEscapeKey = !1), this.autofill && this.removeFillSelection();
                var dataItem = this.isSelectCustom ? {
                    text: ""
                } : this.getItemData(), selected = this.list.querySelector("." + dropDownListClasses.selected);
                if (dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) return this.isSelected && (this.onChangeEvent(null), 
                this.isSelectCustom = !1), void _super.prototype.hidePopup.call(this);
                if ("combobox" === this.getModuleName() && "" !== this.inputElement.value.trim()) {
                    var searchItem = Search$1(this.inputElement.value, this.liCollections, "Equal", !0);
                    this.selectedLI = searchItem.item, isNullOrUndefined(searchItem.index) && (searchItem.index = Search$1(this.inputElement.value, this.liCollections, "StartsWith", !0).index), 
                    this.activeIndex = searchItem.index, isNullOrUndefined(this.selectedLI) ? isEscape && (this.isSelectCustom = !0, 
                    this.removeSelection()) : this.updateSelectedItem(this.selectedLI, null, !0);
                }
                this.isEscapeKey || !this.isTyped || this.isInteracted || this.customValue();
            }
            isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value && this.customValue(), 
            _super.prototype.hidePopup.call(this);
        }, ComboBox.prototype.focusIn = function() {
            this.enabled && (Browser.isDevice && !this.allowFiltering && (this.preventFocus = !0), 
            _super.prototype.focusIn.call(this));
        }, __decorate$31([ Property(!1) ], ComboBox.prototype, "autofill", void 0), __decorate$31([ Property(!0) ], ComboBox.prototype, "allowCustom", void 0), 
        __decorate$31([ Property({}) ], ComboBox.prototype, "htmlAttributes", void 0), __decorate$31([ Property(!1) ], ComboBox.prototype, "allowFiltering", void 0), 
        __decorate$31([ Property(null) ], ComboBox.prototype, "query", void 0), __decorate$31([ Property(null) ], ComboBox.prototype, "index", void 0), 
        __decorate$31([ Property(!0) ], ComboBox.prototype, "showClearButton", void 0), 
        __decorate$31([ Event() ], ComboBox.prototype, "customValueSpecifier", void 0), 
        __decorate$31([ Event() ], ComboBox.prototype, "filtering", void 0), __decorate$31([ Property(null) ], ComboBox.prototype, "valueTemplate", void 0), 
        __decorate$31([ Property("Never") ], ComboBox.prototype, "floatLabelType", void 0), 
        __decorate$31([ Property(null) ], ComboBox.prototype, "filterBarPlaceholder", void 0), 
        ComboBox = __decorate$31([ NotifyPropertyChanges ], ComboBox);
    }(DropDownList), __extends$44 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$32 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    dropDownListClasses.root = "e-autocomplete", dropDownListClasses.icon = "e-input-group-icon e-ddl-icon e-search-icon";
    var AutoComplete = function(_super) {
        function AutoComplete(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.isFiltered = !1, _this;
        }
        return __extends$44(AutoComplete, _super), AutoComplete.prototype.preRender = function() {
            _super.prototype.preRender.call(this);
        }, AutoComplete.prototype.getNgDirective = function() {
            return "EJS-AUTOCOMPLETE";
        }, AutoComplete.prototype.getQuery = function(query) {
            var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query(), filterType = "" !== this.queryString || isNullOrUndefined(this.value) ? this.filterType : "equal", queryString = "" !== this.queryString || isNullOrUndefined(this.value) ? this.queryString : this.value;
            if (this.isFiltered) return filterQuery;
            if (null !== this.queryString) {
                var dataType = this.typeOfData(this.dataSource).typeof;
                if ((this.dataSource instanceof DataManager || "string" !== dataType) && "number" !== dataType) {
                    var mapping = isNullOrUndefined(this.fields.value) ? "" : this.fields.value;
                    filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);
                } else filterQuery.where("", filterType, queryString, this.ignoreCase, this.ignoreAccent);
            }
            return isNullOrUndefined(this.suggestionCount) || filterQuery.take(this.suggestionCount), 
            filterQuery;
        }, AutoComplete.prototype.searchLists = function(e) {
            var _this = this;
            this.isTyped = !0, this.isSelectCustom = !1, this.isDataFetched = !1, isNullOrUndefined(this.list) && _super.prototype.renderList.call(this, !0);
            var isDownUpKey = 40 === e.keyCode || 38 === e.keyCode;
            if (this.queryString = this.filterInput.value, isDownUpKey) return this.queryString = "" === this.queryString ? null : this.queryString, 
            this.beforePopupOpen = !0, void this.resetList(this.dataSource, this.fields);
            this.isSelected = !1, this.activeIndex = null;
            var eventArgs = {
                preventDefaultAction: !1,
                text: this.filterInput.value,
                updateData: function(dataSource, query, fields) {
                    eventArgs.cancel || (_this.isFiltered = !0, _this.filterAction(dataSource, query, fields));
                },
                cancel: !1
            };
            this.trigger("filtering", eventArgs), eventArgs.cancel || this.isFiltered || eventArgs.preventDefaultAction || this.filterAction(this.dataSource, null, this.fields);
        }, AutoComplete.prototype.filterAction = function(dataSource, query, fields) {
            this.beforePopupOpen = !0, "" !== this.queryString && this.queryString.length >= this.minLength ? this.resetList(dataSource, fields, query) : this.hidePopup();
        }, AutoComplete.prototype.clear = function(e, property) {
            (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) && _super.prototype.clear.call(this, e), 
            this.beforePopupOpen && this.hidePopup();
        }, AutoComplete.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
            this.fixedHeaderElement = null, _super.prototype.onActionComplete.call(this, ulElement, list, e);
            var item = this.list.querySelector("." + dropDownListClasses.li);
            isNullOrUndefined(item) || removeClass([ item ], dropDownListClasses.focus), this.postBackAction();
        }, AutoComplete.prototype.postBackAction = function() {
            if (this.autofill && !isNullOrUndefined(this.liCollections[0])) {
                var items = [ this.liCollections[0] ];
                isNullOrUndefined(Search$1(this.inputElement.value, items, "StartsWith", this.ignoreCase).item) || _super.prototype.setAutoFill.call(this, this.liCollections[0], !0);
            }
        }, AutoComplete.prototype.setSelection = function(li, e) {
            if (this.isValidLI(li)) if (!isNullOrUndefined(e) && "keydown" === e.type && "enter" !== e.action && this.isValidLI(li)) {
                var value = this.getFormattedValue(li.getAttribute("data-value"));
                this.activeIndex = this.getIndexByValue(value), this.setHoverList(li), this.selectedLI = li, 
                this.setScrollPosition(e), this.autofill && (this.preventAutoFill = !1, _super.prototype.setAutoFill.call(this, li)), 
                attributes(this.inputElement, {
                    "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
                });
            } else _super.prototype.setSelection.call(this, li, e);
        }, AutoComplete.prototype.listOption = function(dataSource, fieldsSettings) {
            var _this = this, fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
            if (isNullOrUndefined(fields.itemCreated)) fields.itemCreated = function(e) {
                _this.highlight && highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
            }; else {
                var itemCreated_1 = fields.itemCreated;
                fields.itemCreated = function(e) {
                    _this.highlight && highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType), 
                    itemCreated_1.apply(_this, [ e ]);
                };
            }
            return fields;
        }, AutoComplete.prototype.isFiltering = function() {
            return !0;
        }, AutoComplete.prototype.renderPopup = function() {
            this.list.scrollTop = 0, _super.prototype.renderPopup.call(this);
        }, AutoComplete.prototype.isEditTextBox = function() {
            return "" !== this.inputElement.value.trim();
        }, AutoComplete.prototype.isPopupButton = function() {
            return this.showPopupButton;
        }, AutoComplete.prototype.isSelectFocusItem = function(element) {
            return !1;
        }, AutoComplete.prototype.showPopup = function() {
            this.enabled && (this.beforePopupOpen ? this.refreshPopup() : (this.beforePopupOpen = !0, 
            this.preventAutoFill = !0, isNullOrUndefined(this.list) ? this.renderList() : this.resetList(this.dataSource, this.fields)));
        }, AutoComplete.prototype.hidePopup = function() {
            _super.prototype.hidePopup.call(this), this.activeIndex = -1;
        }, AutoComplete.prototype.onPropertyChanged = function(newProp, oldProp) {
            "autocomplete" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "showPopupButton":
                    if (this.showPopupButton) {
                        var button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);
                        this.inputWrapper.buttons[0] = button, EventHandler.add(this.inputWrapper.buttons[0], "click", this.dropDownClick, this);
                    } else detach(this.inputWrapper.buttons[0]), this.inputWrapper.buttons[0] = null;
                    break;

                  default:
                    var atcProps = void 0;
                    atcProps = this.getPropObject(prop, newProp, oldProp), _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);
                }
            }
        }, AutoComplete.prototype.getModuleName = function() {
            return "autocomplete";
        }, AutoComplete.prototype.render = function() {
            _super.prototype.render.call(this);
        }, __decorate$32([ Complex({
            value: null,
            iconCss: null,
            groupBy: null
        }, FieldSettings) ], AutoComplete.prototype, "fields", void 0), __decorate$32([ Property(!0) ], AutoComplete.prototype, "ignoreCase", void 0), 
        __decorate$32([ Property(!1) ], AutoComplete.prototype, "showPopupButton", void 0), 
        __decorate$32([ Property(!1) ], AutoComplete.prototype, "highlight", void 0), __decorate$32([ Property(20) ], AutoComplete.prototype, "suggestionCount", void 0), 
        __decorate$32([ Property({}) ], AutoComplete.prototype, "htmlAttributes", void 0), 
        __decorate$32([ Property(null) ], AutoComplete.prototype, "query", void 0), __decorate$32([ Property(1) ], AutoComplete.prototype, "minLength", void 0), 
        __decorate$32([ Property("Contains") ], AutoComplete.prototype, "filterType", void 0), 
        __decorate$32([ Event() ], AutoComplete.prototype, "filtering", void 0), __decorate$32([ Property(null) ], AutoComplete.prototype, "index", void 0), 
        __decorate$32([ Property("Never") ], AutoComplete.prototype, "floatLabelType", void 0), 
        __decorate$32([ Property(null) ], AutoComplete.prototype, "valueTemplate", void 0), 
        __decorate$32([ Property(null) ], AutoComplete.prototype, "filterBarPlaceholder", void 0), 
        __decorate$32([ Property(!1) ], AutoComplete.prototype, "allowFiltering", void 0), 
        __decorate$32([ Property(null) ], AutoComplete.prototype, "text", void 0), AutoComplete = __decorate$32([ NotifyPropertyChanges ], AutoComplete);
    }(ComboBox), FLOATLINE = "e-float-line", FLOATTEXT = "e-float-text", LABELTOP = "e-label-top", LABELBOTTOM = "e-label-bottom", __extends$45 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$33 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, FOCUS = "e-input-focus", HIDE_LIST = "e-hide-listitem", CHIP = "e-chips", PagerDropDown = (function(_super) {
        function MultiSelect(option, element) {
            var _this = _super.call(this, option, element) || this;
            return _this.isValidKey = !1, _this.selectAllEventData = [], _this.selectAllEventEle = [], 
            _this.scrollFocusStatus = !1, _this.keyDownStatus = !1, _this;
        }
        __extends$45(MultiSelect, _super), MultiSelect.prototype.enableRTL = function(state) {
            state ? this.overAllWrapper.classList.add("e-rtl") : this.overAllWrapper.classList.remove("e-rtl"), 
            this.popupObj && (this.popupObj.enableRtl = state, this.popupObj.dataBind());
        }, MultiSelect.prototype.requiredModules = function() {
            var modules = [];
            return "CheckBox" === this.mode && (this.allowCustomValue = !1, this.hideSelectedItem = !1, 
            this.closePopupOnSelect = !1, this.allowFiltering = !0, modules.push({
                member: "CheckBoxSelection",
                args: [ this ]
            })), modules;
        }, MultiSelect.prototype.updateHTMLAttribute = function() {
            if (Object.keys(this.htmlAttributes).length) for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
                var htmlAttr = _a[_i];
                switch (htmlAttr) {
                  case "class":
                    this.overAllWrapper.classList.add(this.htmlAttributes[htmlAttr]), this.popupWrapper.classList.add(this.htmlAttributes[htmlAttr]);
                    break;

                  case "disabled":
                    this.enable(!1);
                    break;

                  case "placeholder":
                    this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                    break;

                  default:
                    [ "id" ].indexOf(htmlAttr) > -1 ? this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]) : [ "name", "required", "aria-required", "form" ].indexOf(htmlAttr) > -1 ? this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]) : [ "title", "role", "style", "class" ].indexOf(htmlAttr) > -1 ? this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]) : this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                }
            }
        }, MultiSelect.prototype.updateReadonly = function(state) {
            state || "CheckBox" === this.mode ? this.inputElement.setAttribute("readonly", "true") : this.inputElement.removeAttribute("readonly");
        }, MultiSelect.prototype.updateClearButton = function(state) {
            state ? (this.overAllClear.parentNode ? this.overAllClear.style.display = "" : this.componentWrapper.appendChild(this.overAllClear), 
            this.componentWrapper.classList.remove("e-close-icon-hide")) : (this.overAllClear.style.display = "none", 
            this.componentWrapper.classList.add("e-close-icon-hide"));
        }, MultiSelect.prototype.updateCssClass = function() {
            this.cssClass && (this.popupWrapper.classList.add(this.cssClass), this.overAllWrapper.classList.add(this.cssClass));
        }, MultiSelect.prototype.onPopupShown = function() {
            if (Browser.isDevice && "CheckBox" === this.mode && this.allowFiltering) {
                var proxy_1 = this;
                window.onpopstate = function() {
                    proxy_1.hidePopup();
                }, history.pushState({}, "");
            }
            var eventArgs = {
                popup: this.popupObj,
                cancel: !1,
                animation: {
                    name: "FadeIn",
                    duration: 100
                }
            };
            if (this.trigger("open", eventArgs), !eventArgs.cancel) {
                if (this.focusAtFirstListItem(), document.body.appendChild(this.popupObj.element), 
                "CheckBox" === this.mode && addClass([ this.overAllWrapper ], [ "e-icon-anim" ]), 
                this.refreshPopup(), this.popupObj.show(eventArgs.animation, 1e3 === this.zIndex ? this.element : null), 
                attributes(this.inputElement, {
                    "aria-expanded": "true"
                }), !this.isFirstClick) {
                    var ulElement = this.list.querySelector("ul");
                    ulElement && (this.mainList = ulElement.cloneNode ? ulElement.cloneNode(!0) : ulElement), 
                    this.isFirstClick = !0;
                }
                this.refreshListItems(null), "CheckBox" === this.mode && this.removeFocus(), this.notify("reOrder", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode,
                    e: this
                });
            }
        }, MultiSelect.prototype.focusAtFirstListItem = function() {
            if (this.ulElement && this.ulElement.querySelector("li." + dropDownBaseClasses.li)) {
                var element = void 0;
                if ("CheckBox" === this.mode) return void this.removeFocus();
                null !== (element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")")) && (this.removeFocus(), 
                this.addListFocus(element));
            }
        }, MultiSelect.prototype.focusAtLastListItem = function(data) {
            var activeElement;
            data ? activeElement = Search$1(data, this.liCollections, "StartsWith", this.ignoreCase) : this.value && this.value.length ? Search$1(this.value[this.value.length - 1], this.liCollections, "StartsWith", this.ignoreCase) : activeElement = null, 
            activeElement && null !== activeElement.item && (this.addListFocus(activeElement.item), 
            this.scrollBottom(activeElement.item, activeElement.index));
        }, MultiSelect.prototype.getAriaAttributes = function() {
            return {
                "aria-disabled": "false",
                "aria-owns": this.element.id + "_options",
                role: "listbox",
                "aria-multiselectable": "true",
                "aria-activedescendant": "null",
                "aria-haspopup": "true",
                "aria-expanded": "false"
            };
        }, MultiSelect.prototype.updateListARIA = function() {
            attributes(this.ulElement, {
                id: this.element.id + "_options",
                role: "listbox",
                "aria-hidden": "false"
            });
            var disableStatus = !!this.inputElement.disabled;
            attributes(this.inputElement, this.getAriaAttributes()), disableStatus && attributes(this.inputElement, {
                "aria-disabled": "true"
            });
        }, MultiSelect.prototype.removelastSelection = function(e) {
            var elements, value = (elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP))[elements.length - 1].getAttribute("data-value");
            if (isNullOrUndefined(this.value) || (this.tempValues = this.value.slice()), this.removeValue(value, e), 
            this.removeChipSelection(), this.updateDelimeter(this.delimiterChar), this.makeTextBoxEmpty(), 
            this.mainList && this.listData) {
                var list = this.mainList.cloneNode ? this.mainList.cloneNode(!0) : this.mainList;
                this.onActionComplete(list, this.mainData), this.refreshSelection();
            }
        }, MultiSelect.prototype.onActionFailure = function(e) {
            _super.prototype.onActionFailure.call(this, e), this.renderPopup(), this.onPopupShown();
        }, MultiSelect.prototype.targetElement = function() {
            return this.targetInputElement = this.inputElement, "CheckBox" === this.mode && this.notify("targetElement", {
                module: "CheckBoxSelection",
                enable: "CheckBox" === this.mode
            }), this.targetInputElement.value;
        }, MultiSelect.prototype.getForQuery = function(valuecheck) {
            for (var predicate, field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value, i = 0; i < valuecheck.length; i++) predicate = 0 === i ? new Predicate$1(field, "equal", valuecheck[i]) : predicate.or(field, "equal", valuecheck[i]);
            return new Query().where(predicate);
        }, MultiSelect.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
            _super.prototype.onActionComplete.call(this, ulElement, list, e);
            var proxy = this, valuecheck = [];
            if (!isNullOrUndefined(this.value) && !this.allowCustomValue) for (var i = 0; i < this.value.length; i++) {
                (this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement).querySelector('li[data-value="' + proxy.value[i] + '"]') || valuecheck.push(proxy.value[i]);
            }
            valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) ? this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function(e) {
                proxy.addItem(e.result, list.length), proxy.updateActionList(ulElement, list, e);
            }) : this.updateActionList(ulElement, list, e);
        }, MultiSelect.prototype.updateActionList = function(ulElement, list, e, isUpdated) {
            "CheckBox" === this.mode && this.showSelectAll && this.notify("selectAll", {
                module: "CheckBoxSelection",
                enable: "CheckBox" === this.mode
            }), this.mainList || this.mainData ? isNullOrUndefined(this.mainData) || 0 !== this.mainData.length || (this.mainData = list) : (this.mainList = ulElement.cloneNode ? ulElement.cloneNode(!0) : ulElement, 
            this.mainData = list, this.mainListCollection = this.liCollections), (this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering ? this.checkForCustomValue(this.tempQuery, this.fields) : (this.value && this.value.length && ("CheckBox" !== this.mode && "" !== this.inputElement.value || "CheckBox" === this.mode) && this.refreshSelection(), 
            this.updateListARIA(), this.unwireListEvents(), this.wireListEvents(), isNullOrUndefined(this.setInitialValue) || this.setInitialValue(), 
            isNullOrUndefined(this.selectAllAction) || this.selectAllAction(), this.setDynValue && (this.initialValueUpdate(), 
            this.initialUpdate(), this.refreshPlaceHolder(), this.updateValueState(null, this.value, null)), 
            this.renderPopup(), this.beforePopupOpen && (this.beforePopupOpen = !1, this.onPopupShown()));
        }, MultiSelect.prototype.refreshSelection = function() {
            var value, element, className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
            if (!isNullOrUndefined(this.value)) for (var index = 0; !isNullOrUndefined(this.value[index]); index++) if (value = this.value[index], 
            element = this.list.querySelector('li[data-value="' + value + '"]')) {
                if (addClass([ element ], className), this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(dropDownBaseClasses.group)) && addClass([ element.previousElementSibling ], className), 
                this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST) && this.hideGroupItem(value), 
                this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {
                    removeClass([ element ], dropDownBaseClasses.focus);
                    var listEle = element.parentElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
                    listEle.length > 0 ? addClass([ listEle[0] ], dropDownBaseClasses.focus) : (this.ulElement = this.ulElement.cloneNode ? this.ulElement.cloneNode(!0) : this.ulElement, 
                    this.l10nUpdate(), addClass([ this.list ], dropDownBaseClasses.noData));
                }
                if (element.setAttribute("aria-selected", "true"), "CheckBox" === this.mode && element.classList.contains("e-active")) {
                    var ariaValue = element.firstElementChild.getAttribute("aria-checked");
                    if (isNullOrUndefined(ariaValue) || "false" === ariaValue) {
                        var args = {
                            module: "CheckBoxSelection",
                            enable: "CheckBox" === this.mode,
                            li: element,
                            e: null
                        };
                        this.notify("updatelist", args);
                    }
                }
            }
            this.checkSelectAll(), this.checkMaxSelection();
        }, MultiSelect.prototype.hideGroupItem = function(value) {
            var element, element1, className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
            element1 = element = this.ulElement.querySelector('li[data-value="' + value + '"]');
            var i = 0, j = 0, temp = !0, temp1 = !0;
            do {
                element && element.previousElementSibling && !element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(dropDownBaseClasses.li) && (temp = !1), 
                !temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) ? i = 10 : element = element.previousElementSibling, 
                element1 && element1.nextElementSibling && !element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li) && (temp1 = !1), 
                !temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group) ? j = 10 : element1 = element1.nextElementSibling;
            } while (i < 10 || j < 10);
            temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST) ? addClass([ element.previousElementSibling ], className) : temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST) && removeClass([ element.previousElementSibling ], className);
        }, MultiSelect.prototype.checkSelectAll = function() {
            var searchCount = this.list.querySelectorAll("li." + dropDownBaseClasses.li).length, searchActiveCount = this.list.querySelectorAll("li." + dropDownBaseClasses.selected).length;
            searchCount === searchActiveCount && "CheckBox" === this.mode && this.showSelectAll && this.notify("checkSelectAll", {
                module: "CheckBoxSelection",
                enable: "CheckBox" === this.mode,
                value: "check"
            }), searchCount !== searchActiveCount && "CheckBox" === this.mode && this.showSelectAll && this.notify("checkSelectAll", {
                module: "CheckBoxSelection",
                enable: "CheckBox" === this.mode,
                value: "uncheck"
            });
        }, MultiSelect.prototype.openClick = function(e) {
            this.openOnClick || "CheckBox" === this.mode ? this.openOnClick || "CheckBox" !== this.mode || this.isPopupOpen() || this.showPopup() : "" !== this.targetElement() ? this.showPopup() : this.hidePopup();
        }, MultiSelect.prototype.KeyUp = function(e) {
            var _this = this;
            if ("CheckBox" === this.mode && !this.openOnClick) {
                isNullOrUndefined(String.fromCharCode(e.keyCode).match(/\w/)) || (this.isValidKey = !0);
            }
            if (this.isValidKey = this.isPopupOpen() && 8 === e.keyCode || this.isValidKey, 
            this.isValidKey) switch (this.isValidKey = !1, this.expandTextbox(), this.showOverAllClear(), 
            e.keyCode) {
              default:
                if (!this.isPopupOpen() && this.openOnClick && this.showPopup(), this.openClick(e), 
                this.checkTextLength() && !this.allowFiltering && 8 !== e.keyCode) this.focusAtFirstListItem(); else {
                    var text = this.targetElement();
                    if (this.keyCode = e.keyCode, this.allowFiltering) {
                        var eventArgs_1 = {
                            preventDefaultAction: !1,
                            text: this.targetElement(),
                            updateData: function(dataSource, query, fields) {
                                eventArgs_1.cancel || (_this.isFiltered = !0, _this.remoteFilterAction = !0, _this.dataUpdater(dataSource, query, fields));
                            },
                            event: e,
                            cancel: !1
                        };
                        if (this.trigger("filtering", eventArgs_1), eventArgs_1.cancel) return;
                        this.isFiltered || eventArgs_1.preventDefaultAction || (this.filterAction = !0, 
                        this.dataUpdater(this.dataSource, null, this.fields));
                    } else {
                        if (this.allowCustomValue) {
                            var query = new Query();
                            query = "" !== text ? query.where(this.fields.text, "startswith", text, this.ignoreCase, this.ignoreAccent) : query, 
                            this.dataUpdater(this.mainData, query, this.fields);
                            break;
                        }
                        var liCollections = void 0;
                        liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
                        var activeElement = Search$1(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
                        activeElement && null !== activeElement.item ? (this.addListFocus(activeElement.item), 
                        this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index) : "" !== this.targetElement() ? this.removeFocus() : this.focusAtFirstListItem();
                    }
                }
            }
        }, MultiSelect.prototype.getQuery = function(query) {
            var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
            if (this.filterAction) {
                if (null !== this.targetElement()) {
                    var dataType = this.typeOfData(this.dataSource).typeof;
                    if ((this.dataSource instanceof DataManager || "string" !== dataType) && "number" !== dataType) {
                        var fields = this.fields;
                        filterQuery.where(isNullOrUndefined(fields.text) ? "" : fields.text, "startswith", this.targetElement(), this.ignoreCase, this.ignoreAccent);
                    } else filterQuery.where("", "startswith", this.targetElement(), this.ignoreCase, this.ignoreAccent);
                }
                return filterQuery;
            }
            return query || (this.query ? this.query : new Query());
        }, MultiSelect.prototype.dataUpdater = function(dataSource, query, fields) {
            if (this.isDataFetched = !1, "" === this.targetElement().trim()) {
                var list = this.mainList.cloneNode ? this.mainList.cloneNode(!0) : this.mainList;
                this.backCommand && (this.remoteCustomValue = !1, this.onActionComplete(list, this.mainData), 
                this.value && this.value.length && this.refreshSelection(), 8 !== this.keyCode && this.focusAtFirstListItem(), 
                this.notify("reOrder", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode,
                    e: this
                }));
            } else this.resetList(dataSource, fields, query), this.allowCustomValue && (dataSource instanceof DataManager ? (this.remoteCustomValue = !0, 
            this.tempQuery = query) : this.checkForCustomValue(query, fields));
            this.refreshPopup(), "CheckBox" === this.mode && this.removeFocus();
        }, MultiSelect.prototype.checkForCustomValue = function(query, fields) {
            var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);
            if (this.allowCustomValue && dataChecks) {
                var value = this.inputElement.value;
                if ("string" != typeof (!isNullOrUndefined(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData)) {
                    var dataItem = {};
                    setValue(fields.text, value, dataItem), setValue(fields.value, value, dataItem);
                    (tempData = JSON.parse(JSON.stringify(this.listData))).splice(0, 0, dataItem), this.resetList(tempData, fields || this.fields, query);
                } else {
                    var tempData = [ this.inputElement.value ];
                    this.resetList(tempData, fields || this.fields);
                }
            }
            this.value && this.value.length && this.refreshSelection();
        }, MultiSelect.prototype.getNgDirective = function() {
            return "EJS-MULTISELECT";
        }, MultiSelect.prototype.wrapperClick = function(e) {
            this.setDynValue = !1, !this.readonly && this.enabled && (e.target !== this.overAllClear ? (this.inputFocus || "CheckBox" === this.mode || this.dispatchEvent(this.inputElement, "focus"), 
            this.inputFocus || "CheckBox" !== this.mode || this.focusIn(e), e.target && -1 !== e.target.classList.toString().indexOf("e-chips-close") ? this.isPopupOpen() && this.refreshPopup() : (!this.isPopupOpen() && this.openOnClick ? this.showPopup() : (this.hidePopup(), 
            "CheckBox" === this.mode && (this.showOverAllClear(), this.inputFocus = !0, this.overAllWrapper.classList.contains(FOCUS) || this.overAllWrapper.classList.add(FOCUS))), 
            e.preventDefault())) : e.preventDefault());
        }, MultiSelect.prototype.enable = function(state) {
            state ? (this.overAllWrapper.classList.remove("e-disabled"), this.inputElement.removeAttribute("disabled"), 
            attributes(this.inputElement, {
                "aria-disabled": "false"
            })) : (this.overAllWrapper.classList.add("e-disabled"), this.inputElement.setAttribute("disabled", "true"), 
            attributes(this.inputElement, {
                "aria-disabled": "true"
            })), this.enabled !== state && (this.enabled = state), this.hidePopup();
        }, MultiSelect.prototype.onBlur = function(eve) {
            var target;
            if (isNullOrUndefined(eve) || (target = eve.relatedTarget), this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) "CheckBox" !== this.mode && this.inputElement.focus(); else {
                if ("CheckBox" === this.mode && Browser.isIE && !isNullOrUndefined(eve)) return this.inputFocus = !1, 
                void this.overAllWrapper.classList.remove(FOCUS);
                if (this.scrollFocusStatus) return isNullOrUndefined(eve) || eve.preventDefault(), 
                this.inputElement.focus(), void (this.scrollFocusStatus = !1);
                this.inputFocus = !1, this.overAllWrapper.classList.remove(FOCUS), "Box" !== this.mode && "CheckBox" !== this.mode && (this.refreshListItems(null), 
                this.updateDelimView()), this.updateValueState(eve, this.value, this.tempValues), 
                this.dispatchEvent(this.hiddenElement, "change"), this.overAllClear.style.display = "none", 
                this.isPopupOpen() && this.hidePopup(), this.makeTextBoxEmpty(), this.trigger("blur"), 
                this.focused = !0, Browser.isDevice && "Delimiter" !== this.mode && "CheckBox" !== this.mode && this.removeChipFocus(), 
                this.removeChipSelection(), this.refreshInputHight(), function(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {
                    overAllWrapper.classList.remove("e-input-focus");
                    var label = componentWrapper.querySelector("." + FLOATTEXT);
                    value && value.length <= 0 && "Auto" === floatLabelType && !isNullOrUndefined(label) && (label.classList.contains(LABELTOP) && removeClass([ label ], LABELTOP), 
                    addClass([ label ], LABELBOTTOM));
                }(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder), 
                this.refreshPlaceHolder(), this.allowFiltering && !isNullOrUndefined(this.mainList) && (this.ulElement = this.mainList);
            }
        }, MultiSelect.prototype.refreshInputHight = function() {
            this.value && this.value.length ? this.searchWrapper.classList.add("e-zero-size") : this.searchWrapper.classList.remove("e-zero-size");
        }, MultiSelect.prototype.validateValues = function(newValue, oldValue) {
            return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());
        }, MultiSelect.prototype.updateValueState = function(event, newVal, oldVal) {
            var newValue = newVal || [], oldValue = oldVal || [];
            if (this.initStatus && this.validateValues(newValue, oldValue)) {
                var eventArgs = {
                    e: event,
                    oldValue: oldVal,
                    value: newVal,
                    isInteracted: !!event,
                    element: this.element
                };
                this.trigger("change", eventArgs);
            }
        }, MultiSelect.prototype.getPagingCount = function() {
            var height = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
            return Math.round(this.list.offsetHeight / parseInt(height, 10));
        }, MultiSelect.prototype.pageUpSelection = function(steps) {
            var previousItem, collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
            previousItem = steps >= 0 ? collection[steps + 1] : collection[0], this.addListFocus(previousItem), 
            this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")));
        }, MultiSelect.prototype.pageDownSelection = function(steps) {
            this.getItems();
            var previousItem, collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
            previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1], 
            this.addListFocus(previousItem), this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")));
        }, MultiSelect.prototype.getItems = function() {
            return this.list || _super.prototype.render.call(this), this.ulElement ? this.ulElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")") : null;
        }, MultiSelect.prototype.focusIn = function(e) {
            if (this.enabled && !this.readonly) {
                if (this.showOverAllClear(), this.inputFocus = !0, this.value ? this.tempValues = this.value.slice() : this.tempValues = this.value, 
                this.value && this.value.length && ("Delimiter" !== this.mode && "CheckBox" !== this.mode ? this.chipCollectionWrapper.style.display = "" : this.showDelimWrapper(), 
                "CheckBox" !== this.mode && (this.viewWrapper.style.display = "none")), "CheckBox" !== this.mode && this.searchWrapper.classList.remove("e-zero-size"), 
                this.focused) {
                    this.inputElement.focus();
                    var args = {
                        isInteracted: !!e,
                        event: e
                    };
                    this.trigger("focus", args), this.focused = !1;
                }
                return this.overAllWrapper.classList.contains(FOCUS) || this.overAllWrapper.classList.add(FOCUS), 
                function(overAllWrapper, componentWrapper) {
                    overAllWrapper.classList.add("e-input-focus");
                    var label = componentWrapper.querySelector("." + FLOATTEXT);
                    isNullOrUndefined(label) || (addClass([ label ], LABELTOP), label.classList.contains(LABELBOTTOM) && removeClass([ label ], LABELBOTTOM));
                }(this.overAllWrapper, this.componentWrapper), this.isPopupOpen() && this.refreshPopup(), 
                !0;
            }
            return !1;
        }, MultiSelect.prototype.showDelimWrapper = function() {
            "CheckBox" === this.mode ? this.viewWrapper.style.display = "" : this.delimiterWrapper.style.display = "", 
            this.componentWrapper.classList.add("e-delimiter");
        }, MultiSelect.prototype.hideDelimWrapper = function() {
            this.delimiterWrapper.style.display = "none", this.componentWrapper.classList.remove("e-delimiter");
        }, MultiSelect.prototype.expandTextbox = function() {
            var size = 5;
            this.placeholder && (size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length), 
            this.inputElement.value.length > size ? this.inputElement.size = this.inputElement.value.length : this.inputElement.size = size;
        }, MultiSelect.prototype.isPopupOpen = function() {
            return null !== this.popupWrapper && null !== this.popupWrapper.parentElement;
        }, MultiSelect.prototype.refreshPopup = function() {
            this.popupObj && this.mobFilter && (this.popupObj.setProperties({
                width: this.calcPopupWidth()
            }), this.popupObj.refreshPosition(this.overAllWrapper));
        }, MultiSelect.prototype.checkTextLength = function() {
            return this.targetElement().length < 1;
        }, MultiSelect.prototype.popupKeyActions = function(keyCode) {
            switch (keyCode) {
              case 38:
                this.hidePopup(), "CheckBox" === this.mode && this.inputElement.focus();
                break;

              case 40:
                this.isPopupOpen() || this.showPopup();
            }
        }, MultiSelect.prototype.updateAriaAttribute = function() {
            var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
            isNullOrUndefined(focusedItem) || this.inputElement.setAttribute("aria-activedescendant", focusedItem.id);
        }, MultiSelect.prototype.onKeyDown = function(e) {
            if (!this.readonly && (this.enabled || "CheckBox" === this.mode) && (this.keyDownStatus = !0, 
            !(e.keyCode > 111 && e.keyCode < 124))) {
                if (e.altKey) return this.popupKeyActions(e.keyCode), void e.preventDefault();
                if (this.isPopupOpen()) {
                    var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
                    switch (e.keyCode) {
                      case 36:
                      case 35:
                        break;

                      case 33:
                        return e.preventDefault(), void (focusedItem && (this.getIndexByValue(focusedItem.getAttribute("data-value")), 
                        this.pageUpSelection(void 0 - this.getPagingCount()), this.updateAriaAttribute()));

                      case 34:
                        return e.preventDefault(), void (focusedItem && (this.getIndexByValue(focusedItem.getAttribute("data-value")), 
                        this.pageDownSelection(void 0 + this.getPagingCount()), this.updateAriaAttribute()));

                      case 38:
                        this.arrowUp(e);
                        break;

                      case 40:
                        this.arrowDown(e);
                        break;

                      case 27:
                        return e.preventDefault(), this.hidePopup(), void ("CheckBox" === this.mode && this.inputElement.focus());

                      case 13:
                        return e.preventDefault(), void ("CheckBox" !== this.mode && this.selectByKey(e));

                      case 32:
                        return void this.spaceKeySelection(e);

                      case 9:
                        e.preventDefault(), this.hidePopup(), this.inputElement.focus(), this.overAllWrapper.classList.add(FOCUS);
                    }
                } else switch (e.keyCode) {
                  case 13:
                  case 9:
                  case 16:
                  case 17:
                  case 20:
                    return;

                  case 40:
                    this.openOnClick && this.showPopup();
                    break;

                  case 27:
                    return e.preventDefault(), void this.escapeAction();
                }
                this.checkTextLength() && this.keyNavigation(e), "CheckBox" === this.mode && this.enableSelectionOrder && this.checkBackCommand(e), 
                this.expandTextbox(), this.refreshPopup();
            }
        }, MultiSelect.prototype.arrowDown = function(e) {
            e.preventDefault(), this.moveByList(1), this.keyAction = !0, document.activeElement.classList.contains("e-input-filter") && (this.list.focus(), 
            EventHandler.add(this.list, "keydown", this.onKeyDown, this)), this.updateAriaAttribute();
        }, MultiSelect.prototype.arrowUp = function(e) {
            e.preventDefault(), this.keyAction = !0;
            var list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)"), focuseElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
            Array.prototype.slice.call(list).indexOf(focuseElem) <= 0 ? (this.keyAction = !1, 
            this.notify("inputFocus", {
                module: "CheckBoxSelection",
                enable: "CheckBox" === this.mode,
                value: "focus"
            })) : this.list.focus(), this.moveByList(-1), this.updateAriaAttribute();
        }, MultiSelect.prototype.spaceKeySelection = function(e) {
            "CheckBox" === this.mode && (document.activeElement.classList.contains("e-input-filter") || (e.preventDefault(), 
            this.keyAction = !0, this.list.focus()), this.selectByKey(e));
        }, MultiSelect.prototype.checkBackCommand = function(e) {
            8 === e.keyCode && "" === this.targetElement() ? this.backCommand = !1 : this.backCommand = !0;
        }, MultiSelect.prototype.keyNavigation = function(e) {
            if ("Delimiter" !== this.mode && "CheckBox" !== this.mode && this.value && this.value.length) switch (e.keyCode) {
              case 37:
                e.preventDefault(), this.moveBy(-1, e);
                break;

              case 39:
                e.preventDefault(), this.moveBy(1, e);
                break;

              case 8:
                this.removelastSelection(e);
                break;

              case 46:
                this.removeSelectedChip(e);
            } else if (8 === e.keyCode && "Delimiter" === this.mode && this.value && this.value.length) {
                e.preventDefault();
                var temp = this.value[this.value.length - 1];
                this.removeValue(temp, e), this.updateDelimeter(this.delimiterChar), this.focusAtLastListItem(temp);
            }
        }, MultiSelect.prototype.selectByKey = function(e) {
            this.removeChipSelection(), this.selectListByKey(e), this.hideSelectedItem && this.focusAtFirstListItem();
        }, MultiSelect.prototype.escapeAction = function() {
            var temp = this.tempValues ? this.tempValues.slice() : [];
            this.value && this.validateValues(this.value, temp) && (this.value = temp, this.initialValueUpdate(), 
            "Delimiter" !== this.mode && "CheckBox" !== this.mode ? this.chipCollectionWrapper.style.display = "" : this.showDelimWrapper(), 
            this.refreshPlaceHolder(), this.value.length ? this.showOverAllClear() : this.hideOverAllClear()), 
            this.makeTextBoxEmpty();
        }, MultiSelect.prototype.scrollBottom = function(selectedLI, activeIndex) {
            var currentOffset = this.list.offsetHeight, nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop, nextOffset = this.list.scrollTop + nextBottom - currentOffset, boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
            boxRange = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange, 
            0 === activeIndex ? this.list.scrollTop = 0 : nextBottom > currentOffset ? this.list.scrollTop = nextOffset : boxRange > 0 && this.list.offsetHeight > boxRange || (this.list.scrollTop = nextOffset);
        }, MultiSelect.prototype.scrollTop = function(selectedLI, activeIndex) {
            var nextOffset = selectedLI.offsetTop - this.list.scrollTop;
            selectedLI.offsetTop, selectedLI.offsetHeight, this.list.scrollTop;
            nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
            var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
            0 === activeIndex ? this.list.scrollTop = 0 : nextOffset < 0 ? this.list.scrollTop = this.list.scrollTop + nextOffset : boxRange > 0 && this.list.offsetHeight > boxRange || (this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0));
        }, MultiSelect.prototype.selectListByKey = function(e) {
            var li = this.list.querySelector("li." + dropDownBaseClasses.focus), limit = this.value && this.value.length ? this.value.length : 0;
            null !== li && (li.classList.contains("e-active") && (limit -= 1), this.isValidLI(li) && limit < this.maximumSelectionLength && (this.updateListSelection(li, e), 
            this.addListFocus(li), "CheckBox" === this.mode ? (this.updateDelimView(), this.refreshInputHight(), 
            this.updateDelimeter(this.delimiterChar)) : this.updateDelimeter(this.delimiterChar), 
            this.makeTextBoxEmpty(), "CheckBox" !== this.mode && this.refreshListItems(li.textContent), 
            this.refreshPopup()), this.closePopupOnSelect && this.hidePopup()), this.refreshPlaceHolder();
        }, MultiSelect.prototype.refreshListItems = function(data) {
            if ((this.allowFiltering || this.allowCustomValue) && this.mainList && this.listData) {
                var list = void 0;
                list = "Descending" === this.sortOrder || "Ascending" === this.sortOrder ? this.ulElement.cloneNode ? this.ulElement.cloneNode(!0) : this.ulElement : this.mainList.cloneNode ? this.mainList.cloneNode(!0) : this.mainList, 
                this.onActionComplete(list, this.mainData), this.focusAtLastListItem(data), this.value && this.value.length && this.refreshSelection();
            }
        }, MultiSelect.prototype.removeSelectedChip = function(e) {
            var temp, selectedElem = this.chipCollectionWrapper.querySelector("span.e-chip-selected");
            null !== selectedElem && (isNullOrUndefined(this.value) || (this.tempValues = this.value.slice()), 
            null !== (temp = selectedElem.nextElementSibling) && (this.removeChipSelection(), 
            this.addChipSelection(temp, e)), this.removeValue(selectedElem.getAttribute("data-value"), e), 
            this.makeTextBoxEmpty()), this.closePopupOnSelect && this.hidePopup();
        }, MultiSelect.prototype.moveByTop = function(state) {
            var index, elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
            elements.length > 1 && (this.removeFocus(), index = state ? 0 : elements.length - 1, 
            this.addListFocus(elements[index]), this.scrollBottom(elements[index], index)), 
            this.updateAriaAttribute();
        }, MultiSelect.prototype.moveByList = function(position) {
            if (this.list) {
                var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)"), selectedElem = this.list.querySelector("li." + dropDownBaseClasses.focus), temp = -1;
                if (elements.length) {
                    for (var index = 0; index < elements.length; index++) if (elements[index] === selectedElem) {
                        temp = index;
                        break;
                    }
                    position > 0 ? temp < elements.length - 1 && (this.removeFocus(), this.addListFocus(elements[++temp]), 
                    this.scrollBottom(elements[temp], temp)) : temp > 0 && (this.removeFocus(), this.addListFocus(elements[--temp]), 
                    this.scrollTop(elements[temp], temp));
                }
            }
        }, MultiSelect.prototype.moveBy = function(position, e) {
            var elements, selectedElem, temp;
            elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP), null === (selectedElem = this.chipCollectionWrapper.querySelector("span.e-chip-selected")) ? position < 0 && this.addChipSelection(elements[elements.length - 1], e) : position < 0 ? null !== (temp = selectedElem.previousElementSibling) && (this.removeChipSelection(), 
            this.addChipSelection(temp, e)) : (temp = selectedElem.nextElementSibling, this.removeChipSelection(), 
            null !== temp && this.addChipSelection(temp, e));
        }, MultiSelect.prototype.chipClick = function(e) {
            if (this.enabled) {
                var elem = closest(e.target, "." + CHIP);
                this.removeChipSelection(), this.addChipSelection(elem, e);
            }
        }, MultiSelect.prototype.removeChipSelection = function() {
            this.chipCollectionWrapper && this.removeChipFocus();
        }, MultiSelect.prototype.addChipSelection = function(element, e) {
            addClass([ element ], "e-chip-selected"), this.trigger("chipSelection", e);
        }, MultiSelect.prototype.onChipRemove = function(e) {
            if (3 !== e.which && 2 !== e.button && this.enabled && !this.readonly) {
                var element = e.target.parentElement, value = this.getFormattedValue(element.getAttribute("data-value"));
                if (this.isPopupOpen() && "CheckBox" !== this.mode && this.hidePopup(), this.inputFocus || this.inputElement.focus(), 
                this.removeValue(value, e), isNullOrUndefined(this.list.querySelector('li[data-value="' + value + '"]')) && this.mainList && this.listData) {
                    var list = this.mainList.cloneNode ? this.mainList.cloneNode(!0) : this.mainList;
                    this.onActionComplete(list, this.mainData);
                }
                this.updateDelimeter(this.delimiterChar), this.makeTextBoxEmpty(), e.preventDefault();
            }
        }, MultiSelect.prototype.makeTextBoxEmpty = function() {
            this.inputElement.value = "", this.refreshPlaceHolder();
        }, MultiSelect.prototype.refreshPlaceHolder = function() {
            this.placeholder && "Never" === this.floatLabelType ? this.value && this.value.length ? this.inputElement.placeholder = "" : this.inputElement.placeholder = this.placeholder : this.setFloatLabelType(), 
            this.expandTextbox();
        }, MultiSelect.prototype.removeValue = function(value, eve, length) {
            var index = this.value.indexOf(this.getFormattedValue(value)), className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
            if (-1 !== index) {
                var element = this.list.querySelector('li[data-value="' + value + '"]'), val = this.getDataByValue(value), eventArgs = {
                    e: eve,
                    item: element,
                    itemData: val,
                    isInteracted: !!eve,
                    cancel: !1
                };
                if (this.trigger("removing", eventArgs), eventArgs.cancel) return;
                if (this.value.splice(index, 1), this.setProperties({
                    value: [].concat([], this.value)
                }, !0), null !== element) {
                    var hideElement = this.mainList.querySelector('li[data-value="' + value + '"]');
                    element.setAttribute("aria-selected", "false"), hideElement.setAttribute("aria-selected", "false"), 
                    removeClass([ element, hideElement ], className), this.notify("activeList", {
                        module: "CheckBoxSelection",
                        enable: "CheckBox" === this.mode,
                        li: element,
                        e: this,
                        index: index
                    }), this.notify("updatelist", {
                        module: "CheckBoxSelection",
                        enable: "CheckBox" === this.mode,
                        li: element,
                        e: eve
                    }), attributes(this.inputElement, {
                        "aria-activedescendant": element.id
                    }), this.value.length !== this.mainData.length && "CheckBox" === this.mode && this.showSelectAll && this.notify("checkSelectAll", {
                        module: "CheckBoxSelection",
                        enable: "CheckBox" === this.mode,
                        value: "uncheck"
                    });
                }
                this.hideSelectedItem && this.fields.groupBy && this.hideGroupItem(value), this.updateMainList(!0, value), 
                this.removeChip(value), this.updateChipStatus();
                if ((this.value && this.value.length ? this.value.length : 0) < this.maximumSelectionLength) {
                    removeClass(this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)"), "e-disable");
                }
                if (this.trigger("removed", eventArgs), length && (this.selectAllEventData.push(val), 
                this.selectAllEventEle.push(element)), 1 === length) {
                    var args = {
                        event: eve,
                        items: this.selectAllEventEle,
                        itemData: this.selectAllEventData,
                        isInteracted: !!eve,
                        isChecked: !1
                    };
                    this.trigger("selectedAll", args), this.selectAllEventData = [], this.selectAllEventEle = [];
                }
            }
        }, MultiSelect.prototype.updateMainList = function(state, value) {
            if (this.allowFiltering) {
                var element2 = this.mainList.querySelector('li[data-value="' + value + '"]');
                element2 && (state ? (element2.setAttribute("aria-selected", "false"), removeClass([ element2 ], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected), 
                "CheckBox" === this.mode && (element2.firstElementChild.setAttribute("aria-checked", "false"), 
                removeClass([ element2.firstElementChild.lastElementChild ], "e-check"))) : (element2.setAttribute("aria-selected", "true"), 
                addClass([ element2 ], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected), 
                "CheckBox" === this.mode && (element2.firstElementChild.setAttribute("aria-checked", "true"), 
                addClass([ element2.firstElementChild.lastElementChild ], "e-check"))));
            }
        }, MultiSelect.prototype.removeChip = function(value) {
            if (this.chipCollectionWrapper) {
                var element = this.chipCollectionWrapper.querySelector('span[data-value="' + value + '"]');
                element && remove(element);
            }
        }, MultiSelect.prototype.updateChipStatus = function() {
            this.value.length ? (isNullOrUndefined(this.chipCollectionWrapper) || (this.chipCollectionWrapper.style.display = ""), 
            "Delimiter" !== this.mode && "CheckBox" !== this.mode || this.showDelimWrapper(), 
            this.showOverAllClear()) : (isNullOrUndefined(this.chipCollectionWrapper) || (this.chipCollectionWrapper.style.display = "none"), 
            isNullOrUndefined(this.delimiterWrapper) || (this.delimiterWrapper.style.display = "none"), 
            this.hideOverAllClear());
        }, MultiSelect.prototype.addValue = function(value, text, eve) {
            this.value || (this.value = []), this.setProperties({
                value: [].concat([], this.value, [ value ])
            }, !0);
            var element = this.list.querySelector('li[data-value="' + value + '"]');
            this.removeFocus(), element && (this.addListFocus(element), this.addListSelection(element)), 
            "Delimiter" !== this.mode && "CheckBox" !== this.mode && this.addChip(text, value, eve), 
            this.hideSelectedItem && this.fields.groupBy && this.hideGroupItem(value), this.updateChipStatus(), 
            this.checkMaxSelection();
        }, MultiSelect.prototype.checkMaxSelection = function() {
            if ((this.value && this.value.length ? this.value.length : 0) === this.maximumSelectionLength) {
                addClass(this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)"), "e-disable");
            }
        }, MultiSelect.prototype.dispatchSelect = function(value, eve, element, isNotTrigger, length) {
            if (this.initStatus && !isNotTrigger) {
                var val = this.getDataByValue(value), eventArgs = {
                    e: eve,
                    item: element,
                    itemData: val,
                    isInteracted: !!eve,
                    cancel: !1
                };
                if (this.trigger("select", eventArgs), eventArgs.cancel) return !0;
                if (length && (this.selectAllEventData.push(val), this.selectAllEventEle.push(element)), 
                1 === length) {
                    var args = {
                        event: eve,
                        items: this.selectAllEventEle,
                        itemData: this.selectAllEventData,
                        isInteracted: !!eve,
                        isChecked: !0
                    };
                    this.trigger("selectedAll", args), this.selectAllEventData = [];
                }
            }
            return !1;
        }, MultiSelect.prototype.addChip = function(text, value, e) {
            if (this.chipCollectionWrapper) {
                var item = this.getChip(text, value, e);
                if (item.cancel) return;
                this.chipCollectionWrapper.appendChild(item.element);
            }
        }, MultiSelect.prototype.removeChipFocus = function() {
            var elements, closeElements;
            if (elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP), closeElements = this.chipCollectionWrapper.querySelectorAll("span." + "e-chips-close".split(" ")[0]), 
            removeClass(elements, "e-chip-selected"), Browser.isDevice) for (var index = 0; index < closeElements.length; index++) closeElements[index].style.display = "none";
        }, MultiSelect.prototype.onMobileChipInteraction = function(e) {
            var chipElem = closest(e.target, "." + CHIP), chipClose = chipElem.querySelector("span." + "e-chips-close".split(" ")[0]);
            this.enabled && !this.readonly && (chipElem.classList.contains("e-chip-selected") || (this.removeChipFocus(), 
            chipClose.style.display = "", chipElem.classList.add("e-chip-selected")), this.refreshPopup(), 
            e.preventDefault());
        }, MultiSelect.prototype.getChip = function(data, value, e) {
            var itemData = {
                text: value,
                value: value
            }, chip = this.createElement("span", {
                className: CHIP,
                attrs: {
                    "data-value": value,
                    title: data
                }
            }), chipContent = this.createElement("span", {
                className: "e-chipcontent"
            }), chipClose = this.createElement("span", {
                className: "e-chips-close"
            });
            if (this.mainData && (itemData = this.getDataByValue(value)), this.valueTemplate && !isNullOrUndefined(itemData)) for (var _i = 0, _a = compile$$1(this.valueTemplate)(itemData); _i < _a.length; _i++) {
                var item = _a[_i];
                chipContent.appendChild(item);
            } else chipContent.innerHTML = data;
            chip.appendChild(chipContent);
            var eventArgs = {
                isInteracted: !!e,
                itemData: itemData,
                e: e,
                setClass: function(classes) {
                    addClass([ chip ], classes);
                },
                cancel: !1
            };
            return this.trigger("tagging", eventArgs), eventArgs.cancel ? {
                cancel: !0,
                element: chip
            } : (Browser.isDevice ? (chip.classList.add("e-mob-chip"), append([ chipClose ], chip), 
            chipClose.style.display = "none", EventHandler.add(chip, "click", this.onMobileChipInteraction, this)) : (EventHandler.add(chip, "mousedown", this.chipClick, this), 
            this.showClearButton && chip.appendChild(chipClose)), EventHandler.add(chipClose, "mousedown", this.onChipRemove, this), 
            {
                cancel: !1,
                element: chip
            });
        }, MultiSelect.prototype.calcPopupWidth = function() {
            var width = formatUnit(this.popupWidth);
            if (width.indexOf("%") > -1) {
                width = (this.componentWrapper.offsetWidth * parseFloat(width) / 100).toString() + "px";
            }
            return width;
        }, MultiSelect.prototype.mouseIn = function() {
            this.enabled && !this.readonly && this.showOverAllClear();
        }, MultiSelect.prototype.mouseOut = function() {
            this.inputFocus || (this.overAllClear.style.display = "none");
        }, MultiSelect.prototype.listOption = function(dataSource, fields) {
            var iconCss = !isNullOrUndefined(fields.iconCss), fieldProperty = fields.properties;
            return this.listCurrentOptions = null !== fields.text || null !== fields.value ? {
                fields: fieldProperty,
                showIcon: iconCss,
                ariaAttributes: {
                    groupItemRole: "presentation"
                }
            } : {
                fields: {
                    value: "text"
                }
            }, extend(this.listCurrentOptions, this.listCurrentOptions, fields, !0), "CheckBox" === this.mode && this.notify("listoption", {
                module: "CheckBoxSelection",
                enable: "CheckBox" === this.mode,
                dataSource: dataSource,
                fieldProperty: fieldProperty
            }), this.listCurrentOptions;
        }, MultiSelect.prototype.renderPopup = function() {
            var _this = this;
            if (this.list || _super.prototype.render.call(this), !this.popupObj) {
                var args = {
                    cancel: !1
                };
                if (this.trigger("beforeOpen", args), args.cancel) return;
                document.body.appendChild(this.popupWrapper);
                var overAllHeight = parseInt(this.popupHeight, 10);
                if (this.popupWrapper.style.visibility = "hidden", this.headerTemplate && (this.setHeaderTemplate(), 
                overAllHeight -= this.header.offsetHeight), append([ this.list ], this.popupWrapper), 
                this.footerTemplate && (this.setFooterTemplate(), overAllHeight -= this.footer.offsetHeight), 
                "CheckBox" === this.mode && this.showSelectAll ? (this.notify("selectAll", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode
                }), overAllHeight -= this.selectAllHeight) : "CheckBox" !== this.mode || this.showSelectAll || this.headerTemplate && this.footerTemplate ? "CheckBox" !== this.mode || this.showSelectAll || (this.notify("selectAll", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode
                }), overAllHeight = parseInt(this.popupHeight, 10), this.headerTemplate && this.header && (overAllHeight -= this.header.offsetHeight), 
                this.footerTemplate && this.footer && (overAllHeight -= this.footer.offsetHeight)) : (this.notify("selectAll", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode
                }), overAllHeight = parseInt(this.popupHeight, 10)), "CheckBox" === this.mode) {
                    var args_1 = {
                        module: "CheckBoxSelection",
                        enable: "CheckBox" === this.mode,
                        popupElement: this.popupWrapper
                    };
                    this.notify("searchBox", args_1), overAllHeight -= this.searchBoxHeight, addClass([ this.popupWrapper ], "e-checkbox");
                }
                "auto" !== this.popupHeight ? (this.list.style.maxHeight = formatUnit(overAllHeight), 
                this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight)) : this.list.style.maxHeight = formatUnit(this.popupHeight), 
                this.popupObj = new Popup(this.popupWrapper, {
                    width: this.calcPopupWidth(),
                    targetType: "relative",
                    position: {
                        X: "left",
                        Y: "bottom"
                    },
                    relateTo: this.overAllWrapper,
                    collision: {
                        X: "flip",
                        Y: "flip"
                    },
                    offsetY: 1,
                    enableRtl: this.enableRtl,
                    zIndex: this.zIndex,
                    close: function() {
                        _this.popupObj.element.parentElement && detach(_this.popupObj.element);
                    },
                    open: function() {
                        _this.notify("inputFocus", {
                            module: "CheckBoxSelection",
                            enable: "CheckBox" === _this.mode,
                            value: "focus"
                        });
                    }
                }), this.popupObj.close(), this.popupWrapper.style.visibility = "", "CheckBox" === this.mode && Browser.isDevice && this.notify("deviceSearchBox", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode
                });
            }
        }, MultiSelect.prototype.setHeaderTemplate = function() {
            this.header && this.header.remove(), this.header = this.createElement("div"), addClass([ this.header ], "e-ddl-header");
            for (var elements = compile$$1(this.headerTemplate)({}), temp = 0; temp < elements.length; temp++) this.header.appendChild(elements[temp]);
            "CheckBox" === this.mode && this.showSelectAll ? prepend([ this.header ], this.popupWrapper) : append([ this.header ], this.popupWrapper), 
            EventHandler.add(this.header, "mousedown", this.onListMouseDown, this);
        }, MultiSelect.prototype.setFooterTemplate = function() {
            this.footer && this.footer.remove(), this.footer = this.createElement("div"), addClass([ this.footer ], "e-ddl-footer");
            for (var elements = compile$$1(this.footerTemplate)({}), temp = 0; temp < elements.length; temp++) this.footer.appendChild(elements[temp]);
            append([ this.footer ], this.popupWrapper), EventHandler.add(this.footer, "mousedown", this.onListMouseDown, this);
        }, MultiSelect.prototype.ClearAll = function(e) {
            if (this.enabled && !this.readonly) {
                var temp = void 0, tempValues = this.value ? this.value.slice() : [];
                if (this.value) for (temp = this.value[0]; 0 !== this.value.length; temp = this.value[0]) this.removeValue(temp, e);
                if (this.mainList && this.listData && this.allowFiltering) {
                    var list = this.mainList.cloneNode ? this.mainList.cloneNode(!0) : this.mainList;
                    this.onActionComplete(list, this.mainData);
                }
                this.focusAtFirstListItem(), this.updateDelimeter(this.delimiterChar), "Box" !== this.mode && this.updateDelimView(), 
                this.makeTextBoxEmpty(), this.isPopupOpen() && this.refreshPopup(), this.inputFocus || (this.updateValueState(e, this.value, tempValues), 
                "CheckBox" !== this.mode && this.inputElement.focus()), "CheckBox" === this.mode && (this.refreshPlaceHolder(), 
                this.refreshInputHight()), e.preventDefault();
            }
        }, MultiSelect.prototype.windowResize = function() {
            this.refreshPopup(), !this.inputFocus && this.viewWrapper && this.viewWrapper.parentElement && this.updateDelimView();
        }, MultiSelect.prototype.resetValueHandler = function(e) {
            var formElement = closest(this.inputElement, "form");
            formElement && e.target === formElement && (this.value = null);
        }, MultiSelect.prototype.wireEvent = function() {
            EventHandler.add(this.componentWrapper, "mousedown", this.wrapperClick, this), EventHandler.add(window, "resize", this.windowResize, this), 
            EventHandler.add(this.inputElement, "focus", this.focusIn, this), EventHandler.add(this.inputElement, "keydown", this.onKeyDown, this), 
            EventHandler.add(this.inputElement, "keyup", this.KeyUp, this), "CheckBox" !== this.mode && EventHandler.add(this.inputElement, "input", this.onInput, this), 
            EventHandler.add(this.inputElement, "blur", this.onBlur, this), EventHandler.add(this.componentWrapper, "mousemove", this.mouseIn, this);
            var formElement = closest(this.inputElement, "form");
            formElement && EventHandler.add(formElement, "reset", this.resetValueHandler, this), 
            EventHandler.add(this.componentWrapper, "mouseout", this.mouseOut, this), EventHandler.add(this.overAllClear, "mouseup", this.ClearAll, this);
        }, MultiSelect.prototype.onInput = function() {
            this.keyDownStatus ? this.isValidKey = !0 : this.isValidKey = !1, this.keyDownStatus = !1;
        }, MultiSelect.prototype.preRender = function() {
            this.initializeData(), _super.prototype.preRender.call(this);
        }, MultiSelect.prototype.initializeData = function() {
            this.mainListCollection = [], this.beforePopupOpen = !1, this.filterAction = !1, 
            this.remoteFilterAction = !1, this.isFirstClick = !1, this.mobFilter = !0, this.isFiltered = !1, 
            this.focused = !0, this.initial = !0, this.backCommand = !0;
        }, MultiSelect.prototype.updateData = function(delimiterChar) {
            var temp, data = "", delim = "Delimiter" === this.mode || "CheckBox" === this.mode, text = [], tempData = this.listData;
            if (this.listData = this.mainData, this.hiddenElement.innerHTML = "", !isNullOrUndefined(this.value)) for (var index = 0; !isNullOrUndefined(this.value[index]); index++) data += (temp = this.listData ? this.getTextByValue(this.value[index]) : this.value[index]) + delimiterChar + " ", 
            text.push(temp), this.hiddenElement.innerHTML += '<option selected value ="' + this.value[index] + '">' + index + "</option>";
            this.text = text.toString(), delim && (this.delimiterWrapper.innerHTML = data), 
            this.listData = tempData;
        }, MultiSelect.prototype.initialValueUpdate = function() {
            if (this.list) {
                var text = void 0, element = void 0, value = void 0;
                if (this.chipCollectionWrapper && (this.chipCollectionWrapper.innerHTML = ""), this.removeListSelection(), 
                !isNullOrUndefined(this.value)) for (var index = 0; !isNullOrUndefined(this.value[index]); index++) if (value = this.value[index], 
                element = this.hideSelectedItem ? this.ulElement.querySelector('li[data-value="' + value + '"]') : this.list.querySelector('li[data-value="' + value + '"]'), 
                text = this.getTextByValue(value), element && "true" !== element.getAttribute("aria-selected") || element && "true" === element.getAttribute("aria-selected") && this.hideSelectedItem && ("Box" === this.mode || "Default" === this.mode)) this.addChip(text, value), 
                this.addListSelection(element); else if (value && this.allowCustomValue) {
                    var indexItem = this.listData.length, newValue = {};
                    setValue(this.fields.text, value, newValue), setValue(this.fields.value, value, newValue), 
                    this.addItem(newValue, indexItem), this.addChip(text, value), this.addListSelection(element);
                }
                "CheckBox" === this.mode ? (this.updateDelimView(), this.updateValueState(null, this.value, this.tempValues), 
                this.refreshInputHight(), this.updateDelimeter(this.delimiterChar)) : this.updateDelimeter(this.delimiterChar), 
                "CheckBox" === this.mode && this.showSelectAll && isNullOrUndefined(this.value) && this.notify("checkSelectAll", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode,
                    value: "uncheck"
                }), this.inputFocus || ("Box" === this.mode ? this.chipCollectionWrapper.style.display = "" : "Delimiter" !== this.mode && "CheckBox" !== this.mode || this.showDelimWrapper());
            }
        }, MultiSelect.prototype.isValidLI = function(li) {
            return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);
        }, MultiSelect.prototype.updateListSelection = function(li, e, length) {
            var value = this.getFormattedValue(li.getAttribute("data-value")), text = this.getTextByValue(value);
            if (this.removeHover(), this.value && -1 !== this.value.indexOf(value)) this.removeValue(value, e, length); else {
                if (this.dispatchSelect(value, e, li, "true" === li.getAttribute("aria-selected"), length)) return;
                if ((this.allowCustomValue || this.allowFiltering) && !this.mainList.querySelector('li[data-value="' + value + '"]')) {
                    var temp = li.cloneNode(!0), data = this.getDataByValue(value);
                    append([ temp ], this.mainList), this.mainData.push(data);
                    var eventArgs = {
                        newData: data,
                        cancel: !1
                    };
                    if (this.trigger("customValueSelection", eventArgs), eventArgs.cancel) return;
                }
                this.remoteCustomValue = !1, this.addValue(value, text, e);
            }
        }, MultiSelect.prototype.removeListSelection = function() {
            var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected, selectedItems = this.list.querySelectorAll("." + className), temp = selectedItems.length;
            if (selectedItems && selectedItems.length) for (removeClass(selectedItems, className); temp > 0; ) selectedItems[temp - 1].setAttribute("aria-selected", "false"), 
            temp--;
            if (!isNullOrUndefined(this.mainList)) {
                var selectItems = this.mainList.querySelectorAll("." + className), temp1 = selectItems.length;
                if (selectItems && selectItems.length) for (removeClass(selectItems, className); temp1 > 0; ) selectItems[temp1 - 1].setAttribute("aria-selected", "false"), 
                "CheckBox" === this.mode && (selectItems[temp1 - 1].firstElementChild.setAttribute("aria-checked", "false"), 
                removeClass([ selectItems[temp1 - 1].firstElementChild.lastElementChild ], "e-check")), 
                temp1--;
            }
        }, MultiSelect.prototype.removeHover = function() {
            var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
            hoveredItem && hoveredItem.length && removeClass(hoveredItem, dropDownBaseClasses.hover);
        }, MultiSelect.prototype.removeFocus = function() {
            if (this.list) {
                var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.focus), mainlist = this.mainList.querySelectorAll("." + dropDownBaseClasses.focus);
                hoveredItem && hoveredItem.length && (removeClass(hoveredItem, dropDownBaseClasses.focus), 
                removeClass(mainlist, dropDownBaseClasses.focus));
            }
        }, MultiSelect.prototype.addListHover = function(li) {
            this.enabled && this.isValidLI(li) && (this.removeHover(), addClass([ li ], dropDownBaseClasses.hover));
        }, MultiSelect.prototype.addListFocus = function(element) {
            this.enabled && this.isValidLI(element) && (this.removeFocus(), addClass([ element ], dropDownBaseClasses.focus));
        }, MultiSelect.prototype.addListSelection = function(element) {
            var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
            if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {
                if (addClass([ element ], className), this.updateMainList(!1, element.getAttribute("data-value")), 
                element.setAttribute("aria-selected", "true"), "CheckBox" === this.mode) {
                    var ariaCheck = element.firstElementChild.getAttribute("aria-checked");
                    ("false" === ariaCheck || isNullOrUndefined(ariaCheck)) && this.notify("updatelist", {
                        module: "CheckBoxSelection",
                        enable: "CheckBox" === this.mode,
                        li: element,
                        e: this
                    });
                }
                this.notify("activeList", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode,
                    li: element,
                    e: this
                }), null !== this.chipCollectionWrapper && this.removeChipSelection(), attributes(this.inputElement, {
                    "aria-activedescendant": element.id
                });
            }
        }, MultiSelect.prototype.updateDelimeter = function(delimChar) {
            this.updateData(delimChar);
        }, MultiSelect.prototype.onMouseClick = function(e) {
            this.scrollFocusStatus = !1;
            var li = closest(e.target, "." + dropDownBaseClasses.li);
            if (this.isValidLI(li)) {
                var limit = this.value && this.value.length ? this.value.length : 0;
                li.classList.contains("e-active") && (limit -= 1), limit < this.maximumSelectionLength && (this.updateListSelection(li, e), 
                this.addListFocus(li), (this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData ? ("CheckBox" !== this.mode && this.focusAtLastListItem(li.getAttribute("data-value")), 
                this.refreshSelection()) : this.makeTextBoxEmpty()), "CheckBox" === this.mode ? (this.updateDelimView(), 
                this.refreshInputHight(), this.updateDelimeter(this.delimiterChar)) : this.updateDelimeter(this.delimiterChar), 
                this.checkSelectAll(), this.refreshPopup(), this.hideSelectedItem && this.focusAtFirstListItem(), 
                this.closePopupOnSelect ? this.hidePopup() : e.preventDefault(), this.makeTextBoxEmpty();
            } else e.preventDefault();
            "CheckBox" !== this.mode && this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent), 
            this.refreshPlaceHolder();
        }, MultiSelect.prototype.onMouseOver = function(e) {
            var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
            this.addListHover(currentLi);
        }, MultiSelect.prototype.onMouseLeave = function(e) {
            this.removeHover();
        }, MultiSelect.prototype.onListMouseDown = function(e) {
            e.preventDefault(), this.scrollFocusStatus = !0;
        }, MultiSelect.prototype.onDocumentClick = function(e) {
            if ("CheckBox" !== this.mode) {
                var target = e.target;
                !isNullOrUndefined(this.popupObj) && closest(target, "#" + this.popupObj.element.id) || this.overAllWrapper.contains(e.target) ? this.scrollFocusStatus = (Browser.isIE || "edge" === Browser.info.name) && document.activeElement === this.inputElement : this.scrollFocusStatus = !1;
            }
        }, MultiSelect.prototype.wireListEvents = function() {
            EventHandler.add(document, "mousedown", this.onDocumentClick, this), EventHandler.add(this.list, "mousedown", this.onListMouseDown, this), 
            EventHandler.add(this.list, "mouseup", this.onMouseClick, this), EventHandler.add(this.list, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
        }, MultiSelect.prototype.unwireListEvents = function() {
            EventHandler.remove(document, "mousedown", this.onDocumentClick), this.list && (EventHandler.remove(this.list, "mousedown", this.onListMouseDown), 
            EventHandler.remove(this.list, "mouseup", this.onMouseClick), EventHandler.remove(this.list, "mouseover", this.onMouseOver), 
            EventHandler.remove(this.list, "mouseout", this.onMouseLeave));
        }, MultiSelect.prototype.hideOverAllClear = function() {
            this.value && this.value.length && "" !== this.inputElement.value || (this.overAllClear.style.display = "none");
        }, MultiSelect.prototype.showOverAllClear = function() {
            (this.value && this.value.length || "" !== this.inputElement.value) && this.showClearButton ? this.overAllClear.style.display = "" : this.overAllClear.style.display = "none";
        }, MultiSelect.prototype.showSpinner = function() {
            isNullOrUndefined(this.spinnerElement) && ("none" !== this.overAllClear.style.display ? this.spinnerElement = this.overAllClear : (this.spinnerElement = this.createElement("span", {
                className: "e-chips-close e-close-hooker e-ms-spinner-icon"
            }), this.componentWrapper.appendChild(this.spinnerElement)), createSpinner({
                target: this.spinnerElement,
                width: Browser.isDevice ? "16px" : "14px"
            }, this.createElement), addClass([ this.spinnerElement ], "e-ddl-disable-icon"), 
            showSpinner(this.spinnerElement));
        }, MultiSelect.prototype.hideSpinner = function() {
            isNullOrUndefined(this.spinnerElement) || (hideSpinner(this.spinnerElement), removeClass([ this.spinnerElement ], "e-ddl-disable-icon"), 
            this.spinnerElement.classList.contains("e-ms-spinner-icon") ? detach(this.spinnerElement) : this.spinnerElement.innerHTML = "", 
            this.spinnerElement = null);
        }, MultiSelect.prototype.updateDelimView = function() {
            if (this.delimiterWrapper && this.hideDelimWrapper(), this.chipCollectionWrapper && (this.chipCollectionWrapper.style.display = "none"), 
            this.viewWrapper.style.display = "", this.value && this.value.length) {
                var data = "", temp = void 0, tempData = void 0, tempIndex = 1, wrapperleng = void 0, remaining = void 0;
                this.viewWrapper.innerHTML = "";
                var remainContent = new L10n("dropdowns", {
                    noRecordsTemplate: "No Records Found",
                    actionFailureTemplate: "The Request Failed",
                    overflowCountTemplate: "+${count} more.."
                }, this.locale).getConstant("overflowCountTemplate"), raminElement = this.createElement("span", {
                    className: "e-remain"
                }), compiledString = compile$$1(remainContent);
                raminElement.appendChild(compiledString({
                    count: this.value.length
                })[0]), this.viewWrapper.appendChild(raminElement);
                var remainSize = raminElement.offsetWidth;
                remove(raminElement), this.viewWrapper.innerHTML = "";
                this.searchWrapper.offsetWidth;
                var overAllContainer = parseInt(window.getComputedStyle(this.componentWrapper).width, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10), remainValue = void 0;
                if (!isNullOrUndefined(this.value)) for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
                    if (data += 0 === index ? "" : this.delimiterChar + " ", this.mainData && this.mainData.length) if ("CheckBox" === this.mode) {
                        remainValue = 110;
                        var newTemp = this.listData;
                        this.listData = this.mainData, temp = this.getTextByValue(this.value[index]), this.listData = newTemp;
                    } else remainValue = 0, temp = this.getTextByValue(this.value[index]); else temp = this.value[index];
                    if (data += temp, temp = this.viewWrapper.innerHTML, this.viewWrapper.innerHTML = data, 
                    (wrapperleng = this.viewWrapper.offsetWidth) > overAllContainer - remainValue) {
                        void 0 !== tempData && (temp = tempData, index = tempIndex + 1), this.viewWrapper.innerHTML = temp, 
                        remaining = this.value.length - index;
                        break;
                    }
                    wrapperleng + remainSize <= overAllContainer ? (tempData = data, tempIndex = index) : 0 === index && (tempData = "", 
                    tempIndex = -1);
                }
                remaining > 0 && (raminElement.innerHTML = "", raminElement.appendChild(compiledString({
                    count: remaining
                })[0]), this.viewWrapper.appendChild(raminElement));
            } else this.viewWrapper.innerHTML = "", this.viewWrapper.style.display = "none";
        }, MultiSelect.prototype.unWireEvent = function() {
            EventHandler.remove(this.componentWrapper, "mousedown", this.wrapperClick), EventHandler.remove(window, "resize", this.windowResize), 
            EventHandler.remove(this.inputElement, "focus", this.focusIn), EventHandler.remove(this.inputElement, "keydown", this.onKeyDown), 
            "CheckBox" !== this.mode && EventHandler.remove(this.inputElement, "input", this.onInput), 
            EventHandler.remove(this.inputElement, "keyup", this.KeyUp);
            var formElement = closest(this.inputElement, "form");
            formElement && EventHandler.remove(formElement, "reset", this.resetValueHandler), 
            EventHandler.remove(this.inputElement, "blur", this.onBlur), EventHandler.remove(this.componentWrapper, "mousemove", this.mouseIn), 
            EventHandler.remove(this.componentWrapper, "mouseout", this.mouseOut), EventHandler.remove(this.overAllClear, "mousedown", this.ClearAll);
        }, MultiSelect.prototype.selectAllItem = function(state, event) {
            var li, length = (li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li[aria-selected="true"]:not(.e-reorder-hide)')).length;
            if (li && li.length) for (;length > 0; ) this.updateListSelection(li[length - 1], event, length), 
            length--;
            "Box" === this.mode || this.isPopupOpen() ? this.searchWrapper.classList.remove("e-zero-size") : this.updateDelimView(), 
            "CheckBox" === this.mode ? (this.updateDelimView(), this.refreshInputHight(), this.updateDelimeter(this.delimiterChar)) : this.updateDelimeter(this.delimiterChar), 
            this.refreshPlaceHolder();
        }, MultiSelect.prototype.setZIndex = function() {
            this.popupObj && this.popupObj.setProperties({
                zIndex: this.zIndex
            });
        }, MultiSelect.prototype.updateDataSource = function(prop) {
            isNullOrUndefined(this.list) ? this.renderPopup() : this.resetList(this.dataSource), 
            this.value && this.value.length && (this.setProperties({
                value: this.value
            }), this.refreshSelection());
        }, MultiSelect.prototype.onLoadSelect = function() {
            this.setDynValue = !0, this.renderPopup();
        }, MultiSelect.prototype.selectAllItems = function(state, event) {
            var _this = this;
            if (isNullOrUndefined(this.list)) this.selectAllAction = function() {
                if ("CheckBox" === _this.mode && _this.showSelectAll) {
                    var args = {
                        module: "CheckBoxSelection",
                        enable: "CheckBox" === _this.mode,
                        value: state ? "check" : "uncheck"
                    };
                    _this.notify("checkSelectAll", args);
                }
                _this.selectAllItem(state, event), _this.selectAllAction = null;
            }, _super.prototype.render.call(this); else {
                if (this.selectAllAction = null, "CheckBox" === this.mode && this.showSelectAll) {
                    var args = {
                        value: state ? "check" : "uncheck",
                        enable: "CheckBox" === this.mode,
                        module: "CheckBoxSelection"
                    };
                    this.notify("checkSelectAll", args);
                }
                this.selectAllItem(state, event);
            }
        }, MultiSelect.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, MultiSelect.prototype.onPropertyChanged = function(newProp, oldProp) {
            newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && (this.mainList = null, 
            this.mainData = null), "multiselect" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "query":
                  case "dataSource":
                    "CheckBox" === this.mode && this.showSelectAll && (isNullOrUndefined(this.popupObj) || (this.popupObj.destroy(), 
                    this.popupObj = null), this.renderPopup());
                    break;

                  case "htmlAttributes":
                    this.updateHTMLAttribute();
                    break;

                  case "showClearButton":
                    this.updateClearButton(newProp.showClearButton);
                    break;

                  case "value":
                    this.list ? this.inputFocus || (this.initialValueUpdate(), "Box" !== this.mode && this.updateDelimView(), 
                    this.refreshInputHight(), this.refreshPlaceHolder(), this.updateValueState(null, this.value, oldProp.value)) : this.onLoadSelect();
                    break;

                  case "width":
                    setStyleAttribute(this.overAllWrapper, {
                        width: formatUnit(newProp.width)
                    }), this.popupObj.setProperties({
                        width: this.calcPopupWidth()
                    });
                    break;

                  case "placeholder":
                    this.refreshPlaceHolder();
                    break;

                  case "filterBarPlaceholder":
                    this.notify("filterBarPlaceholder", {
                        filterBarPlaceholder: newProp.filterBarPlaceholder
                    });
                    break;

                  case "delimiterChar":
                    "Box" !== this.mode && this.updateDelimView(), this.updateData(newProp.delimiterChar);
                    break;

                  case "cssClass":
                    this.popupWrapper.classList.remove(oldProp.cssClass), this.overAllWrapper.classList.remove(oldProp.cssClass), 
                    this.updateCssClass();
                    break;

                  case "enableRtl":
                    this.enableRTL(newProp.enableRtl), _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
                    break;

                  case "readonly":
                    this.updateReadonly(newProp.readonly), this.hidePopup();
                    break;

                  case "enabled":
                    this.hidePopup(), this.enable(newProp.enabled);
                    break;

                  case "showSelectAll":
                    this.popupObj && (this.popupObj.destroy(), this.popupObj = null), this.renderPopup();
                    break;

                  case "showDropDownIcon":
                    this.dropDownIcon();
                    break;

                  case "floatLabelType":
                    this.setFloatLabelType();
                    break;

                  case "enableSelectionOrder":
                    break;

                  case "selectAllText":
                    this.notify("selectAllText", !1);
                    break;

                  case "popupHeight":
                  case "headerTemplate":
                  case "footerTemplate":
                    this.popupObj && (this.popupObj.destroy(), this.popupObj = null), this.renderPopup();
                    break;

                  default:
                    var msProps = void 0;
                    msProps = this.getPropObject(prop, newProp, oldProp), _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);
                }
            }
        }, MultiSelect.prototype.hidePopup = function() {
            if (this.isPopupOpen()) {
                var animModel = {
                    name: "FadeOut",
                    duration: 100,
                    delay: 100
                }, eventArgs = {
                    popup: this.popupObj,
                    cancel: !1,
                    animation: animModel
                };
                if (this.trigger("close", eventArgs), eventArgs.cancel) return;
                this.beforePopupOpen = !1, this.overAllWrapper.classList.remove("e-icon-anim"), 
                this.popupObj.hide(new Animation(eventArgs.animation)), attributes(this.inputElement, {
                    "aria-expanded": "false"
                }), this.notify("inputFocus", {
                    module: "CheckBoxSelection",
                    enable: "CheckBox" === this.mode,
                    value: "clear"
                }), this.popupObj.hide(), removeClass([ document.body, this.popupObj.element ], "e-popup-full-page"), 
                EventHandler.remove(this.list, "keydown", this.onKeyDown);
            }
        }, MultiSelect.prototype.showPopup = function() {
            if (this.enabled) {
                if (!this.ulElement) return this.beforePopupOpen = !0, void _super.prototype.render.call(this);
                var mainLiLength = this.ulElement.querySelectorAll("li.e-list-item").length, liLength = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + "." + HIDE_LIST).length;
                mainLiLength > 0 && mainLiLength === liLength && liLength === this.mainData.length ? this.beforePopupOpen = !1 : this.onPopupShown();
            }
        }, MultiSelect.prototype.selectAll = function(state) {
            this.selectAllItems(state);
        }, MultiSelect.prototype.getModuleName = function() {
            return "multiselect";
        }, MultiSelect.prototype.render = function() {
            var _this = this;
            this.initStatus = !1, this.setDynValue = !1, this.searchWrapper = this.createElement("span", {
                className: "e-searcher"
            }), this.viewWrapper = this.createElement("span", {
                className: "e-delim-view e-delim-values",
                styles: "display:none;"
            }), this.overAllClear = this.createElement("span", {
                className: "e-chips-close e-close-hooker",
                styles: "display:none;"
            }), this.componentWrapper = this.createElement("div", {
                className: "e-multi-select-wrapper"
            }), this.overAllWrapper = this.createElement("div", {
                className: "e-multiselect e-input-group"
            }), "CheckBox" === this.mode && addClass([ this.overAllWrapper ], "e-checkbox"), 
            Browser.isDevice && this.componentWrapper.classList.add("e-mob-wrapper"), this.overAllWrapper.style.width = formatUnit(this.width), 
            this.overAllWrapper.appendChild(this.componentWrapper), this.popupWrapper = this.createElement("div", {
                id: this.element.id + "_popup",
                className: "e-ddl e-popup e-multi-select-list-wrapper"
            }), "Delimiter" === this.mode || "CheckBox" === this.mode ? (this.delimiterWrapper = this.createElement("span", {
                className: "e-delim-values",
                styles: "display:none"
            }), this.componentWrapper.appendChild(this.delimiterWrapper)) : (this.chipCollectionWrapper = this.createElement("span", {
                className: "e-chips-collection",
                styles: "display:none"
            }), this.componentWrapper.appendChild(this.chipCollectionWrapper)), "Box" !== this.mode && this.componentWrapper.appendChild(this.viewWrapper), 
            this.componentWrapper.appendChild(this.searchWrapper), this.showClearButton && !Browser.isDevice ? this.componentWrapper.appendChild(this.overAllClear) : this.componentWrapper.classList.add("e-close-icon-hide"), 
            this.dropDownIcon(), this.inputElement = this.createElement("input", {
                className: "e-dropdownbase",
                attrs: {
                    spellcheck: "false",
                    type: "text",
                    autocomplete: "off",
                    tabindex: "0"
                }
            }), this.element.tagName !== this.getNgDirective() && (this.element.style.display = "none"), 
            this.element.tagName === this.getNgDirective() ? (this.element.appendChild(this.overAllWrapper), 
            this.searchWrapper.appendChild(this.inputElement)) : (this.element.parentElement.insertBefore(this.overAllWrapper, this.element), 
            this.searchWrapper.appendChild(this.inputElement), this.searchWrapper.appendChild(this.element), 
            this.element.removeAttribute("tabindex")), "Never" !== this.floatLabelType ? createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder) : "Never" === this.floatLabelType && this.refreshPlaceHolder(), 
            this.element.style.opacity = "";
            var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
            this.element.id = id, this.hiddenElement = this.createElement("select", {
                attrs: {
                    "aria-hidden": "true",
                    class: "e-multi-hidden",
                    tabindex: "-1",
                    multiple: "true"
                }
            }), this.componentWrapper.appendChild(this.hiddenElement), this.validationAttribute(this.element, this.hiddenElement), 
            "CheckBox" !== this.mode && this.hideOverAllClear(), this.wireEvent(), this.enable(this.enabled), 
            this.enableRTL(this.enableRtl), this.value && this.value.length ? (this.renderPopup(), 
            this.dataSource instanceof DataManager ? this.setInitialValue = function() {
                _this.initStatus = !1, _this.initialValueUpdate(), _this.initialUpdate(), _this.setInitialValue = null, 
                _this.initStatus = !0;
            } : (this.initialValueUpdate(), this.initialUpdate())) : this.initialUpdate(), this.initStatus = !0, 
            this.checkAutoFocus();
        }, MultiSelect.prototype.checkAutoFocus = function() {
            this.element.hasAttribute("autofocus") && this.focusIn();
        }, MultiSelect.prototype.setFloatLabelType = function() {
            !function(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {
                var placeholderText, placeholderElement = componentWrapper.querySelector("." + FLOATTEXT), floatLine = componentWrapper.querySelector("." + FLOATLINE);
                isNullOrUndefined(placeholderElement) ? setPlaceHolder(value, inputElement, placeholderText = null !== placeholder ? placeholder : "") : (placeholderText = placeholderElement.innerText, 
                detach(searchWrapper.querySelector("." + FLOATTEXT)), setPlaceHolder(value, inputElement, placeholderText), 
                isNullOrUndefined(floatLine) || detach(searchWrapper.querySelector("." + FLOATLINE))), 
                overAllWrapper.classList.remove("e-float-input");
            }(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder), 
            "Never" !== this.floatLabelType && createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
        }, MultiSelect.prototype.dropDownIcon = function() {
            "CheckBox" === this.mode && this.showDropDownIcon ? (this.dropIcon = this.createElement("span", {
                className: "e-input-group-icon e-ddl-icon"
            }), this.componentWrapper.appendChild(this.dropIcon), addClass([ this.componentWrapper ], [ "e-down-icon" ])) : isNullOrUndefined(this.dropIcon) || (this.dropIcon.parentElement.removeChild(this.dropIcon), 
            removeClass([ this.componentWrapper ], [ "e-down-icon" ]));
        }, MultiSelect.prototype.initialUpdate = function() {
            "Box" !== this.mode && this.updateDelimView(), this.updateCssClass(), this.updateHTMLAttribute(), 
            this.updateReadonly(this.readonly), this.refreshInputHight();
        }, MultiSelect.prototype.destroy = function() {
            this.popupObj && this.popupObj.hide(), this.notify("destroy", {}), this.unwireListEvents(), 
            this.unWireEvent(), this.list = null, this.popupObj = null, this.mainList = null, 
            this.mainData = null, _super.prototype.destroy.call(this);
            for (var temp = [ "readonly", "aria-disabled", "aria-placeholder", "placeholder" ], length = temp.length; length > 0; ) this.inputElement.removeAttribute(temp[length - 1]), 
            length--;
            this.element.style.display = "block", this.overAllWrapper.parentElement && (this.overAllWrapper.parentElement.tagName === this.getNgDirective() ? remove(this.overAllWrapper) : (this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper), 
            remove(this.overAllWrapper)));
        }, __decorate$33([ Property(null) ], MultiSelect.prototype, "cssClass", void 0), 
        __decorate$33([ Property("100%") ], MultiSelect.prototype, "width", void 0), __decorate$33([ Property("300px") ], MultiSelect.prototype, "popupHeight", void 0), 
        __decorate$33([ Property("100%") ], MultiSelect.prototype, "popupWidth", void 0), 
        __decorate$33([ Property(null) ], MultiSelect.prototype, "placeholder", void 0), 
        __decorate$33([ Property(null) ], MultiSelect.prototype, "filterBarPlaceholder", void 0), 
        __decorate$33([ Property({}) ], MultiSelect.prototype, "htmlAttributes", void 0), 
        __decorate$33([ Property(null) ], MultiSelect.prototype, "valueTemplate", void 0), 
        __decorate$33([ Property(null) ], MultiSelect.prototype, "headerTemplate", void 0), 
        __decorate$33([ Property(null) ], MultiSelect.prototype, "footerTemplate", void 0), 
        __decorate$33([ Property(null) ], MultiSelect.prototype, "itemTemplate", void 0), 
        __decorate$33([ Property(!1) ], MultiSelect.prototype, "allowFiltering", void 0), 
        __decorate$33([ Property(!1) ], MultiSelect.prototype, "allowCustomValue", void 0), 
        __decorate$33([ Property(!0) ], MultiSelect.prototype, "showClearButton", void 0), 
        __decorate$33([ Property(1e3) ], MultiSelect.prototype, "maximumSelectionLength", void 0), 
        __decorate$33([ Property(!1) ], MultiSelect.prototype, "readonly", void 0), __decorate$33([ Property(null) ], MultiSelect.prototype, "text", void 0), 
        __decorate$33([ Property(null) ], MultiSelect.prototype, "value", void 0), __decorate$33([ Property(!0) ], MultiSelect.prototype, "hideSelectedItem", void 0), 
        __decorate$33([ Property(!0) ], MultiSelect.prototype, "closePopupOnSelect", void 0), 
        __decorate$33([ Property("Default") ], MultiSelect.prototype, "mode", void 0), __decorate$33([ Property(",") ], MultiSelect.prototype, "delimiterChar", void 0), 
        __decorate$33([ Property(!0) ], MultiSelect.prototype, "ignoreCase", void 0), __decorate$33([ Property(!1) ], MultiSelect.prototype, "showDropDownIcon", void 0), 
        __decorate$33([ Property("Never") ], MultiSelect.prototype, "floatLabelType", void 0), 
        __decorate$33([ Property(!1) ], MultiSelect.prototype, "showSelectAll", void 0), 
        __decorate$33([ Property("Select All") ], MultiSelect.prototype, "selectAllText", void 0), 
        __decorate$33([ Property("Unselect All") ], MultiSelect.prototype, "unSelectAllText", void 0), 
        __decorate$33([ Property(!0) ], MultiSelect.prototype, "enableSelectionOrder", void 0), 
        __decorate$33([ Property(!0) ], MultiSelect.prototype, "openOnClick", void 0), __decorate$33([ Event() ], MultiSelect.prototype, "change", void 0), 
        __decorate$33([ Event() ], MultiSelect.prototype, "removing", void 0), __decorate$33([ Event() ], MultiSelect.prototype, "removed", void 0), 
        __decorate$33([ Event() ], MultiSelect.prototype, "selectedAll", void 0), __decorate$33([ Event() ], MultiSelect.prototype, "beforeOpen", void 0), 
        __decorate$33([ Event() ], MultiSelect.prototype, "open", void 0), __decorate$33([ Event() ], MultiSelect.prototype, "close", void 0), 
        __decorate$33([ Event() ], MultiSelect.prototype, "blur", void 0), __decorate$33([ Event() ], MultiSelect.prototype, "focus", void 0), 
        __decorate$33([ Event() ], MultiSelect.prototype, "chipSelection", void 0), __decorate$33([ Event() ], MultiSelect.prototype, "filtering", void 0), 
        __decorate$33([ Event() ], MultiSelect.prototype, "tagging", void 0), __decorate$33([ Event() ], MultiSelect.prototype, "customValueSelection", void 0), 
        MultiSelect = __decorate$33([ NotifyPropertyChanges ], MultiSelect);
    }(DropDownBase), function() {
        function PagerDropDown(pagerModule) {
            this.pagerModule = pagerModule;
        }
        return PagerDropDown.prototype.getModuleName = function() {
            return "pagerdropdown";
        }, PagerDropDown.prototype.render = function() {
            var pagerObj = this.pagerModule;
            this.pagerDropDownDiv = createElement("div", {
                className: "e-pagesizes"
            });
            var dropDownDiv = createElement("div", {
                className: "e-pagerdropdown"
            }), defaultTextDiv = createElement("div", {
                className: "e-pagerconstant"
            }), input = createElement("input", {
                attrs: {
                    type: "text",
                    tabindex: "1"
                }
            });
            this.pagerCons = createElement("span", {
                className: "e-constant",
                innerHTML: this.pagerModule.getLocalizedLabel("pagerDropDown")
            }), dropDownDiv.appendChild(input), defaultTextDiv.appendChild(this.pagerCons), 
            this.pagerDropDownDiv.appendChild(dropDownDiv), this.pagerDropDownDiv.appendChild(defaultTextDiv), 
            this.pagerModule.element.appendChild(this.pagerDropDownDiv);
            var pageSizesModule = this.pagerModule.pageSizes, pageSizesArray = pageSizesModule.length ? this.convertValue(pageSizesModule) : [ this.pagerModule.getLocalizedLabel("All"), "5", "10", "12", "20" ], defaultValue = this.pagerModule.pageSize;
            this.dropDownListObject = new DropDownList({
                dataSource: pageSizesArray,
                value: defaultValue.toString(),
                change: this.onChange.bind(this),
                cssClass: "e-alldrop"
            }), this.dropDownListObject.appendTo(input), pageSizesModule.length && (this.dropDownListObject.element.value = this.pagerModule.pageSize.toString()), 
            pagerObj.pageSize = defaultValue, pagerObj.dataBind(), pagerObj.trigger("dropDownChanged", {
                pageSize: defaultValue
            }), this.addEventListener();
        }, PagerDropDown.prototype.onChange = function(e) {
            this.dropDownListObject.value === this.pagerModule.getLocalizedLabel("All") ? (this.pagerModule.pageSize = this.pagerModule.totalRecordsCount, 
            this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel("pagerAllDropDown"), 
            e.value = this.pagerModule.pageSize, document.getElementsByClassName("e-popup-open e-alldrop").length && (document.getElementsByClassName("e-popup-open e-alldrop")[0].style.display = "none")) : (this.pagerModule.pageSize = parseInt(this.dropDownListObject.value, 10), 
            this.pagerCons.innerHTML !== this.pagerModule.getLocalizedLabel("pagerDropDown") && (this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel("pagerDropDown"))), 
            this.pagerModule.dataBind(), this.pagerModule.trigger("dropDownChanged", {
                pageSize: this.dropDownListObject.value
            });
        }, PagerDropDown.prototype.beforeValueChange = function(prop) {
            if ("number" == typeof prop.newProp.value) {
                var val = prop.newProp.value.toString();
                prop.newProp.value = val;
            }
        }, PagerDropDown.prototype.convertValue = function(pageSizeValue) {
            for (var item = pageSizeValue, i = 0; i < item.length; i++) item[i] = "number" == typeof item[i] ? item[i].toString() : item[i];
            return item;
        }, PagerDropDown.prototype.setDropDownValue = function(prop, value) {
            this.dropDownListObject && (this.dropDownListObject[prop] = value);
        }, PagerDropDown.prototype.addEventListener = function() {
            this.dropDownListObject.on("beforeValueChange", this.beforeValueChange, this);
        }, PagerDropDown.prototype.removeEventListener = function() {
            this.dropDownListObject.off("beforeValueChange", this.beforeValueChange);
        }, PagerDropDown.prototype.destroy = function(args) {
            this.dropDownListObject && !this.dropDownListObject.isDestroyed && (this.removeEventListener(), 
            this.dropDownListObject.destroy(), remove(this.pagerDropDownDiv));
        }, PagerDropDown;
    }()), ExternalMessage = function() {
        function ExternalMessage(pagerModule) {
            this.pagerModule = pagerModule;
        }
        return ExternalMessage.prototype.getModuleName = function() {
            return "externalMessage";
        }, ExternalMessage.prototype.render = function() {
            this.element = createElement("div", {
                className: "e-pagerexternalmsg",
                attrs: {
                    "aria-label": "Pager external message"
                }
            }), this.pagerModule.element.appendChild(this.element), this.refresh();
        }, ExternalMessage.prototype.refresh = function() {
            this.pagerModule.externalMessage && this.pagerModule.externalMessage.toString().length ? (this.showMessage(), 
            this.element.innerHTML = this.pagerModule.externalMessage) : this.hideMessage();
        }, ExternalMessage.prototype.hideMessage = function() {
            this.element.style.display = "none";
        }, ExternalMessage.prototype.showMessage = function() {
            this.element.style.display = "";
        }, ExternalMessage.prototype.destroy = function() {
            remove(this.element);
        }, ExternalMessage;
    }();
    Pager.Inject(ExternalMessage, PagerDropDown);
    var TimePickerBase, Page = function() {
        function Page(parent, pageSettings) {
            this.parent = parent, this.pageSettings = pageSettings, this.addEventListener();
        }
        return Page.prototype.getModuleName = function() {
            return "pager";
        }, Page.prototype.render = function() {
            var pagerObj, gObj = this.parent;
            this.pagerDestroy(), isNullOrUndefined(this.parent.pagerTemplate) || (this.pageSettings.template = this.parent.pagerTemplate), 
            this.element = this.parent.createElement("div", {
                className: "e-gridpager"
            }), pagerObj = extend$1({}, extend({}, getActualProperties(this.pageSettings)), {
                click: this.clickHandler.bind(this),
                dropDownChanged: this.onSelect.bind(this),
                enableRtl: gObj.enableRtl,
                locale: gObj.locale,
                created: this.addAriaAttr.bind(this)
            }, [ "parentObj", "propName" ]), this.pagerObj = new Pager(pagerObj);
        }, Page.prototype.onSelect = function(e) {
            this.pageSettings.pageSize = e.pageSize, this.pageSettings.currentPage = 1;
        }, Page.prototype.addAriaAttr = function() {
            var _this = this;
            if (!this.pageSettings.template) {
                for (var numericContainerNew = this.parent.createElement("div", {
                    className: "e-numericcontainer"
                }), pagerContainer = this.element.querySelector(".e-pagercontainer"), frag = document.createDocumentFragment(), numericContainer = this.element.querySelector(".e-numericcontainer"), links = numericContainer.querySelectorAll("a"), i = 0; i < links.length; i++) {
                    this.parent.getContentTable() ? links[i].setAttribute("aria-owns", this.parent.getContentTable().id) : links[i].setAttribute("aria-owns", this.parent.element.getAttribute("id") + "_content_table");
                    var numericContainerDiv = this.parent.createElement("div");
                    numericContainerDiv.appendChild(links[i]), frag.appendChild(numericContainerDiv);
                }
                numericContainerNew.appendChild(frag), pagerContainer.replaceChild(numericContainerNew, numericContainer);
                [ ".e-mfirst", ".e-mprev", ".e-first", ".e-prev", ".e-next", ".e-last", ".e-mnext", ".e-mlast" ].forEach(function(value) {
                    var element = _this.element.querySelector(value);
                    _this.parent.getContentTable() && element.setAttribute("aria-owns", _this.parent.getContentTable().id);
                });
            }
        }, Page.prototype.dataReady = function(e) {
            this.updateModel(e);
        }, Page.prototype.refresh = function() {
            this.pagerObj.refresh();
        }, Page.prototype.goToPage = function(pageNo) {
            this.pagerObj.goToPage(pageNo);
        }, Page.prototype.updateModel = function(e) {
            this.parent.pageSettings.totalRecordsCount = e.count, this.parent.dataBind();
        }, Page.prototype.onActionComplete = function(e) {
            this.parent.trigger(actionComplete, extend(e, {
                currentPage: this.parent.pageSettings.currentPage,
                requestType: "paging",
                type: actionComplete
            }));
        }, Page.prototype.onPropertyChanged = function(e) {
            if (e.module === this.getModuleName()) {
                for (var newProp = e.properties, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                    var prop = _a[_i];
                    this.pagerObj[prop] = newProp[prop];
                }
                this.pagerObj.dataBind();
            }
        }, Page.prototype.clickHandler = function(e) {
            var gObj = this.parent;
            if (this.isForceCancel || isActionPrevent(gObj) && !gObj.prevPageMoving) return this.isForceCancel ? this.isForceCancel = !1 : (gObj.notify(preventBatch, {
                instance: this,
                handler: this.goToPage,
                arg1: e.currentPage
            }), this.isForceCancel = !0, this.pagerObj.currentPage = gObj.pageSettings.currentPage, 
            this.pagerObj.dataBind()), void (e.cancel = !0);
            gObj.prevPageMoving = !1;
            var prevPage = this.pageSettings.currentPage;
            this.pageSettings.currentPage = e.currentPage, this.parent.notify(modelChanged, {
                requestType: "paging",
                previousPage: prevPage,
                currentPage: e.currentPage,
                type: actionBegin
            });
        }, Page.prototype.keyPressHandler = function(e) {
            e.action in keyActions && (e.preventDefault(), this.element.querySelector(keyActions[e.action]).click());
        }, Page.prototype.updateExternalMessage = function(message) {
            this.pagerObj.enableExternalMessage || (this.pagerObj.enableExternalMessage = !0, 
            this.pagerObj.dataBind()), this.pagerObj.externalMessage = message, this.pagerObj.dataBind();
        }, Page.prototype.appendToElement = function(e) {
            this.parent.element.appendChild(this.element), this.parent.setGridPager(this.element), 
            this.pagerObj.appendTo(this.element);
        }, Page.prototype.enableAfterRender = function(e) {
            e.module === this.getModuleName() && e.enable && (this.render(), this.appendToElement());
        }, Page.prototype.addEventListener = function() {
            this.handlers = {
                load: this.render,
                end: this.appendToElement,
                ready: this.dataReady,
                complete: this.onActionComplete,
                updateLayout: this.enableAfterRender,
                inboundChange: this.onPropertyChanged,
                keyPress: this.keyPressHandler
            }, this.parent.isDestroyed || (this.parent.on(initialLoad, this.handlers.load, this), 
            this.parent.on(initialEnd, this.handlers.end, this), this.parent.on(dataReady, this.handlers.ready, this), 
            this.parent.on("paging-complete", this.handlers.complete, this), this.parent.on(uiUpdate, this.handlers.updateLayout, this), 
            this.parent.on(inBoundModelChanged, this.handlers.inboundChange, this), this.parent.on(keyPressed, this.handlers.keyPress, this));
        }, Page.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(initialLoad, this.handlers.load), this.parent.off(initialEnd, this.handlers.end), 
            this.parent.off(dataReady, this.handlers.ready), this.parent.off("paging-complete", this.handlers.complete), 
            this.parent.off(uiUpdate, this.handlers.updateLayout), this.parent.off(inBoundModelChanged, this.handlers.inboundChange), 
            this.parent.off(keyPressed, this.handlers.keyPress));
        }, Page.prototype.destroy = function() {
            this.removeEventListener(), this.pagerDestroy();
        }, Page.prototype.pagerDestroy = function() {
            this.pagerObj && !this.pagerObj.isDestroyed && (this.pagerObj.destroy(), remove(this.element));
        }, Page;
    }(), keyActions = {
        pageUp: ".e-prev",
        pageDown: ".e-next",
        ctrlAltPageDown: ".e-last",
        ctrlAltPageUp: ".e-first",
        altPageUp: ".e-pp",
        altPageDown: ".e-np"
    }, __extends$46 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), FilterCellRenderer = function(_super) {
        function FilterCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TH", {
                className: "e-filterbarcell"
            }), _this;
        }
        return __extends$46(FilterCellRenderer, _super), FilterCellRenderer.prototype.getGui = function() {
            return this.parent.createElement("div");
        }, FilterCellRenderer.prototype.render = function(cell, data) {
            var input, tr = this.parent.element.querySelector(".e-filterbar"), node = this.element.cloneNode(), innerDIV = this.getGui(), column = cell.column;
            if (tr.appendChild(node), node.setAttribute("e-mappinguid", column.uid), column.filterTemplate) {
                var fltrData = {};
                data && (fltrData[column.field] = data[column.field]);
                if (fltrData.column = column, column.visible) {
                    appendChildren(node, column.getFilterTemplate()(fltrData, this.parent, "filterTemplate"));
                } else node.classList.add("e-hide");
            } else if ("checkbox" !== column.type) {
                if (!isNullOrUndefined(column.allowFiltering) && !column.allowFiltering || isNullOrUndefined(column.filterBarTemplate)) {
                    attributes(innerDIV, {
                        class: "e-filterdiv e-fltrinputdiv"
                    }), input = this.parent.createElement("input", {
                        id: column.field + "_filterBarcell",
                        className: "e-filtertext",
                        attrs: {
                            type: "search",
                            title: column.headerText + cell.attributes.title,
                            value: data[cell.column.field] ? data[cell.column.field] : "",
                            role: "search"
                        }
                    }), innerDIV.appendChild(input);
                    args = {
                        element: input,
                        floatLabelType: "Never",
                        properties: {
                            enableRtl: this.parent.enableRtl,
                            showClearButton: !0
                        }
                    };
                    Input.createInput(args, this.parent.createElement);
                } else if (node.classList.add("e-fltrtemp"), attributes(innerDIV, {
                    class: "e-fltrtempdiv"
                }), isNullOrUndefined(column.filterBarTemplate.create)) input = this.parent.createElement("input", {
                    id: column.field + "_filterBarcell",
                    className: "e-filterUi_input e-filtertext e-fltrTemp",
                    attrs: {
                        type: "search",
                        title: column.headerText
                    }
                }), innerDIV.appendChild(input); else {
                    var args = {
                        column: column,
                        node: Element
                    }, temp = column.filterBarTemplate.create;
                    if ("string" == typeof temp && (temp = getValue(temp, window)), "string" == typeof (input = temp(args))) {
                        var div = this.parent.createElement("div");
                        div.innerHTML = input, input = div.firstChild;
                    }
                    attributes(innerDIV, {
                        class: "e-filterUi_input e-filtertext e-fltrTemp",
                        title: column.headerText,
                        id: column.field + "_filterBarcell"
                    }), innerDIV.appendChild(input);
                }
                if ((!1 === column.allowFiltering || "" === column.field || isNullOrUndefined(column.field)) && (input.setAttribute("disabled", "true"), 
                input.classList.add("e-disable")), column.visible || node.classList.add("e-hide"), 
                this.appendHtml(node, innerDIV), (isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {
                    var templateWrite = column.filterBarTemplate.write;
                    args = {
                        element: input,
                        column: column
                    };
                    "string" == typeof templateWrite && (templateWrite = getValue(templateWrite, window)), 
                    templateWrite.call(this, args);
                }
            }
            return node;
        }, FilterCellRenderer.prototype.appendHtml = function(node, innerHtml) {
            return node.appendChild(innerHtml), node;
        }, FilterCellRenderer;
    }(CellRenderer), FlMenuOptrUI = function() {
        function FlMenuOptrUI(parent, customFltrOperators, serviceLocator, filterSettings) {
            this.parent = parent, this.serviceLocator = serviceLocator, this.filterSettings = filterSettings, 
            this.customFilterOperators = customFltrOperators;
        }
        return FlMenuOptrUI.prototype.renderOperatorUI = function(dlgConetntEle, target, column, dlgObj) {
            this.dialogObj = dlgObj;
            var optr = column.type + "Operator";
            this.optrData = this.customOptr = isNullOrUndefined(this.parent.filterSettings.operators) || isNullOrUndefined(this.parent.filterSettings.operators[optr]) ? this.customFilterOperators[optr] : this.parent.filterSettings.operators[optr];
            var dropDatasource = this.customOptr, selectedValue = this.dropSelectedVal(column, optr), optrDiv = this.parent.createElement("div", {
                className: "e-flm_optrdiv"
            });
            dlgConetntEle.appendChild(optrDiv);
            var optrInput = this.parent.createElement("input", {
                id: column.uid + "-floptr"
            });
            optrDiv.appendChild(optrInput), this.dropOptr = new DropDownList({
                dataSource: dropDatasource,
                fields: {
                    text: "text",
                    value: "value"
                },
                open: this.dropDownOpen.bind(this),
                text: selectedValue
            }), this.dropOptr.appendTo("#" + column.uid + "-floptr");
        }, FlMenuOptrUI.prototype.dropDownOpen = function(args) {
            args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
        }, FlMenuOptrUI.prototype.dropSelectedVal = function(col, optr) {
            for (var selValue = "", _i = 0, columns_1 = this.parent.filterSettings.columns; _i < columns_1.length; _i++) {
                var column = columns_1[_i];
                if (col.field === column.field || col.isForeignColumn() && col.foreignKeyValue === column.field) {
                    var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("value", "equal", column.operator));
                    selValue = isNullOrUndefined(selectedField[0]) ? "" : selectedField[0].text;
                }
            }
            return "" === selValue && (selValue = this.optrData[0].text), selValue;
        }, FlMenuOptrUI.prototype.getFlOperator = function() {
            return this.dropOptr.value;
        }, FlMenuOptrUI;
    }(), StringFilterUI = function() {
        function StringFilterUI(parent, serviceLocator, filterSettings) {
            this.parent = parent, this.serLocator = serviceLocator, this.filterSettings = filterSettings;
        }
        return StringFilterUI.prototype.create = function(args) {
            this.instance = this.parent.createElement("input", {
                className: "e-flmenu-input",
                id: "strui-" + args.column.uid
            }), args.target.appendChild(this.instance), this.dialogObj = args.dialogObj, this.actObj = new AutoComplete(this.getAutoCompleteOptions(args)), 
            this.actObj.appendTo(this.instance);
        }, StringFilterUI.prototype.getAutoCompleteOptions = function(args) {
            var _this = this, isForeignColumn = args.column.isForeignColumn(), dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource, fields = {
                value: isForeignColumn ? args.column.foreignKeyValue : args.column.field
            };
            return {
                dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
                fields: fields,
                locale: this.parent.locale,
                enableRtl: this.parent.enableRtl,
                query: this.parent.query.clone(),
                sortOrder: "Ascending",
                open: this.openPopup.bind(this),
                cssClass: "e-popup-flmenu",
                focus: function() {
                    _this.actObj.filterType = args.getOptrInstance.getFlOperator();
                },
                autofill: !0,
                placeholder: args.localizeText.getConstant("EnterValue"),
                actionComplete: function(e) {
                    e.result = e.result.filter(function(obj, index, arr) {
                        return arr.map(function(mapObj) {
                            return mapObj[_this.actObj.fields.value];
                        }).indexOf(obj[_this.actObj.fields.value]) === index;
                    });
                }
            };
        }, StringFilterUI.prototype.write = function(args) {
            this.filterSettings.columns;
            if ("" !== args.filteredValue && !isNullOrUndefined(args.filteredValue)) {
                document.querySelector("#strui-" + args.column.uid).ej2_instances[0].value = args.filteredValue;
            }
        }, StringFilterUI.prototype.read = function(element, column, filterOptr, filterObj) {
            var actuiObj = document.querySelector("#strui-" + column.uid).ej2_instances[0];
            Browser.isDevice && (actuiObj.hidePopup(), actuiObj.focusOut());
            var filterValue = actuiObj.value;
            (isNullOrUndefined(filterValue) || "" === filterValue) && (filterValue = null), 
            filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", !1);
        }, StringFilterUI.prototype.openPopup = function(args) {
            getZIndexCalcualtion(args, this.dialogObj);
        }, StringFilterUI;
    }(), NumberFilterUI = function() {
        function NumberFilterUI(parent, serviceLocator, filterSettings) {
            this.filterSettings = filterSettings, this.parent = parent, this.serviceLocator = serviceLocator;
        }
        return NumberFilterUI.prototype.create = function(args) {
            this.instance = this.parent.createElement("input", {
                className: "e-flmenu-input",
                id: "numberui-" + args.column.uid
            }), args.target.appendChild(this.instance), this.numericTxtObj = new NumericTextBox({
                format: args.column.format,
                locale: this.parent.locale,
                cssClass: "e-popup-flmenu",
                placeholder: args.localizeText.getConstant("EnterValue"),
                enableRtl: this.parent.enableRtl
            }), this.numericTxtObj.appendTo(this.instance);
        }, NumberFilterUI.prototype.write = function(args) {
            document.querySelector("#numberui-" + args.column.uid).ej2_instances[0].value = args.filteredValue;
        }, NumberFilterUI.prototype.read = function(element, column, filterOptr, filterObj) {
            var filterValue = document.querySelector("#numberui-" + column.uid).ej2_instances[0].value;
            filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", !0);
        }, NumberFilterUI;
    }(), BooleanFilterUI = function() {
        function BooleanFilterUI(parent, serviceLocator, filterSettings) {
            this.parent = parent, this.serviceLocator = serviceLocator, this.filterSettings = filterSettings;
        }
        return BooleanFilterUI.prototype.create = function(args) {
            var isForeignColumn = args.column.isForeignColumn(), dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource, fields = isForeignColumn ? args.column.foreignKeyValue : args.column.field;
            this.elem = this.parent.createElement("input", {
                className: "e-flmenu-input",
                id: "bool-ui-" + args.column.uid
            }), args.target.appendChild(this.elem), this.dialogObj = args.dialogObj, this.dropInstance = new DropDownList({
                dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
                query: new Query().select(fields),
                fields: {
                    text: fields,
                    value: fields
                },
                placeholder: args.localizeText.getConstant("SelectValue"),
                cssClass: "e-popup-flmenu",
                locale: this.parent.locale,
                enableRtl: this.parent.enableRtl,
                open: this.openPopup.bind(this),
                actionComplete: function(e) {
                    e.result = DataUtil.distinct(e.result, fields, !0);
                }
            }), this.dropInstance.appendTo(this.elem);
        }, BooleanFilterUI.prototype.write = function(args) {
            var drpuiObj = document.querySelector("#bool-ui-" + args.column.uid).ej2_instances[0];
            isNullOrUndefined(args.filteredValue) || (drpuiObj.text = args.filteredValue);
        }, BooleanFilterUI.prototype.read = function(element, column, filterOptr, filterObj) {
            var filterValue = document.querySelector("#bool-ui-" + column.uid).ej2_instances[0].value;
            filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", !1);
        }, BooleanFilterUI.prototype.openPopup = function(args) {
            getZIndexCalcualtion(args, this.dialogObj);
        }, BooleanFilterUI;
    }(), __extends$47 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$34 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, OTHERMONTH = "e-other-month", ROOT$6 = "e-calendar", DISABLED$5 = "e-disabled", OVERLAY = "e-overlay", SELECTED = "e-selected", FOCUSEDDATE = "e-focused-date", CalendarBase = function(_super) {
        function CalendarBase(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.effect = "", _this.keyConfigs = {
                controlUp: "ctrl+38",
                controlDown: "ctrl+40",
                moveDown: "downarrow",
                moveUp: "uparrow",
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                select: "enter",
                home: "home",
                end: "end",
                pageUp: "pageup",
                pageDown: "pagedown",
                shiftPageUp: "shift+pageup",
                shiftPageDown: "shift+pagedown",
                controlHome: "ctrl+home",
                controlEnd: "ctrl+end",
                altUpArrow: "alt+uparrow",
                spacebar: "space",
                altRightArrow: "alt+rightarrow",
                altLeftArrow: "alt+leftarrow"
            }, _this;
        }
        return __extends$47(CalendarBase, _super), CalendarBase.prototype.render = function() {
            this.globalize = new Internationalization(this.locale), (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) && this.setProperties({
                firstDayOfWeek: this.globalize.getFirstDayOfWeek()
            }, !0), this.todayDisabled = !1, this.todayDate = new Date(new Date().setHours(0, 0, 0, 0)), 
            "calendar" === this.getModuleName() ? (this.element.classList.add(ROOT$6), this.enableRtl && this.element.classList.add("e-rtl"), 
            Browser.isDevice && this.element.classList.add("e-device"), attributes(this.element, {
                "data-role": "calendar"
            })) : (this.calendarElement = this.createElement("div"), this.calendarElement.classList.add(ROOT$6), 
            this.enableRtl && this.calendarElement.classList.add("e-rtl"), Browser.isDevice && this.calendarElement.classList.add("e-device"), 
            attributes(this.calendarElement, {
                role: "calendar"
            })), this.createHeader(), this.createContent(), this.wireEvents();
        }, CalendarBase.prototype.validateDate = function(value) {
            this.setProperties({
                min: this.checkDateValue(new Date("" + this.min))
            }, !0), this.setProperties({
                max: this.checkDateValue(new Date("" + this.max))
            }, !0), this.currentDate = this.currentDate ? this.currentDate : new Date(new Date().setHours(0, 0, 0, 0)), 
            !isNullOrUndefined(value) && this.min <= this.max && value >= this.min && value <= this.max && (this.currentDate = new Date("" + value));
        }, CalendarBase.prototype.minMaxUpdate = function(value) {
            +this.min <= +this.max ? removeClass([ this.element ], OVERLAY) : (this.setProperties({
                min: this.min
            }, !0), addClass([ this.element ], OVERLAY)), this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min, 
            this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max, 
            +this.min <= +this.max && value && +value <= +this.max && +value >= +this.min ? this.currentDate = new Date("" + value) : +this.min <= +this.max && !value && +this.currentDate > +this.max ? this.currentDate = new Date("" + this.max) : +this.currentDate < +this.min && (this.currentDate = new Date("" + this.min));
        }, CalendarBase.prototype.createHeader = function() {
            this.headerElement = this.createElement("div", {
                className: "e-header"
            });
            var iconContainer = this.createElement("div", {
                className: "e-icon-container"
            });
            this.previousIcon = this.createElement("button", {
                className: "e-prev",
                attrs: {
                    type: "button"
                }
            }), rippleEffect(this.previousIcon, {
                duration: 400,
                selector: ".e-prev",
                isCenterRipple: !0
            }), attributes(this.previousIcon, {
                "aria-disabled": "false",
                "aria-label": "previous month"
            }), this.nextIcon = this.createElement("button", {
                className: "e-next",
                attrs: {
                    type: "button"
                }
            }), rippleEffect(this.nextIcon, {
                selector: ".e-next",
                duration: 400,
                isCenterRipple: !0
            }), attributes(this.nextIcon, {
                "aria-disabled": "false",
                "aria-label": "next month"
            }), this.headerTitleElement = this.createElement("div", {
                className: "e-day e-title"
            }), attributes(this.headerTitleElement, {
                "aria-atomic": "true",
                "aria-live": "assertive",
                "aria-label": "title"
            }), this.headerElement.appendChild(this.headerTitleElement), this.previousIcon.appendChild(this.createElement("span", {
                className: "e-date-icon-prev e-icons"
            })), this.nextIcon.appendChild(this.createElement("span", {
                className: "e-date-icon-next  e-icons"
            })), iconContainer.appendChild(this.previousIcon), iconContainer.appendChild(this.nextIcon), 
            this.headerElement.appendChild(iconContainer), "calendar" === this.getModuleName() ? this.element.appendChild(this.headerElement) : this.calendarElement.appendChild(this.headerElement);
        }, CalendarBase.prototype.createContent = function() {
            this.contentElement = this.createElement("div", {
                className: "e-content"
            }), this.table = this.createElement("table", {
                attrs: {
                    tabIndex: "0",
                    role: "grid",
                    "aria-activedescendant": ""
                }
            }), "calendar" === this.getModuleName() ? this.element.appendChild(this.contentElement) : this.calendarElement.appendChild(this.contentElement), 
            this.contentElement.appendChild(this.table), this.createContentHeader(), this.createContentBody(), 
            this.showTodayButton && this.createContentFooter();
        }, CalendarBase.prototype.getCultureValues = function() {
            var cldrObj, culShortNames = [];
            cldrObj = "en" === this.locale || "en-US" === this.locale ? getValue("days.stand-alone.short", getDefaultDateObject()) : this.getCultureObjects(cldrData, "" + this.locale);
            for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
                var obj = _a[_i];
                culShortNames.push(getValue(obj, cldrObj));
            }
            return culShortNames;
        }, CalendarBase.prototype.createContentHeader = function() {
            "calendar" === this.getModuleName() ? isNullOrUndefined(this.element.querySelectorAll(".e-content .e-week-header")[0]) || detach(this.element.querySelectorAll(".e-content .e-week-header")[0]) : isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]) || detach(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]);
            var shortNames, html = "";
            (this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) && this.setProperties({
                firstDayOfWeek: 0
            }, !0), this.tableHeadElement = this.createElement("thead", {
                className: "e-week-header"
            }), this.weekNumber && (html += '<th class="e-week-number"></th>', "calendar" === this.getModuleName() ? addClass([ this.element ], "e-week-number") : addClass([ this.calendarElement ], "e-week-number")), 
            shortNames = this.shiftArray(this.getCultureValues().length > 0 && this.getCultureValues(), this.firstDayOfWeek);
            for (var days = 0; days <= 6; days++) html += '<th  class="">' + shortNames[days] + "</th>";
            html = "<tr>" + html + "</tr>", this.tableHeadElement.innerHTML = html, this.table.appendChild(this.tableHeadElement);
        }, CalendarBase.prototype.createContentBody = function() {
            switch ("calendar" === this.getModuleName() ? isNullOrUndefined(this.element.querySelectorAll(".e-content tbody")[0]) || detach(this.element.querySelectorAll(".e-content tbody")[0]) : isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content tbody")[0]) || detach(this.calendarElement.querySelectorAll(".e-content tbody")[0]), 
            this.start) {
              case "Year":
                this.renderYears();
                break;

              case "Decade":
                this.renderDecades();
                break;

              default:
                this.renderMonths();
            }
        }, CalendarBase.prototype.updateFooter = function() {
            this.todayElement.textContent = this.l10.getConstant("today");
        }, CalendarBase.prototype.createContentFooter = function() {
            if (this.showTodayButton) {
                var minimum = new Date(+this.min), maximum = new Date(+this.max);
                this.globalize = new Internationalization(this.locale), this.l10 = new L10n(this.getModuleName(), {
                    today: "Today"
                }, this.locale), this.todayElement = this.createElement("button"), rippleEffect(this.todayElement), 
                this.updateFooter(), addClass([ this.todayElement ], [ "e-btn", "e-today", "e-flat", "e-primary", "e-css" ]), 
                +new Date(minimum.setHours(0, 0, 0, 0)) <= +this.todayDate && +this.todayDate <= +new Date(maximum.setHours(0, 0, 0, 0)) && !this.todayDisabled || addClass([ this.todayElement ], DISABLED$5), 
                this.footer = this.createElement("div", {
                    className: "e-footer-container"
                }), this.footer.appendChild(this.todayElement), "calendar" === this.getModuleName() && this.element.appendChild(this.footer), 
                "datepicker" === this.getModuleName() && this.calendarElement.appendChild(this.footer), 
                "datetimepicker" === this.getModuleName() && this.calendarElement.appendChild(this.footer), 
                this.todayElement.classList.contains(DISABLED$5) || EventHandler.add(this.todayElement, "click", this.todayButtonClick, this);
            }
        }, CalendarBase.prototype.wireEvents = function() {
            EventHandler.add(this.headerTitleElement, "click", this.navigateTitle, this), "calendar" === this.getModuleName() ? this.keyboardModule = new KeyboardEvents(this.element, {
                eventName: "keydown",
                keyAction: this.keyActionHandle.bind(this),
                keyConfigs: this.keyConfigs
            }) : this.keyboardModule = new KeyboardEvents(this.calendarElement, {
                eventName: "keydown",
                keyAction: this.keyActionHandle.bind(this),
                keyConfigs: this.keyConfigs
            });
        }, CalendarBase.prototype.todayButtonClick = function(value) {
            this.showTodayButton && (this.currentView() === this.depth ? this.effect = "" : this.effect = "e-zoomin", 
            this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? this.navigateTo(this.depth, new Date("" + value)) : this.navigateTo("Month", new Date("" + value)));
        }, CalendarBase.prototype.keyActionHandle = function(e, value, multiSelection) {
            var selectedDate, view = this.getViewNumber(this.currentView()), focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
            selectedDate = multiSelection ? isNullOrUndefined(focusedDate) || +value !== parseInt(focusedDate.getAttribute("id").split("_")[0], 10) ? this.tableBodyElement.querySelector("tr td.e-selected") : focusedDate : this.tableBodyElement.querySelector("tr td.e-selected");
            var depthValue = this.getViewNumber(this.depth), levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
            switch (this.effect = "", e.action) {
              case "moveLeft":
                this.KeyboardNavigate(-1, view, e, this.max, this.min), e.preventDefault();
                break;

              case "moveRight":
                this.KeyboardNavigate(1, view, e, this.max, this.min), e.preventDefault();
                break;

              case "moveUp":
                0 === view ? this.KeyboardNavigate(-7, view, e, this.max, this.min) : this.KeyboardNavigate(-4, view, e, this.max, this.min), 
                e.preventDefault();
                break;

              case "moveDown":
                0 === view ? this.KeyboardNavigate(7, view, e, this.max, this.min) : this.KeyboardNavigate(4, view, e, this.max, this.min), 
                e.preventDefault();
                break;

              case "select":
                if (e.target === this.todayElement) this.todayButtonClick(value); else {
                    var element = isNullOrUndefined(focusedDate) ? selectedDate : focusedDate;
                    if (!isNullOrUndefined(element) && !element.classList.contains(DISABLED$5)) if (levelRestrict) {
                        var d = new Date(parseInt("" + element.id, 0));
                        this.selectDate(e, d, element);
                    } else this.contentClick(null, --view, element, value);
                }
                break;

              case "controlUp":
                this.title(), e.preventDefault();
                break;

              case "controlDown":
                isNullOrUndefined(focusedDate) && (isNullOrUndefined(selectedDate) || levelRestrict) || this.contentClick(null, --view, focusedDate || selectedDate, value), 
                e.preventDefault();
                break;

              case "home":
                this.currentDate = this.firstDay(this.currentDate), detach(this.tableBodyElement), 
                0 === view ? this.renderMonths(e) : 1 === view ? this.renderYears(e) : this.renderDecades(e), 
                e.preventDefault();
                break;

              case "end":
                this.currentDate = this.lastDay(this.currentDate, view), detach(this.tableBodyElement), 
                0 === view ? this.renderMonths(e) : 1 === view ? this.renderYears(e) : this.renderDecades(e), 
                e.preventDefault();
                break;

              case "pageUp":
                this.addMonths(this.currentDate, -1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "pageDown":
                this.addMonths(this.currentDate, 1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "shiftPageUp":
                this.addYears(this.currentDate, -1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "shiftPageDown":
                this.addYears(this.currentDate, 1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "controlHome":
                this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 0, 1)), e.preventDefault();
                break;

              case "controlEnd":
                this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 11, 31)), e.preventDefault();
            }
            "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.KeyboardNavigate = function(number, currentView, e, max, min) {
            var date = new Date("" + this.currentDate);
            switch (currentView) {
              case 2:
                this.addYears(this.currentDate, number), this.isMonthYearRange(this.currentDate) ? (detach(this.tableBodyElement), 
                this.renderDecades(e)) : this.currentDate = date;
                break;

              case 1:
                this.addMonths(this.currentDate, number), this.isMonthYearRange(this.currentDate) ? (detach(this.tableBodyElement), 
                this.renderYears(e)) : this.currentDate = date;
                break;

              case 0:
                this.addDay(this.currentDate, number, e, max, min), this.isMinMaxRange(this.currentDate) ? (detach(this.tableBodyElement), 
                this.renderMonths(e)) : this.currentDate = date;
            }
        }, CalendarBase.prototype.preRender = function(value) {
            var _this = this;
            this.navigatePreviousHandler = this.navigatePrevious.bind(this), this.navigateNextHandler = this.navigateNext.bind(this), 
            this.navigateHandler = function(e) {
                _this.triggerNavigate(e);
            };
        }, CalendarBase.prototype.minMaxDate = function(localDate) {
            var currentDate = new Date(new Date(+localDate).setHours(0, 0, 0, 0)), minDate = new Date(new Date(+this.min).setHours(0, 0, 0, 0)), maxDate = new Date(new Date(+this.max).setHours(0, 0, 0, 0));
            return +currentDate != +minDate && +currentDate != +maxDate || (+localDate < +this.min && (localDate = new Date(+this.min)), 
            +localDate > +this.max && (localDate = new Date(+this.max))), localDate;
        }, CalendarBase.prototype.renderMonths = function(e, value) {
            var numCells = this.weekNumber ? 8 : 7, tdEles = this.renderDays(this.currentDate, e, value);
            this.createContentHeader(), this.renderTemplate(tdEles, numCells, "e-month", e, value);
        }, CalendarBase.prototype.renderDays = function(currentDate, e, value, multiSelection, values) {
            var minMaxDate, tdEles = [], localDate = new Date("" + currentDate), currentMonth = (this.weekNumber, 
            localDate.getMonth());
            this.titleUpdate(currentDate, "days");
            var d = localDate;
            for (localDate = new Date(d.getFullYear(), d.getMonth(), 0, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()); localDate.getDay() !== this.firstDayOfWeek; ) this.setStartDate(localDate, -864e5);
            for (var day = 0; day < 42; ++day) {
                var weekEle = this.createElement("td", {
                    className: "e-cell"
                }), weekAnchor = this.createElement("span");
                day % 7 == 0 && this.weekNumber && (weekAnchor.textContent = "" + this.getWeek(localDate), 
                weekEle.appendChild(weekAnchor), addClass([ weekEle ], "e-week-number"), tdEles.push(weekEle)), 
                minMaxDate = new Date(+localDate), localDate = this.minMaxDate(localDate);
                var dateFormatOptions = {
                    type: "dateTime",
                    skeleton: "full"
                }, date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions), tdEle = this.dayCell(localDate), title = this.globalize.formatDate(localDate, {
                    type: "date",
                    skeleton: "full"
                }), dayLink = this.createElement("span");
                dayLink.textContent = this.globalize.formatDate(localDate, {
                    type: "date",
                    skeleton: "d"
                });
                var disabled = this.min > localDate || this.max < localDate;
                disabled ? (addClass([ tdEle ], DISABLED$5), addClass([ tdEle ], OVERLAY)) : dayLink.setAttribute("title", "" + title), 
                currentMonth !== localDate.getMonth() && addClass([ tdEle ], OTHERMONTH), 0 !== localDate.getDay() && 6 !== localDate.getDay() || addClass([ tdEle ], "e-weekend"), 
                tdEle.appendChild(dayLink), this.renderDayCellArgs = {
                    date: localDate,
                    isDisabled: !1,
                    element: tdEle,
                    isOutOfRange: disabled
                };
                var argument = this.renderDayCellArgs;
                if (this.renderDayCellEvent(argument), argument.isDisabled) if (multiSelection) {
                    if (!isNullOrUndefined(values) && values.length > 0) for (var index = 0; index < values.length; index++) {
                        +new Date(this.globalize.formatDate(argument.date, {
                            type: "date",
                            skeleton: "yMd"
                        })) === +new Date(this.globalize.formatDate(values[index], {
                            type: "date",
                            skeleton: "yMd"
                        })) && (values.splice(index, 1), index = -1);
                    }
                } else value && +value == +argument.date && this.setProperties({
                    value: null
                }, !0);
                this.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED) && (addClass([ tdEle ], DISABLED$5), 
                addClass([ tdEle ], OVERLAY), +this.renderDayCellArgs.date == +this.todayDate && (this.todayDisabled = !0));
                var otherMnthBool = tdEle.classList.contains(OTHERMONTH), disabledCls = tdEle.classList.contains(DISABLED$5);
                if (disabledCls || EventHandler.add(tdEle, "click", this.clickHandler, this), !multiSelection || isNullOrUndefined(values) || otherMnthBool || disabledCls) otherMnthBool || disabledCls || !this.getDateVal(localDate, value) ? this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate) : addClass([ tdEle ], SELECTED); else {
                    for (var tempValue = 0; tempValue < values.length; tempValue++) {
                        this.globalize.formatDate(localDate, {
                            type: "date",
                            skeleton: "short"
                        }) === this.globalize.formatDate(values[tempValue], {
                            type: "date",
                            skeleton: "short"
                        }) && this.getDateVal(localDate, values[tempValue]) ? addClass([ tdEle ], SELECTED) : this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
                    }
                    values.length <= 0 && this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
                }
                date.getMonth() === new Date().getMonth() && date.getDate() === new Date().getDate() && date.getFullYear() === new Date().getFullYear() && addClass([ tdEle ], "e-today"), 
                tdEles.push(this.renderDayCellArgs.element), localDate = new Date(+minMaxDate), 
                this.addDay(localDate, 1, null, this.max, this.min);
            }
            return tdEles;
        }, CalendarBase.prototype.updateFocus = function(otherMonth, disabled, localDate, tableElement, currentDate) {
            currentDate.getDate() !== localDate.getDate() || otherMonth || disabled ? (currentDate >= this.max && parseInt(tableElement.id, 0) === +this.max && !otherMonth && !disabled && addClass([ tableElement ], FOCUSEDDATE), 
            currentDate <= this.min && parseInt(tableElement.id, 0) === +this.min && !otherMonth && !disabled && addClass([ tableElement ], FOCUSEDDATE)) : addClass([ tableElement ], FOCUSEDDATE);
        }, CalendarBase.prototype.renderYears = function(e, value) {
            this.removeTableHeadElement();
            var tdEles = [], valueUtil = isNullOrUndefined(value), curDate = new Date("" + this.currentDate), mon = curDate.getMonth(), yr = curDate.getFullYear(), localDate = curDate, curYrs = localDate.getFullYear(), minYr = new Date("" + this.min).getFullYear(), minMonth = new Date("" + this.min).getMonth(), maxYr = new Date("" + this.max).getFullYear(), maxMonth = new Date("" + this.max).getMonth();
            localDate.setMonth(0), this.titleUpdate(this.currentDate, "months");
            this.min > localDate || this.max;
            localDate.setDate(1);
            for (var month = 0; month < 12; ++month) {
                var tdEle = this.dayCell(localDate), dayLink = this.createElement("span"), localMonth = value && value.getMonth() === localDate.getMonth(), select = value && value.getFullYear() === yr && localMonth;
                dayLink.textContent = this.globalize.formatDate(localDate, {
                    type: "dateTime",
                    skeleton: "MMM"
                }), this.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr) ? addClass([ tdEle ], DISABLED$5) : !valueUtil && select ? addClass([ tdEle ], SELECTED) : localDate.getMonth() === mon && this.currentDate.getMonth() === mon && addClass([ tdEle ], FOCUSEDDATE), 
                localDate.setDate(1), localDate.setMonth(localDate.getMonth() + 1), tdEle.classList.contains(DISABLED$5) || EventHandler.add(tdEle, "click", this.clickHandler, this), 
                tdEle.appendChild(dayLink), tdEles.push(tdEle);
            }
            this.renderTemplate(tdEles, 4, "e-year", e, value);
        }, CalendarBase.prototype.renderDecades = function(e, value) {
            this.removeTableHeadElement();
            var tdEles = [], localDate = new Date("" + this.currentDate);
            localDate.setMonth(0), localDate.setDate(1);
            var localYr = localDate.getFullYear(), startYr = new Date("" + (localYr - localYr % 10)), endYr = new Date("" + (localYr - localYr % 10 + 9)), startHdrYr = this.globalize.formatDate(startYr, {
                type: "dateTime",
                skeleton: "y"
            }), endHdrYr = this.globalize.formatDate(endYr, {
                type: "dateTime",
                skeleton: "y"
            });
            this.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
            for (var startYear = new Date(localYr - localYr % 10 - 1, 0, 1).getFullYear(), rowIterator = 0; rowIterator < 12; ++rowIterator) {
                var year = startYear + rowIterator;
                localDate.setFullYear(year);
                var tdEle = this.dayCell(localDate);
                attributes(tdEle, {
                    role: "gridcell"
                });
                var dayLink = this.createElement("span");
                dayLink.textContent = this.globalize.formatDate(localDate, {
                    type: "dateTime",
                    skeleton: "y"
                }), year < new Date("" + this.min).getFullYear() || year > new Date("" + this.max).getFullYear() ? addClass([ tdEle ], DISABLED$5) : isNullOrUndefined(value) || localDate.getFullYear() !== value.getFullYear() ? localDate.getFullYear() !== this.currentDate.getFullYear() || tdEle.classList.contains(DISABLED$5) || addClass([ tdEle ], FOCUSEDDATE) : addClass([ tdEle ], SELECTED), 
                tdEle.classList.contains(DISABLED$5) || EventHandler.add(tdEle, "click", this.clickHandler, this), 
                tdEle.appendChild(dayLink), tdEles.push(tdEle);
            }
            this.renderTemplate(tdEles, 4, "e-decade", e, value);
        }, CalendarBase.prototype.dayCell = function(localDate) {
            var dateFormatOptions = {
                skeleton: "full",
                type: "dateTime"
            }, attrs = {
                className: "e-cell",
                attrs: {
                    id: "" + getUniqueID("" + this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions).valueOf()),
                    "aria-selected": "false",
                    role: "gridcell"
                }
            };
            return this.createElement("td", attrs);
        }, CalendarBase.prototype.firstDay = function(date) {
            var collection = this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH);
            if (collection.length) for (var i = 0; i < collection.length; i++) if (!collection[i].classList.contains(DISABLED$5)) {
                date = new Date(parseInt(collection[i].id, 0));
                break;
            }
            return date;
        }, CalendarBase.prototype.lastDay = function(date, view) {
            var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
            if (2 !== view) {
                var timeOffset = Math.abs(lastDate.getTimezoneOffset() - this.firstDay(date).getTimezoneOffset());
                return timeOffset && lastDate.setHours(this.firstDay(date).getHours() + timeOffset / 60), 
                this.findLastDay(lastDate);
            }
            return this.findLastDay(this.firstDay(lastDate));
        }, CalendarBase.prototype.checkDateValue = function(value) {
            return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
        }, CalendarBase.prototype.findLastDay = function(date) {
            var collection = this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH);
            if (collection.length) for (var i = collection.length - 1; i >= 0; i--) if (!collection[i].classList.contains(DISABLED$5)) {
                date = new Date(parseInt(collection[i].id, 0));
                break;
            }
            return date;
        }, CalendarBase.prototype.removeTableHeadElement = function() {
            "calendar" === this.getModuleName() ? isNullOrUndefined(this.element.querySelectorAll(".e-content table thead")[0]) || detach(this.tableHeadElement) : isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content table thead")[0]) || detach(this.tableHeadElement);
        }, CalendarBase.prototype.renderTemplate = function(elements, count, classNm, e, value) {
            var trEle, view = this.getViewNumber(this.currentView());
            this.tableBodyElement = this.createElement("tbody"), this.table.appendChild(this.tableBodyElement), 
            removeClass([ this.contentElement, this.headerElement ], [ "e-month", "e-decade", "e-year" ]), 
            addClass([ this.contentElement, this.headerElement ], [ classNm ]);
            for (var row = count, rowIterator = 0, dayCell = 0; dayCell < elements.length / count; ++dayCell) {
                for (trEle = this.createElement("tr", {
                    attrs: {
                        role: "row"
                    }
                }), rowIterator = 0 + rowIterator; rowIterator < row; rowIterator++) elements[rowIterator].classList.contains("e-week-number") || isNullOrUndefined(elements[rowIterator].children[0]) || (addClass([ elements[rowIterator].children[0] ], [ "e-day" ]), 
                rippleEffect(elements[rowIterator].children[0], {
                    duration: 600,
                    isCenterRipple: !0
                })), trEle.appendChild(elements[rowIterator]), this.weekNumber && 7 === rowIterator && elements[7].classList.contains(OTHERMONTH) && addClass([ trEle ], "e-month-hide"), 
                !this.weekNumber && 6 === rowIterator && elements[6].classList.contains(OTHERMONTH) && addClass([ trEle ], "e-month-hide"), 
                this.weekNumber ? 41 === rowIterator && elements[41].classList.contains(OTHERMONTH) && addClass([ trEle ], "e-month-hide") : 35 === rowIterator && elements[35].classList.contains(OTHERMONTH) && addClass([ trEle ], "e-month-hide");
                row += count, rowIterator += 0, this.tableBodyElement.appendChild(trEle);
            }
            this.table.querySelector("tbody").className = this.effect, this.iconHandler(), (view !== this.getViewNumber(this.currentView()) || 0 === view && view !== this.getViewNumber(this.currentView())) && this.navigateHandler(e), 
            this.setAriaActiveDescendant();
        }, CalendarBase.prototype.clickHandler = function(e, value) {
            this.clickEventEmitter(e);
            var eve = e.currentTarget, view = this.getViewNumber(this.currentView());
            eve.classList.contains(OTHERMONTH) ? this.contentClick(e, 0, null, value) : view === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? this.contentClick(e, 1, null, value) : 2 === view ? this.contentClick(e, 1, null, value) : eve.classList.contains(OTHERMONTH) || 0 !== view ? this.contentClick(e, 0, eve, value) : this.selectDate(e, this.getIdValue(e, null), null), 
            "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.clickEventEmitter = function(e) {
            e.preventDefault();
        }, CalendarBase.prototype.contentClick = function(e, view, element, value) {
            var currentView = this.getViewNumber(this.currentView()), d = this.getIdValue(e, element);
            switch (view) {
              case 0:
                currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? (detach(this.tableBodyElement), 
                this.currentDate = d, this.effect = "e-zoomin", this.renderMonths(e)) : (this.currentDate.setMonth(d.getMonth()), 
                d.getMonth() > 0 && this.currentDate.getMonth() !== d.getMonth() && this.currentDate.setDate(0), 
                this.currentDate.setFullYear(d.getFullYear()), this.effect = "e-zoomin", detach(this.tableBodyElement), 
                this.renderMonths(e));
                break;

              case 1:
                currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? this.selectDate(e, d, null) : (this.currentDate.setFullYear(d.getFullYear()), 
                this.effect = "e-zoomin", detach(this.tableBodyElement), this.renderYears(e));
            }
        }, CalendarBase.prototype.switchView = function(view, e, multiSelection) {
            switch (view) {
              case 0:
                detach(this.tableBodyElement), this.renderMonths(e), multiSelection && !isNullOrUndefined(this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0]) && this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0].classList.remove(FOCUSEDDATE);
                break;

              case 1:
                detach(this.tableBodyElement), this.renderYears(e);
                break;

              case 2:
                detach(this.tableBodyElement), this.renderDecades(e);
            }
        }, CalendarBase.prototype.getModuleName = function() {
            return "calendar";
        }, CalendarBase.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, CalendarBase.prototype.onPropertyChanged = function(newProp, oldProp, multiSelection, values) {
            this.effect = "";
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "enableRtl":
                    newProp.enableRtl ? "calendar" === this.getModuleName() ? this.element.classList.add("e-rtl") : this.calendarElement.classList.add("e-rtl") : "calendar" === this.getModuleName() ? this.element.classList.remove("e-rtl") : this.calendarElement.classList.remove("e-rtl");
                    break;

                  case "min":
                  case "max":
                    "min" === prop ? this.setProperties({
                        min: this.checkDateValue(new Date("" + newProp.min))
                    }, !0) : this.setProperties({
                        max: this.checkDateValue(new Date("" + newProp.max))
                    }, !0), this.setProperties({
                        start: this.currentView()
                    }, !0), detach(this.tableBodyElement), this.minMaxUpdate(), multiSelection && this.validateValues(multiSelection, values), 
                    this.createContentBody(), (this.todayDate < this.min || this.max < this.todayDate) && this.footer && this.todayElement ? (detach(this.todayElement), 
                    detach(this.footer), this.todayElement = this.footer = null, this.createContentFooter()) : this.todayElement.classList.contains("e-disabled") && this.footer && this.todayElement && (removeClass([ this.todayElement ], DISABLED$5), 
                    detach(this.todayElement), detach(this.footer), this.todayElement = this.footer = null, 
                    this.createContentFooter());
                    break;

                  case "start":
                  case "weekNumber":
                  case "firstDayOfWeek":
                    this.createContentHeader(), this.createContentBody();
                    break;

                  case "locale":
                    this.globalize = new Internationalization(this.locale), this.createContentHeader(), 
                    this.createContentBody(), this.l10.setLocale(this.locale), this.updateFooter();
                    break;

                  case "showTodayButton":
                    newProp.showTodayButton ? this.createContentFooter() : (detach(this.todayElement), 
                    detach(this.footer), this.todayElement = this.footer = void 0), this.setProperties({
                        showTodayButton: newProp.showTodayButton
                    }, !0);
                }
            }
        }, CalendarBase.prototype.validateValues = function(multiSelection, values) {
            if (multiSelection && !isNullOrUndefined(values) && values.length > 0) {
                for (var copyValues = this.copyValues(values), skipIndex = 0; skipIndex < copyValues.length; skipIndex++) {
                    var tempValue = copyValues[skipIndex], tempValueString = this.globalize.formatDate(tempValue, {
                        type: "date",
                        skeleton: "yMd"
                    }), minString = this.globalize.formatDate(this.min, {
                        type: "date",
                        skeleton: "yMd"
                    }), maxString = this.globalize.formatDate(this.max, {
                        type: "date",
                        skeleton: "yMd"
                    });
                    (+new Date(tempValueString) < +new Date(minString) || +new Date(tempValueString) > +new Date(maxString)) && (copyValues.splice(skipIndex, 1), 
                    skipIndex = -1);
                }
                this.setProperties({
                    values: copyValues
                }, !0);
            }
        }, CalendarBase.prototype.setValueUpdate = function() {
            detach(this.tableBodyElement), this.setProperties({
                start: this.currentView()
            }, !0), this.createContentBody();
        }, CalendarBase.prototype.copyValues = function(values) {
            var copyValues = [];
            if (!isNullOrUndefined(values) && values.length > 0) for (var index = 0; index < values.length; index++) copyValues.push(new Date(+values[index]));
            return copyValues;
        }, CalendarBase.prototype.titleUpdate = function(date, view) {
            var globalize = new Internationalization(this.locale);
            switch (view) {
              case "days":
                this.headerTitleElement.textContent = globalize.formatDate(date, {
                    type: "dateTime",
                    skeleton: "yMMMM"
                });
                break;

              case "months":
                this.headerTitleElement.textContent = globalize.formatDate(date, {
                    type: "dateTime",
                    skeleton: "y"
                });
            }
        }, CalendarBase.prototype.setActiveDescendant = function() {
            var id, focusedEle = this.tableBodyElement.querySelector("tr td.e-focused-date"), selectedEle = this.tableBodyElement.querySelector("tr td.e-selected"), title = this.globalize.formatDate(this.currentDate, {
                type: "date",
                skeleton: "full"
            });
            return (selectedEle || focusedEle) && ((focusedEle || selectedEle).setAttribute("aria-selected", "true"), 
            (focusedEle || selectedEle).setAttribute("aria-label", "The current focused date is " + title), 
            id = (focusedEle || selectedEle).getAttribute("id")), id;
        }, CalendarBase.prototype.iconHandler = function() {
            switch (new Date("" + this.currentDate).setDate(1), this.currentView()) {
              case "Month":
                this.previousIconHandler(this.compareMonth(new Date("" + this.currentDate), this.min) < 1), 
                this.nextIconHandler(this.compareMonth(new Date("" + this.currentDate), this.max) > -1);
                break;

              case "Year":
                this.previousIconHandler(this.compareYear(new Date("" + this.currentDate), this.min) < 1), 
                this.nextIconHandler(this.compareYear(new Date("" + this.currentDate), this.max) > -1);
                break;

              case "Decade":
                this.previousIconHandler(this.compareDecade(new Date("" + this.currentDate), this.min) < 1), 
                this.nextIconHandler(this.compareDecade(new Date("" + this.currentDate), this.max) > -1);
            }
        }, CalendarBase.prototype.destroy = function() {
            "calendar" === this.getModuleName() ? removeClass([ this.element ], [ ROOT$6 ]) : this.calendarElement && removeClass([ this.element ], [ ROOT$6 ]), 
            "calendar" === this.getModuleName() && (EventHandler.remove(this.headerTitleElement, "click", this.navigateTitle), 
            this.todayElement && EventHandler.remove(this.todayElement, "click", this.todayButtonClick), 
            this.previousIconHandler(!0), this.nextIconHandler(!0), this.keyboardModule.destroy(), 
            this.element.removeAttribute("data-role")), this.element.innerHTML = "", _super.prototype.destroy.call(this);
        }, CalendarBase.prototype.title = function(e) {
            var currentView = this.getViewNumber(this.currentView());
            this.effect = "e-zoomin", this.switchView(++currentView, e);
        }, CalendarBase.prototype.getViewNumber = function(stringVal) {
            return "Month" === stringVal ? 0 : "Year" === stringVal ? 1 : 2;
        }, CalendarBase.prototype.navigateTitle = function(e) {
            e.preventDefault(), this.title(e), "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.previous = function() {
            this.effect = "";
            var currentView = this.getViewNumber(this.currentView());
            switch (this.currentView()) {
              case "Month":
                this.addMonths(this.currentDate, -1), this.switchView(currentView);
                break;

              case "Year":
                this.addYears(this.currentDate, -1), this.switchView(currentView);
                break;

              case "Decade":
                this.addYears(this.currentDate, -10), this.switchView(currentView);
            }
        }, CalendarBase.prototype.navigatePrevious = function(e) {
            e.preventDefault(), this.previous(), this.triggerNavigate(e), "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.next = function() {
            this.effect = "";
            var currentView = this.getViewNumber(this.currentView());
            switch (this.currentView()) {
              case "Month":
                this.addMonths(this.currentDate, 1), this.switchView(currentView);
                break;

              case "Year":
                this.addYears(this.currentDate, 1), this.switchView(currentView);
                break;

              case "Decade":
                this.addYears(this.currentDate, 10), this.switchView(currentView);
            }
        }, CalendarBase.prototype.navigateNext = function(eve) {
            eve.preventDefault(), this.next(), this.triggerNavigate(eve), "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.navigateTo = function(view, date) {
            +date >= +this.min && +date <= +this.max && (this.currentDate = date), +date <= +this.min && (this.currentDate = new Date("" + this.min)), 
            +date >= +this.max && (this.currentDate = new Date("" + this.max)), "daterangepicker" === this.getModuleName() && (this.currentDate = date), 
            this.getViewNumber(this.depth) >= this.getViewNumber(view) && (this.getViewNumber(this.depth) <= this.getViewNumber(this.start) || this.getViewNumber(this.depth) === this.getViewNumber(view)) && (view = this.depth), 
            this.switchView(this.getViewNumber(view));
        }, CalendarBase.prototype.currentView = function() {
            return this.contentElement.classList.contains("e-year") ? "Year" : this.contentElement.classList.contains("e-decade") ? "Decade" : "Month";
        }, CalendarBase.prototype.getDateVal = function(date, value) {
            return !isNullOrUndefined(value) && date.getDate() === value.getDate() && date.getMonth() === value.getMonth() && date.getFullYear() === value.getFullYear();
        }, CalendarBase.prototype.getCultureObjects = function(ld, c) {
            return getValue("main." + this.locale + ".dates.calendars.gregorian.days.format.short", ld);
        }, CalendarBase.prototype.getWeek = function(d) {
            var currentDate = new Date("" + d).valueOf(), date = new Date(d.getFullYear(), 0, 1).valueOf(), a = currentDate - date;
            return Math.ceil((a / 864e5 + new Date(date).getDay() + 1) / 7);
        }, CalendarBase.prototype.setStartDate = function(date, time) {
            var tzOffset = date.getTimezoneOffset(), d = new Date(date.getTime() + time), tzOffsetDiff = d.getTimezoneOffset() - tzOffset;
            date.setTime(d.getTime() + 6e4 * tzOffsetDiff);
        }, CalendarBase.prototype.addMonths = function(date, i) {
            var day = date.getDate();
            date.setDate(1), date.setMonth(date.getMonth() + i), date.setDate(Math.min(day, this.getMaxDays(date)));
        }, CalendarBase.prototype.addYears = function(date, i) {
            var day = date.getDate();
            date.setDate(1), date.setFullYear(date.getFullYear() + i), date.setDate(Math.min(day, this.getMaxDays(date)));
        }, CalendarBase.prototype.getIdValue = function(e, element) {
            var eve;
            eve = e ? e.currentTarget : element;
            var dateFormatOptions = {
                type: "dateTime",
                skeleton: "full"
            }, dateString = this.globalize.formatDate(new Date(parseInt("" + eve.getAttribute("id"), 0)), dateFormatOptions), date = this.globalize.parseDate(dateString, dateFormatOptions), value = date.valueOf() - date.valueOf() % 1e3;
            return new Date(value);
        }, CalendarBase.prototype.selectDate = function(e, date, node, multiSelection, values) {
            var element = node || e.currentTarget;
            if ("Decade" === this.currentView()) this.setDateDecade(this.currentDate, date.getFullYear()); else if ("Year" === this.currentView()) this.setDateYear(this.currentDate, date); else {
                if (multiSelection && !this.checkPresentDate(date, values)) {
                    var copyValues = this.copyValues(values);
                    !isNullOrUndefined(values) && copyValues.length > 0 ? (copyValues.push(new Date("" + date)), 
                    this.setProperties({
                        values: copyValues
                    }, !0), this.setProperties({
                        value: values[values.length - 1]
                    }, !0)) : this.setProperties({
                        values: [ new Date("" + date) ]
                    }, !0);
                } else this.setProperties({
                    value: new Date("" + date)
                }, !0);
                this.currentDate = new Date("" + date);
            }
            var tableBodyElement = closest(element, "." + ROOT$6);
            if (isNullOrUndefined(tableBodyElement) && (tableBodyElement = this.tableBodyElement), 
            multiSelection || isNullOrUndefined(tableBodyElement.querySelector("." + SELECTED)) || removeClass([ tableBodyElement.querySelector("." + SELECTED) ], SELECTED), 
            multiSelection || isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDDATE)) || removeClass([ tableBodyElement.querySelector("." + FOCUSEDDATE) ], FOCUSEDDATE), 
            multiSelection) {
                copyValues = this.copyValues(values);
                for (var collection = Array.prototype.slice.call(this.tableBodyElement.querySelectorAll("td")), index = 0; index < collection.length; index++) {
                    var tempElement = tableBodyElement.querySelectorAll("td." + FOCUSEDDATE)[0], selectedElement = tableBodyElement.querySelectorAll("td." + SELECTED)[0];
                    collection[index] === tempElement && removeClass([ collection[index] ], FOCUSEDDATE), 
                    collection[index] !== selectedElement || this.checkPresentDate(new Date(parseInt(selectedElement.getAttribute("id").split("_")[0], 10)), values) || removeClass([ collection[index] ], SELECTED);
                }
                if (element.classList.contains(SELECTED)) {
                    removeClass([ element ], SELECTED);
                    for (var i = 0; i < copyValues.length; i++) {
                        if (this.globalize.formatDate(date, {
                            type: "date",
                            skeleton: "short"
                        }) === this.globalize.formatDate(copyValues[i], {
                            type: "date",
                            skeleton: "short"
                        })) {
                            index = copyValues.indexOf(copyValues[i]);
                            copyValues.splice(index, 1), addClass([ element ], FOCUSEDDATE);
                        }
                    }
                    this.setProperties({
                        values: copyValues
                    }, !0);
                } else addClass([ element ], SELECTED);
            } else addClass([ element ], SELECTED);
        }, CalendarBase.prototype.checkPresentDate = function(dates, values) {
            var previousValue = !1;
            if (!isNullOrUndefined(values)) for (var checkPrevious = 0; checkPrevious < values.length; checkPrevious++) {
                this.globalize.formatDate(dates, {
                    type: "date",
                    skeleton: "short"
                }) === this.globalize.formatDate(values[checkPrevious], {
                    type: "date",
                    skeleton: "short"
                }) && (previousValue = !0);
            }
            return previousValue;
        }, CalendarBase.prototype.setAriaActiveDescendant = function() {
            attributes(this.table, {
                "aria-activedescendant": "" + this.setActiveDescendant()
            });
        }, CalendarBase.prototype.previousIconHandler = function(disabled) {
            disabled ? (EventHandler.remove(this.previousIcon, "click", this.navigatePreviousHandler), 
            addClass([ this.previousIcon ], "e-disabled"), addClass([ this.previousIcon ], "" + OVERLAY), 
            this.previousIcon.setAttribute("aria-disabled", "true")) : (EventHandler.add(this.previousIcon, "click", this.navigatePreviousHandler), 
            removeClass([ this.previousIcon ], "e-disabled"), removeClass([ this.previousIcon ], "" + OVERLAY), 
            this.previousIcon.setAttribute("aria-disabled", "false"));
        }, CalendarBase.prototype.renderDayCellEvent = function(args) {
            extend(this.renderDayCellArgs, {
                name: "renderDayCell"
            }), this.trigger("renderDayCell", args);
        }, CalendarBase.prototype.navigatedEvent = function(eve) {
            extend(this.navigatedArgs, {
                name: "navigated",
                event: eve
            }), this.trigger("navigated", this.navigatedArgs);
        }, CalendarBase.prototype.triggerNavigate = function(event) {
            this.navigatedArgs = {
                view: this.currentView(),
                date: this.currentDate
            }, this.navigatedEvent(event);
        }, CalendarBase.prototype.nextIconHandler = function(disabled) {
            disabled ? (EventHandler.remove(this.nextIcon, "click", this.navigateNextHandler), 
            addClass([ this.nextIcon ], DISABLED$5), addClass([ this.nextIcon ], OVERLAY), this.nextIcon.setAttribute("aria-disabled", "true")) : (EventHandler.add(this.nextIcon, "click", this.navigateNextHandler), 
            removeClass([ this.nextIcon ], DISABLED$5), removeClass([ this.nextIcon ], OVERLAY), 
            this.nextIcon.setAttribute("aria-disabled", "false"));
        }, CalendarBase.prototype.compare = function(startDate, endDate, modifier) {
            var end, result, start = endDate.getFullYear();
            return end = start, result = 0, modifier && (end = (start -= start % modifier) - start % modifier + modifier - 1), 
            startDate.getFullYear() > end ? result = 1 : startDate.getFullYear() < start && (result = -1), 
            result;
        }, CalendarBase.prototype.isMinMaxRange = function(date) {
            return +date >= +this.min && +date <= +this.max;
        }, CalendarBase.prototype.isMonthYearRange = function(date) {
            return date.getMonth() >= this.min.getMonth() && date.getFullYear() >= this.min.getFullYear() && date.getMonth() <= this.max.getMonth() && date.getFullYear() <= this.max.getFullYear();
        }, CalendarBase.prototype.compareYear = function(start, end) {
            return this.compare(start, end, 0);
        }, CalendarBase.prototype.compareDecade = function(start, end) {
            return this.compare(start, end, 10);
        }, CalendarBase.prototype.shiftArray = function(array, i) {
            return array.slice(i).concat(array.slice(0, i));
        }, CalendarBase.prototype.addDay = function(date, i, e, max, min) {
            var column = i, value = new Date(+date);
            if (!isNullOrUndefined(this.tableBodyElement) && !isNullOrUndefined(e)) {
                for (;this.findNextTD(new Date(+date), column, max, min); ) column += i;
                var rangeValue = new Date(value.setDate(value.getDate() + column));
                column = +rangeValue > +max || +rangeValue < +min ? column === i ? i - i : i : column;
            }
            date.setDate(date.getDate() + column);
        }, CalendarBase.prototype.findNextTD = function(date, column, max, min) {
            var value = new Date(date.setDate(date.getDate() + column)), collection = [], isDisabled = !1;
            if ((!isNullOrUndefined(value) && value.getMonth()) === (!isNullOrUndefined(this.currentDate) && this.currentDate.getMonth())) {
                collection = this.renderDays(value, null).filter(function(element) {
                    return element.classList.contains(DISABLED$5);
                });
            } else collection = this.tableBodyElement.querySelectorAll("td.e-disabled");
            if (+value <= +max && +value >= +min && collection.length) for (var i = 0; i < collection.length && !(isDisabled = +value == +new Date(parseInt(collection[i].id, 0))); i++) ;
            return isDisabled;
        }, CalendarBase.prototype.getMaxDays = function(d) {
            var date, month, tmpDate = new Date("" + d);
            for (date = 28, month = tmpDate.getMonth(); tmpDate.getMonth() === month; ) ++date, 
            tmpDate.setDate(date);
            return date - 1;
        }, CalendarBase.prototype.setDateDecade = function(date, year) {
            date.setFullYear(year), this.setProperties({
                value: new Date("" + date)
            }, !0);
        }, CalendarBase.prototype.setDateYear = function(date, value) {
            date.setFullYear(value.getFullYear(), value.getMonth(), date.getDate()), value.getMonth() !== date.getMonth() && date.setDate(0), 
            this.setProperties({
                value: new Date("" + date)
            }, !0), this.currentDate = new Date("" + value);
        }, CalendarBase.prototype.compareMonth = function(start, end) {
            return start.getFullYear() > end.getFullYear() ? 1 : start.getFullYear() < end.getFullYear() ? -1 : start.getMonth() === end.getMonth() ? 0 : start.getMonth() > end.getMonth() ? 1 : -1;
        }, __decorate$34([ Property(new Date(1900, 0, 1)) ], CalendarBase.prototype, "min", void 0), 
        __decorate$34([ Property(new Date(2099, 11, 31)) ], CalendarBase.prototype, "max", void 0), 
        __decorate$34([ Property(null) ], CalendarBase.prototype, "firstDayOfWeek", void 0), 
        __decorate$34([ Property("Month") ], CalendarBase.prototype, "start", void 0), __decorate$34([ Property("Month") ], CalendarBase.prototype, "depth", void 0), 
        __decorate$34([ Property(!1) ], CalendarBase.prototype, "weekNumber", void 0), __decorate$34([ Property(!0) ], CalendarBase.prototype, "showTodayButton", void 0), 
        __decorate$34([ Property(!1) ], CalendarBase.prototype, "enableRtl", void 0), __decorate$34([ Property(!1) ], CalendarBase.prototype, "enablePersistence", void 0), 
        __decorate$34([ Event() ], CalendarBase.prototype, "created", void 0), __decorate$34([ Event() ], CalendarBase.prototype, "destroyed", void 0), 
        __decorate$34([ Event() ], CalendarBase.prototype, "navigated", void 0), __decorate$34([ Event() ], CalendarBase.prototype, "renderDayCell", void 0), 
        CalendarBase = __decorate$34([ NotifyPropertyChanges ], CalendarBase);
    }(Component), Calendar = function(_super) {
        function Calendar(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$47(Calendar, _super), Calendar.prototype.render = function() {
            if (this.isMultiSelection && "object" == typeof this.values && !isNullOrUndefined(this.values) && this.values.length > 0) {
                for (var tempValues = [], copyValues = [], limit = 0; limit < this.values.length; limit++) -1 === tempValues.indexOf(+this.values[limit]) && (tempValues.push(+this.values[limit]), 
                copyValues.push(this.values[limit]));
                this.setProperties({
                    values: copyValues
                }, !0);
                for (var index = 0; index < this.values.length; index++) if (!this.checkDateValue(this.values[index])) if ("string" == typeof this.values[index] && this.checkDateValue(new Date("" + this.values[index]))) {
                    var copyDate = new Date("" + this.values[index]);
                    this.values.splice(index, 1), this.values.splice(index, 0, copyDate);
                } else this.values.splice(index, 1);
                this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0), this.previousValues = this.values.length;
            }
            if (this.validateDate(), this.minMaxUpdate(), _super.prototype.render.call(this), 
            "calendar" === this.getModuleName()) {
                var form = closest(this.element, "form");
                form && EventHandler.add(form, "reset", this.formResetHandler.bind(this));
            }
        }, Calendar.prototype.formResetHandler = function() {
            this.value = null;
        }, Calendar.prototype.validateDate = function() {
            "string" == typeof this.value && this.setProperties({
                value: this.checkDateValue(new Date("" + this.value))
            }, !0), _super.prototype.validateDate.call(this, this.value), !isNullOrUndefined(this.value) && this.min <= this.max && this.value >= this.min && this.value <= this.max && (this.currentDate = new Date("" + this.value)), 
            isNaN(+this.value) && this.setProperties({
                value: null
            }, !0);
        }, Calendar.prototype.minMaxUpdate = function() {
            "calendar" === this.getModuleName() && (!isNullOrUndefined(this.value) && this.value <= this.min && this.min <= this.max ? (this.setProperties({
                value: this.min
            }, !0), this.changedArgs = {
                value: this.value
            }) : !isNullOrUndefined(this.value) && this.value >= this.max && this.min <= this.max && (this.setProperties({
                value: this.max
            }, !0), this.changedArgs = {
                value: this.value
            })), "calendar" === this.getModuleName() || isNullOrUndefined(this.value) ? _super.prototype.minMaxUpdate.call(this, this.value) : !isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max ? _super.prototype.minMaxUpdate.call(this, this.min) : !isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && _super.prototype.minMaxUpdate.call(this, this.max);
        }, Calendar.prototype.todayButtonClick = function() {
            if (this.showTodayButton) {
                var tempValue = new Date();
                if (this.value ? (tempValue.setHours(this.value.getHours()), tempValue.setMinutes(this.value.getMinutes()), 
                tempValue.setSeconds(this.value.getSeconds()), tempValue.setMilliseconds(this.value.getMilliseconds())) : tempValue = new Date(tempValue.getFullYear(), tempValue.getMonth(), tempValue.getDate(), 0, 0, 0, 0), 
                this.setProperties({
                    value: tempValue
                }, !0), this.isMultiSelection) {
                    var copyValues = this.copyValues(this.values);
                    _super.prototype.checkPresentDate.call(this, tempValue, this.values) || (copyValues.push(tempValue), 
                    this.setProperties({
                        values: copyValues
                    }));
                }
                _super.prototype.todayButtonClick.call(this, new Date(+this.value));
            }
        }, Calendar.prototype.keyActionHandle = function(e) {
            _super.prototype.keyActionHandle.call(this, e, this.value, this.isMultiSelection);
        }, Calendar.prototype.preRender = function() {
            var _this = this;
            this.changeHandler = function(e) {
                _this.triggerChange(e);
            }, _super.prototype.preRender.call(this, this.value);
        }, Calendar.prototype.createContent = function() {
            this.previousDate = this.value, _super.prototype.createContent.call(this);
        }, Calendar.prototype.minMaxDate = function(localDate) {
            return _super.prototype.minMaxDate.call(this, localDate);
        }, Calendar.prototype.renderMonths = function(e) {
            _super.prototype.renderMonths.call(this, e, this.value);
        }, Calendar.prototype.renderDays = function(currentDate, e) {
            var tempDays = _super.prototype.renderDays.call(this, currentDate, e, this.value, this.isMultiSelection, this.values);
            return this.isMultiSelection && _super.prototype.validateValues.call(this, this.isMultiSelection, this.values), 
            tempDays;
        }, Calendar.prototype.renderYears = function(e) {
            _super.prototype.renderYears.call(this, e, this.value);
        }, Calendar.prototype.renderDecades = function(e) {
            _super.prototype.renderDecades.call(this, e, this.value);
        }, Calendar.prototype.renderTemplate = function(elements, count, classNm, e) {
            _super.prototype.renderTemplate.call(this, elements, count, classNm, e, this.value), 
            this.changedArgs = {
                value: this.value,
                values: this.values
            }, this.changeHandler();
        }, Calendar.prototype.clickHandler = function(e) {
            if (e.currentTarget.classList.contains(OTHERMONTH)) if (this.isMultiSelection) {
                var copyValues = this.copyValues(this.values);
                copyValues.push(this.getIdValue(e, null)), this.setProperties({
                    values: copyValues
                }, !0), this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0);
            } else this.setProperties({
                value: this.getIdValue(e, null)
            }, !0);
            var storeView = this.currentView();
            _super.prototype.clickHandler.call(this, e, this.value), this.isMultiSelection && this.currentDate !== this.value && !isNullOrUndefined(this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0]) && "Year" === storeView && this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0].classList.remove(FOCUSEDDATE);
        }, Calendar.prototype.switchView = function(view, e) {
            _super.prototype.switchView.call(this, view, e, this.isMultiSelection);
        }, Calendar.prototype.getModuleName = function() {
            return _super.prototype.getModuleName.call(this), "calendar";
        }, Calendar.prototype.getPersistData = function() {
            _super.prototype.getPersistData.call(this);
            return this.addOnPersist([ "value", "values" ]);
        }, Calendar.prototype.onPropertyChanged = function(newProp, oldProp) {
            this.effect = "";
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "value":
                    "string" == typeof newProp.value ? this.setProperties({
                        value: new Date("" + newProp.value)
                    }, !0) : newProp.value = new Date("" + newProp.value), isNaN(+this.value) && this.setProperties({
                        value: oldProp.value
                    }, !0), this.update();
                    break;

                  case "values":
                    if ("string" == typeof newProp.values || "number" == typeof newProp.values) this.setProperties({
                        values: null
                    }, !0); else {
                        for (var copyValues = this.copyValues(this.values), index = 0; index < copyValues.length; index++) {
                            var tempDate = copyValues[index];
                            this.checkDateValue(tempDate) && !_super.prototype.checkPresentDate.call(this, tempDate, copyValues) && copyValues.push(tempDate);
                        }
                        this.setProperties({
                            values: copyValues
                        }, !0), this.values.length > 0 && this.setProperties({
                            value: newProp.values[newProp.values.length - 1]
                        }, !0);
                    }
                    this.validateValues(this.isMultiSelection, this.values), this.update();
                    break;

                  case "isMultiSelection":
                    this.setProperties({
                        isMultiSelection: newProp.isMultiSelection
                    }, !0), this.update();
                    break;

                  default:
                    _super.prototype.onPropertyChanged.call(this, newProp, oldProp, this.isMultiSelection, this.values);
                }
            }
        }, Calendar.prototype.destroy = function() {
            if (_super.prototype.destroy.call(this), "calendar" === this.getModuleName()) {
                var form = closest(this.element, "form");
                form && EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
            }
        }, Calendar.prototype.navigateTo = function(view, date) {
            this.minMaxUpdate(), _super.prototype.navigateTo.call(this, view, date);
        }, Calendar.prototype.currentView = function() {
            return _super.prototype.currentView.call(this);
        }, Calendar.prototype.addDate = function(dates) {
            if ("string" != typeof dates && "number" != typeof dates) {
                var copyValues = this.copyValues(this.values);
                if ("object" == typeof dates && dates.length > 0) for (var tempDates = dates, i = 0; i < tempDates.length; i++) this.checkDateValue(tempDates[i]) && !_super.prototype.checkPresentDate.call(this, tempDates[i], copyValues) && (!isNullOrUndefined(copyValues) && copyValues.length > 0 ? copyValues.push(tempDates[i]) : copyValues = [ new Date(+tempDates[i]) ]); else this.checkDateValue(dates) && !_super.prototype.checkPresentDate.call(this, dates, copyValues) && (!isNullOrUndefined(copyValues) && copyValues.length > 0 ? copyValues.push(dates) : copyValues = [ new Date(+dates) ]);
                this.setProperties({
                    values: copyValues
                }, !0), this.isMultiSelection && this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0), this.validateValues(this.isMultiSelection, copyValues), this.update(), this.changedArgs = {
                    value: this.value,
                    values: this.values
                }, this.changeHandler();
            }
        }, Calendar.prototype.removeDate = function(dates) {
            if ("string" != typeof dates && "number" != typeof dates && !isNullOrUndefined(this.values) && this.values.length > 0) {
                var copyValues = this.copyValues(this.values);
                if ("object" == typeof dates && dates.length > 0) for (var tempDates = dates, index = 0; index < tempDates.length; index++) for (var i = 0; i < copyValues.length; i++) +copyValues[i] == +tempDates[index] && copyValues.splice(i, 1); else for (i = 0; i < copyValues.length; i++) +copyValues[i] == +dates && copyValues.splice(i, 1);
                this.setProperties({
                    values: copyValues
                }, !1), this.update(), this.isMultiSelection && this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0), this.changedArgs = {
                    value: this.value,
                    values: this.values
                }, this.changeHandler();
            }
        }, Calendar.prototype.update = function() {
            this.validateDate(), this.minMaxUpdate(), _super.prototype.setValueUpdate.call(this);
        }, Calendar.prototype.selectDate = function(e, date, element) {
            _super.prototype.selectDate.call(this, e, date, element, this.isMultiSelection, this.values), 
            this.isMultiSelection && !isNullOrUndefined(this.values) && this.values.length > 0 && this.setProperties({
                value: this.values[this.values.length - 1]
            }, !0), this.changedArgs = {
                value: this.value,
                values: this.values
            }, this.changeHandler(e);
        }, Calendar.prototype.changeEvent = function(e) {
            this.trigger("change", this.changedArgs), this.previousDate = new Date(+this.value);
        }, Calendar.prototype.triggerChange = function(e) {
            this.changedArgs.event = e || null, this.changedArgs.isInteracted = !isNullOrUndefined(e), 
            isNullOrUndefined(this.value) || this.setProperties({
                value: this.value
            }, !0), this.isMultiSelection || +this.value === Number.NaN || +this.value == +this.previousDate ? isNullOrUndefined(this.values) || this.previousValues === this.values.length || (this.changeEvent(e), 
            this.previousValues = this.values.length) : this.changeEvent(e);
        }, __decorate$34([ Property(null) ], Calendar.prototype, "value", void 0), __decorate$34([ Property(null) ], Calendar.prototype, "values", void 0), 
        __decorate$34([ Property(!1) ], Calendar.prototype, "isMultiSelection", void 0), 
        __decorate$34([ Event() ], Calendar.prototype, "change", void 0), Calendar = __decorate$34([ NotifyPropertyChanges ], Calendar);
    }(CalendarBase), __extends$48 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$35 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, ROOT$7 = "e-datepicker", DatePicker = function(_super) {
        function DatePicker(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.previousElementValue = "", _this.isDateIconClicked = !1, _this.keyConfigs = {
                altUpArrow: "alt+uparrow",
                altDownArrow: "alt+downarrow",
                escape: "escape",
                enter: "enter",
                controlUp: "ctrl+38",
                controlDown: "ctrl+40",
                moveDown: "downarrow",
                moveUp: "uparrow",
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                select: "enter",
                home: "home",
                end: "end",
                pageUp: "pageup",
                pageDown: "pagedown",
                shiftPageUp: "shift+pageup",
                shiftPageDown: "shift+pagedown",
                controlHome: "ctrl+home",
                controlEnd: "ctrl+end",
                tab: "tab"
            }, _this.calendarKeyConfigs = {
                escape: "escape",
                enter: "enter",
                tab: "tab"
            }, _this;
        }
        return __extends$48(DatePicker, _super), DatePicker.prototype.render = function() {
            this.initialize(), this.bindEvents();
        }, DatePicker.prototype.setAllowEdit = function() {
            this.allowEdit ? this.readonly || this.inputElement.removeAttribute("readonly") : attributes(this.inputElement, {
                readonly: ""
            });
        }, DatePicker.prototype.initialize = function() {
            this.createInput(), this.setAllowEdit(), this.updateInput(), this.previousElementValue = this.inputElement.value, 
            this.previousDate = new Date(+this.value);
        }, DatePicker.prototype.createInput = function() {
            var ariaAttrs = {
                "aria-live": "assertive",
                "aria-atomic": "true",
                "aria-haspopup": "true",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_options",
                "aria-expanded": "false",
                role: "combobox",
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false"
            };
            if ("datepicker" === this.getModuleName()) {
                this.globalize = new Internationalization(this.locale), this.l10n = new L10n("datepicker", {
                    placeholder: null
                }, this.locale), this.setProperties({
                    placeholder: this.placeholder || this.l10n.getConstant("placeholder")
                }, !0);
            }
            this.inputWrapper = Input.createInput({
                element: this.inputElement,
                floatLabelType: this.floatLabelType,
                properties: {
                    readonly: this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton
                },
                buttons: [ "e-input-group-icon e-date-icon e-icons" ]
            }, this.createElement), this.setWidth(this.width), "" !== this.inputElement.name ? this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute("name")) : this.inputElement.setAttribute("name", "" + this.element.id), 
            attributes(this.inputElement, ariaAttrs), this.enabled ? this.inputElement.setAttribute("aria-disabled", "false") : this.inputElement.setAttribute("aria-disabled", "true"), 
            Input.addAttributes({
                "aria-label": "select"
            }, this.inputWrapper.buttons[0]), addClass([ this.inputWrapper.container ], "e-date-wrapper");
        }, DatePicker.prototype.updateInput = function() {
            if (this.value && !this.isCalendar() && this.disabledDates(), +new Date("" + this.value)) {
                if ("string" == typeof this.value) {
                    this.value = this.checkDateValue(new Date("" + this.value));
                    var dateOptions = void 0;
                    dateOptions = "datetimepicker" === this.getModuleName() ? {
                        format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                        type: "dateTime",
                        skeleton: "yMd"
                    } : {
                        format: this.format,
                        type: "dateTime",
                        skeleton: "yMd"
                    };
                    var dateString = this.globalize.formatDate(this.value, dateOptions);
                    this.setProperties({
                        value: this.globalize.parseDate(dateString, dateOptions)
                    }, !0);
                }
            } else this.setProperties({
                value: null
            }, !0);
            if (this.strictMode && (_super.prototype.validateDate.call(this), this.minMaxUpdates(), 
            _super.prototype.minMaxUpdate.call(this)), !isNullOrUndefined(this.value)) {
                var dateValue = this.value, tempFormat = (dateString = void 0, isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format);
                if (dateString = "datetimepicker" === this.getModuleName() ? this.globalize.formatDate(this.value, {
                    format: tempFormat,
                    type: "dateTime",
                    skeleton: "yMd"
                }) : this.globalize.formatDate(this.value, {
                    format: this.format,
                    type: "dateTime",
                    skeleton: "yMd"
                }), +dateValue <= +this.max && +dateValue >= +this.min) Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton); else {
                    var value = +dateValue >= +this.max || !+this.value || !+this.value || +dateValue <= +this.min;
                    !this.strictMode && value && Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
                }
            }
            isNullOrUndefined(this.value) && this.strictMode && Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            this.changedArgs = {
                value: this.value
            }, this.errorClass();
        }, DatePicker.prototype.minMaxUpdates = function() {
            !isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode ? (this.setProperties({
                value: this.min
            }, !0), this.changedArgs = {
                value: this.value
            }) : !isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode && (this.setProperties({
                value: this.max
            }, !0), this.changedArgs = {
                value: this.value
            });
        }, DatePicker.prototype.bindEvents = function() {
            this.enabled ? (EventHandler.add(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateIconHandler, this), 
            EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this), EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this), 
            EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this), this.showClearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this), 
            this.formElement && EventHandler.add(this.formElement, "reset", this.resetFormHandler, this)) : (EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateIconHandler), 
            EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler), EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler), 
            EventHandler.remove(this.inputElement, "change", this.inputChangeHandler), this.showClearButton && EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler), 
            this.formElement && EventHandler.remove(this.formElement, "reset", this.resetFormHandler)), 
            this.keyboardModules = new KeyboardEvents(this.inputElement, {
                eventName: "keydown",
                keyAction: this.inputKeyActionHandle.bind(this),
                keyConfigs: this.keyConfigs
            });
        }, DatePicker.prototype.resetFormHandler = function(e) {
            this.inputElement.getAttribute("value") ? this.value = this.checkDateValue(new Date("" + this.element.getAttribute("value"))) : this.formElement && e.target === this.formElement && (this.value = null, 
            this.inputElement && (Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            attributes(this.inputElement, {
                "aria-invalid": "false"
            }), removeClass([ this.inputWrapper.container ], "e-error")));
        }, DatePicker.prototype.inputChangeHandler = function(e) {
            e.stopPropagation();
        }, DatePicker.prototype.bindClearEvent = function() {
            this.showClearButton && this.inputWrapper.clearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
        }, DatePicker.prototype.resetHandler = function(e) {
            e.preventDefault(), this.clear(e);
        }, DatePicker.prototype.clear = function(event) {
            this.setProperties({
                value: null
            }, !0), Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            this.updateInput(), this.changeEvent(event);
        }, DatePicker.prototype.dateIconHandler = function(e) {
            Browser.isDevice && this.element.setAttribute("readonly", "readonly"), e.preventDefault(), 
            this.readonly || (this.isCalendar() ? this.hide(e) : (this.isDateIconClicked = !0, 
            this.show(null, e), "datetimepicker" === this.getModuleName() && this.inputElement.focus(), 
            this.inputElement.focus(), addClass([ this.inputWrapper.container ], [ "e-input-focus" ]), 
            addClass(this.inputWrapper.buttons, "e-active")));
        }, DatePicker.prototype.CalendarKeyActionHandle = function(e) {
            switch (e.action) {
              case "escape":
                this.isCalendar() ? this.hide(e) : this.inputWrapper.container.children[this.index].blur();
                break;

              case "enter":
                this.isCalendar() ? +this.value == +this.currentDate || this.isCalendar() || this.inputWrapper.container.children[this.index].focus() : this.show(null, e), 
                "datetimepicker" === this.getModuleName() && this.inputElement.focus();
                break;

              case "tab":
                this.hide(e);
            }
        }, DatePicker.prototype.inputFocusHandler = function() {
            var focusArguments = {
                model: this
            };
            this.isDateIconClicked = !1, this.trigger("focus", focusArguments);
        }, DatePicker.prototype.inputBlurHandler = function(e) {
            if (this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), this.errorClass(), 
            this.isCalendar() && document.activeElement === this.inputElement && this.hide(e), 
            "datepicker" === this.getModuleName()) {
                var blurArguments = {
                    model: this
                };
                this.trigger("blur", blurArguments);
            }
            this.isCalendar() && (this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {
                eventName: "keydown",
                keyAction: this.CalendarKeyActionHandle.bind(this),
                keyConfigs: this.calendarKeyConfigs
            }));
        }, DatePicker.prototype.documentHandler = function(e) {
            "touchstart" !== e.type && e.preventDefault();
            var target = e.target;
            closest(target, ".e-datepicker.e-popup-wrapper") || closest(target, ".e-input-group") === this.inputWrapper.container || target.classList.contains("e-day") || this.hide(e);
        }, DatePicker.prototype.inputKeyActionHandle = function(e) {
            switch (e.action) {
              case "altUpArrow":
                this.hide(e), this.inputElement.focus();
                break;

              case "altDownArrow":
                this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), "datepicker" === this.getModuleName() && this.show(null, e);
                break;

              case "escape":
                this.hide(e);
                break;

              case "enter":
                this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), this.errorClass(), 
                this.isCalendar() || document.activeElement !== this.inputElement || this.hide(e), 
                this.isCalendar() && e.preventDefault();
                break;

              case "tab":
                this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), this.errorClass(), 
                this.hide(e);
                break;

              default:
                this.previousDate = !isNullOrUndefined(this.value) && new Date(+this.value) || null, 
                this.isCalendar() && _super.prototype.keyActionHandle.call(this, e);
            }
        }, DatePicker.prototype.strictModeUpdate = function() {
            var format;
            if (format = "datetimepicker" === this.getModuleName() ? isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format : isNullOrUndefined(this.format) ? this.format : this.format.replace("dd", "d"), 
            !isNullOrUndefined(format)) {
                format.split("M").length - 1 < 3 && (format = format.replace("MM", "M"));
            }
            var dateOptions;
            dateOptions = "datetimepicker" === this.getModuleName() ? {
                format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                type: "dateTime",
                skeleton: "yMd"
            } : {
                format: format,
                type: "dateTime",
                skeleton: "yMd"
            };
            var date;
            date = "datetimepicker" === this.getModuleName() ? this.checkDateValue(this.globalize.parseDate(this.inputElement.value, dateOptions)) ? this.globalize.parseDate(this.inputElement.value, dateOptions) : this.globalize.parseDate(this.inputElement.value, {
                type: "dateTime",
                skeleton: "yMd"
            }) : this.globalize.parseDate(this.inputElement.value, dateOptions), this.strictMode && date ? (Input.setValue(this.globalize.formatDate(date, dateOptions), this.inputElement, this.floatLabelType, this.showClearButton), 
            this.inputElement.value !== this.previousElementValue && this.setProperties({
                value: date
            }, !0)) : this.strictMode || this.inputElement.value !== this.previousElementValue && this.setProperties({
                value: date
            }, !0), this.strictMode && !date && "" === this.inputElement.value && this.setProperties({
                value: null
            }, !0), isNaN(+this.value) && this.setProperties({
                value: null
            }, !0), isNullOrUndefined(this.value) && (this.currentDate = new Date(new Date().setHours(0, 0, 0, 0)));
        }, DatePicker.prototype.createCalendar = function() {
            var _this = this;
            this.popupWrapper = this.createElement("div", {
                className: ROOT$7 + " e-popup-wrapper"
            }), isNullOrUndefined(this.cssClass) || (this.popupWrapper.className += " " + this.cssClass), 
            Browser.isDevice && (this.modelHeader(), this.modal = this.createElement("div"), 
            this.modal.className = ROOT$7 + " e-date-modal", document.body.className += " e-date-overflow", 
            this.modal.style.display = "block", document.body.appendChild(this.modal)), this.calendarElement.querySelector("table tbody").className = "", 
            this.popupObj = new Popup(this.popupWrapper, {
                content: this.calendarElement,
                relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
                position: Browser.isDevice ? {
                    X: "center",
                    Y: "center"
                } : {
                    X: "left",
                    Y: "bottom"
                },
                offsetY: 4,
                targetType: "container",
                enableRtl: this.enableRtl,
                zIndex: this.zIndex,
                collision: Browser.isDevice ? {
                    X: "fit",
                    Y: "fit"
                } : {
                    X: "flip",
                    Y: "flip"
                },
                open: function() {
                    "datetimepicker" !== _this.getModuleName() && document.activeElement !== _this.inputElement && (_this.calendarElement.children[1].firstElementChild.focus(), 
                    _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {
                        eventName: "keydown",
                        keyAction: _this.CalendarKeyActionHandle.bind(_this),
                        keyConfigs: _this.calendarKeyConfigs
                    }), _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {
                        eventName: "keydown",
                        keyAction: _this.CalendarKeyActionHandle.bind(_this),
                        keyConfigs: _this.calendarKeyConfigs
                    }));
                },
                close: function() {
                    _this.isDateIconClicked && _this.inputWrapper.container.children[_this.index].focus(), 
                    _this.value && _this.disabledDates(), _this.popupObj && _this.popupObj.destroy(), 
                    detach(_this.popupWrapper), _this.popupObj = _this.popupWrapper = null, _this.setAriaAttributes();
                }
            }), this.popupObj.element.className += " " + this.cssClass, this.setAriaAttributes();
        }, DatePicker.prototype.modelHeader = function() {
            var modelHeader = this.createElement("div", {
                className: "e-model-header"
            }), yearHeading = this.createElement("h1", {
                className: "e-model-year"
            }), h2 = this.createElement("div"), daySpan = this.createElement("span", {
                className: "e-model-day"
            }), monthSpan = this.createElement("span", {
                className: "e-model-month"
            });
            yearHeading.textContent = "" + this.globalize.formatDate(this.value || new Date(), {
                format: "y",
                skeleton: "dateTime"
            }), daySpan.textContent = this.globalize.formatDate(this.value || new Date(), {
                format: "E",
                skeleton: "dateTime"
            }) + ", ", monthSpan.textContent = "" + this.globalize.formatDate(this.value || new Date(), {
                format: "MMM d",
                skeleton: "dateTime"
            }), modelHeader.appendChild(yearHeading), h2.appendChild(daySpan), h2.appendChild(monthSpan), 
            modelHeader.appendChild(h2), this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);
        }, DatePicker.prototype.changeTrigger = function(event) {
            this.inputElement.value !== this.previousElementValue && (this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf()) && (this.changedArgs.value = this.value, 
            this.changedArgs.event = event || null, this.changedArgs.element = this.element, 
            this.changedArgs.isInteracted = !isNullOrUndefined(event), this.trigger("change", this.changedArgs), 
            this.previousElementValue = this.inputElement.value, this.previousDate = new Date("" + this.value));
        }, DatePicker.prototype.navigatedEvent = function() {
            this.trigger("navigated", this.navigatedArgs);
        }, DatePicker.prototype.changeEvent = function(event) {
            (this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf()) && (this.selectCalendar(event), 
            this.changedArgs.event = event || null, this.changedArgs.element = this.element, 
            this.changedArgs.isInteracted = !isNullOrUndefined(event), this.trigger("change", this.changedArgs), 
            this.previousDate = this.value && new Date(+this.value), this.hide(event), this.previousElementValue = this.inputElement.value, 
            this.errorClass());
        }, DatePicker.prototype.selectCalendar = function(e) {
            var date, tempFormat;
            tempFormat = "datetimepicker" === this.getModuleName() && isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format, 
            this.value && (date = "datetimepicker" === this.getModuleName() ? this.globalize.formatDate(this.changedArgs.value, {
                format: tempFormat,
                type: "dateTime",
                skeleton: "yMd"
            }) : this.globalize.formatDate(this.changedArgs.value, {
                format: this.format,
                type: "dateTime",
                skeleton: "yMd"
            })), isNullOrUndefined(date) || Input.setValue(date, this.inputElement, this.floatLabelType, this.showClearButton);
        }, DatePicker.prototype.isCalendar = function() {
            return !(!this.popupWrapper || !this.popupWrapper.classList.contains("e-popup-wrapper"));
        }, DatePicker.prototype.setWidth = function(width) {
            this.inputWrapper.container.style.width = "number" == typeof width ? formatUnit(this.width) : "string" == typeof width ? width.match(/px|%|em/) ? this.width : formatUnit(this.width) : "100%";
        }, DatePicker.prototype.show = function(type, e) {
            if (!(this.enabled && this.readonly || !this.enabled || this.popupObj)) {
                var prevent_1 = !0, outOfRange = void 0;
                if (isNullOrUndefined(this.value) || +this.value >= +this.min && +this.value <= +this.max ? outOfRange = this.value || null : (outOfRange = new Date("" + this.value), 
                this.setProperties({
                    value: null
                }, !0)), this.isCalendar() || (_super.prototype.render.call(this), this.setProperties({
                    value: outOfRange || null
                }, !0), this.previousDate = outOfRange, this.createCalendar()), this.preventArgs = {
                    preventDefault: function() {
                        prevent_1 = !1;
                    },
                    popup: this.popupObj,
                    event: e || null,
                    cancel: !1,
                    appendTo: document.body
                }, this.trigger("open", this.preventArgs), prevent_1 && !this.preventArgs.cancel) {
                    addClass(this.inputWrapper.buttons, "e-active"), this.preventArgs.appendTo.appendChild(this.popupWrapper), 
                    this.popupObj.refreshPosition(this.inputElement);
                    var openAnimation = {
                        name: "FadeIn",
                        duration: Browser.isDevice ? 0 : 300
                    };
                    1e3 === this.zIndex ? this.popupObj.show(new Animation(openAnimation), this.element) : this.popupObj.show(new Animation(openAnimation), null), 
                    this.setAriaAttributes();
                } else this.popupObj.destroy(), this.popupWrapper = this.popupObj = null;
                EventHandler.add(document, "mousedown touchstart", this.documentHandler, this);
            }
        }, DatePicker.prototype.hide = function(event) {
            if (!isNullOrUndefined(this.popupWrapper)) {
                var prevent_2 = !0;
                this.preventArgs = {
                    preventDefault: function() {
                        prevent_2 = !1;
                    },
                    popup: this.popupObj,
                    event: event || null,
                    cancel: !1
                }, removeClass(this.inputWrapper.buttons, "e-active"), removeClass([ document.body ], "e-date-overflow"), 
                this.isCalendar() && this.trigger("close", this.preventArgs), this.isCalendar() && prevent_2 && !this.preventArgs.cancel && (this.popupObj.hide(), 
                this.keyboardModule.destroy(), removeClass(this.inputWrapper.buttons, "e-active")), 
                this.setAriaAttributes(), this.previousElementValue = this.inputElement.value, Browser.isDevice && this.modal && (this.modal.style.display = "none", 
                this.modal.outerHTML = "", this.modal = null), EventHandler.remove(document, "mousedown touchstart", this.documentHandler);
            }
            Browser.isDevice && this.element.removeAttribute("readonly");
        }, DatePicker.prototype.focusIn = function(triggerEvent) {
            if (document.activeElement !== this.inputElement && this.enabled) {
                this.inputElement.focus(), addClass([ this.inputWrapper.container ], [ "e-input-focus" ]);
                var focusArguments = {
                    model: this
                };
                this.trigger("focus", focusArguments);
            }
        }, DatePicker.prototype.focusOut = function() {
            if (document.activeElement === this.inputElement) {
                this.inputElement.blur(), removeClass([ this.inputWrapper.container ], [ "e-input-focus" ]);
                var blurArguments = {
                    model: this
                };
                this.trigger("blur", blurArguments);
            }
        }, DatePicker.prototype.currentView = function() {
            var currentView;
            return this.calendarElement && (currentView = _super.prototype.currentView.call(this)), 
            currentView;
        }, DatePicker.prototype.navigateTo = function(view, date) {
            this.calendarElement && _super.prototype.navigateTo.call(this, view, date);
        }, DatePicker.prototype.destroy = function() {
            _super.prototype.destroy.call(this), this.keyboardModules.destroy(), this.popupObj && this.popupObj.element.classList.contains("e-popup") && _super.prototype.destroy.call(this);
            var ariaAttrs = {
                "aria-live": "assertive",
                "aria-atomic": "true",
                "aria-disabled": "true",
                "aria-haspopup": "true",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_options",
                "aria-expanded": "false",
                role: "combobox",
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false"
            };
            this.inputElement && (Input.removeAttributes(ariaAttrs, this.inputElement), EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler), 
            EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler), this.ensureInputAttribute()), 
            this.isCalendar() && (this.popupWrapper && detach(this.popupWrapper), this.popupObj = this.popupWrapper = null, 
            this.keyboardModule.destroy()), null === this.ngTag && (this.inputElement && (this.inputWrapper.container.insertAdjacentElement("afterend", this.inputElement), 
            removeClass([ this.inputElement ], [ "e-input" ])), removeClass([ this.element ], [ ROOT$7 ]), 
            detach(this.inputWrapper.container)), this.formElement && EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
        }, DatePicker.prototype.ensureInputAttribute = function() {
            for (var i = 0; i < this.inputElement.attributes.length; i++) {
                var prop = this.inputElement.attributes[i].name;
                isNullOrUndefined(this.inputEleCopy.getAttribute(prop)) && (("value" === prop.toLowerCase() || isNullOrUndefined(this.inputEleCopy.getAttribute("value"))) && (this.inputElement.value = ""), 
                this.inputElement.removeAttribute(prop));
            }
        }, DatePicker.prototype.preRender = function() {
            this.inputEleCopy = this.element.cloneNode(!0), this.inputElement = this.element, 
            this.formElement = closest(this.inputElement, "form"), this.index = this.showClearButton ? 2 : 1, 
            this.ngTag = null, "EJS-DATEPICKER" !== this.element.tagName && "EJS-DATETIMEPICKER" !== this.element.tagName || (this.ngTag = this.element.tagName, 
            this.inputElement = this.createElement("input"), this.element.appendChild(this.inputElement)), 
            this.element.getAttribute("id") ? null !== this.ngTag && (this.inputElement.id = this.element.getAttribute("id") + "_input") : "datetimepicker" === this.getModuleName() ? (this.element.id = getUniqueID("ej2-datetimepicker"), 
            null !== this.ngTag && attributes(this.inputElement, {
                id: this.element.id + "_input"
            })) : (this.element.id = getUniqueID("ej2-datepicker"), null !== this.ngTag && attributes(this.inputElement, {
                id: this.element.id + "_input"
            })), null !== this.ngTag && this.validationAttribute(this.element, this.inputElement), 
            this.checkHtmlAttributes(), _super.prototype.preRender.call(this);
        }, DatePicker.prototype.validationAttribute = function(target, inputElement) {
            var nameAttribute = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
            inputElement.setAttribute("name", nameAttribute), target.removeAttribute("name");
            for (var attribute = [ "required", "aria-required", "form" ], i = 0; i < attribute.length; i++) if (!isNullOrUndefined(target.getAttribute(attribute[i]))) {
                var attr = target.getAttribute(attribute[i]);
                inputElement.setAttribute(attribute[i], attr), target.removeAttribute(attribute[i]);
            }
        }, DatePicker.prototype.checkHtmlAttributes = function() {
            this.globalize = new Internationalization(this.locale);
            var options;
            options = "datetimepicker" === this.getModuleName() ? {
                format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                type: "dateTime",
                skeleton: "yMd"
            } : {
                format: this.format,
                type: "dateTime",
                skeleton: "yMd"
            };
            for (var _i = 0, attributes_1 = [ "value", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type" ]; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) switch (prop) {
                  case "disabled":
                    var enabled = "disabled" === this.inputElement.getAttribute(prop) || "" === this.inputElement.getAttribute(prop);
                    this.setProperties({
                        enabled: !enabled
                    }, !0);
                    break;

                  case "readonly":
                    var readonly = "readonly" === this.inputElement.getAttribute(prop) || "" === this.inputElement.getAttribute(prop);
                    this.setProperties({
                        readonly: readonly
                    }, !0);
                    break;

                  case "placeholder":
                    if (null === this.placeholder) {
                        this.inputElement.getAttribute(prop);
                        this.setProperties({
                            placeholder: this.inputElement.getAttribute(prop)
                        }, !0);
                    }
                    break;

                  case "style":
                    this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
                    break;

                  case "name":
                    this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
                    break;

                  case "value":
                    if (!this.value) {
                        var value = this.inputElement.getAttribute(prop);
                        this.setProperties(setValue(prop, this.globalize.parseDate(value, options), {}), !0);
                    }
                    break;

                  case "min":
                    +this.min == +new Date(1900, 0, 1) && this.setProperties(setValue(prop, this.globalize.parseDate(this.inputElement.getAttribute(prop)), {}), !0);
                    break;

                  case "max":
                    +this.max == +new Date(2099, 11, 31) && this.setProperties(setValue(prop, this.globalize.parseDate(this.inputElement.getAttribute(prop)), {}), !0);
                    break;

                  case "type":
                    "text" !== this.inputElement.getAttribute(prop) && this.inputElement.setAttribute("type", "text");
                }
            }
        }, DatePicker.prototype.getModuleName = function() {
            return "datepicker";
        }, DatePicker.prototype.disabledDates = function() {
            var valueCopy;
            valueCopy = this.checkDateValue(this.value) ? new Date(+this.value) : new Date("" + this.value);
            var previousValCopy = this.previousDate;
            this.minMaxUpdates(), _super.prototype.render.call(this), this.previousDate = previousValCopy;
            var dateIdString = '*[id^="/id"]'.replace("/id", "" + (valueCopy && +valueCopy));
            this.strictMode || ("string" == typeof this.value || "object" == typeof this.value && +this.value != +valueCopy) && this.setProperties({
                value: valueCopy
            }, !0), isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0]) || this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled") && (this.strictMode || (this.currentDate = new Date(new Date().setHours(0, 0, 0, 0))));
            var inputVal;
            inputVal = "datetimepicker" === this.getModuleName() ? this.globalize.formatDate(valueCopy, {
                format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                type: "dateTime",
                skeleton: "yMd"
            }) : this.globalize.formatDate(valueCopy, {
                format: this.format,
                type: "dateTime",
                skeleton: "yMd"
            }), Input.setValue(inputVal, this.inputElement, this.floatLabelType, this.showClearButton);
        }, DatePicker.prototype.setAriaAttributes = function() {
            this.isCalendar() ? (Input.addAttributes({
                "aria-expanded": "true"
            }, this.inputElement), attributes(this.inputElement, {
                "aria-activedescendant": "" + this.setActiveDescendant()
            })) : (Input.addAttributes({
                "aria-expanded": "false"
            }, this.inputElement), attributes(this.inputElement, {
                "aria-activedescendant": "null"
            }));
        }, DatePicker.prototype.errorClass = function() {
            var dateIdString = '*[id^="/id"]'.replace("/id", "" + +this.value), isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled");
            !isNullOrUndefined(this.value) && !(+new Date(+this.value).setMilliseconds(0) >= +this.min && +new Date(+this.value).setMilliseconds(0) <= +this.max) || !this.strictMode && "" !== this.inputElement.value && isNullOrUndefined(this.value) || isDisabledDate ? addClass([ this.inputWrapper.container ], "e-error") : removeClass([ this.inputWrapper.container ], "e-error");
        }, DatePicker.prototype.onPropertyChanged = function(newProp, oldProp) {
            this.format;
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "value":
                    "string" == typeof newProp.value && (newProp.value = this.checkDateValue(new Date("" + newProp.value)), 
                    this.setProperties({
                        value: newProp.value
                    }, !0)), this.previousElementValue = this.inputElement.value, isNullOrUndefined(this.value) && (Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
                    this.currentDate = new Date(new Date().setHours(0, 0, 0, 0))), this.updateInput(), 
                    this.changeTrigger(null);
                    break;

                  case "format":
                    this.updateInput();
                    break;

                  case "allowEdit":
                    this.setAllowEdit();
                    break;

                  case "placeholder":
                    Input.setPlaceholder(this.placeholder, this.inputElement);
                    break;

                  case "readonly":
                    Input.setReadonly(this.readonly, this.inputElement);
                    break;

                  case "enabled":
                    Input.setEnabled(this.enabled, this.inputElement), this.enabled ? this.inputElement.setAttribute("aria-disabled", "false") : this.inputElement.setAttribute("aria-disabled", "true"), 
                    this.bindEvents();
                    break;

                  case "locale":
                    this.globalize = new Internationalization(this.locale), this.l10n.setLocale(this.locale), 
                    this.setProperties({
                        placeholder: this.l10n.getConstant("placeholder")
                    }, !0), Input.setPlaceholder(this.placeholder, this.inputElement), this.updateInput();
                    break;

                  case "enableRtl":
                    Input.setEnableRtl(this.enableRtl, [ this.inputWrapper.container ]);
                    break;

                  case "zIndex":
                    this.setProperties({
                        zIndex: newProp.zIndex
                    }, !0);
                    break;

                  case "cssClass":
                    Input.setCssClass(newProp.cssClass, [ this.inputWrapper.container ]), this.popupWrapper && (this.popupWrapper.className += " " + newProp.cssClass);
                    break;

                  case "showClearButton":
                    Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper), 
                    this.bindClearEvent();
                    break;

                  case "strictMode":
                    this.updateInput();
                    break;

                  case "width":
                    this.setWidth(newProp.width);
                    break;

                  case "floatLabelType":
                    this.floatLabelType = newProp.floatLabelType, Input.removeFloating(this.inputWrapper), 
                    Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
                    break;

                  default:
                    this.calendarElement && _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
                }
                this.hide(null);
            }
        }, __decorate$35([ Property(null) ], DatePicker.prototype, "width", void 0), __decorate$35([ Property(null) ], DatePicker.prototype, "cssClass", void 0), 
        __decorate$35([ Property(!1) ], DatePicker.prototype, "strictMode", void 0), __decorate$35([ Property(null) ], DatePicker.prototype, "format", void 0), 
        __decorate$35([ Property(!0) ], DatePicker.prototype, "enabled", void 0), __decorate$35([ Property(!0) ], DatePicker.prototype, "showClearButton", void 0), 
        __decorate$35([ Property(!0) ], DatePicker.prototype, "allowEdit", void 0), __decorate$35([ Property(!1) ], DatePicker.prototype, "enableRtl", void 0), 
        __decorate$35([ Property(!1) ], DatePicker.prototype, "enablePersistence", void 0), 
        __decorate$35([ Property(1e3) ], DatePicker.prototype, "zIndex", void 0), __decorate$35([ Property(!1) ], DatePicker.prototype, "readonly", void 0), 
        __decorate$35([ Property(null) ], DatePicker.prototype, "placeholder", void 0), 
        __decorate$35([ Property("Never") ], DatePicker.prototype, "floatLabelType", void 0), 
        __decorate$35([ Event() ], DatePicker.prototype, "open", void 0), __decorate$35([ Event() ], DatePicker.prototype, "close", void 0), 
        __decorate$35([ Event() ], DatePicker.prototype, "blur", void 0), __decorate$35([ Event() ], DatePicker.prototype, "focus", void 0), 
        __decorate$35([ Event() ], DatePicker.prototype, "created", void 0), __decorate$35([ Event() ], DatePicker.prototype, "destroyed", void 0), 
        DatePicker = __decorate$35([ NotifyPropertyChanges ], DatePicker);
    }(Calendar), __extends$49 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$36 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, LEFTCALENDER = "e-left-calendar", RIGHTCALENDER = "e-right-calendar", ROOT$8 = "e-daterangepicker", ACTIVE$2 = "e-active", STARTDATE = "e-start-date", ENDDATE = "e-end-date", RANGEHOVER = "e-range-hover", DISABLED$6 = "e-disabled", CALENDAR = "e-calendar", FOCUSDATE = "e-focused-date", DAYSPAN = "e-day-span", DATEDISABLED = "e-date-disabled", ICONDISABLED = "e-icon-disabled", OVERLAY$1 = "e-overlay", LISTCLASS = cssClass.li, HOVER = "e-hover", Presets = function(_super) {
        function Presets() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$49(Presets, _super), __decorate$36([ Property() ], Presets.prototype, "label", void 0), 
        __decorate$36([ Property() ], Presets.prototype, "start", void 0), __decorate$36([ Property() ], Presets.prototype, "end", void 0), 
        Presets;
    }(ChildProperty), __extends$50 = (function(_super) {
        function DateRangePicker(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.isCustomRange = !1, _this.isCustomWindow = !1, _this.presetsItem = [], 
            _this.liCollections = [], _this.previousEleValue = "", _this.isKeyPopup = !1, _this.dateDisabled = !1, 
            _this.isRangeIconClicked = !1, _this.isMaxDaysClicked = !1, _this.disabledDays = [], 
            _this.preventBlur = !1, _this.preventFocus = !1, _this;
        }
        __extends$49(DateRangePicker, _super), DateRangePicker.prototype.render = function() {
            this.initialize(), this.setProperties({
                startDate: this.startValue
            }, !0), this.setProperties({
                endDate: this.endValue
            }, !0), this.setModelValue();
        }, DateRangePicker.prototype.preRender = function() {
            this.presetKeyConfig = {
                moveUp: "uparrow",
                moveDown: "downarrow",
                enter: "enter",
                tab: "tab",
                spacebar: "space"
            }, this.keyInputConfigs = {
                altDownArrow: "alt+downarrow",
                escape: "escape",
                enter: "enter",
                tab: "tab",
                altRightArrow: "alt+rightarrow",
                altLeftArrow: "alt+leftarrow"
            }, this.defaultConstant = {
                placeholder: "",
                startLabel: "Start Date",
                endLabel: "End Date",
                customRange: "Custom Range",
                applyText: "Apply",
                cancelText: "Cancel",
                selectedDays: "Selected Days",
                days: "days"
            }, this.isMobile = window.matchMedia("(max-width:550px)").matches, this.inputElement = this.element, 
            this.angularTag = null, "EJS-DATERANGEPICKER" === this.element.tagName && (this.angularTag = this.element.tagName, 
            this.inputElement = this.createElement("input"), this.element.appendChild(this.inputElement)), 
            this.cloneElement = this.element.cloneNode(!0), this.element.getAttribute("id") ? null !== this.angularTag && (this.inputElement.id = this.element.getAttribute("id") + "_input") : (this.element.id = getUniqueID("ej2-datetimepicker"), 
            null !== this.angularTag && attributes(this.inputElement, {
                id: this.element.id + "_input"
            })), this.initProperty(), _super.prototype.preRender.call(this), this.navNextFunction = this.navNextMonth.bind(this), 
            this.navPrevFunction = this.navPrevMonth.bind(this), this.deviceNavNextFunction = this.deviceNavNext.bind(this), 
            this.deviceNavPrevFunction = this.deviceNavPrevious.bind(this), this.initStartDate = this.checkDateValue(this.startValue), 
            this.initEndDate = this.checkDateValue(this.endValue), this.formElement = closest(this.element, "form");
        }, DateRangePicker.prototype.updateValue = function() {
            this.value && this.value.length > 0 ? (this.value[0] instanceof Date && !isNaN(+this.value[0]) ? (this.setProperties({
                startDate: this.value[0]
            }, !0), this.startValue = this.value[0]) : "string" == typeof this.value[0] ? 0 == +this.value[0] || isNaN(+new Date("" + this.value[0])) ? (this.startValue = null, 
            this.setValue()) : (this.setProperties({
                startDate: new Date("" + this.value[0])
            }, !0), this.startValue = new Date("" + this.value[0])) : (this.startValue = null, 
            this.setValue()), this.value[1] instanceof Date && !isNaN(+this.value[1]) ? (this.setProperties({
                endDate: this.value[1]
            }, !0), this.endValue = this.value[1]) : "string" == typeof this.value[1] ? 0 == +this.value[0] || isNaN(+new Date("" + this.value[0])) ? (this.setProperties({
                endDate: null
            }, !0), this.endValue = null, this.setValue()) : (this.setProperties({
                endDate: new Date("" + this.value[1])
            }, !0), this.endValue = new Date("" + this.value[1]), this.setValue()) : (this.setProperties({
                endDate: null
            }, !0), this.endValue = null, this.setValue())) : this.value && this.value.start ? (this.value.start instanceof Date && !isNaN(+this.value.start) ? (this.setProperties({
                startDate: this.value.start
            }, !0), this.startValue = this.value.start) : "string" == typeof this.value.start ? (this.setProperties({
                startDate: new Date("" + this.value.start)
            }, !0), this.startValue = new Date("" + this.value.start)) : (this.startValue = null, 
            this.setValue()), this.value.end instanceof Date && !isNaN(+this.value.end) ? (this.setProperties({
                endDate: this.value.end
            }, !0), this.endValue = this.value.end) : "string" == typeof this.value.end ? (this.setProperties({
                endDate: new Date("" + this.value.end)
            }, !0), this.endValue = new Date("" + this.value.end), this.setValue()) : (this.setProperties({
                endDate: null
            }, !0), this.endValue = null, this.setValue())) : isNullOrUndefined(this.value) && (this.endValue = this.checkDateValue(new Date("" + this.endDate)), 
            this.startValue = this.checkDateValue(new Date("" + this.startDate)), this.setValue());
        }, DateRangePicker.prototype.initProperty = function() {
            this.globalize = new Internationalization(this.locale), (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) && this.setProperties({
                firstDayOfWeek: this.globalize.getFirstDayOfWeek()
            }, !0), this.updateValue();
        }, DateRangePicker.prototype.initialize = function() {
            null !== this.angularTag && this.validationAttribute(this.element, this.inputElement), 
            this.checkHtmlAttributes(), merge(this.keyConfigs, {
                shiftTab: "shift+tab"
            }), this.setProperties({
                startDate: this.checkDateValue(new Date("" + this.startValue))
            }, !0), this.setProperties({
                endValue: this.checkDateValue(new Date("" + this.endValue))
            }, !0), this.setValue(), this.setProperties({
                min: this.checkDateValue(new Date("" + this.min))
            }, !0), this.setProperties({
                max: this.checkDateValue(new Date("" + this.max))
            }, !0), this.l10n = new L10n("daterangepicker", this.defaultConstant, this.locale), 
            this.l10n.setLocale(this.locale), this.setProperties({
                placeholder: this.placeholder || this.l10n.getConstant("placeholder")
            }, !0), this.processPresets(), this.createInput(), this.setRangeAllowEdit(), this.bindEvents();
        }, DateRangePicker.prototype.setRangeAllowEdit = function() {
            this.allowEdit ? this.readonly || this.inputElement.removeAttribute("readonly") : attributes(this.inputElement, {
                readonly: ""
            });
        }, DateRangePicker.prototype.validationAttribute = function(element, input) {
            var name = element.getAttribute("name") ? element.getAttribute("name") : element.getAttribute("id");
            input.setAttribute("name", name), element.removeAttribute("name");
            for (var attributes = [ "required", "aria-required", "form" ], i = 0; i < attributes.length; i++) if (!isNullOrUndefined(element.getAttribute(attributes[i]))) {
                var attr = element.getAttribute(attributes[i]);
                input.setAttribute(attributes[i], attr), element.removeAttribute(attributes[i]);
            }
        }, DateRangePicker.prototype.processPresets = function() {
            this.presetsItem = [];
            var i = 0;
            if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
                for (var _i = 0, _a = this.presets; _i < _a.length; _i++) {
                    var range = _a[_i], id = range.label.replace(/\s+/g, "") + "_" + ++i;
                    "string" == typeof range.end ? this.presetsItem.push({
                        id: id,
                        text: range.label,
                        end: new Date("" + range.end),
                        start: new Date("" + range.start)
                    }) : this.presetsItem.push({
                        id: id,
                        text: range.label,
                        start: range.start,
                        end: range.end
                    });
                }
                var startDate = isNullOrUndefined(this.startValue) ? null : new Date(+this.startValue), endDate = isNullOrUndefined(this.endValue) ? null : new Date(+this.endValue);
                this.presetsItem.push({
                    id: "custom_range",
                    text: this.l10n.getConstant("customRange"),
                    start: startDate,
                    end: endDate
                }), isNullOrUndefined(this.startValue) || isNullOrUndefined(this.endValue) || (this.isCustomRange = !0, 
                this.activeIndex = this.presetsItem.length - 1);
            }
        }, DateRangePicker.prototype.bindEvents = function() {
            this.enabled ? (EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler, this), 
            EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this), EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this), 
            EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this), this.showClearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this), 
            this.isMobile || (this.inputKeyboardModule = new KeyboardEvents(this.inputElement, {
                eventName: "keydown",
                keyAction: this.inputHandler.bind(this),
                keyConfigs: this.keyInputConfigs
            })), this.formElement && EventHandler.add(this.formElement, "reset", this.formResetHandler, this)) : (EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler), 
            EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler), EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler), 
            EventHandler.remove(this.inputElement, "change", this.inputChangeHandler), this.showClearButton && EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler), 
            this.isMobile || isNullOrUndefined(this.inputKeyboardModule) || this.inputKeyboardModule.destroy(), 
            this.formElement && EventHandler.remove(this.formElement, "reset", this.formResetHandler));
        }, DateRangePicker.prototype.updateHiddenInput = function() {
            if (this.firstHiddenChild && this.secondHiddenChild) {
                var format = {
                    type: "datetime",
                    skeleton: "yMd"
                };
                "string" == typeof this.startDate && (this.startDate = this.globalize.parseDate(this.startDate, format)), 
                "string" == typeof this.endDate && (this.endDate = this.globalize.parseDate(this.endDate, format)), 
                this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format) || this.inputElement.value, 
                this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format) || this.inputElement.value, 
                this.dispatchEvent(this.firstHiddenChild, "focusout"), this.dispatchEvent(this.firstHiddenChild, "change");
            }
        }, DateRangePicker.prototype.inputChangeHandler = function(e) {
            e.stopPropagation(), this.updateHiddenInput();
        }, DateRangePicker.prototype.bindClearEvent = function() {
            this.showClearButton && this.inputWrapper.clearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
        }, DateRangePicker.prototype.resetHandler = function(e) {
            this.valueType = this.value, e.preventDefault(), this.clear(), this.changeTrigger(e), 
            this.clearRange(), this.hide(e);
        }, DateRangePicker.prototype.formResetHandler = function(e) {
            this.formElement && e.target === this.formElement && (this.value = null, this.inputElement && (Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            attributes(this.inputElement, {
                "aria-invalid": "false"
            }), removeClass([ this.inputWrapper.container ], "e-error")));
        }, DateRangePicker.prototype.clear = function() {
            null !== this.startValue && (this.startValue = null), null !== this.endValue && (this.endValue = null), 
            this.value && this.value.start && this.setProperties({
                value: {
                    start: null,
                    end: null
                }
            }, !0), null !== this.value && this.value.length > 0 && this.setProperties({
                value: null
            }, !0), Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            isNullOrUndefined(this.applyButton) || (this.applyButton.disabled = this.applyButton.element.disabled = !0), 
            this.removeSelection();
        }, DateRangePicker.prototype.rangeIconHandler = function(e) {
            this.isMobile && this.element.setAttribute("readonly", "readonly"), e.preventDefault(), 
            this.targetElement = null, this.isPopupOpen() ? this.applyFunction(e) : (this.isRangeIconClicked = !0, 
            this.inputWrapper.container.children[0].focus(), this.show(null, e), this.isMobile || isNullOrUndefined(this.leftCalendar) || (this.isRangeIconClicked = !1, 
            this.calendarFocus(), this.isRangeIconClicked = !0), addClass([ this.inputWrapper.container ], [ "e-input-focus" ]));
        }, DateRangePicker.prototype.checkHtmlAttributes = function() {
            this.globalize = new Internationalization(this.locale);
            var attributes;
            attributes = [ "startDate", "endDate", "minDays", "maxDays", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type" ];
            for (var format = {
                format: this.format,
                type: "date",
                skeleton: "yMd"
            }, _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) switch (prop) {
                  case "disabled":
                    var disabled = "disabled" === this.inputElement.getAttribute(prop) || "" === this.inputElement.getAttribute(prop);
                    this.setProperties({
                        enabled: !disabled
                    }, !0);
                    break;

                  case "readonly":
                    var readonly = "readonly" === this.inputElement.getAttribute(prop) || "" === this.inputElement.getAttribute(prop);
                    this.setProperties({
                        readonly: readonly
                    }, !0);
                    break;

                  case "placeholder":
                    (isNullOrUndefined(this.placeholder) || "" === this.placeholder.trim()) && this.setProperties({
                        placeholder: this.inputElement.getAttribute(prop)
                    }, !0);
                    break;

                  case "style":
                    this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
                    break;

                  case "min":
                    if (isNullOrUndefined(this.min) || +this.min == +new Date(1900, 0, 1)) {
                        var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                        this.setProperties(setValue(prop, dateValue, {}), !0);
                    }
                    break;

                  case "name":
                    this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
                    break;

                  case "max":
                    if (isNullOrUndefined(this.max) || +this.max == +new Date(2099, 11, 31)) {
                        dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                        this.setProperties(setValue(prop, dateValue, {}), !0);
                    }
                    break;

                  case "startDate":
                    if (isNullOrUndefined(this.startDate)) {
                        dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                        this.startValue = dateValue, this.setValue();
                    }
                    break;

                  case "endDate":
                    if (isNullOrUndefined(this.endDate)) {
                        dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                        this.endValue = dateValue, this.setValue();
                    }
                    break;

                  case "minDays":
                    isNullOrUndefined(this.minDays) && this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), !0);
                    break;

                  case "maxDays":
                    isNullOrUndefined(this.maxDays) && this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), !0);
                    break;

                  case "type":
                    "text" !== this.inputElement.getAttribute(prop) && this.inputElement.setAttribute("type", "text");
                }
            }
        }, DateRangePicker.prototype.createPopup = function() {
            for (var i = 0; i < this.presetsItem.length; i++) i !== this.presetsItem.length - 1 && "custom_range" === this.presetsItem[i].id && this.presetsItem.splice(i, 1);
            this.activeIndex = this.presetsItem.length - 1, this.isCustomRange = !0;
            for (i = 0; i <= this.presetsItem.length - 2; i++) {
                var startDate = this.presetsItem[i].start, endDate = this.presetsItem[i].end;
                this.startValue && this.endValue && +startDate.setMilliseconds(0) == +this.startValue.setMilliseconds(0) && +endDate.setMilliseconds(0) == +this.endValue.setMilliseconds(0) && (this.activeIndex = i, 
                this.isCustomRange = !1);
            }
            this.popupWrapper = createElement("div", {
                id: this.element.id + "_popup",
                className: ROOT$8 + " e-popup"
            });
            var isPreset = !this.isCustomRange || this.isMobile;
            !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset ? (this.isCustomWindow = !1, 
            this.createPresets(), this.listRippleEffect(), this.renderPopup()) : (this.isCustomWindow = !0, 
            this.renderControl());
        }, DateRangePicker.prototype.renderControl = function() {
            this.createControl(), this.bindCalendarEvents(), this.updateRange(this.isMobile ? [ this.calendarElement ] : [ this.leftCalendar, this.rightCalendar ]), 
            isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) || this.disabledDateRender(), 
            this.updateHeader();
        }, DateRangePicker.prototype.clearCalendarEvents = function() {
            EventHandler.clearEvents(this.leftCalPrevIcon), EventHandler.clearEvents(this.leftCalNextIcon), 
            EventHandler.clearEvents(this.rightCalPrevIcon), EventHandler.clearEvents(this.rightCalNextIcon);
        }, DateRangePicker.prototype.updateNavIcons = function() {
            "Year" !== this.currentView() && "Decade" !== this.currentView() && (this.previousIcon = this.rightCalPrevIcon, 
            this.nextIcon = this.leftCalNextIcon, this.nextIconHandler(this.compareMonths(new Date("" + this.leftCalCurrentDate), this.rightCalCurrentDate) < 1), 
            this.previousIconHandler(this.compareMonths(new Date("" + this.leftCalCurrentDate), this.rightCalCurrentDate) < 1));
        }, DateRangePicker.prototype.calendarIconEvent = function() {
            this.clearCalendarEvents(), this.leftCalPrevIcon && !this.leftCalPrevIcon.classList.contains(DISABLED$6) && EventHandler.add(this.leftCalPrevIcon, "mousedown", this.navPrevFunction), 
            this.leftCalNextIcon && !this.leftCalNextIcon.classList.contains(DISABLED$6) && EventHandler.add(this.leftCalNextIcon, "mousedown", this.navNextFunction), 
            this.rightCalPrevIcon && !this.rightCalPrevIcon.classList.contains(DISABLED$6) && EventHandler.add(this.rightCalPrevIcon, "mousedown", this.navPrevFunction), 
            this.rightCalNextIcon && !this.rightCalNextIcon.classList.contains(DISABLED$6) && EventHandler.add(this.rightCalNextIcon, "mousedown", this.navNextFunction);
        }, DateRangePicker.prototype.bindCalendarEvents = function() {
            this.isMobile ? (this.deviceCalendarEvent(), EventHandler.add(this.startButton.element, "click", this.deviceHeaderClick, this), 
            EventHandler.add(this.endButton.element, "click", this.deviceHeaderClick, this)) : (this.updateNavIcons(), 
            this.calendarIconEvent(), this.calendarIconRipple(), this.headerTitleElement = this.popupObj.element.querySelector(".e-right-calendar .e-header .e-title"), 
            this.headerTitleElement = this.popupObj.element.querySelector(".e-left-calendar .e-header .e-title"), 
            this.leftKeyboardModule = new KeyboardEvents(this.leftCalendar, {
                eventName: "keydown",
                keyAction: this.keyInputHandler.bind(this),
                keyConfigs: this.keyConfigs
            }), this.rightKeyboardModule = new KeyboardEvents(this.rightCalendar, {
                eventName: "keydown",
                keyAction: this.keyInputHandler.bind(this),
                keyConfigs: this.keyConfigs
            })), this.bindCalendarCellEvents(), this.removeFocusedDate();
        }, DateRangePicker.prototype.calendarIconRipple = function() {
            rippleEffect(this.leftCalPrevIcon, {
                selector: ".e-prev",
                duration: 400,
                isCenterRipple: !0
            }), rippleEffect(this.leftCalNextIcon, {
                selector: ".e-next",
                duration: 400,
                isCenterRipple: !0
            }), rippleEffect(this.rightCalPrevIcon, {
                selector: ".e-prev",
                duration: 400,
                isCenterRipple: !0
            }), rippleEffect(this.rightCalNextIcon, {
                selector: ".e-next",
                duration: 400,
                isCenterRipple: !0
            });
        }, DateRangePicker.prototype.deviceCalendarEvent = function() {
            EventHandler.clearEvents(this.nextIcon), EventHandler.clearEvents(this.previousIcon), 
            rippleEffect(this.nextIcon, {
                selector: ".e-prev",
                duration: 400,
                isCenterRipple: !0
            }), rippleEffect(this.previousIcon, {
                selector: ".e-next",
                duration: 400,
                isCenterRipple: !0
            }), this.nextIcon && !this.nextIcon.classList.contains(DISABLED$6) && EventHandler.add(this.nextIcon, "mousedown", this.deviceNavNextFunction), 
            this.previousIcon && !this.previousIcon.classList.contains(DISABLED$6) && EventHandler.add(this.previousIcon, "mousedown", this.deviceNavPrevFunction);
        }, DateRangePicker.prototype.deviceNavNext = function(e) {
            var calendar = closest(e.target, "." + CALENDAR);
            this.updateDeviceCalendar(calendar), this.navigateNext(e), this.deviceNavigation();
        }, DateRangePicker.prototype.deviceNavPrevious = function(e) {
            var calendar = closest(e.target, "." + CALENDAR);
            this.updateDeviceCalendar(calendar), this.navigatePrevious(e), this.deviceNavigation();
        }, DateRangePicker.prototype.updateDeviceCalendar = function(calendar) {
            calendar && (this.previousIcon = calendar.querySelector(".e-prev"), this.nextIcon = calendar.querySelector(".e-next"), 
            this.calendarElement = calendar, this.deviceCalendar = calendar, this.contentElement = calendar.querySelector(".e-content"), 
            this.tableBodyElement = select(".e-content tbody", calendar), this.table = calendar.querySelector(".e-content").getElementsByTagName("table")[0], 
            this.headerTitleElement = calendar.querySelector(".e-header .e-title"), this.headerElement = calendar.querySelector(".e-header"));
        }, DateRangePicker.prototype.deviceHeaderClick = function(event) {
            if (event.currentTarget.classList.contains("e-start-btn") && !isNullOrUndefined(this.startValue)) {
                this.endButton.element.classList.remove(ACTIVE$2), this.startButton.element.classList.add(ACTIVE$2);
                var calendar = this.popupObj.element.querySelector("." + CALENDAR);
                this.updateDeviceCalendar(calendar), isNullOrUndefined(this.calendarElement.querySelector(".e-start-date:not(.e-other-month)")) && (this.currentDate = new Date(+this.startValue), 
                remove(this.tableBodyElement), this.renderMonths(), this.deviceNavigation()), this.removeClassDisabled();
            } else if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
                this.startButton.element.classList.remove(ACTIVE$2), this.endButton.element.classList.add(ACTIVE$2);
                calendar = this.popupObj.element.querySelector("." + CALENDAR);
                this.updateDeviceCalendar(calendar), isNullOrUndefined(this.calendarElement.querySelector(".e-end-date:not(.e-other-month)")) && (this.currentDate = new Date(+this.endValue), 
                remove(this.tableBodyElement), this.renderMonths(), this.deviceNavigation()), this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR)), 
                this.selectableDates();
            }
        }, DateRangePicker.prototype.inputFocusHandler = function() {
            this.preventBlur = !1;
            var focusArguments = {
                model: this
            };
            this.preventFocus || (this.preventFocus = !0, this.trigger("focus", focusArguments)), 
            this.updateHiddenInput();
        }, DateRangePicker.prototype.inputBlurHandler = function(e) {
            if (!this.preventBlur) {
                var value = this.inputElement.value;
                if (isNullOrUndefined(this.presetsItem) || this.presetsItem.length > 0 && this.previousEleValue !== this.inputElement.value && (this.activeIndex = this.presetsItem.length - 1, 
                this.isCustomRange = !0), !isNullOrUndefined(value) && "" !== value.trim()) {
                    var range = value.split(" " + this.separator + " ");
                    if (range.length > 1) {
                        var dateOptions = {
                            format: this.format,
                            type: "date",
                            skeleton: "yMd"
                        }, startDate = this.globalize.parseDate(range[0].trim(), dateOptions), endDate = this.globalize.parseDate(range[1].trim(), dateOptions);
                        if (!(isNullOrUndefined(startDate) || isNaN(+startDate) || isNullOrUndefined(endDate) || isNaN(+endDate))) {
                            if (this.startValue = startDate, this.endValue = endDate, this.setValue(), this.refreshControl(), 
                            this.changeTrigger(e), !this.preventBlur && document.activeElement !== this.inputElement) {
                                this.preventFocus = !1;
                                var blurArguments = {
                                    model: this
                                };
                                this.trigger("blur", blurArguments);
                            }
                            return void this.updateHiddenInput();
                        }
                        this.strictMode || (this.startValue = null, this.endValue = null, this.setValue());
                    } else this.strictMode || (this.startValue = null, this.endValue = null, this.setValue());
                }
                if (this.strictMode ? (Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
                this.updateInput()) : (this.clearRange(), this.startValue = null, this.endValue = null, 
                this.setValue()), this.errorClass(), this.changeTrigger(e), !this.preventBlur && document.activeElement !== this.inputElement) {
                    this.preventFocus = !1;
                    blurArguments = {
                        model: this
                    };
                    this.trigger("blur", blurArguments);
                }
            }
            this.updateHiddenInput();
        }, DateRangePicker.prototype.clearRange = function() {
            this.previousStartValue = this.previousEndValue = null, this.currentDate = null;
        }, DateRangePicker.prototype.errorClass = function() {
            var inputStr = this.inputElement.value.trim();
            (isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) && "" !== inputStr || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || this.startValue && this.isDateDisabled(this.startValue) || this.endValue && this.isDateDisabled(this.endValue)) && "" !== inputStr ? (addClass([ this.inputWrapper.container ], "e-error"), 
            attributes(this.inputElement, {
                "aria-invalid": "true"
            })) : this.inputWrapper && (removeClass([ this.inputWrapper.container ], "e-error"), 
            attributes(this.inputElement, {
                "aria-invalid": "false"
            }));
        }, DateRangePicker.prototype.keyCalendarUpdate = function(isLeftCalendar, ele) {
            return this.removeFocusedDate(), isLeftCalendar ? (this.leftCalCurrentDate = new Date(+this.currentDate), 
            ele = this.leftCalendar) : (this.rightCalCurrentDate = new Date(+this.currentDate), 
            ele = this.rightCalendar), this.updateCalendarElement(ele), this.table.focus(), 
            ele;
        }, DateRangePicker.prototype.navInCalendar = function(e, isLeftCalendar, leftLimit, rightLimit, ele) {
            var date, max, view = this.getViewNumber(this.currentView()), min = this.min;
            switch (max = isNullOrUndefined(this.maxDays) || !this.isMaxDaysClicked || isNullOrUndefined(this.startValue) ? this.max : new Date(new Date(+this.startValue).setDate(this.startValue.getDate() + (this.maxDays - 1))), 
            e.action) {
              case "moveRight":
                date = new Date(+this.currentDate), this.addDay(date, 1, e, max, min), isLeftCalendar && +date == +rightLimit && (ele = this.keyCalendarUpdate(!1, ele)), 
                this.KeyboardNavigate(1, view, e, max, min), this.keyNavigation(ele, e);
                break;

              case "moveLeft":
                date = new Date(+this.currentDate), this.addDay(date, -1, e, max, min), isLeftCalendar || +date == +leftLimit && (ele = this.keyCalendarUpdate(!0, ele)), 
                this.KeyboardNavigate(-1, view, e, max, min), this.keyNavigation(ele, e);
                break;

              case "moveUp":
                0 === view ? (date = new Date(+this.currentDate), this.addDay(date, -7, e, max, min), 
                +date <= +leftLimit && !isLeftCalendar && (ele = this.keyCalendarUpdate(!0, ele)), 
                this.KeyboardNavigate(-7, view, e, max, min)) : this.KeyboardNavigate(-4, view, e, this.max, this.min), 
                this.keyNavigation(ele, e);
                break;

              case "moveDown":
                0 === view ? (date = new Date(+this.currentDate), this.addDay(date, 7, e, max, min), 
                isLeftCalendar && +date >= +rightLimit && (ele = this.keyCalendarUpdate(!1, ele)), 
                this.KeyboardNavigate(7, view, e, max, min)) : this.KeyboardNavigate(4, view, e, this.max, this.min), 
                this.keyNavigation(ele, e);
                break;

              case "home":
                this.currentDate = this.firstDay(this.currentDate), remove(this.tableBodyElement), 
                0 === view ? this.renderMonths(e) : 1 === view ? this.renderYears(e) : this.renderDecades(e), 
                this.keyNavigation(ele, e);
                break;

              case "end":
                this.currentDate = this.lastDay(this.currentDate, view), remove(this.tableBodyElement), 
                0 === view ? this.renderMonths(e) : 1 === view ? this.renderYears(e) : this.renderDecades(e), 
                this.keyNavigation(ele, e);
            }
        }, DateRangePicker.prototype.keyInputHandler = function(e, value) {
            var date, view = this.getViewNumber(this.currentView()), rightDateLimit = new Date(this.rightCalCurrentDate.getFullYear(), this.rightCalCurrentDate.getMonth(), 1), leftDateLimit = new Date(this.leftCalCurrentDate.getFullYear(), this.leftCalCurrentDate.getMonth() + 1, 0), ele = closest(e.target, "." + RIGHTCALENDER), isLeftCalendar = (ele = isNullOrUndefined(ele) ? this.leftCalendar : ele).classList.contains(LEFTCALENDER);
            this.updateCalendarElement(ele);
            var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected"), focusedDate = ele.querySelector("tr td." + FOCUSDATE), startDate = ele.querySelector("tr td." + STARTDATE), endDate = ele.querySelector("tr td." + ENDDATE), depthValue = this.getViewNumber(this.depth), levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue, leftCalendar = closest(e.target, "." + LEFTCALENDER), rightCalendar = closest(e.target, "." + RIGHTCALENDER), presetElement = closest(e.target, ".e-presets");
            switch (isNullOrUndefined(focusedDate) ? isNullOrUndefined(endDate) || this.dateDisabled ? isNullOrUndefined(startDate) || this.dateDisabled ? this.dateDisabled || this.currentDate.setDate(1) : this.currentDate = new Date(+this.startValue) : this.currentDate = new Date(+this.endValue) : this.currentDate = this.currentDate, 
            this.effect = "", e.action) {
              case "altUpArrow":
                this.isPopupOpen() && (this.hide(e), this.preventFocus = !0, this.inputElement.focus(), 
                addClass([ this.inputWrapper.container ], [ "e-input-focus" ]));
                break;

              case "select":
                if (0 === view) {
                    var element = isNullOrUndefined(focusedDate) ? startDate : focusedDate;
                    isNullOrUndefined(element) || element.classList.contains(DISABLED$6) || this.selectRange(null, element);
                } else (isNullOrUndefined(selectedDate) || levelRestrict) && isNullOrUndefined(focusedDate) || (isNullOrUndefined(this.value) || (value = this.calendarElement.classList.contains(LEFTCALENDER) ? this.startDate : this.endDate), 
                this.controlDown = e, this.contentClick(null, --view, focusedDate || selectedDate, value));
                e.preventDefault();
                break;

              case "controlHome":
                var yearDate = new Date(this.currentDate.getFullYear(), 0, 1);
                !isLeftCalendar && +yearDate < +leftDateLimit && (ele = this.keyCalendarUpdate(!0, ele)), 
                this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 0, 1)), this.keyNavigation(ele, e);
                break;

              case "altRightArrow":
                isNullOrUndefined(leftCalendar) ? isNullOrUndefined(rightCalendar) ? isNullOrUndefined(presetElement) || this.cancelButton.element.focus() : isNullOrUndefined(this.presetElement) ? this.cancelButton.element.focus() : (this.presetElement.focus(), 
                this.removeFocusedDate()) : this.rightCalendar.children[1].firstElementChild.focus(), 
                e.preventDefault();
                break;

              case "altLeftArrow":
                isNullOrUndefined(leftCalendar) ? isNullOrUndefined(rightCalendar) || this.leftCalendar.children[1].firstElementChild.focus() : !0 !== this.applyButton.element.disabled ? this.applyButton.element.focus() : this.cancelButton.element.focus(), 
                e.preventDefault();
                break;

              case "controlUp":
                this.calendarElement.classList.contains(LEFTCALENDER), this.calendarNavigation(e, this.calendarElement), 
                e.preventDefault();
                break;

              case "controlDown":
                (isNullOrUndefined(selectedDate) || levelRestrict) && isNullOrUndefined(focusedDate) || (isNullOrUndefined(this.value) || (value = this.calendarElement.classList.contains(LEFTCALENDER) ? this.startDate : this.endDate), 
                this.controlDown = e, this.contentClick(null, --view, selectedDate || focusedDate, value)), 
                e.preventDefault();
                break;

              case "controlEnd":
                yearDate = new Date(this.currentDate.getFullYear(), 11, 31), isLeftCalendar && +yearDate > +rightDateLimit && (ele = this.keyCalendarUpdate(!1, ele)), 
                this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 11, 31)), this.keyNavigation(ele, e);
                break;

              case "pageUp":
                date = new Date(+this.currentDate), this.addMonths(date, -1), !isLeftCalendar && +date <= +leftDateLimit && (ele = this.keyCalendarUpdate(!0, ele)), 
                this.addMonths(this.currentDate, -1), this.navigateTo("Month", this.currentDate), 
                this.keyNavigation(ele, e);
                break;

              case "pageDown":
                date = new Date(+this.currentDate), this.addMonths(date, 1), isLeftCalendar && +date >= +rightDateLimit && (ele = this.keyCalendarUpdate(!1, ele)), 
                this.addMonths(this.currentDate, 1), this.navigateTo("Month", this.currentDate), 
                this.keyNavigation(ele, e);
                break;

              case "shiftPageUp":
                date = new Date(+this.currentDate), this.addYears(date, -1), !isLeftCalendar && +date <= +leftDateLimit && (ele = this.keyCalendarUpdate(!0, ele)), 
                this.addYears(this.currentDate, -1), this.navigateTo("Month", this.currentDate), 
                this.keyNavigation(ele, e);
                break;

              case "shiftPageDown":
                date = new Date(+this.currentDate), this.addYears(date, 1), isLeftCalendar && +date >= +rightDateLimit && (ele = this.keyCalendarUpdate(!1, ele)), 
                this.addYears(this.currentDate, 1), this.navigateTo("Month", this.currentDate), 
                this.keyNavigation(ele, e);
                break;

              case "shiftTab":
                isNullOrUndefined(this.presetElement) || (this.presetElement.setAttribute("tabindex", "0"), 
                this.presetElement.focus(), this.removeFocusedDate()), e.preventDefault();
                break;

              case "spacebar":
                this.applyButton && !this.applyButton.disabled && this.applyFunction(e);
                break;

              default:
                this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele), this.checkMinMaxDays();
            }
            this.presetHeight();
        }, DateRangePicker.prototype.keyNavigation = function(calendar, e) {
            this.bindCalendarCellEvents(calendar), calendar.classList.contains(LEFTCALENDER) ? this.leftCalCurrentDate = new Date(+this.currentDate) : this.rightCalCurrentDate = new Date(+this.currentDate), 
            this.updateNavIcons(), this.calendarIconEvent(), this.updateRange([ calendar ]), 
            this.dateDisabled = this.isDateDisabled(this.currentDate), e.preventDefault();
        }, DateRangePicker.prototype.inputHandler = function(e) {
            switch (e.action) {
              case "altDownArrow":
                this.isPopupOpen() || ("" === this.inputElement.value && (this.clear(), this.changeTrigger(e), 
                this.clearRange()), this.show(null, e), this.isRangeIconClicked = !1, this.isMobile || isNullOrUndefined(this.leftCalendar) || this.calendarFocus(), 
                this.isKeyPopup = !0);
                break;

              case "escape":
                this.isPopupOpen() && this.hide(e);
                break;

              case "enter":
                document.activeElement === this.inputElement && (this.inputBlurHandler(e), this.hide(e));
                break;

              case "tab":
                document.activeElement === this.inputElement && this.isPopupOpen() && (this.hide(e), 
                e.preventDefault());
            }
        }, DateRangePicker.prototype.bindCalendarCellEvents = function(calendar) {
            for (var _i = 0, tdCells_1 = calendar ? calendar.querySelectorAll(".e-calendar td") : this.popupObj.element.querySelectorAll(".e-calendar td"); _i < tdCells_1.length; _i++) {
                var cell = tdCells_1[_i];
                EventHandler.clearEvents(cell);
                cell.classList.contains(DISABLED$6) || cell.classList.contains(DATEDISABLED) || cell.classList.contains("e-week-number") || (this.isMobile || EventHandler.add(cell, "mouseover", this.hoverSelection, this), 
                EventHandler.add(cell, "mousedown", this.selectRange, this));
            }
        }, DateRangePicker.prototype.removeFocusedDate = function() {
            var focusedDate, isDate = !isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.endValue);
            if (focusedDate = this.popupObj.element.querySelectorAll(".e-calendar ." + FOCUSDATE), 
            this.leftCalendar && this.leftCalendar.querySelector(".e-content").classList.contains("e-month") && this.rightCalendar && this.rightCalendar.querySelector(".e-content").classList.contains("e-month") || this.calendarElement && this.calendarElement.querySelector(".e-content").classList.contains("e-month")) for (var _i = 0, focusedDate_1 = focusedDate; _i < focusedDate_1.length; _i++) {
                var ele = focusedDate_1[_i];
                (!ele.classList.contains("e-today") || ele.classList.contains("e-today") && isDate) && (ele.classList.remove(FOCUSDATE), 
                ele.classList.contains(STARTDATE) || ele.classList.contains(ENDDATE) || ele.removeAttribute("aria-label"));
            }
        }, DateRangePicker.prototype.hoverSelection = function(event, element) {
            var currentElement = element || event.currentTarget, currentDate = this.getIdValue(null, currentElement);
            if (!isNullOrUndefined(this.startValue) && +this.startValue >= +this.min && +this.startValue <= +this.max && (!this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue) && isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue))) for (var _i = 0, tdCells_2 = this.popupObj.element.querySelectorAll(".e-calendar td"); _i < tdCells_2.length; _i++) {
                var ele = tdCells_2[_i], isDisabledCell = !ele.classList.contains(DISABLED$6) || ele.classList.contains(DATEDISABLED);
                if (!ele.classList.contains("e-week-number") && isDisabledCell) {
                    var eleDate = this.getIdValue(null, ele), startDateValue = new Date(+this.startValue);
                    new Date(+eleDate).setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) && +eleDate <= +currentDate ? addClass([ ele ], RANGEHOVER) : removeClass([ ele ], [ RANGEHOVER ]);
                }
            }
        }, DateRangePicker.prototype.updateRange = function(elementCollection) {
            if (!isNullOrUndefined(this.startValue)) for (var _i = 0, elementCollection_1 = elementCollection; _i < elementCollection_1.length; _i++) for (var _a = 0, tdCells_3 = elementCollection_1[_i].querySelectorAll(".e-calendar td"); _a < tdCells_3.length; _a++) {
                var ele = tdCells_3[_a];
                if (!ele.classList.contains("e-week-number") && !ele.classList.contains(DISABLED$6)) {
                    var eleDate = this.getIdValue(null, ele), eleDateValue = this.getIdValue(null, ele);
                    if (isNullOrUndefined(this.endValue) ? removeClass([ ele ], [ RANGEHOVER ]) : "Month" === this.currentView() && +eleDateValue.setHours(0, 0, 0, 0) >= +new Date(+this.startValue).setHours(0, 0, 0, 0) && +eleDateValue.setHours(0, 0, 0, 0) <= +new Date(+this.endValue).setHours(0, 0, 0, 0) && +new Date(+this.startValue).setHours(0, 0, 0, 0) != +new Date(+this.endValue).setHours(0, 0, 0, 0) && +new Date(+this.startValue).setHours(0, 0, 0, 0) >= +this.min && +new Date(+this.endValue).setHours(0, 0, 0, 0) <= +this.max && !this.isDateDisabled(this.startValue) && !this.isDateDisabled(this.endValue) && addClass([ ele ], RANGEHOVER), 
                    !ele.classList.contains("e-other-month")) {
                        var startDateValue = new Date(+this.startValue), eleDateValue_1 = new Date(+eleDate);
                        "Month" === this.currentView() && +eleDateValue_1.setHours(0, 0, 0, 0) == +startDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) >= +startDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !this.isDateDisabled(this.startValue) && !this.isDateDisabled(this.endValue) && (addClass([ ele ], [ STARTDATE, "e-selected" ]), 
                        this.addSelectedAttributes(ele, this.startValue, !0));
                        var endDateValue = new Date(+this.endValue);
                        "Month" === this.currentView() && !isNullOrUndefined(this.endValue) && +eleDateValue_1.setHours(0, 0, 0, 0) == +endDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) <= +endDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !this.isDateDisabled(this.startValue) && !this.isDateDisabled(this.endValue) && (addClass([ ele ], [ ENDDATE, "e-selected" ]), 
                        this.addSelectedAttributes(ele, this.startValue, !1)), +eleDate != +this.startValue || isNullOrUndefined(this.endValue) || +eleDate != +this.endValue || this.addSelectedAttributes(ele, this.endValue, !1, !0);
                    }
                }
            }
        }, DateRangePicker.prototype.checkMinMaxDays = function() {
            (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) && (this.isMobile ? this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR)) : (this.updateMinMaxDays(this.popupObj.element.querySelector("." + LEFTCALENDER)), 
            this.updateMinMaxDays(this.popupObj.element.querySelector("." + RIGHTCALENDER))));
        }, DateRangePicker.prototype.rangeArgs = function(e) {
            var inputValue, range, startDate = isNullOrUndefined(this.startValue) ? null : this.globalize.formatDate(this.startValue, {
                format: this.format,
                type: "date",
                skeleton: "yMd"
            }), endDate = isNullOrUndefined(this.endValue) ? null : this.globalize.formatDate(this.endValue, {
                format: this.format,
                type: "date",
                skeleton: "yMd"
            });
            isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) ? (inputValue = "", 
            range = 0) : (inputValue = startDate + " " + this.separator + " " + endDate, range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / 864e5)) + 1);
            return {
                value: this.value,
                startDate: this.startValue,
                endDate: this.endValue,
                daySpan: range,
                event: e || null,
                element: this.element,
                isInteracted: !isNullOrUndefined(e),
                text: inputValue
            };
        }, DateRangePicker.prototype.otherMonthSelect = function(ele, isStartDate, sameDate) {
            var value = +this.getIdValue(null, ele), dateIdString = '*[id^="/id"]:not(.e-other-month)'.replace("/id", "" + value), tdCell = this.popupObj && this.popupObj.element.querySelector(dateIdString);
            isNullOrUndefined(tdCell) || (isStartDate ? (addClass([ tdCell ], [ STARTDATE, "e-selected" ]), 
            this.addSelectedAttributes(tdCell, this.startValue, !0)) : (addClass([ tdCell ], [ ENDDATE, "e-selected" ]), 
            this.addSelectedAttributes(tdCell, this.endValue, !0)), sameDate && this.addSelectedAttributes(ele, this.endValue, !1, !0));
        }, DateRangePicker.prototype.selectRange = function(event, element) {
            var leftCalendar, rightCalendar;
            event && event.preventDefault();
            var date;
            date = isNullOrUndefined(event) ? this.getIdValue(null, element) : this.getIdValue(event, null), 
            isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) ? this.isMobile && this.startButton.element.classList.contains(ACTIVE$2) && this.removeSelection() : (!this.isMobile || this.isMobile && !this.endButton.element.classList.contains(ACTIVE$2)) && this.removeSelection();
            var ele = element || event.currentTarget;
            if (isNullOrUndefined(this.startValue)) isNullOrUndefined(this.previousStartValue) || (date.setHours(this.previousStartValue.getHours()), 
            date.setMinutes(this.previousStartValue.getMinutes()), date.setSeconds(this.previousStartValue.getSeconds())), 
            this.startValue = new Date("" + date), this.endValue = null, this.setValue(), addClass([ ele ], STARTDATE), 
            this.addSelectedAttributes(ele, this.startValue, !0), ele.classList.contains("e-other-month") && this.otherMonthSelect(ele, !0), 
            this.checkMinMaxDays(), this.applyButton.disabled = !0, this.applyButton.element.disabled = !0, 
            this.isMobile && (this.endButton.element.classList.add(ACTIVE$2), this.startButton.element.classList.remove(ACTIVE$2), 
            this.endButton.element.removeAttribute("disabled"), this.selectableDates()), this.trigger("select", this.rangeArgs(event)); else if (+date == +this.startValue || +date > +this.startValue) {
                if (+date == +this.startValue && !isNullOrUndefined(this.minDays) && this.minDays > 1) return;
                this.endValue = null, this.setValue(), (this.isMobile || element) && this.hoverSelection(event, element), 
                isNullOrUndefined(this.previousEndValue) || (date.setHours(this.previousEndValue.getHours()), 
                date.setMinutes(this.previousEndValue.getMinutes()), date.setSeconds(this.previousEndValue.getSeconds())), 
                this.endValue = new Date("" + date), this.setValue();
                var endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
                if (this.isMobile) {
                    this.startButton.element.classList.remove(ACTIVE$2), this.endButton.element.classList.add(ACTIVE$2);
                    for (var _i = 0, endEle_1 = endEle; _i < endEle_1.length; _i++) {
                        var ele_1 = endEle_1[_i];
                        ele_1.removeAttribute("aria-label"), ele_1.classList.contains(STARTDATE) ? (this.addSelectedAttributes(ele_1, this.startValue, !0), 
                        removeClass([ ele_1 ], [ ENDDATE ])) : (ele_1.setAttribute("aria-selected", "false"), 
                        removeClass([ ele_1 ], [ ENDDATE, "e-selected" ]));
                    }
                }
                addClass([ ele ], ENDDATE), +this.endValue == +this.startValue ? this.addSelectedAttributes(ele, this.endValue, !1, !0) : this.addSelectedAttributes(ele, this.endValue, !1), 
                ele.classList.contains("e-other-month") && (+this.endValue == +this.startValue ? this.otherMonthSelect(ele, !1, !0) : this.otherMonthSelect(ele, !1));
                for (var _a = 0, endEle_2 = endEle = this.popupObj.element.querySelectorAll("." + ENDDATE); _a < endEle_2.length; _a++) {
                    var ele_2 = endEle_2[_a];
                    ele_2.classList.contains(STARTDATE) && removeClass([ ele_2 ], [ RANGEHOVER ]);
                }
                this.applyButton.disabled = !1, this.applyButton.element.disabled = !1, this.isMobile || this.removeClassDisabled(), 
                this.disabledDateRender(), this.trigger("select", this.rangeArgs(event));
            } else +date < +this.startValue && (this.removeClassDisabled(), this.startValue = new Date("" + date), 
            this.setValue(), this.removeSelectedAttributes(), removeClass(this.popupObj.element.querySelectorAll("." + STARTDATE), [ STARTDATE, "e-selected" ]), 
            addClass([ ele ], STARTDATE), this.addSelectedAttributes(ele, this.startValue, !0), 
            ele.classList.contains("e-other-month") && this.otherMonthSelect(ele, !0), this.checkMinMaxDays());
            event && (leftCalendar = closest(event.target, "." + LEFTCALENDER)), isNullOrUndefined(leftCalendar) ? (event && (rightCalendar = event && closest(event.target, "." + RIGHTCALENDER)), 
            isNullOrUndefined(rightCalendar) || this.rightCalendar.children[1].firstElementChild.focus()) : this.leftCalendar.children[1].firstElementChild.focus(), 
            addClass([ ele ], "e-selected"), this.updateHeader(), this.removeFocusedDate();
        }, DateRangePicker.prototype.selectableDates = function() {
            if (!isNullOrUndefined(this.startValue)) {
                var tdCells = this.calendarElement.querySelectorAll(".e-calendar td"), isStartDate = !1;
                if ("Month" === this.currentView()) {
                    for (var _i = 0, tdCells_4 = tdCells; _i < tdCells_4.length; _i++) {
                        if (!(ele = tdCells_4[_i]).classList.contains(STARTDATE) && !ele.classList.contains("e-week-number") && !ele.classList.contains(DISABLED$6)) {
                            if (+this.getIdValue(null, ele) < +this.startValue) {
                                addClass([ ele ], [ DATEDISABLED, DISABLED$6, OVERLAY$1 ]), EventHandler.clearEvents(ele);
                                continue;
                            }
                            break;
                        }
                        if (ele.classList.contains(STARTDATE) && !ele.classList.contains("e-other-month")) {
                            isStartDate = !0;
                            break;
                        }
                    }
                    isStartDate && (this.previousIcon.classList.contains(DISABLED$6) || addClass([ this.previousIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]));
                } else {
                    for (var _a = 0, tdCells_5 = tdCells; _a < tdCells_5.length; _a++) {
                        var ele = tdCells_5[_a], startMonth = this.startValue.getMonth(), startYear = this.startValue.getFullYear(), element = this.getIdValue(null, ele);
                        if (this.startButton.element.classList.contains(ACTIVE$2) || !("Year" === this.currentView() && element.getMonth() < startMonth && element.getFullYear() <= startYear || "Decade" === this.currentView() && element.getMonth() <= startMonth && element.getFullYear() < startYear)) break;
                        addClass([ ele ], [ DISABLED$6 ]);
                    }
                    tdCells[0].classList.contains(DISABLED$6) ? this.previousIconHandler(!0) : tdCells[tdCells.length - 1].classList.contains(DISABLED$6) && this.nextIconHandler(!0);
                }
            }
        }, DateRangePicker.prototype.updateMinMaxDays = function(calendar) {
            if (isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.endValue) && !this.isMobile) this.isMaxDaysClicked = !1; else if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
                var minDate = new Date(new Date(+this.startValue).setDate(this.startValue.getDate() + (this.minDays - 1))), maxDate = new Date(new Date(+this.startValue).setDate(this.startValue.getDate() + (this.maxDays - 1)));
                minDate = !isNullOrUndefined(this.minDays) && this.minDays > 0 ? minDate : null, 
                maxDate = !isNullOrUndefined(this.maxDays) && this.maxDays > 0 ? maxDate : null;
                for (var maxEle = void 0, _i = 0, tdCells_6 = calendar.querySelectorAll(".e-calendar td"); _i < tdCells_6.length; _i++) {
                    var ele = tdCells_6[_i];
                    if (!ele.classList.contains(STARTDATE) && !ele.classList.contains("e-week-number")) {
                        var eleDate = this.getIdValue(null, ele);
                        if (!isNullOrUndefined(minDate) && +eleDate == +minDate && ele.classList.contains(DISABLED$6) && minDate.setDate(minDate.getDate() + 1), 
                        !ele.classList.contains(DISABLED$6)) {
                            if (+eleDate <= +this.startValue) continue;
                            !isNullOrUndefined(minDate) && +eleDate < +minDate && (addClass([ ele ], [ DATEDISABLED, DISABLED$6, OVERLAY$1 ]), 
                            EventHandler.clearEvents(ele)), !isNullOrUndefined(maxDate) && +eleDate > +maxDate && (addClass([ ele ], [ DATEDISABLED, DISABLED$6, OVERLAY$1 ]), 
                            this.isMaxDaysClicked = !0, EventHandler.clearEvents(ele), isNullOrUndefined(maxEle) && !ele.classList.contains("e-other-month") && (maxEle = ele));
                        }
                    }
                }
                if (!isNullOrUndefined(maxEle)) if (this.isMobile) this.nextIcon.classList.contains(DISABLED$6) || addClass([ this.nextIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]); else {
                    var calendar_1 = closest(maxEle, "." + RIGHTCALENDER);
                    (calendar_1 = isNullOrUndefined(calendar_1) ? this.leftCalendar : calendar_1).classList.contains(LEFTCALENDER) ? (this.rightCalNextIcon.classList.contains(DISABLED$6) || addClass([ this.rightCalNextIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]), 
                    this.leftCalNextIcon.classList.contains(DISABLED$6) || addClass([ this.leftCalNextIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]), 
                    this.rightCalPrevIcon.classList.contains(DISABLED$6) || addClass([ this.rightCalPrevIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ])) : this.rightCalNextIcon.classList.contains(DISABLED$6) || addClass([ this.rightCalNextIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]);
                }
            }
        }, DateRangePicker.prototype.removeClassDisabled = function() {
            for (var _i = 0, tdCells_7 = this.popupObj.element.querySelectorAll(".e-calendar td." + DATEDISABLED); _i < tdCells_7.length; _i++) {
                var ele = tdCells_7[_i];
                ele.classList.contains(DATEDISABLED) && (removeClass([ ele ], [ DATEDISABLED, DISABLED$6, OVERLAY$1 ]), 
                EventHandler.add(ele, "click", this.selectRange, this), this.isMobile || EventHandler.add(ele, "mouseover", this.hoverSelection, this));
            }
            this.isMobile ? (this.nextIcon.classList.contains(ICONDISABLED) && removeClass([ this.nextIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]), 
            this.previousIcon.classList.contains(ICONDISABLED) && removeClass([ this.previousIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ])) : (this.rightCalNextIcon.classList.contains(ICONDISABLED) && removeClass([ this.rightCalNextIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]), 
            this.rightCalPrevIcon.classList.contains(ICONDISABLED) && removeClass([ this.rightCalPrevIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]), 
            this.leftCalNextIcon.classList.contains(ICONDISABLED) && removeClass([ this.leftCalNextIcon ], [ ICONDISABLED, DISABLED$6, OVERLAY$1 ]));
        }, DateRangePicker.prototype.updateHeader = function() {
            var format = {
                type: "date",
                skeleton: "yMMMd"
            };
            if (isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue)) this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays"); else {
                var range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / 864e5)) + 1;
                isNullOrUndefined(this.disabledDayCnt) || (range -= this.disabledDayCnt, this.disabledDayCnt = null), 
                this.popupObj.element.querySelector("." + DAYSPAN).textContent = range.toString() + " " + this.l10n.getConstant("days");
            }
            this.isMobile ? (isNullOrUndefined(this.startValue) ? this.startButton.element.textContent = this.l10n.getConstant("startLabel") : this.startButton.element.textContent = this.globalize.formatDate(this.startValue, format), 
            isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) ? this.endButton.element.textContent = this.l10n.getConstant("endLabel") : this.endButton.element.textContent = this.globalize.formatDate(this.endValue, format)) : (isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) ? this.popupObj.element.querySelector(".e-end-label").textContent = this.l10n.getConstant("endLabel") : this.popupObj.element.querySelector(".e-end-label").textContent = this.globalize.formatDate(this.endValue, format), 
            isNullOrUndefined(this.startValue) ? this.popupObj.element.querySelector(".e-start-label").textContent = this.l10n.getConstant("startLabel") : this.popupObj.element.querySelector(".e-start-label").textContent = this.globalize.formatDate(this.startValue, format)), 
            (this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue) || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) && (this.isMobile ? (this.startButton.element.textContent = this.l10n.getConstant("startLabel"), 
            this.endButton.element.textContent = this.l10n.getConstant("endLabel"), this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays")) : (this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays"), 
            this.popupObj.element.querySelector(".e-start-label").textContent = this.l10n.getConstant("startLabel"), 
            this.popupObj.element.querySelector(".e-end-label").textContent = this.l10n.getConstant("endLabel"))), 
            this.popupObj.element.querySelector("#custom_range") && (this.popupObj.element.querySelector("#custom_range").textContent = "" !== this.l10.getConstant("customRange") ? this.l10.getConstant("customRange") : "Custom Range");
        }, DateRangePicker.prototype.removeSelection = function() {
            this.startValue = null, this.endValue = null, this.setValue(), this.removeSelectedAttributes(), 
            this.popupObj && (this.popupObj.element.querySelectorAll(".e-selected").length > 0 && removeClass(this.popupObj.element.querySelectorAll(".e-selected"), [ STARTDATE, ENDDATE, "e-selected" ]), 
            this.popupObj.element.querySelectorAll("." + FOCUSDATE).length > 0 && removeClass(this.popupObj.element.querySelectorAll("." + FOCUSDATE), FOCUSDATE), 
            this.popupObj.element.querySelectorAll("." + RANGEHOVER).length > 0 && removeClass(this.popupObj.element.querySelectorAll("." + RANGEHOVER), [ RANGEHOVER ]));
        }, DateRangePicker.prototype.addSelectedAttributes = function(ele, date, isStartDate, sameDate) {
            if (ele) {
                var title = this.globalize.formatDate(date, {
                    type: "date",
                    skeleton: "full"
                });
                !isNullOrUndefined(sameDate) && sameDate ? ele.setAttribute("aria-label", "The current start and end date is " + title) : ele.setAttribute("aria-label", "The current " + (isStartDate ? "start" : "end") + " date is " + title), 
                ele.setAttribute("aria-selected", "true");
            }
        }, DateRangePicker.prototype.removeSelectedAttributes = function() {
            if (this.popupObj) {
                for (var _i = 0, start_1 = this.popupObj.element.querySelectorAll("." + STARTDATE); _i < start_1.length; _i++) {
                    (ele = start_1[_i]).setAttribute("aria-selected", "false"), ele.removeAttribute("aria-label");
                }
                for (var _a = 0, end_1 = this.popupObj.element.querySelectorAll("." + ENDDATE); _a < end_1.length; _a++) {
                    var ele;
                    (ele = end_1[_a]).setAttribute("aria-selected", "false"), ele.removeAttribute("aria-label");
                }
            }
        }, DateRangePicker.prototype.updateCalendarElement = function(calendar) {
            calendar.classList.contains(LEFTCALENDER) ? (this.calendarElement = this.leftCalendar, 
            this.currentDate = this.leftCalCurrentDate, this.previousIcon = this.leftCalPrevIcon, 
            this.nextIcon = this.leftCalNextIcon) : (this.calendarElement = this.rightCalendar, 
            this.currentDate = this.rightCalCurrentDate, this.previousIcon = this.rightCalPrevIcon, 
            this.nextIcon = this.rightCalNextIcon), this.contentElement = calendar.querySelector(".e-content"), 
            this.tableBodyElement = select(".e-content tbody", calendar), this.table = calendar.querySelector(".e-content").getElementsByTagName("table")[0], 
            this.headerTitleElement = calendar.querySelector(".e-header .e-title"), this.headerElement = calendar.querySelector(".e-header");
        }, DateRangePicker.prototype.navPrevMonth = function(e) {
            e.preventDefault();
            var ele = closest(e.target, "." + LEFTCALENDER);
            ele = isNullOrUndefined(ele) ? closest(e.target, "." + RIGHTCALENDER) : ele, this.updateCalendarElement(ele), 
            this.navigatePrevious(e), !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) && this.updateMinMaxDays(ele), 
            this.updateControl(ele);
        }, DateRangePicker.prototype.deviceNavigation = function(ele) {
            this.deviceCalendarEvent(), this.updateRange([ this.popupObj.element.querySelector("." + CALENDAR) ]), 
            !isNullOrUndefined(this.endValue) && this.endButton.element.classList.contains(ACTIVE$2) && this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR)), 
            this.endButton.element.classList.contains(ACTIVE$2) && this.selectableDates(), "Month" === this.currentView() && this.bindCalendarCellEvents(), 
            this.removeFocusedDate();
        }, DateRangePicker.prototype.updateControl = function(calendar) {
            calendar.classList.contains(RIGHTCALENDER) ? this.rightCalCurrentDate = new Date(+this.currentDate) : this.leftCalCurrentDate = new Date(+this.currentDate), 
            this.updateNavIcons(), this.calendarIconEvent(), (this.leftCalendar.querySelector(".e-content").classList.contains("e-month") && this.rightCalendar.querySelector(".e-content").classList.contains("e-month") || this.isMobile) && this.bindCalendarCellEvents(), 
            this.removeFocusedDate(), this.updateRange([ calendar ]);
        }, DateRangePicker.prototype.navNextMonth = function(event) {
            event.preventDefault();
            var ele = closest(event.target, "." + LEFTCALENDER);
            ele = isNullOrUndefined(ele) ? closest(event.target, "." + RIGHTCALENDER) : ele, 
            this.updateCalendarElement(ele), this.navigateNext(event), !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) && this.updateMinMaxDays(ele), 
            this.updateControl(ele);
        }, DateRangePicker.prototype.compareMonths = function(start, end) {
            return start.getFullYear() !== end.getFullYear() || "Year" !== this.currentView() && "Decade" !== this.currentView() ? start.getFullYear() > end.getFullYear() ? -1 : start.getFullYear() < end.getFullYear() ? start.getFullYear() + 1 === end.getFullYear() && 11 === start.getMonth() && 0 === end.getMonth() ? -1 : 1 : start.getMonth() === end.getMonth() ? 0 : start.getMonth() + 1 === end.getMonth() ? -1 : 1 : -1;
        }, DateRangePicker.prototype.isPopupOpen = function() {
            return !(isNullOrUndefined(this.popupObj) || !this.popupObj.element.classList.contains("e-popup"));
        }, DateRangePicker.prototype.createRangeHeader = function() {
            var labelContainer = this.createElement("div", {
                className: "e-start-end"
            });
            if (this.isMobile) {
                var endBtn = this.createElement("button", {
                    className: "e-end-btn"
                }), startBtn = this.createElement("button", {
                    className: "e-start-btn"
                });
                this.startButton = new Button({
                    content: this.l10n.getConstant("startLabel")
                }, startBtn), this.endButton = new Button({
                    content: this.l10n.getConstant("endLabel")
                }, endBtn), labelContainer.appendChild(startBtn), labelContainer.appendChild(endBtn);
            } else {
                var startLabel = this.createElement("a", {
                    className: "e-start-label"
                }), endLabel = this.createElement("a", {
                    className: "e-end-label"
                }), changeIcon = this.createElement("span", {
                    className: "e-change-icon e-icons"
                });
                attributes(startLabel, {
                    "aria-atomic": "true",
                    "aria-live": "assertive",
                    "aria-label": "Start Date",
                    role: "button"
                }), attributes(endLabel, {
                    "aria-atomic": "true",
                    "aria-live": "assertive",
                    "aria-label": "End Date",
                    role: "button"
                }), labelContainer.appendChild(startLabel), labelContainer.appendChild(changeIcon), 
                labelContainer.appendChild(endLabel), startLabel.textContent = this.l10n.getConstant("startLabel"), 
                endLabel.textContent = this.l10n.getConstant("endLabel");
            }
            return labelContainer;
        }, DateRangePicker.prototype.disableInput = function() {
            this.strictMode ? isNullOrUndefined(this.previousStartValue) || isNullOrUndefined(this.previousEndValue) || (this.startValue = this.previousStartValue, 
            this.endValue = this.previousEndValue, this.setValue(), this.updateInput()) : (this.updateInput(), 
            this.clearRange(), this.setProperties({
                startDate: null
            }, !0), this.setProperties({
                endDate: null
            }, !0), this.startValue = null, this.endValue = null, this.setValue(), this.errorClass()), 
            this.setProperties({
                enabled: !1
            }, !0), Input.setEnabled(this.enabled, this.inputElement), this.bindEvents();
        }, DateRangePicker.prototype.validateMinMax = function() {
            this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min, 
            this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max, 
            this.min <= this.max ? (isNullOrUndefined(this.minDays) || isNullOrUndefined(this.maxDays) || this.maxDays > 0 && this.minDays > 0 && this.minDays > this.maxDays && (this.maxDays = null), 
            !isNullOrUndefined(this.minDays) && this.minDays < 0 && (this.minDays = null), !isNullOrUndefined(this.maxDays) && this.maxDays < 0 && (this.maxDays = null)) : this.disableInput();
        }, DateRangePicker.prototype.validateRangeStrict = function() {
            isNullOrUndefined(this.startValue) || (+this.startValue <= +this.min ? (this.startValue = this.min, 
            this.setValue()) : +this.startValue >= +this.min && +this.startValue >= +this.max && (this.startValue = this.max)), 
            isNullOrUndefined(this.endValue) || (+this.endValue > +this.max ? (this.endValue = this.max, 
            this.setValue()) : +this.endValue < +this.min && (this.endValue = this.min, this.setValue())), 
            this.validateMinMaxDays();
        }, DateRangePicker.prototype.validateRange = function() {
            this.validateMinMaxDays();
        }, DateRangePicker.prototype.validateMinMaxDays = function() {
            if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
                var range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / 864e5)) + 1;
                if (!isNullOrUndefined(this.minDays) && this.minDays > 0 && !(range >= this.minDays)) if (this.strictMode) {
                    var date = new Date(+this.startValue);
                    date.setDate(date.getDate() + (this.minDays - 1)), +date > +this.max ? (this.endValue = this.max, 
                    this.setValue()) : (this.endValue = date, this.setValue());
                } else this.startValue = null, this.endValue = null, this.setValue();
                isNullOrUndefined(this.maxDays) || !(this.maxDays > 0) || range <= this.maxDays || (this.strictMode ? (this.endValue = new Date(+this.startValue), 
                this.endValue.setDate(this.endValue.getDate() + (this.maxDays - 1)), this.setValue()) : (this.startValue = null, 
                this.endValue = null, this.setValue()));
            }
        }, DateRangePicker.prototype.renderCalendar = function() {
            this.calendarElement = this.createElement("div"), this.calendarElement.classList.add(CALENDAR), 
            this.enableRtl && this.calendarElement.classList.add("e-rtl"), attributes(this.calendarElement, {
                role: "calendar"
            }), _super.prototype.createHeader.call(this), _super.prototype.createContent.call(this);
        }, DateRangePicker.prototype.isSameMonth = function(start, end) {
            return start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear();
        }, DateRangePicker.prototype.startMonthCurrentDate = function() {
            this.isSameMonth(this.min, this.max) || +this.currentDate > +this.max || this.isSameMonth(this.currentDate, this.max) ? (this.currentDate = new Date(+this.max), 
            this.currentDate.setDate(1), this.currentDate.setMonth(this.currentDate.getMonth() - 1)) : this.currentDate < this.min && (this.currentDate = new Date("" + this.min));
        }, DateRangePicker.prototype.selectNextMonth = function() {
            if (isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) || this.isSameMonth(this.endValue, this.currentDate) || this.isDateDisabled(this.endValue) || this.isDateDisabled(this.startValue)) return this.currentDate.setDate(1), 
            void this.currentDate.setMonth(this.currentDate.getMonth() + 1);
            this.currentDate = new Date(+this.endValue), (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) && (this.currentDate = new Date(new Date().setHours(0, 0, 0, 0)), 
            this.currentDate.setDate(1), this.currentDate.setMonth(this.currentDate.getMonth() + 1));
        }, DateRangePicker.prototype.selectStartMonth = function() {
            isNullOrUndefined(this.startValue) ? (this.currentDate = new Date(new Date().setHours(0, 0, 0, 0)), 
            this.startMonthCurrentDate()) : !isNullOrUndefined(this.max) && this.isSameMonth(this.startValue, this.max) ? (this.currentDate = new Date(+this.max), 
            this.currentDate.setDate(1), this.currentDate.setMonth(this.currentDate.getMonth() - 1)) : this.startValue >= this.min && this.startValue <= this.max && !this.isDateDisabled(this.startValue) ? this.currentDate = new Date(+this.startValue) : this.currentDate = new Date(new Date().setHours(0, 0, 0, 0)), 
            (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) && (this.currentDate = new Date(new Date().setHours(0, 0, 0, 0))), 
            this.startMonthCurrentDate();
        }, DateRangePicker.prototype.createCalendar = function() {
            var calendarContainer = this.createElement("div", {
                className: "e-calendar-container"
            });
            if (this.isMobile) {
                isNullOrUndefined(this.startValue) || (this.currentDate = new Date(+this.startValue)), 
                _super.prototype.validateDate.call(this), _super.prototype.minMaxUpdate.call(this), 
                _super.prototype.render.call(this);
                var prevIcon = this.calendarElement.querySelector(".e-calendar .e-prev"), nextIcon = this.calendarElement.querySelector(".e-calendar .e-next");
                remove(this.calendarElement.querySelector(".e-calendar .e-icon-container")), this.calendarElement.querySelector(".e-calendar .e-header").appendChild(nextIcon), 
                this.calendarElement.querySelector(".e-calendar .e-header").appendChild(prevIcon), 
                prepend([ prevIcon ], this.calendarElement.querySelector(".e-calendar .e-header")), 
                this.deviceCalendar = this.calendarElement, calendarContainer.appendChild(this.calendarElement), 
                this.headerTitleElement = this.calendarElement.querySelector(".e-calendar .e-header .e-title");
            } else {
                this.selectStartMonth(), this.renderCalendar(), this.leftCalCurrentDate = new Date(+this.currentDate), 
                this.calendarElement.classList.add(LEFTCALENDER), this.leftCalPrevIcon = this.calendarElement.querySelector(".e-left-calendar .e-prev"), 
                this.leftCalNextIcon = this.calendarElement.querySelector(".e-left-calendar .e-next"), 
                this.leftTitle = this.calendarElement.querySelector(".e-left-calendar .e-title"), 
                remove(this.calendarElement.querySelector(".e-left-calendar .e-icon-container")), 
                this.calendarElement.querySelector(".e-left-calendar .e-header").appendChild(this.leftCalNextIcon), 
                this.calendarElement.querySelector(".e-left-calendar .e-header").appendChild(this.leftCalPrevIcon), 
                prepend([ this.leftCalPrevIcon ], this.calendarElement.querySelector(".e-left-calendar .e-header")), 
                this.leftCalendar = this.calendarElement;
                var leftContainer = this.createElement("div", {
                    className: "e-left-container"
                }), rightContainer = this.createElement("div", {
                    className: "e-right-container"
                });
                leftContainer.appendChild(this.leftCalendar), calendarContainer.appendChild(leftContainer), 
                this.isMobile || EventHandler.add(this.leftTitle, "click", this.leftNavTitle, this), 
                this.selectNextMonth(), this.renderCalendar(), this.rightCalCurrentDate = new Date(+this.currentDate), 
                addClass([ this.calendarElement ], RIGHTCALENDER), this.rightCalendar = this.calendarElement, 
                removeClass([ this.leftCalendar && this.leftCalendar.querySelector(".e-content tbody") ], "e-zoomin"), 
                removeClass([ this.rightCalendar && this.rightCalendar.querySelector(".e-content tbody") ], "e-zoomin"), 
                this.rightCalPrevIcon = this.calendarElement.querySelector(".e-right-calendar .e-prev"), 
                this.rightCalNextIcon = this.calendarElement.querySelector(".e-right-calendar .e-next"), 
                this.rightTitle = this.calendarElement.querySelector(".e-right-calendar .e-title"), 
                remove(this.calendarElement.querySelector(".e-right-calendar .e-icon-container")), 
                this.calendarElement.querySelector("table").setAttribute("tabindex", "-1"), this.calendarElement.querySelector(".e-right-calendar .e-header").appendChild(this.rightCalNextIcon), 
                this.calendarElement.querySelector(".e-right-calendar .e-header").appendChild(this.rightCalPrevIcon), 
                prepend([ this.rightCalPrevIcon ], this.calendarElement.querySelector(".e-right-calendar .e-header")), 
                rightContainer.appendChild(this.rightCalendar), calendarContainer.appendChild(rightContainer), 
                this.isMobile || EventHandler.add(this.rightTitle, "click", this.rightNavTitle, this);
            }
            return calendarContainer;
        }, DateRangePicker.prototype.leftNavTitle = function(e) {
            this.isPopupOpen() && (this.calendarElement = this.leftCalendar, this.calendarNavigation(e, this.calendarElement));
        }, DateRangePicker.prototype.calendarNavigation = function(e, element) {
            this.table = element.querySelector("table"), this.headerTitleElement = element.querySelector(".e-title"), 
            this.tableBodyElement = element.querySelector("tbody"), this.tableHeadElement = element.querySelector("thead"), 
            this.contentElement = element.querySelector(".e-content"), this.updateCalendarElement(element), 
            _super.prototype.navigateTitle.call(this, e), this.updateNavIcons();
        }, DateRangePicker.prototype.rightNavTitle = function(e) {
            this.isPopupOpen() && (this.calendarElement = this.rightCalendar, this.calendarNavigation(e, this.calendarElement));
        }, DateRangePicker.prototype.clickEventEmitter = function(e) {
            this.isMobile || (closest(e.target, ".e-calendar.e-left-calendar") ? (this.calendarElement = this.leftCalendar, 
            this.updateCalendarElement(this.leftCalendar)) : (this.calendarElement = this.rightCalendar, 
            this.updateCalendarElement(this.rightCalendar)));
        }, DateRangePicker.prototype.currentView = function() {
            return _super.prototype.currentView.call(this);
        }, DateRangePicker.prototype.navigatedEvent = function(e) {
            this.isMobile && "Month" === this.currentView() ? (this.bindCalendarCellEvents(), 
            this.deviceNavigation(), this.removeFocusedDate()) : !this.isMobile || "Decade" !== this.currentView() && "Year" !== this.currentView() ? this.isMobile || "Month" !== this.currentView() ? this.isMobile || "Decade" !== this.currentView() && "Year" !== this.currentView() || (this.updateNavIcons(), 
            this.calendarIconEvent()) : (this.calendarElement.classList.contains("e-left-calendar") ? this.leftCalendar : this.rightCalendar) !== this.leftCalendar || (!e || e.currentTarget.children[0].classList.contains("e-icons")) && isNullOrUndefined(this.controlDown) ? (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown)) && (this.rightCalCurrentDate = new Date(+this.currentDate), 
            this.leftCalCurrentDate = new Date(this.currentDate.setMonth(this.currentDate.getMonth() - 1)), 
            this.currentDate = this.rightCalCurrentDate, this.updateCalendarElement(this.rightCalendar), 
            this.updateControl(this.rightCalendar), this.updateCalendarElement(this.leftCalendar), 
            this.startValue && this.startValue.getMonth() < this.rightCalCurrentDate.getMonth() && this.startValue.getFullYear() <= this.rightCalCurrentDate.getFullYear() && isNullOrUndefined(this.endValue) ? (this.effect = "", 
            this.navigateTo("Month", new Date(+this.startValue))) : this.navigateTo("Month", this.leftCalCurrentDate), 
            this.updateControl(this.leftCalendar), this.updateNavIcons(), this.calendarIconEvent(), 
            this.calendarIconRipple()) : (this.leftCalCurrentDate = new Date(+this.currentDate), 
            this.rightCalCurrentDate = new Date(new Date(+this.currentDate).setMonth(new Date(+this.currentDate).getMonth() + 1)), 
            this.currentDate = this.leftCalCurrentDate, this.updateCalendarElement(this.leftCalendar), 
            this.updateControl(this.leftCalendar), this.updateCalendarElement(this.rightCalendar), 
            this.navigateTo("Month", this.rightCalCurrentDate), this.updateControl(this.rightCalendar), 
            this.updateNavIcons(), this.calendarIconEvent(), this.calendarIconRipple()) : this.selectableDates();
        }, DateRangePicker.prototype.createControl = function() {
            var controlContainer = this.createElement("div", {
                className: "e-date-range-container"
            }), headerContainer = this.createElement("div", {
                className: "e-range-header"
            }), labelContainer = this.createRangeHeader();
            headerContainer.appendChild(labelContainer);
            var daySpan = this.createElement("div", {
                className: DAYSPAN
            });
            attributes(daySpan, {
                "aria-label": "Selected Days"
            }), daySpan.textContent = this.l10n.getConstant("selectedDays"), headerContainer.appendChild(daySpan);
            var separator = this.createElement("div", {
                className: "e-separator"
            }), calendarContainer = this.createCalendar();
            controlContainer.appendChild(headerContainer), controlContainer.appendChild(separator), 
            controlContainer.appendChild(calendarContainer);
            var footerSection = this.createElement("div", {
                className: "e-footer"
            }), cancelBtn = this.createElement("button", {
                className: "e-cancel e-flat e-css"
            }), applyBtn = this.createElement("button");
            addClass([ applyBtn ], [ "e-apply", "e-flat", "e-primary", "e-css" ]), footerSection.appendChild(applyBtn), 
            footerSection.appendChild(cancelBtn);
            var enable = !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue);
            if (this.cancelButton = new Button({
                content: this.l10n.getConstant("cancelText")
            }, cancelBtn), this.applyButton = new Button({
                content: this.l10n.getConstant("applyText"),
                disabled: !enable
            }, applyBtn), EventHandler.add(applyBtn, "click", this.applyFunction, this), EventHandler.add(cancelBtn, "click", this.cancelFunction, this), 
            this.popupWrapper.appendChild(controlContainer), !this.isMobile && !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
                this.createPresets(), this.listRippleEffect(), addClass([ controlContainer ], "e-range-border"), 
                addClass([ this.popupWrapper ], "e-preset-wrapper");
                this.popupWrapper.querySelector(".e-presets").style.height = this.popupWrapper.querySelector(".e-date-range-container").getBoundingClientRect().height + "px";
            }
            this.popupWrapper.appendChild(footerSection), this.isMobile && this.deviceHeaderUpdate(), 
            this.renderPopup();
        }, DateRangePicker.prototype.cancelFunction = function(eve) {
            document.activeElement !== this.inputElement && (this.preventFocus = !0, this.inputElement.focus(), 
            addClass([ this.inputWrapper.container ], [ "e-input-focus" ])), eve.preventDefault(), 
            this.isKeyPopup && (this.inputElement.focus(), this.isKeyPopup = !1), this.startValue = null, 
            this.endValue = null, this.removeSelection(), this.hide(eve);
        }, DateRangePicker.prototype.deviceHeaderUpdate = function() {
            isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) ? (this.endButton.element.setAttribute("disabled", ""), 
            this.startButton.element.classList.add(ACTIVE$2)) : isNullOrUndefined(this.startValue) || this.startButton.element.classList.add(ACTIVE$2);
        }, DateRangePicker.prototype.applyFunction = function(eve) {
            eve.preventDefault(), this.closeEventArgs && this.closeEventArgs.cancel && (this.startValue = this.popupWrapper.querySelector(".e-start-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-start-date")), 
            this.endValue = this.popupWrapper.querySelector(".e-end-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-end-date")), 
            this.setValue()), document.activeElement !== this.inputElement && (this.preventFocus = !0, 
            this.inputElement.focus(), addClass([ this.inputWrapper.container ], [ "e-input-focus" ])), 
            "touchstart" !== eve.type && this.closeEventArgs && !this.closeEventArgs.cancel && eve.preventDefault(), 
            isNullOrUndefined(this.startValue) || isNullOrUndefined(this.endValue) ? this.hide(eve || null) : (this.previousStartValue = new Date(+this.startValue), 
            this.previousEndValue = new Date(+this.endValue), this.previousEleValue = this.inputElement.value, 
            Input.setValue(this.rangeArgs(eve).text, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.changeTrigger(eve), this.hide(eve || null), this.errorClass()), this.isMobile || (this.isKeyPopup = !1, 
            this.isRangeIconClicked && (this.inputWrapper.container.children[1].focus(), this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
                eventName: "keydown",
                keyAction: this.popupKeyActionHandle.bind(this),
                keyConfigs: this.keyInputConfigs
            })));
        }, DateRangePicker.prototype.onMouseClick = function(event, item) {
            if ("touchstart" !== event.type) {
                var li = closest(item || event.target, "." + LISTCLASS), isClick = li && li.classList.contains(ACTIVE$2);
                li && li.classList.contains(LISTCLASS) && this.setListSelection(li, event), this.inputElement.focus(), 
                this.isMobile || (this.preventFocus = !0, li && li.classList.contains(LISTCLASS) && "custom_range" === li.getAttribute("id") ? this.leftCalendar.children[1].firstElementChild.focus() : isClick || "keydown" !== event.type || this.inputElement.focus());
            }
        }, DateRangePicker.prototype.onMouseOver = function(event) {
            var li = closest(event.target, "." + LISTCLASS);
            li && li.classList.contains(LISTCLASS) && !li.classList.contains(HOVER) && addClass([ li ], HOVER);
        }, DateRangePicker.prototype.onMouseLeave = function(event) {
            var item = closest(event.target, "." + HOVER);
            isNullOrUndefined(item) || removeClass([ item ], HOVER);
        }, DateRangePicker.prototype.setListSelection = function(li, event) {
            if (li && (!li.classList.contains(ACTIVE$2) || this.isMobile && li.classList.contains(ACTIVE$2))) {
                if (this.isMobile && li.classList.contains(ACTIVE$2)) {
                    this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
                    if ("custom_range" === this.presetsItem[this.activeIndex].id) return void this.renderCustomPopup();
                    return;
                }
                this.removeListSelection(), this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li), 
                addClass([ li ], ACTIVE$2), li.setAttribute("aria-selected", "true");
                var values = this.presetsItem[this.activeIndex];
                "custom_range" === values.id ? this.renderCustomPopup() : this.applyPresetRange(values);
            }
        }, DateRangePicker.prototype.removeListSelection = function() {
            var item = this.presetElement.querySelector(".e-active");
            isNullOrUndefined(item) || (removeClass([ item ], ACTIVE$2), item.removeAttribute("aria-selected"));
        }, DateRangePicker.prototype.setValue = function() {
            this.modelValue = [ this.startValue, this.endValue ];
        }, DateRangePicker.prototype.applyPresetRange = function(values) {
            this.hide(null), this.presetsItem[this.presetsItem.length - 1].start = null, this.presetsItem[this.presetsItem.length - 1].end = null, 
            this.startValue = values.start, this.endValue = values.end, this.setValue(), this.refreshControl(), 
            this.trigger("select", this.rangeArgs(null)), this.changeTrigger(), this.previousEleValue = this.inputElement.value, 
            this.isCustomRange = !1, this.leftCalendar = this.rightCalendar = null, this.isKeyPopup && (this.isRangeIconClicked = !1, 
            this.inputElement.focus());
        }, DateRangePicker.prototype.showPopup = function(element, event) {
            this.presetHeight(), 1e3 === this.zIndex ? this.popupObj.show(null, this.element) : this.popupObj.show(null, null), 
            this.isMobile && this.popupObj.refreshPosition();
        }, DateRangePicker.prototype.renderCustomPopup = function() {
            this.isCustomWindow = !0, this.popupObj.hide(), this.popupWrapper = this.createElement("div", {
                id: this.element.id + "_popup",
                className: ROOT$8 + " e-popup"
            }), this.renderControl(), this.openEventArgs.appendTo.appendChild(this.popupWrapper), 
            this.showPopup(), this.isCustomRange = !0, this.isMobile || this.calendarFocus();
        }, DateRangePicker.prototype.listRippleEffect = function() {
            for (var _i = 0, _a = this.liCollections; _i < _a.length; _i++) {
                rippleEffect(_a[_i]);
            }
        }, DateRangePicker.prototype.createPresets = function() {
            if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
                this.presetElement = this.createElement("div", {
                    className: "e-presets",
                    attrs: {
                        tabindex: "0"
                    }
                });
                var listTag = ListBase.createList(this.createElement, this.presetsItem, null, !0);
                attributes(listTag, {
                    role: "listbox",
                    "aria-hidden": "false",
                    id: this.element.id + "_options"
                }), this.presetElement.appendChild(listTag), this.popupWrapper.appendChild(this.presetElement), 
                this.liCollections = this.presetElement.querySelectorAll("." + LISTCLASS), this.wireListEvents(), 
                this.isMobile && (this.presetElement.style.width = this.inputWrapper.container.getBoundingClientRect().width + "px"), 
                !isNullOrUndefined(this.activeIndex) && this.activeIndex > -1 && addClass([ this.liCollections[this.activeIndex] ], ACTIVE$2);
            }
        }, DateRangePicker.prototype.wireListEvents = function() {
            EventHandler.add(this.presetElement, "click", this.onMouseClick, this), this.isMobile || (EventHandler.add(this.presetElement, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.presetElement, "mouseout", this.onMouseLeave, this));
        }, DateRangePicker.prototype.unWireListEvents = function() {
            isNullOrUndefined(this.presetElement) || (EventHandler.remove(this.presetElement, "click touchstart", this.onMouseClick), 
            this.isMobile || (EventHandler.remove(this.presetElement, "mouseover", this.onMouseOver), 
            EventHandler.remove(this.presetElement, "mouseout", this.onMouseLeave)));
        }, DateRangePicker.prototype.renderPopup = function() {
            var _this = this;
            this.popupWrapper.classList.add("e-control");
            var popupWidth = this.popupWrapper.getBoundingClientRect().width;
            isNullOrUndefined(this.cssClass) || "" === this.cssClass.trim() || (this.popupWrapper.className += " " + this.cssClass), 
            this.isMobile && this.isCustomWindow && (this.modal = this.createElement("div"), 
            document.body.appendChild(this.modal)), this.popupObj = new Popup(this.popupWrapper, {
                relateTo: this.isMobile && this.isCustomWindow ? document.body : isNullOrUndefined(this.targetElement) ? this.inputWrapper.container : this.targetElement,
                position: this.isMobile ? isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) || this.isCustomWindow ? {
                    X: "center",
                    Y: "center"
                } : {
                    X: "left",
                    Y: "bottom"
                } : this.enableRtl ? {
                    X: "left",
                    Y: "bottom"
                } : {
                    X: "right",
                    Y: "bottom"
                },
                offsetX: this.isMobile || this.enableRtl ? 0 : -popupWidth,
                offsetY: 4,
                collision: this.isMobile ? isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) || this.isCustomWindow ? {
                    X: "fit",
                    Y: "fit"
                } : {
                    X: "fit"
                } : {
                    X: "fit",
                    Y: "flip"
                },
                targetType: this.isMobile && this.isCustomWindow ? "container" : "relative",
                enableRtl: this.enableRtl,
                zIndex: this.zIndex,
                open: function() {
                    attributes(_this.inputElement, {
                        "aria-expanded": "true"
                    }), addClass([ _this.inputWrapper.buttons[0] ], ACTIVE$2), _this.isMobile || (_this.cancelButton && (_this.btnKeyboardModule = new KeyboardEvents(_this.cancelButton.element, {
                        eventName: "keydown",
                        keyAction: _this.popupKeyActionHandle.bind(_this),
                        keyConfigs: {
                            tab: "tab",
                            altRightArrow: "alt+rightarrow",
                            altLeftArrow: "alt+leftarrow"
                        }
                    }), _this.btnKeyboardModule = new KeyboardEvents(_this.applyButton.element, {
                        eventName: "keydown",
                        keyAction: _this.popupKeyActionHandle.bind(_this),
                        keyConfigs: {
                            altRightArrow: "alt+rightarrow",
                            altLeftArrow: "alt+leftarrow"
                        }
                    })), isNullOrUndefined(_this.leftCalendar) || _this.isRangeIconClicked || _this.calendarFocus(), 
                    isNullOrUndefined(_this.presetElement) || (_this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                        eventName: "keydown",
                        keyAction: _this.presetKeyActionHandler.bind(_this),
                        keyConfigs: _this.presetKeyConfig
                    }), _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                        eventName: "keydown",
                        keyAction: _this.popupKeyActionHandle.bind(_this),
                        keyConfigs: {
                            altRightArrow: "alt+rightarrow",
                            altLeftArrow: "alt+leftarrow"
                        }
                    }), isNullOrUndefined(_this.leftCalendar) ? (_this.preventBlur = !0, _this.presetElement.focus()) : _this.presetElement.setAttribute("tabindex", "-1")), 
                    _this.popupKeyBoardHandler()), _this.isMobile && !Browser.isDevice && EventHandler.add(document, "keydown", _this.popupCloseHandler, _this);
                },
                close: function() {
                    attributes(_this.inputElement, {
                        "aria-expanded": "false"
                    }), removeClass([ _this.inputWrapper.buttons[0] ], ACTIVE$2), _this.isRangeIconClicked && _this.inputWrapper.container.children[1].focus(), 
                    isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label) || _this.unWireListEvents(), 
                    isNullOrUndefined(_this.popupObj) || (detach(_this.popupObj.element), _this.popupObj.destroy(), 
                    _this.popupObj = null), _this.isMobile && !Browser.isDevice && EventHandler.remove(document, "keydown", _this.popupCloseHandler);
                }
            }), this.isMobile && (this.popupObj.element.classList.add("e-device"), this.isMobile || this.popupObj.element.classList.add("e-bigger")), 
            this.isMobile && this.isCustomWindow && (addClass([ this.modal ], [ "e-device", ROOT$8, "e-range-modal" ]), 
            document.body.className += " e-range-overflow", this.modal.style.display = "block"), 
            EventHandler.add(document, "mousedown", this.documentHandler, this);
        }, DateRangePicker.prototype.popupCloseHandler = function(e) {
            switch (e.keyCode) {
              case 27:
                this.hide(e);
            }
        }, DateRangePicker.prototype.calendarFocus = function() {
            var startDate = this.popupObj && this.popupObj.element.querySelector("." + STARTDATE);
            if (startDate) {
                var ele = closest(startDate, "." + RIGHTCALENDER);
                ele = isNullOrUndefined(ele) ? this.leftCalendar : ele, this.isRangeIconClicked ? this.inputWrapper.container.focus() : (this.preventBlur = !0, 
                ele.children[1].firstElementChild.focus()), addClass([ startDate ], FOCUSDATE);
            } else this.isRangeIconClicked ? this.inputWrapper.container.focus() : (this.preventBlur = !0, 
            this.leftCalendar.children[1].firstElementChild.focus());
        }, DateRangePicker.prototype.presetHeight = function() {
            var presets = this.popupObj && this.popupObj.element.querySelector(".e-presets"), rangeContainer = this.popupObj && this.popupObj.element.querySelector(".e-date-range-container");
            isNullOrUndefined(presets) || isNullOrUndefined(rangeContainer) || (presets.style.height = rangeContainer.getBoundingClientRect().height + "px");
        }, DateRangePicker.prototype.presetKeyActionHandler = function(e) {
            switch (e.action) {
              case "moveDown":
                this.listMoveDown(e), this.setScrollPosition(), e.preventDefault();
                break;

              case "moveUp":
                this.listMoveUp(e), this.setScrollPosition(), e.preventDefault();
                break;

              case "enter":
                var hvrItem = this.getHoverLI(), actItem = this.getActiveLI();
                if (!isNullOrUndefined(this.leftCalendar) && !isNullOrUndefined(actItem) && (isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem) && actItem === hvrItem)) {
                    this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(actItem);
                    if ("custom_range" === this.presetsItem[this.activeIndex].id) return this.calendarFocus(), 
                    actItem.classList.remove(HOVER), void e.preventDefault();
                }
                isNullOrUndefined(hvrItem) && isNullOrUndefined(actItem) || this.onMouseClick(e, hvrItem || actItem), 
                e.preventDefault();
                break;

              case "tab":
                if (this.leftCalendar) {
                    var item = this.getHoverLI();
                    isNullOrUndefined(item) || item.classList.remove(HOVER);
                } else this.hide(e), e.preventDefault();
            }
        }, DateRangePicker.prototype.listMoveDown = function(e) {
            var hvrItem = this.getHoverLI(), actItem = this.getActiveLI();
            if (isNullOrUndefined(hvrItem)) if (isNullOrUndefined(actItem)) addClass([ this.liCollections[0] ], HOVER); else {
                !isNullOrUndefined(li = actItem.nextElementSibling) && li.classList.contains(LISTCLASS) && addClass([ li ], HOVER);
            } else {
                var li;
                !isNullOrUndefined(li = hvrItem.nextElementSibling) && li.classList.contains(LISTCLASS) && (removeClass([ hvrItem ], HOVER), 
                addClass([ li ], HOVER));
            }
        }, DateRangePicker.prototype.listMoveUp = function(e) {
            var hvrItem = this.getHoverLI(), actItem = this.getActiveLI();
            if (isNullOrUndefined(hvrItem)) {
                if (!isNullOrUndefined(actItem)) {
                    !isNullOrUndefined(li = actItem.previousElementSibling) && li.classList.contains(LISTCLASS) && addClass([ li ], HOVER);
                }
            } else {
                var li;
                !isNullOrUndefined(li = hvrItem.previousElementSibling) && li.classList.contains(LISTCLASS) && (removeClass([ hvrItem ], HOVER), 
                addClass([ li ], HOVER));
            }
        }, DateRangePicker.prototype.getHoverLI = function() {
            return this.presetElement.querySelector("." + HOVER);
        }, DateRangePicker.prototype.getActiveLI = function() {
            return this.presetElement.querySelector(".e-active");
        }, DateRangePicker.prototype.popupKeyBoardHandler = function() {
            this.popupKeyboardModule = new KeyboardEvents(this.popupWrapper, {
                eventName: "keydown",
                keyAction: this.popupKeyActionHandle.bind(this),
                keyConfigs: {
                    escape: "escape"
                }
            }), this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
                eventName: "keydown",
                keyAction: this.popupKeyActionHandle.bind(this),
                keyConfigs: this.keyInputConfigs
            });
        }, DateRangePicker.prototype.setScrollPosition = function() {
            var listHeight = this.presetElement.getBoundingClientRect().height, hover = this.presetElement.querySelector("." + HOVER), active = this.presetElement.querySelector(".e-active"), element = isNullOrUndefined(hover) ? active : hover;
            if (!isNullOrUndefined(element)) {
                var nextEle = element.nextElementSibling, height = nextEle ? nextEle.offsetTop : element.offsetTop, liHeight = element.getBoundingClientRect().height;
                height + element.offsetTop > listHeight ? this.presetElement.scrollTop = nextEle ? height - (listHeight / 2 + liHeight / 2) : height : this.presetElement.scrollTop = 0;
            }
        }, DateRangePicker.prototype.popupKeyActionHandle = function(e) {
            var presetElement = closest(e.target, ".e-presets");
            switch (e.action) {
              case "escape":
                this.isPopupOpen() ? (this.isKeyPopup && (this.inputElement.focus(), this.isKeyPopup = !1), 
                this.hide(e)) : this.inputWrapper.container.children[1].blur();
                break;

              case "enter":
                this.isPopupOpen() ? this.inputWrapper.container.children[1].focus() : this.show(null, e);
                break;

              case "tab":
                this.hide(e);
                break;

              case "altRightArrow":
                isNullOrUndefined(presetElement) ? document.activeElement === this.cancelButton.element && !0 !== this.applyButton.element.disabled ? this.applyButton.element.focus() : this.leftCalendar.children[1].firstElementChild.focus() : this.cancelButton.element.focus(), 
                e.preventDefault();
                break;

              case "altLeftArrow":
                isNullOrUndefined(presetElement) ? document.activeElement === this.applyButton.element && !0 !== this.applyButton.element.disabled ? this.cancelButton.element.focus() : isNullOrUndefined(this.presetElement) || document.activeElement !== this.cancelButton.element ? this.rightCalendar.children[1].firstElementChild.focus() : this.presetElement.focus() : this.rightCalendar.children[1].firstElementChild.focus(), 
                e.preventDefault();
            }
        }, DateRangePicker.prototype.documentHandler = function(e) {
            if (!isNullOrUndefined(this.popupObj)) {
                var target = e.target;
                this.inputWrapper.container.contains(target) && (isNullOrUndefined(this.popupObj) || closest(target, this.popupWrapper.id)) || ("touchstart" === e.type || "mousedown" === e.type || this.closeEventArgs && !this.closeEventArgs.cancel) && e.preventDefault(), 
                !isNullOrUndefined(this.targetElement) && (isNullOrUndefined(this.targetElement) || target === this.targetElement) || closest(target, "#" + this.popupObj.element.id) || closest(target, ".e-input-group") === this.inputWrapper.container || closest(target, ".e-daterangepicker.e-popup") && !target.classList.contains("e-day") || (this.preventBlur = !1, 
                this.isPopupOpen() && (this.applyFunction(e), this.isMobile || (this.isRangeIconClicked = !1)));
            }
        }, DateRangePicker.prototype.createInput = function() {
            this.inputWrapper = Input.createInput({
                floatLabelType: this.floatLabelType,
                element: this.inputElement,
                properties: {
                    readonly: this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton
                },
                buttons: [ "e-input-group-icon e-range-icon e-icons" ]
            }, this.createElement), attributes(this.inputElement, {
                "aria-readonly": this.readonly ? "true" : "false",
                tabindex: "1",
                "aria-haspopup": "true",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_popup",
                "aria-expanded": "false",
                role: "daterangepicker",
                autocomplete: "off",
                "aria-disabled": this.enabled ? "false" : "true",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false"
            }), Input.addAttributes({
                "aria-label": "select"
            }, this.inputWrapper.buttons[0]), isNullOrUndefined(this.placeholder) || "" === this.placeholder.trim() || Input.addAttributes({
                "aria-placeholder": this.placeholder
            }, this.inputElement), this.setEleWidth(this.width), addClass([ this.inputWrapper.container ], "e-date-range-wrapper"), 
            isNullOrUndefined(this.inputElement.getAttribute("name")) && attributes(this.inputElement, {
                name: this.element.id
            }), "hidden" === this.inputElement.type && (this.inputWrapper.container.style.display = "none"), 
            this.refreshControl(), this.previousEleValue = this.inputElement.value;
        }, DateRangePicker.prototype.setEleWidth = function(width) {
            this.inputWrapper.container.style.width = "string" == typeof width ? this.width : "number" == typeof width ? formatUnit(this.width) : "100%";
        }, DateRangePicker.prototype.refreshControl = function() {
            this.validateMinMax(), this.strictMode && this.validateRangeStrict();
            var isDisabled = this.disabledDates();
            this.strictMode && isDisabled && (this.startValue = this.previousStartValue, this.setProperties({
                startDate: this.startValue
            }, !0), this.endValue = this.previousEndValue, this.setProperties({
                endDate: this.endValue
            }, !0), this.setValue()), this.updateInput(), this.strictMode || this.validateRange(), 
            !this.strictMode && isDisabled && this.clearRange(), isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) || isDisabled || this.disabledDateRender(), 
            this.errorClass(), this.previousStartValue = isNullOrUndefined(this.startValue) || isNaN(+this.startValue) ? null : new Date(+this.startValue), 
            this.previousEndValue = isNullOrUndefined(this.endValue) || isNaN(+this.endValue) ? null : new Date(+this.endValue);
        }, DateRangePicker.prototype.updateInput = function() {
            if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
                var startDate = this.globalize.formatDate(this.startValue, {
                    format: this.format,
                    type: "date",
                    skeleton: "yMd"
                }), endDate = this.globalize.formatDate(this.endValue, {
                    format: this.format,
                    type: "date",
                    skeleton: "yMd"
                });
                Input.setValue(startDate + " " + this.separator + " " + endDate, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.previousStartValue = new Date(+this.startValue), this.previousEndValue = new Date(+this.endValue);
            }
        }, DateRangePicker.prototype.isDateDisabled = function(date) {
            if (isNullOrUndefined(date)) return !1;
            var value = new Date(+date);
            if (+value < +this.min || +value > +this.max) return !0;
            this.virtualRenderCellArgs = {
                date: value,
                isDisabled: !1
            };
            var args = this.virtualRenderCellArgs;
            return this.virtualRenderCellEvent(args), !!args.isDisabled;
        }, DateRangePicker.prototype.disabledDateRender = function() {
            this.disabledDays = [], this.disabledDayCnt = null;
            for (var localDate = new Date(+this.startValue), count = 0; +localDate <= +this.endValue; ) {
                this.virtualRenderCellArgs = {
                    date: localDate,
                    isDisabled: !1
                };
                var args = this.virtualRenderCellArgs;
                this.virtualRenderCellEvent(args), args.isDisabled && (this.disabledDays.push(new Date(+args.date)), 
                +localDate > +this.startValue && +localDate < +this.endValue && count++), this.addDay(localDate, 1, null, this.max, this.min);
            }
            this.disabledDayCnt = count;
        }, DateRangePicker.prototype.virtualRenderCellEvent = function(args) {
            extend(this.virtualRenderCellArgs, {
                name: "renderDayCell"
            }), this.trigger("renderDayCell", args);
        }, DateRangePicker.prototype.disabledDates = function() {
            var isStartDisabled = !1, isEndDisabled = !1;
            return isNullOrUndefined(this.endValue) || isNullOrUndefined(this.startValue) || (isStartDisabled = this.isDateDisabled(this.startValue), 
            isEndDisabled = this.isDateDisabled(this.endValue), this.currentDate = null, this.setValue()), 
            isStartDisabled || isEndDisabled;
        }, DateRangePicker.prototype.setModelValue = function() {
            this.value || null !== this.startDate || null !== this.endDate ? null === this.value || null === this.value.start ? null === this.value ? this.setProperties({
                value: [ this.startDate, this.endDate ]
            }, !0) : null === this.value.start && this.setProperties({
                value: {
                    start: this.startDate,
                    end: this.endDate
                }
            }, !0) : this.value && this.value.length > 0 || this.valueType && this.valueType.length > 0 ? (+this.startDate == +this.value[0] && +this.endDate == +this.value[1] || this.setProperties({
                value: [ this.startDate, this.endDate ]
            }, !0), this.value && null == this.value[0] && null == this.value[1] && this.setProperties({
                value: null
            }, !0)) : this.value && this.value.start && this.setProperties({
                value: {
                    start: this.startDate,
                    end: this.endDate
                }
            }, !0) : this.setProperties({
                value: null
            }, !0), this.createHiddenInput();
        }, DateRangePicker.prototype.dispatchEvent = function(element, type) {
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent(type, !1, !0), element.dispatchEvent(evt), this.firstHiddenChild.dispatchEvent(evt);
        }, DateRangePicker.prototype.changeTrigger = function(e) {
            +this.initStartDate == +this.startValue && +this.initEndDate == +this.endValue || (this.setProperties({
                endDate: this.checkDateValue(this.endValue)
            }, !0), this.setProperties({
                startDate: this.checkDateValue(this.startValue)
            }, !0), this.setModelValue(), this.trigger("change", this.rangeArgs(e))), this.previousEleValue = this.inputElement.value, 
            this.initStartDate = this.checkDateValue(this.startValue), this.initEndDate = this.checkDateValue(this.endValue);
        }, DateRangePicker.prototype.navigateTo = function(view, value) {
            _super.prototype.navigateTo.call(this, view, value);
        }, DateRangePicker.prototype.focusIn = function() {
            if (document.activeElement !== this.inputElement && this.enabled) {
                addClass([ this.inputWrapper.container ], [ "e-input-focus" ]), this.inputElement.focus();
                var focusArguments = {
                    model: this
                };
                this.trigger("focus", focusArguments);
            }
        }, DateRangePicker.prototype.focusOut = function() {
            var isBlur = this.preventBlur;
            document.activeElement === this.inputElement && (removeClass([ this.inputWrapper.container ], [ "e-input-focus" ]), 
            this.preventBlur = !1, this.inputElement.blur(), this.preventBlur = isBlur);
        }, DateRangePicker.prototype.destroy = function() {
            this.hide(null);
            var ariaAttrs = {
                "aria-readonly": this.readonly ? "true" : "false",
                tabindex: "1",
                "aria-haspopup": "true",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_popup",
                "aria-expanded": "false",
                role: "daterangepicker",
                autocomplete: "off",
                "aria-disabled": this.enabled ? "false" : "true",
                autocorrect: "off",
                autocapitalize: "off",
                "aria-invalid": "false",
                spellcheck: "false"
            };
            this.inputElement && (removeClass([ this.inputElement ], [ ROOT$8 ]), EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler), 
            Input.removeAttributes(ariaAttrs, this.inputElement), this.ensureInputAttribute(), 
            this.inputElement.classList.remove("e-input"), isNullOrUndefined(this.inputWrapper) || (EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler), 
            null === this.angularTag && this.inputWrapper.container.parentElement.appendChild(this.inputElement), 
            detach(this.inputWrapper.container))), isNullOrUndefined(this.inputKeyboardModule) || this.isMobile || this.inputKeyboardModule.destroy(), 
            this.popupObj && (this.isMobile || this.clearCalendarEvents()), _super.prototype.destroy.call(this), 
            this.inputWrapper = this.popupWrapper = this.popupObj = this.cloneElement = this.presetElement = null, 
            this.formElement && EventHandler.remove(this.formElement, "reset", this.formResetHandler), 
            isNullOrUndefined(this.firstHiddenChild) || isNullOrUndefined(this.secondHiddenChild) || (detach(this.firstHiddenChild), 
            detach(this.secondHiddenChild), this.firstHiddenChild = this.secondHiddenChild = null, 
            this.inputElement.setAttribute("name", this.element.getAttribute("data-name")), 
            this.inputElement.removeAttribute("data-name"));
        }, DateRangePicker.prototype.ensureInputAttribute = function() {
            for (var attr = 0; attr < this.inputElement.attributes.length; attr++) {
                var prop = this.inputElement.attributes[attr].name;
                isNullOrUndefined(this.cloneElement.getAttribute(prop)) && (("value" === prop.toLowerCase() || isNullOrUndefined(this.cloneElement.getAttribute("value"))) && (this.inputElement.value = ""), 
                this.inputElement.removeAttribute(prop));
            }
        }, DateRangePicker.prototype.getModuleName = function() {
            return "daterangepicker";
        }, DateRangePicker.prototype.getPersistData = function() {
            return this.addOnPersist([ "startDate", "endDate", "value" ]);
        }, DateRangePicker.prototype.getSelectedRange = function() {
            var range;
            return isNullOrUndefined(this.startValue) || isNullOrUndefined(this.endValue) ? range = 0 : (range = Math.round(Math.abs((this.startValue.getTime() - this.endValue.getTime()) / 864e5)) + 1, 
            this.disabledDateRender(), isNullOrUndefined(this.disabledDayCnt) || (range -= this.disabledDayCnt, 
            this.disabledDayCnt = null)), {
                startDate: this.startValue,
                endDate: this.endValue,
                daySpan: range
            };
        }, DateRangePicker.prototype.show = function(element, event) {
            if (this.isMobile && this.popupObj && this.popupObj.refreshPosition(), !(this.enabled && this.readonly || !this.enabled || this.popupObj || this.isPopupOpen() || (element && (this.targetElement = element), 
            this.createPopup(), this.openEventArgs = {
                popup: this.popupObj || null,
                cancel: !1,
                date: this.inputElement.value,
                model: this,
                event: event || null,
                appendTo: document.body
            }, this.trigger("open", this.openEventArgs), this.openEventArgs.cancel))) {
                this.openEventArgs.appendTo.appendChild(this.popupWrapper), this.showPopup(element, event);
                var isPreset = !this.isCustomRange || this.isMobile && this.isCustomRange;
                !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset && this.setScrollPosition();
            }
        }, DateRangePicker.prototype.hide = function(event) {
            this.popupObj && (isNullOrUndefined(this.previousEndValue) && isNullOrUndefined(this.previousStartValue) ? this.clearRange() : (isNullOrUndefined(this.previousStartValue) ? (this.startValue = null, 
            this.setValue()) : (this.startValue = new Date("" + this.previousStartValue), this.setValue(), 
            this.currentDate = new Date("" + this.startValue)), isNullOrUndefined(this.previousEndValue) ? (this.endValue = null, 
            this.setValue()) : (this.endValue = new Date("" + this.previousEndValue), this.setValue())), 
            this.isPopupOpen() && (this.closeEventArgs = {
                cancel: !1,
                popup: this.popupObj,
                date: this.inputElement.value,
                model: this,
                event: event || null
            }, this.trigger("close", this.closeEventArgs), this.closeEventArgs.cancel ? removeClass([ this.inputWrapper.buttons[0] ], ACTIVE$2) : (this.isMobile && (isNullOrUndefined(this.startButton) || isNullOrUndefined(this.endButton) || (EventHandler.remove(this.startButton.element, "click touchstart", this.deviceHeaderClick), 
            EventHandler.remove(this.endButton.element, "click touchstart", this.deviceHeaderClick))), 
            this.popupObj && (this.popupObj.hide(), this.preventBlur && (this.inputElement.focus(), 
            addClass([ this.inputWrapper.container ], [ "e-input-focus" ]))), this.isMobile || (isNullOrUndefined(this.leftKeyboardModule) || isNullOrUndefined(this.rightKeyboardModule) || (this.leftKeyboardModule.destroy(), 
            this.rightKeyboardModule.destroy()), isNullOrUndefined(this.presetElement) || this.presetKeyboardModule.destroy(), 
            isNullOrUndefined(this.cancelButton) || this.btnKeyboardModule.destroy()), this.targetElement = null, 
            removeClass([ document.body ], "e-range-overflow"), EventHandler.remove(document, "mousedown touchstart", this.documentHandler), 
            this.isMobile && this.modal && (this.modal.style.display = "none", this.modal.outerHTML = "", 
            this.modal = null), this.isKeyPopup = this.dateDisabled = !1))), this.updateHiddenInput(), 
            this.isMobile && this.element.removeAttribute("readonly");
        }, DateRangePicker.prototype.setLocale = function() {
            this.globalize = new Internationalization(this.locale), this.l10n.setLocale(this.locale), 
            this.setProperties({
                placeholder: this.l10n.getConstant("placeholder")
            }, !0), Input.setPlaceholder(this.placeholder, this.inputElement), this.updateInput(), 
            this.changeTrigger();
        }, DateRangePicker.prototype.refreshChange = function() {
            this.refreshControl(), this.changeTrigger();
        }, DateRangePicker.prototype.setDate = function() {
            Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            this.refreshChange();
        }, DateRangePicker.prototype.enableInput = function() {
            +this.min <= +this.max && (this.setProperties({
                enabled: !0
            }, !0), Input.setEnabled(this.enabled, this.inputElement), this.element.hasAttribute("disabled") && this.bindEvents());
        }, DateRangePicker.prototype.clearModelvalue = function(newProp, oldProp) {
            this.setProperties({
                startDate: null
            }, !0), this.setProperties({
                endDate: null
            }, !0), oldProp.value && oldProp.value.length > 0 ? this.setProperties({
                value: null
            }, !0) : oldProp.value && oldProp.value.start ? this.setProperties({
                value: {
                    start: null,
                    end: null
                }
            }, !0) : oldProp.value && !oldProp.value.start && this.setProperties({
                value: {
                    start: null,
                    end: null
                }
            }, !0), this.updateValue(), this.setDate();
        }, DateRangePicker.prototype.createHiddenInput = function() {
            isNullOrUndefined(this.firstHiddenChild) && isNullOrUndefined(this.secondHiddenChild) && (this.firstHiddenChild = this.createElement("input"), 
            this.secondHiddenChild = this.createElement("input")), isNullOrUndefined(this.inputElement.getAttribute("name")) || (this.inputElement.setAttribute("data-name", this.inputElement.getAttribute("name")), 
            this.inputElement.removeAttribute("name")), attributes(this.firstHiddenChild, {
                type: "text",
                name: this.inputElement.getAttribute("data-name")
            }), attributes(this.secondHiddenChild, {
                type: "text",
                name: this.inputElement.getAttribute("data-name")
            });
            var format = {
                type: "datetime",
                skeleton: "yMd"
            };
            this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format), 
            this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format), 
            this.inputElement.parentElement.appendChild(this.firstHiddenChild), this.inputElement.parentElement.appendChild(this.secondHiddenChild), 
            this.firstHiddenChild.style.display = "none", this.secondHiddenChild.style.display = "none";
        }, DateRangePicker.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var format = {
                format: this.format,
                type: "date",
                skeleton: "yMd"
            }, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (this.hide(null), prop) {
                  case "width":
                    this.setEleWidth(this.width);
                    break;

                  case "separator":
                    this.previousEleValue = this.inputElement.value, this.setProperties({
                        separator: newProp.separator
                    }, !0), this.updateInput(), this.changeTrigger();
                    break;

                  case "placeholder":
                    Input.setPlaceholder(newProp.placeholder, this.inputElement), this.setProperties({
                        placeholder: newProp.placeholder
                    }, !0);
                    break;

                  case "readonly":
                    Input.setReadonly(this.readonly, this.inputElement), this.inputElement.setAttribute("aria-readonly", "" + this.readonly);
                    break;

                  case "cssClass":
                    this.popupWrapper && (this.popupWrapper.className += " " + newProp.cssClass), this.inputWrapper.container.className += " " + newProp.cssClass, 
                    this.setProperties({
                        cssClass: newProp.cssClass
                    }, !0);
                    break;

                  case "enabled":
                    this.setProperties({
                        enabled: newProp.enabled
                    }, !0), Input.setEnabled(this.enabled, this.inputElement), this.bindEvents();
                    break;

                  case "allowEdit":
                    this.setRangeAllowEdit();
                    break;

                  case "enableRtl":
                    this.setProperties({
                        enableRtl: newProp.enableRtl
                    }, !0), Input.setEnableRtl(this.enableRtl, [ this.inputWrapper.container ]);
                    break;

                  case "zIndex":
                    this.setProperties({
                        zIndex: newProp.zIndex
                    }, !0);
                    break;

                  case "format":
                    this.setProperties({
                        format: newProp.format
                    }, !0), this.updateInput(), this.changeTrigger();
                    break;

                  case "locale":
                    this.globalize = new Internationalization(this.locale), this.l10n.setLocale(this.locale), 
                    this.setProperties({
                        placeholder: this.l10n.getConstant("placeholder")
                    }, !0), Input.setPlaceholder(this.placeholder, this.inputElement), this.setLocale();
                    break;

                  case "showClearButton":
                    Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper), 
                    this.bindClearEvent();
                    break;

                  case "startDate":
                    "string" == typeof newProp.startDate && (newProp.startDate = this.globalize.parseDate(newProp.startDate, format)), 
                    +this.initStartDate != +newProp.startDate && (this.startValue = this.checkDateValue(new Date("" + newProp.startDate)), 
                    this.setDate(), this.setValue());
                    break;

                  case "endDate":
                    "string" == typeof newProp.endDate && (newProp.endDate = this.globalize.parseDate(newProp.endDate, format)), 
                    +this.initEndDate != +newProp.endDate && (this.endValue = this.checkDateValue(new Date("" + newProp.endDate)), 
                    this.setDate(), this.setValue());
                    break;

                  case "value":
                    !isNullOrUndefined(newProp.value) && newProp.value.length > 0 || !isNullOrUndefined(newProp.value) && newProp.value.start ? (this.valueType = newProp.value, 
                    null === newProp.value[0] || null === newProp.value.start ? 1 === newProp.value.length || newProp.value.start ? this.clearModelvalue(newProp, oldProp) : null !== newProp.value[1] && null !== newProp.value.start || this.clearModelvalue(newProp, oldProp) : +this.initStartDate == +newProp.value[0] && +this.initEndDate == +newProp.value[1] && +this.initStartDate == +(newProp.value.start || +this.initEndDate != +newProp.value.start) || (1 === newProp.value.length ? this.modelValue = newProp.value : newProp.value.start && (this.modelValue = newProp.value), 
                    this.updateValue(), this.setDate())) : (isNullOrUndefined(this.value) || null == newProp.value.start) && (this.valueType = newProp.value, 
                    this.startValue = null, this.endValue = null, this.clearModelvalue(newProp, oldProp));
                    break;

                  case "minDays":
                    this.setProperties({
                        minDays: newProp.minDays
                    }, !0), this.refreshChange();
                    break;

                  case "maxDays":
                    this.setProperties({
                        maxDays: newProp.maxDays
                    }, !0), this.refreshChange();
                    break;

                  case "min":
                    this.setProperties({
                        min: this.checkDateValue(new Date("" + newProp.min))
                    }, !0), this.previousEleValue = this.inputElement.value, this.enableInput(), this.refreshChange();
                    break;

                  case "max":
                    this.setProperties({
                        max: this.checkDateValue(new Date("" + newProp.max))
                    }, !0), this.enableInput(), this.refreshChange();
                    break;

                  case "strictMode":
                    this.setProperties({
                        strictMode: newProp.strictMode
                    }, !0), this.refreshChange();
                    break;

                  case "presets":
                    this.setProperties({
                        presets: newProp.presets
                    }, !0), this.processPresets();
                    break;

                  case "floatLabelType":
                    this.floatLabelType = newProp.floatLabelType, Input.removeFloating(this.inputWrapper), 
                    Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
                }
            }
        }, __decorate$36([ Property(null) ], DateRangePicker.prototype, "value", void 0), 
        __decorate$36([ Property(!1) ], DateRangePicker.prototype, "enablePersistence", void 0), 
        __decorate$36([ Property(!1) ], DateRangePicker.prototype, "enableRtl", void 0), 
        __decorate$36([ Property(new Date(1900, 0, 1)) ], DateRangePicker.prototype, "min", void 0), 
        __decorate$36([ Property(new Date(2099, 11, 31)) ], DateRangePicker.prototype, "max", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "locale", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "firstDayOfWeek", void 0), 
        __decorate$36([ Property(!1) ], DateRangePicker.prototype, "weekNumber", void 0), 
        __decorate$36([ Event() ], DateRangePicker.prototype, "created", void 0), __decorate$36([ Event() ], DateRangePicker.prototype, "destroyed", void 0), 
        __decorate$36([ Event() ], DateRangePicker.prototype, "change", void 0), __decorate$36([ Event() ], DateRangePicker.prototype, "navigated", void 0), 
        __decorate$36([ Event() ], DateRangePicker.prototype, "renderDayCell", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "startDate", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "endDate", void 0), 
        __decorate$36([ Collection([ {} ], Presets) ], DateRangePicker.prototype, "presets", void 0), 
        __decorate$36([ Property("") ], DateRangePicker.prototype, "width", void 0), __decorate$36([ Property(1e3) ], DateRangePicker.prototype, "zIndex", void 0), 
        __decorate$36([ Property(!0) ], DateRangePicker.prototype, "showClearButton", void 0), 
        __decorate$36([ Property(!0) ], DateRangePicker.prototype, "showTodayButton", void 0), 
        __decorate$36([ Property("Month") ], DateRangePicker.prototype, "start", void 0), 
        __decorate$36([ Property("Month") ], DateRangePicker.prototype, "depth", void 0), 
        __decorate$36([ Property("") ], DateRangePicker.prototype, "cssClass", void 0), 
        __decorate$36([ Property("-") ], DateRangePicker.prototype, "separator", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "minDays", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "maxDays", void 0), 
        __decorate$36([ Property(!1) ], DateRangePicker.prototype, "strictMode", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "format", void 0), 
        __decorate$36([ Property(!0) ], DateRangePicker.prototype, "enabled", void 0), __decorate$36([ Property(!1) ], DateRangePicker.prototype, "readonly", void 0), 
        __decorate$36([ Property(!0) ], DateRangePicker.prototype, "allowEdit", void 0), 
        __decorate$36([ Property("Never") ], DateRangePicker.prototype, "floatLabelType", void 0), 
        __decorate$36([ Property(null) ], DateRangePicker.prototype, "placeholder", void 0), 
        __decorate$36([ Event() ], DateRangePicker.prototype, "open", void 0), __decorate$36([ Event() ], DateRangePicker.prototype, "close", void 0), 
        __decorate$36([ Event() ], DateRangePicker.prototype, "select", void 0), __decorate$36([ Event() ], DateRangePicker.prototype, "focus", void 0), 
        __decorate$36([ Event() ], DateRangePicker.prototype, "blur", void 0), DateRangePicker = __decorate$36([ NotifyPropertyChanges ], DateRangePicker);
    }(CalendarBase), function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }()), __decorate$37 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, DAY = new Date().getDate(), MONTH$1 = new Date().getMonth(), YEAR$1 = new Date().getFullYear(), FOCUS$2 = "e-input-focus", LISTCLASS$1 = cssClass.li;
    !function(TimePickerBase) {
        TimePickerBase.createListItems = function(createdEl, min, max, globalize, timeFormat, step) {
            var start, end, interval = 6e4 * step, listItems = [], timeCollections = [];
            for (start = +min.setMilliseconds(0), end = +max.setMilliseconds(0); end >= start; ) timeCollections.push(start), 
            listItems.push(globalize.formatDate(new Date(start), {
                format: timeFormat,
                type: "time"
            })), start += interval;
            return {
                collection: timeCollections,
                list: ListBase.createList(createdEl, listItems, null, !0)
            };
        };
    }(TimePickerBase || (TimePickerBase = {}));
    !function(_super) {
        function TimePicker(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.liCollections = [], _this.timeCollections = [], _this.disableItemCollection = [], 
            _this;
        }
        __extends$50(TimePicker, _super), TimePicker.prototype.preRender = function() {
            this.keyConfigure = {
                enter: "enter",
                escape: "escape",
                end: "end",
                tab: "tab",
                home: "home",
                down: "downarrow",
                up: "uparrow",
                left: "leftarrow",
                right: "rightarrow",
                open: "alt+downarrow",
                close: "alt+uparrow"
            }, this.cloneElement = this.element.cloneNode(!0), this.inputElement = this.element, 
            this.angularTag = null, "EJS-TIMEPICKER" === this.element.tagName && (this.angularTag = this.element.tagName, 
            this.inputElement = this.createElement("input"), this.element.appendChild(this.inputElement));
        }, TimePicker.prototype.render = function() {
            this.initialize(), this.createInputElement(), this.setTimeAllowEdit(), this.setEnable(), 
            this.validateInterval(), this.bindEvents(), this.validateDisable(), this.setValue(this.getFormattedValue(this.value));
        }, TimePicker.prototype.setTimeAllowEdit = function() {
            this.allowEdit ? this.readonly || this.inputElement.removeAttribute("readonly") : attributes(this.inputElement, {
                readonly: ""
            });
        }, TimePicker.prototype.validateDisable = function() {
            this.setMinMax(this.initMin, this.initMax), this.popupCreation(), this.popupObj.hide(), 
            isNaN(+this.value) || null === this.value || this.valueIsDisable(this.value) || (this.strictMode && this.resetState(), 
            this.initValue = null, this.initMax = this.getDateObject(this.initMax), this.initMin = this.getDateObject(this.initMin), 
            this.timeCollections = this.liCollections = [], this.setMinMax(this.initMin, this.initMax));
        }, TimePicker.prototype.validationAttribute = function(target, input) {
            var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
            input.setAttribute("name", name), target.removeAttribute("name");
            for (var attributes = [ "required", "aria-required", "form" ], i = 0; i < attributes.length; i++) if (!isNullOrUndefined(target.getAttribute(attributes[i]))) {
                var attr = target.getAttribute(attributes[i]);
                input.setAttribute(attributes[i], attr), target.removeAttribute(attributes[i]);
            }
        }, TimePicker.prototype.initialize = function() {
            this.globalize = new Internationalization(this.locale), this.defaultCulture = new Internationalization("en"), 
            this.setProperties({
                value: this.checkDateValue(new Date("" + this.value))
            }, !0), this.setProperties({
                min: this.checkDateValue(new Date("" + this.min))
            }, !0), this.setProperties({
                max: this.checkDateValue(new Date("" + this.max))
            }, !0), null !== this.angularTag && this.validationAttribute(this.element, this.inputElement), 
            this.checkAttributes();
            var localeText = {
                placeholder: this.placeholder
            };
            this.l10n = new L10n("timepicker", localeText, this.locale), this.setProperties({
                placeholder: this.placeholder || this.l10n.getConstant("placeholder")
            }, !0), this.initValue = this.checkDateValue(this.value), this.initMin = this.checkDateValue(this.min), 
            this.initMax = this.checkDateValue(this.max), this.isNavigate = this.isPreventBlur = this.isTextSelected = !1, 
            this.activeIndex = this.valueWithMinutes = this.prevDate = null, isNullOrUndefined(this.element.getAttribute("id")) ? (this.element.id = getUniqueID("ej2_timepicker"), 
            null !== this.angularTag && attributes(this.inputElement, {
                id: this.element.id + "_input"
            })) : null !== this.angularTag && (this.inputElement.id = this.element.getAttribute("id") + "_input"), 
            isNullOrUndefined(this.inputElement.getAttribute("name")) && attributes(this.inputElement, {
                name: this.element.id
            });
        }, TimePicker.prototype.checkDateValue = function(value) {
            return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
        }, TimePicker.prototype.createInputElement = function() {
            this.inputWrapper = Input.createInput({
                element: this.inputElement,
                floatLabelType: this.floatLabelType,
                properties: {
                    readonly: this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton
                },
                buttons: [ " e-input-group-icon e-time-icon e-icons" ]
            }, this.createElement), this.inputWrapper.container.style.width = this.setWidth(this.width), 
            attributes(this.inputElement, {
                "aria-haspopup": "true",
                "aria-autocomplete": "list",
                tabindex: "0",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_options",
                "aria-expanded": "false",
                role: "combobox",
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false",
                "aria-disabled": "false",
                "aria-invalid": "false"
            }), this.isNullOrEmpty(this.inputStyle) || Input.addAttributes({
                style: this.inputStyle
            }, this.inputElement), addClass([ this.inputWrapper.container ], "e-time-wrapper");
        }, TimePicker.prototype.destroy = function() {
            this.hide(), this.unBindEvents();
            var ariaAttribute = {
                "aria-haspopup": "true",
                "aria-autocomplete": "list",
                tabindex: "0",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_options",
                "aria-expanded": "false",
                role: "combobox",
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false",
                "aria-disabled": "true",
                "aria-invalid": "false"
            };
            this.inputElement && (Input.removeAttributes(ariaAttribute, this.inputElement), 
            null === this.angularTag && this.inputWrapper.container.parentElement.appendChild(this.inputElement), 
            this.ensureInputAttribute(), this.enableElement([ this.inputElement ]), this.inputElement.classList.remove("e-input"), 
            isNullOrUndefined(this.cloneElement.getAttribute("disabled")) && Input.setEnabled(!0, this.inputElement, this.floatLabelType)), 
            this.inputWrapper.container && remove(this.inputWrapper.container), this.inputWrapper = this.popupWrapper = this.cloneElement = void 0, 
            this.liCollections = this.timeCollections = this.disableItemCollection = [], isNullOrUndefined(this.rippleFn) || this.rippleFn(), 
            _super.prototype.destroy.call(this);
            var form = closest(this.element, "form");
            form && EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
        }, TimePicker.prototype.ensureInputAttribute = function() {
            for (var i = 0; i < this.inputElement.attributes.length; i++) {
                var prop = this.inputElement.attributes[i].name;
                isNullOrUndefined(this.cloneElement.getAttribute(prop)) && (("value" === prop.toLowerCase() || isNullOrUndefined(this.cloneElement.getAttribute("value"))) && (this.inputElement.value = ""), 
                this.inputElement.removeAttribute(prop));
            }
        }, TimePicker.prototype.popupCreation = function() {
            this.popupWrapper = this.createElement("div", {
                className: "e-timepicker e-popup",
                attrs: {
                    id: this.element.id + "_popup",
                    style: "visibility:hidden"
                }
            }), isNullOrUndefined(this.cssClass) || (this.popupWrapper.className += " " + this.cssClass), 
            !isNullOrUndefined(this.step) && this.step > 0 && (this.generateList(), append([ this.listWrapper ], this.popupWrapper)), 
            document.body.appendChild(this.popupWrapper), this.addSelection(), this.renderPopup(), 
            this.setScrollPosition();
        }, TimePicker.prototype.getPopupHeight = function() {
            var height = parseInt("240px", 10), popupHeight = this.popupWrapper.getBoundingClientRect().height;
            return popupHeight > height ? height : popupHeight;
        }, TimePicker.prototype.generateList = function() {
            this.createListItems(), this.wireListEvents();
            var rippleModel = {
                duration: 300,
                selector: "." + LISTCLASS$1
            };
            this.rippleFn = rippleEffect(this.listWrapper, rippleModel), this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS$1);
        }, TimePicker.prototype.popupCalculation = function() {
            var left = 0;
            if (Browser.isDevice) {
                var firstItem = this.isEmptyList() ? this.listTag : this.liCollections[0];
                left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - (this.enableRtl ? parseInt(getComputedStyle(this.inputElement).paddingRight, 10) : parseInt(getComputedStyle(this.inputElement).paddingLeft, 10)));
            }
            return left;
        }, TimePicker.prototype.isEmptyList = function() {
            return !isNullOrUndefined(this.liCollections) && 0 === this.liCollections.length || isNullOrUndefined(this.liCollections);
        }, TimePicker.prototype.renderPopup = function() {
            var _this = this;
            this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
            var offset = Browser.isDevice ? this.setPopupPosition() : 2;
            this.popupObj = new Popup(this.popupWrapper, {
                width: this.setPopupWidth(this.width),
                zIndex: this.zIndex,
                targetType: "relative",
                collision: {
                    X: "flip",
                    Y: "flip"
                },
                relateTo: this.inputWrapper.container,
                position: {
                    X: "left",
                    Y: "bottom"
                },
                enableRtl: this.enableRtl,
                offsetY: offset,
                offsetX: this.popupCalculation(),
                open: function() {
                    _this.popupWrapper.style.visibility = "visible", addClass([ _this.inputWrapper.buttons[0] ], "e-active");
                },
                close: function() {
                    removeClass([ _this.inputWrapper.buttons[0] ], "e-active"), _this.unWireListEvents(), 
                    _this.inputElement.setAttribute("aria-activedescendant", "null"), remove(_this.popupObj.element), 
                    _this.popupObj.destroy(), _this.popupWrapper.innerHTML = "", _this.listWrapper = _this.popupWrapper = _this.listTag = void 0;
                }
            }), Browser.isDevice || (this.popupObj.collision = {
                X: "none",
                Y: "flip"
            }), this.popupObj.element.style.maxHeight = "240px";
        }, TimePicker.prototype.getFormattedValue = function(value) {
            return isNullOrUndefined(this.checkDateValue(value)) ? null : this.globalize.formatDate(value, {
                skeleton: "medium",
                type: "time"
            });
        }, TimePicker.prototype.getDateObject = function(text) {
            if (!this.isNullOrEmpty(text)) {
                var dateValue = this.createDateObj(text), value = !this.isNullOrEmpty(this.initValue);
                if (this.checkDateValue(dateValue)) {
                    var date = value ? this.initValue.getDate() : DAY, month = value ? this.initValue.getMonth() : MONTH$1, year = value ? this.initValue.getFullYear() : YEAR$1;
                    return new Date(year, month, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds());
                }
            }
            return null;
        }, TimePicker.prototype.removeErrorClass = function() {
            removeClass([ this.inputWrapper.container ], "e-error"), attributes(this.inputElement, {
                "aria-invalid": "false"
            });
        }, TimePicker.prototype.checkErrorState = function(val) {
            var value = this.getDateObject(val);
            this.validateState(value) ? this.removeErrorClass() : (addClass([ this.inputWrapper.container ], "e-error"), 
            attributes(this.inputElement, {
                "aria-invalid": "true"
            }));
        }, TimePicker.prototype.validateInterval = function() {
            !isNullOrUndefined(this.step) && this.step > 0 ? this.enableElement([ this.inputWrapper.buttons[0] ]) : this.disableTimeIcon();
        }, TimePicker.prototype.disableTimeIcon = function() {
            this.disableElement([ this.inputWrapper.buttons[0] ]), this.hide();
        }, TimePicker.prototype.disableElement = function(element) {
            addClass(element, "e-disabled");
        }, TimePicker.prototype.enableElement = function(element) {
            removeClass(element, "e-disabled");
        }, TimePicker.prototype.selectInputText = function() {
            this.inputElement.setSelectionRange(0, this.inputElement.value.length);
        }, TimePicker.prototype.getMeridianText = function() {
            return "en" === this.locale || "en-US" === this.locale ? getValue("dayPeriods.format.wide", getDefaultDateObject()) : getValue("main." + this.locale + ".dates.calendars.gregorian.dayPeriods.format.abbreviated", cldrData);
        }, TimePicker.prototype.getCursorSelection = function() {
            var input = this.inputElement, start = 0, end = 0;
            return isNaN(input.selectionStart) || (start = input.selectionStart, end = input.selectionEnd), 
            {
                start: Math.abs(start),
                end: Math.abs(end)
            };
        }, TimePicker.prototype.getActiveElement = function() {
            return isNullOrUndefined(this.popupWrapper) ? null : this.popupWrapper.querySelectorAll(".e-active");
        }, TimePicker.prototype.isNullOrEmpty = function(value) {
            return !!(isNullOrUndefined(value) || "string" == typeof value && "" === value.trim());
        }, TimePicker.prototype.setWidth = function(width) {
            return width = "number" == typeof width ? formatUnit(width) : "string" == typeof width ? width.match(/px|%|em/) ? width : formatUnit(width) : "100%";
        }, TimePicker.prototype.setPopupWidth = function(width) {
            if ((width = this.setWidth(width)).indexOf("%") > -1) {
                width = (this.containerStyle.width * parseFloat(width) / 100).toString() + "px";
            }
            if (Browser.isDevice) {
                var firstItem = this.isEmptyList() ? this.listTag : this.liCollections[0];
                width = parseInt(width, 10) + 2 * (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).textIndent, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) + "px";
            }
            return width;
        }, TimePicker.prototype.setScrollPosition = function() {
            var element;
            this.getPopupHeight();
            isNullOrUndefined(element = this.selectedElement) ? this.popupWrapper && this.checkDateValue(this.scrollTo) && this.setScrollTo() : this.findScrollTop(element);
        }, TimePicker.prototype.findScrollTop = function(element) {
            var listHeight = this.getPopupHeight(), nextEle = element.nextElementSibling, height = nextEle ? nextEle.offsetTop : element.offsetTop, liHeight = element.getBoundingClientRect().height;
            height + element.offsetTop > listHeight ? this.popupWrapper.scrollTop = nextEle ? height - (listHeight / 2 + liHeight / 2) : height : this.popupWrapper.scrollTop = 0;
        }, TimePicker.prototype.setScrollTo = function() {
            var element;
            if (isNullOrUndefined(this.popupWrapper)) this.popupWrapper.scrollTop = 0; else {
                var items = this.popupWrapper.querySelectorAll("." + LISTCLASS$1);
                if (items.length) {
                    var initialTime = this.timeCollections[0], scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
                    element = items[Math.round((scrollTime - initialTime) / (6e4 * this.step))];
                }
            }
            isNullOrUndefined(element) ? this.popupWrapper.scrollTop = 0 : this.findScrollTop(element);
        }, TimePicker.prototype.getText = function() {
            return isNullOrUndefined(this.checkDateValue(this.value)) ? "" : this.getValue(this.value);
        }, TimePicker.prototype.getValue = function(value) {
            return isNullOrUndefined(this.checkDateValue(value)) ? null : this.globalize.formatDate(value, {
                format: this.cldrTimeFormat(),
                type: "time"
            });
        }, TimePicker.prototype.cldrDateFormat = function() {
            return "en" === this.locale || "en-US" === this.locale ? getValue("dateFormats.short", getDefaultDateObject()) : this.getCultureDateObject(cldrData, "" + this.locale);
        }, TimePicker.prototype.cldrTimeFormat = function() {
            return this.isNullOrEmpty(this.format) ? "en" === this.locale || "en-US" === this.locale ? getValue("timeFormats.short", getDefaultDateObject()) : this.getCultureTimeObject(cldrData, "" + this.locale) : this.format;
        }, TimePicker.prototype.dateToNumeric = function() {
            return "en" === this.locale || "en-US" === this.locale ? getValue("timeFormats.medium", getDefaultDateObject()) : getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.medium", cldrData);
        }, TimePicker.prototype.getExactDateTime = function(value) {
            return isNullOrUndefined(this.checkDateValue(value)) ? null : this.globalize.formatDate(value, {
                format: this.dateToNumeric(),
                type: "time"
            });
        }, TimePicker.prototype.setValue = function(value) {
            var time = this.checkValue(value);
            this.strictMode || this.validateState(time) ? this.isNullOrEmpty(time) ? (this.initValue = null, 
            this.validateMinMax(this.value, this.min, this.max)) : this.initValue = this.compareFormatChange(time) : (null === this.checkDateValue(this.valueWithMinutes) && (this.initValue = this.valueWithMinutes = null), 
            this.validateMinMax(this.value, this.min, this.max)), this.updateInput(!0, this.initValue);
        }, TimePicker.prototype.compareFormatChange = function(value) {
            return isNullOrUndefined(value) ? null : value !== this.getText() ? this.getDateObject(value) : this.getDateObject(this.value);
        }, TimePicker.prototype.updatePlaceHolder = function() {
            Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
        }, TimePicker.prototype.popupHandler = function(e) {
            Browser.isDevice && this.element.setAttribute("readonly", "readonly"), e.preventDefault(), 
            this.isPopupOpen() ? this.closePopup(0, e) : this.show(e);
        }, TimePicker.prototype.mouseDownHandler = function() {
            if (!this.readonly) {
                this.getCursorSelection();
                this.inputElement.setSelectionRange(0, 0), EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
            }
        }, TimePicker.prototype.mouseUpHandler = function(event) {
            if (!this.readonly) {
                event.preventDefault(), EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
                var curPos = this.getCursorSelection();
                0 === curPos.start && curPos.end === this.inputElement.value.length || (this.inputElement.value.length > 0 && (this.cursorDetails = this.focusSelection()), 
                this.inputElement.setSelectionRange(this.cursorDetails.start, this.cursorDetails.end));
            }
        }, TimePicker.prototype.focusSelection = function() {
            var regex = new RegExp("^[a-zA-Z0-9]+$"), split = this.inputElement.value.split("");
            split.push(" ");
            var curPos = this.getCursorSelection(), start = 0, end = 0, isSeparator = !1;
            if (this.isTextSelected) start = curPos.start, end = curPos.end, this.isTextSelected = !1; else for (var i = 0; i < split.length; i++) if (regex.test(split[i]) || (end = i, 
            isSeparator = !0), isSeparator) {
                if (curPos.start >= start && curPos.end <= end) {
                    end = end, this.isTextSelected = !0;
                    break;
                }
                start = i + 1, isSeparator = !1;
            }
            return {
                start: start,
                end: end
            };
        }, TimePicker.prototype.inputHandler = function(event) {
            if (!this.readonly && this.enabled) switch ("right" !== event.action && "left" !== event.action && "tab" !== event.action && event.preventDefault(), 
            event.action) {
              case "home":
              case "end":
              case "up":
              case "down":
                this.keyHandler(event);
                break;

              case "enter":
                this.isNavigate ? (this.selectedElement = this.liCollections[this.activeIndex], 
                this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]), this.updateValue(this.valueWithMinutes, event)) : this.updateValue(this.inputElement.value, event), 
                this.hide(), addClass([ this.inputWrapper.container ], FOCUS$2), this.isNavigate = !1;
                break;

              case "open":
                this.show(event);
                break;

              case "escape":
                Input.setValue(this.objToString(this.value), this.inputElement, this.floatLabelType, this.showClearButton), 
                this.previousState(this.value), this.hide();
                break;

              case "close":
                this.hide();
                break;

              default:
                this.isNavigate = !1;
            }
        }, TimePicker.prototype.onMouseClick = function(event) {
            var target = event.target, li = this.selectedElement = closest(target, "." + LISTCLASS$1);
            this.setSelection(li, event), li && li.classList.contains(LISTCLASS$1) && (this.hide(), 
            addClass([ this.inputWrapper.container ], FOCUS$2));
        }, TimePicker.prototype.closePopup = function(delay, e) {
            if (this.isPopupOpen() && this.popupWrapper) {
                var args = {
                    popup: this.popupObj,
                    event: e || null,
                    cancel: !1,
                    name: "open"
                };
                if (this.trigger("close", args), !args.cancel) {
                    var animModel = {
                        name: "FadeOut",
                        duration: 50,
                        delay: delay || 0
                    };
                    this.popupObj.hide(new Animation(animModel)), removeClass([ this.inputWrapper.container ], [ "e-icon-anim" ]), 
                    attributes(this.inputElement, {
                        "aria-expanded": "false"
                    }), EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
                }
            }
            Browser.isDevice && this.element.removeAttribute("readonly");
        }, TimePicker.prototype.checkValueChange = function(event, isNavigation) {
            if (this.strictMode || this.validateState(this.valueWithMinutes)) if (isNavigation) {
                var value = this.getDateObject(new Date(this.timeCollections[this.activeIndex]));
                +this.prevDate != +value && this.valueProcess(event, value);
            } else (this.prevValue !== this.inputElement.value || isNullOrUndefined(this.checkDateValue(this.value))) && this.valueProcess(event, this.compareFormatChange(this.inputElement.value)); else null === this.checkDateValue(this.valueWithMinutes) && (this.initValue = this.valueWithMinutes = null), 
            this.setProperties({
                value: this.compareFormatChange(this.inputElement.value)
            }, !0), this.initValue = this.valueWithMinutes = this.compareFormatChange(this.inputElement.value), 
            this.prevValue = this.inputElement.value, +this.prevDate != +this.value && this.changeEvent(event);
        }, TimePicker.prototype.onMouseOver = function(event) {
            var currentLi = closest(event.target, "." + LISTCLASS$1);
            this.setHover(currentLi, "e-hover");
        }, TimePicker.prototype.setHover = function(li, className) {
            this.enabled && this.isValidLI(li) && !li.classList.contains(className) && (this.removeHover(className), 
            addClass([ li ], className), "e-navigation" === className && li.setAttribute("aria-selected", "true"));
        }, TimePicker.prototype.setSelection = function(li, event) {
            this.isValidLI(li) && !li.classList.contains("e-active") && (this.checkValue(li.getAttribute("data-value")), 
            this.selectedElement = li, this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li), 
            this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]), addClass([ this.selectedElement ], "e-active"), 
            this.selectedElement.setAttribute("aria-selected", "true"), this.checkValueChange(event, !0));
        }, TimePicker.prototype.onMouseLeave = function() {
            this.removeHover("e-hover");
        }, TimePicker.prototype.scrollHandler = function() {
            "timepicker" === this.getModuleName() && Browser.isDevice || this.hide();
        }, TimePicker.prototype.setMinMax = function(minVal, maxVal) {
            isNullOrUndefined(this.checkDateValue(minVal)) && (this.initMin = this.getDateObject("12:00:00 AM")), 
            isNullOrUndefined(this.checkDateValue(maxVal)) && (this.initMax = this.getDateObject("11:59:59 PM"));
        }, TimePicker.prototype.validateMinMax = function(dateVal, minVal, maxVal) {
            var value = dateVal instanceof Date ? dateVal : this.getDateObject(dateVal);
            return isNullOrUndefined(this.checkDateValue(value)) ? +this.createDateObj(this.getFormattedValue(this.initMin)) > +this.createDateObj(this.getFormattedValue(this.initMax)) && this.disableTimeIcon() : dateVal = this.strictOperation(this.initMin, this.initMax, dateVal, value), 
            this.strictMode && (dateVal = this.valueIsDisable(dateVal) ? dateVal : null), this.checkErrorState(dateVal), 
            dateVal;
        }, TimePicker.prototype.valueIsDisable = function(value) {
            if (this.disableItemCollection.length > 0) {
                if (this.disableItemCollection.length === this.timeCollections.length) return !1;
                for (var time = value instanceof Date ? this.objToString(value) : value, index = 0; index < this.disableItemCollection.length; index++) if (time === this.disableItemCollection[index]) return !1;
            }
            return !0;
        }, TimePicker.prototype.validateState = function(val) {
            if (!this.strictMode) {
                if (!this.valueIsDisable(val)) return !1;
                var value = this.setCurrentDate(this.getDateObject(val)), maxValue = this.setCurrentDate(this.getDateObject(this.initMax)), minValue = this.setCurrentDate(this.getDateObject(this.initMin));
                if (isNullOrUndefined(this.checkDateValue(value))) {
                    if (+maxValue < +minValue || "" !== this.inputElement.value) return !1;
                } else if (+value > +maxValue || +value < +minValue) return !1;
            }
            return !0;
        }, TimePicker.prototype.strictOperation = function(minimum, maximum, dateVal, val) {
            var maxValue = this.createDateObj(this.getFormattedValue(maximum)), minValue = this.createDateObj(this.getFormattedValue(minimum)), value = this.createDateObj(this.getFormattedValue(val));
            if (this.strictMode) {
                if (+minValue > +maxValue) return this.disableTimeIcon(), this.initValue = this.getDateObject(maxValue), 
                Input.setValue(this.getValue(this.initValue), this.inputElement, this.floatLabelType, this.showClearButton), 
                this.inputElement.value;
                if (+minValue >= +value) return this.getDateObject(minValue);
                if (+value >= +maxValue || +minValue == +maxValue) return this.getDateObject(maxValue);
            } else if (+minValue > +maxValue && (this.disableTimeIcon(), !isNaN(+this.createDateObj(dateVal)))) return dateVal;
            return dateVal;
        }, TimePicker.prototype.bindEvents = function() {
            EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.popupHandler, this), 
            EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this), EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this), 
            EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this), this.showClearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
            var form = closest(this.element, "form");
            form && EventHandler.add(form, "reset", this.formResetHandler.bind(this)), Browser.isDevice || (this.inputEvent = new KeyboardEvents(this.inputWrapper.container, {
                keyAction: this.inputHandler.bind(this),
                keyConfigs: this.keyConfigure,
                eventName: "keydown"
            }), this.showClearButton && EventHandler.add(this.inputElement, "mousedown", this.mouseDownHandler, this));
        }, TimePicker.prototype.formResetHandler = function() {
            this.inputElement.getAttribute("value") ? this.value = this.checkDateValue(new Date("" + this.element.getAttribute("value"))) : (this.value = null, 
            this.inputElement && (Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            this.removeErrorClass()));
        }, TimePicker.prototype.inputChangeHandler = function(e) {
            e.stopPropagation();
        }, TimePicker.prototype.unBindEvents = function() {
            EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.popupHandler), 
            EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler), EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler), 
            EventHandler.remove(this.inputElement, "change", this.inputChangeHandler), this.inputEvent && this.inputEvent.destroy(), 
            EventHandler.remove(this.inputElement, "mousedown touchstart", this.mouseDownHandler), 
            EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.clearHandler);
            var form = closest(this.element, "form");
            form && EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
        }, TimePicker.prototype.bindClearEvent = function() {
            this.showClearButton && this.inputWrapper.clearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
        }, TimePicker.prototype.clearHandler = function(e) {
            e.preventDefault(), this.clear(e), this.popupWrapper && (this.popupWrapper.scrollTop = 0);
        }, TimePicker.prototype.clear = function(event) {
            this.setProperties({
                value: null
            }, !0), this.initValue = null, this.resetState(), this.changeEvent(event);
        }, TimePicker.prototype.setZIndex = function() {
            this.popupObj && (this.popupObj.zIndex = this.zIndex, this.popupObj.dataBind());
        }, TimePicker.prototype.checkAttributes = function() {
            for (var value, _i = 0, attributes_1 = [ "step", "disabled", "readonly", "style", "name", "value", "min", "max", "placeholder" ]; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) switch (prop) {
                  case "disabled":
                    var enabled = isNullOrUndefined(this.inputElement.getAttribute(prop));
                    this.setProperties({
                        enabled: enabled
                    }, !0);
                    break;

                  case "readonly":
                    var readonly = !isNullOrUndefined(this.inputElement.getAttribute(prop));
                    this.setProperties({
                        readonly: readonly
                    }, !0);
                    break;

                  case "style":
                    this.inputStyle = this.inputElement.getAttribute(prop);
                    break;

                  case "name":
                    this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
                    break;

                  case "step":
                    this.step = parseInt(this.inputElement.getAttribute(prop), 10);
                    break;

                  case "placeholder":
                    this.placeholder = this.inputElement.getAttribute(prop);
                    break;

                  case "min":
                    value = new Date(this.inputElement.getAttribute(prop)), isNullOrUndefined(this.checkDateValue(value)) || this.setProperties({
                        min: value
                    }, !0);
                    break;

                  case "max":
                    value = new Date(this.inputElement.getAttribute(prop)), isNullOrUndefined(this.checkDateValue(value)) || this.setProperties({
                        max: value
                    }, !0);
                    break;

                  case "value":
                    value = new Date(this.inputElement.getAttribute(prop)), isNullOrUndefined(this.checkDateValue(value)) || (this.initValue = value, 
                    this.updateInput(!1, this.initValue));
                }
            }
        }, TimePicker.prototype.setCurrentDate = function(value) {
            return isNullOrUndefined(this.checkDateValue(value)) ? null : new Date(YEAR$1, MONTH$1, DAY, value.getHours(), value.getMinutes(), value.getSeconds());
        }, TimePicker.prototype.getTextFormat = function() {
            var time = 0;
            if ("a" === this.cldrTimeFormat().split(" ")[0] || 0 === this.cldrTimeFormat().indexOf("a")) time = 1; else if (this.cldrTimeFormat().indexOf("a") < 0) for (var strArray = this.cldrTimeFormat().split(" "), i = 0; i < strArray.length; i++) if (strArray[i].toLowerCase().indexOf("h") >= 0) {
                time = i;
                break;
            }
            return time;
        }, TimePicker.prototype.updateValue = function(value, event) {
            var val;
            if (this.isNullOrEmpty(value)) this.resetState(); else if (val = this.checkValue(value), 
            this.strictMode) {
                var inputVal = null === val && value.trim().length > 0 ? this.previousState(this.prevDate) : this.inputElement.value;
                Input.setValue(inputVal, this.inputElement, this.floatLabelType, this.showClearButton);
            }
            this.checkValueChange(event, "string" != typeof value);
        }, TimePicker.prototype.previousState = function(date) {
            for (var value = this.getDateObject(date), i = 0; i < this.timeCollections.length; i++) if (+value === this.timeCollections[i]) {
                this.activeIndex = i, this.selectedElement = this.liCollections[i], this.valueWithMinutes = new Date(this.timeCollections[i]);
                break;
            }
            return this.prevValue;
        }, TimePicker.prototype.resetState = function() {
            this.removeSelection(), Input.setValue("", this.inputElement, this.floatLabelType, !1), 
            this.valueWithMinutes = this.activeIndex = null, this.strictMode || this.checkErrorState(null);
        }, TimePicker.prototype.objToString = function(val) {
            return isNullOrUndefined(this.checkDateValue(val)) ? null : this.globalize.formatDate(val, {
                format: this.cldrTimeFormat(),
                type: "time"
            });
        }, TimePicker.prototype.checkValue = function(value) {
            if (!this.isNullOrEmpty(value)) {
                var date = value instanceof Date ? value : this.getDateObject(value);
                return this.validateValue(date, value);
            }
            return this.resetState(), this.valueWithMinutes = null;
        }, TimePicker.prototype.validateValue = function(date, value) {
            var time, val = this.validateMinMax(value, this.min, this.max), newval = this.createDateObj(val);
            if (this.getFormattedValue(newval) !== this.getFormattedValue(this.value) ? (this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval, 
            time = this.objToString(this.valueWithMinutes)) : (this.strictMode && (date = newval), 
            this.valueWithMinutes = this.checkDateValue(date), time = this.objToString(this.valueWithMinutes)), 
            !this.strictMode && isNullOrUndefined(time)) {
                var value_1 = val.trim().length > 0 ? val : "";
                Input.setValue(value_1, this.inputElement, this.floatLabelType, this.showClearButton);
            } else Input.setValue(time, this.inputElement, this.floatLabelType, this.showClearButton);
            return time;
        }, TimePicker.prototype.findNextElement = function(event) {
            var textVal = this.inputElement.value, value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes), timeVal = null, count = this.liCollections.length;
            if (isNullOrUndefined(this.checkDateValue(value)) && isNullOrUndefined(this.activeIndex)) {
                index = this.validLiElement(0, "down" !== event.action);
                this.activeIndex = index, this.selectedElement = this.liCollections[index], this.elementValue(new Date(this.timeCollections[index]));
            } else {
                if ("home" === event.action) {
                    var index = this.validLiElement(0);
                    timeVal = +this.createDateObj(new Date(this.timeCollections[index])), this.activeIndex = index;
                } else if ("end" === event.action) {
                    var index = this.validLiElement(this.timeCollections.length - 1, !0);
                    timeVal = +this.createDateObj(new Date(this.timeCollections[index])), this.activeIndex = index;
                } else if ("down" === event.action) for (var i = 0; i < count; i++) {
                    if (+value < this.timeCollections[i]) {
                        index = this.validLiElement(i);
                        timeVal = +this.createDateObj(new Date(this.timeCollections[index])), this.activeIndex = index;
                        break;
                    }
                    if (i === count - 1) {
                        index = this.validLiElement(0);
                        timeVal = +this.createDateObj(new Date(this.timeCollections[index])), this.activeIndex = index;
                        break;
                    }
                } else for (i = count - 1; i >= 0; i--) {
                    if (+value > this.timeCollections[i]) {
                        index = this.validLiElement(i, !0);
                        timeVal = +this.createDateObj(new Date(this.timeCollections[index])), this.activeIndex = index;
                        break;
                    }
                    if (0 === i) {
                        index = this.validLiElement(count - 1);
                        timeVal = +this.createDateObj(new Date(this.timeCollections[index])), this.activeIndex = index;
                        break;
                    }
                }
                this.selectedElement = this.liCollections[this.activeIndex], this.elementValue(isNullOrUndefined(timeVal) ? null : new Date(timeVal));
            }
        }, TimePicker.prototype.elementValue = function(value) {
            isNullOrUndefined(this.checkDateValue(value)) || this.checkValue(value);
        }, TimePicker.prototype.validLiElement = function(index, backward) {
            var elementIndex = null, items = isNullOrUndefined(this.popupWrapper) ? this.liCollections : this.popupWrapper.querySelectorAll("." + LISTCLASS$1), isCheck = !0;
            if (items.length) if (backward) for (var i = index; i >= 0; i--) {
                if (!items[i].classList.contains("e-disabled")) {
                    elementIndex = i;
                    break;
                }
                0 === i && isCheck && (index = i = items.length, isCheck = !1);
            } else for (i = index; i <= items.length - 1; i++) {
                if (!items[i].classList.contains("e-disabled")) {
                    elementIndex = i;
                    break;
                }
                i === items.length - 1 && isCheck && (index = i = -1, isCheck = !1);
            }
            return elementIndex;
        }, TimePicker.prototype.keyHandler = function(event) {
            if (!(isNullOrUndefined(this.step) || this.step <= 0 || this.inputWrapper.buttons[0].classList.contains("e-disabled"))) {
                var count = this.timeCollections.length;
                if (isNullOrUndefined(this.getActiveElement()) || 0 === this.getActiveElement().length) if (this.liCollections.length > 0) if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
                    var index = this.validLiElement(0, "down" !== event.action);
                    this.activeIndex = index, this.selectedElement = this.liCollections[index], this.elementValue(new Date(this.timeCollections[index]));
                } else this.findNextElement(event); else this.findNextElement(event); else {
                    var nextItem = void 0;
                    if (event.keyCode >= 37 && event.keyCode <= 40) {
                        index = 40 === event.keyCode || 39 === event.keyCode ? ++this.activeIndex : --this.activeIndex;
                        this.activeIndex = index = this.activeIndex === count ? 0 : this.activeIndex, this.activeIndex = index = this.activeIndex < 0 ? count - 1 : this.activeIndex, 
                        this.activeIndex = index = this.validLiElement(this.activeIndex, 40 !== event.keyCode && 39 !== event.keyCode), 
                        nextItem = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
                    } else if ("home" === event.action) {
                        index = this.validLiElement(0);
                        this.activeIndex = index, nextItem = this.timeCollections[index];
                    } else if ("end" === event.action) {
                        index = this.validLiElement(count - 1, !0);
                        this.activeIndex = index, nextItem = this.timeCollections[index];
                    }
                    this.selectedElement = this.liCollections[this.activeIndex], this.elementValue(new Date(nextItem));
                }
                this.isNavigate = !0, this.setHover(this.selectedElement, "e-navigation"), this.setActiveDescendant(), 
                this.selectInputText(), !this.isPopupOpen() || null === this.selectedElement || event && "click" === event.type || this.setScrollPosition();
            }
        }, TimePicker.prototype.setPopupPosition = function() {
            var offsetValue, popupHeight = this.getPopupHeight(), element = this.getActiveElement(), liHeight = this.liCollections[0].getBoundingClientRect().height, listHeight = popupHeight / 2, height = 0 === element.length ? this.liCollections[0].offsetTop : element[0].offsetTop, lastItemOffsetValue = this.liCollections[this.liCollections.length - 1].offsetTop, ulPadding = parseInt(getComputedStyle(this.listTag).paddingTop, 10);
            if (lastItemOffsetValue - listHeight < height) {
                offsetValue = (popupHeight / liHeight - (this.liCollections.length - this.activeIndex)) * liHeight - ulPadding - 2;
            } else offsetValue = height + liHeight > listHeight ? listHeight - liHeight / 2 : height;
            return -(offsetValue = offsetValue + 2 + (liHeight - this.containerStyle.height) / 2);
        }, TimePicker.prototype.getCultureTimeObject = function(ld, c) {
            return getValue("main." + c + ".dates.calendars.gregorian.timeFormats.short", ld);
        }, TimePicker.prototype.getCultureDateObject = function(ld, c) {
            return getValue("main." + c + ".dates.calendars.gregorian.dateFormats.short", ld);
        }, TimePicker.prototype.wireListEvents = function() {
            EventHandler.add(this.listWrapper, "click", this.onMouseClick, this), Browser.isDevice || (EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this));
        }, TimePicker.prototype.unWireListEvents = function() {
            this.listWrapper && (EventHandler.remove(this.listWrapper, "click", this.onMouseClick), 
            Browser.isDevice || (EventHandler.remove(this.listWrapper, "mouseover", this.onMouseOver), 
            EventHandler.remove(this.listWrapper, "mouseout", this.onMouseLeave)));
        }, TimePicker.prototype.valueProcess = function(event, value) {
            var result = isNullOrUndefined(this.checkDateValue(value)) ? null : value;
            +this.prevDate != +result && (this.initValue = result, this.changeEvent(event));
        }, TimePicker.prototype.changeEvent = function(e) {
            this.addSelection(), this.updateInput(!0, this.initValue);
            var eventArgs = {
                event: e || null,
                value: this.value,
                text: this.inputElement.value,
                isInteracted: !isNullOrUndefined(e),
                element: this.element
            };
            eventArgs.value = this.valueWithMinutes || this.getDateObject(this.inputElement.value), 
            this.prevDate = this.valueWithMinutes || this.getDateObject(this.inputElement.value), 
            this.trigger("change", eventArgs);
        }, TimePicker.prototype.updateInput = function(isUpdate, date) {
            isUpdate && (this.prevValue = this.getValue(date)), this.prevDate = this.valueWithMinutes = date, 
            this.setProperties({
                value: date
            }, !0);
        }, TimePicker.prototype.setActiveDescendant = function() {
            isNullOrUndefined(this.selectedElement) ? attributes(this.inputElement, {
                "aria-activedescendant": "null"
            }) : attributes(this.inputElement, {
                "aria-activedescendant": this.selectedElement.getAttribute("id")
            });
        }, TimePicker.prototype.removeSelection = function() {
            if (this.removeHover("e-hover"), !isNullOrUndefined(this.popupWrapper)) {
                var items = this.popupWrapper.querySelectorAll(".e-active");
                items.length && (removeClass(items, "e-active"), items[0].removeAttribute("aria-selected"));
            }
        }, TimePicker.prototype.removeHover = function(className) {
            var hoveredItem = this.getHoverItem(className);
            hoveredItem && hoveredItem.length && (removeClass(hoveredItem, className), "e-navigation" === className && hoveredItem[0].removeAttribute("aria-selected"));
        }, TimePicker.prototype.getHoverItem = function(className) {
            var hoveredItem;
            return isNullOrUndefined(this.popupWrapper) || (hoveredItem = this.popupWrapper.querySelectorAll("." + className)), 
            hoveredItem;
        }, TimePicker.prototype.setActiveClass = function() {
            if (!isNullOrUndefined(this.popupWrapper)) {
                var items = this.popupWrapper.querySelectorAll("." + LISTCLASS$1);
                if (items.length) for (var i = 0; i < items.length; i++) if (this.timeCollections[i] === +this.getDateObject(this.valueWithMinutes)) {
                    items[i].setAttribute("aria-selected", "true"), this.selectedElement = items[i], 
                    this.activeIndex = i;
                    break;
                }
            }
        }, TimePicker.prototype.addSelection = function() {
            this.selectedElement = null, this.removeSelection(), this.setActiveClass(), isNullOrUndefined(this.selectedElement) || (addClass([ this.selectedElement ], "e-active"), 
            this.selectedElement.setAttribute("aria-selected", "true"));
        }, TimePicker.prototype.isValidLI = function(li) {
            return li && li.classList.contains(LISTCLASS$1) && !li.classList.contains("e-disabled");
        }, TimePicker.prototype.createDateObj = function(val) {
            var today = this.globalize.formatDate(new Date(), {
                skeleton: "short",
                type: "date"
            }), value = null;
            return "string" == typeof val ? val.toUpperCase().indexOf("AM") > -1 || val.toUpperCase().indexOf("PM") > -1 ? (today = this.defaultCulture.formatDate(new Date(), {
                skeleton: "short",
                type: "date"
            }), isNullOrUndefined(value = isNaN(+new Date(today + " " + val)) ? null : new Date(new Date(today + " " + val).setMilliseconds(0))) && (value = this.TimeParse(today, val))) : value = this.TimeParse(today, val) : val instanceof Date && (value = val), 
            value;
        }, TimePicker.prototype.TimeParse = function(today, val) {
            var value;
            return value = this.globalize.parseDate(today + " " + val, {
                format: this.cldrDateFormat() + " " + this.cldrTimeFormat(),
                type: "datetime"
            }), value = isNullOrUndefined(value) ? this.globalize.parseDate(today + " " + val, {
                format: this.cldrDateFormat() + " " + this.dateToNumeric(),
                type: "datetime"
            }) : value, value = isNullOrUndefined(value) ? value : new Date(value.setMilliseconds(0));
        }, TimePicker.prototype.createListItems = function() {
            var _this = this;
            this.listWrapper = this.createElement("div", {
                className: "e-content",
                attrs: {
                    tabindex: "0"
                }
            });
            var start, end, interval = 6e4 * this.step, listItems = [];
            for (this.timeCollections = [], this.disableItemCollection = [], start = +this.getDateObject(this.initMin).setMilliseconds(0), 
            end = +this.getDateObject(this.initMax).setMilliseconds(0); end >= start; ) this.timeCollections.push(start), 
            listItems.push(this.globalize.formatDate(new Date(start), {
                format: this.cldrTimeFormat(),
                type: "time"
            })), start += interval;
            var listBaseOptions = {
                itemCreated: function(args) {
                    var eventArgs = {
                        element: args.item,
                        text: args.text,
                        value: _this.getDateObject(args.text),
                        isDisabled: !1
                    };
                    _this.trigger("itemRender", eventArgs), eventArgs.isDisabled && eventArgs.element.classList.add("e-disabled"), 
                    eventArgs.element.classList.contains("e-disabled") && _this.disableItemCollection.push(eventArgs.element.getAttribute("data-value"));
                }
            };
            this.listTag = ListBase.createList(this.createElement, listItems, listBaseOptions, !0), 
            attributes(this.listTag, {
                role: "listbox",
                "aria-hidden": "false",
                id: this.element.id + "_options"
            }), append([ this.listTag ], this.listWrapper);
        }, TimePicker.prototype.documentClickHandler = function(event) {
            event.preventDefault();
            var target = event.target;
            closest(target, "#" + this.popupObj.element.id) || target === this.inputElement || target === (this.inputWrapper && this.inputWrapper.buttons[0]) || target === (this.inputWrapper && this.inputWrapper.clearButton) || target === (this.inputWrapper && this.inputWrapper.container) ? target !== this.inputElement && (Browser.isDevice || (this.isPreventBlur = (Browser.isIE || "edge" === Browser.info.name) && document.activeElement === this.inputElement, 
            event.preventDefault())) : this.isPopupOpen() && this.hide();
        }, TimePicker.prototype.setEnableRtl = function() {
            Input.setEnableRtl(this.enableRtl, [ this.inputWrapper.container ]), this.popupObj && (this.popupObj.enableRtl = this.enableRtl, 
            this.popupObj.dataBind());
        }, TimePicker.prototype.setEnable = function() {
            Input.setEnabled(this.enabled, this.inputElement, this.floatLabelType), this.enabled ? (removeClass([ this.inputWrapper.container ], "e-disabled"), 
            attributes(this.inputElement, {
                "aria-disabled": "false"
            })) : (this.hide(), addClass([ this.inputWrapper.container ], "e-disabled"), attributes(this.inputElement, {
                "aria-disabled": "true"
            }));
        }, TimePicker.prototype.getProperty = function(date, val) {
            "min" === val ? (this.initMin = this.checkDateValue(new Date("" + date.min)), this.setProperties({
                min: this.initMin
            }, !0)) : (this.initMax = this.checkDateValue(new Date("" + date.max)), this.setProperties({
                max: this.initMax
            }, !0)), "" === this.inputElement.value ? this.validateMinMax(this.value, this.min, this.max) : this.checkValue(this.inputElement.value), 
            this.checkValueChange(null, !1);
        }, TimePicker.prototype.inputBlurHandler = function(e) {
            if (this.isPreventBlur && this.isPopupOpen()) this.inputElement.focus(); else {
                this.closePopup(0, e), removeClass([ this.inputWrapper.container ], [ FOCUS$2 ]);
                var blurArguments = {
                    model: this
                };
                this.trigger("blur", blurArguments), this.getText() !== this.inputElement.value ? this.updateValue(this.inputElement.value, e) : 0 === this.inputElement.value.trim().length && this.resetState(), 
                this.cursorDetails = null, this.isNavigate = !1;
            }
        }, TimePicker.prototype.focusOut = function() {
            if (document.activeElement === this.inputElement) {
                this.inputElement.blur();
                var blurArguments = {
                    model: this
                };
                this.trigger("blur", blurArguments);
            }
        }, TimePicker.prototype.isPopupOpen = function() {
            return !(!this.popupWrapper || !this.popupWrapper.classList.contains("e-timepicker"));
        }, TimePicker.prototype.inputFocusHandler = function() {
            var focusArguments = {
                model: this
            };
            this.readonly || Browser.isDevice || this.selectInputText(), this.trigger("focus", focusArguments);
        }, TimePicker.prototype.focusIn = function() {
            if (document.activeElement !== this.inputElement && this.enabled) {
                this.inputElement.focus();
                var focusArguments = {
                    model: this
                };
                this.trigger("focus", focusArguments);
            }
        }, TimePicker.prototype.hide = function() {
            this.closePopup(100, null);
        }, TimePicker.prototype.show = function(event) {
            if (!(this.enabled && this.readonly || !this.enabled || this.popupWrapper)) {
                var args = {
                    popup: this.popupObj || null,
                    cancel: !1,
                    event: event || null,
                    name: "open"
                };
                if (this.trigger("open", args), !args.cancel && !this.isPopupOpen() && !this.inputWrapper.buttons[0].classList.contains("e-disabled")) {
                    if (this.inputElement.focus(), this.popupCreation(), !args.cancel) {
                        var openAnimation = {
                            name: "FadeIn",
                            duration: 50
                        };
                        this.popupObj.refreshPosition(this.inputElement), 1e3 === this.zIndex ? this.popupObj.show(new Animation(openAnimation), this.element) : this.popupObj.show(new Animation(openAnimation), null), 
                        this.setActiveDescendant(), attributes(this.inputElement, {
                            "aria-expanded": "true"
                        }), addClass([ this.inputWrapper.container ], FOCUS$2);
                    }
                    EventHandler.add(document, "mousedown", this.documentClickHandler, this);
                }
            }
        }, TimePicker.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, TimePicker.prototype.getModuleName = function() {
            return "timepicker";
        }, TimePicker.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "placeholder":
                    Input.setPlaceholder(newProp.placeholder, this.inputElement), this.inputElement.setAttribute("aria-placeholder", newProp.placeholder);
                    break;

                  case "readonly":
                    Input.setReadonly(this.readonly, this.inputElement, this.floatLabelType), this.readonly && this.hide();
                    break;

                  case "cssClass":
                    this.inputWrapper.container.className += " " + newProp.cssClass, this.popupWrapper && (this.popupWrapper.className += " " + newProp.cssClass), 
                    this.setProperties({
                        cssClass: newProp.cssClass
                    }, !0);
                    break;

                  case "enabled":
                    this.setProperties({
                        enabled: newProp.enabled
                    }, !0), this.setEnable();
                    break;

                  case "allowEdit":
                    this.setTimeAllowEdit();
                    break;

                  case "enableRtl":
                    this.setProperties({
                        enableRtl: newProp.enableRtl
                    }, !0), this.setEnableRtl();
                    break;

                  case "zIndex":
                    this.setProperties({
                        zIndex: newProp.zIndex
                    }, !0), this.setZIndex();
                    break;

                  case "min":
                  case "max":
                    this.getProperty(newProp, prop);
                    break;

                  case "showClearButton":
                    Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper), 
                    this.bindClearEvent();
                    break;

                  case "locale":
                    this.setProperties({
                        locale: newProp.locale
                    }, !0), this.globalize = new Internationalization(this.locale), this.l10n.setLocale(this.locale), 
                    this.updatePlaceHolder(), this.setValue(this.value);
                    break;

                  case "width":
                    setStyleAttribute(this.inputWrapper.container, {
                        width: this.setWidth(newProp.width)
                    }), this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
                    break;

                  case "format":
                    this.setProperties({
                        format: newProp.format
                    }, !0), this.setValue(this.value);
                    break;

                  case "value":
                    "string" == typeof newProp.value ? (this.setProperties({
                        value: this.checkDateValue(new Date(newProp.value))
                    }, !0), newProp.value = this.value) : newProp.value = this.checkDateValue(new Date("" + newProp.value)), 
                    this.initValue = newProp.value, newProp.value = this.compareFormatChange(this.checkValue(newProp.value)), 
                    this.checkValueChange(null, !1);
                    break;

                  case "floatLabelType":
                    this.floatLabelType = newProp.floatLabelType, Input.removeFloating(this.inputWrapper), 
                    Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
                    break;

                  case "strictMode":
                    newProp.strictMode && this.checkErrorState(null), this.setProperties({
                        strictMode: newProp.strictMode
                    }, !0), this.checkValue(this.inputElement.value), this.checkValueChange(null, !1);
                    break;

                  case "scrollTo":
                    this.checkDateValue(new Date("" + newProp.scrollTo)) ? (this.popupWrapper && this.setScrollTo(), 
                    this.setProperties({
                        scrollTo: newProp.scrollTo
                    }, !0)) : this.setProperties({
                        scrollTo: null
                    }, !0);
                }
            }
        }, __decorate$37([ Property(null) ], TimePicker.prototype, "width", void 0), __decorate$37([ Property(null) ], TimePicker.prototype, "cssClass", void 0), 
        __decorate$37([ Property(!1) ], TimePicker.prototype, "strictMode", void 0), __decorate$37([ Property(null) ], TimePicker.prototype, "format", void 0), 
        __decorate$37([ Property(!0) ], TimePicker.prototype, "enabled", void 0), __decorate$37([ Property(!1) ], TimePicker.prototype, "readonly", void 0), 
        __decorate$37([ Property("Never") ], TimePicker.prototype, "floatLabelType", void 0), 
        __decorate$37([ Property(null) ], TimePicker.prototype, "placeholder", void 0), 
        __decorate$37([ Property(1e3) ], TimePicker.prototype, "zIndex", void 0), __decorate$37([ Property(!1) ], TimePicker.prototype, "enablePersistence", void 0), 
        __decorate$37([ Property(!0) ], TimePicker.prototype, "showClearButton", void 0), 
        __decorate$37([ Property(30) ], TimePicker.prototype, "step", void 0), __decorate$37([ Property(null) ], TimePicker.prototype, "scrollTo", void 0), 
        __decorate$37([ Property(null) ], TimePicker.prototype, "value", void 0), __decorate$37([ Property(null) ], TimePicker.prototype, "min", void 0), 
        __decorate$37([ Property(null) ], TimePicker.prototype, "max", void 0), __decorate$37([ Property(!0) ], TimePicker.prototype, "allowEdit", void 0), 
        __decorate$37([ Property(!1) ], TimePicker.prototype, "enableRtl", void 0), __decorate$37([ Event() ], TimePicker.prototype, "change", void 0), 
        __decorate$37([ Event() ], TimePicker.prototype, "created", void 0), __decorate$37([ Event() ], TimePicker.prototype, "destroyed", void 0), 
        __decorate$37([ Event() ], TimePicker.prototype, "open", void 0), __decorate$37([ Event() ], TimePicker.prototype, "itemRender", void 0), 
        __decorate$37([ Event() ], TimePicker.prototype, "close", void 0), __decorate$37([ Event() ], TimePicker.prototype, "blur", void 0), 
        __decorate$37([ Event() ], TimePicker.prototype, "focus", void 0), TimePicker = __decorate$37([ NotifyPropertyChanges ], TimePicker);
    }(Component);
    var Global, __extends$51 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$38 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, DAY$1 = new Date().getDate(), MONTH$2 = new Date().getMonth(), YEAR$2 = new Date().getFullYear(), HOUR = new Date().getHours(), MINUTE = new Date().getMinutes(), SECOND = new Date().getSeconds(), MILLISECOND = new Date().getMilliseconds(), ROOT$10 = "e-datetimepicker", LISTCLASS$2 = cssClass.li, DateTimePicker = function(_super) {
        function DateTimePicker(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.valueWithMinutes = null, _this.previousDateTime = null, _this;
        }
        return __extends$51(DateTimePicker, _super), DateTimePicker.prototype.focusHandler = function() {
            addClass([ this.inputWrapper.container ], "e-input-focus");
        }, DateTimePicker.prototype.focusIn = function() {
            _super.prototype.focusIn.call(this);
        }, DateTimePicker.prototype.focusOut = function() {
            document.activeElement === this.inputElement && (this.inputElement.blur(), removeClass([ this.inputWrapper.container ], [ "e-input-focus" ]));
        }, DateTimePicker.prototype.blurHandler = function(e) {
            if (this.isTimePopupOpen() && this.isPreventBlur) this.inputElement.focus(); else {
                removeClass([ this.inputWrapper.container ], "e-input-focus");
                var blurArguments = {
                    model: this
                };
                this.isTimePopupOpen() && this.hide(e), this.trigger("blur", blurArguments);
            }
        }, DateTimePicker.prototype.destroy = function() {
            this.popupObject && this.popupObject.element.classList.contains("e-popup") && (this.dateTimeWrapper = void 0, 
            this.liCollections = this.timeCollections = [], isNullOrUndefined(this.rippleFn) || this.rippleFn());
            var ariaAttribute = {
                "aria-live": "assertive",
                "aria-atomic": "true",
                "aria-invalid": "false",
                "aria-haspopup": "true",
                "aria-activedescendant": "null",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false",
                "aria-owns": this.element.id + "_options",
                "aria-expanded": "false",
                role: "combobox",
                autocomplete: "off"
            };
            this.inputElement && (Input.removeAttributes(ariaAttribute, this.inputElement), 
            this.inputElement.removeAttribute("aria-placeholder")), this.isCalendar() && (this.popupWrapper && detach(this.popupWrapper), 
            this.popupObject = this.popupWrapper = null, this.keyboardHandler.destroy()), this.unBindInputEvents(), 
            _super.prototype.destroy.call(this);
        }, DateTimePicker.prototype.render = function() {
            this.timekeyConfigure = {
                enter: "enter",
                escape: "escape",
                end: "end",
                tab: "tab",
                home: "home",
                down: "downarrow",
                up: "uparrow",
                left: "leftarrow",
                right: "rightarrow",
                open: "alt+downarrow",
                close: "alt+uparrow"
            }, this.valueWithMinutes = null, this.previousDateTime = null, this.isPreventBlur = !1, 
            this.cloneElement = this.element.cloneNode(!0), this.dateTimeFormat = this.cldrDateTimeFormat(), 
            this.initValue = this.value, this.checkAttributes();
            var localeText = {
                placeholder: this.placeholder
            };
            this.l10n = new L10n("datetimepicker", localeText, this.locale), this.setProperties({
                placeholder: this.placeholder || this.l10n.getConstant("placeholder")
            }, !0), _super.prototype.render.call(this), this.createInputElement(), this.bindInputEvents(), 
            this.setValue(), this.previousDateTime = this.value && new Date(+this.value);
        }, DateTimePicker.prototype.setValue = function() {
            if (this.initValue = this.validateMinMaxRange(this.value), !this.strictMode && this.isDateObject(this.initValue)) {
                var value = this.validateMinMaxRange(this.initValue);
                Input.setValue(this.getFormattedValue(value), this.inputElement, this.floatLabelType, this.showClearButton), 
                this.setProperties({
                    value: value
                }, !0);
            } else isNullOrUndefined(this.value) && (this.initValue = null, this.setProperties({
                value: null
            }, !0));
            this.valueWithMinutes = this.value, _super.prototype.updateInput.call(this);
        }, DateTimePicker.prototype.validateMinMaxRange = function(value) {
            var result = value;
            return this.isDateObject(value) ? result = this.validateValue(value) : +this.min > +this.max && this.disablePopupButton(!0), 
            this.checkValidState(result), result;
        }, DateTimePicker.prototype.checkValidState = function(value) {
            this.isValidState = !0, this.strictMode || (+value > +this.max || +value < +this.min) && (this.isValidState = !1), 
            this.checkErrorState();
        }, DateTimePicker.prototype.checkErrorState = function() {
            this.isValidState ? removeClass([ this.inputWrapper.container ], "e-error") : addClass([ this.inputWrapper.container ], "e-error"), 
            attributes(this.inputElement, {
                "aria-invalid": this.isValidState ? "false" : "true"
            });
        }, DateTimePicker.prototype.validateValue = function(value) {
            var dateVal = value;
            return this.strictMode ? +this.min > +this.max ? (this.disablePopupButton(!0), dateVal = this.max) : +value < +this.min ? dateVal = this.min : +value > +this.max && (dateVal = this.max) : +this.min > +this.max && (this.disablePopupButton(!0), 
            dateVal = value), dateVal;
        }, DateTimePicker.prototype.disablePopupButton = function(isDisable) {
            isDisable ? (addClass([ this.inputWrapper.buttons[0], this.timeIcon ], "e-disabled"), 
            this.hide()) : removeClass([ this.inputWrapper.buttons[0], this.timeIcon ], "e-disabled");
        }, DateTimePicker.prototype.getFormattedValue = function(value) {
            if (isNullOrUndefined(value)) return null;
            var dateOptions = {
                format: this.cldrDateTimeFormat(),
                type: "dateTime",
                skeleton: "yMd"
            };
            return this.globalize.formatDate(value, dateOptions);
        }, DateTimePicker.prototype.isDateObject = function(value) {
            return !isNullOrUndefined(value) && !isNaN(+value);
        }, DateTimePicker.prototype.createInputElement = function() {
            removeClass([ this.inputElement ], "e-datepicker"), removeClass([ this.inputWrapper.container ], "e-date-wrapper"), 
            addClass([ this.inputWrapper.container ], "e-datetime-wrapper"), addClass([ this.inputElement ], ROOT$10), 
            this.renderTimeIcon();
        }, DateTimePicker.prototype.renderTimeIcon = function() {
            this.timeIcon = Input.appendSpan("e-input-group-icon e-time-icon e-icons", this.inputWrapper.container);
        }, DateTimePicker.prototype.bindInputEvents = function() {
            EventHandler.add(this.timeIcon, "mousedown", this.timeHandler, this), EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateHandler, this), 
            EventHandler.add(this.inputElement, "blur", this.blurHandler, this), EventHandler.add(this.inputElement, "focus", this.focusHandler, this), 
            this.keyboardHandler = new KeyboardEvents(this.inputElement, {
                eventName: "keydown",
                keyAction: this.inputKeyAction.bind(this),
                keyConfigs: this.keyConfigs
            });
        }, DateTimePicker.prototype.unBindInputEvents = function() {
            EventHandler.remove(this.timeIcon, "mousedown touchstart", this.timeHandler), EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateHandler), 
            this.inputElement && (EventHandler.remove(this.inputElement, "blur", this.blurHandler), 
            EventHandler.remove(this.inputElement, "focus", this.focusHandler)), this.keyboardHandler && this.keyboardHandler.destroy();
        }, DateTimePicker.prototype.cldrTimeFormat = function() {
            return this.isNullOrEmpty(this.timeFormat) ? "en" === this.locale || "en-US" === this.locale ? getValue("timeFormats.short", getDefaultDateObject()) : this.getCultureTimeObject(cldrData, "" + this.locale) : this.timeFormat;
        }, DateTimePicker.prototype.cldrDateTimeFormat = function() {
            var dateFormat = new Internationalization(this.locale).getDatePattern({
                skeleton: "yMd"
            });
            return this.isNullOrEmpty(this.format) ? dateFormat + " " + this.getCldrFormat("time") : this.format;
        }, DateTimePicker.prototype.getCldrFormat = function(type) {
            return "en" === this.locale || "en-US" === this.locale ? getValue("timeFormats.short", getDefaultDateObject()) : this.getCultureTimeObject(cldrData, "" + this.locale);
        }, DateTimePicker.prototype.isNullOrEmpty = function(value) {
            return !!(isNullOrUndefined(value) || "string" == typeof value && "" === value.trim());
        }, DateTimePicker.prototype.getCultureTimeObject = function(ld, c) {
            return getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.short", ld);
        }, DateTimePicker.prototype.timeHandler = function(e) {
            Browser.isDevice && this.element.setAttribute("readonly", "readonly"), e.currentTarget === this.timeIcon && e.preventDefault(), 
            this.enabled && !this.readonly && (this.isDatePopupOpen() && _super.prototype.hide.call(this, e), 
            this.isTimePopupOpen() ? this.closePopup(e) : (this.inputElement.focus(), this.popupCreation("time", e), 
            addClass([ this.inputWrapper.container ], [ "e-input-focus" ])));
        }, DateTimePicker.prototype.dateHandler = function(e) {
            e.currentTarget === this.inputWrapper.buttons[0] && e.preventDefault(), this.enabled && !this.readonly && (this.isTimePopupOpen() && this.closePopup(e), 
            isNullOrUndefined(this.popupWrapper) || this.popupCreation("date", e));
        }, DateTimePicker.prototype.show = function(type, e) {
            this.enabled && this.readonly || !this.enabled || ("time" !== type || this.dateTimeWrapper ? this.popupObj || (this.isTimePopupOpen() && this.hide(e), 
            _super.prototype.show.call(this), this.popupCreation("date", e)) : (this.isDatePopupOpen() && this.hide(e), 
            this.popupCreation("time", e)));
        }, DateTimePicker.prototype.toggle = function(e) {
            this.isDatePopupOpen() ? (_super.prototype.hide.call(this, e), this.show("time", null)) : this.isTimePopupOpen() ? (this.hide(e), 
            _super.prototype.show.call(this, null, e), this.popupCreation("date", null)) : this.show(null, e);
        }, DateTimePicker.prototype.listCreation = function() {
            var value = isNullOrUndefined(this.value) ? "" !== this.inputElement.value ? this.globalize.parseDate(this.inputElement.value, {
                format: this.cldrDateTimeFormat(),
                type: "datetime"
            }) : new Date() : this.value;
            this.valueWithMinutes = value, this.listWrapper = createElement("div", {
                className: "e-content",
                attrs: {
                    tabindex: "0"
                }
            });
            var min = this.startTime(value), max = this.endTime(value), listDetails = TimePickerBase.createListItems(this.createElement, min, max, this.globalize, this.cldrTimeFormat(), this.step);
            this.timeCollections = listDetails.collection, this.listTag = listDetails.list, 
            attributes(this.listTag, {
                role: "listbox",
                "aria-hidden": "false",
                id: this.element.id + "_options"
            }), append([ listDetails.list ], this.listWrapper), this.wireTimeListEvents();
            var rippleModel = {
                duration: 300,
                selector: "." + LISTCLASS$2
            };
            this.rippleFn = rippleEffect(this.listWrapper, rippleModel), this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS$2);
        }, DateTimePicker.prototype.popupCreation = function(type, e) {
            Browser.isDevice && this.element.setAttribute("readonly", "readonly"), "date" === type ? !this.readonly && this.popupWrapper && (addClass([ this.popupWrapper ], "e-datetimepopup-wrapper"), 
            attributes(this.popupWrapper, {
                id: this.element.id + "_datepopup"
            })) : this.readonly || (this.dateTimeWrapper = createElement("div", {
                className: ROOT$10 + " e-popup",
                attrs: {
                    id: this.element.id + "_timepopup",
                    style: "visibility:hidden ; display:block"
                }
            }), isNullOrUndefined(this.cssClass) || (this.dateTimeWrapper.className += " " + this.cssClass), 
            !isNullOrUndefined(this.step) && this.step > 0 && (this.listCreation(), append([ this.listWrapper ], this.dateTimeWrapper)), 
            document.body.appendChild(this.dateTimeWrapper), this.addTimeSelection(), this.renderPopup(), 
            this.setTimeScrollPosition(), this.openPopup(e), this.popupObject.refreshPosition(this.inputElement));
        }, DateTimePicker.prototype.openPopup = function(e) {
            if (this.preventArgs = {
                cancel: !1,
                popup: this.popupObject,
                event: e || null
            }, this.trigger("open", this.preventArgs), !this.preventArgs.cancel && !this.readonly) {
                var openAnimation = {
                    name: "FadeIn",
                    duration: 100
                };
                1e3 === this.zIndex ? this.popupObject.show(new Animation(openAnimation), this.element) : this.popupObject.show(new Animation(openAnimation), null), 
                addClass([ this.inputWrapper.container ], [ "e-icon-anim" ]), attributes(this.inputElement, {
                    "aria-expanded": "true"
                }), EventHandler.add(document, "mousedown", this.documentClickHandler, this);
            }
        }, DateTimePicker.prototype.documentClickHandler = function(event) {
            event.preventDefault();
            var target = event.target;
            closest(target, "#" + (this.popupObject && this.popupObject.element.id)) || target === this.inputElement || target === this.timeIcon || target === this.inputWrapper.container ? target !== this.inputElement && (Browser.isDevice || (this.isPreventBlur = (Browser.isIE || "edge" === Browser.info.name) && document.activeElement === this.inputElement, 
            event.preventDefault())) : this.isTimePopupOpen() && this.hide(event);
        }, DateTimePicker.prototype.isTimePopupOpen = function() {
            return !(!this.dateTimeWrapper || !this.dateTimeWrapper.classList.contains("" + ROOT$10));
        }, DateTimePicker.prototype.isDatePopupOpen = function() {
            return !(!this.popupWrapper || !this.popupWrapper.classList.contains("e-datetimepopup-wrapper"));
        }, DateTimePicker.prototype.renderPopup = function() {
            var _this = this;
            this.containerStyle = this.inputWrapper.container.getBoundingClientRect(), Browser.isDevice && (this.timeModal = createElement("div"), 
            this.timeModal.className = ROOT$10 + " e-time-modal", document.body.className += " e-time-overflow", 
            this.timeModal.style.display = "block", document.body.appendChild(this.timeModal));
            this.popupObject = new Popup(this.dateTimeWrapper, {
                width: this.setPopupWidth(),
                zIndex: this.zIndex,
                targetType: "container",
                collision: Browser.isDevice ? {
                    X: "fit",
                    Y: "fit"
                } : {
                    X: "flip",
                    Y: "flip"
                },
                relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
                position: Browser.isDevice ? {
                    X: "center",
                    Y: "center"
                } : {
                    X: "left",
                    Y: "bottom"
                },
                enableRtl: this.enableRtl,
                offsetY: 4,
                open: function() {
                    _this.dateTimeWrapper.style.visibility = "visible", addClass([ _this.timeIcon ], "e-active"), 
                    Browser.isDevice || (_this.inputEvent = new KeyboardEvents(_this.inputWrapper.container, {
                        keyAction: _this.TimeKeyActionHandle.bind(_this),
                        keyConfigs: _this.timekeyConfigure,
                        eventName: "keydown"
                    }));
                },
                close: function() {
                    removeClass([ _this.timeIcon ], "e-active"), _this.unWireTimeListEvents(), _this.inputElement.setAttribute("aria-activedescendant", "null"), 
                    remove(_this.popupObject.element), _this.popupObject.destroy(), _this.dateTimeWrapper.innerHTML = "", 
                    _this.listWrapper = _this.dateTimeWrapper = void 0, _this.inputEvent && _this.inputEvent.destroy();
                }
            }), this.popupObject.element.style.maxHeight = "250px";
        }, DateTimePicker.prototype.setDimension = function(width) {
            return width = "number" == typeof width ? formatUnit(width) : "string" == typeof width ? width : "100%";
        }, DateTimePicker.prototype.setPopupWidth = function() {
            var width = this.setDimension(this.width);
            if (width.indexOf("%") > -1) {
                width = (this.containerStyle.width * parseFloat(width) / 100).toString() + "px";
            }
            return width;
        }, DateTimePicker.prototype.wireTimeListEvents = function() {
            EventHandler.add(this.listWrapper, "click", this.onMouseClick, this), Browser.isDevice || (EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this));
        }, DateTimePicker.prototype.unWireTimeListEvents = function() {
            this.listWrapper && (EventHandler.remove(this.listWrapper, "click", this.onMouseClick), 
            EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler), 
            Browser.isDevice || (EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this)));
        }, DateTimePicker.prototype.onMouseOver = function(event) {
            var currentLi = closest(event.target, "." + LISTCLASS$2);
            this.setTimeHover(currentLi, "e-hover");
        }, DateTimePicker.prototype.onMouseLeave = function() {
            this.removeTimeHover("e-hover");
        }, DateTimePicker.prototype.setTimeHover = function(li, className) {
            this.enabled && this.isValidLI(li) && !li.classList.contains(className) && (this.removeTimeHover(className), 
            addClass([ li ], className));
        }, DateTimePicker.prototype.getPopupHeight = function() {
            var height = parseInt("250px", 10), popupHeight = this.dateTimeWrapper.getBoundingClientRect().height;
            return popupHeight > height ? height : popupHeight;
        }, DateTimePicker.prototype.changeEvent = function(e) {
            +this.previousDateTime != +this.value && (_super.prototype.changeEvent.call(this, e), 
            this.inputElement.focus(), this.valueWithMinutes = this.value, this.setInputValue("date"), 
            this.previousDateTime = this.value && new Date(+this.value));
        }, DateTimePicker.prototype.updateValue = function(e) {
            this.setInputValue("time"), +this.previousDateTime != +this.value && (this.changedArgs = {
                value: this.value,
                event: e || null,
                isInteracted: !isNullOrUndefined(e),
                element: this.element
            }, this.addTimeSelection(), this.trigger("change", this.changedArgs), this.previousDateTime = this.value);
        }, DateTimePicker.prototype.setTimeScrollPosition = function() {
            var popupElement, popupHeight = this.getPopupHeight();
            if (popupElement = this.selectedElement, !isNullOrUndefined(popupElement)) {
                var nextEle = popupElement.nextElementSibling, height = nextEle ? nextEle.offsetTop : popupElement.offsetTop, liHeight = popupElement.getBoundingClientRect().height;
                height + popupElement.offsetTop > popupHeight ? this.dateTimeWrapper.scrollTop = nextEle ? height - (popupHeight / 2 + liHeight / 2) : height : this.dateTimeWrapper.scrollTop = 0;
            }
        }, DateTimePicker.prototype.setInputValue = function(type) {
            if ("date" === type) this.inputElement.value = this.previousElementValue = this.getFormattedValue(this.getFullDateTime()), 
            this.setProperties({
                value: this.getFullDateTime()
            }, !0); else {
                var tempVal = this.getFormattedValue(new Date(this.timeCollections[this.activeIndex]));
                Input.setValue(tempVal, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.previousElementValue = this.inputElement.value, this.setProperties({
                    value: new Date(this.timeCollections[this.activeIndex])
                }, !0);
            }
        }, DateTimePicker.prototype.getFullDateTime = function() {
            var value = null;
            return value = this.isDateObject(this.valueWithMinutes) ? this.combineDateTime(this.valueWithMinutes) : this.previousDate, 
            this.validateMinMaxRange(value);
        }, DateTimePicker.prototype.combineDateTime = function(value) {
            if (this.isDateObject(value)) {
                var day = this.previousDate.getDate(), month = this.previousDate.getMonth(), year = this.previousDate.getFullYear(), hour = value.getHours(), minutes = value.getMinutes(), seconds = value.getSeconds();
                return new Date(year, month, day, hour, minutes, seconds);
            }
            return this.previousDate;
        }, DateTimePicker.prototype.onMouseClick = function(event) {
            var target = event.target, li = this.selectedElement = closest(target, "." + LISTCLASS$2);
            li && li.classList.contains(LISTCLASS$2) && (this.timeValue = li.getAttribute("data-value"), 
            this.hide(event)), this.setSelection(li, event);
        }, DateTimePicker.prototype.setSelection = function(li, event) {
            if (this.isValidLI(li) && !li.classList.contains("e-active")) {
                li.getAttribute("data-value");
                this.selectedElement = li;
                var index = Array.prototype.slice.call(this.liCollections).indexOf(li);
                this.activeIndex = index, this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]), 
                addClass([ this.selectedElement ], "e-active"), this.selectedElement.setAttribute("aria-selected", "true"), 
                this.updateValue(event);
            }
        }, DateTimePicker.prototype.setTimeActiveClass = function() {
            var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
            if (!isNullOrUndefined(collections)) {
                var items = collections.querySelectorAll("." + LISTCLASS$2);
                if (items.length) for (var i = 0; i < items.length; i++) if (this.timeCollections[i] === +this.valueWithMinutes) {
                    items[i].setAttribute("aria-selected", "true"), this.selectedElement = items[i], 
                    this.activeIndex = i, this.setTimeActiveDescendant();
                    break;
                }
            }
        }, DateTimePicker.prototype.setTimeActiveDescendant = function() {
            isNullOrUndefined(this.selectedElement) ? attributes(this.inputElement, {
                "aria-activedescendant": "null"
            }) : attributes(this.inputElement, {
                "aria-activedescendant": this.selectedElement.getAttribute("id")
            });
        }, DateTimePicker.prototype.addTimeSelection = function() {
            this.selectedElement = null, this.removeTimeSelection(), this.setTimeActiveClass(), 
            isNullOrUndefined(this.selectedElement) || (addClass([ this.selectedElement ], "e-active"), 
            this.selectedElement.setAttribute("aria-selected", "true"));
        }, DateTimePicker.prototype.removeTimeSelection = function() {
            if (this.removeTimeHover("e-hover"), !isNullOrUndefined(this.dateTimeWrapper)) {
                var items = this.dateTimeWrapper.querySelectorAll(".e-active");
                items.length && (removeClass(items, "e-active"), items[0].removeAttribute("aria-selected"));
            }
        }, DateTimePicker.prototype.removeTimeHover = function(className) {
            var hoveredItem = this.getTimeHoverItem(className);
            hoveredItem && hoveredItem.length && removeClass(hoveredItem, className);
        }, DateTimePicker.prototype.getTimeHoverItem = function(className) {
            var hoveredItem, collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
            return isNullOrUndefined(collections) || (hoveredItem = collections.querySelectorAll("." + className)), 
            hoveredItem;
        }, DateTimePicker.prototype.isValidLI = function(li) {
            return li && li.classList.contains(LISTCLASS$2) && !li.classList.contains("e-disabled");
        }, DateTimePicker.prototype.calculateStartEnd = function(value, range, method) {
            var day = value.getDate(), month = value.getMonth(), year = value.getFullYear(), hours = value.getHours(), minutes = value.getMinutes(), seconds = value.getSeconds(), milliseconds = value.getMilliseconds();
            return range ? "starttime" === method ? new Date(year, month, day, 0, 0, 0) : new Date(year, month, day, 23, 59, 59) : new Date(year, month, day, hours, minutes, seconds, milliseconds);
        }, DateTimePicker.prototype.startTime = function(date) {
            var tempStartValue, start, value, tempMin = this.min;
            return +(value = null === date ? new Date() : date).getDate() == +tempMin.getDate() && +value.getMonth() == +tempMin.getMonth() && +value.getFullYear() == +tempMin.getFullYear() || +new Date(value.getFullYear(), value.getMonth(), value.getDate()) <= +new Date(tempMin.getFullYear(), tempMin.getMonth(), tempMin.getDate()) ? (start = !1, 
            tempStartValue = this.min) : +value < +this.max && +value > +this.min ? (start = !0, 
            tempStartValue = value) : +value >= +this.max && (start = !0, tempStartValue = this.max), 
            this.calculateStartEnd(tempStartValue, start, "starttime");
        }, DateTimePicker.prototype.endTime = function(date) {
            var tempEndValue, end, value, tempMax = this.max;
            return +(value = null === date ? new Date() : date).getDate() == +tempMax.getDate() && +value.getMonth() == +tempMax.getMonth() && +value.getFullYear() == +tempMax.getFullYear() || +new Date(value.getUTCFullYear(), value.getMonth(), value.getDate()) >= +new Date(tempMax.getFullYear(), tempMax.getMonth(), tempMax.getDate()) ? (end = !1, 
            tempEndValue = this.max) : +value < +this.max && +value > +this.min ? (end = !0, 
            tempEndValue = value) : +value <= +this.min && (end = !0, tempEndValue = this.min), 
            this.calculateStartEnd(tempEndValue, end, "endtime");
        }, DateTimePicker.prototype.hide = function(e) {
            (this.popupObj || this.dateTimeWrapper) && (this.preventArgs = {
                cancel: !1,
                popup: this.popupObj || this.popupObject,
                event: e || null
            }, isNullOrUndefined(this.popupObj) && this.trigger("close", this.preventArgs), 
            this.preventArgs.cancel || (this.isDatePopupOpen() ? _super.prototype.hide.call(this, e) : this.isTimePopupOpen() && (this.closePopup(e), 
            removeClass([ document.body ], "e-time-overflow"), Browser.isDevice && this.timeModal && (this.timeModal.style.display = "none", 
            this.timeModal.outerHTML = "", this.timeModal = null), this.setTimeActiveDescendant()))), 
            Browser.isDevice && this.element.removeAttribute("readonly");
        }, DateTimePicker.prototype.closePopup = function(e) {
            if (this.isTimePopupOpen() && this.popupObject) {
                var animModel = {
                    name: "FadeOut",
                    duration: 100,
                    delay: 0
                };
                this.popupObject.hide(new Animation(animModel)), this.inputWrapper.container.classList.remove("e-icon-anim"), 
                attributes(this.inputElement, {
                    "aria-expanded": "false"
                }), EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
            }
        }, DateTimePicker.prototype.preRender = function() {
            _super.prototype.preRender.call(this);
        }, DateTimePicker.prototype.getProperty = function(date, val) {
            "min" === val ? this.setProperties({
                min: this.validateValue(date.min)
            }, !0) : this.setProperties({
                max: this.validateValue(date.max)
            }, !0);
        }, DateTimePicker.prototype.checkAttributes = function() {
            for (var value, _i = 0, attributes_1 = [ "style", "name", "step", "disabled", "readonly", "value", "min", "max", "placeholder", "type" ]; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) switch (prop) {
                  case "name":
                    this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
                    break;

                  case "step":
                    this.step = parseInt(this.inputElement.getAttribute(prop), 10);
                    break;

                  case "readonly":
                    var readonly = !isNullOrUndefined(this.inputElement.getAttribute(prop));
                    this.setProperties({
                        readonly: readonly
                    }, !0);
                    break;

                  case "placeholder":
                    this.placeholder = this.inputElement.getAttribute(prop);
                    break;

                  case "min":
                    value = new Date(this.inputElement.getAttribute(prop)), this.isNullOrEmpty(value) || isNaN(+value) || this.setProperties({
                        min: value
                    }, !0);
                    break;

                  case "disabled":
                    var enabled = isNullOrUndefined(this.inputElement.getAttribute(prop));
                    this.setProperties({
                        enabled: enabled
                    }, !0);
                    break;

                  case "max":
                    value = new Date(this.inputElement.getAttribute(prop)), this.isNullOrEmpty(value) || isNaN(+value) || this.setProperties({
                        max: value
                    }, !0);
                }
            }
        }, DateTimePicker.prototype.getTimeActiveElement = function() {
            return isNullOrUndefined(this.dateTimeWrapper) ? null : this.dateTimeWrapper.querySelectorAll(".e-active");
        }, DateTimePicker.prototype.createDateObj = function(val) {
            return val instanceof Date ? val : null;
        }, DateTimePicker.prototype.getDateObject = function(text) {
            if (!this.isNullOrEmpty(text)) {
                var dateValue = this.createDateObj(text), value = this.valueWithMinutes, status_1 = !isNullOrUndefined(value);
                if (this.checkDateValue(dateValue)) {
                    var date = status_1 ? value.getDate() : DAY$1, month = status_1 ? value.getMonth() : MONTH$2, year = status_1 ? value.getFullYear() : YEAR$2, hour = status_1 ? value.getHours() : HOUR, minute = status_1 ? value.getMinutes() : MINUTE, second = status_1 ? value.getSeconds() : SECOND, millisecond = status_1 ? value.getMilliseconds() : MILLISECOND;
                    return new Date(year, month, date, hour, minute, second, millisecond);
                }
            }
            return null;
        }, DateTimePicker.prototype.findNextTimeElement = function(event) {
            var textVal = this.inputElement.value, value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes), dateTimeVal = null, listCount = this.liCollections.length;
            if (!isNullOrUndefined(this.checkDateValue(value)) || !isNullOrUndefined(this.activeIndex)) {
                if ("home" === event.action) dateTimeVal = +this.createDateObj(new Date(this.timeCollections[0])), 
                this.activeIndex = 0; else if ("end" === event.action) dateTimeVal = +this.createDateObj(new Date(this.timeCollections[this.timeCollections.length - 1])), 
                this.activeIndex = this.timeCollections.length - 1; else if ("down" === event.action) {
                    for (var i = 0; i < listCount; i++) if (+value < this.timeCollections[i]) {
                        dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i])), this.activeIndex = i;
                        break;
                    }
                } else for (i = listCount - 1; i >= 0; i--) if (+value > this.timeCollections[i]) {
                    dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i])), this.activeIndex = i;
                    break;
                }
                this.selectedElement = this.liCollections[this.activeIndex], this.timeElementValue(isNullOrUndefined(dateTimeVal) ? null : new Date(dateTimeVal));
            }
        }, DateTimePicker.prototype.setTimeValue = function(date, value) {
            var time, val = this.validateMinMaxRange(value), newval = this.createDateObj(val);
            this.getFormattedValue(newval) !== (isNullOrUndefined(this.value) ? null : this.getFormattedValue(this.value)) ? (this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval, 
            time = new Date(+this.valueWithMinutes)) : (this.strictMode && (date = newval), 
            this.valueWithMinutes = this.checkDateValue(date), time = new Date(+this.valueWithMinutes));
            var dateString = this.globalize.formatDate(time, {
                format: isNullOrUndefined(this.format) ? this.cldrDateTimeFormat() : this.format,
                type: "dateTime",
                skeleton: "yMd"
            });
            return !this.strictMode && isNullOrUndefined(time), Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton), 
            time;
        }, DateTimePicker.prototype.timeElementValue = function(value) {
            if (!isNullOrUndefined(this.checkDateValue(value)) && !this.isNullOrEmpty(value)) {
                var date = value instanceof Date ? value : this.getDateObject(value);
                return this.setTimeValue(date, value);
            }
            return null;
        }, DateTimePicker.prototype.timeKeyHandler = function(event) {
            if (!(isNullOrUndefined(this.step) || this.step <= 0)) {
                var listCount = this.timeCollections.length;
                if (isNullOrUndefined(this.getTimeActiveElement()) || 0 === this.getTimeActiveElement().length) this.liCollections.length > 0 && (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex) ? (this.activeIndex = 0, 
                this.selectedElement = this.liCollections[0], this.timeElementValue(new Date(this.timeCollections[0]))) : this.findNextTimeElement(event)); else {
                    var nextItemValue = void 0;
                    if (event.keyCode >= 37 && event.keyCode <= 40) {
                        var index = 40 === event.keyCode || 39 === event.keyCode ? ++this.activeIndex : --this.activeIndex;
                        this.activeIndex = index = this.activeIndex === listCount ? 0 : this.activeIndex, 
                        this.activeIndex = index = this.activeIndex < 0 ? listCount - 1 : this.activeIndex, 
                        nextItemValue = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
                    } else "home" === event.action ? (this.activeIndex = 0, nextItemValue = this.timeCollections[0]) : "end" === event.action && (this.activeIndex = listCount - 1, 
                    nextItemValue = this.timeCollections[listCount - 1]);
                    this.selectedElement = this.liCollections[this.activeIndex], this.timeElementValue(new Date(nextItemValue));
                }
                this.isNavigate = !0, this.setTimeHover(this.selectedElement, "e-navigation"), this.setTimeActiveDescendant(), 
                !this.isTimePopupOpen() || null === this.selectedElement || event && "click" === event.type || this.setTimeScrollPosition();
            }
        }, DateTimePicker.prototype.TimeKeyActionHandle = function(event) {
            if (this.enabled) switch ("right" !== event.action && "left" !== event.action && "tab" !== event.action && event.preventDefault(), 
            event.action) {
              case "up":
              case "down":
              case "home":
              case "end":
                this.timeKeyHandler(event);
                break;

              case "enter":
                this.isNavigate ? (this.selectedElement = this.liCollections[this.activeIndex], 
                this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]), this.setInputValue("time"), 
                +this.previousDateTime != +this.value && (this.changedArgs.value = this.value, this.addTimeSelection(), 
                this.previousDateTime = this.value)) : this.updateValue(event), this.hide(event), 
                addClass([ this.inputWrapper.container ], "e-input-focus"), this.isNavigate = !1;
                break;

              case "escape":
                this.hide(event);
                break;

              default:
                this.isNavigate = !1;
            }
        }, DateTimePicker.prototype.inputKeyAction = function(event) {
            switch (event.action) {
              case "altDownArrow":
                this.strictModeUpdate(), this.updateInput(), this.toggle(event);
            }
        }, DateTimePicker.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "value":
                    this.cldrDateTimeFormat();
                    "string" == typeof newProp.value && (this.setProperties({
                        value: this.checkDateValue(new Date("" + newProp.value))
                    }, !0), newProp.value = this.checkDateValue(new Date("" + newProp.value))), newProp.value = this.validateValue(newProp.value), 
                    Input.setValue(this.getFormattedValue(newProp.value), this.inputElement, this.floatLabelType, this.showClearButton), 
                    this.valueWithMinutes = newProp.value, this.setProperties({
                        value: newProp.value
                    }, !0), this.previousDateTime = new Date(this.inputElement.value), this.updateInput(), 
                    this.changeTrigger(null);
                    break;

                  case "min":
                  case "max":
                    this.getProperty(newProp, prop), this.updateInput();
                    break;

                  case "enableRtl":
                    Input.setEnableRtl(this.enableRtl, [ this.inputWrapper.container ]);
                    break;

                  case "cssClass":
                    Input.setCssClass(newProp.cssClass, [ this.inputWrapper.container ]), this.dateTimeWrapper && (this.dateTimeWrapper.className += " " + newProp.cssClass);
                    break;

                  case "locale":
                    this.globalize = new Internationalization(this.locale), this.l10n.setLocale(this.locale), 
                    this.setProperties({
                        placeholder: this.l10n.getConstant("placeholder")
                    }, !0), Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement), 
                    this.dateTimeFormat = this.cldrDateTimeFormat(), _super.prototype.updateInput.call(this);
                    break;

                  case "format":
                    this.setProperties({
                        format: newProp.format
                    }, !0), this.setValue();
                    break;

                  case "placeholder":
                    Input.setPlaceholder(newProp.placeholder, this.inputElement), this.inputElement.setAttribute("aria-placeholder", newProp.placeholder);
                    break;

                  case "enabled":
                    Input.setEnabled(this.enabled, this.inputElement), this.bindEvents();
                    break;

                  case "strictMode":
                    this.updateInput();
                    break;

                  case "width":
                    this.setWidth(newProp.width);
                    break;

                  case "readonly":
                    Input.setReadonly(this.readonly, this.inputElement);
                    break;

                  case "floatLabelType":
                    this.floatLabelType = newProp.floatLabelType, Input.removeFloating(this.inputWrapper), 
                    Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
                    break;

                  default:
                    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
                }
                this.hide(null);
            }
        }, DateTimePicker.prototype.getModuleName = function() {
            return "datetimepicker";
        }, __decorate$38([ Property(null) ], DateTimePicker.prototype, "timeFormat", void 0), 
        __decorate$38([ Property(30) ], DateTimePicker.prototype, "step", void 0), __decorate$38([ Property(1e3) ], DateTimePicker.prototype, "zIndex", void 0), 
        __decorate$38([ Property(!1) ], DateTimePicker.prototype, "enableRtl", void 0), 
        __decorate$38([ Property(!1) ], DateTimePicker.prototype, "enablePersistence", void 0), 
        __decorate$38([ Property(!0) ], DateTimePicker.prototype, "showClearButton", void 0), 
        __decorate$38([ Property(null) ], DateTimePicker.prototype, "placeholder", void 0), 
        __decorate$38([ Property(!1) ], DateTimePicker.prototype, "strictMode", void 0), 
        __decorate$38([ Event() ], DateTimePicker.prototype, "open", void 0), __decorate$38([ Event() ], DateTimePicker.prototype, "close", void 0), 
        __decorate$38([ Event() ], DateTimePicker.prototype, "blur", void 0), __decorate$38([ Event() ], DateTimePicker.prototype, "focus", void 0), 
        __decorate$38([ Event() ], DateTimePicker.prototype, "created", void 0), __decorate$38([ Event() ], DateTimePicker.prototype, "destroyed", void 0), 
        DateTimePicker = __decorate$38([ NotifyPropertyChanges ], DateTimePicker);
    }(DatePicker), DateFilterUI = function() {
        function DateFilterUI(parent, serviceLocator, filterSettings) {
            this.parent = parent, this.locator = serviceLocator, this.fltrSettings = filterSettings;
        }
        return DateFilterUI.prototype.create = function(args) {
            var format = getCustomDateFormat(args.column.format, args.column.type);
            this.dialogObj = args.dialogObj, this.inputElem = this.parent.createElement("input", {
                className: "e-flmenu-input",
                id: "dateui-" + args.column.uid
            }), args.target.appendChild(this.inputElem), "date" === args.column.type ? this.datePickerObj = new DatePicker({
                format: format,
                cssClass: "e-popup-flmenu",
                placeholder: args.localizeText.getConstant("ChooseDate"),
                width: "100%",
                locale: this.parent.locale,
                enableRtl: this.parent.enableRtl,
                open: this.openPopup.bind(this)
            }) : "datetime" === args.column.type && (this.datePickerObj = new DateTimePicker({
                format: format,
                cssClass: "e-popup-flmenu",
                placeholder: args.localizeText.getConstant("ChooseDate"),
                width: "100%",
                locale: this.parent.locale,
                enableRtl: this.parent.enableRtl,
                open: this.openPopup.bind(this)
            })), this.datePickerObj.appendTo(this.inputElem);
        }, DateFilterUI.prototype.write = function(args) {
            this.fltrSettings.columns;
            document.querySelector("#dateui-" + args.column.uid).ej2_instances[0].value = isNullOrUndefined(args.filteredValue) ? null : new Date(args.filteredValue);
        }, DateFilterUI.prototype.read = function(element, column, filterOptr, filterObj) {
            var filterValue = document.querySelector("#dateui-" + column.uid).ej2_instances[0].value;
            filterValue = isNullOrUndefined(filterValue) ? null : filterValue, filterObj.filterByColumn(column.field, filterOptr, filterValue, "and", !0);
        }, DateFilterUI.prototype.openPopup = function(args) {
            args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
        }, DateFilterUI;
    }(), FilterMenuRenderer = function() {
        function FilterMenuRenderer(parent, filterSettings, serviceLocator, customFltrOperators, fltrObj) {
            this.isDialogOpen = !1, this.colTypes = {
                string: StringFilterUI,
                number: NumberFilterUI,
                date: DateFilterUI,
                boolean: BooleanFilterUI,
                datetime: DateFilterUI
            }, this.parent = parent, this.filterSettings = filterSettings, this.serviceLocator = serviceLocator, 
            this.customFilterOperators = customFltrOperators, this.filterObj = fltrObj, this.flMuiObj = new FlMenuOptrUI(this.parent, this.customFilterOperators, this.serviceLocator), 
            this.l10n = this.serviceLocator.getService("localization");
        }
        return FilterMenuRenderer.prototype.openDialog = function(args) {
            this.col = this.parent.getColumnByField(args.field), (isNullOrUndefined(this.col.filter) || isNullOrUndefined(this.col.filter.type) || "Menu" === this.col.filter.type) && this.renderDlgContent(args.target, this.col);
        }, FilterMenuRenderer.prototype.closeDialog = function() {
            if (this.dlgObj) {
                var elem = document.getElementById(this.dlgObj.element.id);
                this.dlgObj && !this.dlgObj.isDestroyed && elem && (this.parent.notify("filter-menu-close", {
                    field: this.col.field
                }), this.isDialogOpen = !1, this.dlgObj.destroy(), remove(elem));
            }
        }, FilterMenuRenderer.prototype.renderDlgContent = function(target, column) {
            var args = {
                requestType: "filterbeforeopen",
                filterModel: this,
                columnName: column.field,
                columnType: column.type
            };
            this.parent.trigger(actionBegin, args);
            var mainDiv = this.parent.createElement("div", {
                className: "e-flmenu-maindiv",
                id: column.uid + "-flmenu"
            });
            this.dlgDiv = this.parent.createElement("div", {
                className: "e-flmenu",
                id: column.uid + "-flmdlg"
            }), this.parent.element.appendChild(this.dlgDiv), this.dlgObj = new Dialog({
                showCloseIcon: !1,
                closeOnEscape: !1,
                locale: this.parent.locale,
                visible: !1,
                enableRtl: this.parent.enableRtl,
                created: this.dialogCreated.bind(this, target, column),
                position: this.parent.element.classList.contains("e-device") ? {
                    X: "center",
                    Y: "center"
                } : {
                    X: "",
                    Y: ""
                },
                target: this.parent.element.classList.contains("e-device") ? document.body : this.parent.element,
                buttons: [ {
                    click: this.filterBtnClick.bind(this, column),
                    buttonModel: {
                        content: this.l10n.getConstant("FilterButton"),
                        isPrimary: !0,
                        cssClass: "e-flmenu-okbtn"
                    }
                }, {
                    click: this.clearBtnClick.bind(this, column),
                    buttonModel: {
                        content: this.l10n.getConstant("ClearButton"),
                        cssClass: "e-flmenu-cancelbtn"
                    }
                } ],
                content: mainDiv,
                width: !isNullOrUndefined(parentsUntil(target, "e-bigger")) || this.parent.element.classList.contains("e-device") ? 260 : 250,
                animationSettings: {
                    effect: "None"
                },
                cssClass: "e-filter-popup"
            }), this.dlgObj.appendTo(this.dlgDiv);
        }, FilterMenuRenderer.prototype.dialogCreated = function(target, column) {
            Browser.isDevice || getFilterMenuPostion(target, this.dlgObj, this.parent), this.renderFilterUI(target, column), 
            this.parent.notify("filterDialogCreated", {}), this.dlgObj.element.style.maxHeight = "350px", 
            this.dlgObj.show(), column.filterTemplate || this.writeMethod(column, this.dlgObj.element.querySelector("#" + column.uid + "-flmenu"));
            var args = {
                requestType: "filterafteropen",
                filterModel: this,
                columnName: column.field,
                columnType: column.type
            };
            this.isDialogOpen = !0, this.parent.trigger(actionComplete, args);
        }, FilterMenuRenderer.prototype.renderFilterUI = function(target, col) {
            var dlgConetntEle = this.dlgObj.element.querySelector(".e-flmenu-maindiv");
            this.renderOperatorUI(dlgConetntEle, target, col), this.renderFlValueUI(dlgConetntEle, target, col);
        }, FilterMenuRenderer.prototype.renderOperatorUI = function(dlgConetntEle, target, column) {
            this.flMuiObj.renderOperatorUI(dlgConetntEle, target, column, this.dlgObj);
        }, FilterMenuRenderer.prototype.renderFlValueUI = function(dlgConetntEle, target, column) {
            var valueDiv = this.parent.createElement("div", {
                className: "e-flmenu-valuediv"
            }), fObj = this.filterObj;
            dlgConetntEle.appendChild(valueDiv);
            this.flMuiObj, this.dlgObj;
            var instanceofFilterUI = new this.colTypes[column.type](this.parent, this.serviceLocator, this.parent.filterSettings);
            if (column.filterTemplate) {
                var fltrData = {};
                fltrData[column.field] = fObj.values[column.field], column.foreignKeyValue && (fltrData[column.foreignKeyValue] = fObj.values[column.foreignKeyValue]);
                fltrData.column = column;
                appendChildren(valueDiv, column.getFilterTemplate()(fltrData, this.parent, "filterTemplate"));
            } else if (isNullOrUndefined(column.filter) || isNullOrUndefined(column.filter.ui) || isNullOrUndefined(column.filter.ui.create)) instanceofFilterUI.create({
                column: column,
                target: valueDiv,
                getOptrInstance: this.flMuiObj,
                localizeText: this.l10n,
                dialogObj: this.dlgObj
            }); else {
                var temp = column.filter.ui.create;
                "string" == typeof temp && (temp = getValue(temp, window)), temp({
                    column: column,
                    target: valueDiv,
                    getOptrInstance: this.flMuiObj,
                    dialogObj: this.dlgObj
                });
            }
        }, FilterMenuRenderer.prototype.writeMethod = function(col, dlgContentEle) {
            for (var flValue, target = dlgContentEle.querySelector(".e-flmenu-valinput"), instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings), _i = 0, columns_1 = this.filterSettings.columns; _i < columns_1.length; _i++) {
                var column = columns_1[_i];
                col.field !== column.field && col.foreignKeyValue !== column.field || (flValue = column.value);
            }
            if (isNullOrUndefined(col.filter) || isNullOrUndefined(col.filter.ui) || isNullOrUndefined(col.filter.ui.write)) instanceofFilterUI.write({
                column: col,
                target: target,
                parent: this.parent,
                filteredValue: flValue
            }); else {
                var temp = col.filter.ui.write;
                "string" == typeof temp && (temp = getValue(temp, window)), temp({
                    column: col,
                    target: target,
                    parent: this.parent,
                    filteredValue: flValue
                });
            }
        }, FilterMenuRenderer.prototype.filterBtnClick = function(col) {
            var flOptrValue, targ = this.dlgObj.element.querySelector(".e-flmenu-valuediv input");
            flOptrValue = this.flMuiObj.getFlOperator();
            var instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);
            if (col.filterTemplate) {
                var element = this.dlgDiv.querySelector(".e-flmenu-valuediv"), fltrValue = void 0;
                fltrValue = element.children[0].value ? element.children[0].value : element.children[0].ej2_instances[0].value, 
                this.filterObj.filterByColumn(col.field, flOptrValue, fltrValue);
            } else if (isNullOrUndefined(col.filter) || isNullOrUndefined(col.filter.ui) || isNullOrUndefined(col.filter.ui.read)) instanceofFilterUI.read(targ, col, flOptrValue, this.filterObj); else {
                var temp = col.filter.ui.read;
                "string" == typeof temp && (temp = getValue(temp, window)), temp({
                    element: targ,
                    column: col,
                    operator: flOptrValue,
                    fltrObj: this.filterObj
                });
            }
            var iconClass = this.parent.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter", flIcon = this.parent.element.querySelector('[e-mappinguid="' + col.uid + '"]').parentElement.querySelector(iconClass);
            flIcon && flIcon.classList.add("e-filtered"), this.closeDialog();
        }, FilterMenuRenderer.prototype.clearBtnClick = function(column) {
            this.filterObj.removeFilteredColsByField(column.field), this.closeDialog();
            var iconClass = this.parent.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter", flIcon = this.parent.element.querySelector('[e-mappinguid="' + column.uid + '"]').parentElement.querySelector(iconClass);
            flIcon && flIcon.classList.remove("e-filtered");
        }, FilterMenuRenderer.prototype.destroy = function() {
            this.closeDialog();
        }, FilterMenuRenderer;
    }(), __extends$53 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$39 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, HScroll = function(_super) {
        function HScroll(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$53(HScroll, _super), HScroll.prototype.preRender = function() {
            this.browser = Browser.info.name, this.browserCheck = "mozilla" === this.browser, 
            this.isDevice = Browser.isDevice, this.customStep = !0;
            var element = this.element;
            this.ieCheck = "edge" === this.browser || "msie" === this.browser, this.initialize(), 
            "" === element.id && (element.id = getUniqueID("hscroll"), this.uniqueId = !0), 
            element.style.display = "block", this.enableRtl && element.classList.add("e-rtl");
        }, HScroll.prototype.render = function() {
            this.touchModule = new Touch(this.element, {
                scroll: this.touchHandler.bind(this),
                swipe: this.swipeHandler.bind(this)
            }), EventHandler.add(this.scrollEle, "scroll", this.scrollHandler, this), this.isDevice ? (this.element.classList.add("e-scroll-device"), 
            this.createOverlay(this.element)) : this.createNavIcon(this.element), (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) && (this.scrollStep = this.scrollEle.offsetWidth, 
            this.customStep = !1);
        }, HScroll.prototype.initialize = function() {
            var scrollEle = this.createElement("div", {
                className: "e-hscroll-content"
            }), scrollDiv = this.createElement("div", {
                className: "e-hscroll-bar"
            });
            scrollDiv.setAttribute("tabindex", "-1");
            for (var ele = this.element, _i = 0, innerEle_1 = [].slice.call(ele.children); _i < innerEle_1.length; _i++) {
                var ele_1 = innerEle_1[_i];
                scrollEle.appendChild(ele_1);
            }
            scrollDiv.appendChild(scrollEle), ele.appendChild(scrollDiv), scrollDiv.style.overflowX = "hidden", 
            this.scrollEle = scrollDiv, this.scrollItems = scrollEle;
        }, HScroll.prototype.getPersistData = function() {
            return this.addOnPersist([ "scrollStep" ]);
        }, HScroll.prototype.getModuleName = function() {
            return "hScroll";
        }, HScroll.prototype.destroy = function() {
            var ele = this.element;
            ele.style.display = "", ele.classList.remove("e-hscroll"), ele.classList.remove("e-scroll-device");
            var nav = selectAll(".e-" + ele.id + "_nav.e-scroll-nav", ele);
            selectAll(".e-scroll-overlay", ele).forEach(function(ele) {
                detach(ele);
            });
            for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
                var elem = _a[_i];
                ele.appendChild(elem);
            }
            this.uniqueId && this.element.removeAttribute("id"), detach(this.scrollEle), nav.length > 0 && (detach(nav[0]), 
            isNullOrUndefined(nav[1]) || detach(nav[1])), EventHandler.remove(this.scrollEle, "scroll", this.scrollHandler), 
            this.touchModule.destroy(), this.touchModule = null, _super.prototype.destroy.call(this);
        }, HScroll.prototype.disable = function(value) {
            var navEles = selectAll(".e-scroll-nav:not(.e-overlay)", this.element);
            value ? this.element.classList.add("e-overlay") : this.element.classList.remove("e-overlay"), 
            navEles.forEach(function(el) {
                el.setAttribute("tabindex", value ? "-1" : "0");
            });
        }, HScroll.prototype.createOverlay = function(element) {
            var id = element.id.concat("_nav"), rightOverlayEle = this.createElement("div", {
                className: "e-scroll-overlay e-scroll-right-overlay"
            }), clsRight = "e-" + element.id.concat("_nav e-scroll-nav e-scroll-right-nav"), rightEle = this.createElement("div", {
                id: id.concat("_right"),
                className: clsRight
            }), navItem = this.createElement("div", {
                className: "e-nav-right-arrow e-nav-arrow e-icons"
            });
            rightEle.appendChild(navItem);
            var leftEle = this.createElement("div", {
                className: "e-scroll-overlay e-scroll-left-overlay"
            });
            this.ieCheck && rightEle.classList.add("e-ie-align"), element.appendChild(rightOverlayEle), 
            element.appendChild(rightEle), element.insertBefore(leftEle, element.firstChild), 
            this.eventBinding([ rightEle ]);
        }, HScroll.prototype.createNavIcon = function(element) {
            var id = element.id.concat("_nav"), clsRight = "e-" + element.id.concat("_nav e-scroll-nav e-scroll-right-nav"), nav = this.createElement("div", {
                id: id.concat("_right"),
                className: clsRight
            });
            nav.setAttribute("aria-disabled", "false");
            var navItem = this.createElement("div", {
                className: "e-nav-right-arrow e-nav-arrow e-icons"
            }), clsLeft = "e-" + element.id.concat("_nav e-scroll-nav e-scroll-left-nav"), navEle = this.createElement("div", {
                id: id.concat("_left"),
                className: clsLeft + " e-overlay"
            });
            navEle.setAttribute("aria-disabled", "true");
            var navLeftItem = this.createElement("div", {
                className: "e-nav-left-arrow e-nav-arrow e-icons"
            });
            navEle.appendChild(navLeftItem), nav.appendChild(navItem), nav.setAttribute("tabindex", "0"), 
            element.appendChild(nav), element.insertBefore(navEle, element.firstChild), this.ieCheck && (nav.classList.add("e-ie-align"), 
            navEle.classList.add("e-ie-align")), this.eventBinding([ nav, navEle ]);
        }, HScroll.prototype.onKeyPress = function(e) {
            var _this = this;
            if ("Enter" === e.key) {
                this.keyTimer = window.setTimeout(function() {
                    _this.keyTimeout = !0, _this.eleScrolling(10, e.target, !0);
                }, 100);
            }
        }, HScroll.prototype.onKeyUp = function(e) {
            "Enter" === e.key && (this.keyTimeout ? this.keyTimeout = !1 : e.target.click(), 
            clearTimeout(this.keyTimer));
        }, HScroll.prototype.eventBinding = function(ele) {
            var _this = this;
            ele.forEach(function(el) {
                new Touch(el, {
                    tapHold: _this.tabHoldHandler.bind(_this),
                    tapHoldThreshold: 500
                }), el.addEventListener("keydown", _this.onKeyPress.bind(_this)), el.addEventListener("keyup", _this.onKeyUp.bind(_this)), 
                el.addEventListener("mouseup", _this.repeatScroll.bind(_this)), el.addEventListener("touchend", _this.repeatScroll.bind(_this)), 
                el.addEventListener("contextmenu", function(e) {
                    e.preventDefault();
                }), EventHandler.add(el, "click", _this.clickEventHandler, _this);
            });
        }, HScroll.prototype.repeatScroll = function() {
            clearInterval(this.timeout);
        }, HScroll.prototype.tabHoldHandler = function(e) {
            var _this = this, trgt = e.originalEvent.target;
            trgt = this.contains(trgt, "e-scroll-nav") ? trgt.firstElementChild : trgt;
            this.timeout = window.setInterval(function() {
                _this.eleScrolling(10, trgt, !0);
            }, 50);
        }, HScroll.prototype.contains = function(ele, className) {
            return ele.classList.contains(className);
        }, HScroll.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
            var element = this.scrollEle, rootEle = this.element, classList = trgt.classList;
            classList.contains("e-scroll-nav") && (classList = trgt.querySelector(".e-nav-arrow").classList), 
            this.contains(rootEle, "e-rtl") && this.browserCheck && (scrollDis = -scrollDis);
            element.scrollLeft;
            !this.contains(rootEle, "e-rtl") || this.browserCheck || this.ieCheck ? classList.contains("e-nav-right-arrow") ? this.frameScrollRequest(scrollDis, "add", isContinuous) : this.frameScrollRequest(scrollDis, "", isContinuous) : classList.contains("e-nav-left-arrow") ? this.frameScrollRequest(scrollDis, "add", isContinuous) : this.frameScrollRequest(scrollDis, "", isContinuous);
        }, HScroll.prototype.clickEventHandler = function(e) {
            this.eleScrolling(this.scrollStep, e.target, !1);
        }, HScroll.prototype.swipeHandler = function(e) {
            var distance, swipeEle = this.scrollEle;
            distance = e.velocity <= 1 ? e.distanceX / (10 * e.velocity) : e.distanceX / e.velocity;
            var start = .5, animate = function() {
                var step = Math.sin(start);
                step <= 0 ? window.cancelAnimationFrame(step) : ("Left" === e.swipeDirection ? swipeEle.scrollLeft += distance * step : "Right" === e.swipeDirection && (swipeEle.scrollLeft -= distance * step), 
                start -= .02, window.requestAnimationFrame(animate));
            };
            animate();
        }, HScroll.prototype.scrollUpdating = function(scrollVal, action) {
            "add" === action ? this.scrollEle.scrollLeft += scrollVal : this.scrollEle.scrollLeft -= scrollVal;
        }, HScroll.prototype.frameScrollRequest = function(scrollVal, action, isContinuous) {
            var _this = this;
            if (isContinuous) this.scrollUpdating(scrollVal, action); else {
                this.customStep || selectAll(".e-scroll-overlay", this.element).forEach(function(el) {
                    scrollVal -= el.offsetWidth;
                });
                var animate = function() {
                    scrollVal < 10 ? window.cancelAnimationFrame(10) : (_this.scrollUpdating(10, action), 
                    scrollVal -= 10, window.requestAnimationFrame(animate));
                };
                animate();
            }
        }, HScroll.prototype.touchHandler = function(e) {
            var distance, ele = this.scrollEle;
            distance = e.distanceX, this.ieCheck && this.contains(this.element, "e-rtl") && (distance = -distance), 
            "Left" === e.scrollDirection ? ele.scrollLeft = ele.scrollLeft + distance : "Right" === e.scrollDirection && (ele.scrollLeft = ele.scrollLeft - distance);
        }, HScroll.prototype.arrowDisabling = function(addDisable, removeDisable) {
            if (this.isDevice) {
                var arrowIcon = (isNullOrUndefined(addDisable) ? removeDisable : addDisable).querySelector(".e-nav-arrow");
                isNullOrUndefined(addDisable) ? classList(arrowIcon, [ "e-nav-right-arrow" ], [ "e-nav-left-arrow" ]) : classList(arrowIcon, [ "e-nav-left-arrow" ], [ "e-nav-right-arrow" ]);
            } else addDisable.classList.add("e-overlay"), addDisable.setAttribute("aria-disabled", "true"), 
            addDisable.removeAttribute("tabindex"), removeDisable.classList.remove("e-overlay"), 
            removeDisable.setAttribute("aria-disabled", "false"), removeDisable.setAttribute("tabindex", "0");
            this.repeatScroll();
        }, HScroll.prototype.scrollHandler = function(e) {
            var target = e.target, width = target.offsetWidth, rootEle = this.element, navLeftEle = this.element.querySelector(".e-scroll-left-nav"), navRightEle = this.element.querySelector(".e-scroll-right-nav"), leftOverlay = this.element.querySelector(".e-scroll-left-overlay"), rightOverlay = this.element.querySelector(".e-scroll-right-overlay"), scrollLeft = target.scrollLeft;
            if (scrollLeft <= 0 && (scrollLeft = -scrollLeft), this.isDevice && (!this.enableRtl || this.browserCheck || this.ieCheck || (leftOverlay = this.element.querySelector(".e-scroll-right-overlay"), 
            rightOverlay = this.element.querySelector(".e-scroll-left-overlay")), leftOverlay.style.width = scrollLeft < 40 ? scrollLeft + "px" : "40px", 
            target.scrollWidth - Math.ceil(width + scrollLeft) < 40 ? rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + "px" : rightOverlay.style.width = "40px"), 
            0 === scrollLeft) !this.contains(rootEle, "e-rtl") || this.browserCheck || this.ieCheck ? this.arrowDisabling(navLeftEle, navRightEle) : this.arrowDisabling(navRightEle, navLeftEle); else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) !this.contains(rootEle, "e-rtl") || this.browserCheck || this.ieCheck ? this.arrowDisabling(navRightEle, navLeftEle) : this.arrowDisabling(navLeftEle, navRightEle); else {
                var disEle = this.element.querySelector(".e-scroll-nav.e-overlay");
                disEle && (disEle.classList.remove("e-overlay"), disEle.setAttribute("aria-disabled", "false"), 
                disEle.setAttribute("tabindex", "0"));
            }
        }, HScroll.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "scrollStep":
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? this.element.classList.add("e-rtl") : this.element.classList.remove("e-rtl");
                }
            }
        }, __decorate$39([ Property(null) ], HScroll.prototype, "scrollStep", void 0), HScroll = __decorate$39([ NotifyPropertyChanges ], HScroll);
    }(Component), __extends$54 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$40 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, CLS_ITEMS = "e-toolbar-items", CLS_ITEM = "e-toolbar-item", CLS_POPUP = "e-toolbar-popup", Item$1 = function(_super) {
        function Item() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$54(Item, _super), __decorate$40([ Property("") ], Item.prototype, "id", void 0), 
        __decorate$40([ Property("") ], Item.prototype, "text", void 0), __decorate$40([ Property("auto") ], Item.prototype, "width", void 0), 
        __decorate$40([ Property("") ], Item.prototype, "cssClass", void 0), __decorate$40([ Property(!1) ], Item.prototype, "showAlwaysInPopup", void 0), 
        __decorate$40([ Property("") ], Item.prototype, "prefixIcon", void 0), __decorate$40([ Property("") ], Item.prototype, "suffixIcon", void 0), 
        __decorate$40([ Property("None") ], Item.prototype, "overflow", void 0), __decorate$40([ Property("") ], Item.prototype, "template", void 0), 
        __decorate$40([ Property("Button") ], Item.prototype, "type", void 0), __decorate$40([ Property("Both") ], Item.prototype, "showTextOn", void 0), 
        __decorate$40([ Property(null) ], Item.prototype, "htmlAttributes", void 0), __decorate$40([ Property("") ], Item.prototype, "tooltipText", void 0), 
        __decorate$40([ Property("Left") ], Item.prototype, "align", void 0), __decorate$40([ Event() ], Item.prototype, "click", void 0), 
        Item;
    }(ChildProperty), Toolbar = function(_super) {
        function Toolbar(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.keyConfigs = {
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                moveUp: "uparrow",
                moveDown: "downarrow",
                popupOpen: "enter",
                popupClose: "escape",
                tab: "tab",
                home: "home",
                end: "end"
            }, _this;
        }
        return __extends$54(Toolbar, _super), Toolbar.prototype.destroy = function() {
            var _this = this, ele = this.element;
            for (_super.prototype.destroy.call(this), this.unwireEvents(), this.tempId.forEach(function(ele) {
                isNullOrUndefined(_this.element.querySelector(ele)) || (document.body.appendChild(_this.element.querySelector(ele)).style.display = "none");
            }); ele.firstChild; ) ele.removeChild(ele.firstChild);
            this.trgtEle && ele.appendChild(this.ctrlTem), this.clearProperty(), this.popObj = null, 
            this.tbarAlign = null, this.remove(this.element, "e-toolpop"), ele.removeAttribute("style"), 
            [ "aria-disabled", "aria-orientation", "aria-haspopup", "role" ].forEach(function(attrb) {
                _this.element.removeAttribute(attrb);
            });
        }, Toolbar.prototype.preRender = function() {
            var eventArgs = {
                enableCollision: !0,
                scrollStep: this.scrollStep
            };
            this.trigger("beforeCreate", eventArgs), this.enableCollision = eventArgs.enableCollision, 
            this.scrollStep = eventArgs.scrollStep, this.scrollModule = null, this.popObj = null, 
            this.tempId = [], this.tbarItemsCol = this.items, this.popupPriCount = 0, this.enableRtl && this.add(this.element, "e-rtl");
        }, Toolbar.prototype.wireEvents = function() {
            EventHandler.add(this.element, "click", this.clickHandler, this), window.addEventListener("resize", this.resize.bind(this)), 
            this.keyModule = new KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs
            }), EventHandler.add(this.element, "keydown", this.docKeyDown, this), this.element.setAttribute("tabIndex", "0");
        }, Toolbar.prototype.docKeyDown = function(e) {
            if ("INPUT" !== e.target.tagName) {
                var popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && "Extended" !== this.overflowMode;
                9 === e.keyCode && !0 === e.target.classList.contains("e-hor-nav") && popCheck && this.popObj.hide({
                    name: "FadeOut",
                    duration: 100
                });
                (40 === e.keyCode || 38 === e.keyCode || 35 === e.keyCode || 36 === e.keyCode) && e.preventDefault();
            }
        }, Toolbar.prototype.unwireEvents = function() {
            EventHandler.remove(this.element, "click", this.clickHandler), this.destroyHScroll(), 
            this.keyModule.destroy(), EventHandler.remove(document, "scroll", this.docEvent), 
            EventHandler.remove(this.element, "keydown", this.docKeyDown), EventHandler.remove(document, "click", this.docEvent);
        }, Toolbar.prototype.clearProperty = function() {
            this.tbarEle = [], this.tbarAlgEle = {
                lefts: [],
                centers: [],
                rights: []
            };
        }, Toolbar.prototype.docEvent = function(e) {
            var popEle = closest(e.target, ".e-popup");
            this.popObj && isVisible(this.popObj.element) && !popEle && "Popup" === this.overflowMode && this.popObj.hide({
                name: "FadeOut",
                duration: 100
            });
        }, Toolbar.prototype.destroyHScroll = function() {
            this.scrollModule && (this.tbarAlign && this.add(this.scrollModule.element, "e-tbar-pos"), 
            this.scrollModule.destroy(), this.scrollModule = null);
        }, Toolbar.prototype.destroyItems = function() {
            [].slice.call(this.element.querySelectorAll("." + CLS_ITEM)).forEach(function(el) {
                detach(el);
            });
            var tbarItems = this.element.querySelector("." + CLS_ITEMS);
            this.tbarAlign && ([].slice.call(tbarItems.children).forEach(function(el) {
                detach(el);
            }), this.tbarAlign = !1, this.remove(tbarItems, "e-tbar-pos")), this.clearProperty();
        }, Toolbar.prototype.destroyMode = function() {
            this.scrollModule && (this.remove(this.scrollModule.element, "e-rtl"), this.destroyHScroll()), 
            this.remove(this.element, "e-tbar-extended"), this.popObj && this.popupRefresh(this.popObj.element, !0);
        }, Toolbar.prototype.add = function(ele, val) {
            ele.classList.add(val);
        }, Toolbar.prototype.remove = function(ele, val) {
            ele.classList.remove(val);
        }, Toolbar.prototype.elementFocus = function(ele) {
            var fChild = ele.firstElementChild;
            fChild ? (fChild.focus(), this.activeEleSwitch(ele)) : ele.focus();
        }, Toolbar.prototype.clstElement = function(tbrNavChk, trgt) {
            return tbrNavChk && this.popObj && isVisible(this.popObj.element) ? this.popObj.element.querySelector("." + CLS_ITEM) : this.element === trgt || tbrNavChk ? this.element.querySelector("." + CLS_ITEM + ":not(.e-overlay ):not(.e-separator )") : closest(trgt, "." + CLS_ITEM);
        }, Toolbar.prototype.keyHandling = function(clst, e, trgt, navChk, scrollChk) {
            var popObj = this.popObj, rootEle = this.element, popAnimate = {
                name: "FadeOut",
                duration: 100
            };
            switch (e.action) {
              case "moveRight":
                rootEle === trgt ? this.elementFocus(clst) : navChk || this.eleFocus(clst, "next");
                break;

              case "moveLeft":
                navChk || this.eleFocus(clst, "previous");
                break;

              case "home":
              case "end":
                var ele = void 0, nodes = void 0;
                if (clst) {
                    var popupCheck = closest(clst, ".e-popup");
                    popupCheck ? isVisible(this.popObj.element) && (nodes = [].slice.call(popupCheck.children), 
                    ele = "home" === e.action ? nodes[0] : nodes[nodes.length - 1]) : (nodes = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM), 
                    ele = "home" === e.action ? nodes[0] : nodes[nodes.length - 1]), ele && this.elementFocus(ele);
                }
                break;

              case "moveUp":
              case "moveDown":
                var value = "moveUp" === e.action ? "previous" : "next";
                if (popObj && closest(trgt, ".e-popup")) {
                    var popEle = popObj.element, popFrstEle = popEle.firstElementChild;
                    if ("previous" === value && popFrstEle === clst || "next" === value && popEle.lastElementChild === clst) return;
                    this.eleFocus(clst, value);
                } else "moveDown" === e.action && popObj && isVisible(popObj.element) && this.elementFocus(clst);
                break;

              case "tab":
                if (!scrollChk && !navChk) {
                    var ele_1 = clst.firstElementChild;
                    rootEle === trgt && (this.activeEle ? this.activeEle.focus() : (this.activeEleRemove(ele_1), 
                    ele_1.focus()), this.element.removeAttribute("tabindex"));
                }
                break;

              case "popupClose":
                popObj && "Extended" !== this.overflowMode && popObj.hide(popAnimate);
                break;

              case "popupOpen":
                if (!navChk) return;
                popObj && !isVisible(popObj.element) ? (popObj.element.style.top = rootEle.offsetHeight + "px", 
                popObj.show({
                    name: "FadeIn",
                    duration: 100
                })) : popObj.hide(popAnimate);
            }
        }, Toolbar.prototype.keyActionHandler = function(e) {
            var trgt = e.target;
            if ("INPUT" !== trgt.tagName && "TEXTAREA" !== trgt.tagName && !this.element.classList.contains("e-overlay")) {
                e.preventDefault();
                var clst, tbrNavChk = trgt.classList.contains("e-hor-nav"), tbarScrollChk = trgt.classList.contains("e-scroll-nav");
                ((clst = this.clstElement(tbrNavChk, trgt)) || tbarScrollChk) && this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
            }
        }, Toolbar.prototype.disable = function(value) {
            var rootEle = this.element;
            value ? rootEle.classList.add("e-overlay") : rootEle.classList.remove("e-overlay"), 
            rootEle.setAttribute("tabindex", value ? "-1" : "0"), this.activeEle && this.activeEle.setAttribute("tabindex", value ? "-1" : "0"), 
            this.scrollModule && this.scrollModule.disable(value), this.popObj && (isVisible(this.popObj.element) && "Extended" !== this.overflowMode && this.popObj.hide(), 
            rootEle.querySelector("#" + rootEle.id + "_nav").setAttribute("tabindex", value ? "-1" : "0"));
        }, Toolbar.prototype.eleFocus = function(closest, pos) {
            var sib = Object(closest)[pos + "ElementSibling"], contains = function(el) {
                return el.classList.contains("e-separator") || el.classList.contains("e-overlay");
            };
            if (sib) {
                var skipEle = contains(sib);
                if (skipEle) {
                    if (!Object(sib)[pos + "ElementSibling"]) return;
                    if (sib = Object(sib)[pos + "ElementSibling"], skipEle = contains(sib)) return void this.eleFocus(sib, pos);
                }
                this.elementFocus(sib);
            } else if (this.tbarAlign) {
                var elem = Object(closest.parentElement)[pos + "ElementSibling"];
                if (isNullOrUndefined(elem) || 0 !== elem.children.length || (elem = Object(elem)[pos + "ElementSibling"]), 
                !isNullOrUndefined(elem) && elem.children.length > 0) if ("next" === pos) {
                    contains(el = elem.querySelector("." + CLS_ITEM)) ? this.eleFocus(el, pos) : (el.firstElementChild.focus(), 
                    this.activeEleSwitch(el));
                } else {
                    var el;
                    contains(el = elem.lastElementChild) ? this.eleFocus(el, pos) : this.elementFocus(el);
                }
            }
        }, Toolbar.prototype.clickHandler = function(e) {
            var trgt = e.target, clsList = trgt.classList, ele = this.element, isPopupElement = !isNullOrUndefined(closest(trgt, ".e-toolbar-pop")), popupNav = closest(trgt, ".e-hor-nav");
            popupNav || (popupNav = trgt), !ele.children[0].classList.contains("e-hscroll") && clsList.contains("e-hor-nav") && (clsList = trgt.querySelector(".e-icons").classList), 
            (clsList.contains("e-popup-up-icon") || clsList.contains("e-popup-down-icon")) && this.popupClickHandler(ele, popupNav, "e-rtl");
            var itemObj, clst = closest(e.target, "." + CLS_ITEM);
            if (!isNullOrUndefined(clst) && !clst.classList.contains("e-overlay") || popupNav.classList.contains("e-hor-nav")) {
                clst && (itemObj = this.items[this.tbarEle.indexOf(clst)]);
                var eventArgs = {
                    originalEvent: e,
                    item: itemObj
                };
                itemObj && !isNullOrUndefined(itemObj.click) && this.trigger("items[" + this.tbarEle.indexOf(clst) + "].click", eventArgs), 
                eventArgs.cancel || this.trigger("clicked", eventArgs), isNullOrUndefined(this.popObj) || !isPopupElement || eventArgs.cancel || "Popup" !== this.overflowMode || this.popObj.hide({
                    name: "FadeOut",
                    duration: 100
                });
            }
        }, Toolbar.prototype.popupClickHandler = function(ele, popupNav, CLS_RTL) {
            var popObj = this.popObj;
            isVisible(popObj.element) ? (popupNav.classList.remove("e-nav-active"), popObj.hide({
                name: "FadeOut",
                duration: 100
            })) : (ele.classList.contains(CLS_RTL) && (popObj.enableRtl = !0, popObj.position = {
                X: "left",
                Y: "top"
            }), 0 !== popObj.offsetX || ele.classList.contains(CLS_RTL) || (popObj.enableRtl = !1, 
            popObj.position = {
                X: "right",
                Y: "top"
            }), popObj.dataBind(), popObj.refreshPosition(), popObj.element.style.top = this.getElementOffsetY() + "px", 
            "Extended" === this.overflowMode && (popObj.element.style.minHeight = "0px"), popupNav.classList.add("e-nav-active"), 
            popObj.show({
                name: "FadeIn",
                duration: 100
            }));
        }, Toolbar.prototype.render = function() {
            this.initialize(), this.renderControl(), this.separator(), this.wireEvents();
        }, Toolbar.prototype.initialize = function() {
            var width = formatUnit(this.width), height = formatUnit(this.height);
            "msie" === Browser.info.name && "auto" === this.height && "MultiRow" !== this.overflowMode || setStyleAttribute(this.element, {
                height: height
            }), setStyleAttribute(this.element, {
                width: width
            });
            attributes(this.element, {
                role: "toolbar",
                "aria-disabled": "false",
                "aria-haspopup": "false",
                "aria-orientation": "horizontal"
            });
        }, Toolbar.prototype.renderControl = function() {
            this.trgtEle = this.element.children.length > 0 ? this.element.querySelector("div") : null, 
            this.tbarAlgEle = {
                lefts: [],
                centers: [],
                rights: []
            }, this.renderItems(), this.renderOverflowMode(), this.tbarAlign && this.itemPositioning(), 
            this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element) && this.popupRefresh(this.popObj.element, !1);
        }, Toolbar.prototype.initHScroll = function(element, innerItems) {
            !this.scrollModule && this.checkOverflow(element, innerItems[0]) && (this.tbarAlign && this.element.querySelector("." + CLS_ITEMS + " .e-toolbar-center").removeAttribute("style"), 
            this.scrollModule = new HScroll({
                scrollStep: this.scrollStep,
                enableRtl: this.enableRtl
            }), this.scrollModule.createElement = this.createElement, this.scrollModule.appendTo(innerItems[0]), 
            this.remove(this.scrollModule.element, "e-tbar-pos"), setStyleAttribute(this.element, {
                overflow: "hidden"
            }));
        }, Toolbar.prototype.itemWidthCal = function(items) {
            var style, width = 0;
            return [].slice.call(selectAll("." + CLS_ITEM, items)).forEach(function(el) {
                isVisible(el) && (style = window.getComputedStyle(el), width += el.offsetWidth + parseFloat(style.marginRight) + parseFloat(style.marginLeft));
            }), width;
        }, Toolbar.prototype.checkOverflow = function(element, innerItem) {
            if (isNullOrUndefined(element) || isNullOrUndefined(innerItem) || !isVisible(element)) return !1;
            var eleWidth = element.offsetWidth, itemWidth = innerItem.offsetWidth;
            (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) && (itemWidth = this.itemWidthCal(this.scrollModule ? innerItem.querySelector(".e-hscroll-content") : innerItem));
            var popNav = element.querySelector(".e-hor-nav"), scrollNav = element.querySelector(".e-scroll-nav");
            return itemWidth > eleWidth - (popNav ? popNav.offsetWidth : scrollNav ? 2 * scrollNav.offsetWidth : 0);
        }, Toolbar.prototype.refreshOverflow = function() {
            this.resize();
        }, Toolbar.prototype.renderOverflowMode = function() {
            var ele = this.element, innerItems = ele.querySelector("." + CLS_ITEMS), priorityCheck = this.popupPriCount > 0;
            if (ele && ele.children.length > 0) switch (this.offsetWid = ele.offsetWidth, this.remove(this.element, "e-toolpop"), 
            "msie" === Browser.info.name && "auto" === this.height && (ele.style.height = ""), 
            this.overflowMode) {
              case "Scrollable":
                isNullOrUndefined(this.scrollModule) && this.initHScroll(ele, ele.getElementsByClassName(CLS_ITEMS));
                break;

              case "Popup":
                this.add(this.element, "e-toolpop"), this.tbarAlign && this.removePositioning(), 
                (this.checkOverflow(ele, innerItems) || priorityCheck) && (this.createPopupEle(ele, [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, ele))), 
                this.element.querySelector(".e-hor-nav").setAttribute("tabIndex", "0")), this.tbarAlign && (this.add(innerItems, "e-tbar-pos"), 
                this.itemPositioning());
                break;

              case "MultiRow":
                this.add(innerItems, "e-toolbar-multirow"), "hidden" === ele.style.overflow && (ele.style.overflow = ""), 
                "msie" !== Browser.info.name && "auto" === ele.style.height || (ele.style.height = "auto");
                break;

              case "Extended":
                this.add(this.element, "e-extended-toolbar"), (this.checkOverflow(ele, innerItems) || priorityCheck) && (this.createPopupEle(ele, [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, ele))), 
                this.element.querySelector(".e-hor-nav").setAttribute("tabIndex", "0"));
            }
        }, Toolbar.prototype.separator = function() {
            var eleInlineItem, element = this.element, eleItem = [].slice.call(element.querySelectorAll(".e-separator")), multiVar = element.querySelector(".e-multirow-separator"), extendVar = element.querySelector(".e-extended-separator");
            null !== (eleInlineItem = "MultiRow" === this.overflowMode ? multiVar : extendVar) && ("MultiRow" === this.overflowMode ? eleInlineItem.classList.remove("e-multirow-separator") : "Extended" === this.overflowMode && eleInlineItem.classList.remove("e-extended-separator"));
            for (var i = 0; i <= eleItem.length - 1; i++) eleItem[i].offsetLeft < 30 && 0 !== eleItem[i].offsetLeft && ("MultiRow" === this.overflowMode ? eleItem[i].classList.add("e-multirow-separator") : "Extended" === this.overflowMode && eleItem[i].classList.add("e-extended-separator"));
        }, Toolbar.prototype.createPopupEle = function(ele, innerEle) {
            var innerNav = ele.querySelector(".e-hor-nav");
            innerNav || this.createPopupIcon(ele), innerNav = ele.querySelector(".e-hor-nav");
            var eleWidth = ele.offsetWidth - innerNav.offsetWidth;
            this.element.classList.remove("e-rtl"), setStyleAttribute(this.element, {
                direction: "initial"
            }), this.checkPriority(ele, innerEle, eleWidth, !0), this.enableRtl && this.element.classList.add("e-rtl"), 
            this.element.style.removeProperty("direction"), this.createPopup();
        }, Toolbar.prototype.pushingPoppedEle = function(tbarObj, popupPri, ele, eleHeight, sepHeight) {
            var element = tbarObj.element, nodes = selectAll(".e-overflow-show", ele), nodeIndex = 0, nodePri = 0;
            [].slice.call(selectAll("." + CLS_POPUP, element.querySelector("." + CLS_ITEMS))).forEach(function(el, index) {
                nodes = selectAll(".e-overflow-show", ele), el.classList.contains("e-overflow-show") && nodes.length > 0 ? tbarObj.tbResize && nodes.length > index ? (ele.insertBefore(el, nodes[index]), 
                ++nodePri) : (ele.insertBefore(el, ele.children[nodes.length]), ++nodePri) : el.classList.contains("e-overflow-show") ? (ele.insertBefore(el, ele.firstChild), 
                ++nodePri) : tbarObj.tbResize && el.classList.contains("e-overflow-hide") && ele.children.length > 0 && 0 === nodes.length ? (ele.insertBefore(el, ele.firstChild), 
                ++nodePri) : el.classList.contains("e-overflow-hide") ? popupPri.push(el) : tbarObj.tbResize ? (ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]), 
                ++nodeIndex) : ele.appendChild(el), el.classList.contains("e-separator") ? setStyleAttribute(el, {
                    display: "",
                    height: sepHeight + "px"
                }) : setStyleAttribute(el, {
                    display: "",
                    height: eleHeight + "px"
                });
            }), popupPri.forEach(function(el) {
                ele.appendChild(el);
            });
            for (var tbarEle = selectAll("." + CLS_ITEM, element.querySelector("." + CLS_ITEMS)), i = tbarEle.length - 1; i >= 0; i--) {
                var tbarElement = tbarEle[i];
                if (!tbarElement.classList.contains("e-separator") || "Extended" === this.overflowMode) break;
                setStyleAttribute(tbarElement, {
                    display: "none"
                });
            }
        }, Toolbar.prototype.createPopup = function() {
            var eleHeight, eleItem, sepHeight, sepItem, element = this.element;
            "Extended" === this.overflowMode && (sepItem = element.querySelector(".e-separator:not(." + CLS_POPUP + " )"), 
            sepHeight = "auto" === element.style.height || "" === element.style.height ? null : sepItem.offsetHeight), 
            eleItem = element.querySelector("." + CLS_ITEM + ":not(.e-separator ):not(." + CLS_POPUP + " )"), 
            eleHeight = "auto" === element.style.height || "" === element.style.height ? null : eleItem.offsetHeight;
            var ele;
            if (element.querySelector("#" + element.id + "_popup.e-toolbar-pop")) ele = element.querySelector("#" + element.id + "_popup.e-toolbar-pop"); else {
                var extendEle = this.createElement("div", {
                    id: element.id + "_popup",
                    className: "e-toolbar-pop e-toolbar-extended"
                }), popupEle = this.createElement("div", {
                    id: element.id + "_popup",
                    className: "e-toolbar-pop"
                });
                ele = "Extended" === this.overflowMode ? extendEle : popupEle;
            }
            this.pushingPoppedEle(this, [], ele, eleHeight, sepHeight), this.popupInit(element, ele);
        }, Toolbar.prototype.getElementOffsetY = function() {
            return "Extended" === this.overflowMode && "border-box" === window.getComputedStyle(this.element).getPropertyValue("box-sizing") ? this.element.clientHeight : this.element.offsetHeight;
        }, Toolbar.prototype.popupInit = function(element, ele) {
            if (this.popObj) {
                var popupEle = this.popObj.element;
                setStyleAttribute(popupEle, {
                    maxHeight: "",
                    display: "block"
                }), setStyleAttribute(popupEle, {
                    maxHeight: popupEle.offsetHeight + "px",
                    display: ""
                });
            } else {
                element.appendChild(ele), setStyleAttribute(this.element, {
                    overflow: ""
                });
                var eleStyles = window.getComputedStyle(this.element), popup = new Popup(null, {
                    relateTo: this.element,
                    offsetY: this.getElementOffsetY(),
                    enableRtl: this.enableRtl,
                    open: this.popupOpen.bind(this),
                    close: this.popupClose.bind(this),
                    collision: {
                        Y: this.enableCollision ? "flip" : "none"
                    },
                    position: this.enableRtl ? {
                        X: "left",
                        Y: "top"
                    } : {
                        X: "right",
                        Y: "top"
                    }
                });
                popup.appendTo(ele), "Extended" === this.overflowMode && (popup.width = parseFloat(eleStyles.width) + 2 * parseFloat(eleStyles.borderRightWidth), 
                popup.offsetX = 0), EventHandler.add(document, "scroll", this.docEvent.bind(this)), 
                EventHandler.add(document, "click ", this.docEvent.bind(this)), popup.element.style.maxHeight = popup.element.offsetHeight + "px", 
                popup.hide(), this.popObj = popup, this.element.setAttribute("aria-haspopup", "true");
            }
        }, Toolbar.prototype.tbarPopupHandler = function(isOpen) {
            "Extended" === this.overflowMode && (isOpen ? this.add(this.element, "e-tbar-extended") : this.remove(this.element, "e-tbar-extended"));
        }, Toolbar.prototype.popupOpen = function(e) {
            var popObj = this.popObj;
            popObj.offsetY = this.getElementOffsetY(), popObj.dataBind();
            var popupEle = this.popObj.element, toolEle = this.popObj.element.parentElement, popupNav = toolEle.querySelector(".e-hor-nav");
            setStyleAttribute(popObj.element, {
                height: "auto",
                maxHeight: ""
            }), popObj.element.style.maxHeight = popObj.element.offsetHeight + "px", "Extended" === this.overflowMode && (popObj.element.style.minHeight = "");
            var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top, popIcon = popupNav.firstElementChild;
            popupNav.classList.add("e-nav-active"), classList(popIcon, [ "e-popup-up-icon" ], [ "e-popup-down-icon" ]), 
            this.tbarPopupHandler(!0);
            var scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;
            if (window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
                var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
                popObj.height = overflowHeight + "px";
                for (var i = 0; i <= popupEle.childElementCount; i++) {
                    var ele = popupEle.children[i];
                    if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
                        overflowHeight = ele.offsetTop;
                        break;
                    }
                }
                setStyleAttribute(popObj.element, {
                    maxHeight: overflowHeight + "px"
                });
            }
        }, Toolbar.prototype.popupClose = function(e) {
            var popupNav = this.element.querySelector(".e-hor-nav"), popIcon = popupNav.firstElementChild;
            popupNav.classList.remove("e-nav-active"), classList(popIcon, [ "e-popup-down-icon" ], [ "e-popup-up-icon" ]), 
            this.tbarPopupHandler(!1);
        }, Toolbar.prototype.checkPriority = function(ele, inEle, eleWidth, pre) {
            for (var popPriority = this.popupPriCount > 0, eleWid = eleWidth, sepCheck = 0, itemCount = 0, itemPopCount = 0, checkClass = function(ele, val) {
                var rVal = !1;
                return val.forEach(function(cls) {
                    ele.classList.contains(cls) && (rVal = !0);
                }), rVal;
            }, i = inEle.length - 1; i >= 0; i--) {
                var mrgn = parseFloat(window.getComputedStyle(inEle[i]).marginRight);
                mrgn += parseFloat(window.getComputedStyle(inEle[i]).marginLeft);
                var fstEleCheck = inEle[i] === this.tbarEle[0];
                fstEleCheck && (this.tbarEleMrgn = mrgn);
                var eleWid_1 = fstEleCheck ? inEle[i].offsetWidth + mrgn : inEle[i].offsetWidth;
                if (checkClass(inEle[i], [ "e-popup-alone" ]) && popPriority && (inEle[i].classList.add(CLS_POPUP), 
                setStyleAttribute(inEle[i], {
                    display: "none",
                    minWidth: eleWid_1 + "px"
                }), itemPopCount++), inEle[i].offsetLeft + inEle[i].offsetWidth + mrgn > eleWidth) {
                    if (inEle[i].classList.contains("e-separator")) {
                        if ("Extended" === this.overflowMode) {
                            if (itemCount === itemPopCount) {
                                checkClass(sepEle = inEle[i], [ "e-separator", "e-ignore" ]) && (inEle[i].classList.add(CLS_POPUP), 
                                itemPopCount++);
                            }
                            itemCount++;
                        } else if ("Popup" === this.overflowMode) {
                            if (sepCheck > 0 && itemCount === itemPopCount) {
                                var sepEle;
                                checkClass(sepEle = inEle[i + itemCount + (sepCheck - 1)], [ "e-separator", "e-ignore" ]) && setStyleAttribute(sepEle, {
                                    display: "none"
                                });
                            }
                            sepCheck++, itemCount = 0, itemPopCount = 0;
                        }
                    } else itemCount++;
                    inEle[i].classList.contains("e-overflow-show") && pre ? eleWidth -= inEle[i].offsetWidth + mrgn : checkClass(inEle[i], [ "e-separator", "e-ignore" ]) ? eleWidth -= inEle[i].offsetWidth + mrgn : (inEle[i].classList.add(CLS_POPUP), 
                    setStyleAttribute(inEle[i], {
                        display: "none",
                        minWidth: eleWid_1 + "px"
                    }), itemPopCount++);
                }
            }
            if (pre) {
                var popedEle = selectAll("." + CLS_ITEM + ":not(." + CLS_POPUP + ")", this.element);
                this.checkPriority(ele, popedEle, eleWid, !1);
            }
        }, Toolbar.prototype.createPopupIcon = function(element) {
            var id = element.id.concat("_nav"), className = "e-" + element.id.concat("_nav e-hor-nav");
            className = "Extended" === this.overflowMode ? className + " e-expended-nav" : className;
            var nav = this.createElement("div", {
                id: id,
                className: className
            });
            "msie" !== Browser.info.name && "edge" !== Browser.info.name || nav.classList.add("e-ie-align");
            var navItem = this.createElement("div", {
                className: "e-popup-down-icon e-icons"
            });
            nav.appendChild(navItem), nav.setAttribute("tabindex", "0"), element.appendChild(nav);
        }, Toolbar.prototype.tbarPriRef = function(inEle, indx, sepPri, el, des, elWid, wid, ig) {
            var ignoreCount = ig, popEle = this.popObj.element, priEleCnt = selectAll("." + CLS_POPUP + ":not(.e-overflow-show)", popEle).length, checkClass = function(ele, val) {
                return ele.classList.contains(val);
            };
            if (0 === selectAll(".e-toolbar-item:not(.e-separator):not(.e-overflow-show)", inEle).length) {
                var eleSep = inEle.children[indx - (indx - sepPri) - 1], ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, "e-ignore");
                if (!isNullOrUndefined(eleSep) && checkClass(eleSep, "e-separator") && !isVisible(eleSep) || ignoreCheck) {
                    eleSep.style.display = "inherit";
                    var eleSepWidth = eleSep.offsetWidth + 2 * parseFloat(window.getComputedStyle(eleSep).marginRight), prevSep = eleSep.previousElementSibling;
                    elWid + eleSepWidth < wid || des ? (inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]), 
                    isNullOrUndefined(prevSep) || (prevSep.style.display = "")) : prevSep.classList.contains("e-separator") && (prevSep.style.display = "none"), 
                    eleSep.style.display = "";
                } else inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
            } else inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
        }, Toolbar.prototype.popupRefresh = function(popupEle, destroy) {
            var _this = this, ele = this.element, popNav = ele.querySelector(".e-hor-nav"), innerEle = ele.querySelector("." + CLS_ITEMS);
            if (!isNullOrUndefined(popNav)) {
                innerEle.removeAttribute("style"), popupEle.style.display = "block";
                var width = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth), popupEleWidth = 0;
                [].slice.call(popupEle.children).forEach(function(el) {
                    popupEleWidth += _this.popupEleWidth(el), setStyleAttribute(el, {
                        position: ""
                    });
                }), width + popNav.offsetWidth > popupEleWidth && 0 === this.popupPriCount && (destroy = !0), 
                this.popupEleRefresh(width, popupEle, destroy), popupEle.style.display = "", 0 === popupEle.children.length && popNav && this.popObj && (detach(popNav), 
                popNav = null, this.popObj.destroy(), detach(this.popObj.element), this.popObj = null, 
                ele.setAttribute("aria-haspopup", "false"), ele.classList.remove("e-toolpop"));
            }
        }, Toolbar.prototype.ignoreEleFetch = function(index, innerEle) {
            var ignoreEle = [].slice.call(innerEle.querySelectorAll(".e-ignore")), ignoreInx = [], count = 0;
            return ignoreEle.length > 0 ? (ignoreEle.forEach(function(ele) {
                ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
            }), ignoreInx.forEach(function(val) {
                val <= index && count++;
            }), count) : 0;
        }, Toolbar.prototype.checkPopupRefresh = function(root, popEle) {
            popEle.style.display = "block";
            var elWid = this.popupEleWidth(popEle.firstElementChild);
            popEle.firstElementChild.style.removeProperty("Position");
            var tbarWidth = root.offsetWidth - root.querySelector(".e-hor-nav").offsetWidth, tbarItemsWid = root.querySelector("." + CLS_ITEMS).offsetWidth;
            return popEle.style.removeProperty("display"), tbarWidth > elWid + tbarItemsWid;
        }, Toolbar.prototype.popupEleWidth = function(el) {
            el.style.position = "absolute";
            var elWidth = el.offsetWidth, btnText = el.querySelector(".e-tbar-btn-text");
            if (el.classList.contains("e-tbtn-align") || el.classList.contains("e-popup-text")) {
                var btn = el.children[0];
                !isNullOrUndefined(btnText) && el.classList.contains("e-popup-text") ? btnText.style.display = "none" : !isNullOrUndefined(btnText) && el.classList.contains("e-toolbar-text") && (btnText.style.display = "block"), 
                btn.style.minWidth = "0%", elWidth = parseFloat(el.style.minWidth), btn.style.minWidth = "", 
                isNullOrUndefined(btnText) || (btnText.style.display = "");
            }
            return elWidth;
        }, Toolbar.prototype.popupEleRefresh = function(width, popupEle, destroy) {
            for (var priEleCnt, index, popPriority = this.popupPriCount > 0, eleSplice = this.tbarEle, innerEle = this.element.querySelector("." + CLS_ITEMS), ignoreCount = 0, _loop_1 = function(el) {
                if (el.classList.contains("e-popup-alone") && popPriority && !destroy) return "continue";
                var elWidth = this_1.popupEleWidth(el);
                if (el === this_1.tbarEle[0] && (elWidth += this_1.tbarEleMrgn), el.style.position = "", 
                !(elWidth < width || destroy)) return "break";
                if (el.style.minWidth = "", el.classList.contains("e-overflow-hide") || el.classList.remove(CLS_POPUP), 
                index = this_1.tbarEle.indexOf(el), this_1.tbarAlign) {
                    var pos = this_1.items[index].align;
                    index = this_1.tbarAlgEle[(pos + "s").toLowerCase()].indexOf(el), eleSplice = this_1.tbarAlgEle[(pos + "s").toLowerCase()], 
                    innerEle = this_1.element.querySelector("." + CLS_ITEMS + " .e-toolbar-" + pos.toLowerCase());
                }
                var sepBeforePri_1 = 0;
                "Extended" !== this_1.overflowMode && eleSplice.slice(0, index).forEach(function(el) {
                    (el.classList.contains("e-overflow-show") || el.classList.contains("e-separator")) && (el.classList.contains("e-separator") && (el.style.display = "", 
                    width -= el.offsetWidth), sepBeforePri_1++);
                }), ignoreCount = this_1.ignoreEleFetch(index, innerEle), el.classList.contains("e-overflow-show") ? (this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el, destroy, elWidth, width, ignoreCount), 
                width -= el.offsetWidth) : 0 === index ? (innerEle.insertBefore(el, innerEle.firstChild), 
                width -= el.offsetWidth) : (priEleCnt = selectAll(".e-overflow-show", this_1.popObj.element).length, 
                innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]), width -= el.offsetWidth), 
                el.style.height = "";
            }, this_1 = this, _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
                if ("break" === _loop_1(_a[_i])) break;
            }
            this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]) && !destroy && this.renderOverflowMode();
        }, Toolbar.prototype.removePositioning = function() {
            var item = this.element.querySelector("." + CLS_ITEMS);
            if (!isNullOrUndefined(item) && item.classList.contains("e-tbar-pos")) {
                this.remove(item, "e-tbar-pos");
                var innerItem = [].slice.call(item.childNodes);
                innerItem[1].removeAttribute("style"), innerItem[2].removeAttribute("style");
            }
        }, Toolbar.prototype.refreshPositioning = function() {
            var item = this.element.querySelector("." + CLS_ITEMS);
            this.add(item, "e-tbar-pos"), this.itemPositioning();
        }, Toolbar.prototype.itemPositioning = function() {
            var item = this.element.querySelector("." + CLS_ITEMS);
            if (!isNullOrUndefined(item) && item.classList.contains("e-tbar-pos")) {
                var innerItem, popupNav = this.element.querySelector(".e-hor-nav"), margin = (innerItem = this.scrollModule ? [].slice.call(item.querySelector(".e-hscroll-content").children) : [].slice.call(item.childNodes))[0].offsetWidth + innerItem[2].offsetWidth, tbarWid = this.element.offsetWidth;
                if (popupNav) {
                    tbarWid -= popupNav.offsetWidth;
                    var popWid = popupNav.offsetWidth + "px";
                    innerItem[2].removeAttribute("style"), this.enableRtl ? innerItem[2].style.left = popWid : innerItem[2].style.right = popWid;
                }
                if (!(tbarWid <= margin)) {
                    var value = (tbarWid - margin - innerItem[1].offsetWidth) / 2;
                    innerItem[1].removeAttribute("style");
                    var mrgn = innerItem[0].offsetWidth + value + "px";
                    this.enableRtl ? innerItem[1].style.marginRight = mrgn : innerItem[1].style.marginLeft = mrgn;
                }
            }
        }, Toolbar.prototype.tbarItemAlign = function(item, itemEle, pos) {
            var _this = this;
            if (!item.showAlwaysInPopup || "Show" === item.overflow) {
                var alignDiv = [];
                if (alignDiv.push(this.createElement("div", {
                    className: "e-toolbar-left"
                })), alignDiv.push(this.createElement("div", {
                    className: "e-toolbar-center"
                })), alignDiv.push(this.createElement("div", {
                    className: "e-toolbar-right"
                })), 0 === pos && "Left" !== item.align) alignDiv.forEach(function(ele) {
                    itemEle.appendChild(ele);
                }), this.tbarAlign = !0, this.add(itemEle, "e-tbar-pos"); else if ("Left" !== item.align) {
                    var alignEle = itemEle.childNodes, leftAlign_1 = alignDiv[0];
                    [].slice.call(alignEle).forEach(function(el) {
                        _this.tbarAlgEle.lefts.push(el), leftAlign_1.appendChild(el);
                    }), itemEle.appendChild(leftAlign_1), itemEle.appendChild(alignDiv[1]), itemEle.appendChild(alignDiv[2]), 
                    this.tbarAlign = !0, this.add(itemEle, "e-tbar-pos");
                }
            }
        }, Toolbar.prototype.ctrlTemplate = function() {
            var _this = this;
            this.ctrlTem = this.trgtEle.cloneNode(!0), this.add(this.trgtEle, CLS_ITEMS), this.tbarEle = [];
            [].slice.call(this.trgtEle.children).forEach(function(ele) {
                "DIV" === ele.tagName && (_this.tbarEle.push(ele), ele.setAttribute("aria-disabled", "false"), 
                _this.add(ele, CLS_ITEM));
            });
        }, Toolbar.prototype.renderItems = function() {
            var itemEleDom, innerItem, innerPos, ele = this.element, items = this.items;
            if (ele && ele.children.length > 0 && (itemEleDom = ele.querySelector("." + CLS_ITEMS)), 
            null != this.trgtEle) this.ctrlTemplate(); else if (ele && items.length > 0) {
                itemEleDom || (itemEleDom = this.createElement("div", {
                    className: CLS_ITEMS
                }));
                for (var i = 0; i < items.length; i++) innerItem = this.renderSubComponent(items[i], i), 
                -1 === this.tbarEle.indexOf(innerItem) && this.tbarEle.push(innerItem), this.tbarAlign || this.tbarItemAlign(items[i], itemEleDom, i), 
                (innerPos = itemEleDom.querySelector(".e-toolbar-" + items[i].align.toLowerCase())) ? (items[i].showAlwaysInPopup && "Show" !== items[i].overflow || this.tbarAlgEle[(items[i].align + "s").toLowerCase()].push(innerItem), 
                innerPos.appendChild(innerItem)) : itemEleDom.appendChild(innerItem);
                ele.appendChild(itemEleDom);
            }
        }, Toolbar.prototype.setAttr = function(attr, element) {
            for (var keyVal, key = Object.keys(attr), i = 0; i < key.length; i++) "class" === (keyVal = key[i]) ? this.add(element, attr[keyVal]) : element.setAttribute(keyVal, attr[keyVal]);
        }, Toolbar.prototype.enableItems = function(items, isEnable) {
            var elements = items, len = elements.length;
            isNullOrUndefined(isEnable) && (isEnable = !0);
            var enable = function(isEnable, ele) {
                isEnable ? (ele.classList.remove("e-overlay"), ele.setAttribute("aria-disabled", "false")) : (ele.classList.add("e-overlay"), 
                ele.setAttribute("aria-disabled", "true"));
            };
            if (len && len > 1) {
                for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
                    enable(isEnable, _a[_i]);
                }
                isEnable ? removeClass(elements, "e-overlay") : addClass(elements, "e-overlay");
            } else {
                enable(isEnable, len && 1 === len ? elements[0] : items);
            }
        }, Toolbar.prototype.addItems = function(items, index) {
            var innerItems, itemsDiv = this.element.querySelector("." + CLS_ITEMS);
            if (isNullOrUndefined(itemsDiv)) this.itemsRerender(items); else {
                var innerEle, itemAgn = "Left";
                isNullOrUndefined(index) && (index = 0), items.forEach(function(e) {
                    isNullOrUndefined(e.align) || "Left" === e.align || "Left" !== itemAgn || (itemAgn = e.align);
                });
                for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                    var item = items_1[_i];
                    if (isNullOrUndefined(item.type) && (item.type = "Button"), innerItems = selectAll("." + CLS_ITEM, this.element), 
                    item.align = itemAgn, innerEle = this.renderSubComponent(item, index), this.tbarEle.length >= index && innerItems.length >= 0) {
                        isNullOrUndefined(this.scrollModule) && this.destroyMode();
                        var algIndex = "L" === item.align[0] ? 0 : "C" === item.align[0] ? 1 : 2, ele = void 0;
                        this.tbarAlign || "Left" === itemAgn ? this.tbarAlign ? ((ele = closest(innerItems[0], "." + CLS_ITEMS).children[algIndex]).insertBefore(innerEle, ele.children[index]), 
                        this.tbarAlgEle[(item.align + "s").toLowerCase()].splice(index, 0, innerEle), this.refreshPositioning()) : 0 === innerItems.length ? (innerItems = selectAll("." + CLS_ITEMS, this.element))[0].appendChild(innerEle) : innerItems[0].parentNode.insertBefore(innerEle, innerItems[index]) : (this.tbarItemAlign(item, itemsDiv, 1), 
                        this.tbarAlign = !0, (ele = closest(innerItems[0], "." + CLS_ITEMS).children[algIndex]).appendChild(innerEle), 
                        this.tbarAlgEle[(item.align + "s").toLowerCase()].push(innerEle), this.refreshPositioning()), 
                        this.items.splice(index, 0, item), this.tbarEle.splice(index, 0, innerEle), index++, 
                        this.offsetWid = itemsDiv.offsetWidth;
                    }
                }
                itemsDiv.style.width = "", this.renderOverflowMode();
            }
        }, Toolbar.prototype.removeItems = function(args) {
            var index, elements = args, innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
            if ("number" == typeof elements) index = parseInt(args.toString(), 10), this.removeItemByIndex(index, innerItems); else if (elements && elements.length > 1) for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
                var ele = _a[_i];
                index = this.tbarEle.indexOf(ele), this.removeItemByIndex(index, innerItems), innerItems = selectAll("." + CLS_ITEM, this.element);
            } else {
                ele = elements && elements.length && 1 === elements.length ? elements[0] : args;
                index = innerItems.indexOf(ele), this.removeItemByIndex(index, innerItems);
            }
            this.resize();
        }, Toolbar.prototype.removeItemByIndex = function(index, innerItems) {
            if (this.tbarEle[index] && innerItems[index]) {
                var eleIdx = this.tbarEle.indexOf(innerItems[index]);
                if (this.tbarAlign) {
                    var indexAgn = void 0;
                    indexAgn = this.tbarAlgEle[(this.items[eleIdx].align + "s").toLowerCase()].indexOf(this.tbarEle[eleIdx]), 
                    this.tbarAlgEle[(this.items[eleIdx].align + "s").toLowerCase()].splice(indexAgn, 1);
                }
                detach(innerItems[index]), this.items.splice(eleIdx, 1), this.tbarEle.splice(eleIdx, 1);
            }
        }, Toolbar.prototype.templateRender = function(templateProp, innerEle, item, index) {
            var isComponent, itemType = item.type, eleObj = templateProp;
            if ("object" == typeof templateProp && (isComponent = "function" == typeof eleObj.appendTo), 
            "string" != typeof templateProp && isComponent) {
                if ("Input" === itemType) {
                    ele = this.createElement("input");
                    item.id ? ele.id = item.id : ele.id = getUniqueID("tbr-ipt"), innerEle.appendChild(ele), 
                    eleObj.appendTo(ele);
                }
            } else {
                var templateFn = void 0, val = templateProp;
                val = "string" == typeof templateProp ? templateProp.trim() : templateProp;
                try {
                    if ("object" != typeof templateProp || isNullOrUndefined(templateProp.tagName)) {
                        if (document.querySelectorAll(val).length) {
                            var ele, tempStr = (ele = document.querySelector(val)).outerHTML.trim();
                            innerEle.appendChild(ele), ele.style.display = "", isNullOrUndefined(tempStr) || this.tempId.push(val);
                        }
                    } else innerEle.appendChild(templateProp);
                } catch (e) {
                    templateFn = compile$$1(val);
                }
                var tempArray = void 0;
                isNullOrUndefined(templateFn) || (tempArray = templateFn({}, this, "template")), 
                !isNullOrUndefined(tempArray) && tempArray.length > 0 && [].slice.call(tempArray).forEach(function(ele) {
                    isNullOrUndefined(ele.tagName) || (ele.style.display = ""), innerEle.appendChild(ele);
                });
            }
            this.add(innerEle, "e-template"), this.tbarEle.push(innerEle);
        }, Toolbar.prototype.buttonRendering = function(item, innerEle) {
            var dom = this.createElement("button", {
                className: "e-tbar-btn"
            });
            dom.setAttribute("type", "button");
            var iconCss, iconPos, textStr = item.text;
            item.id ? dom.id = item.id : dom.id = getUniqueID("e-tbr-btn");
            var btnTxt = this.createElement("div", {
                className: "e-tbar-btn-text"
            });
            textStr ? (btnTxt.innerHTML = textStr, dom.appendChild(btnTxt), dom.classList.add("e-tbtn-txt")) : this.add(innerEle, "e-tbtn-align"), 
            (item.prefixIcon || item.suffixIcon) && (item.prefixIcon && item.suffixIcon || item.prefixIcon ? (iconCss = item.prefixIcon + " e-icons", 
            iconPos = "Left") : (iconCss = item.suffixIcon + " e-icons", iconPos = "Right"));
            var btnObj = new Button({
                iconCss: iconCss,
                iconPosition: iconPos
            });
            return btnObj.createElement = this.createElement, btnObj.appendTo(dom), item.width && setStyleAttribute(dom, {
                width: formatUnit(item.width)
            }), dom;
        }, Toolbar.prototype.renderSubComponent = function(item, index) {
            var innerEle, dom;
            if ((innerEle = this.createElement("div", {
                className: CLS_ITEM
            })).setAttribute("aria-disabled", "false"), this.tbarEle || (this.tbarEle = []), 
            item.htmlAttributes && this.setAttr(item.htmlAttributes, innerEle), item.tooltipText) {
                var tempDom = this.createElement("div", {
                    innerHTML: item.tooltipText
                });
                innerEle.setAttribute("title", tempDom.textContent);
            }
            if (item.cssClass && (innerEle.className = innerEle.className + " " + item.cssClass), 
            item.template) this.templateRender(item.template, innerEle, item, index); else switch (item.type) {
              case "Button":
                (dom = this.buttonRendering(item, innerEle)).setAttribute("tabindex", "-1"), innerEle.appendChild(dom), 
                innerEle.addEventListener("click", this.itemClick.bind(this));
                break;

              case "Separator":
                this.add(innerEle, "e-separator");
            }
            if (item.showTextOn) {
                var sTxt = item.showTextOn;
                "Toolbar" === sTxt ? (this.add(innerEle, "e-toolbar-text"), this.add(innerEle, "e-tbtn-align")) : "Overflow" === sTxt && this.add(innerEle, "e-popup-text");
            }
            if (item.overflow) {
                var overflow = item.overflow;
                "Show" === overflow ? this.add(innerEle, "e-overflow-show") : "Hide" === overflow && (innerEle.classList.contains("e-separator") || this.add(innerEle, "e-overflow-hide"));
            }
            return "Show" !== item.overflow && item.showAlwaysInPopup && !innerEle.classList.contains("e-separator") && (this.add(innerEle, "e-popup-alone"), 
            this.popupPriCount++), innerEle;
        }, Toolbar.prototype.itemClick = function(e) {
            this.activeEleSwitch(e.currentTarget);
        }, Toolbar.prototype.activeEleSwitch = function(ele) {
            this.activeEleRemove(ele.firstElementChild), this.activeEle.focus();
        }, Toolbar.prototype.activeEleRemove = function(curEle) {
            isNullOrUndefined(this.activeEle) || this.activeEle.setAttribute("tabindex", "-1"), 
            this.activeEle = curEle, isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains("e-template") ? curEle.removeAttribute("tabindex") : this.activeEle.setAttribute("tabindex", "0");
        }, Toolbar.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, Toolbar.prototype.getModuleName = function() {
            return "toolbar";
        }, Toolbar.prototype.itemsRerender = function(newProp) {
            this.items = this.tbarItemsCol, this.destroyMode(), this.destroyItems(), this.items = newProp, 
            this.tbarItemsCol = this.items, this.renderItems(), this.renderOverflowMode();
        }, Toolbar.prototype.resize = function() {
            var ele = this.element;
            this.tbResize = !0, this.tbarAlign && this.itemPositioning(), this.popObj && "Popup" === this.overflowMode && this.popObj.hide();
            var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);
            if (checkOverflow || this.destroyHScroll(), !checkOverflow || !this.scrollModule || this.offsetWid !== ele.offsetWidth) {
                if ((this.offsetWid > ele.offsetWidth || checkOverflow) && this.renderOverflowMode(), 
                this.popObj) {
                    if ("Extended" === this.overflowMode) {
                        var eleStyles = window.getComputedStyle(this.element);
                        this.popObj.width = parseFloat(eleStyles.width) + 2 * parseFloat(eleStyles.borderRightWidth);
                    }
                    this.tbarAlign && this.removePositioning(), this.popupRefresh(this.popObj.element, !1), 
                    this.tbarAlign && this.refreshPositioning();
                }
                this.offsetWid = ele.offsetWidth, this.tbResize = !1, this.separator();
            }
        }, Toolbar.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var tEle = this.element, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "items":
                    if (newProp.items instanceof Array && oldProp.items instanceof Array) this.itemsRerender(newProp.items); else for (var changedProb = Object.keys(newProp.items), i = 0; i < changedProb.length; i++) {
                        var index = parseInt(Object.keys(newProp.items)[i], 10), property = Object.keys(newProp.items[index])[0], newProperty = (Object(oldProp.items[index])[property], 
                        Object(newProp.items[index])[property]);
                        if (this.tbarAlign || "align" === property) {
                            this.refresh();
                            break;
                        }
                        var popupPriCheck = "showAlwaysInPopup" === property && !newProperty, booleanCheck = "overflow" === property && 0 !== this.popupPriCount;
                        (popupPriCheck || this.items[index].showAlwaysInPopup && booleanCheck) && --this.popupPriCount, 
                        isNullOrUndefined(this.scrollModule) && this.destroyMode();
                        detach([].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, tEle))[index]), 
                        this.tbarEle.splice(index, 1), this.addItems([ this.items[index] ], index), this.items.splice(index, 1), 
                        this.items[index].template && this.tbarEle.splice(this.items.length, 1);
                    }
                    break;

                  case "width":
                    var wid = tEle.offsetWidth;
                    setStyleAttribute(tEle, {
                        width: formatUnit(newProp.width)
                    }), this.renderOverflowMode(), this.popObj && wid < tEle.offsetWidth && this.popupRefresh(this.popObj.element, !1);
                    break;

                  case "height":
                    setStyleAttribute(this.element, {
                        height: formatUnit(newProp.height)
                    });
                    break;

                  case "overflowMode":
                    this.destroyMode(), this.renderOverflowMode(), this.enableRtl && this.add(tEle, "e-rtl"), 
                    this.refreshOverflow();
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? this.add(tEle, "e-rtl") : this.remove(tEle, "e-rtl"), isNullOrUndefined(this.scrollModule) || (newProp.enableRtl ? this.add(this.scrollModule.element, "e-rtl") : this.remove(this.scrollModule.element, "e-rtl")), 
                    isNullOrUndefined(this.popObj) || (newProp.enableRtl ? this.add(this.popObj.element, "e-rtl") : this.remove(this.popObj.element, "e-rtl")), 
                    this.tbarAlign && this.itemPositioning();
                }
            }
        }, Toolbar.prototype.hideItem = function(index, value) {
            if (this.tbarEle[index]) {
                var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
                !0 === value ? innerItems[index].classList.add("e-hidden") : innerItems[index].classList.remove("e-hidden"), 
                this.refreshOverflow();
            }
        }, __decorate$40([ Collection([], Item$1) ], Toolbar.prototype, "items", void 0), 
        __decorate$40([ Property("auto") ], Toolbar.prototype, "width", void 0), __decorate$40([ Property("auto") ], Toolbar.prototype, "height", void 0), 
        __decorate$40([ Property("Scrollable") ], Toolbar.prototype, "overflowMode", void 0), 
        __decorate$40([ Property(!1) ], Toolbar.prototype, "enableRtl", void 0), __decorate$40([ Event() ], Toolbar.prototype, "clicked", void 0), 
        __decorate$40([ Event() ], Toolbar.prototype, "created", void 0), __decorate$40([ Event() ], Toolbar.prototype, "destroyed", void 0), 
        __decorate$40([ Event() ], Toolbar.prototype, "beforeCreate", void 0), Toolbar = __decorate$40([ NotifyPropertyChanges ], Toolbar);
    }(Component), __extends$55 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$41 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, CLS_ITEM$1 = "e-acrdn-item", CLS_HEADER = "e-acrdn-header", CLS_CONTENT = "e-acrdn-panel", AccordionActionSettings = function(_super) {
        function AccordionActionSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$55(AccordionActionSettings, _super), __decorate$41([ Property("SlideDown") ], AccordionActionSettings.prototype, "effect", void 0), 
        __decorate$41([ Property(400) ], AccordionActionSettings.prototype, "duration", void 0), 
        __decorate$41([ Property("linear") ], AccordionActionSettings.prototype, "easing", void 0), 
        AccordionActionSettings;
    }(ChildProperty), AccordionAnimationSettings = function(_super) {
        function AccordionAnimationSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$55(AccordionAnimationSettings, _super), __decorate$41([ Complex({
            effect: "SlideUp",
            duration: 400,
            easing: "linear"
        }, AccordionActionSettings) ], AccordionAnimationSettings.prototype, "collapse", void 0), 
        __decorate$41([ Complex({
            effect: "SlideDown",
            duration: 400,
            easing: "linear"
        }, AccordionActionSettings) ], AccordionAnimationSettings.prototype, "expand", void 0), 
        AccordionAnimationSettings;
    }(ChildProperty), AccordionItem = function(_super) {
        function AccordionItem() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$55(AccordionItem, _super), __decorate$41([ Property(void 0) ], AccordionItem.prototype, "content", void 0), 
        __decorate$41([ Property(void 0) ], AccordionItem.prototype, "header", void 0), 
        __decorate$41([ Property(void 0) ], AccordionItem.prototype, "cssClass", void 0), 
        __decorate$41([ Property(void 0) ], AccordionItem.prototype, "iconCss", void 0), 
        __decorate$41([ Property(!1) ], AccordionItem.prototype, "expanded", void 0), AccordionItem;
    }(ChildProperty), __extends$57 = (function(_super) {
        function Accordion(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.keyConfigs = {
                moveUp: "uparrow",
                moveDown: "downarrow",
                enter: "enter",
                space: "space",
                home: "home",
                end: "end"
            }, _this;
        }
        __extends$55(Accordion, _super), Accordion.prototype.destroy = function() {
            var _this = this, ele = this.element;
            for (_super.prototype.destroy.call(this), this.unwireEvents(), this.isDestroy = !0, 
            this.templateEle.forEach(function(eleStr) {
                isNullOrUndefined(_this.element.querySelector(eleStr)) || (document.body.appendChild(_this.element.querySelector(eleStr)).style.display = "none");
            }); ele.firstChild; ) ele.removeChild(ele.firstChild);
            if (this.trgtEle) for (;this.ctrlTem.firstChild; ) ele.appendChild(this.ctrlTem.firstChild);
            ele.removeAttribute("style"), [ "aria-disabled", "aria-multiselectable", "role" ].forEach(function(attrb) {
                _this.element.removeAttribute(attrb);
            });
        }, Accordion.prototype.preRender = function() {
            var nested = closest(this.element, "." + CLS_CONTENT);
            this.isNested = !1, this.templateEle = [], this.isDestroy || (this.isDestroy = !1), 
            isNullOrUndefined(nested) ? this.element.classList.add("e-acrdn-root") : (nested.classList.add("e-nested"), 
            this.isNested = !0), this.enableRtl && this.add(this.element, "e-rtl"), this.enablePersistence && !isNullOrUndefined(this.expandedItems) || (this.expandedItems = []);
        }, Accordion.prototype.add = function(ele, val) {
            ele.classList.add(val);
        }, Accordion.prototype.remove = function(ele, val) {
            ele.classList.remove(val);
        }, Accordion.prototype.render = function() {
            this.initialize(), this.renderControl(), this.wireEvents();
        }, Accordion.prototype.initialize = function() {
            var width = formatUnit(this.width), height = formatUnit(this.height);
            setStyleAttribute(this.element, {
                width: width,
                height: height
            });
            this.expandedItems.length > 0 && (this.initExpand = this.expandedItems), attributes(this.element, {
                "aria-disabled": "false",
                role: "presentation",
                "aria-multiselectable": "true"
            }), "Single" === this.expandMode && this.element.setAttribute("aria-multiselectable", "false");
        }, Accordion.prototype.renderControl = function() {
            this.trgtEle = this.element.children.length > 0 ? select("div", this.element) : null, 
            this.renderItems(), this.initItemExpand();
        }, Accordion.prototype.unwireEvents = function() {
            EventHandler.remove(this.element, "click", this.clickHandler), isNullOrUndefined(this.keyModule) || this.keyModule.destroy();
        }, Accordion.prototype.wireEvents = function() {
            EventHandler.add(this.element, "click", this.clickHandler, this), this.isNested || this.isDestroy || rippleEffect(this.element, {
                selector: "." + CLS_HEADER
            }), this.isNested || (this.keyModule = new KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: "keydown"
            }));
        }, Accordion.prototype.focusIn = function(e) {
            e.target.parentElement.classList.add("e-item-focus");
        }, Accordion.prototype.focusOut = function(e) {
            e.target.parentElement.classList.remove("e-item-focus");
        }, Accordion.prototype.ctrlTemplate = function() {
            var _this = this;
            this.ctrlTem = this.element.cloneNode(!0);
            var content, innerEles = this.element.children;
            addClass([].slice.call(innerEles), [ CLS_ITEM$1 ]), [].slice.call(innerEles).forEach(function(el) {
                if (el.id = getUniqueID("acrdn_item"), el.children.length > 0) {
                    _this.add(el.children[0], CLS_HEADER);
                    var header = el.children[0];
                    attributes(header, {
                        tabindex: "0",
                        role: "heading",
                        "aria-level": innerEles.length.toString()
                    }), header.id = getUniqueID("acrdn_header"), EventHandler.add(header, "focus", _this.focusIn, _this), 
                    EventHandler.add(header, "blur", _this.focusOut, _this);
                    var headerEle = header.firstElementChild;
                    headerEle && headerEle.classList.add("e-acrdn-header-content"), (content = el.children[1]) && (content.id = getUniqueID("acrdn_panel"), 
                    header.setAttribute("aria-controls", content.id), content.style.display = "", el.classList.add("e-select"), 
                    el.children[0].appendChild(_this.toggleIconGenerate()), classList(content, [ CLS_CONTENT, "e-content-hide" ], []), 
                    attributes(content, {
                        "aria-labelledby": header.id,
                        "aria-hidden": "true"
                    }), (content = content.firstElementChild) && (content.classList.add("e-acrdn-content"), 
                    content.style.display = ""));
                }
            });
        }, Accordion.prototype.toggleIconGenerate = function() {
            var tglIcon = this.createElement("div", {
                className: "e-toggle-icon"
            }), hdrColIcon = this.createElement("span", {
                className: "e-tgl-collapse-icon e-icons"
            });
            return tglIcon.appendChild(hdrColIcon), tglIcon;
        }, Accordion.prototype.initItemExpand = function() {
            var len = this.initExpand.length;
            if (0 !== len) if ("Single" === this.expandMode) this.expandItem(!0, this.initExpand[len - 1]); else for (var i = 0; i < len; i++) this.expandItem(!0, this.initExpand[i]);
        }, Accordion.prototype.renderItems = function() {
            var innerItem, _this = this, ele = this.element;
            isNullOrUndefined(this.initExpand) && (this.initExpand = []);
            var items = this.items;
            isNullOrUndefined(this.trgtEle) ? ele && items.length > 0 && items.forEach(function(item, index) {
                innerItem = _this.renderInnerItem(item, index), ele.appendChild(innerItem), innerItem.childElementCount > 0 && (EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this), 
                EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this));
            }) : this.ctrlTemplate();
        }, Accordion.prototype.clickHandler = function(e) {
            var index, tglIcon, _this = this, trgt = e.target, eventArgs = {};
            if (closest(trgt, ".e-accordion") === this.element) {
                trgt.classList.add("e-target");
                var acrdnItem = closest(trgt, "." + CLS_ITEM$1), acrdnHdr = closest(trgt, "." + CLS_HEADER), acrdnCtn = closest(trgt, "." + CLS_CONTENT);
                acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn)) && (acrdnHdr = acrdnItem.children[0], 
                acrdnCtn = acrdnItem.children[1]), acrdnHdr && (tglIcon = select(".e-toggle-icon", acrdnHdr));
                var acrdnCtnItem;
                acrdnCtn && (acrdnCtnItem = closest(acrdnCtn, "." + CLS_ITEM$1));
                var acrdActive = [];
                index = this.getIndexByItem(acrdnItem), acrdnCtnItem && (eventArgs.item = this.items[this.getIndexByItem(acrdnCtnItem)]), 
                eventArgs.originalEvent = e;
                !(!isNullOrUndefined(tglIcon) && isNullOrUndefined(this.trgtEle) && acrdnItem.childElementCount <= 1) || !isNullOrUndefined(acrdnCtn) && isNullOrUndefined(select(".e-acrdn-header .e-toggle-icon", acrdnCtnItem)) || (acrdnItem.appendChild(this.contentRendering(index)), 
                this.ariaAttrUpdate(acrdnItem)), this.trigger("clicked", eventArgs);
                var cntclkCheck = acrdnCtn && !isNullOrUndefined(select(".e-target", acrdnCtn));
                if (cntclkCheck = cntclkCheck && (isNullOrUndefined(select(".e-accordion", acrdnCtn)) || !(closest(trgt, ".e-accordion") === this.element)), 
                trgt.classList.remove("e-target"), !(trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains("e-acrdn-content") || cntclkCheck)) {
                    [].slice.call(this.element.children).forEach(function(el) {
                        el.classList.contains("e-active") && acrdActive.push(el);
                    });
                    var acrdAniEle = [].slice.call(this.element.querySelectorAll(".e-acrdn-item [e-animate]"));
                    if (acrdAniEle.length > 0) for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
                        var el = acrdAniEle_1[_i];
                        acrdActive.push(el.parentElement);
                    }
                    var sameContentCheck = -1 !== acrdActive.indexOf(acrdnCtnItem) && "true" === acrdnCtn.getAttribute("e-animate"), sameHeader = !1;
                    if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {
                        var acrdnCtn_1 = select("." + CLS_CONTENT, acrdnItem), expandState = closest(acrdnItem, ".e-acrdn-root").querySelector(".e-expand-state");
                        if (isNullOrUndefined(acrdnCtn_1)) return;
                        sameHeader = expandState === acrdnItem, !isVisible(acrdnCtn_1) || sameContentCheck && !acrdnCtnItem.classList.contains("e-selected") ? (acrdActive.length > 0 && "Single" === this.expandMode && !sameContentCheck && acrdActive.forEach(function(el) {
                            _this.collapse(select("." + CLS_CONTENT, el)), el.classList.remove("e-expand-state");
                        }), this.expand(acrdnCtn_1)) : this.collapse(acrdnCtn_1), isNullOrUndefined(expandState) || sameHeader || expandState.classList.remove("e-expand-state");
                    }
                }
            }
        }, Accordion.prototype.eleMoveFocus = function(action, root, trgt) {
            var clst, clstItem = closest(trgt, "." + CLS_ITEM$1);
            trgt === root ? clst = ("moveUp" === action ? trgt.lastElementChild : trgt).querySelector("." + CLS_HEADER) : trgt.classList.contains(CLS_HEADER) && (clstItem = "moveUp" === action ? clstItem.previousElementSibling : clstItem.nextElementSibling) && (clst = select("." + CLS_HEADER, clstItem)), 
            clst && clst.focus();
        }, Accordion.prototype.keyActionHandler = function(e) {
            var trgt = e.target;
            if (!isNullOrUndefined(closest(e.target, CLS_HEADER)) || trgt.classList.contains("e-accordion") || trgt.classList.contains(CLS_HEADER)) {
                var content, root = this.element;
                switch (e.action) {
                  case "moveUp":
                  case "moveDown":
                    this.eleMoveFocus(e.action, root, trgt);
                    break;

                  case "space":
                  case "enter":
                    !isNullOrUndefined(content = trgt.nextElementSibling) && content.classList.contains(CLS_CONTENT) ? "true" !== content.getAttribute("e-animate") && trgt.click() : trgt.click();
                    break;

                  case "home":
                  case "end":
                    ("home" === e.action ? root.firstElementChild.children[0] : root.lastElementChild.children[0]).focus();
                }
            }
        }, Accordion.prototype.headerEleGenerate = function() {
            var header = this.createElement("div", {
                className: CLS_HEADER,
                id: getUniqueID("acrdn_header")
            });
            return attributes(header, {
                tabindex: "0",
                role: "heading",
                "aria-expanded": "false",
                "aria-selected": "false",
                "aria-disabled": "false",
                "aria-level": this.items.length.toString()
            }), header;
        }, Accordion.prototype.renderInnerItem = function(item, index) {
            var innerEle;
            if (innerEle = this.createElement("div", {
                className: CLS_ITEM$1
            }), innerEle.id = getUniqueID("acrdn_item"), item.header) {
                var ctnEle = this.headerEleGenerate(), hdrEle = this.createElement("div", {
                    className: "e-acrdn-header-content"
                });
                ctnEle.appendChild(hdrEle), ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, !0)), 
                innerEle.appendChild(ctnEle);
            }
            var hdr = select("." + CLS_HEADER, innerEle);
            if (!item.expanded || isNullOrUndefined(index) || this.enablePersistence || -1 === this.initExpand.indexOf(index) && this.initExpand.push(index), 
            item.cssClass && innerEle.classList.add(item.cssClass), item.iconCss) {
                var hdrIcnEle = this.createElement("div", {
                    className: "e-acrdn-header-icon"
                }), icon = this.createElement("span", {
                    className: item.iconCss + " e-icons"
                });
                hdrIcnEle.appendChild(icon), isNullOrUndefined(hdr) ? ((hdr = this.headerEleGenerate()).appendChild(hdrIcnEle), 
                innerEle.appendChild(hdr)) : hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
            }
            if (item.content) {
                var hdrIcon = this.toggleIconGenerate();
                isNullOrUndefined(hdr) && (hdr = this.headerEleGenerate(), innerEle.appendChild(hdr)), 
                hdr.appendChild(hdrIcon), this.add(innerEle, "e-select");
            }
            return innerEle;
        }, Accordion.prototype.fetchElement = function(ele, value, index, isHeader) {
            var templateFn, temString;
            try {
                if (document.querySelectorAll(value).length) {
                    var eleVal = document.querySelector(value);
                    temString = eleVal.outerHTML.trim(), ele.appendChild(eleVal), eleVal.style.display = "";
                }
            } catch (e) {
                templateFn = compile$$1(value);
            }
            var tempArray;
            return isNullOrUndefined(templateFn) || (tempArray = templateFn()), isNullOrUndefined(tempArray) || !(tempArray.length > 0) || isNullOrUndefined(tempArray[0].tagName) && 1 === tempArray.length ? 0 === ele.childElementCount && (ele.innerHTML = value) : [].slice.call(tempArray).forEach(function(el) {
                isNullOrUndefined(el.tagName) || (el.style.display = ""), ele.appendChild(el);
            }), isNullOrUndefined(temString) || this.templateEle.push(value), ele;
        }, Accordion.prototype.ariaAttrUpdate = function(itemEle) {
            var header = select("." + CLS_HEADER, itemEle), content = select("." + CLS_CONTENT, itemEle);
            header.setAttribute("aria-controls", content.id), content.setAttribute("aria-labelledby", header.id);
        }, Accordion.prototype.contentRendering = function(index) {
            var content = this.items[index].content, itemcnt = this.createElement("div", {
                className: CLS_CONTENT + " e-content-hide",
                id: getUniqueID("acrdn_panel")
            });
            attributes(itemcnt, {
                "aria-hidden": "true"
            });
            var ctn = this.createElement("div", {
                className: "e-acrdn-content"
            });
            return itemcnt.appendChild(this.fetchElement(ctn, content, index, !1)), itemcnt;
        }, Accordion.prototype.expand = function(trgt) {
            var eventArgs, trgtItemEle = closest(trgt, "." + CLS_ITEM$1);
            if (!(isNullOrUndefined(trgt) || isVisible(trgt) && "true" !== trgt.getAttribute("e-animate") || trgtItemEle.classList.contains("e-overlay"))) {
                var expandState = closest(trgtItemEle, ".e-acrdn-root").querySelector(".e-expand-state"), animation = {
                    name: this.animation.expand.effect,
                    duration: this.animation.expand.duration,
                    timingFunction: this.animation.expand.easing
                }, icon = select(".e-toggle-icon", trgtItemEle).firstElementChild;
                eventArgs = {
                    element: trgtItemEle,
                    item: this.items[this.getIndexByItem(trgtItemEle)],
                    isExpanded: !0
                };
                var eff = animation.name;
                if (this.trigger("expanding", eventArgs), !eventArgs.cancel) {
                    if (icon.classList.add("e-toggle-animation"), this.expandedItemsPush(trgtItemEle), 
                    isNullOrUndefined(expandState) || expandState.classList.remove("e-expand-state"), 
                    trgtItemEle.classList.add("e-expand-state"), "None" === animation.name) return this.expandProgress("begin", icon, trgt, trgtItemEle, eventArgs), 
                    void this.expandProgress("end", icon, trgt, trgtItemEle, eventArgs);
                    this.expandAnimation(eff, icon, trgt, trgtItemEle, animation, eventArgs);
                }
            }
        }, Accordion.prototype.expandAnimation = function(ef, icn, trgt, trgtItemEle, animate, args) {
            var height, _this = this;
            this.lastActiveItemId = trgtItemEle.id, "SlideDown" === ef ? (animate.begin = function() {
                _this.expandProgress("begin", icn, trgt, trgtItemEle, args), trgt.style.position = "absolute", 
                height = trgtItemEle.offsetHeight, trgt.offsetHeight, trgt.style.maxHeight = trgt.offsetHeight + "px", 
                trgtItemEle.style.maxHeight = "";
            }, animate.progress = function() {
                trgtItemEle.style.minHeight = height + trgt.offsetHeight + "px";
            }, animate.end = function() {
                setStyleAttribute(trgt, {
                    position: "",
                    maxHeight: ""
                }), trgtItemEle.style.minHeight = "", _this.expandProgress("end", icn, trgt, trgtItemEle, args);
            }) : (animate.begin = function() {
                _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
            }, animate.end = function() {
                _this.expandProgress("end", icn, trgt, trgtItemEle, args);
            }), new Animation(animate).animate(trgt);
        }, Accordion.prototype.expandProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
            this.remove(trgt, "e-content-hide"), this.add(trgtItemEle, "e-selected"), this.add(icon, "e-expand-icon"), 
            "end" === progress && (this.add(trgtItemEle, "e-active"), trgt.setAttribute("aria-hidden", "false"), 
            attributes(trgt.previousElementSibling, {
                "aria-selected": "true",
                "aria-expanded": "true"
            }), icon.classList.remove("e-toggle-animation"), this.trigger("expanded", eventArgs));
        }, Accordion.prototype.expandedItemsPush = function(item) {
            var index = this.getIndexByItem(item);
            -1 === this.expandedItems.indexOf(index) && this.expandedItems.push(index);
        }, Accordion.prototype.getIndexByItem = function(item) {
            return [].slice.call(this.element.children).indexOf(item);
        }, Accordion.prototype.expandedItemsPop = function(item) {
            var index = this.getIndexByItem(item);
            this.expandedItems.splice(this.expandedItems.indexOf(index), 1);
        }, Accordion.prototype.collapse = function(trgt) {
            var eventArgs, trgtItemEle = closest(trgt, "." + CLS_ITEM$1);
            if (!isNullOrUndefined(trgt) && isVisible(trgt) && !trgtItemEle.classList.contains("e-overlay")) {
                var animation = {
                    name: this.animation.collapse.effect,
                    duration: this.animation.collapse.duration,
                    timingFunction: this.animation.collapse.easing
                }, icon = select(".e-toggle-icon", trgtItemEle).firstElementChild;
                eventArgs = {
                    element: trgtItemEle,
                    item: this.items[this.getIndexByItem(trgtItemEle)],
                    isExpanded: !1
                };
                var eff = animation.name;
                if (this.trigger("expanding", eventArgs), !eventArgs.cancel) {
                    if (this.expandedItemsPop(trgtItemEle), trgtItemEle.classList.add("e-expand-state"), 
                    icon.classList.add("e-toggle-animation"), "None" === animation.name) return this.collapseProgress("begin", icon, trgt, trgtItemEle, eventArgs), 
                    void this.collapseProgress("end", icon, trgt, trgtItemEle, eventArgs);
                    this.collapseAnimation(eff, trgt, trgtItemEle, icon, animation, eventArgs);
                }
            }
        }, Accordion.prototype.collapseAnimation = function(ef, trgt, trgtItEl, icn, animate, args) {
            var height, trgtHeight, itemHeight, remain, _this = this;
            this.lastActiveItemId = trgtItEl.id, "SlideUp" === ef ? (animate.begin = function() {
                itemHeight = trgtItEl.offsetHeight, trgtItEl.style.minHeight = itemHeight + "px", 
                trgt.style.position = "absolute", height = trgtItEl.offsetHeight, trgtHeight = trgt.offsetHeight, 
                trgt.style.maxHeight = trgtHeight + "px", _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
            }, animate.progress = function() {
                (remain = height - (trgtHeight - trgt.offsetHeight)) < itemHeight && (trgtItEl.style.minHeight = remain + "px");
            }, animate.end = function() {
                trgt.style.display = "none", _this.collapseProgress("end", icn, trgt, trgtItEl, args), 
                trgtItEl.style.minHeight = "", setStyleAttribute(trgt, {
                    position: "",
                    maxHeight: "",
                    display: ""
                });
            }) : (animate.begin = function() {
                _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
            }, animate.end = function() {
                _this.collapseProgress("end", icn, trgt, trgtItEl, args);
            }), new Animation(animate).animate(trgt);
        }, Accordion.prototype.collapseProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
            this.remove(icon, "e-expand-icon"), this.remove(trgtItemEle, "e-selected"), "end" === progress && (this.add(trgt, "e-content-hide"), 
            icon.classList.remove("e-toggle-animation"), this.remove(trgtItemEle, "e-active"), 
            trgt.setAttribute("aria-hidden", "true"), attributes(trgt.previousElementSibling, {
                "aria-selected": "false",
                "aria-expanded": "false"
            }), this.trigger("expanded", eventArgs));
        }, Accordion.prototype.getModuleName = function() {
            return "accordion";
        }, Accordion.prototype.itemAttribUpdate = function() {
            var itemEle = [].slice.call(this.element.children), itemLen = this.items.length;
            itemEle.forEach(function(ele) {
                select("." + CLS_HEADER, ele).setAttribute("aria-level", "" + itemLen);
            });
        }, Accordion.prototype.addItem = function(item, index) {
            var ele = this.element;
            if (isNullOrUndefined(index) && (index = this.items.length), ele.childElementCount >= index) {
                this.items.splice(index, 0, item);
                var innerItemEle = this.renderInnerItem(item, index);
                ele.childElementCount === index ? ele.appendChild(innerItemEle) : ele.insertBefore(innerItemEle, ele.children[index]), 
                EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "focus", this.focusIn, this), 
                EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "blur", this.focusOut, this), 
                this.itemAttribUpdate();
            }
            this.expandedItems = [], this.expandedItemRefresh(ele), item.expanded && this.expandItem(!0, index);
        }, Accordion.prototype.expandedItemRefresh = function(ele) {
            var _this = this;
            [].slice.call(ele.children).forEach(function(el) {
                el.classList.contains("e-selected") && _this.expandedItemsPush(el);
            });
        }, Accordion.prototype.removeItem = function(index) {
            var ele = this.element.children[index];
            isNullOrUndefined(ele) || (detach(ele), this.items.splice(index, 1), this.itemAttribUpdate(), 
            this.expandedItems = [], this.expandedItemRefresh(this.element));
        }, Accordion.prototype.select = function(index) {
            var ele = this.element.children[index];
            isNullOrUndefined(ele) || isNullOrUndefined(select("." + CLS_HEADER, ele)) || ele.children[0].focus();
        }, Accordion.prototype.hideItem = function(index, isHidden) {
            var ele = this.element.children[index];
            isNullOrUndefined(ele) || (isNullOrUndefined(isHidden) && (isHidden = !0), isHidden ? this.add(ele, "e-hide") : this.remove(ele, "e-hide"));
        }, Accordion.prototype.enableItem = function(index, isEnable) {
            var ele = this.element.children[index];
            if (!isNullOrUndefined(ele)) {
                var eleHeader = ele.firstElementChild;
                isEnable ? (this.remove(ele, "e-overlay"), attributes(eleHeader, {
                    tabindex: "0",
                    "aria-disabled": "false"
                }), eleHeader.focus()) : (ele.classList.contains("e-active") && (this.expandItem(!1, index), 
                this.eleMoveFocus("movedown", this.element, eleHeader)), this.add(ele, "e-overlay"), 
                eleHeader.setAttribute("aria-disabled", "true"), eleHeader.removeAttribute("tabindex"));
            }
        }, Accordion.prototype.expandItem = function(isExpand, index) {
            var _this = this, root = this.element;
            if (isNullOrUndefined(index)) if ("Single" === this.expandMode && isExpand) {
                var ele = root.children[root.childElementCount - 1];
                this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
            } else {
                var item = select("#" + this.lastActiveItemId, this.element);
                [].slice.call(this.element.children).forEach(function(el) {
                    _this.itemExpand(isExpand, el, _this.getIndexByItem(el)), el.classList.remove("e-expand-state");
                });
                var expandedItem = select(".e-expand-state", this.element);
                expandedItem && expandedItem.classList.remove("e-expand-state"), item && item.classList.add("e-expand-state");
            } else {
                if (isNullOrUndefined(ele = this.element.children[index]) || !ele.classList.contains("e-select") || ele.classList.contains("e-active") && isExpand) return;
                "Single" === this.expandMode && this.expandItem(!1), this.itemExpand(isExpand, ele, index);
            }
        }, Accordion.prototype.itemExpand = function(isExpand, ele, index) {
            var ctn = ele.children[1];
            if (!ele.classList.contains("e-overlay")) {
                if (isNullOrUndefined(ctn) && isExpand) ctn = this.contentRendering(index), ele.appendChild(ctn), 
                this.ariaAttrUpdate(ele); else if (isNullOrUndefined(ctn)) return;
                isExpand ? this.expand(ctn) : this.collapse(ctn);
            }
        }, Accordion.prototype.destroyItems = function() {
            [].slice.call(this.element.querySelectorAll("." + CLS_ITEM$1)).forEach(function(el) {
                detach(el);
            });
        }, Accordion.prototype.updateItem = function(item, index) {
            if (!isNullOrUndefined(item)) {
                var itemObj = this.items[index];
                this.items.splice(index, 1), detach(item), this.addItem(itemObj, index);
            }
        }, Accordion.prototype.getPersistData = function() {
            return this.addOnPersist([ "expandedItems" ]);
        }, Accordion.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var acrdn = this.element, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "items":
                    if (newProp.items instanceof Array && oldProp.items instanceof Array) this.destroyItems(), 
                    this.renderItems(), this.initItemExpand(); else for (var changedProp = Object.keys(newProp.items), j = 0; j < changedProp.length; j++) {
                        var index = parseInt(Object.keys(newProp.items)[j], 10), property = Object.keys(newProp.items[index])[0], item = selectAll("." + CLS_ITEM$1, this.element)[index], oldVal = Object(oldProp.items[index])[property], newVal = Object(newProp.items[index])[property];
                        "header" !== property && "iconCss" !== property && "expanded" !== property || this.updateItem(item, index), 
                        "cssClass" !== property || isNullOrUndefined(item) || (item.classList.remove(oldVal), 
                        item.classList.add(newVal)), "content" !== property || isNullOrUndefined(item) || 2 !== item.children.length || (item.classList.contains("e-selected") && this.expandItem(!1, index), 
                        detach(item.querySelector("." + CLS_CONTENT)));
                    }
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? this.add(acrdn, "e-rtl") : this.remove(acrdn, "e-rtl");
                    break;

                  case "height":
                    setStyleAttribute(this.element, {
                        height: formatUnit(newProp.height)
                    });
                    break;

                  case "width":
                    setStyleAttribute(this.element, {
                        width: formatUnit(newProp.width)
                    });
                    break;

                  case "expandMode":
                    "Single" === newProp.expandMode ? (this.element.setAttribute("aria-multiselectable", "false"), 
                    this.expandedItems.length > 1 && this.expandItem(!1)) : this.element.setAttribute("aria-multiselectable", "true");
                }
            }
        }, __decorate$41([ Collection([], AccordionItem) ], Accordion.prototype, "items", void 0), 
        __decorate$41([ Property("100%") ], Accordion.prototype, "width", void 0), __decorate$41([ Property("auto") ], Accordion.prototype, "height", void 0), 
        __decorate$41([ Property("Multiple") ], Accordion.prototype, "expandMode", void 0), 
        __decorate$41([ Complex({}, AccordionAnimationSettings) ], Accordion.prototype, "animation", void 0), 
        __decorate$41([ Event() ], Accordion.prototype, "clicked", void 0), __decorate$41([ Event() ], Accordion.prototype, "expanding", void 0), 
        __decorate$41([ Event() ], Accordion.prototype, "expanded", void 0), __decorate$41([ Event() ], Accordion.prototype, "created", void 0), 
        __decorate$41([ Event() ], Accordion.prototype, "destroyed", void 0), Accordion = __decorate$41([ NotifyPropertyChanges ], Accordion);
    }(Component), function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }()), __decorate$43 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, FOCUSED = "e-focused", HEADER$3 = "e-menu-header", SELECTED$3 = "e-selected", HIDE = "e-menu-hide", FieldSettings$2 = function(_super) {
        function FieldSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$57(FieldSettings, _super), __decorate$43([ Property("id") ], FieldSettings.prototype, "itemId", void 0), 
        __decorate$43([ Property("parentId") ], FieldSettings.prototype, "parentId", void 0), 
        __decorate$43([ Property("text") ], FieldSettings.prototype, "text", void 0), __decorate$43([ Property("iconCss") ], FieldSettings.prototype, "iconCss", void 0), 
        __decorate$43([ Property("url") ], FieldSettings.prototype, "url", void 0), __decorate$43([ Property("separator") ], FieldSettings.prototype, "separator", void 0), 
        __decorate$43([ Property("items") ], FieldSettings.prototype, "children", void 0), 
        FieldSettings;
    }(ChildProperty), MenuItem = function(_super) {
        function MenuItem() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$57(MenuItem, _super), __decorate$43([ Property(null) ], MenuItem.prototype, "iconCss", void 0), 
        __decorate$43([ Property("") ], MenuItem.prototype, "id", void 0), __decorate$43([ Property(!1) ], MenuItem.prototype, "separator", void 0), 
        __decorate$43([ Collection([], MenuItem) ], MenuItem.prototype, "items", void 0), 
        __decorate$43([ Property("") ], MenuItem.prototype, "text", void 0), __decorate$43([ Property("") ], MenuItem.prototype, "url", void 0), 
        MenuItem;
    }(ChildProperty), MenuBase = function(_super) {
        function MenuBase(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.navIdx = [], _this.animation = new Animation({}), _this.isTapHold = !1, 
            _this;
        }
        return __extends$57(MenuBase, _super), MenuBase.prototype.preRender = function() {
            if ("EJS-CONTEXTMENU" === this.element.tagName) {
                this.element.style.display = "none", this.element.classList.remove("e-" + this.getModuleName()), 
                this.element.classList.remove("e-control");
                var ejInst = getValue("ej2_instances", this.element), ul = this.createElement("ul");
                this.ngElement = this.element, this.element = ul, this.element.classList.add("e-control"), 
                this.element.classList.add("e-" + this.getModuleName()), setValue("ej2_instances", ejInst, this.element), 
                this.element.id || (this.element.id = getUniqueID(this.getModuleName()));
            }
            if ("EJS-MENU" === this.element.tagName) {
                var ele = this.element, ejInstance = getValue("ej2_instances", ele), wrapper = (ul = this.createElement("ul"), 
                this.createElement("EJS-MENU", {
                    className: "e-" + this.getModuleName() + "-wrapper"
                }));
                wrapper.style.display = "block";
                for (var idx = 0, len = ele.attributes.length; idx < len; idx++) ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
                ele.parentNode.insertBefore(wrapper, ele), detach(ele), ele = ul, wrapper.appendChild(ele), 
                setValue("ej2_instances", ejInstance, ele), this.ngElement = wrapper, this.element = ele, 
                this.element.id || (this.element.id = getUniqueID(this.getModuleName()));
            }
        }, MenuBase.prototype.render = function() {
            this.initialize(), this.renderItems(), this.wireEvents();
        }, MenuBase.prototype.initialize = function() {
            var wrapper = this.getWrapper();
            wrapper || (wrapper = this.createElement("div", {
                className: "e-" + this.getModuleName() + "-wrapper"
            }), this.isMenu ? this.element.parentElement.insertBefore(wrapper, this.element) : document.body.appendChild(wrapper)), 
            this.cssClass && addClass([ wrapper ], this.cssClass.split(" ")), this.enableRtl && wrapper.classList.add("e-rtl"), 
            attributes(this.element, {
                role: this.isMenu ? "menubar" : "menu",
                tabindex: "0"
            }), wrapper.appendChild(this.element), this.element.style.zIndex = getZindexPartial(this.element).toString();
        }, MenuBase.prototype.renderItems = function() {
            if (!this.items.length) {
                var items = ListBase.createJsonFromElement(this.element, {
                    fields: {
                        child: "items"
                    }
                });
                this.setProperties({
                    items: items
                }, !0), this.element.innerHTML = "";
            }
            var ul = this.createItems(this.items);
            append(Array.prototype.slice.call(ul.children), this.element), this.element.classList.add("e-menu-parent");
        }, MenuBase.prototype.wireEvents = function() {
            var wrapper = this.getWrapper();
            if (this.target) {
                for (var target = void 0, targetElems = selectAll(this.target), i = 0, len = targetElems.length; i < len; i++) target = targetElems[i], 
                Browser.isIos ? new Touch(target, {
                    tapHold: this.touchHandler.bind(this)
                }) : EventHandler.add(target, "contextmenu", this.cmenuHandler, this);
                this.targetElement = target;
                for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
                    var parent_1 = _a[_i];
                    EventHandler.add(parent_1, "scroll", this.scrollHandler, this);
                }
            }
            Browser.isDevice || (this.delegateMoverHandler = this.moverHandler.bind(this), this.delegateMouseDownHandler = this.mouseDownHandler.bind(this), 
            EventHandler.add(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler, this), 
            EventHandler.add(document, "mousedown", this.delegateMouseDownHandler, this)), this.delegateClickHandler = this.clickHandler.bind(this), 
            EventHandler.add(document, "click", this.delegateClickHandler, this);
            var keyConfigs = {
                downarrow: "downarrow",
                uparrow: "uparrow",
                enter: "enter",
                leftarrow: "leftarrow",
                rightarrow: "rightarrow",
                escape: "escape"
            };
            this.isMenu && (keyConfigs.home = "home", keyConfigs.end = "end"), new KeyboardEvents(wrapper, {
                keyAction: this.keyBoardHandler.bind(this),
                keyConfigs: keyConfigs
            }), this.rippleFn = rippleEffect(wrapper, {
                selector: ".e-menu-item"
            });
        }, MenuBase.prototype.mouseDownHandler = function(e) {
            closest(e.target, ".e-" + this.getModuleName() + "-wrapper") !== this.getWrapper() && this.closeMenu(this.navIdx.length, e);
        }, MenuBase.prototype.keyBoardHandler = function(e) {
            var actionName = "", actionNeeded = this.isMenu && !this.element.classList.contains("e-vertical") && this.navIdx.length < 1;
            if (e.preventDefault(), actionNeeded) switch (e.action) {
              case "rightarrow":
                actionName = "rightarrow", e.action = "downarrow";
                break;

              case "leftarrow":
                actionName = "leftarrow", e.action = "uparrow";
                break;

              case "downarrow":
                actionName = "downarrow", e.action = "rightarrow";
                break;

              case "uparrow":
                actionName = "uparrow", e.action = "";
            } else if (this.enableRtl) switch (e.action) {
              case "leftarrow":
                actionNeeded = !0, actionName = "leftarrow", e.action = "rightarrow";
                break;

              case "rightarrow":
                actionNeeded = !0, actionName = "rightarrow", e.action = "leftarrow";
            }
            switch (e.action) {
              case "downarrow":
              case "uparrow":
              case "end":
              case "home":
                this.upDownKeyHandler(e);
                break;

              case "rightarrow":
                this.rightEnterKeyHandler(e);
                break;

              case "leftarrow":
                this.leftEscKeyHandler(e);
                break;

              case "enter":
                this.rightEnterKeyHandler(e);
                break;

              case "escape":
                this.leftEscKeyHandler(e);
            }
            actionNeeded && (e.action = actionName);
        }, MenuBase.prototype.upDownKeyHandler = function(e) {
            var cul = this.getWrapper().children[this.navIdx.length], defaultIdx = "downarrow" === e.action || "home" === e.action ? 0 : cul.childElementCount - 1, fliIdx = defaultIdx, fli = this.getLIByClass(cul, FOCUSED);
            fli && ("end" !== e.action && "home" !== e.action && (fliIdx = this.getIdx(cul, fli)), 
            fli.classList.remove(FOCUSED), "end" !== e.action && "home" !== e.action && ("downarrow" === e.action ? fliIdx++ : fliIdx--, 
            fliIdx === ("downarrow" === e.action ? cul.childElementCount : -1) && (fliIdx = defaultIdx)));
            var cli = cul.children[fliIdx];
            fliIdx = this.isValidLI(cli, fliIdx, e.action), cul.children[fliIdx].classList.add(FOCUSED), 
            cul.children[fliIdx].focus();
        }, MenuBase.prototype.isValidLI = function(cli, index, action) {
            var cul = this.getWrapper().children[this.navIdx.length];
            return (cli.classList.contains("e-separator") || cli.classList.contains("e-disabled") || cli.classList.contains(HIDE)) && ("downarrow" === action || "rightarrow" === action ? index++ : index--), 
            ((cli = cul.children[index]).classList.contains("e-separator") || cli.classList.contains("e-disabled") || cli.classList.contains(HIDE)) && (index = this.isValidLI(cli, index, action)), 
            index;
        }, MenuBase.prototype.rightEnterKeyHandler = function(e) {
            var eventArgs, wrapper = this.getWrapper(), cul = wrapper.children[this.navIdx.length], fli = this.getLIByClass(cul, FOCUSED);
            if (fli) {
                var fliIdx = this.getIdx(cul, fli), navIdx = this.navIdx.concat(fliIdx), index = void 0, item = this.getItem(navIdx);
                item.items.length ? (this.navIdx.push(fliIdx), this.openMenu(fli, item, null, null, e), 
                fli.classList.remove(FOCUSED), fli.classList.add(SELECTED$3), "enter" === e.action && (eventArgs = {
                    element: fli,
                    item: item
                }, this.trigger("select", eventArgs)), fli.focus(), cul = wrapper.children[this.navIdx.length], 
                index = this.isValidLI(cul.children[0], 0, e.action), cul.children[index].classList.add(FOCUSED), 
                cul.children[index].focus()) : "enter" === e.action && (fli.classList.remove(FOCUSED), 
                fli.classList.add(SELECTED$3), eventArgs = {
                    element: fli,
                    item: item
                }, this.trigger("select", eventArgs), this.closeMenu(null, e));
            }
        }, MenuBase.prototype.leftEscKeyHandler = function(e) {
            if (this.navIdx.length) {
                var wrapper = this.getWrapper();
                this.closeMenu(this.navIdx.length, e);
                var cul = wrapper.children[this.navIdx.length], sli = this.getLIByClass(cul, SELECTED$3);
                sli && (sli.setAttribute("aria-expanded", "false"), sli.classList.remove(SELECTED$3), 
                sli.classList.add(FOCUSED), sli.focus());
            } else "escape" === e.action && this.closeMenu(null, e);
        }, MenuBase.prototype.scrollHandler = function(e) {
            this.closeMenu(null, e);
        }, MenuBase.prototype.touchHandler = function(e) {
            this.isTapHold = !0, this.cmenuHandler(e.originalEvent);
        }, MenuBase.prototype.cmenuHandler = function(e) {
            e.preventDefault(), this.closeMenu(null, e), this.canOpen(e.target) && (e.changedTouches ? this.openMenu(null, null, e.changedTouches[0].pageY + 1, e.changedTouches[0].pageX + 1, e) : this.openMenu(null, null, e.pageY + 1, e.pageX + 1, e));
        }, MenuBase.prototype.closeMenu = function(ulIndex, e) {
            if (void 0 === ulIndex && (ulIndex = 0), void 0 === e && (e = null), this.isMenuVisible()) for (var ul = void 0, sli = void 0, item = void 0, items = void 0, closeArgs = void 0, beforeCloseArgs = void 0, wrapper = this.getWrapper(), cnt = wrapper.childElementCount; cnt > ulIndex; cnt--) {
                if (ul = wrapper.children[cnt - 1], this.isMenu && ul.classList.contains("e-menu")) {
                    (sli = this.getLIByClass(ul, SELECTED$3)) && sli.classList.remove(SELECTED$3);
                    break;
                }
                beforeCloseArgs = {
                    element: ul,
                    parentItem: item = this.navIdx.length ? this.getItem(this.navIdx) : null,
                    items: items = item ? item.items : this.items,
                    event: e,
                    cancel: !1
                }, this.trigger("beforeClose", beforeCloseArgs), beforeCloseArgs.cancel || (this.toggleAnimation(ul, !1), 
                this.navIdx.length = ulIndex ? ulIndex - 1 : ulIndex, closeArgs = {
                    element: ul,
                    parentItem: item,
                    items: items
                }, this.trigger("onClose", closeArgs));
            }
        }, MenuBase.prototype.isMenuVisible = function() {
            return this.navIdx.length > 0 || this.element.classList.contains("e-contextmenu") && isVisible(this.element).valueOf();
        }, MenuBase.prototype.canOpen = function(target) {
            var canOpen = !0;
            if (this.filter) {
                canOpen = !1;
                for (var filter = this.filter.split(" "), i = 0, len = target.classList.length; i < len; i++) if (filter.indexOf(target.classList[i]) > -1) {
                    canOpen = !0;
                    break;
                }
            }
            return canOpen;
        }, MenuBase.prototype.openMenu = function(li, item, top, left, e, target) {
            void 0 === top && (top = 0), void 0 === left && (left = 0), void 0 === e && (e = null), 
            void 0 === target && (target = this.targetElement);
            var ul, wrapper = this.getWrapper();
            if (li) {
                if (ul = this.createItems(item[this.getField("children", this.navIdx.length - 1)]), 
                !this.isMenu && Browser.isDevice) {
                    wrapper.lastChild.style.display = "none";
                    var data = {
                        text: item[this.getField("text")].toString(),
                        iconCss: "e-icons e-previous"
                    }, hdata = new MenuItem(this.items[0], null, data, !0), hli = this.createItems([ hdata ]).children[0];
                    hli.classList.add(HEADER$3), ul.insertBefore(hli, ul.children[0]);
                }
                ul.style.zIndex = this.element.style.zIndex, wrapper.appendChild(ul);
            } else (ul = this.element).style.zIndex = getZindexPartial(target || this.element).toString();
            this.getIndex(li ? li.id : null, !0);
            var eventArgs = {
                element: ul,
                items: li ? item[this.getField("children", this.navIdx.length - 1)] : this.items,
                parentItem: item,
                event: e,
                cancel: !1,
                top: top,
                left: left
            };
            this.trigger("beforeOpen", eventArgs), top = eventArgs.top, left = eventArgs.left, 
            eventArgs.cancel ? this.navIdx.pop() : (this.setPosition(li, ul, top, left), this.toggleAnimation(ul));
        }, MenuBase.prototype.setPosition = function(li, ul, top, left) {
            if (this.toggleVisiblity(ul), ul === this.element || !isNullOrUndefined(left) && !isNullOrUndefined(top)) {
                if ((collide = isCollide(ul, null, left, top)).indexOf("right") > -1 && (left -= ul.offsetWidth), 
                collide.indexOf("bottom") > -1) {
                    top = (offset = fit(ul, null, {
                        X: !1,
                        Y: !0
                    }, {
                        top: top,
                        left: left
                    })).top - 20;
                }
                if ((collide = isCollide(ul, null, left, top)).indexOf("left") > -1) {
                    left = (offset = fit(ul, null, {
                        X: !0,
                        Y: !1
                    }, {
                        top: top,
                        left: left
                    })).left;
                }
            } else {
                var offset = void 0, isRelative = this.isMenu && "BODY" !== this.element.offsetParent.tagName;
                if (!this.isMenu && Browser.isDevice) top = Number(this.element.style.top.replace("px", "")), 
                left = Number(this.element.style.left.replace("px", "")); else {
                    var x = "right", y = "top";
                    this.isMenu && !this.element.classList.contains("e-vertical") && this.navIdx.length < 2 ? (x = this.enableRtl ? "right" : "left", 
                    y = "bottom") : x = this.enableRtl ? "left" : "right", top = (offset = calculatePosition(li, x, y)).top, 
                    left = offset.left;
                }
                var collide, xCollision = (collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top)).indexOf("left") > -1 || collide.indexOf("right") > -1, yCollision = collide.indexOf("bottom") > -1;
                if (xCollision && (left = (offset = calculatePosition(li, this.enableRtl ? "right" : "left", "top")).left), 
                (this.enableRtl || xCollision) && (left = this.enableRtl && xCollision ? left : left - ul.offsetWidth, 
                this.isMenu && xCollision && !this.element.classList.contains("e-vertical") && this.navIdx && this.navIdx.length < 2 && (left = this.enableRtl ? left - li.getBoundingClientRect().width : left + li.getBoundingClientRect().width)), 
                yCollision && (top = (offset = fit(ul, null, {
                    X: !1,
                    Y: !0
                }, {
                    top: top,
                    left: left
                })).top), collide = isCollide(ul, null, left, top), (xCollision = collide.indexOf("left") > -1 || collide.indexOf("right") > -1) && (top = (offset = fit(ul, null, {
                    X: !0,
                    Y: !1
                }, {
                    top: top,
                    left: left
                })).top, left = offset.left), isRelative) {
                    var boundRect = ul.offsetParent.getBoundingClientRect();
                    top -= boundRect.top + pageYOffset, left -= boundRect.left + pageXOffset;
                }
            }
            this.toggleVisiblity(ul, !1), this.isMenu && (this.element.classList.contains("e-vertical") && this.navIdx && 0 === this.navIdx[this.navIdx.length - 1] ? top -= 1 : this.navIdx && 0 === this.navIdx[this.navIdx.length - 1] && (1 === this.navIdx.length ? left -= 1 : top -= 1)), 
            ul.style.top = top + "px", ul.style.left = left + "px";
        }, MenuBase.prototype.toggleVisiblity = function(ul, isVisible) {
            void 0 === isVisible && (isVisible = !0), ul.style.visibility = isVisible ? "hidden" : "", 
            ul.style.display = isVisible ? "block" : "none";
        }, MenuBase.prototype.createItems = function(items) {
            var _this = this, level = this.navIdx ? this.navIdx.length : 0, showIcon = this.hasField(items, this.getField("iconCss", level)), listBaseOptions = {
                showIcon: showIcon,
                moduleName: "menu",
                fields: this.getFields(level),
                template: this.template,
                itemCreating: function(args) {
                    args.curData[args.fields.id] || (args.curData[args.fields.id] = getUniqueID("menuitem"), 
                    _this.clearChanges()), args.curData.htmlAttributes = {
                        role: "menuitem",
                        tabindex: "-1"
                    }, _this.isMenu && !args.curData[_this.getField("separator", level)] && (args.curData.htmlAttributes["aria-label"] = args.curData[args.fields.text]);
                },
                itemCreated: function(args) {
                    if (args.curData[_this.getField("separator", level)] && (args.item.classList.add("e-separator"), 
                    args.item.removeAttribute("role")), !showIcon || args.curData[args.fields.iconCss] || args.curData[_this.getField("separator", level)] || args.item.classList.add("e-blankicon"), 
                    args.curData[args.fields.child] && args.curData[args.fields.child].length) {
                        var span = _this.createElement("span", {
                            className: "e-icons e-caret"
                        });
                        args.item.appendChild(span), args.item.setAttribute("aria-haspopup", "true"), args.item.setAttribute("aria-expanded", "false"), 
                        _this.isMenu || args.item.removeAttribute("role"), args.item.classList.add("e-menu-caret-icon");
                    }
                    _this.isMenu && _this.template && (args.item.setAttribute("id", args.curData[args.fields.id].toString()), 
                    args.item.removeAttribute("data-uid"));
                    var eventArgs = {
                        item: args.curData,
                        element: args.item
                    };
                    _this.trigger("beforeItemRender", eventArgs);
                }
            }, ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template);
            return ul.setAttribute("tabindex", "0"), this.isMenu && ul.setAttribute("role", "menu"), 
            ul;
        }, MenuBase.prototype.moverHandler = function(e) {
            var wrapper = this.getWrapper(), trgt = e.target, cli = this.getLI(trgt);
            if (cli && closest(cli, ".e-" + this.getModuleName() + "-wrapper")) {
                var fli = select("." + FOCUSED, wrapper);
                fli && fli.classList.remove(FOCUSED), cli.classList.add(FOCUSED), this.showItemOnClick || this.clickHandler(e);
            }
            this.isMenu && trgt.parentElement !== wrapper && !cli && this.navIdx.length && this.closeMenu(null, e);
        }, MenuBase.prototype.getField = function(propName, level) {
            void 0 === level && (level = 0);
            var fieldName = this.fields[propName];
            return "string" == typeof fieldName ? fieldName : fieldName[level] ? fieldName[level].toString() : fieldName[fieldName.length - 1].toString();
        }, MenuBase.prototype.getFields = function(level) {
            return void 0 === level && (level = 0), {
                id: this.getField("itemId", level),
                iconCss: this.getField("iconCss", level),
                text: this.getField("text", level),
                url: this.getField("url", level),
                child: this.getField("children", level),
                separator: this.getField("separator", level)
            };
        }, MenuBase.prototype.hasField = function(items, field) {
            for (var i = 0, len = items.length; i < len; i++) if (items[i][field]) return !0;
            return !1;
        }, MenuBase.prototype.clickHandler = function(e) {
            if (this.isTapHold) this.isTapHold = !1; else {
                var wrapper = this.getWrapper(), trgt = e.target, cli = this.getLI(trgt), cliWrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : null, isInstLI = cli && cliWrapper && wrapper.firstElementChild.id === cliWrapper.firstElementChild.id;
                if (isInstLI && "click" === e.type && !cli.classList.contains(HEADER$3)) {
                    this.setLISelected(cli);
                    var navIdx = this.getIndex(cli.id, !0), eventArgs = {
                        element: cli,
                        item: item = this.getItem(navIdx)
                    };
                    this.trigger("select", eventArgs);
                }
                if (isInstLI && ("mouseover" === e.type || Browser.isDevice || this.showItemOnClick)) {
                    var ul = void 0;
                    if (cli.classList.contains(HEADER$3)) {
                        ul = wrapper.children[this.navIdx.length - 1], this.toggleAnimation(ul);
                        (sli = this.getLIByClass(ul, SELECTED$3)) && sli.classList.remove(SELECTED$3), detach(cli.parentNode), 
                        this.navIdx.pop();
                    } else if (!cli.classList.contains("e-separator")) {
                        var showSubMenu = !0, cul = cli.parentNode, cliIdx = this.getIdx(cul, cli);
                        if (this.isMenu || !Browser.isDevice) {
                            var culIdx = this.getIdx(wrapper, cul);
                            if (this.navIdx[culIdx] === cliIdx && (showSubMenu = !1), culIdx !== this.navIdx.length && ("mouseover" !== e.type || showSubMenu)) {
                                var sli;
                                (sli = this.getLIByClass(cul, SELECTED$3)) && sli.classList.remove(SELECTED$3), 
                                this.closeMenu(culIdx + 1, e);
                            }
                        }
                        if (showSubMenu) {
                            var item, idx = this.navIdx.concat(cliIdx);
                            if ((item = this.getItem(idx))[this.getField("children", idx.length - 1)] && item[this.getField("children", idx.length - 1)].length) {
                                if (("mouseover" === e.type || Browser.isDevice && this.isMenu) && this.setLISelected(cli), 
                                cli.setAttribute("aria-expanded", "true"), this.navIdx.push(cliIdx), this.isMenu && !this.element.classList.contains("e-vertical") && this.navIdx.length < 2) {
                                    var collision = isCollide(cli, this.element);
                                    if (collision.length) {
                                        var boundRect = cli.getBoundingClientRect();
                                        this.element.scroll(collision.indexOf("right") > -1 ? boundRect.right : boundRect.left, 0);
                                    }
                                }
                                this.openMenu(cli, item, null, null, e);
                            } else "mouseover" !== e.type && this.closeMenu(null, e);
                        }
                    }
                } else "UL" === trgt.tagName && trgt.parentElement === wrapper || cli && cli.querySelector(".e-caret") || this.closeMenu(null, e);
            }
        }, MenuBase.prototype.setLISelected = function(li) {
            var sli = this.getLIByClass(li.parentElement, SELECTED$3);
            sli && sli.classList.remove(SELECTED$3), li.classList.remove(FOCUSED), li.classList.add(SELECTED$3);
        }, MenuBase.prototype.getLIByClass = function(ul, classname) {
            for (var i = 0, len = ul.children.length; i < len; i++) if (ul.children[i].classList.contains(classname)) return ul.children[i];
            return null;
        }, MenuBase.prototype.getItem = function(navIdx) {
            var idx = (navIdx = navIdx.slice()).pop();
            return this.getItems(navIdx)[idx];
        }, MenuBase.prototype.getItems = function(navIdx) {
            for (var items = this.items, i = 0; i < navIdx.length; i++) items = items[navIdx[i]][this.getField("children", i)];
            return items;
        }, MenuBase.prototype.getIdx = function(ul, li, skipHdr) {
            void 0 === skipHdr && (skipHdr = !0);
            var idx = Array.prototype.indexOf.call(ul.children, li);
            return skipHdr && ul.children[0].classList.contains(HEADER$3) && idx--, idx;
        }, MenuBase.prototype.getLI = function(elem) {
            return "LI" === elem.tagName && elem.classList.contains("e-menu-item") ? elem : closest(elem, "li.e-menu-item");
        }, MenuBase.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var wrapper = this.getWrapper(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "cssClass":
                    oldProp.cssClass && removeClass([ wrapper ], oldProp.cssClass.split(" ")), newProp.cssClass && addClass([ wrapper ], newProp.cssClass.split(" "));
                    break;

                  case "enableRtl":
                    wrapper.classList.toggle("e-rtl");
                    break;

                  case "showItemOnClick":
                    this.unWireEvents(), this.showItemOnClick = newProp.showItemOnClick, this.wireEvents();
                    break;

                  case "items":
                    for (var idx = void 0, navIdx = void 0, item = void 0, keys = Object.keys(newProp.items), i = 0; i < keys.length; i++) (navIdx = this.getChangedItemIndex(newProp, [], Number(keys[i]))).length <= this.getWrapper().children.length && (idx = navIdx.pop(), 
                    item = this.getItems(navIdx), this.insertAfter([ item[idx] ], item[idx].text), this.removeItem(item, navIdx, idx)), 
                    navIdx.length = 0;
                }
            }
        }, MenuBase.prototype.getChangedItemIndex = function(newProp, index, idx) {
            index.push(idx);
            var key = Object.keys(newProp.items[idx]).pop();
            if ("items" === key) {
                var item = newProp.items[idx];
                this.getChangedItemIndex(item, index, Number(Object.keys(item.items).pop()));
            } else "isParentArray" === key && index.length > 1 && index.pop();
            return index;
        }, MenuBase.prototype.removeItem = function(item, navIdx, idx) {
            item.splice(idx, 1);
            var uls = this.getWrapper().children;
            navIdx.length < uls.length && detach(uls[navIdx.length].children[idx]);
        }, MenuBase.prototype.unWireEvents = function() {
            var wrapper = this.getWrapper();
            if (this.target) {
                for (var target = void 0, touchModule = void 0, targetElems = selectAll(this.target), i = 0, len = targetElems.length; i < len; i++) target = targetElems[i], 
                Browser.isIos ? (touchModule = getInstance(target, Touch)) && touchModule.destroy() : EventHandler.remove(target, "contextmenu", this.cmenuHandler);
                for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
                    var parent_2 = _a[_i];
                    EventHandler.remove(parent_2, "scroll", this.scrollHandler);
                }
            }
            Browser.isDevice || (EventHandler.remove(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler), 
            EventHandler.remove(document, "mousedown", this.delegateMouseDownHandler)), EventHandler.remove(document, "click", this.delegateClickHandler);
            var keyboardModule = getInstance(wrapper, KeyboardEvents);
            keyboardModule && keyboardModule.destroy(), this.rippleFn();
        }, MenuBase.prototype.toggleAnimation = function(ul, isMenuOpen) {
            var _this = this;
            void 0 === isMenuOpen && (isMenuOpen = !0), "None" !== this.animationSettings.effect && isMenuOpen ? this.animation.animate(ul, {
                name: this.animationSettings.effect,
                duration: this.animationSettings.duration,
                timingFunction: this.animationSettings.easing,
                begin: function(options) {
                    options.element.style.display = "block", options.element.style.maxHeight = options.element.getBoundingClientRect().height + "px";
                },
                end: function(options) {
                    _this.end(options.element, isMenuOpen);
                }
            }) : this.end(ul, isMenuOpen);
        }, MenuBase.prototype.end = function(ul, isMenuOpen) {
            if (isMenuOpen) {
                ul.style.display = "block", ul.style.maxHeight = "";
                var item = this.navIdx.length ? this.getItem(this.navIdx) : null, eventArgs = {
                    element: ul,
                    parentItem: item,
                    items: item ? item.items : this.items
                };
                if (this.trigger("onOpen", eventArgs), ul.querySelector("." + FOCUSED)) ul.querySelector("." + FOCUSED).focus(); else {
                    var ele = void 0;
                    (ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1]) ? ele.querySelector(".e-selected").focus() : this.element.focus();
                }
            } else if (ul === this.element) {
                var fli = this.getLIByClass(this.element, FOCUSED);
                fli && fli.classList.remove(FOCUSED);
                var sli = this.getLIByClass(this.element, SELECTED$3);
                sli && sli.classList.remove(SELECTED$3), ul.style.display = "none";
            } else detach(ul);
        }, MenuBase.prototype.getPersistData = function() {
            return "";
        }, MenuBase.prototype.getWrapper = function() {
            return closest(this.element, ".e-" + this.getModuleName() + "-wrapper");
        }, MenuBase.prototype.getIndex = function(data, isUniqueId, items, nIndex, isCallBack, level) {
            void 0 === items && (items = this.items), void 0 === nIndex && (nIndex = []), void 0 === isCallBack && (isCallBack = !1), 
            void 0 === level && (level = 0);
            var item;
            level = isCallBack ? level + 1 : 0;
            for (var i = 0, len = items.length; i < len; i++) {
                if (item = items[i], (isUniqueId ? item[this.getField("itemId", level)] : item[this.getField("text", level)]) === data) {
                    nIndex.push(i);
                    break;
                }
                if (item[this.getField("children", level)] && item[this.getField("children", level)].length) {
                    if (-1 !== (nIndex = this.getIndex(data, isUniqueId, item[this.getField("children", level)], nIndex, !0, level))[nIndex.length - 1]) {
                        nIndex.unshift(i);
                        break;
                    }
                    i !== len - 1 && nIndex.pop();
                } else i === len - 1 && nIndex.push(-1);
            }
            return isCallBack || -1 !== nIndex[0] ? nIndex : [];
        }, MenuBase.prototype.enableItems = function(items, enable, isUniqueId) {
            void 0 === enable && (enable = !0);
            for (var ul, idx, navIdx, disabled = "e-disabled", wrapper = this.getWrapper(), i = 0; i < items.length; i++) idx = (navIdx = this.getIndex(items[i], isUniqueId)).pop(), 
            (ul = wrapper.children[navIdx.length]) && (enable ? this.isMenu ? (ul.children[idx].classList.remove(disabled), 
            ul.children[idx].removeAttribute("aria-disabled")) : Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[idx + 1].classList.remove(disabled) : ul.children[idx].classList.remove(disabled) : this.isMenu ? (ul.children[idx].classList.add(disabled), 
            ul.children[idx].setAttribute("aria-disabled", "true")) : Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[idx + 1].classList.add(disabled) : ul.children[idx].classList.add(disabled));
        }, MenuBase.prototype.showItems = function(items, isUniqueId) {
            this.showHideItems(items, !1, isUniqueId);
        }, MenuBase.prototype.hideItems = function(items, isUniqueId) {
            this.showHideItems(items, !0, isUniqueId);
        }, MenuBase.prototype.showHideItems = function(items, ishide, isUniqueId) {
            for (var ul, index, navIdx, wrapper = this.getWrapper(), i = 0; i < items.length; i++) index = (navIdx = this.getIndex(items[i], isUniqueId)).pop(), 
            (ul = wrapper.children[navIdx.length]) && (ishide ? Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[index + 1].classList.add(HIDE) : ul.children[index].classList.add(HIDE) : Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[index + 1].classList.remove(HIDE) : ul.children[index].classList.remove(HIDE));
        }, MenuBase.prototype.removeItems = function(items, isUniqueId) {
            for (var idx, navIdx, iitems, i = 0; i < items.length; i++) idx = (navIdx = this.getIndex(items[i], isUniqueId)).pop(), 
            iitems = this.getItems(navIdx), this.removeItem(iitems, navIdx, idx);
        }, MenuBase.prototype.insertAfter = function(items, text, isUniqueId) {
            this.insertItems(items, text, isUniqueId);
        }, MenuBase.prototype.insertBefore = function(items, text, isUniqueId) {
            this.insertItems(items, text, isUniqueId, !1);
        }, MenuBase.prototype.insertItems = function(items, text, isUniqueId, isAfter) {
            void 0 === isAfter && (isAfter = !0);
            for (var li, idx, navIdx, iitems, menuitem, i = 0; i < items.length; i++) {
                idx = (navIdx = this.getIndex(text, isUniqueId)).pop(), iitems = this.getItems(navIdx), 
                menuitem = new MenuItem(iitems[0], "items", items[i], !0), iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
                var uls = this.getWrapper().children;
                navIdx.length < uls.length && (idx = isAfter ? idx + 1 : idx, this.hasField(iitems, this.getField("iconCss", navIdx.length - 1)), 
                li = this.createItems(iitems).children[idx], uls[navIdx.length].insertBefore(li, uls[navIdx.length].children[idx]));
            }
        }, MenuBase.prototype.destroy = function() {
            var _this = this, wrapper = this.getWrapper();
            wrapper && (_super.prototype.destroy.call(this), this.unWireEvents(), this.ngElement && !this.isMenu ? this.ngElement.style.display = "block" : (this.closeMenu(), 
            this.element.innerHTML = "", [ "top", "left", "display", "z-index" ].forEach(function(key) {
                _this.element.style.removeProperty(key);
            }), [ "role", "tabindex", "class", "style" ].forEach(function(key) {
                "class" === key && _this.element.classList.contains("e-menu-parent") && _this.element.classList.remove("e-menu-parent"), 
                -1 !== [ "class", "style" ].indexOf(key) && _this.element.getAttribute(key) || _this.element.removeAttribute(key), 
                _this.isMenu && "class" === key && _this.element.classList.contains("e-vertical") && _this.element.classList.remove("e-vertical");
            }), wrapper.parentNode.insertBefore(this.element, wrapper)), this.isMenu && this.ngElement ? (detach(this.element), 
            wrapper.style.display = "", wrapper.classList.remove("e-" + this.getModuleName() + "-wrapper"), 
            wrapper.removeAttribute("data-ripple")) : detach(wrapper));
        }, __decorate$43([ Event() ], MenuBase.prototype, "beforeItemRender", void 0), __decorate$43([ Event() ], MenuBase.prototype, "beforeOpen", void 0), 
        __decorate$43([ Event() ], MenuBase.prototype, "onOpen", void 0), __decorate$43([ Event() ], MenuBase.prototype, "beforeClose", void 0), 
        __decorate$43([ Event() ], MenuBase.prototype, "onClose", void 0), __decorate$43([ Event() ], MenuBase.prototype, "select", void 0), 
        __decorate$43([ Event() ], MenuBase.prototype, "created", void 0), __decorate$43([ Property("") ], MenuBase.prototype, "cssClass", void 0), 
        __decorate$43([ Property(!1) ], MenuBase.prototype, "showItemOnClick", void 0), 
        __decorate$43([ Property("") ], MenuBase.prototype, "target", void 0), __decorate$43([ Property("") ], MenuBase.prototype, "filter", void 0), 
        __decorate$43([ Property(null) ], MenuBase.prototype, "template", void 0), __decorate$43([ Complex({}, FieldSettings$2) ], MenuBase.prototype, "fields", void 0), 
        __decorate$43([ Collection([], MenuItem) ], MenuBase.prototype, "items", void 0), 
        __decorate$43([ Property({
            duration: 400,
            easing: "ease",
            effect: "SlideDown"
        }) ], MenuBase.prototype, "animationSettings", void 0), MenuBase = __decorate$43([ NotifyPropertyChanges ], MenuBase);
    }(Component), __extends$56 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$42 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, ContextMenu = function(_super) {
        function ContextMenu(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$56(ContextMenu, _super), ContextMenu.prototype.preRender = function() {
            this.isMenu = !1, _super.prototype.preRender.call(this);
        }, ContextMenu.prototype.open = function(top, left, target) {
            _super.prototype.openMenu.call(this, null, null, top, left, null, target);
        }, ContextMenu.prototype.close = function() {
            _super.prototype.closeMenu.call(this);
        }, ContextMenu.prototype.onPropertyChanged = function(newProp, oldProp) {
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "filter":
                    this.close(), this.filter = newProp.filter;
                    break;

                  case "target":
                    this.unWireEvents(), this.target = newProp.target, this.wireEvents();
                }
            }
        }, ContextMenu.prototype.getModuleName = function() {
            return "contextmenu";
        }, __decorate$42([ Property("") ], ContextMenu.prototype, "target", void 0), __decorate$42([ Property("") ], ContextMenu.prototype, "filter", void 0), 
        __decorate$42([ Collection([], MenuItem) ], ContextMenu.prototype, "items", void 0), 
        ContextMenu = __decorate$42([ NotifyPropertyChanges ], ContextMenu);
    }(MenuBase), __extends$58 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$44 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, VMENU = "e-vertical", __extends$59 = (function(_super) {
        function Menu(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.tempItems = [], _this;
        }
        __extends$58(Menu, _super), Menu.prototype.getModuleName = function() {
            return "menu";
        }, Menu.prototype.preRender = function() {
            if (this.isMenu = !0, this.template) try {
                document.querySelectorAll(this.template).length && (this.template = document.querySelector(this.template).innerHTML.trim(), 
                this.clearChanges());
            } catch (e) {} else this.tempItems = this.items, this.items = [], this.tempItems.map(this.createMenuItems, this), 
            this.setProperties({
                items: this.items
            }, !0), this.tempItems = [];
            _super.prototype.preRender.call(this);
        }, Menu.prototype.initialize = function() {
            _super.prototype.initialize.call(this), "Vertical" === this.orientation ? (this.element.classList.add(VMENU), 
            this.element.setAttribute("aria-orientation", "vertical")) : Browser.isDevice && this.element.classList.add("e-scrollable");
        }, Menu.prototype.onPropertyChanged = function(newProp, oldProp) {
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "orientation":
                    "Vertical" === newProp.orientation ? (this.element.classList.add(VMENU), this.element.setAttribute("aria-orientation", "vertical")) : (this.element.classList.remove(VMENU), 
                    this.element.removeAttribute("aria-orientation"));
                }
            }
        }, Menu.prototype.createMenuItems = function(item, index) {
            var pIdField, idx, i, record = {
                items: []
            }, items = this.items, fields = [ "itemId", "text", "iconCss", "url", "separator", "children" ];
            for (pIdField = this.getField("parentId"), i = 0; i < fields.length; i++) {
                var field = this.getField(fields[i]);
                item[field] && (record[field] = item[field]);
            }
            if (item[pIdField]) {
                for (idx = this.getIndex(item[pIdField].toString(), !0), i = 0; i < idx.length; i++) items[idx[i]].items || (items[idx[i]].items = []), 
                items = items[idx[i]].items;
                items.push(record);
            } else this.items.push(record);
        }, __decorate$44([ Property("Horizontal") ], Menu.prototype, "orientation", void 0), 
        __decorate$44([ Property(null) ], Menu.prototype, "template", void 0), __decorate$44([ Complex({}, FieldSettings$2) ], Menu.prototype, "fields", void 0), 
        Menu = __decorate$44([ NotifyPropertyChanges ], Menu);
    }(MenuBase), function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }()), __decorate$45 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, CLS_HEADER$1 = "e-tab-header", CLS_TB_ITEMS = "e-toolbar-items", CLS_TB_ITEM = "e-toolbar-item", CLS_TB_POPUP = "e-toolbar-popup", TabActionSettings = function(_super) {
        function TabActionSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$59(TabActionSettings, _super), __decorate$45([ Property("SlideLeftIn") ], TabActionSettings.prototype, "effect", void 0), 
        __decorate$45([ Property(600) ], TabActionSettings.prototype, "duration", void 0), 
        __decorate$45([ Property("ease") ], TabActionSettings.prototype, "easing", void 0), 
        TabActionSettings;
    }(ChildProperty), TabAnimationSettings = function(_super) {
        function TabAnimationSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$59(TabAnimationSettings, _super), __decorate$45([ Complex({
            effect: "SlideLeftIn",
            duration: 600,
            easing: "ease"
        }, TabActionSettings) ], TabAnimationSettings.prototype, "previous", void 0), __decorate$45([ Complex({
            effect: "SlideRightIn",
            duration: 600,
            easing: "ease"
        }, TabActionSettings) ], TabAnimationSettings.prototype, "next", void 0), TabAnimationSettings;
    }(ChildProperty), Header = function(_super) {
        function Header() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$59(Header, _super), __decorate$45([ Property("") ], Header.prototype, "text", void 0), 
        __decorate$45([ Property("") ], Header.prototype, "iconCss", void 0), __decorate$45([ Property("left") ], Header.prototype, "iconPosition", void 0), 
        Header;
    }(ChildProperty), TabItem = function(_super) {
        function TabItem() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$59(TabItem, _super), __decorate$45([ Complex({}, Header) ], TabItem.prototype, "header", void 0), 
        __decorate$45([ Property("") ], TabItem.prototype, "content", void 0), __decorate$45([ Property("") ], TabItem.prototype, "cssClass", void 0), 
        __decorate$45([ Property(!1) ], TabItem.prototype, "disabled", void 0), TabItem;
    }(ChildProperty), __extends$60 = (function(_super) {
        function Tab(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.show = {
                name: "SlideDown",
                duration: 100
            }, _this.hide = {
                name: "SlideUp",
                duration: 100
            }, _this.animateOptions = {}, _this.animObj = new Animation(_this.animateOptions), 
            _this.maxHeight = 0, _this.title = "Close", _this.lastIndex = 0, _this.keyConfigs = {
                tab: "tab",
                home: "home",
                end: "end",
                enter: "enter",
                space: "space",
                delete: "delete",
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                moveUp: "uparrow",
                moveDown: "downarrow"
            }, _this;
        }
        __extends$59(Tab, _super), Tab.prototype.destroy = function() {
            var _this = this;
            if (isNullOrUndefined(this.tbObj) || this.tbObj.destroy(), this.unWireEvents(), 
            [ "role", "aria-disabled", "aria-activedescendant", "tabindex", "aria-orientation" ].forEach(function(val) {
                _this.element.removeAttribute(val);
            }), this.expTemplateContent(), this.isTemplate) {
                var cntEle = select(".e-tab > .e-content", this.element);
                this.element.classList.remove("e-template"), isNullOrUndefined(cntEle) || (cntEle.innerHTML = this.cnt);
            } else this.element.innerHTML = "";
            _super.prototype.destroy.call(this), this.trigger("destroyed");
        }, Tab.prototype.preRender = function() {
            var nested = closest(this.element, ".e-content");
            this.prevIndex = 0, this.isNested = !1, this.isPopup = !1, this.initRender = !0, 
            this.isSwipeed = !1, this.itemIndexArray = [], this.templateEle = [], isNullOrUndefined(nested) || (nested.parentElement.classList.add("e-nested"), 
            this.isNested = !0);
            var name = Browser.info.name, css = "msie" === name ? "e-ie" : "edge" === name ? "e-edge" : "safari" === name ? "e-safari" : "";
            setStyleAttribute(this.element, {
                width: formatUnit(this.width),
                height: formatUnit(this.height)
            }), this.setCssClass(this.element, this.cssClass, !0), attributes(this.element, {
                role: "tablist",
                "aria-disabled": "false",
                "aria-activedescendant": ""
            }), this.setCssClass(this.element, css, !0);
        }, Tab.prototype.render = function() {
            this.btnCls = this.createElement("span", {
                className: "e-icons e-close-icon",
                attrs: {
                    title: this.title
                }
            }), this.renderContainer(), this.wireEvents(), this.initRender = !1;
        }, Tab.prototype.renderContainer = function() {
            var ele = this.element;
            if (this.items.length > 0 && 0 === ele.children.length) ele.appendChild(this.createElement("div", {
                className: "e-content"
            })), this.setOrientation(this.headerPlacement, this.createElement("div", {
                className: CLS_HEADER$1
            })), this.isTemplate = !1; else if (this.element.children.length > 0) {
                this.isTemplate = !0, ele.classList.add("e-template");
                var header = ele.querySelector(".e-tab-header");
                header && "Bottom" === this.headerPlacement && this.setOrientation(this.headerPlacement, header);
            }
            if (!isNullOrUndefined(select(".e-tab-header", this.element)) && !isNullOrUndefined(select(".e-content", this.element))) {
                if (this.renderHeader(), this.tbItems = select(".e-tab-header ." + CLS_TB_ITEMS, this.element), 
                isNullOrUndefined(this.tbItems) || rippleEffect(this.tbItems, {
                    selector: ".e-tab-wrap"
                }), this.renderContent(), selectAll("." + CLS_TB_ITEM, this.element).length > 0) {
                    this.tbItems = select(".e-tab-header ." + CLS_TB_ITEMS, this.element), this.bdrLine = this.createElement("div", {
                        className: "e-indicator e-hidden e-ignore"
                    });
                    var scrCnt = select(".e-hscroll-content", this.tbItems);
                    isNullOrUndefined(scrCnt) ? this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild) : scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild), 
                    this.setContentHeight(!0), this.select(this.selectedItem);
                }
                this.setRTL(this.enableRtl);
            }
        }, Tab.prototype.renderHeader = function() {
            var _this = this, tabItems = [];
            if (this.hdrEle = select(".e-tab-header", this.element), this.isTemplate) {
                for (var count = this.hdrEle.children.length, hdrItems = [], i = 0; i < count; i++) hdrItems.push(this.hdrEle.children.item(i).innerHTML);
                count > 0 && (this.hdrEle.innerHTML = "", this.hdrEle.appendChild(this.createElement("div", {
                    className: "e-items"
                })), hdrItems.forEach(function(item, index) {
                    _this.lastIndex = index;
                    var attr = {
                        className: "e-item",
                        id: "e-item_" + index,
                        attrs: {
                            role: "tab",
                            "aria-controls": "e-content_" + index,
                            "aria-selected": "false"
                        }
                    }, txt = _this.createElement("span", {
                        className: "e-tab-text",
                        innerHTML: item,
                        attrs: {
                            role: "presentation"
                        }
                    }).outerHTML, cont = _this.createElement("div", {
                        className: "e-text-wrap",
                        innerHTML: txt + _this.btnCls.outerHTML
                    }).outerHTML, wrap = _this.createElement("div", {
                        className: "e-tab-wrap",
                        innerHTML: cont,
                        attrs: {
                            tabIndex: "-1"
                        }
                    });
                    select(".e-items", _this.element).appendChild(_this.createElement("div", attr)), 
                    selectAll(".e-item", _this.element)[index].appendChild(wrap);
                }));
            } else tabItems = this.parseObject(this.items, 0);
            this.tbObj = new Toolbar({
                width: "100%",
                overflowMode: this.overflowMode,
                items: 0 !== tabItems.length ? tabItems : [],
                clicked: this.clickHandler.bind(this)
            }), this.tbObj.createElement = this.createElement, this.tbObj.appendTo(this.hdrEle), 
            attributes(this.element, {
                "aria-orientation": "horizontal"
            }), this.setCloseButton(this.showCloseButton), this.setProperties({
                headerPlacement: this.element.children.item(0).classList.contains(CLS_HEADER$1) ? "Top" : "Bottom"
            }, !0);
        }, Tab.prototype.renderContent = function() {
            this.cntEle = select(".e-content", this.element);
            var hdrItem = selectAll("." + CLS_TB_ITEM, this.element);
            if (this.isTemplate) {
                this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : "";
                for (var contents = this.cntEle.children, i = 0; i < hdrItem.length; i++) contents.length - 1 >= i && (contents.item(i).className += "e-item", 
                attributes(contents.item(i), {
                    role: "tabpanel",
                    "aria-labelledby": "e-item_" + i
                }), contents.item(i).id = "e-content_" + i);
            }
        }, Tab.prototype.reRenderItems = function() {
            this.renderContainer(), isNullOrUndefined(this.cntEle) || (this.touchModule = new Touch(this.cntEle, {
                swipe: this.swipeHandler.bind(this)
            }));
        }, Tab.prototype.parseObject = function(items, index) {
            var txtWrapEle, _this = this, tbCount = selectAll("." + CLS_TB_ITEM, this.element).length, tItems = [];
            return items.forEach(function(item, i) {
                if (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text)) _this.items.splice(i, 0); else {
                    var pos = isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition, css = isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss, txt = item.header.text;
                    _this.lastIndex = 0 === tbCount ? i : _this.isReplace ? index + i : _this.lastIndex + 1;
                    var disabled = item.disabled ? " e-disable e-overlay" : "";
                    txtWrapEle = _this.createElement("div", {
                        className: "e-tab-text",
                        attrs: {
                            role: "presentation"
                        }
                    });
                    var tHtml = txt instanceof Object ? txt.outerHTML : txt, txtEmpty = !isNullOrUndefined(tHtml) && "" !== tHtml;
                    isNullOrUndefined(txt.tagName) ? _this.headerTextCompile(txtWrapEle, txt) : txtWrapEle.appendChild(txt);
                    var icon = _this.createElement("span", {
                        className: "e-icons e-tab-icon e-icon-" + pos + " " + css
                    }), tCont = _this.createElement("div", {
                        className: "e-text-wrap"
                    });
                    if (tCont.appendChild(txtWrapEle), "" !== txt && void 0 !== txt || "" !== css) {
                        "" !== txt && void 0 !== txt && "" !== css ? ("left" === pos || "top" === pos ? tCont.insertBefore(icon, tCont.firstElementChild) : tCont.appendChild(icon), 
                        txtWrapEle) : ("" === css ? txtWrapEle : icon) === icon && (detach(txtWrapEle), 
                        tCont.appendChild(icon));
                        var wrapAttrs = item.disabled ? {} : {
                            tabIndex: "-1"
                        };
                        tCont.appendChild(_this.btnCls.cloneNode(!0));
                        var wrap = _this.createElement("div", {
                            className: "e-tab-wrap",
                            attrs: wrapAttrs
                        });
                        wrap.appendChild(tCont), _this.itemIndexArray === [] ? _this.itemIndexArray.push("e-item_" + _this.lastIndex) : _this.itemIndexArray.splice(index + i, 0, "e-item_" + _this.lastIndex);
                        var tItem = {
                            htmlAttributes: {
                                id: "e-item_" + _this.lastIndex,
                                role: "tab",
                                "aria-selected": "false"
                            },
                            template: wrap
                        };
                        tItem.cssClass = item.cssClass + " " + disabled + " " + ("" !== css ? "e-i" + pos : "") + " " + (txtEmpty ? "" : "e-icon"), 
                        "top" !== pos && "bottom" !== pos || _this.element.classList.add("e-vertical-icon"), 
                        tItems.push(tItem);
                    }
                }
            }), tItems;
        }, Tab.prototype.removeActiveClass = function(id) {
            var hdrActEle = selectAll(":root .e-tab-header .e-toolbar-item.e-active", this.element)[0];
            if ("Bottom" === this.headerPlacement && (hdrActEle = selectAll(":root .e-tab-header .e-toolbar-item.e-active", this.element.children[1])[0]), 
            !isNullOrUndefined(hdrActEle)) {
                hdrActEle.classList.remove("e-active");
                var no = this.extIndex(hdrActEle.id);
                this.findEle(select(".e-content", this.element).children, "e-content_" + no);
            }
        }, Tab.prototype.checkPopupOverflow = function(ele) {
            this.tbPop = select(".e-toolbar-pop", this.element);
            var popIcon = select(".e-hor-nav", this.element), tbrItems = select("." + CLS_TB_ITEMS, this.element);
            return (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth) && (ele.classList.add(CLS_TB_POPUP), 
            this.tbPop.insertBefore(ele.cloneNode(!0), selectAll("." + CLS_TB_POPUP, this.tbPop)[0]), 
            ele.outerHTML = ""), !0;
        }, Tab.prototype.popupHandler = function(target) {
            var ripEle = target.querySelector(".e-ripple-element");
            isNullOrUndefined(ripEle) || (ripEle.outerHTML = "", target.querySelector(".e-tab-wrap").classList.remove("e-ripple")), 
            this.tbItem = selectAll(".e-toolbar-items ." + CLS_TB_ITEM, this.hdrEle);
            var lastChild = this.tbItem[this.tbItem.length - 1];
            if (0 !== this.tbItem.length) {
                if (target.classList.remove(CLS_TB_POPUP), this.tbItems.appendChild(target.cloneNode(!0)), 
                this.actEleId = target.id, target.outerHTML = "", this.checkPopupOverflow(lastChild)) {
                    var prevEle = this.tbItems.lastChild.previousElementSibling;
                    this.checkPopupOverflow(prevEle);
                }
                this.isPopup = !0;
            }
            return selectAll("." + CLS_TB_ITEM, this.tbItems).length - 1;
        }, Tab.prototype.setCloseButton = function(val) {
            var trg = select(".e-tab-header", this.element);
            !0 === val ? trg.classList.add("e-close-show") : trg.classList.remove("e-close-show"), 
            this.tbObj.refreshOverflow(), this.refreshActElePosition();
        }, Tab.prototype.prevCtnAnimation = function(prev, current) {
            this.enableRtl || this.element.classList.contains("e-rtl");
            return this.isPopup || prev <= current ? "SlideLeftIn" === this.animation.previous.effect ? {
                name: "SlideLeftOut",
                duration: this.animation.previous.duration,
                timingFunction: this.animation.previous.easing
            } : null : "SlideRightIn" === this.animation.next.effect ? {
                name: "SlideRightOut",
                duration: this.animation.next.duration,
                timingFunction: this.animation.next.easing
            } : null;
        }, Tab.prototype.triggerPrevAnimation = function(oldCnt, prevIndex) {
            var _this = this, animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);
            isNullOrUndefined(animateObj) ? oldCnt.classList.remove("e-active") : (animateObj.begin = function() {
                setStyleAttribute(oldCnt, {
                    position: "absolute"
                }), oldCnt.classList.add("e-progress"), oldCnt.classList.add("e-view");
            }, animateObj.end = function() {
                oldCnt.style.display = "none", oldCnt.classList.remove("e-active"), oldCnt.classList.remove("e-progress"), 
                oldCnt.classList.remove("e-view"), setStyleAttribute(oldCnt, {
                    display: "",
                    position: ""
                }), 0 !== oldCnt.childNodes.length || _this.isTemplate || detach(oldCnt);
            }, new Animation(animateObj).animate(oldCnt));
        }, Tab.prototype.triggerAnimation = function(id, value) {
            var oldCnt, _this = this, prevIndex = this.prevIndex;
            [].slice.call(this.element.querySelector(".e-content").children).forEach(function(item) {
                item.id === _this.prevActiveEle && (oldCnt = item);
            });
            var prevEle = this.tbItem[prevIndex], no = this.extIndex(this.tbItem[this.selectedItem].id), newCnt = this.getTrgContent(this.cntEle, no);
            if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {
                var idNo = this.extIndex(prevEle.id);
                oldCnt = this.getTrgContent(this.cntEle, idNo);
            }
            if (this.prevActiveEle = newCnt.id, this.initRender || !1 === value || this.animation === {} || isNullOrUndefined(this.animation)) oldCnt && oldCnt !== newCnt && oldCnt.classList.remove("e-active"); else {
                var animateObj, cnt = select(".e-content", this.element);
                if (this.prevIndex > this.selectedItem && !this.isPopup) {
                    var openEff = this.animation.previous.effect;
                    animateObj = {
                        name: "None" === openEff ? "" : "SlideLeftIn" !== openEff ? openEff : "SlideLeftIn",
                        duration: this.animation.previous.duration,
                        timingFunction: this.animation.previous.easing
                    };
                } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
                    var clsEff = this.animation.next.effect;
                    animateObj = {
                        name: "None" === clsEff ? "" : "SlideRightIn" !== clsEff ? clsEff : "SlideRightIn",
                        duration: this.animation.next.duration,
                        timingFunction: this.animation.next.easing
                    };
                }
                animateObj.progress = function() {
                    cnt.classList.add("e-progress"), _this.setActiveBorder();
                }, animateObj.end = function() {
                    cnt.classList.remove("e-progress"), newCnt.classList.add("e-active");
                }, this.initRender || isNullOrUndefined(oldCnt) || this.triggerPrevAnimation(oldCnt, prevIndex), 
                this.isPopup = !1, "" === animateObj.name ? newCnt.classList.add("e-active") : new Animation(animateObj).animate(newCnt);
            }
        }, Tab.prototype.keyPressed = function(trg) {
            var trgParent = closest(trg, ".e-tab-header ." + CLS_TB_ITEM), trgIndex = this.getEleIndex(trgParent);
            !isNullOrUndefined(this.popEle) && trg.classList.contains("e-hor-nav") ? this.popEle.classList.contains("e-popup-open") ? this.popObj.hide(this.hide) : this.popObj.show(this.show) : trg.classList.contains("e-scroll-nav") ? trg.click() : isNullOrUndefined(trgParent) || !1 !== trgParent.classList.contains("e-active") || (this.select(trgIndex), 
            isNullOrUndefined(this.popEle) || this.popObj.hide(this.hide));
        }, Tab.prototype.getEleIndex = function(item) {
            return Array.prototype.indexOf.call(selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element), item);
        }, Tab.prototype.extIndex = function(id) {
            return id.replace("e-item_", "");
        }, Tab.prototype.expTemplateContent = function() {
            var _this = this;
            this.templateEle.forEach(function(eleStr) {
                isNullOrUndefined(_this.element.querySelector(eleStr)) || (document.body.appendChild(_this.element.querySelector(eleStr)).style.display = "none");
            });
        }, Tab.prototype.templateCompile = function(ele, cnt) {
            var tempEle = this.createElement("div");
            this.compileElement(tempEle, cnt, "content"), 0 !== tempEle.childNodes.length && ele.appendChild(tempEle);
        }, Tab.prototype.compileElement = function(ele, val, prop) {
            "string" == typeof val && (val = val.trim());
            var templateFUN, templateFn = compile$$1(val);
            isNullOrUndefined(templateFn) || (templateFUN = templateFn({}, this, prop)), !isNullOrUndefined(templateFn) && templateFUN.length > 0 && [].slice.call(templateFUN).forEach(function(el) {
                ele.appendChild(el);
            });
        }, Tab.prototype.headerTextCompile = function(element, text) {
            this.compileElement(element, text, "headerText");
        }, Tab.prototype.getContent = function(ele, cnt, callType) {
            var eleStr;
            if ("string" == typeof cnt || isNullOrUndefined(cnt.innerHTML)) if ("." === cnt[0] || "#" === cnt[0]) if (document.querySelectorAll(cnt).length) {
                var eleVal = document.querySelector(cnt);
                eleStr = eleVal.outerHTML.trim(), "clone" === callType ? ele.appendChild(eleVal.cloneNode(!0)) : (ele.appendChild(eleVal), 
                eleVal.style.display = "");
            } else this.templateCompile(ele, cnt); else this.templateCompile(ele, cnt); else ele.appendChild(cnt);
            isNullOrUndefined(eleStr) || -1 === this.templateEle.indexOf(cnt.toString()) && this.templateEle.push(cnt.toString());
        }, Tab.prototype.getTrgContent = function(cntEle, no) {
            return this.element.classList.contains("e-nested") ? select(".e-nested> .e-content > #e-content_" + no, this.element) : this.findEle(cntEle.children, "e-content_" + no);
        }, Tab.prototype.findEle = function(items, key) {
            for (var ele, i = 0; i < items.length; i++) if (items[i].id === key) {
                ele = items[i];
                break;
            }
            return ele;
        }, Tab.prototype.setOrientation = function(place, ele) {
            "Bottom" === place ? this.element.appendChild(ele) : this.element.insertBefore(ele, select(".e-content", this.element));
        }, Tab.prototype.setCssClass = function(ele, cls, val) {
            if ("" !== cls) for (var list = cls.split(" "), i = 0; i < list.length; i++) val ? ele.classList.add(list[i]) : ele.classList.remove(list[i]);
        }, Tab.prototype.setContentHeight = function(val) {
            if (!isNullOrUndefined(this.cntEle)) {
                var hdrEle = select(".e-tab-header", this.element);
                if ("None" === this.heightAdjustMode) {
                    if ("auto" === this.height) return;
                    setStyleAttribute(this.cntEle, {
                        height: this.element.offsetHeight - hdrEle.offsetHeight + "px"
                    });
                } else if ("Fill" === this.heightAdjustMode) setStyleAttribute(this.element, {
                    height: "100%"
                }), setStyleAttribute(this.cntEle, {
                    height: "auto"
                }); else if ("Auto" === this.heightAdjustMode) {
                    var cnt = selectAll(".e-content > .e-item", this.element);
                    if (!0 === this.isTemplate) for (var i = 0; i < cnt.length; i++) cnt[i].setAttribute("style", "display:block; visibility: visible"), 
                    this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i])), cnt[i].style.removeProperty("display"), 
                    cnt[i].style.removeProperty("visibility"); else {
                        this.cntEle = select(".e-content", this.element), !0 === val && this.cntEle.appendChild(this.createElement("div", {
                            id: "e-content_0",
                            className: "e-item e-active",
                            attrs: {
                                role: "tabpanel",
                                "aria-labelledby": "e-item_0"
                            }
                        }));
                        var ele = this.cntEle.children.item(0);
                        for (i = 0; i < this.items.length; i++) for (this.getContent(ele, this.items[i].content, "clone"), 
                        this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele)); ele.firstChild; ) ele.removeChild(ele.firstChild);
                        this.templateEle = [], this.getContent(ele, this.items[0].content, "render"), ele.classList.remove("e-active");
                    }
                    setStyleAttribute(this.cntEle, {
                        height: this.maxHeight + "px"
                    });
                } else setStyleAttribute(this.cntEle, {
                    height: "auto"
                });
            }
        }, Tab.prototype.getHeight = function(ele) {
            var cs = window.getComputedStyle(ele);
            return ele.offsetHeight + parseFloat(cs.getPropertyValue("padding-top")) + parseFloat(cs.getPropertyValue("padding-bottom")) + parseFloat(cs.getPropertyValue("margin-top")) + parseFloat(cs.getPropertyValue("margin-bottom"));
        }, Tab.prototype.setActiveBorder = function() {
            var trg = select(".e-toolbar-item.e-active", this.element);
            if ("Bottom" === this.headerPlacement && (trg = select(".e-toolbar-item.e-active", this.element.children[1])), 
            null !== trg) {
                var root = closest(trg, ".e-tab");
                if (this.element === root) {
                    var hsCnt = select(".e-tab-header .e-toolbar-items .e-hscroll-content", this.element.children[0]);
                    this.tbItems = select(".e-tab-header ." + CLS_TB_ITEMS, this.element);
                    var bar = select(".e-tab-header .e-indicator", this.element);
                    "Bottom" === this.headerPlacement && (hsCnt = select(".e-tab-header .e-toolbar-items .e-hscroll-content", this.element.children[1]));
                    var tbWidth = isNullOrUndefined(hsCnt) ? this.tbItems.offsetWidth : hsCnt.offsetWidth;
                    setStyleAttribute(bar, 0 !== tbWidth ? {
                        left: trg.offsetLeft + "px",
                        right: tbWidth - (trg.offsetLeft + trg.offsetWidth) + "px"
                    } : {
                        left: "auto",
                        right: "auto"
                    }), isNullOrUndefined(this.bdrLine) || this.bdrLine.classList.remove("e-hidden");
                }
            }
        }, Tab.prototype.setActive = function(value) {
            this.tbItem = selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element);
            var trg = this.tbItem[value];
            if (value >= 0 && this.setProperties({
                selectedItem: value
            }, !0), !(value < 0 || isNaN(value) || 0 === this.tbItem.length)) if (trg.classList.contains("e-active")) this.setActiveBorder(); else {
                if (!this.isTemplate) {
                    var prev = this.tbItem[this.prevIndex];
                    isNullOrUndefined(prev) || prev.removeAttribute("aria-controls"), attributes(trg, {
                        "aria-controls": "e-content_" + value
                    });
                }
                var id = trg.id;
                this.removeActiveClass(id), trg.classList.add("e-active"), trg.setAttribute("aria-selected", "true");
                var no = Number(this.extIndex(id));
                if (isNullOrUndefined(this.prevActiveEle) && (this.prevActiveEle = "e-content_" + no), 
                attributes(this.element, {
                    "aria-activedescendant": id
                }), this.isTemplate) {
                    if (select(".e-content", this.element).children.length > 0) {
                        var trg_1 = this.findEle(select(".e-content", this.element).children, "e-content_" + no);
                        isNullOrUndefined(trg_1) || trg_1.classList.add("e-active"), this.triggerAnimation(id, this.enableAnimation);
                    }
                } else {
                    this.cntEle = select(".e-tab > .e-content", this.element);
                    var item = this.getTrgContent(this.cntEle, this.extIndex(id));
                    if (isNullOrUndefined(item)) {
                        this.cntEle.appendChild(this.createElement("div", {
                            id: "e-content_" + this.extIndex(id),
                            className: "e-item e-active",
                            attrs: {
                                role: "tabpanel",
                                "aria-labelledby": "e-item_" + this.extIndex(id)
                            }
                        }));
                        var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id)), itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, trg.id);
                        this.getContent(eleTrg, this.items[itemIndex].content, "render");
                    } else item.classList.add("e-active");
                    this.triggerAnimation(id, this.enableAnimation);
                }
                this.setActiveBorder();
                var curActItem = select(".e-tab-header #" + id, this.element);
                this.refreshItemVisibility(curActItem), curActItem.firstChild.focus();
                var eventArg = {
                    previousItem: this.prevItem,
                    previousIndex: this.prevIndex,
                    selectedItem: trg,
                    selectedIndex: value,
                    isSwiped: this.isSwipeed
                };
                this.initRender && 0 === this.selectedItem || this.trigger("selected", eventArg);
            }
        }, Tab.prototype.setItems = function(items) {
            this.isReplace = !0, this.tbItems = select(".e-tab-header ." + CLS_TB_ITEMS, this.element), 
            this.tbObj.items = this.parseObject(items, 0), this.tbObj.dataBind(), this.isReplace = !1;
        }, Tab.prototype.setRTL = function(value) {
            this.tbObj.enableRtl = value, this.tbObj.dataBind(), this.setCssClass(this.element, "e-rtl", value), 
            this.refreshActiveBorder();
        }, Tab.prototype.refreshActiveBorder = function() {
            isNullOrUndefined(this.bdrLine) || this.bdrLine.classList.add("e-hidden"), this.setActiveBorder();
        }, Tab.prototype.wireEvents = function() {
            window.addEventListener("resize", this.refreshActElePosition.bind(this)), EventHandler.add(this.element, "mouseover", this.hoverHandler, this), 
            EventHandler.add(this.element, "keydown", this.spaceKeyDown, this), isNullOrUndefined(this.cntEle) || (this.touchModule = new Touch(this.cntEle, {
                swipe: this.swipeHandler.bind(this)
            })), this.keyModule = new KeyboardEvents(this.element, {
                keyAction: this.keyHandler.bind(this),
                keyConfigs: this.keyConfigs
            }), this.tabKeyModule = new KeyboardEvents(this.element, {
                keyAction: this.keyHandler.bind(this),
                keyConfigs: {
                    openPopup: "shift+f10",
                    tab: "tab",
                    shiftTab: "shift+tab"
                },
                eventName: "keydown"
            });
        }, Tab.prototype.unWireEvents = function() {
            this.keyModule.destroy(), this.tabKeyModule.destroy(), isNullOrUndefined(this.cntEle) || this.touchModule.destroy(), 
            window.removeEventListener("resize", this.refreshActElePosition.bind(this)), this.element.removeEventListener("mouseover", this.hoverHandler.bind(this));
        }, Tab.prototype.clickHandler = function(args) {
            this.element.classList.remove("e-focused");
            var trg = args.originalEvent.target, trgParent = closest(trg, "." + CLS_TB_ITEM), trgIndex = this.getEleIndex(trgParent);
            trg.classList.contains("e-close-icon") ? this.removeTab(trgIndex) : (this.isPopup = !1, 
            isNullOrUndefined(trgParent) || trgIndex === this.selectedItem || this.select(trgIndex));
        }, Tab.prototype.swipeHandler = function(e) {
            if (!(e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches))) {
                if (this.isSwipeed = !0, "Right" === e.swipeDirection && 0 !== this.selectedItem) {
                    for (var k = this.selectedItem - 1; k >= 0; k--) if (!this.tbItem[k].classList.contains("e-hidden")) {
                        this.select(k);
                        break;
                    }
                } else if ("Left" === e.swipeDirection && this.selectedItem !== selectAll("." + CLS_TB_ITEM, this.element).length - 1) for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) if (!this.tbItem[i].classList.contains("e-hidden")) {
                    this.select(i);
                    break;
                }
                this.isSwipeed = !1;
            }
        }, Tab.prototype.spaceKeyDown = function(e) {
            if (32 === e.keyCode && 32 === e.which || 35 === e.keyCode && 35 === e.which) {
                isNullOrUndefined(closest(e.target, ".e-tab-header")) || e.preventDefault();
            }
        }, Tab.prototype.keyHandler = function(e) {
            if (!this.element.classList.contains("e-disable")) {
                this.element.classList.add("e-focused");
                var trg = e.target, actEle = select(".e-tab-header .e-active", this.element);
                selectAll(".e-toolbar-item:not(.e-toolbar-popup)", this.element);
                switch (this.popEle = select(".e-tab-header .e-toolbar-pop", this.element), isNullOrUndefined(this.popEle) || (this.popObj = this.popEle.ej2_instances[0]), 
                e.action) {
                  case "space":
                  case "enter":
                    if (trg.parentElement.classList.contains("e-disable")) return;
                    if ("enter" === e.action && trg.classList.contains("e-hor-nav")) break;
                    this.keyPressed(trg);
                    break;

                  case "tab":
                  case "shiftTab":
                    trg.classList.contains("e-tab-wrap") && !1 === closest(trg, "." + CLS_TB_ITEM).classList.contains("e-active") && trg.setAttribute("tabindex", "-1"), 
                    this.popObj && isVisible(this.popObj.element) && this.popObj.hide(this.hide), actEle.children.item(0).setAttribute("tabindex", "0");
                    break;

                  case "moveLeft":
                  case "moveRight":
                    var item = closest(document.activeElement, "." + CLS_TB_ITEM);
                    isNullOrUndefined(item) || this.refreshItemVisibility(item);
                    break;

                  case "openPopup":
                    e.preventDefault(), !isNullOrUndefined(this.popEle) && this.popEle.classList.contains("e-popup-close") && this.popObj.show(this.show);
                    break;

                  case "delete":
                    var trgParent = closest(trg, "." + CLS_TB_ITEM);
                    if (!0 === this.showCloseButton && !isNullOrUndefined(trgParent)) {
                        var nxtSib = trgParent.nextSibling;
                        !isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM) && nxtSib.firstChild.focus(), 
                        this.removeTab(this.getEleIndex(trgParent));
                    }
                    this.setActiveBorder();
                }
            }
        }, Tab.prototype.refreshActElePosition = function() {
            var activeEle = select(".e-toolbar-item.e-toolbar-popup.e-active", this.element);
            isNullOrUndefined(activeEle) || this.select(this.getEleIndex(activeEle)), this.refreshActiveBorder();
        }, Tab.prototype.refreshItemVisibility = function(target) {
            if (!isNullOrUndefined(select(".e-hscroll-content", this.tbItems))) {
                var scrBar = select(".e-hscroll-bar", this.tbItems), scrStart = scrBar.scrollLeft, scrEnd = scrStart + scrBar.offsetWidth, eleStart = target.offsetLeft, eleWidth = target.offsetWidth, eleEnd = target.offsetLeft + target.offsetWidth;
                if (scrStart < eleStart && scrEnd < eleEnd) {
                    var eleViewRange = scrEnd - eleStart;
                    scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
                } else if (scrStart > eleStart && scrEnd > eleEnd) {
                    eleViewRange = eleEnd - scrStart;
                    scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
                }
            }
        }, Tab.prototype.hoverHandler = function(e) {
            var trg = e.target;
            !isNullOrUndefined(trg.classList) && trg.classList.contains("e-close-icon") && trg.setAttribute("title", new L10n("tab", {
                closeButtonTitle: this.title
            }, this.locale).getConstant("closeButtonTitle"));
        }, Tab.prototype.enableTab = function(index, value) {
            var tbItems = selectAll("." + CLS_TB_ITEM, this.element)[index];
            isNullOrUndefined(tbItems) || (!0 === value ? (tbItems.classList.remove("e-disable", "e-overlay"), 
            tbItems.firstChild.setAttribute("tabindex", "-1")) : (tbItems.classList.add("e-disable", "e-overlay"), 
            tbItems.firstChild.removeAttribute("tabindex"), tbItems.classList.contains("e-active") && this.select(index + 1)), 
            isNullOrUndefined(this.items[index]) || (this.items[index].disabled = !value, this.dataBind()), 
            tbItems.setAttribute("aria-disabled", !0 === value ? "false" : "true"));
        }, Tab.prototype.addTab = function(items, index) {
            var _this = this, lastEleIndex = 0;
            if (this.isReplace || this.trigger("adding", {
                addedItems: items
            }), this.hdrEle = select(".e-tab-header", this.element), isNullOrUndefined(this.hdrEle)) return this.items = items, 
            void this.reRenderItems();
            var itemsCount = selectAll("." + CLS_TB_ITEM, this.element).length;
            if (0 !== itemsCount && (lastEleIndex = this.lastIndex + 1), isNullOrUndefined(index) && (index = itemsCount - 1), 
            !(itemsCount < index || index < 0 || isNaN(index))) {
                0 !== itemsCount || isNullOrUndefined(this.hdrEle) || (this.hdrEle.style.display = ""), 
                isNullOrUndefined(this.bdrLine) || this.bdrLine.classList.add("e-hidden"), this.tbItems = select(".e-tab-header ." + CLS_TB_ITEMS, this.element);
                var tabItems = this.parseObject(items, index);
                items.forEach(function(item, place) {
                    if (_this.items.splice(index + place, 0, item), _this.isTemplate && !isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text)) {
                        var no = lastEleIndex + place, ele = _this.createElement("div", {
                            id: "e-content_" + no,
                            className: "e-item",
                            attrs: {
                                role: "tabpanel",
                                "aria-labelledby": "e-item_" + no
                            }
                        });
                        _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);
                        var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());
                        _this.getContent(eleTrg, item.content, "render");
                    }
                }), this.tbObj.addItems(tabItems, index), this.isReplace || this.trigger("added", {
                    addedItems: items
                }), this.selectedItem === index ? this.select(index) : this.setActiveBorder();
            }
        }, Tab.prototype.removeTab = function(index) {
            var trg = selectAll("." + CLS_TB_ITEM, this.element)[index], removeArgs = {
                removedItem: trg,
                removedIndex: index
            };
            if (this.trigger("removing", removeArgs), !isNullOrUndefined(trg)) {
                this.tbObj.removeItems(index), this.items.splice(index, 1), this.itemIndexArray.splice(index, 1), 
                this.refreshActiveBorder();
                var cntTrg = select("#e-content_" + this.extIndex(trg.id), select(".e-content", this.element));
                isNullOrUndefined(cntTrg) || detach(cntTrg), this.trigger("removed", removeArgs), 
                trg.classList.contains("e-active") && (index = index > selectAll(".e-toolbar-item:not(.e-toolbar-popup)", this.element).length - 1 ? index - 1 : index, 
                this.enableAnimation = !1, this.selectedItem = index, this.select(index)), 0 === selectAll("." + CLS_TB_ITEM, this.element).length && (this.hdrEle.style.display = "none"), 
                this.enableAnimation = !0;
            }
        }, Tab.prototype.hideTab = function(index, value) {
            var items, item = selectAll("." + CLS_TB_ITEM, this.element)[index];
            if (!isNullOrUndefined(item)) {
                if (isNullOrUndefined(value) && (value = !0), this.bdrLine.classList.add("e-hidden"), 
                !0 === value) if (item.classList.add("e-hidden"), 0 !== (items = selectAll(".e-toolbar-item:not(.e-hidden)", this.tbItems)).length && item.classList.contains("e-active")) {
                    if (0 !== index) for (var i = index - 1; i >= 0; i--) {
                        if (!this.tbItem[i].classList.contains("e-hidden")) {
                            this.select(i);
                            break;
                        }
                        if (0 === i) for (var k = index + 1; k < this.tbItem.length; k++) if (!this.tbItem[k].classList.contains("e-hidden")) {
                            this.select(k);
                            break;
                        }
                    } else for (k = index + 1; k < this.tbItem.length; k++) if (!this.tbItem[k].classList.contains("e-hidden")) {
                        this.select(k);
                        break;
                    }
                } else 0 === items.length && this.element.classList.add("e-hidden"); else this.element.classList.remove("e-hidden"), 
                0 === (items = selectAll(".e-toolbar-item:not(.e-hidden)", this.tbItems)).length && this.select(index), 
                item.classList.remove("e-hidden");
                this.setActiveBorder(), item.setAttribute("aria-hidden", "" + value);
            }
        }, Tab.prototype.select = function(args) {
            this.tbItems = select(".e-tab-header ." + CLS_TB_ITEMS, this.element), this.tbItem = selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element), 
            this.prevItem = this.tbItem[this.prevIndex];
            var trg = this.tbItem[args];
            isNullOrUndefined(this.prevItem) || this.prevItem.classList.contains("e-disable") || this.prevItem.children.item(0).setAttribute("tabindex", "-1");
            var eventArg = {
                previousItem: this.prevItem,
                previousIndex: this.prevIndex,
                selectedItem: this.tbItem[this.selectedItem],
                selectedIndex: this.selectedItem,
                selectingItem: trg,
                selectingIndex: args,
                isSwiped: this.isSwipeed
            };
            if (this.initRender && 0 === this.selectedItem || this.trigger("selecting", eventArg), 
            !eventArg.cancel) if ("number" == typeof args) {
                if (!isNullOrUndefined(this.tbItem[args]) && this.tbItem[args].classList.contains("e-disable")) for (var i = args + 1; i < this.items.length; i++) {
                    if (!1 === this.items[i].disabled) {
                        args = i;
                        break;
                    }
                    args = 0;
                }
                this.tbItem.length > args && args >= 0 && !isNaN(args) ? (this.prevIndex = this.selectedItem, 
                this.tbItem[args].classList.contains(CLS_TB_POPUP) ? this.setActive(this.popupHandler(this.tbItem[args])) : this.setActive(args)) : this.setActive(0);
            } else args instanceof HTMLElement && this.setActive(this.getEleIndex(args));
        }, Tab.prototype.disable = function(value) {
            this.setCssClass(this.element, "e-disable", value), this.element.setAttribute("aria-disabled", "" + value);
        }, Tab.prototype.getPersistData = function() {
            return this.addOnPersist([ "selectedItem", "actEleId" ]);
        }, Tab.prototype.getModuleName = function() {
            return "tab";
        }, Tab.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "width":
                    setStyleAttribute(this.element, {
                        width: formatUnit(newProp.width)
                    });
                    break;

                  case "height":
                    setStyleAttribute(this.element, {
                        height: formatUnit(newProp.height)
                    }), this.setContentHeight(!1);
                    break;

                  case "cssClass":
                    this.setCssClass(this.element, newProp.cssClass, !0);
                    break;

                  case "items":
                    if (newProp.items instanceof Array && oldProp.items instanceof Array) this.lastIndex = 0, 
                    isNullOrUndefined(this.tbObj) ? this.reRenderItems() : (this.setItems(newProp.items), 
                    this.templateEle.length > 0 && this.expTemplateContent(), this.templateEle = [], 
                    select(".e-tab > .e-content", this.element).innerHTML = "", this.select(this.selectedItem)); else for (var changedProp = Object.keys(newProp.items), i = 0; i < changedProp.length; i++) {
                        var index = parseInt(Object.keys(newProp.items)[i], 10), property = Object.keys(newProp.items[index])[0], oldVal = Object(oldProp.items[index])[property], newVal = Object(newProp.items[index])[property], hdrItem = select(".e-toolbar-items #e-item_" + index, this.element), cntItem = select(".e-content #e-content_" + index, this.element);
                        if ("header" === property) {
                            var arr = [];
                            arr.push(this.items[index]), this.items.splice(index, 1), this.itemIndexArray.splice(index, 1), 
                            this.tbObj.items.splice(index, 1);
                            var isHiddenEle = hdrItem.classList.contains("e-hidden");
                            detach(hdrItem), this.isReplace = !0, this.addTab(arr, index), isHiddenEle && this.hideTab(index), 
                            this.isReplace = !1;
                        }
                        if ("content" === property && !isNullOrUndefined(cntItem)) {
                            if (("string" == typeof newVal || isNullOrUndefined(newVal.innerHTML)) && ("." === newVal[0] || "#" === newVal[0]) && newVal.length) {
                                var eleVal = document.querySelector(newVal);
                                cntItem.appendChild(eleVal), eleVal.style.display = "";
                            } else "" === newVal && "#" === oldVal[0] ? (document.body.appendChild(this.element.querySelector(oldVal)).style.display = "none", 
                            cntItem.innerHTML = newVal) : cntItem.innerHTML = newVal;
                        }
                        "cssClass" === property && (isNullOrUndefined(hdrItem) || (hdrItem.classList.remove(oldVal), 
                        hdrItem.classList.add(newVal)), isNullOrUndefined(cntItem) || (cntItem.classList.remove(oldVal), 
                        cntItem.classList.add(newVal))), "disabled" === property && this.enableTab(index, !0 !== newVal);
                    }
                    break;

                  case "showCloseButton":
                    this.setCloseButton(newProp.showCloseButton);
                    break;

                  case "selectedItem":
                    this.selectedItem = oldProp.selectedItem, this.select(newProp.selectedItem);
                    break;

                  case "headerPlacement":
                    var tempHdrEle = select(".e-tab-header", this.element);
                    this.setOrientation(newProp.headerPlacement, tempHdrEle), this.select(this.selectedItem);
                    break;

                  case "enableRtl":
                    this.setRTL(newProp.enableRtl);
                    break;

                  case "overflowMode":
                    this.tbObj.overflowMode = newProp.overflowMode, this.tbObj.dataBind(), this.refreshActElePosition();
                    break;

                  case "heightAdjustMode":
                    this.setContentHeight(!1), this.select(this.selectedItem);
                }
            }
        }, __decorate$45([ Collection([], TabItem) ], Tab.prototype, "items", void 0), __decorate$45([ Property("100%") ], Tab.prototype, "width", void 0), 
        __decorate$45([ Property("auto") ], Tab.prototype, "height", void 0), __decorate$45([ Property("") ], Tab.prototype, "cssClass", void 0), 
        __decorate$45([ Property(0) ], Tab.prototype, "selectedItem", void 0), __decorate$45([ Property("Top") ], Tab.prototype, "headerPlacement", void 0), 
        __decorate$45([ Property("Content") ], Tab.prototype, "heightAdjustMode", void 0), 
        __decorate$45([ Property("Scrollable") ], Tab.prototype, "overflowMode", void 0), 
        __decorate$45([ Property(!1) ], Tab.prototype, "enableRtl", void 0), __decorate$45([ Property(!1) ], Tab.prototype, "enablePersistence", void 0), 
        __decorate$45([ Property(!1) ], Tab.prototype, "showCloseButton", void 0), __decorate$45([ Complex({}, TabAnimationSettings) ], Tab.prototype, "animation", void 0), 
        __decorate$45([ Event() ], Tab.prototype, "created", void 0), __decorate$45([ Event() ], Tab.prototype, "adding", void 0), 
        __decorate$45([ Event() ], Tab.prototype, "added", void 0), __decorate$45([ Event() ], Tab.prototype, "selecting", void 0), 
        __decorate$45([ Event() ], Tab.prototype, "selected", void 0), __decorate$45([ Event() ], Tab.prototype, "removing", void 0), 
        __decorate$45([ Event() ], Tab.prototype, "removed", void 0), __decorate$45([ Event() ], Tab.prototype, "destroyed", void 0), 
        Tab = __decorate$45([ NotifyPropertyChanges ], Tab);
    }(Component), function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }()), __decorate$46 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, ROOT$11 = "e-treeview", COLLAPSIBLE = "e-icon-collapsible", EXPANDABLE = "e-icon-expandable", LISTITEM = "e-list-item", LISTTEXT = "e-list-text", PARENTITEM = "e-list-parent", HOVER$3 = "e-hover", ACTIVE$4 = "e-active", LOAD = "e-icons-spinner", PROCESS = "e-process", ICON$4 = "e-icons", TEXTWRAP = "e-text-content", SIBLING = "e-sibling", DROPNEXT = "e-drop-next", CHECK$3 = "e-check", CHECKBOXWRAP$1 = "e-checkbox-wrapper", FOCUS$3 = "e-node-focus", treeAriaAttr = {
        treeRole: "tree",
        itemRole: "treeitem",
        listRole: "group",
        itemText: "",
        wrapperRole: ""
    }, FieldsSettings = function(_super) {
        function FieldsSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$60(FieldsSettings, _super), __decorate$46([ Property("child") ], FieldsSettings.prototype, "child", void 0), 
        __decorate$46([ Property([]) ], FieldsSettings.prototype, "dataSource", void 0), 
        __decorate$46([ Property("expanded") ], FieldsSettings.prototype, "expanded", void 0), 
        __decorate$46([ Property("hasChildren") ], FieldsSettings.prototype, "hasChildren", void 0), 
        __decorate$46([ Property("htmlAttributes") ], FieldsSettings.prototype, "htmlAttributes", void 0), 
        __decorate$46([ Property("iconCss") ], FieldsSettings.prototype, "iconCss", void 0), 
        __decorate$46([ Property("id") ], FieldsSettings.prototype, "id", void 0), __decorate$46([ Property("imageUrl") ], FieldsSettings.prototype, "imageUrl", void 0), 
        __decorate$46([ Property("isChecked") ], FieldsSettings.prototype, "isChecked", void 0), 
        __decorate$46([ Property("parentID") ], FieldsSettings.prototype, "parentID", void 0), 
        __decorate$46([ Property(null) ], FieldsSettings.prototype, "query", void 0), __decorate$46([ Property("selected") ], FieldsSettings.prototype, "selected", void 0), 
        __decorate$46([ Property(null) ], FieldsSettings.prototype, "tableName", void 0), 
        __decorate$46([ Property("text") ], FieldsSettings.prototype, "text", void 0), __decorate$46([ Property("tooltip") ], FieldsSettings.prototype, "tooltip", void 0), 
        __decorate$46([ Property("navigateUrl") ], FieldsSettings.prototype, "navigateUrl", void 0), 
        FieldsSettings;
    }(ChildProperty), ActionSettings = function(_super) {
        function ActionSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$60(ActionSettings, _super), __decorate$46([ Property("SlideDown") ], ActionSettings.prototype, "effect", void 0), 
        __decorate$46([ Property(400) ], ActionSettings.prototype, "duration", void 0), 
        __decorate$46([ Property("linear") ], ActionSettings.prototype, "easing", void 0), 
        ActionSettings;
    }(ChildProperty), NodeAnimationSettings = function(_super) {
        function NodeAnimationSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$60(NodeAnimationSettings, _super), __decorate$46([ Complex({
            effect: "SlideUp",
            duration: 400,
            easing: "linear"
        }, ActionSettings) ], NodeAnimationSettings.prototype, "collapse", void 0), __decorate$46([ Complex({
            effect: "SlideDown",
            duration: 400,
            easing: "linear"
        }, ActionSettings) ], NodeAnimationSettings.prototype, "expand", void 0), NodeAnimationSettings;
    }(ChildProperty), __extends$61 = (function(_super) {
        function TreeView(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.preventExpand = !1, _this.checkedElement = [], _this.mouseDownStatus = !1, 
            _this;
        }
        __extends$60(TreeView, _super), TreeView_1 = TreeView, TreeView.prototype.getModuleName = function() {
            return "treeview";
        }, TreeView.prototype.preRender = function() {
            var _this = this;
            this.checkActionNodes = [], this.dragStartAction = !1, this.isAnimate = !1, this.keyConfigs = {
                escape: "escape",
                end: "end",
                enter: "enter",
                f2: "f2",
                home: "home",
                moveDown: "downarrow",
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                moveUp: "uparrow",
                ctrlDown: "ctrl+downarrow",
                ctrlUp: "ctrl+uparrow",
                ctrlEnter: "ctrl+enter",
                ctrlHome: "ctrl+home",
                ctrlEnd: "ctrl+end",
                ctrlA: "ctrl+A",
                shiftDown: "shift+downarrow",
                shiftUp: "shift+uparrow",
                shiftEnter: "shift+enter",
                shiftHome: "shift+home",
                shiftEnd: "shift+end",
                csDown: "ctrl+shift+downarrow",
                csUp: "ctrl+shift+uparrow",
                csEnter: "ctrl+shift+enter",
                csHome: "ctrl+shift+home",
                csEnd: "ctrl+shift+end",
                space: "space"
            }, this.listBaseOption = {
                expandCollapse: !0,
                showIcon: !0,
                expandIconClass: EXPANDABLE,
                ariaAttributes: treeAriaAttr,
                expandIconPosition: "Left",
                itemCreated: function(e) {
                    _this.beforeNodeCreate(e);
                }
            }, this.updateListProp(this.fields), this.aniObj = new Animation({}), this.treeList = [], 
            this.isLoaded = !1, this.isInitalExpand = !1, this.index = 0, this.setTouchClass(), 
            isNullOrUndefined(this.selectedNodes) && this.setProperties({
                selectedNodes: []
            }, !0), isNullOrUndefined(this.checkedNodes) && this.setProperties({
                checkedNodes: []
            }, !0), isNullOrUndefined(this.expandedNodes) ? this.setProperties({
                expandedNodes: []
            }, !0) : this.isInitalExpand = !0;
        }, TreeView.prototype.getPersistData = function() {
            return this.addOnPersist([ "selectedNodes", "checkedNodes", "expandedNodes" ]);
        }, TreeView.prototype.render = function() {
            this.initialRender = !0, this.initialize(), this.setDataBinding(), this.setExpandOnType(), 
            this.setRipple(), this.wireEditingEvents(this.allowEditing), this.setDragAndDrop(this.allowDragAndDrop), 
            this.wireEvents(), this.initialRender = !1;
        }, TreeView.prototype.initialize = function() {
            this.element.setAttribute("role", "tree"), this.element.setAttribute("tabindex", "0"), 
            this.element.setAttribute("aria-activedescendant", this.element.id + "_active"), 
            this.setCssClass(null, this.cssClass), this.setEnableRtl(), this.setFullRow(this.fullRowSelect), 
            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
        }, TreeView.prototype.setEnableRtl = function() {
            this.enableRtl ? addClass([ this.element ], "e-rtl") : removeClass([ this.element ], "e-rtl");
        }, TreeView.prototype.setRipple = function() {
            var rippleModel = {
                selector: ".e-fullrow,.e-text-content",
                ignore: ".e-text-content > .e-icons,.e-input-group,.e-input, ." + CHECKBOXWRAP$1
            };
            this.rippleFn = rippleEffect(this.element, rippleModel);
            var iconModel = {
                selector: "." + TEXTWRAP + " > ." + ICON$4,
                isCenterRipple: !0
            };
            this.rippleIconFn = rippleEffect(this.element, iconModel);
        }, TreeView.prototype.setFullRow = function(isEnabled) {
            isEnabled ? addClass([ this.element ], "e-fullrow-wrap") : removeClass([ this.element ], "e-fullrow-wrap");
        }, TreeView.prototype.setMultiSelect = function(isEnabled) {
            var firstUl = select("." + PARENTITEM, this.element);
            isEnabled ? firstUl.setAttribute("aria-multiselectable", "true") : firstUl.removeAttribute("aria-multiselectable");
        }, TreeView.prototype.templateComplier = function(template) {
            if (template) try {
                if (document.querySelectorAll(template).length) return compile$$1(document.querySelector(template).innerHTML.trim());
            } catch (e) {
                return compile$$1(template);
            }
        }, TreeView.prototype.setDataBinding = function() {
            var _this = this;
            this.treeList.push("false"), this.fields.dataSource instanceof DataManager ? this.fields.dataSource.ready ? this.fields.dataSource.ready.then(function(e) {
                _this.fields.dataSource instanceof DataManager && _this.fields.dataSource.dataSource.offline && (_this.treeList.pop(), 
                _this.treeData = e.result, _this.isNumberTypeId = _this.getType(), _this.setRootData(), 
                _this.renderItems(!0), 0 !== _this.treeList.length || _this.isLoaded || _this.finalize());
            }) : this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function(e) {
                _this.treeList.pop(), _this.treeData = e.result, _this.isNumberTypeId = _this.getType(), 
                _this.setRootData(), _this.renderItems(!0), 0 !== _this.treeList.length || _this.isLoaded || _this.finalize();
            }) : (this.treeList.pop(), isNullOrUndefined(this.fields.dataSource) ? this.rootData = this.treeData = [] : (this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource)), 
            this.setRootData()), this.isNumberTypeId = this.getType(), this.renderItems(!1)), 
            0 !== this.treeList.length || this.isLoaded || this.finalize();
        }, TreeView.prototype.getQuery = function(mapper, value) {
            void 0 === value && (value = null);
            var query, columns = [];
            if (mapper.query) query = mapper.query.clone(); else {
                query = new Query();
                for (var prop = this.getActualProperties(mapper), _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
                    var col = _a[_i];
                    "dataSource" !== col && "tableName" !== col && "child" !== col && mapper[col] && -1 === columns.indexOf(mapper[col]) && columns.push(mapper[col]);
                }
                query.select(columns), prop.hasOwnProperty("tableName") && query.from(mapper.tableName);
            }
            return ListBase.addSorting(this.sortOrder, mapper.text, query), isNullOrUndefined(value) || isNullOrUndefined(mapper.parentID) || query.where(mapper.parentID, "equal", this.isNumberTypeId ? parseFloat(value) : value), 
            query;
        }, TreeView.prototype.getType = function() {
            return !!this.treeData[0] && "number" == typeof getValue(this.fields.id, this.treeData[0]);
        }, TreeView.prototype.setRootData = function() {
            if (this.dataType = this.getDataType(this.treeData, this.fields), 1 === this.dataType) {
                this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
                var rootItems = this.getChildNodes(this.treeData, void 0, !0);
                isNullOrUndefined(rootItems) ? this.rootData = [] : this.rootData = rootItems;
            } else this.rootData = this.treeData;
        }, TreeView.prototype.renderItems = function(isSorted) {
            this.listBaseOption.ariaAttributes.level = 1, this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : this.getSortedData(this.rootData), this.listBaseOption), 
            this.element.appendChild(this.ulElement), this.finalizeNode(this.element);
        }, TreeView.prototype.beforeNodeCreate = function(e) {
            if (this.showCheckBox) {
                var checkboxEle = createCheckBox(this.createElement, !0, {
                    cssClass: this.touchClass
                }), icon = select("div.e-icons", e.item), id = e.item.getAttribute("data-uid");
                e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);
                var checkValue = getValue(e.fields.isChecked, e.curData);
                this.checkedNodes.indexOf(id) > -1 ? (select(".e-frame", checkboxEle).classList.add(CHECK$3), 
                checkboxEle.setAttribute("aria-checked", "true"), this.addCheck(e.item)) : isNullOrUndefined(checkValue) || "true" !== checkValue.toString() ? checkboxEle.setAttribute("aria-checked", "false") : (select(".e-frame", checkboxEle).classList.add(CHECK$3), 
                checkboxEle.setAttribute("aria-checked", "true"), this.addCheck(e.item));
                var frame = select(".e-frame", checkboxEle);
                EventHandler.add(frame, "mousedown", this.frameMouseHandler, this), EventHandler.add(frame, "mouseup", this.frameMouseHandler, this);
            }
            this.fullRowSelect && this.createFullRow(e.item), this.allowMultiSelection && !e.item.classList.contains("e-selected") && e.item.setAttribute("aria-selected", "false");
            var fields = e.fields;
            if (this.addActionClass(e, fields.selected, "e-selected"), this.addActionClass(e, fields.expanded, "e-expanded"), 
            !isNullOrUndefined(this.nodeTemplateFn)) {
                var textEle = e.item.querySelector("." + LISTTEXT);
                textEle.innerHTML = "", append(this.nodeTemplateFn(e.curData), textEle);
            }
            var eventArgs = {
                node: e.item,
                nodeData: e.curData,
                text: e.text
            };
            this.trigger("drawNode", eventArgs);
        }, TreeView.prototype.frameMouseHandler = function(e) {
            rippleMouseHandler(e, select(".e-ripple-container", e.target.parentElement));
        }, TreeView.prototype.addActionClass = function(e, action, cssClass) {
            var actionValue = getValue(action, e.curData);
            isNullOrUndefined(actionValue) || "false" === actionValue.toString() || e.item.classList.add(cssClass);
        }, TreeView.prototype.getDataType = function(ds, mapper) {
            if (this.fields.dataSource instanceof DataManager) {
                for (var i = 0; i < ds.length; i++) if ("string" == typeof mapper.child && isNullOrUndefined(getValue(mapper.child, ds[i]))) return 1;
                return 2;
            }
            i = 0;
            for (var len = ds.length; i < len; i++) {
                if ("string" == typeof mapper.child && !isNullOrUndefined(getValue(mapper.child, ds[i]))) return 2;
                if (!isNullOrUndefined(getValue(mapper.parentID, ds[i])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[i]))) return 1;
            }
            return 1;
        }, TreeView.prototype.getGroupedData = function(dataSource, groupBy) {
            for (var cusQuery = new Query().group(groupBy), ds = ListBase.getDataSource(dataSource, cusQuery), grpItem = [], j = 0; j < ds.length; j++) {
                var itemObj = ds[j].items;
                grpItem.push(itemObj);
            }
            return grpItem;
        }, TreeView.prototype.getSortedData = function(list) {
            return list && "None" !== this.sortOrder && (list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text))), 
            list;
        }, TreeView.prototype.finalizeNode = function(element) {
            for (var iNodes = selectAll(".e-list-img", element), k = 0; k < iNodes.length; k++) iNodes[k].setAttribute("alt", "e-list-img");
            if (this.isLoaded) {
                for (var sNodes = selectAll(".e-selected", element), i = 0; i < sNodes.length; i++) {
                    this.selectNode(sNodes[i], null);
                    break;
                }
                removeClass(sNodes, "e-selected");
            }
            for (var cNodes = selectAll(".e-list-item:not(.e-expanded)", element), j = 0; j < cNodes.length; j++) {
                var icon = select("div.e-icons", cNodes[j]);
                icon && icon.classList.contains(EXPANDABLE) && this.disableExpandAttr(cNodes[j]);
            }
            var eNodes = selectAll(".e-expanded", element);
            if (!this.isInitalExpand) for (i = 0; i < eNodes.length; i++) this.renderChildNodes(eNodes[i]);
            removeClass(eNodes, "e-expanded"), this.updateList(), this.isLoaded && this.updateCheckedProp();
        }, TreeView.prototype.updateCheckedProp = function() {
            var _this = this;
            if (this.showCheckBox) {
                var nodes_1 = [].concat([], this.checkedNodes);
                this.checkedNodes.forEach(function(value, index) {
                    isNullOrUndefined(_this.element.querySelector('[data-uid="' + value + '"]')) && (nodes_1 = nodes_1.filter(function(e) {
                        return e !== value;
                    }));
                }), this.setProperties({
                    checkedNodes: nodes_1
                }, !0);
            }
        }, TreeView.prototype.ensureIndeterminate = function() {
            if (this.autoCheck) for (var liElement = selectAll("li", this.element), i = 0; i < liElement.length; i++) liElement[i].classList.contains(LISTITEM) && (select("." + PARENTITEM, liElement[i]) ? this.ensureParentCheckState(liElement[i]) : this.ensureChildCheckState(liElement[i])); else {
                var indeterminate = selectAll(".e-stop", this.element);
                for (i = 0; i < indeterminate.length; i++) indeterminate[i].classList.remove("e-stop");
            }
        }, TreeView.prototype.ensureParentCheckState = function(element) {
            if (!isNullOrUndefined(element)) {
                if (element.classList.contains(ROOT$11)) return;
                var ulElement = element;
                element.classList.contains(LISTITEM) && (ulElement = select("." + PARENTITEM, element));
                var checkedNodes = selectAll(".e-check", ulElement), nodes = selectAll("." + LISTITEM, ulElement), checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP$1)[0];
                nodes.length === checkedNodes.length ? this.changeState(checkBoxEle, "check", null, !0, !0) : checkedNodes.length > 0 ? this.changeState(checkBoxEle, "indeterminate", null, !0, !0) : 0 === checkedNodes.length && this.changeState(checkBoxEle, "uncheck", null, !0, !0);
                var parentUL = closest(element, "." + PARENTITEM);
                if (!isNullOrUndefined(parentUL)) {
                    var currentParent = closest(parentUL, "." + LISTITEM);
                    this.ensureParentCheckState(currentParent);
                }
            }
        }, TreeView.prototype.ensureChildCheckState = function(element, e) {
            if (!isNullOrUndefined(element)) {
                var childElement = select("." + PARENTITEM, element), checkBoxes = void 0;
                if (!isNullOrUndefined(childElement)) {
                    checkBoxes = selectAll("." + CHECKBOXWRAP$1, childElement);
                    for (var isChecked = element.getElementsByClassName("e-frame")[0].classList.contains(CHECK$3), checkedState = void 0, index = 0; index < checkBoxes.length; index++) {
                        if (isNullOrUndefined(this.currentLoadData) || isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[index]))) {
                            var isNodeChecked = checkBoxes[index].getElementsByClassName("e-frame")[0].classList.contains(CHECK$3);
                            checkedState = !this.isLoaded && isNodeChecked ? "check" : isChecked ? "check" : "uncheck";
                        } else checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? "check" : "uncheck", 
                        -1 !== this.ele && (checkedState = isChecked ? "check" : "uncheck");
                        this.changeState(checkBoxes[index], checkedState, e, !0, !0);
                    }
                }
            }
        }, TreeView.prototype.doCheckBoxAction = function(nodes, doCheck) {
            if (isNullOrUndefined(nodes)) for (var checkBoxes = selectAll("." + CHECKBOXWRAP$1, this.element), index = 0; index < checkBoxes.length; index++) this.changeState(checkBoxes[index], doCheck ? "check" : "uncheck"); else for (var i = 0, len = nodes.length; i < len; i++) {
                var liEle = this.getElement(nodes[i]);
                if (!isNullOrUndefined(liEle)) {
                    var checkBox = select(".e-list-parent ." + CHECKBOXWRAP$1, liEle);
                    this.validateCheckNode(checkBox, !doCheck, liEle, null);
                }
            }
        }, TreeView.prototype.changeState = function(wrapper, state, e, isPrevent, isAdd) {
            var ariaState, eventArgs, currLi = closest(wrapper, "." + LISTITEM);
            if (isPrevent || (this.checkActionNodes = [], eventArgs = this.getCheckEvent(currLi, state, e), 
            this.trigger("nodeChecking", eventArgs), !eventArgs.cancel)) {
                var frameSpan = wrapper.getElementsByClassName("e-frame")[0];
                if ("check" !== state || frameSpan.classList.contains(CHECK$3) ? "uncheck" === state && (frameSpan.classList.contains(CHECK$3) || frameSpan.classList.contains("e-stop")) ? (removeClass([ frameSpan ], [ CHECK$3, "e-stop" ]), 
                this.removeCheck(currLi), ariaState = "false") : "indeterminate" === state && !frameSpan.classList.contains("e-stop") && this.autoCheck && (frameSpan.classList.remove(CHECK$3), 
                frameSpan.classList.add("e-stop"), this.removeCheck(currLi), ariaState = "mixed") : (frameSpan.classList.remove("e-stop"), 
                frameSpan.classList.add(CHECK$3), this.addCheck(currLi), ariaState = "true"), ariaState = "check" === state ? "true" : "uncheck" === state ? "false" : ariaState, 
                isNullOrUndefined(ariaState) || wrapper.setAttribute("aria-checked", ariaState), 
                isAdd) {
                    var data = [].concat([], this.checkActionNodes);
                    eventArgs = this.getCheckEvent(currLi, state, e), isUndefined(isPrevent) && (eventArgs.data = data);
                }
                isPrevent || isNullOrUndefined(ariaState) || (wrapper.setAttribute("aria-checked", ariaState), 
                eventArgs.data[0].checked = ariaState, this.trigger("nodeChecked", eventArgs), this.checkActionNodes = []);
            }
        }, TreeView.prototype.addCheck = function(liEle) {
            var id = liEle.getAttribute("data-uid");
            isNullOrUndefined(id) || -1 !== this.checkedNodes.indexOf(id) || this.checkedNodes.push(id);
        }, TreeView.prototype.removeCheck = function(liEle) {
            var index = this.checkedNodes.indexOf(liEle.getAttribute("data-uid"));
            index > -1 && this.checkedNodes.splice(index, 1);
        }, TreeView.prototype.getCheckEvent = function(currLi, action, e) {
            this.checkActionNodes.push(this.getNodeData(currLi));
            var nodeData = this.checkActionNodes;
            return {
                action: action,
                cancel: !1,
                isInteracted: !isNullOrUndefined(e),
                node: currLi,
                data: nodeData
            };
        }, TreeView.prototype.finalize = function() {
            select("." + PARENTITEM, this.element).setAttribute("role", treeAriaAttr.treeRole), 
            this.setMultiSelect(this.allowMultiSelection);
            var firstNode = select("." + LISTITEM, this.element);
            firstNode && (addClass([ firstNode ], FOCUS$3), this.updateIdAttr(null, firstNode)), 
            this.hasPid = !!this.rootData[0] && this.rootData[0].hasOwnProperty(this.fields.parentID), 
            this.doExpandAction();
        }, TreeView.prototype.doExpandAction = function() {
            var eUids = this.expandedNodes;
            if (this.isInitalExpand && eUids.length > 0) if (this.setProperties({
                expandedNodes: []
            }, !0), this.fields.dataSource instanceof DataManager) this.expandGivenNodes(eUids); else {
                for (var i = 0; i < eUids.length; i++) {
                    var eNode = select('[data-uid="' + eUids[i] + '"]', this.element);
                    if (!isNullOrUndefined(eNode)) {
                        var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
                        isNullOrUndefined(icon) || this.expandAction(eNode, icon, null);
                    }
                }
                this.afterFinalized();
            } else this.afterFinalized();
        }, TreeView.prototype.expandGivenNodes = function(arr) {
            var proxy = this;
            this.expandCallback(arr[this.index], function() {
                proxy.index++, proxy.index < arr.length ? proxy.expandGivenNodes(arr) : proxy.afterFinalized();
            });
        }, TreeView.prototype.expandCallback = function(eUid, callback) {
            var eNode = select('[data-uid="' + eUid + '"]', this.element);
            if (isNullOrUndefined(eNode)) callback(); else {
                var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
                isNullOrUndefined(icon) ? callback() : this.expandAction(eNode, icon, null, !1, callback);
            }
        }, TreeView.prototype.afterFinalized = function() {
            this.doSelectionAction(), this.updateCheckedProp(), this.isLoaded = !0, this.isAnimate = !0, 
            this.isInitalExpand = !1;
            var eventArgs = {
                data: this.treeData
            };
            this.trigger("dataBound", eventArgs);
        }, TreeView.prototype.doSelectionAction = function() {
            var sNodes = selectAll(".e-selected", this.element), sUids = this.selectedNodes;
            if (sUids.length > 0) {
                this.setProperties({
                    selectedNodes: []
                }, !0);
                for (var i = 0; i < sUids.length; i++) {
                    var sNode = select('[data-uid="' + sUids[i] + '"]', this.element);
                    if (this.selectNode(sNode, null, !0), !this.allowMultiSelection) break;
                }
            } else this.selectGivenNodes(sNodes);
            removeClass(sNodes, "e-selected");
        }, TreeView.prototype.selectGivenNodes = function(sNodes) {
            for (var i = 0; i < sNodes.length && (sNodes[i].classList.contains("e-disable") || this.selectNode(sNodes[i], null, !0), 
            this.allowMultiSelection); i++) ;
        }, TreeView.prototype.clickHandler = function(event) {
            var target = event.originalEvent.target;
            if (EventHandler.remove(this.element, "contextmenu", this.preventContextMenu), target && !this.dragStartAction) {
                var classList = target.classList, li = closest(target, "." + LISTITEM);
                if (li) {
                    if (this.removeHover(), this.setFocusElement(li), this.showCheckBox && !li.classList.contains("e-disable")) {
                        var checkWrapper = closest(target, "." + CHECKBOXWRAP$1);
                        if (!isNullOrUndefined(checkWrapper)) {
                            var checkElement = select(".e-frame", checkWrapper);
                            return this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK$3), li, event.originalEvent), 
                            void this.triggerClickEvent(event.originalEvent, li);
                        }
                    }
                    classList.contains(EXPANDABLE) ? this.expandAction(li, target, event) : classList.contains(COLLAPSIBLE) ? this.collapseNode(li, target, event) : classList.contains(PARENTITEM) || classList.contains(LISTITEM) || this.toggleSelect(li, event.originalEvent, !1), 
                    this.triggerClickEvent(event.originalEvent, li);
                }
            }
        }, TreeView.prototype.nodeCheckingEvent = function(wrapper, isCheck, e) {
            var currLi = closest(wrapper, "." + LISTITEM);
            this.checkActionNodes = [];
            var ariaState = isCheck ? "false" : "true";
            isNullOrUndefined(ariaState) || wrapper.setAttribute("aria-checked", ariaState);
            var eventArgs = this.getCheckEvent(currLi, isCheck ? "uncheck" : "check", e);
            return this.trigger("nodeChecking", eventArgs), eventArgs;
        }, TreeView.prototype.nodeCheckedEvent = function(wrapper, isCheck, e) {
            closest(wrapper, "." + LISTITEM);
            var eventArgs = this.getCheckEvent(wrapper, isCheck ? "uncheck" : "check", e);
            eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1), this.trigger("nodeChecked", eventArgs);
        }, TreeView.prototype.triggerClickEvent = function(e, li) {
            var eventArgs = {
                event: e,
                node: li
            };
            this.trigger("nodeClicked", eventArgs);
        }, TreeView.prototype.expandNode = function(currLi, icon) {
            var _this = this;
            if (icon.classList.contains(LOAD) && this.hideSpinner(icon), this.initialRender || icon.classList.add("interaction"), 
            !0 !== this.preventExpand) {
                removeClass([ icon ], EXPANDABLE), addClass([ icon ], COLLAPSIBLE);
                var start_1 = 0, end_1 = 0, proxy_1 = this, ul_1 = select("." + PARENTITEM, currLi), liEle_1 = currLi;
                this.setHeight(liEle_1, ul_1), this.isAnimate ? this.aniObj.animate(ul_1, {
                    name: this.animation.expand.effect,
                    duration: this.animation.expand.duration,
                    timingFunction: this.animation.expand.easing,
                    begin: function(args) {
                        liEle_1.style.overflow = "hidden", start_1 = liEle_1.offsetHeight, end_1 = select("." + TEXTWRAP, currLi).offsetHeight;
                    },
                    progress: function(args) {
                        args.element.style.display = "block", proxy_1.animateHeight(args, start_1, end_1);
                    },
                    end: function(args) {
                        args.element.style.display = "block", _this.expandedNode(liEle_1, ul_1, icon);
                    }
                }) : this.expandedNode(liEle_1, ul_1, icon);
            } else {
                select("." + PARENTITEM, currLi).style.display = "none", this.fields.dataSource instanceof DataManager == !0 && (this.preventExpand = !1);
            }
            this.initialRender && icon.classList.add("interaction");
        }, TreeView.prototype.expandedNode = function(currLi, ul, icon) {
            ul.style.display = "block", currLi.style.display = "block", currLi.style.overflow = "", 
            currLi.style.height = "", removeClass([ icon ], PROCESS), this.addExpand(currLi), 
            this.isLoaded && this.expandArgs && (this.expandArgs = this.getExpandEvent(currLi, null), 
            this.trigger("nodeExpanded", this.expandArgs));
        }, TreeView.prototype.addExpand = function(liEle) {
            liEle.setAttribute("aria-expanded", "true"), removeClass([ liEle ], "e-node-collapsed");
            var id = liEle.getAttribute("data-uid");
            isNullOrUndefined(id) || -1 !== this.expandedNodes.indexOf(id) || this.expandedNodes.push(id);
        }, TreeView.prototype.collapseNode = function(currLi, icon, e) {
            var _this = this;
            if (!icon.classList.contains(PROCESS)) {
                addClass([ icon ], PROCESS);
                var colArgs;
                if (this.isLoaded && (colArgs = this.getExpandEvent(currLi, e), this.trigger("nodeCollapsing", colArgs), 
                colArgs.cancel)) removeClass([ icon ], PROCESS); else {
                    removeClass([ icon ], COLLAPSIBLE), addClass([ icon ], EXPANDABLE);
                    var start = 0, end = 0, proxy = this, ul = select("." + PARENTITEM, currLi), liEle = currLi;
                    this.isAnimate ? this.aniObj.animate(ul, {
                        name: this.animation.collapse.effect,
                        duration: this.animation.collapse.duration,
                        timingFunction: this.animation.collapse.easing,
                        begin: function(args) {
                            liEle.style.overflow = "hidden", start = select("." + TEXTWRAP, currLi).offsetHeight, 
                            end = liEle.offsetHeight;
                        },
                        progress: function(args) {
                            proxy.animateHeight(args, start, end);
                        },
                        end: function(args) {
                            args.element.style.display = "none", _this.collapsedNode(liEle, ul, icon, colArgs);
                        }
                    }) : this.collapsedNode(liEle, ul, icon, colArgs);
                }
            }
        }, TreeView.prototype.collapsedNode = function(liEle, ul, icon, colArgs) {
            ul.style.display = "none", liEle.style.overflow = "", liEle.style.height = "", removeClass([ icon ], PROCESS), 
            this.removeExpand(liEle), this.isLoaded && this.trigger("nodeCollapsed", colArgs);
        }, TreeView.prototype.removeExpand = function(liEle, toRemove) {
            toRemove ? liEle.removeAttribute("aria-expanded") : this.disableExpandAttr(liEle);
            var index = this.expandedNodes.indexOf(liEle.getAttribute("data-uid"));
            index > -1 && this.expandedNodes.splice(index, 1);
        }, TreeView.prototype.disableExpandAttr = function(liEle) {
            liEle.setAttribute("aria-expanded", "false"), addClass([ liEle ], "e-node-collapsed");
        }, TreeView.prototype.setHeight = function(currLi, ul) {
            ul.style.display = "block", ul.style.visibility = "hidden", currLi.style.height = currLi.offsetHeight + "px", 
            ul.style.display = "none", ul.style.visibility = "";
        }, TreeView.prototype.animateHeight = function(args, start, end) {
            var currentHeight = (end - start) * ((args.duration - args.timeStamp) / args.duration) + start;
            args.element.parentElement.style.height = currentHeight + "px";
        }, TreeView.prototype.renderChildNodes = function(parentLi, expandChild, callback) {
            var _this = this, eicon = select("div.e-icons", parentLi);
            if (!isNullOrUndefined(eicon)) {
                this.showSpinner(eicon);
                var childItems;
                if (this.fields.dataSource instanceof DataManager) {
                    var level = this.parents(parentLi, "." + PARENTITEM).length, mapper_1 = this.getChildFields(this.fields, level, 1);
                    if (isNullOrUndefined(mapper_1) || isNullOrUndefined(mapper_1.dataSource)) return detach(eicon), 
                    void this.removeExpand(parentLi, !0);
                    this.treeList.push("false"), this.fields.dataSource instanceof DataManager && this.fields.dataSource.dataSource.offline ? (this.treeList.pop(), 
                    childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid")), 
                    this.loadChild(childItems, mapper_1, eicon, parentLi, expandChild, callback)) : mapper_1.dataSource.executeQuery(this.getQuery(mapper_1, parentLi.getAttribute("data-uid"))).then(function(e) {
                        _this.treeList.pop(), childItems = e.result, _this.loadChild(childItems, mapper_1, eicon, parentLi, expandChild, callback);
                    });
                } else {
                    if (childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid")), 
                    this.currentLoadData = childItems, isNullOrUndefined(childItems) || 0 === childItems.length) return detach(eicon), 
                    void this.removeExpand(parentLi, !0);
                    this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1, 
                    parentLi.appendChild(ListBase.createList(this.createElement, this.getSortedData(childItems), this.listBaseOption)), 
                    this.expandNode(parentLi, eicon), this.ensureCheckNode(parentLi), this.finalizeNode(parentLi), 
                    this.renderSubChild(parentLi, expandChild);
                }
            }
        }, TreeView.prototype.loadChild = function(childItems, mapper, eicon, parentLi, expandChild, callback) {
            if (this.currentLoadData = childItems, isNullOrUndefined(childItems) || 0 === childItems.length) detach(eicon), 
            this.removeExpand(parentLi, !0); else {
                if (this.updateListProp(mapper), this.fields.dataSource instanceof DataManager && !this.fields.dataSource.dataSource.offline) {
                    var id = parentLi.getAttribute("data-uid");
                    setValue("child", childItems, this.getNodeObject(id));
                }
                this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1, 
                parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption)), 
                this.expandNode(parentLi, eicon), this.ensureCheckNode(parentLi), this.finalizeNode(parentLi), 
                this.renderSubChild(parentLi, expandChild);
            }
            callback && callback(), 0 !== this.treeList.length || this.isLoaded || this.finalize();
        }, TreeView.prototype.ensureCheckNode = function(element) {
            this.showCheckBox && (this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute("data-uid")) : null, 
            this.autoCheck && (this.ensureChildCheckState(element), this.ensureParentCheckState(element))), 
            this.currentLoadData = null;
        }, TreeView.prototype.getFields = function(mapper, nodeLevel, dataLevel) {
            return nodeLevel === dataLevel ? mapper : this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
        }, TreeView.prototype.getChildFields = function(mapper, nodeLevel, dataLevel) {
            return nodeLevel === dataLevel ? this.getChildMapper(mapper) : this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
        }, TreeView.prototype.getChildMapper = function(mapper) {
            return "string" == typeof mapper.child || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
        }, TreeView.prototype.getChildNodes = function(obj, parentId, isRoot) {
            void 0 === isRoot && (isRoot = !1);
            var childNodes;
            if (isNullOrUndefined(obj)) return childNodes;
            if (1 === this.dataType) return this.getChildGroup(this.groupedData, parentId, isRoot);
            if ("string" == typeof this.fields.child) for (var i = 0, objlen = obj.length; i < objlen; i++) {
                var dataId = getValue(this.fields.id, obj[i]);
                if (dataId && dataId.toString() === parentId) return getValue(this.fields.child, obj[i]);
                if (!isNullOrUndefined(getValue(this.fields.child, obj[i])) && void 0 !== (childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId))) break;
            }
            return childNodes;
        }, TreeView.prototype.getChildGroup = function(data, parentId, isRoot) {
            if (!isNullOrUndefined(data)) for (var i = 0, objlen = data.length; i < objlen; i++) {
                if (isNullOrUndefined(data[i][0]) || isNullOrUndefined(getValue(this.fields.parentID, data[i][0]))) return isRoot ? data[i] : [];
                if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) return data[i];
            }
        }, TreeView.prototype.renderSubChild = function(element, expandChild) {
            if (expandChild) for (var cIcons = selectAll("." + EXPANDABLE, element), i = 0, len = cIcons.length; i < len; i++) {
                var curLi = closest(cIcons[i], "." + LISTITEM);
                this.expandArgs = this.getExpandEvent(curLi, null), this.trigger("nodeExpanding", this.expandArgs), 
                this.renderChildNodes(curLi, expandChild);
            }
        }, TreeView.prototype.toggleSelect = function(li, e, multiSelect) {
            li.classList.contains("e-disable") || (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li) ? this.unselectNode(li, e) : this.selectNode(li, e, multiSelect));
        }, TreeView.prototype.isActive = function(li) {
            return !!li.classList.contains(ACTIVE$4);
        }, TreeView.prototype.selectNode = function(li, e, multiSelect) {
            if (isNullOrUndefined(li) || !this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e)) this.setFocusElement(li); else {
                var eventArgs;
                if (!this.isLoaded || (eventArgs = this.getSelectEvent(li, "select", e), this.trigger("nodeSelecting", eventArgs), 
                !eventArgs.cancel)) {
                    if (this.allowMultiSelection && (multiSelect || e && (!e || e.ctrlKey)) || this.removeSelectAll(), 
                    this.allowMultiSelection && e && e.shiftKey) {
                        this.startNode || (this.startNode = li);
                        var startIndex = this.liList.indexOf(this.startNode), endIndex = this.liList.indexOf(li);
                        if (startIndex > endIndex) {
                            var temp = startIndex;
                            startIndex = endIndex, endIndex = temp;
                        }
                        for (var i = startIndex; i <= endIndex; i++) {
                            var currNode = this.liList[i];
                            isVisible(currNode) && !currNode.classList.contains("e-disable") && this.addSelect(currNode);
                        }
                    } else this.startNode = li, this.addSelect(li);
                    this.setFocusElement(li), this.isLoaded && (eventArgs.nodeData = this.getNodeData(li), 
                    this.trigger("nodeSelected", eventArgs));
                }
            }
        }, TreeView.prototype.unselectNode = function(li, e) {
            var eventArgs;
            this.isLoaded && (eventArgs = this.getSelectEvent(li, "un-select", e), this.trigger("nodeSelecting", eventArgs), 
            eventArgs.cancel) || (this.removeSelect(li), this.setFocusElement(li), this.isLoaded && (eventArgs.nodeData = this.getNodeData(li), 
            this.trigger("nodeSelected", eventArgs)));
        }, TreeView.prototype.setFocusElement = function(li) {
            if (!isNullOrUndefined(li)) {
                var focusedNode = this.getFocusedNode();
                focusedNode && removeClass([ focusedNode ], FOCUS$3), addClass([ li ], FOCUS$3), 
                this.updateIdAttr(focusedNode, li);
            }
        }, TreeView.prototype.addSelect = function(liEle) {
            liEle.setAttribute("aria-selected", "true"), addClass([ liEle ], ACTIVE$4);
            var id = liEle.getAttribute("data-uid");
            isNullOrUndefined(id) || -1 !== this.selectedNodes.indexOf(id) || this.selectedNodes.push(id);
        }, TreeView.prototype.removeSelect = function(liEle) {
            this.allowMultiSelection ? liEle.setAttribute("aria-selected", "false") : liEle.removeAttribute("aria-selected"), 
            removeClass([ liEle ], ACTIVE$4);
            var index = this.selectedNodes.indexOf(liEle.getAttribute("data-uid"));
            index > -1 && this.selectedNodes.splice(index, 1);
        }, TreeView.prototype.removeSelectAll = function() {
            for (var selectedLI = this.element.querySelectorAll(".e-active"), _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
                var ele = selectedLI_1[_i];
                this.allowMultiSelection ? ele.setAttribute("aria-selected", "false") : ele.removeAttribute("aria-selected");
            }
            removeClass(selectedLI, ACTIVE$4), this.setProperties({
                selectedNodes: []
            }, !0);
        }, TreeView.prototype.getSelectEvent = function(currLi, action, e) {
            var nodeData = this.getNodeData(currLi);
            return {
                action: action,
                cancel: !1,
                isInteracted: !isNullOrUndefined(e),
                node: currLi,
                nodeData: nodeData
            };
        }, TreeView.prototype.setExpandOnType = function() {
            this.expandOnType = "Auto" === this.expandOn ? Browser.isDevice ? "Click" : "DblClick" : this.expandOn;
        }, TreeView.prototype.expandHandler = function(e) {
            var target = e.originalEvent.target;
            !target || target.classList.contains("e-input") || target.classList.contains(ROOT$11) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON$4) || this.showCheckBox && closest(target, "." + CHECKBOXWRAP$1) || this.expandCollapseAction(closest(target, "." + LISTITEM), e);
        }, TreeView.prototype.expandCollapseAction = function(currLi, e) {
            var icon = select("div.e-icons", currLi);
            if (icon && !icon.classList.contains(PROCESS)) {
                icon.classList.contains(EXPANDABLE) ? this.expandAction(currLi, icon, e) : this.collapseNode(currLi, icon, e);
            }
        }, TreeView.prototype.expandAction = function(currLi, icon, e, expandChild, callback) {
            if (!icon.classList.contains(PROCESS)) if (addClass([ icon ], PROCESS), this.isLoaded && (this.expandArgs = this.getExpandEvent(currLi, e), 
            this.trigger("nodeExpanding", this.expandArgs), this.expandArgs.cancel)) removeClass([ icon ], PROCESS); else {
                var ul = select("." + PARENTITEM, currLi);
                ul && "UL" === ul.nodeName ? this.expandNode(currLi, icon) : this.renderChildNodes(currLi, expandChild, callback);
            }
        }, TreeView.prototype.keyActionHandler = function(e) {
            var target = e.target, focusedNode = this.getFocusedNode();
            if (target && target.classList.contains("e-input")) {
                var inpEle = target;
                "enter" === e.action ? (inpEle.blur(), this.element.focus(), addClass([ focusedNode ], HOVER$3)) : "escape" === e.action && (inpEle.value = this.oldText, 
                inpEle.blur(), this.element.focus(), addClass([ focusedNode ], HOVER$3));
            } else {
                e.preventDefault();
                var eventArgs = {
                    cancel: !1,
                    event: e,
                    node: focusedNode
                };
                if (this.trigger("keyPress", eventArgs), !eventArgs.cancel) switch (e.action) {
                  case "space":
                    this.showCheckBox && this.checkNode(e);
                    break;

                  case "moveRight":
                    this.openNode(!this.enableRtl, e);
                    break;

                  case "moveLeft":
                    this.openNode(!!this.enableRtl, e);
                    break;

                  case "shiftDown":
                    this.shiftKeySelect(!0, e);
                    break;

                  case "moveDown":
                  case "ctrlDown":
                  case "csDown":
                    this.navigateNode(!0);
                    break;

                  case "shiftUp":
                    this.shiftKeySelect(!1, e);
                    break;

                  case "moveUp":
                  case "ctrlUp":
                  case "csUp":
                    this.navigateNode(!1);
                    break;

                  case "home":
                  case "shiftHome":
                  case "ctrlHome":
                  case "csHome":
                    this.navigateRootNode(!0);
                    break;

                  case "end":
                  case "shiftEnd":
                  case "ctrlEnd":
                  case "csEnd":
                    this.navigateRootNode(!1);
                    break;

                  case "enter":
                  case "ctrlEnter":
                  case "shiftEnter":
                  case "csEnter":
                    this.toggleSelect(focusedNode, e);
                    break;

                  case "f2":
                    this.allowEditing && !focusedNode.classList.contains("e-disable") && this.createTextbox(focusedNode, e);
                    break;

                  case "ctrlA":
                    if (this.allowMultiSelection) {
                        var sNodes = selectAll(".e-list-item:not(.e-active)", this.element);
                        this.selectGivenNodes(sNodes);
                    }
                }
            }
        }, TreeView.prototype.navigateToFocus = function(isUp) {
            var focusNode = this.getFocusedNode().querySelector("." + TEXTWRAP), pos = focusNode.getBoundingClientRect(), parent = this.getScrollParent(this.element);
            if (!isNullOrUndefined(parent)) {
                var parentPos = parent.getBoundingClientRect();
                pos.bottom > parentPos.bottom ? parent.scrollTop += pos.bottom - parentPos.bottom : pos.top < parentPos.top && (parent.scrollTop -= parentPos.top - pos.top);
            }
            this.isVisibleInViewport(focusNode) || focusNode.scrollIntoView(isUp);
        }, TreeView.prototype.isVisibleInViewport = function(txtWrap) {
            var pos = txtWrap.getBoundingClientRect();
            return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
        }, TreeView.prototype.getScrollParent = function(node) {
            return isNullOrUndefined(node) ? null : node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
        }, TreeView.prototype.shiftKeySelect = function(isTowards, e) {
            if (this.allowMultiSelection) {
                var focusedNode = this.getFocusedNode(), nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
                this.removeHover(), this.setFocusElement(nextNode), this.toggleSelect(nextNode, e, !1), 
                this.navigateToFocus(!isTowards);
            } else this.navigateNode(isTowards);
        }, TreeView.prototype.checkNode = function(e) {
            var focusedNode = this.getFocusedNode(), checkWrap = select("." + CHECKBOXWRAP$1, focusedNode), isChecked = select(" .e-frame", checkWrap).classList.contains(CHECK$3);
            focusedNode.classList.contains("e-disable") || this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
        }, TreeView.prototype.validateCheckNode = function(checkWrap, isCheck, li, e) {
            if (!this.nodeCheckingEvent(checkWrap, isCheck, e).cancel) {
                if (-1 === this.checkedElement.indexOf(li.getAttribute("data-uid"))) {
                    this.checkedElement.push(li.getAttribute("data-uid"));
                    var child = this.getChildNodes(this.treeData, li.getAttribute("data-uid"));
                    null !== child ? this.allCheckNode(child, this.checkedElement, null, null, !1) : child = null;
                }
                this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, !0), this.autoCheck && (this.ensureChildCheckState(li), 
                this.ensureParentCheckState(closest(closest(li, "." + PARENTITEM), "." + LISTITEM))), 
                this.nodeCheckedEvent(checkWrap, isCheck, e);
            }
        }, TreeView.prototype.allCheckNode = function(child, newCheck, checked, childCheck, validateCheck) {
            if (child) for (var length_1 = 0; length_1 < child.length; length_1++) {
                var childId = getValue(this.fields.id, child[length_1]), check = this.element.querySelector('[data-uid="' + childId + '"]');
                if (!1 !== validateCheck && -1 === this.checkedElement.indexOf(childId.toString()) && (null === check && !isNullOrUndefined(child[length_1][this.fields.isChecked]) && -1 === newCheck.indexOf(childId.toString()) || 0 === childCheck || 2 === checked) && (!1 !== child[length_1][this.fields.isChecked] || 2 === checked ? newCheck.push(childId.toString()) : childCheck = null, 
                childCheck = !1 !== child[length_1][this.fields.isChecked] || 2 === checked ? 0 : null), 
                -1 === newCheck.indexOf(childId.toString()) && isNullOrUndefined(checked) && newCheck.push(childId.toString()), 
                !0 === getValue(this.fields.hasChildren, child[length_1]) || getValue(this.fields.child.toString(), child[length_1])) {
                    var id = getValue(this.fields.id, child[length_1]), childId_1 = this.getChildNodes(this.treeData, id.toString());
                    childId_1 && (isNullOrUndefined(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck), 
                    childCheck = null);
                }
                childCheck = null;
            }
        }, TreeView.prototype.openNode = function(toBeOpened, e) {
            var focusedNode = this.getFocusedNode(), icon = select("div.e-icons", focusedNode);
            if (toBeOpened) {
                if (!icon) return;
                icon.classList.contains(EXPANDABLE) ? this.expandAction(focusedNode, icon, e) : this.focusNextNode(focusedNode, !0);
            } else if (icon && icon.classList.contains(COLLAPSIBLE)) this.collapseNode(focusedNode, icon, e); else {
                var parentLi = closest(closest(focusedNode, "." + PARENTITEM), "." + LISTITEM);
                if (!parentLi) return;
                parentLi.classList.contains("e-disable") || (this.setFocus(focusedNode, parentLi), 
                this.navigateToFocus(!0));
            }
        }, TreeView.prototype.navigateNode = function(isTowards) {
            var focusedNode = this.getFocusedNode();
            this.focusNextNode(focusedNode, isTowards);
        }, TreeView.prototype.navigateRootNode = function(isBackwards) {
            var focusedNode = this.getFocusedNode(), rootNode = isBackwards ? this.getRootNode() : this.getEndNode();
            rootNode.classList.contains("e-disable") || (this.setFocus(focusedNode, rootNode), 
            this.navigateToFocus(isBackwards));
        }, TreeView.prototype.getFocusedNode = function() {
            var selectedItem, fNode = select(".e-list-item." + FOCUS$3, this.element);
            return isNullOrUndefined(fNode) && (selectedItem = select("." + LISTITEM, this.element)), 
            isNullOrUndefined(fNode) ? isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
        }, TreeView.prototype.focusNextNode = function(li, isTowards) {
            var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
            if (this.setFocus(li, nextNode), this.navigateToFocus(!isTowards), nextNode.classList.contains("e-disable")) {
                var lastChild = nextNode.lastChild;
                null == nextNode.previousSibling && nextNode.classList.contains("e-level-1") ? this.focusNextNode(nextNode, !0) : null == nextNode.nextSibling && nextNode.classList.contains("e-node-collapsed") ? this.focusNextNode(nextNode, !1) : null == nextNode.nextSibling && lastChild.classList.contains("e-text-content") ? this.focusNextNode(nextNode, !1) : this.focusNextNode(nextNode, isTowards);
            }
        }, TreeView.prototype.getNextNode = function(li) {
            var nextNode, index = this.liList.indexOf(li);
            do {
                if (index++, nextNode = this.liList[index], isNullOrUndefined(nextNode)) return li;
            } while (!isVisible(nextNode));
            return nextNode;
        }, TreeView.prototype.getPrevNode = function(li) {
            var prevNode, index = this.liList.indexOf(li);
            do {
                if (index--, prevNode = this.liList[index], isNullOrUndefined(prevNode)) return li;
            } while (!isVisible(prevNode));
            return prevNode;
        }, TreeView.prototype.getRootNode = function() {
            var rootNode, index = 0;
            do {
                rootNode = this.liList[index], index++;
            } while (!isVisible(rootNode));
            return rootNode;
        }, TreeView.prototype.getEndNode = function() {
            var endNode, index = this.liList.length - 1;
            do {
                endNode = this.liList[index], index--;
            } while (!isVisible(endNode));
            return endNode;
        }, TreeView.prototype.setFocus = function(preNode, nextNode) {
            removeClass([ preNode ], [ HOVER$3, FOCUS$3 ]), nextNode.classList.contains("e-disable") || (addClass([ nextNode ], [ HOVER$3, FOCUS$3 ]), 
            this.updateIdAttr(preNode, nextNode));
        }, TreeView.prototype.updateIdAttr = function(preNode, nextNode) {
            this.element.removeAttribute("aria-activedescendant"), preNode && preNode.removeAttribute("id"), 
            nextNode.setAttribute("id", this.element.id + "_active"), this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
        }, TreeView.prototype.focusIn = function() {
            this.mouseDownStatus || addClass([ this.getFocusedNode() ], HOVER$3), this.mouseDownStatus = !1;
        }, TreeView.prototype.focusOut = function() {
            removeClass([ this.getFocusedNode() ], HOVER$3);
        }, TreeView.prototype.onMouseOver = function(e) {
            var target = e.target, classList = target.classList, currentLi = closest(target, "." + LISTITEM);
            !currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM) ? this.removeHover() : currentLi && !currentLi.classList.contains("e-disable") && this.setHover(currentLi);
        }, TreeView.prototype.setHover = function(li) {
            li.classList.contains(HOVER$3) || (this.removeHover(), addClass([ li ], HOVER$3));
        }, TreeView.prototype.onMouseLeave = function(e) {
            this.removeHover();
        }, TreeView.prototype.removeHover = function() {
            var hoveredNode = selectAll(".e-hover", this.element);
            hoveredNode && hoveredNode.length && removeClass(hoveredNode, HOVER$3);
        }, TreeView.prototype.getNodeData = function(currLi, fromDS) {
            if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) && closest(currLi, ".e-control").classList.contains(ROOT$11)) {
                var id = currLi.getAttribute("data-uid"), text = this.getText(currLi, fromDS), pNode = closest(currLi.parentNode, "." + LISTITEM), pid = pNode ? pNode.getAttribute("data-uid") : null, selected = currLi.classList.contains(ACTIVE$4), expanded = "true" === currLi.getAttribute("aria-expanded"), checked = null;
                return this.showCheckBox && (checked = select("." + CHECKBOXWRAP$1, currLi).getAttribute("aria-checked")), 
                {
                    id: id,
                    text: text,
                    parentID: pid,
                    selected: selected,
                    expanded: expanded,
                    isChecked: checked
                };
            }
            return {
                id: "",
                text: "",
                parentID: "",
                selected: "",
                expanded: "",
                isChecked: ""
            };
        }, TreeView.prototype.getText = function(currLi, fromDS) {
            if (fromDS) {
                var nodeData = this.getNodeObject(currLi.getAttribute("data-uid")), level = parseFloat(currLi.getAttribute("aria-level"));
                return getValue(this.getFields(this.fields, level, 1).text, nodeData);
            }
            return select("." + LISTTEXT, currLi).textContent;
        }, TreeView.prototype.getExpandEvent = function(currLi, e) {
            var nodeData = this.getNodeData(currLi);
            return {
                cancel: !1,
                isInteracted: !isNullOrUndefined(e),
                node: currLi,
                nodeData: nodeData,
                event: e
            };
        }, TreeView.prototype.reRenderNodes = function() {
            this.element.innerHTML = "", this.setTouchClass(), this.setProperties({
                selectedNodes: [],
                checkedNodes: [],
                expandedNodes: []
            }, !0), this.isLoaded = !1, this.setDataBinding();
        }, TreeView.prototype.setCssClass = function(oldClass, newClass) {
            isNullOrUndefined(oldClass) || "" === oldClass || removeClass([ this.element ], oldClass.split(" ")), 
            isNullOrUndefined(newClass) || "" === newClass || addClass([ this.element ], newClass.split(" "));
        }, TreeView.prototype.editingHandler = function(e) {
            var target = e.target;
            if (!(!target || target.classList.contains(ROOT$11) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON$4) || target.classList.contains("e-input") || target.classList.contains("e-input-group"))) {
                var liEle = closest(target, "." + LISTITEM);
                this.createTextbox(liEle, e);
            }
        }, TreeView.prototype.createTextbox = function(liEle, e) {
            var oldInpEle = select(".e-tree-input", this.element);
            oldInpEle && oldInpEle.blur();
            var textEle = select("." + LISTTEXT, liEle);
            this.updateOldText(liEle);
            var innerEle = this.createElement("input", {
                className: "e-tree-input",
                attrs: {
                    value: this.oldText
                }
            }), eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
            if (this.trigger("nodeEditing", eventArgs), !eventArgs.cancel) {
                var style = "width:" + (textEle.offsetWidth + 5) + "px";
                addClass([ liEle ], "e-editing"), textEle.innerHTML = eventArgs.innerHtml;
                var inpEle = select(".e-tree-input", textEle);
                this.inputObj = Input.createInput({
                    element: inpEle,
                    properties: {
                        enableRtl: this.enableRtl
                    }
                }, this.createElement), this.inputObj.container.setAttribute("style", style), inpEle.focus();
                var inputEle = inpEle;
                inputEle.setSelectionRange(0, inputEle.value.length), this.wireInputEvents(inpEle);
            }
        }, TreeView.prototype.updateOldText = function(liEle) {
            var id = liEle.getAttribute("data-uid");
            this.editData = this.getNodeObject(id);
            var level = parseFloat(liEle.getAttribute("aria-level"));
            this.editFields = this.getFields(this.fields, level, 1), this.oldText = getValue(this.editFields.text, this.editData);
        }, TreeView.prototype.inputFocusOut = function(e) {
            if (select(".e-tree-input", this.element)) {
                var target = e.target, newText = target.value, txtEle = closest(target, "." + LISTTEXT), liEle = closest(target, "." + LISTITEM);
                detach(this.inputObj.container), this.appendNewText(liEle, txtEle, newText, !0);
            }
        }, TreeView.prototype.appendNewText = function(liEle, txtEle, newText, isInput) {
            var eventArgs = this.getEditEvent(liEle, newText, null);
            this.trigger("nodeEdited", eventArgs), newText = eventArgs.cancel ? eventArgs.oldText : eventArgs.newText;
            var newData = setValue(this.editFields.text, newText, this.editData);
            isNullOrUndefined(this.nodeTemplateFn) ? txtEle.innerHTML = newText : (txtEle.innerHTML = "", 
            append(this.nodeTemplateFn(newData), txtEle)), isInput && (removeClass([ liEle ], "e-editing"), 
            txtEle.focus()), eventArgs.oldText !== newText && this.triggerEvent();
        }, TreeView.prototype.getElement = function(ele) {
            return isNullOrUndefined(ele) ? null : "string" == typeof ele ? this.element.querySelector('[data-uid="' + ele + '"]') : "object" == typeof ele ? ele : null;
        }, TreeView.prototype.getId = function(ele) {
            return isNullOrUndefined(ele) ? null : "string" == typeof ele ? ele : "object" == typeof ele ? ele.getAttribute("data-uid") : null;
        }, TreeView.prototype.getEditEvent = function(liEle, newText, inpEle) {
            return {
                cancel: !1,
                newText: newText,
                node: liEle,
                nodeData: this.getNodeData(liEle),
                oldText: this.oldText,
                innerHtml: inpEle
            };
        }, TreeView.prototype.getNodeObject = function(id) {
            if (!isNullOrUndefined(id)) {
                if (1 !== this.dataType) return this.getChildNodeObject(this.treeData, this.fields, id);
                for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
                    var dataId = getValue(this.fields.id, this.treeData[i]);
                    if (!isNullOrUndefined(this.treeData[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) return this.treeData[i];
                }
            }
        }, TreeView.prototype.getChildNodeObject = function(obj, mapper, id) {
            var newList;
            if (isNullOrUndefined(obj)) return newList;
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
                var dataId = getValue(mapper.id, obj[i]);
                if (obj[i] && dataId && dataId.toString() === id) return obj[i];
                if ("string" != typeof mapper.child || isNullOrUndefined(getValue(mapper.child, obj[i]))) {
                    if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
                        if (void 0 !== (newList = this.getChildNodeObject(getValue("child", obj[i]), this.getChildMapper(mapper), id))) break;
                    }
                } else {
                    var childData = getValue(mapper.child, obj[i]);
                    if (void 0 !== (newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id))) break;
                }
            }
            return newList;
        }, TreeView.prototype.setDragAndDrop = function(toBind) {
            toBind ? this.initializeDrag() : this.destroyDrag();
        }, TreeView.prototype.initializeDrag = function() {
            var virtualEle, _this = this, proxy = this;
            this.dragObj = new Draggable(this.element, {
                enableTailMode: !0,
                enableAutoScroll: !0,
                dragTarget: "." + TEXTWRAP,
                helper: function(e) {
                    _this.dragTarget = e.sender.target;
                    var dragRoot = closest(_this.dragTarget, "." + ROOT$11), dragWrap = closest(_this.dragTarget, "." + TEXTWRAP);
                    if (_this.dragLi = closest(_this.dragTarget, "." + LISTITEM), _this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains("e-fullrow") && (dragWrap = _this.dragTarget.nextElementSibling), 
                    !_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT$11) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains("e-disable")) return !1;
                    var cloneEle = dragWrap.cloneNode(!0);
                    if (isNullOrUndefined(select("div.e-icons", cloneEle))) {
                        var icon = proxy.createElement("div", {
                            className: "e-icons " + EXPANDABLE
                        });
                        cloneEle.insertBefore(icon, cloneEle.children[0]);
                    }
                    var cssClass = "e-drag-item e-treeview " + _this.cssClass + " " + (_this.enableRtl ? "e-rtl" : "");
                    (virtualEle = proxy.createElement("div", {
                        className: cssClass
                    })).appendChild(cloneEle);
                    var nLen = _this.selectedNodes.length;
                    if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE$4)) {
                        var cNode = proxy.createElement("span", {
                            className: "e-drop-count",
                            innerHTML: "" + nLen
                        });
                        virtualEle.appendChild(cNode);
                    }
                    return document.body.appendChild(virtualEle), document.body.style.cursor = "", _this.dragData = _this.getNodeData(_this.dragLi), 
                    virtualEle;
                },
                dragStart: function(e) {
                    addClass([ _this.element ], "e-dragging");
                    var level, listItem = closest(e.target, ".e-list-item");
                    listItem && (level = parseInt(listItem.getAttribute("aria-level"), 10));
                    var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);
                    eventArgs.draggedNode.classList.contains("e-editing") ? eventArgs.cancel = !0 : _this.trigger("nodeDragStart", eventArgs), 
                    eventArgs.cancel ? (detach(virtualEle), removeClass([ _this.element ], "e-dragging"), 
                    _this.dragStartAction = !1) : _this.dragStartAction = !0;
                },
                drag: function(e) {
                    _this.dragObj.setProperties({
                        cursorAt: {
                            top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20
                        }
                    }), _this.dragAction(e, virtualEle);
                },
                dragStop: function(e) {
                    removeClass([ _this.element ], "e-dragging"), _this.removeVirtualEle();
                    var dropTarget = e.target, dropRoot = closest(dropTarget, ".e-droppable");
                    dropTarget && dropRoot || (detach(e.helper), document.body.style.cursor = "");
                    var level, listItem = closest(dropTarget, ".e-list-item");
                    listItem && (level = parseInt(listItem.getAttribute("aria-level"), 10));
                    var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);
                    eventArgs.preventTargetExpand = !1, _this.trigger("nodeDragStop", eventArgs), _this.dragParent = eventArgs.draggedParentNode, 
                    _this.preventExpand = eventArgs.preventTargetExpand, eventArgs.cancel && (e.helper.parentNode && detach(e.helper), 
                    document.body.style.cursor = ""), _this.dragStartAction = !1;
                }
            }), this.dropObj = new Droppable(this.element, {
                out: function(e) {
                    isNullOrUndefined(e) || e.target.classList.contains(SIBLING) || (document.body.style.cursor = "not-allowed");
                },
                over: function(e) {
                    document.body.style.cursor = "";
                },
                drop: function(e) {
                    _this.dropAction(e);
                }
            });
        }, TreeView.prototype.dragAction = function(e, virtualEle) {
            var dropRoot = closest(e.target, ".e-droppable"), dropWrap = closest(e.target, "." + TEXTWRAP), icon = select("div.e-icons", virtualEle);
            removeClass([ icon ], [ "e-drop-in", DROPNEXT, "e-drop-out", "e-no-drop" ]), this.removeVirtualEle(), 
            document.body.style.cursor = "";
            var classList = e.target.classList;
            if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList) && classList.contains("e-fullrow") && (dropWrap = e.target.nextElementSibling), 
            dropRoot) {
                var dropLi = closest(e.target, "." + LISTITEM);
                if (!dropRoot.classList.contains(ROOT$11) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) if (dropLi && e && e.event.offsetY < 7) {
                    addClass([ icon ], DROPNEXT);
                    var virEle = this.createElement("div", {
                        className: SIBLING
                    }), index = this.fullRowSelect ? 1 : 0;
                    dropLi.insertBefore(virEle, dropLi.children[index]);
                } else if (dropLi && e && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10) {
                    addClass([ icon ], DROPNEXT);
                    virEle = this.createElement("div", {
                        className: SIBLING
                    }), index = this.fullRowSelect ? 2 : 1;
                    dropLi.insertBefore(virEle, dropLi.children[index]);
                } else addClass([ icon ], "e-drop-in"); else "LI" !== e.target.nodeName || dropLi.isSameNode(this.dragLi) || this.isDescendant(this.dragLi, dropLi) ? e.target.classList.contains(SIBLING) ? addClass([ icon ], DROPNEXT) : addClass([ icon ], "e-drop-out") : (addClass([ icon ], DROPNEXT), 
                this.renderVirtualEle(e));
            } else addClass([ icon ], "e-no-drop"), document.body.style.cursor = "not-allowed";
            var level, listItem = closest(e.target, ".e-list-item");
            listItem && (level = parseInt(listItem.getAttribute("aria-level"), 10));
            var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);
            eventArgs.dropIndicator && removeClass([ icon ], eventArgs.dropIndicator), this.trigger("nodeDragging", eventArgs), 
            eventArgs.dropIndicator && addClass([ icon ], eventArgs.dropIndicator);
        }, TreeView.prototype.dropAction = function(e) {
            for (var dragObj, level, offsetY = e.event.offsetY, dropTarget = e.target, drop = !1, dragInstance = e.dragData.draggable, i = 0; i < dragInstance.ej2_instances.length; i++) if (dragInstance.ej2_instances[i] instanceof TreeView_1) {
                dragObj = dragInstance.ej2_instances[i];
                break;
            }
            if (dragObj && dragObj.dragTarget) {
                var dragLi = closest(dragObj.dragTarget, "." + LISTITEM), dropLi = closest(dropTarget, "." + LISTITEM);
                if (null == dropLi && dropTarget.classList.contains(ROOT$11) && (dropLi = dropTarget.firstElementChild), 
                detach(e.droppedElement), document.body.style.cursor = "", !dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) return void (this.fields.dataSource instanceof DataManager == !1 && (this.preventExpand = !1));
                if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE$4)) {
                    var sNodes = selectAll(".e-active", dragObj.element);
                    for (i = 0; i < sNodes.length; i++) dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi) || this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);
                } else this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
                level = parseInt(dragLi.getAttribute("aria-level"), 10), drop = !0;
            }
            this.fields.dataSource instanceof DataManager == !1 && (this.preventExpand = !1), 
            this.trigger("nodeDropped", this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop)), 
            this.triggerEvent();
        }, TreeView.prototype.appendNode = function(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
            dragLi.classList.contains("e-disable") || dropLi.classList.contains("e-disable") || ("LI" === dropTarget.nodeName ? this.dropAsSiblingNode(dragLi, dropLi, e, dragObj) : dropTarget.firstElementChild && dropTarget.classList.contains(ROOT$11) ? "UL" === dropTarget.firstElementChild.nodeName && this.dropAsSiblingNode(dragLi, dropLi, e, dragObj) : this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY));
        }, TreeView.prototype.dropAsSiblingNode = function(dragLi, dropLi, e, dragObj) {
            var pre, dropUl = closest(dropLi, "." + PARENTITEM), dragParentUl = closest(dragLi, "." + PARENTITEM), dragParentLi = closest(dragParentUl, "." + LISTITEM);
            e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2 ? pre = !1 : e.event.offsetY < 2 && (pre = !0), 
            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling), this.moveData(dragLi, dropLi, dropUl, pre, dragObj), 
            this.updateElement(dragParentUl, dragParentLi), this.updateAriaLevel(dragLi), dragObj.element.id === this.element.id ? this.updateList() : (dragObj.updateInstance(), 
            this.updateInstance());
        }, TreeView.prototype.dropAsChildNode = function(dragLi, dropLi, dragObj, index, e, pos) {
            var dragParentUl = closest(dragLi, "." + PARENTITEM), dragParentLi = closest(dragParentUl, "." + LISTITEM), dropParentUl = closest(dropLi, "." + PARENTITEM);
            if (e && pos < 7) dropParentUl.insertBefore(dragLi, dropLi), this.moveData(dragLi, dropLi, dropParentUl, !0, dragObj); else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10) dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling), 
            this.moveData(dragLi, dropLi, dropParentUl, !1, dragObj); else {
                var dropUl = this.expandParent(dropLi), childLi = dropUl.childNodes[index];
                dropUl.insertBefore(dragLi, childLi), this.moveData(dragLi, childLi, dropUl, !0, dragObj);
            }
            this.updateElement(dragParentUl, dragParentLi), this.updateAriaLevel(dragLi), dragObj.element.id === this.element.id ? this.updateList() : (dragObj.updateInstance(), 
            this.updateInstance());
        }, TreeView.prototype.moveData = function(dragLi, dropLi, dropUl, pre, dragObj) {
            var dropParentLi = closest(dropUl, "." + LISTITEM), id = this.getId(dragLi), removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, !0), refId = this.getId(dropLi), index = this.getDataPos(this.treeData, this.fields, refId), parentId = this.getId(dropParentLi);
            if (1 === this.dataType) {
                this.updateField(this.treeData, this.fields, parentId, "hasChildren", !0);
                var pos = isNullOrUndefined(index) ? this.treeData.length : pre ? index : index + 1;
                if (isNullOrUndefined(parentId) && !this.hasPid) delete removedData[0][this.fields.parentID]; else {
                    var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
                    setValue(this.fields.parentID, currPid, removedData[0]);
                }
                if (this.treeData.splice(pos, 0, removedData[0]), dragObj.element.id !== this.element.id) {
                    var childData = dragObj.removeChildNodes(id);
                    pos++;
                    for (var i = 0, len = childData.length; i < len; i++) this.treeData.splice(pos, 0, childData[i]), 
                    pos++;
                    dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
                }
                this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
            } else this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
        }, TreeView.prototype.expandParent = function(dropLi) {
            var dropIcon = select("div.e-icons", dropLi);
            dropIcon && dropIcon.classList.contains(EXPANDABLE) && !0 !== this.preventExpand && this.expandAction(dropLi, dropIcon, null);
            var dropUl = select("." + PARENTITEM, dropLi);
            if (!0 === this.preventExpand && !dropUl && dropIcon && this.renderChildNodes(dropLi), 
            dropUl = select("." + PARENTITEM, dropLi), isNullOrUndefined(dropUl) && !0 === this.preventExpand) {
                isNullOrUndefined(dropIcon) && ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
                (icon = select("div.e-icons", dropLi)).classList.add("e-icon-expandable"), dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption), 
                dropLi.appendChild(dropUl), removeClass([ icon ], COLLAPSIBLE), dropLi.setAttribute("aria-expanded", "false"), 
                dropUl.style.display = "none";
            }
            if (isNullOrUndefined(dropUl)) {
                this.trigger("nodeExpanding", this.getExpandEvent(dropLi, null)), isNullOrUndefined(dropIcon) && ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
                var icon;
                removeClass([ icon = select("div.e-icons", dropLi) ], EXPANDABLE), dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption), 
                dropLi.appendChild(dropUl), this.addExpand(dropLi), this.trigger("nodeExpanded", this.getExpandEvent(dropLi, null));
            }
            return dropUl;
        }, TreeView.prototype.updateElement = function(dragParentUl, dragParentLi) {
            if (dragParentLi && 0 === dragParentUl.childElementCount) {
                var dragIcon = select("div.e-icons", dragParentLi);
                detach(dragParentUl), detach(dragIcon);
                var parentId = this.getId(dragParentLi);
                this.updateField(this.treeData, this.fields, parentId, "hasChildren", null), this.removeExpand(dragParentLi, !0);
            }
        }, TreeView.prototype.updateAriaLevel = function(dragLi) {
            var level = this.parents(dragLi, "." + PARENTITEM).length;
            dragLi.setAttribute("aria-level", "" + level), this.updateChildAriaLevel(select("." + PARENTITEM, dragLi), level + 1);
        }, TreeView.prototype.updateChildAriaLevel = function(element, level) {
            if (!isNullOrUndefined(element)) for (var cNodes = element.childNodes, i = 0, len = cNodes.length; i < len; i++) {
                var liEle = cNodes[i];
                liEle.setAttribute("aria-level", "" + level), this.updateChildAriaLevel(select("." + PARENTITEM, liEle), level + 1);
            }
        }, TreeView.prototype.renderVirtualEle = function(e) {
            var pre;
            e.event.offsetY > e.target.offsetHeight - 2 ? pre = !1 : e.event.offsetY < 2 && (pre = !0);
            var virEle = this.createElement("div", {
                className: SIBLING
            }), index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
            e.target.insertBefore(virEle, e.target.children[index]);
        }, TreeView.prototype.removeVirtualEle = function() {
            var sibEle = select("." + SIBLING);
            sibEle && detach(sibEle);
        }, TreeView.prototype.destroyDrag = function() {
            this.dragObj && this.dropObj && (this.dragObj.destroy(), this.dropObj.destroy());
        }, TreeView.prototype.getDragEvent = function(event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
            var dropLi = dropTarget ? closest(dropTarget, "." + LISTITEM) : null, dropData = dropLi ? this.getNodeData(dropLi) : null, draggedNode = obj ? obj.dragLi : dragNode, draggedNodeData = obj ? obj.dragData : null, newParent = dropTarget ? this.parents(dropTarget, "." + LISTITEM) : null, dragLiParent = obj.dragLi.parentElement, dragParent = obj.dragLi ? closest(dragLiParent, "." + LISTITEM) : null, targetParent = null, indexValue = null, iconCss = [ DROPNEXT, "e-drop-in", "e-drop-out", "e-no-drop" ], iconClass = null, node = !0 === drop ? draggedNode : dropLi, index = node ? closest(node, ".e-list-parent") : null, i = 0;
            if (dragParent = obj.dragLi && null === dragParent ? closest(dragLiParent, "." + ROOT$11) : dragParent, 
            dragParent = !0 === drop ? this.dragParent : dragParent, cloneEle) for (;i < 4; ) {
                if (select(".e-icons", cloneEle).classList.contains(iconCss[i])) {
                    iconClass = iconCss[i];
                    break;
                }
                i++;
            }
            if (index) {
                var dropTar = 0;
                for (i = 0; i < index.childElementCount; i++) {
                    if (dropTar = !0 !== drop && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar, 
                    !0 !== drop && index.children[i].classList.contains("e-hover")) {
                        indexValue = event.offsetY >= 23 ? i + 1 : i;
                        break;
                    }
                    if (index.children[i] === node) {
                        event.offsetY, indexValue = i;
                        break;
                    }
                }
                indexValue = 0 !== dropTar ? --indexValue : indexValue;
            }
            if (dropTarget && (targetParent = 0 === newParent.length ? null : dropTarget.classList.contains(LISTITEM) ? newParent[0] : newParent[1]), 
            dropLi === draggedNode && (targetParent = dropLi), dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6 && (targetParent = dropLi, 
            !0 !== drop)) {
                level = ++level;
                var parent_1 = targetParent ? select(".e-list-parent", targetParent) : null;
                if (indexValue = parent_1 ? parent_1.children.length : 0, !(this.fields.dataSource instanceof DataManager) && null === parent_1 && targetParent) {
                    var parent_2 = targetParent.hasAttribute("data-uid") ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute("data-uid").toString()) : null;
                    indexValue = parent_2 ? parent_2.length : 0;
                }
            }
            return {
                cancel: !1,
                clonedNode: cloneEle,
                event: event,
                draggedNode: draggedNode,
                draggedNodeData: draggedNodeData,
                droppedNode: dropLi,
                droppedNodeData: dropData,
                dropIndex: indexValue,
                dropLevel: level,
                draggedParentNode: dragParent,
                dropTarget: targetParent,
                dropIndicator: iconClass,
                target: target
            };
        }, TreeView.prototype.addFullRow = function(toAdd) {
            var len = this.liList.length;
            if (toAdd) for (var i = 0; i < len; i++) this.createFullRow(this.liList[i]); else for (i = 0; i < len; i++) {
                detach(select(".e-fullrow", this.liList[i]));
            }
        }, TreeView.prototype.createFullRow = function(item) {
            var rowDiv = this.createElement("div", {
                className: "e-fullrow"
            });
            item.insertBefore(rowDiv, item.childNodes[0]);
        }, TreeView.prototype.addMultiSelect = function(toAdd) {
            if (toAdd) for (var _i = 0, liEles_1 = selectAll('.e-list-item:not([aria-selected="true"])', this.element); _i < liEles_1.length; _i++) {
                liEles_1[_i].setAttribute("aria-selected", "false");
            } else for (var _a = 0, liEles_2 = selectAll('.e-list-item[aria-selected="false"]', this.element); _a < liEles_2.length; _a++) {
                liEles_2[_a].removeAttribute("aria-selected");
            }
        }, TreeView.prototype.collapseByLevel = function(element, level, excludeHiddenNodes) {
            if (level > 0 && !isNullOrUndefined(element)) for (var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes), i = 0, len = cNodes.length; i < len; i++) {
                var liEle = cNodes[i], icon = select("." + COLLAPSIBLE, select("." + TEXTWRAP, liEle));
                isNullOrUndefined(icon) || this.collapseNode(liEle, icon, null), this.collapseByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
            }
        }, TreeView.prototype.collapseAllNodes = function(excludeHiddenNodes) {
            for (var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + COLLAPSIBLE, this.element)), i = 0, len = cIcons.length; i < len; i++) {
                var icon = cIcons[i], liEle = closest(icon, "." + LISTITEM);
                this.collapseNode(liEle, icon, null);
            }
        }, TreeView.prototype.expandByLevel = function(element, level, excludeHiddenNodes) {
            if (level > 0 && !isNullOrUndefined(element)) for (var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes), i = 0, len = eNodes.length; i < len; i++) {
                var liEle = eNodes[i], icon = select("." + EXPANDABLE, select("." + TEXTWRAP, liEle));
                isNullOrUndefined(icon) || this.expandAction(liEle, icon, null), this.expandByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
            }
        }, TreeView.prototype.expandAllNodes = function(excludeHiddenNodes) {
            for (var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + EXPANDABLE, this.element)), i = 0, len = eIcons.length; i < len; i++) {
                var icon = eIcons[i], liEle = closest(icon, "." + LISTITEM);
                this.expandAction(liEle, icon, null, !0);
            }
        }, TreeView.prototype.getVisibleNodes = function(excludeHiddenNodes, nodes) {
            var vNodes = Array.prototype.slice.call(nodes);
            if (excludeHiddenNodes) for (var i = 0; i < vNodes.length; i++) isVisible(vNodes[i]) || (vNodes.splice(i, 1), 
            i--);
            return vNodes;
        }, TreeView.prototype.removeNode = function(node) {
            var dragParentUl = closest(node, "." + PARENTITEM), dragParentLi = closest(dragParentUl, "." + LISTITEM);
            detach(node), this.updateElement(dragParentUl, dragParentLi), this.updateInstance(), 
            this.removeData(node);
        }, TreeView.prototype.updateInstance = function() {
            this.updateList(), this.updateSelectedNodes(), this.updateExpandedNodes();
        }, TreeView.prototype.updateList = function() {
            this.liList = Array.prototype.slice.call(selectAll("." + LISTITEM, this.element));
        }, TreeView.prototype.updateSelectedNodes = function() {
            this.setProperties({
                selectedNodes: []
            }, !0);
            var sNodes = selectAll(".e-active", this.element);
            this.selectGivenNodes(sNodes);
        }, TreeView.prototype.updateExpandedNodes = function() {
            this.setProperties({
                expandedNodes: []
            }, !0);
            for (var eNodes = selectAll('[aria-expanded="true"]', this.element), i = 0, len = eNodes.length; i < len; i++) this.addExpand(eNodes[i]);
        }, TreeView.prototype.removeData = function(node) {
            if (1 === this.dataType) {
                var dm = new DataManager(this.treeData), id = this.getId(node), data = {}, newId = this.isNumberTypeId ? parseFloat(id) : id;
                data[this.fields.id] = newId, dm.remove(this.fields.id, data), this.removeChildNodes(id);
            } else {
                id = this.getId(node);
                this.updateChildField(this.treeData, this.fields, id, null, null, !0);
            }
        }, TreeView.prototype.removeChildNodes = function(parentId) {
            var cNodes = this.getChildGroup(this.groupedData, parentId, !1), childData = [];
            if (cNodes) for (var i = 0, len = cNodes.length; i < len; i++) {
                var dm = new DataManager(this.treeData), id = getValue(this.fields.id, cNodes[i]).toString(), data = {}, currId = this.isNumberTypeId ? parseFloat(id) : id;
                data[this.fields.id] = currId;
                var nodeData = dm.remove(this.fields.id, data);
                childData.push(nodeData[0]), this.removeChildNodes(id);
            }
            return childData;
        }, TreeView.prototype.doGivenAction = function(nodes, selector, toExpand) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                var liEle = this.getElement(nodes[i]);
                if (!isNullOrUndefined(liEle)) {
                    var icon = select("." + selector, select("." + TEXTWRAP, liEle));
                    isNullOrUndefined(icon) || (toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null));
                }
            }
        }, TreeView.prototype.addGivenNodes = function(nodes, dropLi, index, isRemote, dropEle) {
            var sNodes = this.getSortedData(nodes), level = dropLi ? parseFloat(dropLi.getAttribute("aria-level")) + 1 : 1;
            isRemote && this.updateMapper(level);
            for (var dropUl, li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level), refNode = (dropUl = dropEle || (dropLi ? this.expandParent(dropLi) : select("." + PARENTITEM, this.element))).childNodes[index], i = 0; i < li.length; i++) dropUl.insertBefore(li[i], refNode);
            var id = this.getId(dropLi);
            if (1 === this.dataType) {
                this.updateField(this.treeData, this.fields, id, "hasChildren", !0);
                for (var refId = this.getId(refNode), pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId), j = 0; j < nodes.length; j++) {
                    if (!isNullOrUndefined(id)) {
                        var currId = this.isNumberTypeId ? parseFloat(id) : id;
                        setValue(this.fields.parentID, currId, nodes[j]);
                    }
                    this.treeData.splice(pos, 0, nodes[j]), pos++;
                }
            } else this.addChildData(this.treeData, this.fields, id, nodes, index);
            this.finalizeNode(dropUl);
        }, TreeView.prototype.updateMapper = function(level) {
            var mapper = 1 === level ? this.fields : this.getChildFields(this.fields, level - 1, 1);
            this.updateListProp(mapper);
        }, TreeView.prototype.updateListProp = function(mapper) {
            var prop = this.getActualProperties(mapper);
            this.listBaseOption.fields = prop, this.listBaseOption.fields.url = prop.hasOwnProperty("navigateUrl") ? prop.navigateUrl : "navigateUrl";
        }, TreeView.prototype.getDataPos = function(obj, mapper, id) {
            for (var pos = null, i = 0, objlen = obj.length; i < objlen; i++) {
                var nodeId = getValue(mapper.id, obj[i]);
                if (obj[i] && nodeId && nodeId.toString() === id) return i;
                if ("string" != typeof mapper.child || isNullOrUndefined(getValue(mapper.child, obj[i]))) {
                    if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
                        var items = getValue("child", obj[i]);
                        if (null !== (pos = this.getDataPos(items, this.getChildMapper(mapper), id))) break;
                    }
                } else {
                    var data = getValue(mapper.child, obj[i]);
                    if (null !== (pos = this.getDataPos(data, this.getChildMapper(mapper), id))) break;
                }
            }
            return pos;
        }, TreeView.prototype.addChildData = function(obj, mapper, id, data, index) {
            var updated;
            if (isNullOrUndefined(id)) {
                index = isNullOrUndefined(index) ? obj.length : index;
                for (var k = 0, len = data.length; k < len; k++) obj.splice(index, 0, data[k]), 
                index++;
                return updated;
            }
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
                var nodeId = getValue(mapper.id, obj[i]);
                if (obj[i] && nodeId && nodeId.toString() === id) {
                    if ("string" == typeof mapper.child && obj[i].hasOwnProperty(mapper.child) || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty("child")) {
                        var childData = getValue(key = "string" == typeof mapper.child ? mapper.child : "child", obj[i]);
                        index = isNullOrUndefined(index) ? childData.length : index;
                        for (k = 0, len = data.length; k < len; k++) childData.splice(index, 0, data[k]), 
                        index++;
                    } else {
                        var key = "string" == typeof mapper.child ? mapper.child : "child";
                        obj[i][key] = data;
                    }
                    return !0;
                }
                if ("string" != typeof mapper.child || isNullOrUndefined(getValue(mapper.child, obj[i]))) {
                    if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
                        childData = getValue("child", obj[i]);
                        if (void 0 !== (updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index))) break;
                    }
                } else {
                    var childObj = getValue(mapper.child, obj[i]);
                    if (void 0 !== (updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index))) break;
                }
            }
            return updated;
        }, TreeView.prototype.doDisableAction = function(nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                var liEle = this.getElement(nodes[i]);
                isNullOrUndefined(liEle) || (liEle.setAttribute("aria-disabled", "true"), addClass([ liEle ], "e-disable"));
            }
        }, TreeView.prototype.doEnableAction = function(nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                var liEle = this.getElement(nodes[i]);
                isNullOrUndefined(liEle) || (liEle.removeAttribute("aria-disabled"), removeClass([ liEle ], "e-disable"));
            }
        }, TreeView.prototype.setTouchClass = function() {
            var ele = closest(this.element, ".e-bigger");
            this.touchClass = isNullOrUndefined(ele) ? "" : "e-small";
        }, TreeView.prototype.updatePersistProp = function() {
            this.removeField(this.treeData, this.fields, [ "selected", "expanded" ]);
            for (var sleNodes = this.selectedNodes, l = 0, slelen = sleNodes.length; l < slelen; l++) this.updateField(this.treeData, this.fields, sleNodes[l], "selected", !0);
            for (var enodes = this.expandedNodes, k = 0, nodelen = enodes.length; k < nodelen; k++) this.updateField(this.treeData, this.fields, enodes[k], "expanded", !0);
            if (this.showCheckBox) {
                this.removeField(this.treeData, this.fields, [ "isChecked" ]);
                var cnodes = this.checkedNodes, m = 0;
                for (nodelen = cnodes.length; m < nodelen; m++) this.updateField(this.treeData, this.fields, cnodes[m], "isChecked", !0);
            }
        }, TreeView.prototype.removeField = function(obj, mapper, names) {
            if (!isNullOrUndefined(obj) && !isNullOrUndefined(mapper)) for (var i = 0, objlen = obj.length; i < objlen; i++) {
                for (var j = 0; j < names.length; j++) {
                    var field = this.getMapperProp(mapper, names[j]);
                    isNullOrUndefined(obj[i][field]) || delete obj[i][field];
                }
                "string" != typeof mapper.child || isNullOrUndefined(getValue(mapper.child, obj[i])) ? this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i])) && this.removeField(getValue("child", obj[i]), this.getChildMapper(mapper), names) : this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);
            }
        }, TreeView.prototype.getMapperProp = function(mapper, fieldName) {
            switch (fieldName) {
              case "selected":
                return isNullOrUndefined(mapper.selected) ? "selected" : mapper.selected;

              case "expanded":
                return isNullOrUndefined(mapper.expanded) ? "expanded" : mapper.expanded;

              case "isChecked":
                return isNullOrUndefined(mapper.isChecked) ? "isChecked" : mapper.isChecked;

              case "hasChildren":
                return isNullOrUndefined(mapper.hasChildren) ? "hasChildren" : mapper.hasChildren;

              default:
                return fieldName;
            }
        }, TreeView.prototype.updateField = function(obj, mapper, id, key, value) {
            if (!isNullOrUndefined(id)) if (1 === this.dataType) {
                var newId = this.isNumberTypeId ? parseFloat(id) : id, resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", newId, !1));
                setValue(this.getMapperProp(mapper, key), value, resultData[0]);
            } else this.updateChildField(obj, mapper, id, key, value);
        }, TreeView.prototype.updateChildField = function(obj, mapper, id, key, value, remove) {
            var removedData;
            if (isNullOrUndefined(obj)) return removedData;
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
                var nodeId = getValue(mapper.id, obj[i]);
                if (obj[i] && nodeId && nodeId.toString() === id) return remove ? removedData = obj.splice(i, 1) : (setValue(this.getMapperProp(mapper, key), value, obj[i]), 
                removedData = []), removedData;
                if ("string" != typeof mapper.child || isNullOrUndefined(getValue(mapper.child, obj[i]))) {
                    if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
                        var childItems = getValue("child", obj[i]);
                        if (void 0 !== (removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove))) break;
                    }
                } else {
                    var childData = getValue(mapper.child, obj[i]);
                    if (void 0 !== (removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove))) break;
                }
            }
            return removedData;
        }, TreeView.prototype.triggerEvent = function() {
            var eventArgs = {
                data: this.treeData
            };
            this.trigger("dataSourceChanged", eventArgs);
        }, TreeView.prototype.wireInputEvents = function(inpEle) {
            EventHandler.add(inpEle, "blur", this.inputFocusOut, this);
        }, TreeView.prototype.wireEditingEvents = function(toBind) {
            if (toBind) {
                var proxy_2 = this;
                this.touchEditObj = new Touch(this.element, {
                    tap: function(e) {
                        2 === e.tapCount && (e.originalEvent.preventDefault(), proxy_2.editingHandler(e.originalEvent));
                    }
                });
            } else this.touchEditObj && this.touchEditObj.destroy();
        }, TreeView.prototype.wireClickEvent = function(toBind) {
            if (toBind) {
                var proxy_3 = this;
                this.touchClickObj = new Touch(this.element, {
                    tap: function(e) {
                        e.originalEvent.preventDefault(), proxy_3.clickHandler(e);
                    }
                });
            } else this.touchClickObj && this.touchClickObj.destroy();
        }, TreeView.prototype.wireExpandOnEvent = function(toBind) {
            var _this = this;
            if (toBind) {
                var proxy_4 = this;
                this.touchExpandObj = new Touch(this.element, {
                    tap: function(e) {
                        ("Click" === _this.expandOnType || "DblClick" === _this.expandOnType && 2 === e.tapCount) && proxy_4.expandHandler(e);
                    }
                });
            } else this.touchExpandObj && this.touchExpandObj.destroy();
        }, TreeView.prototype.mouseDownHandler = function(e) {
            this.mouseDownStatus = !0, (e.shiftKey || e.ctrlKey) && e.preventDefault(), e.ctrlKey && this.allowMultiSelection && EventHandler.add(this.element, "contextmenu", this.preventContextMenu, this);
        }, TreeView.prototype.preventContextMenu = function(e) {
            e.preventDefault();
        }, TreeView.prototype.wireEvents = function() {
            EventHandler.add(this.element, "mousedown", this.mouseDownHandler, this), this.wireClickEvent(!0), 
            "None" !== this.expandOnType && this.wireExpandOnEvent(!0), EventHandler.add(this.element, "focus", this.focusIn, this), 
            EventHandler.add(this.element, "blur", this.focusOut, this), EventHandler.add(this.element, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.element, "mouseout", this.onMouseLeave, this), this.keyboardModule = new KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: "keydown"
            });
        }, TreeView.prototype.unWireEvents = function() {
            EventHandler.remove(this.element, "mousedown", this.mouseDownHandler), this.wireClickEvent(!1), 
            this.wireExpandOnEvent(!1), EventHandler.remove(this.element, "focus", this.focusIn), 
            EventHandler.remove(this.element, "blur", this.focusOut), EventHandler.remove(this.element, "mouseover", this.onMouseOver), 
            EventHandler.remove(this.element, "mouseout", this.onMouseLeave), this.keyboardModule.destroy();
        }, TreeView.prototype.parents = function(element, selector) {
            for (var matched = [], el = element.parentNode; !isNullOrUndefined(el); ) matches(el, selector) && matched.push(el), 
            el = el.parentNode;
            return matched;
        }, TreeView.prototype.isDescendant = function(parent, child) {
            for (var node = child.parentNode; !isNullOrUndefined(node); ) {
                if (node === parent) return !0;
                node = node.parentNode;
            }
            return !1;
        }, TreeView.prototype.showSpinner = function(element) {
            addClass([ element ], LOAD), createSpinner({
                target: element,
                width: Browser.isDevice ? 16 : 14
            }, this.createElement), showSpinner(element);
        }, TreeView.prototype.hideSpinner = function(element) {
            hideSpinner(element), element.innerHTML = "", removeClass([ element ], LOAD);
        }, TreeView.prototype.setCheckedNodes = function(nodes) {
            nodes = JSON.parse(JSON.stringify(nodes)), this.uncheckAll(this.checkedNodes), nodes.length > 0 && this.checkAll(nodes);
        }, TreeView.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "allowDragAndDrop":
                    this.setDragAndDrop(this.allowDragAndDrop);
                    break;

                  case "allowEditing":
                    this.wireEditingEvents(this.allowEditing);
                    break;

                  case "allowMultiSelection":
                    if (this.selectedNodes.length > 1) {
                        var sNode = this.getElement(this.selectedNodes[0]);
                        this.isLoaded = !1, this.removeSelectAll(), this.selectNode(sNode, null), this.isLoaded = !0;
                    }
                    this.setMultiSelect(this.allowMultiSelection), this.addMultiSelect(this.allowMultiSelection);
                    break;

                  case "checkedNodes":
                    this.showCheckBox && (this.checkedNodes = oldProp.checkedNodes, this.setCheckedNodes(newProp.checkedNodes));
                    break;

                  case "autoCheck":
                    this.showCheckBox && (this.autoCheck = newProp.autoCheck, this.ensureIndeterminate());
                    break;

                  case "cssClass":
                    this.setCssClass(oldProp.cssClass, newProp.cssClass);
                    break;

                  case "enableRtl":
                    this.setEnableRtl();
                    break;

                  case "expandedNodes":
                    this.isAnimate = !1, this.setProperties({
                        expandedNodes: []
                    }, !0), this.collapseAll(), this.isInitalExpand = !0, this.setProperties({
                        expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes
                    }, !0), this.doExpandAction(), this.isInitalExpand = !1, this.isAnimate = !0;
                    break;

                  case "expandOn":
                    this.wireExpandOnEvent(!1), this.setExpandOnType(), "None" !== this.expandOnType && this.wireExpandOnEvent(!0);
                    break;

                  case "fields":
                    this.isAnimate = !1, this.initialRender = !0, this.updateListProp(this.fields), 
                    this.reRenderNodes(), this.initialRender = !1, this.isAnimate = !0;
                    break;

                  case "fullRowSelect":
                    this.setFullRow(this.fullRowSelect), this.addFullRow(this.fullRowSelect);
                    break;

                  case "nodeTemplate":
                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate), this.reRenderNodes();
                    break;

                  case "selectedNodes":
                    this.removeSelectAll(), this.setProperties({
                        selectedNodes: newProp.selectedNodes
                    }, !0), this.doSelectionAction();
                    break;

                  case "showCheckBox":
                  case "sortOrder":
                    this.reRenderNodes();
                }
            }
        }, TreeView.prototype.destroy = function() {
            this.element.removeAttribute("aria-activedescendant"), this.element.removeAttribute("tabindex"), 
            this.unWireEvents(), this.wireEditingEvents(!1), this.rippleFn(), this.rippleIconFn(), 
            this.setCssClass(this.cssClass, null), this.setDragAndDrop(!1), this.setFullRow(!1), 
            this.element.innerHTML = "", _super.prototype.destroy.call(this);
        }, TreeView.prototype.addNodes = function(nodes, target, index, preventTargetExpand) {
            if (!isNullOrUndefined(nodes)) {
                nodes = JSON.parse(JSON.stringify(nodes));
                var dropLi = this.getElement(target);
                if (this.preventExpand = preventTargetExpand, this.fields.dataSource instanceof DataManager) {
                    var dropUl_1, icon = dropLi ? dropLi.querySelector(".e-icons") : null, proxy_5 = this;
                    dropLi && icon && icon.classList.contains(EXPANDABLE) && null === dropLi.querySelector("." + PARENTITEM) ? proxy_5.renderChildNodes(dropLi, null, function() {
                        dropUl_1 = dropLi.querySelector("." + PARENTITEM), proxy_5.addGivenNodes(nodes, dropLi, index, !0, dropUl_1), 
                        proxy_5.triggerEvent();
                    }) : (this.addGivenNodes(nodes, dropLi, index, !0), this.triggerEvent());
                } else if (2 === this.dataType) this.addGivenNodes(nodes, dropLi, index); else {
                    if (dropLi) this.addGivenNodes(nodes, dropLi, index); else {
                        nodes = this.getSortedData(nodes);
                        for (var i = 0; i < nodes.length; i++) {
                            var pid = getValue(this.fields.parentID, nodes[i]);
                            dropLi = pid ? this.getElement(pid.toString()) : pid, this.addGivenNodes([ nodes[i] ], dropLi, index);
                        }
                    }
                    this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
                }
                this.fields.dataSource instanceof DataManager == !1 && (this.preventExpand = !1, 
                this.triggerEvent());
            }
        }, TreeView.prototype.beginEdit = function(node) {
            var ele = this.getElement(node);
            isNullOrUndefined(ele) || this.createTextbox(ele, null);
        }, TreeView.prototype.checkAll = function(nodes) {
            this.showCheckBox && this.doCheckBoxAction(nodes, !0);
        }, TreeView.prototype.collapseAll = function(nodes, level, excludeHiddenNodes) {
            isNullOrUndefined(nodes) ? level > 0 ? this.collapseByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes) : this.collapseAllNodes(excludeHiddenNodes) : this.doGivenAction(nodes, COLLAPSIBLE, !1);
        }, TreeView.prototype.disableNodes = function(nodes) {
            isNullOrUndefined(nodes) || this.doDisableAction(nodes);
        }, TreeView.prototype.enableNodes = function(nodes) {
            isNullOrUndefined(nodes) || this.doEnableAction(nodes);
        }, TreeView.prototype.ensureVisible = function(node) {
            var liEle = this.getElement(node);
            if (!isNullOrUndefined(liEle)) {
                var parents = this.parents(liEle, "." + LISTITEM);
                this.expandAll(parents), setTimeout(function() {
                    liEle.scrollIntoView(!0);
                }, 450);
            }
        }, TreeView.prototype.expandAll = function(nodes, level, excludeHiddenNodes) {
            isNullOrUndefined(nodes) ? level > 0 ? this.expandByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes) : this.expandAllNodes(excludeHiddenNodes) : this.doGivenAction(nodes, EXPANDABLE, !0);
        }, TreeView.prototype.getAllCheckedNodes = function() {
            for (var checkNodes = this.checkedNodes, newCheck = [], i = 0, id = this.fields.id; i < this.treeData.length; i++) {
                var checked = null, childNode = null, isLoaded = this.element.querySelector('[data-uid="' + this.treeData[i][id].toString() + '"]');
                isLoaded && null === isLoaded.querySelector(".e-list-item") && (!0 === this.treeData[i][this.fields.isChecked] && -1 === this.checkedElement.indexOf(this.treeData[i][id].toString()) && (newCheck.push(this.treeData[i][id].toString()), 
                checked = 2), 2 !== checked && (checked = 1), null !== (childNode = this.getChildNodes(this.treeData, this.treeData[i][id].toString())) ? this.allCheckNode(childNode, newCheck, checked) : childNode = null);
            }
            for (i = 0; i < checkNodes.length; ) if (-1 === newCheck.indexOf(checkNodes[i])) {
                newCheck.push(checkNodes[i]);
                var parentNode = this.element.querySelector('[data-uid="' + checkNodes[i] + '"]');
                if (parentNode && null === parentNode.querySelector(".e-list-item")) {
                    var child = this.getChildNodes(this.treeData, checkNodes[i].toString());
                    child && this.autoCheck ? this.allCheckNode(child, newCheck) : child = null;
                }
                i++;
            } else i++;
            return newCheck;
        }, TreeView.prototype.getNode = function(node) {
            var ele = this.getElement(node);
            return this.getNodeData(ele, !0);
        }, TreeView.prototype.getTreeData = function(node) {
            var id = this.getId(node);
            if (this.updatePersistProp(), isNullOrUndefined(id)) return this.treeData;
            var data = this.getNodeObject(id);
            return isNullOrUndefined(data) ? [] : [ data ];
        }, TreeView.prototype.moveNodes = function(sourceNodes, target, index, preventTargetExpand) {
            var dropLi = this.getElement(target);
            if (!isNullOrUndefined(dropLi)) {
                for (var i = 0; i < sourceNodes.length; i++) {
                    var dragLi = this.getElement(sourceNodes[i]);
                    isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi) || (this.preventExpand = preventTargetExpand, 
                    this.dropAsChildNode(dragLi, dropLi, this, index));
                }
                this.fields.dataSource instanceof DataManager == !1 && (this.preventExpand = !1), 
                this.triggerEvent();
            }
        }, TreeView.prototype.removeNodes = function(nodes) {
            if (!isNullOrUndefined(nodes)) {
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var liEle = this.getElement(nodes[i]);
                    isNullOrUndefined(liEle) || this.removeNode(liEle);
                }
                this.triggerEvent();
            }
        }, TreeView.prototype.updateNode = function(target, newText) {
            if (!isNullOrUndefined(target) && !isNullOrUndefined(newText) && this.allowEditing) {
                var liEle = this.getElement(target);
                if (!isNullOrUndefined(liEle)) {
                    var txtEle = select("." + LISTTEXT, liEle);
                    this.updateOldText(liEle);
                    var eventArgs = this.getEditEvent(liEle, null, null);
                    this.trigger("nodeEditing", eventArgs), eventArgs.cancel || this.appendNewText(liEle, txtEle, newText, !1);
                }
            }
        }, TreeView.prototype.uncheckAll = function(nodes) {
            this.showCheckBox && this.doCheckBoxAction(nodes, !1);
        };
        var TreeView_1;
        __decorate$46([ Property(!1) ], TreeView.prototype, "allowDragAndDrop", void 0), 
        __decorate$46([ Property(!1) ], TreeView.prototype, "allowEditing", void 0), __decorate$46([ Property(!1) ], TreeView.prototype, "allowMultiSelection", void 0), 
        __decorate$46([ Complex({}, NodeAnimationSettings) ], TreeView.prototype, "animation", void 0), 
        __decorate$46([ Property() ], TreeView.prototype, "checkedNodes", void 0), __decorate$46([ Property("") ], TreeView.prototype, "cssClass", void 0), 
        __decorate$46([ Property(!1) ], TreeView.prototype, "enablePersistence", void 0), 
        __decorate$46([ Property(!1) ], TreeView.prototype, "enableRtl", void 0), __decorate$46([ Property() ], TreeView.prototype, "expandedNodes", void 0), 
        __decorate$46([ Property("Auto") ], TreeView.prototype, "expandOn", void 0), __decorate$46([ Complex({}, FieldsSettings) ], TreeView.prototype, "fields", void 0), 
        __decorate$46([ Property(!0) ], TreeView.prototype, "fullRowSelect", void 0), __decorate$46([ Property() ], TreeView.prototype, "nodeTemplate", void 0), 
        __decorate$46([ Property() ], TreeView.prototype, "selectedNodes", void 0), __decorate$46([ Property("None") ], TreeView.prototype, "sortOrder", void 0), 
        __decorate$46([ Property(!1) ], TreeView.prototype, "showCheckBox", void 0), __decorate$46([ Property(!0) ], TreeView.prototype, "autoCheck", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "created", void 0), __decorate$46([ Event() ], TreeView.prototype, "dataBound", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "dataSourceChanged", void 0), __decorate$46([ Event() ], TreeView.prototype, "drawNode", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "destroyed", void 0), __decorate$46([ Event() ], TreeView.prototype, "keyPress", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeChecked", void 0), __decorate$46([ Event() ], TreeView.prototype, "nodeChecking", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeClicked", void 0), __decorate$46([ Event() ], TreeView.prototype, "nodeCollapsed", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeCollapsing", void 0), __decorate$46([ Event() ], TreeView.prototype, "nodeDragging", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeDragStart", void 0), __decorate$46([ Event() ], TreeView.prototype, "nodeDragStop", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeDropped", void 0), __decorate$46([ Event() ], TreeView.prototype, "nodeEdited", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeEditing", void 0), __decorate$46([ Event() ], TreeView.prototype, "nodeExpanded", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeExpanding", void 0), __decorate$46([ Event() ], TreeView.prototype, "nodeSelected", void 0), 
        __decorate$46([ Event() ], TreeView.prototype, "nodeSelecting", void 0), TreeView = TreeView_1 = __decorate$46([ NotifyPropertyChanges ], TreeView);
    }(Component), function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }()), __decorate$47 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, OPEN = "e-open", RIGHT = "e-right", LEFT = "e-left", OVER = "e-over", PUSH = "e-push", CONTEXT = "e-sidebar-context", __extends$52 = (function(_super) {
        function Sidebar(options, element) {
            return _super.call(this, options, element) || this;
        }
        __extends$61(Sidebar, _super), Sidebar.prototype.preRender = function() {
            this.setWidth();
        }, Sidebar.prototype.render = function() {
            this.initialize(), this.wireEvents();
        }, Sidebar.prototype.initialize = function() {
            this.setTarget(), this.addClass(), this.setZindex(), this.enableDock && this.setDock(), 
            this.isOpen ? this.show() : this.setMediaQuery(), this.setType(this.type), this.setCloseOnDocumentClick(), 
            this.setEnableRTL();
        }, Sidebar.prototype.setEnableRTL = function() {
            this.enableRtl ? addClass([ this.element ], "e-rtl") : removeClass([ this.element ], "e-rtl");
        }, Sidebar.prototype.setTarget = function() {
            "string" == typeof this.target && this.setProperties({
                target: document.querySelector(this.target)
            }, !0), this.target && (this.target.insertBefore(this.element, this.target.children[0]), 
            addClass([ this.element ], "e-sidebar-absolute"), addClass([ this.target ], CONTEXT));
        }, Sidebar.prototype.setCloseOnDocumentClick = function() {
            this.closeOnDocumentClick ? EventHandler.add(document, "mousedown touchstart", this.documentclickHandler, this) : EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
        }, Sidebar.prototype.setWidth = function() {
            this.enableDock && "Left" === this.position ? setStyleAttribute(this.element, {
                width: this.setDimension(this.dockSize)
            }) : this.enableDock && "Right" === this.position ? setStyleAttribute(this.element, {
                width: this.setDimension(this.dockSize)
            }) : this.enableDock || setStyleAttribute(this.element, {
                width: this.setDimension(this.width)
            });
        }, Sidebar.prototype.setDimension = function(width) {
            return width = "number" == typeof width ? formatUnit(width) : "string" == typeof width ? width.match(/px|%|em/) ? width : formatUnit(width) : "100%";
        }, Sidebar.prototype.setZindex = function() {
            setStyleAttribute(this.element, {
                "z-index": "" + this.zIndex
            });
        }, Sidebar.prototype.addClass = function() {
            var classELement = document.querySelector(".e-main-content");
            isNullOrUndefined(classELement || this.element.nextElementSibling) || addClass([ classELement || this.element.nextElementSibling ], [ "e-content-animation" ]), 
            this.enableDock || "Auto" === this.type || addClass([ this.element ], [ "e-visibility" ]), 
            removeClass([ this.element ], [ OPEN, "e-close", RIGHT, LEFT, "e-slide", PUSH, OVER ]), 
            this.element.classList.add("e-sidebar"), addClass([ this.element ], "Right" === this.position ? RIGHT : LEFT), 
            "Auto" !== this.type || Browser.isDevice || this.enableDock ? addClass([ this.element ], "e-close") : addClass([ this.element ], OPEN);
        }, Sidebar.prototype.destroyBackDrop = function() {
            var sibling = document.querySelector(".e-main-content") || this.element.nextElementSibling;
            this.target && this.showBackdrop && sibling ? removeClass([ sibling ], "e-backdrop") : this.showBackdrop && this.modal && (this.modal.style.display = "none", 
            this.modal.outerHTML = "", this.modal = null);
        }, Sidebar.prototype.hide = function() {
            var closeArguments = {
                model: this,
                element: this.element,
                cancel: !1
            };
            if (this.trigger("close", closeArguments), !closeArguments.cancel) {
                if (this.element.classList.contains("e-close")) return;
                if (this.element.classList.contains(OPEN)) {
                    var changeArguments = {
                        name: "change",
                        element: this.element
                    };
                    this.trigger("change", changeArguments);
                }
                addClass([ this.element ], "e-close"), removeClass([ this.element ], OPEN), this.enableDock ? setStyleAttribute(this.element, {
                    width: formatUnit(this.dockSize)
                }) : setStyleAttribute(this.element, {
                    width: formatUnit(this.width)
                }), this.setDock(), this.setType(this.type);
                var sibling = document.querySelector(".e-main-content") || this.element.nextElementSibling;
                !this.enableDock && sibling && (sibling.style.transform = "translateX(0px)", "Left" === this.position ? sibling.style.marginLeft = "0px" : sibling.style.marginRight = "0px"), 
                this.destroyBackDrop(), this.setCloseOnDocumentClick(), this.setAnimation(), "Slide" === this.type && document.body.classList.remove("e-sidebar-overflow"), 
                this.setProperties({
                    isOpen: !1
                }, !0);
            }
        }, Sidebar.prototype.show = function() {
            var openArguments = {
                model: this,
                element: this.element,
                cancel: !1
            };
            if (this.trigger("open", openArguments), !openArguments.cancel) {
                if (removeClass([ this.element ], "e-visibility"), this.element.classList.contains(OPEN)) return;
                if (this.element.classList.contains("e-close")) {
                    var changeArguments = {
                        name: "change",
                        element: this.element
                    };
                    this.trigger("change", changeArguments);
                }
                addClass([ this.element ], [ OPEN, "e-transition" ]), setStyleAttribute(this.element, {
                    transform: ""
                }), removeClass([ this.element ], "e-close"), setStyleAttribute(this.element, {
                    width: formatUnit(this.width)
                });
                this.element.getBoundingClientRect().width;
                this.setType(this.type), this.createBackDrop(), this.setCloseOnDocumentClick(), 
                this.setAnimation(), "Slide" === this.type && document.body.classList.add("e-sidebar-overflow"), 
                this.setProperties({
                    isOpen: !0
                }, !0);
            }
        }, Sidebar.prototype.setAnimation = function() {
            this.animate ? removeClass([ this.element ], "e-disable-animation") : addClass([ this.element ], "e-disable-animation");
        }, Sidebar.prototype.setDock = function() {
            this.enableDock && "Left" === this.position && !this.getState() ? setStyleAttribute(this.element, {
                transform: "translateX(-100%) translateX(" + this.setDimension(this.dockSize) + ")"
            }) : this.enableDock && "Right" === this.position && !this.getState() && setStyleAttribute(this.element, {
                transform: "translateX(100%) translateX(-" + this.setDimension(this.dockSize) + ")"
            }), this.element.classList.contains("e-close") && this.enableDock && setStyleAttribute(this.element, {
                width: this.setDimension(this.dockSize)
            });
        }, Sidebar.prototype.createBackDrop = function() {
            if (this.target && this.showBackdrop) {
                addClass([ document.querySelector(".e-main-content") || this.element.nextElementSibling ], "e-backdrop");
            } else this.showBackdrop && !this.modal && this.getState() && (this.modal = this.createElement("div"), 
            this.modal.className = "e-sidebar-overlay", this.modal.style.display = "block", 
            document.body.appendChild(this.modal));
        }, Sidebar.prototype.getPersistData = function() {
            return this.addOnPersist([ "type", "position", "isOpen" ]);
        }, Sidebar.prototype.getModuleName = function() {
            return "sidebar";
        }, Sidebar.prototype.toggle = function(e) {
            this.element.classList.contains(OPEN) ? this.hide() : this.show();
        }, Sidebar.prototype.getState = function() {
            return !!this.element.classList.contains(OPEN);
        }, Sidebar.prototype.setMediaQuery = function() {
            this.mediaQuery && this.mediaQuery.matches ? this.show() : this.mediaQuery && this.getState() && this.hide();
        }, Sidebar.prototype.resize = function(e) {
            "Auto" === this.type && (Browser.isDevice ? addClass([ this.element ], OVER) : addClass([ this.element ], PUSH)), 
            this.setMediaQuery();
        }, Sidebar.prototype.documentclickHandler = function(e) {
            closest(e.target, ".e-control.e-sidebar") || this.hide();
        }, Sidebar.prototype.enableGestureHandler = function(args) {
            "Left" === this.position && "Right" === args.swipeDirection && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= .5 ? this.show() : "Left" === this.position && "Left" === args.swipeDirection ? this.hide() : "Right" === this.position && "Right" === args.swipeDirection ? this.hide() : "Right" === this.position && "Left" === args.swipeDirection && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= .5 && this.show();
        }, Sidebar.prototype.setEnableGestures = function() {
            this.enableGestures ? (this.mainContentEle = new Touch(document.body, {
                swipe: this.enableGestureHandler.bind(this)
            }), this.sidebarEle = new Touch(this.element, {
                swipe: this.enableGestureHandler.bind(this)
            })) : this.mainContentEle && this.sidebarEle && (this.mainContentEle.destroy(), 
            this.sidebarEle.destroy());
        }, Sidebar.prototype.wireEvents = function() {
            this.setEnableGestures(), window.addEventListener("resize", this.resize.bind(this));
        }, Sidebar.prototype.unWireEvents = function() {
            window.removeEventListener("resize", this.resize.bind(this)), EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler), 
            this.mainContentEle && this.mainContentEle.destroy(), this.sidebarEle && this.sidebarEle.destroy();
        }, Sidebar.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var sibling = document.querySelector(".e-main-content") || this.element.nextElementSibling, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "isOpen":
                    this.isOpen ? this.show() : this.hide();
                    break;

                  case "width":
                    this.setWidth(), this.getState() || this.setDock();
                    break;

                  case "animate":
                    this.setAnimation();
                    break;

                  case "type":
                    removeClass([ this.element ], [ "e-visibility" ]), this.addClass(), this.setType(this.type);
                    break;

                  case "position":
                    this.element.style.transform = "", this.setDock(), sibling && ("Left" === this.position ? sibling.style.marginRight = "0px" : sibling.style.marginLeft = "0px"), 
                    "Right" === this.position ? (removeClass([ this.element ], LEFT), addClass([ this.element ], RIGHT)) : (removeClass([ this.element ], RIGHT), 
                    addClass([ this.element ], LEFT)), this.setType(this.type);
                    break;

                  case "showBackdrop":
                    this.showBackdrop ? this.createBackDrop() : this.modal && (this.modal.style.display = "none", 
                    this.modal.outerHTML = "", this.modal = null);
                    break;

                  case "target":
                    "string" == typeof this.target && this.setProperties({
                        target: document.querySelector(this.target)
                    }, !0), isNullOrUndefined(this.target) ? (removeClass([ this.element ], "e-sidebar-absolute"), 
                    removeClass([ oldProp.target ], CONTEXT), setStyleAttribute(sibling, {
                        "margin-left": 0,
                        "margin-right": 0
                    }), document.body.insertAdjacentElement("afterbegin", this.element)) : _super.prototype.refresh.call(this);
                    break;

                  case "closeOnDocumentClick":
                    this.setCloseOnDocumentClick();
                    break;

                  case "enableDock":
                    this.getState() || this.setDock();
                    break;

                  case "zIndex":
                    this.setZindex();
                    break;

                  case "mediaQuery":
                    this.setMediaQuery();
                    break;

                  case "enableGestures":
                    this.setEnableGestures();
                    break;

                  case "enableRtl":
                    this.setEnableRTL();
                }
            }
        }, Sidebar.prototype.setType = function(type) {
            var elementWidth = this.element.getBoundingClientRect().width;
            this.setZindex(), this.enableDock && addClass([ this.element ], "e-dock");
            var sibling = document.querySelector(".e-main-content") || this.element.nextElementSibling;
            sibling && (sibling.style.transform = "translateX(0px)", Browser.isDevice || "Auto" === this.type || ("Left" === this.position ? sibling.style.marginLeft = "0px" : sibling.style.marginRight = "0px"));
            var margin = (this.position, elementWidth + "px"), eleWidth = "Left" === this.position ? elementWidth : -elementWidth;
            switch (removeClass([ this.element ], [ PUSH, OVER, "e-slide" ]), type) {
              case "Push":
                addClass([ this.element ], [ PUSH ]), sibling && (this.enableDock || this.element.classList.contains(OPEN)) && ("Left" === this.position ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin);
                break;

              case "Slide":
                addClass([ this.element ], [ "e-slide" ]), sibling && (this.enableDock || this.element.classList.contains(OPEN)) && (sibling.style.transform = "translateX(" + eleWidth + "px)");
                break;

              case "Over":
                addClass([ this.element ], [ OVER ]), this.enableDock && this.element.classList.contains("e-close") && sibling && ("Left" === this.position ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin);
                break;

              case "Auto":
                addClass([ this.element ], [ "e-transition" ]), Browser.isDevice ? sibling && this.enableDock && !this.getState() ? ("Left" === this.position ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin, 
                addClass([ this.element ], PUSH)) : addClass([ this.element ], OVER) : (addClass([ this.element ], PUSH), 
                sibling && (this.enableDock || this.element.classList.contains(OPEN)) && ("Left" === this.position ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin), 
                this.setProperties({
                    isOpen: !0
                }, !0)), this.createBackDrop();
            }
        }, Sidebar.prototype.destroy = function() {
            _super.prototype.destroy.call(this), removeClass([ this.element ], [ OPEN, "e-close", PUSH, "e-slide", OVER, LEFT, RIGHT, "e-transition" ]), 
            this.target && (removeClass([ this.element ], "e-sidebar-absolute"), removeClass([ this.target ], CONTEXT)), 
            this.destroyBackDrop(), this.element.style.width = "", this.element.style.zIndex = "", 
            this.element.style.transform = "";
            var sibling = document.querySelector(".e-main-content") || this.element.nextElementSibling;
            isNullOrUndefined(sibling) || (sibling.style.margin = "", sibling.style.transform = ""), 
            this.unWireEvents();
        }, __decorate$47([ Property("auto") ], Sidebar.prototype, "dockSize", void 0), __decorate$47([ Property(null) ], Sidebar.prototype, "mediaQuery", void 0), 
        __decorate$47([ Property(!1) ], Sidebar.prototype, "enableDock", void 0), __decorate$47([ Property("en-US") ], Sidebar.prototype, "locale", void 0), 
        __decorate$47([ Property(!1) ], Sidebar.prototype, "enablePersistence", void 0), 
        __decorate$47([ Property(!0) ], Sidebar.prototype, "enableGestures", void 0), __decorate$47([ Property(!1) ], Sidebar.prototype, "isOpen", void 0), 
        __decorate$47([ Property(!1) ], Sidebar.prototype, "enableRtl", void 0), __decorate$47([ Property(!0) ], Sidebar.prototype, "animate", void 0), 
        __decorate$47([ Property("auto") ], Sidebar.prototype, "height", void 0), __decorate$47([ Property(!1) ], Sidebar.prototype, "closeOnDocumentClick", void 0), 
        __decorate$47([ Property("Left") ], Sidebar.prototype, "position", void 0), __decorate$47([ Property(null) ], Sidebar.prototype, "target", void 0), 
        __decorate$47([ Property(!1) ], Sidebar.prototype, "showBackdrop", void 0), __decorate$47([ Property("Auto") ], Sidebar.prototype, "type", void 0), 
        __decorate$47([ Property("auto") ], Sidebar.prototype, "width", void 0), __decorate$47([ Property(1e3) ], Sidebar.prototype, "zIndex", void 0), 
        __decorate$47([ Event() ], Sidebar.prototype, "created", void 0), __decorate$47([ Event() ], Sidebar.prototype, "close", void 0), 
        __decorate$47([ Event() ], Sidebar.prototype, "open", void 0), __decorate$47([ Event() ], Sidebar.prototype, "change", void 0), 
        __decorate$47([ Event() ], Sidebar.prototype, "destroyed", void 0), Sidebar = __decorate$47([ NotifyPropertyChanges ], Sidebar);
    }(Component), function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }()), ExcelFilter = function(_super) {
        function ExcelFilter(parent, filterSettings, serviceLocator, customFltrOperators) {
            var _this = _super.call(this, parent, filterSettings, serviceLocator) || this;
            return _this.customFilterOperators = customFltrOperators, _this.isExcel = !0, _this;
        }
        return __extends$52(ExcelFilter, _super), ExcelFilter.prototype.getCMenuDS = function(type, operator) {
            var options = {
                number: [ "Equal", "NotEqual", "", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", "Between", "", "CustomFilter" ],
                string: [ "Equal", "NotEqual", "", "StartsWith", "EndsWith", "", "Contains", "", "CustomFilter" ]
            };
            options.date = options.number, options.datetime = options.number;
            for (var model = [], i = 0; i < options[type].length; i++) options[type][i].length ? operator ? model.push({
                text: this.getLocalizedLabel(options[type][i]) + "...",
                iconCss: "e-icons e-icon-check " + (operator === options[type][i].toLowerCase() ? "" : "e-emptyicon")
            }) : model.push({
                text: this.getLocalizedLabel(options[type][i]) + "..."
            }) : model.push({
                separator: !0
            });
            return model;
        }, ExcelFilter.prototype.destroy = function() {
            this.dlg && (this.unwireExEvents(), _super.prototype.destroy.call(this)), this.cmenu && this.cmenu.parentElement && remove(this.cmenu);
        }, ExcelFilter.prototype.createMenu = function(type, isFiltered, isCheckIcon) {
            this.menu = this.parent.createElement("div", {
                className: "e-contextmenu-wrapper"
            }), this.parent.enableRtl ? this.menu.classList.add("e-rtl") : this.menu.classList.remove("e-rtl");
            var ul = this.parent.createElement("ul"), icon = isFiltered ? "e-excl-filter-icon e-filtered" : "e-excl-filter-icon";
            ul.appendChild(this.createMenuElem(this.getLocalizedLabel("ClearFilter"), isFiltered ? "" : "e-disabled", icon)), 
            "boolean" !== type && ul.appendChild(this.createMenuElem(this.getLocalizedLabel({
                string: "TextFilter",
                date: "DateFilter",
                datetime: "DateTimeFilter",
                number: "NumberFilter"
            }[type]), "e-submenu", isCheckIcon && this.ensureTextFilter() ? "e-icon-check" : icon + " e-emptyicon", !0)), 
            this.menu.appendChild(ul);
        }, ExcelFilter.prototype.createMenuElem = function(val, className, iconName, isSubMenu) {
            var li = this.parent.createElement("li", {
                className: className + " e-menu-item"
            });
            return li.innerHTML = val, li.insertBefore(this.parent.createElement("span", {
                className: "e-menu-icon e-icons " + iconName
            }), li.firstChild), isSubMenu && li.appendChild(this.parent.createElement("span", {
                className: "e-icons e-caret"
            })), li;
        }, ExcelFilter.prototype.wireExEvents = function() {
            EventHandler.add(this.dlg, "mouseover", this.hoverHandler, this), EventHandler.add(this.dlg, "click", this.clickExHandler, this);
        }, ExcelFilter.prototype.unwireExEvents = function() {
            EventHandler.remove(this.dlg, "mouseover", this.hoverHandler), EventHandler.remove(this.dlg, "click", this.clickExHandler);
        }, ExcelFilter.prototype.clickExHandler = function(e) {
            var menuItem = parentsUntil(e.target, "e-menu-item");
            menuItem && this.getLocalizedLabel("ClearFilter") === menuItem.innerText.trim() && (this.clearFilter(), 
            this.closeDialog());
        }, ExcelFilter.prototype.destroyCMenu = function() {
            this.menuObj && !this.menuObj.isDestroyed && (this.menuObj.destroy(), remove(this.cmenu));
        }, ExcelFilter.prototype.hoverHandler = function(e) {
            var isSubMenu, target = e.target.querySelector(".e-contextmenu"), li = parentsUntil(e.target, "e-menu-item"), focused = this.menu.querySelector(".e-focused");
            if (focused && focused.classList.remove("e-focused"), li && (li.classList.add("e-focused"), 
            isSubMenu = li.classList.contains("e-submenu")), !target) {
                if (!isSubMenu) {
                    var submenu = this.menu.querySelector(".e-submenu");
                    isNullOrUndefined(submenu) || submenu.classList.remove("e-selected"), this.isCMenuOpen = !1, 
                    this.destroyCMenu();
                }
                var selectedMenu = this.ensureTextFilter();
                if (!this.isCMenuOpen && isSubMenu) {
                    li.classList.add("e-selected"), this.isCMenuOpen = !0;
                    var menuOptions = {
                        items: this.getCMenuDS(this.options.type, selectedMenu ? selectedMenu.replace(/\s/g, "") : void 0),
                        select: this.selectHandler.bind(this),
                        onClose: this.destroyCMenu.bind(this),
                        enableRtl: this.parent.enableRtl,
                        beforeClose: this.preventClose
                    };
                    this.parent.element.appendChild(this.cmenu), this.menuObj = new ContextMenu(menuOptions, this.cmenu);
                    var client = this.menu.querySelector(".e-submenu").getBoundingClientRect(), pos = {
                        top: 0,
                        left: 0
                    };
                    if (Browser.isDevice) {
                        var contextRect = this.getContextBounds(this.menuObj);
                        pos.top = (window.innerHeight - contextRect.height) / 2, pos.left = (window.innerWidth - contextRect.width) / 2, 
                        this.closeDialog();
                    } else pos.top = client.top, pos.left = this.getCMenuYPosition(this.dlg, this.menuObj);
                    this.menuObj.open(pos.top, pos.left, e.target);
                }
            }
        }, ExcelFilter.prototype.ensureTextFilter = function() {
            var selectedMenu, predicates = this.existingPredicate[this.options.field];
            return predicates && 2 === predicates.length ? selectedMenu = "greaterThanOrEqual" === predicates[0].operator && "lessThanOrEqual" === predicates[1].operator ? "Between" : "CustomFilter" : predicates && 1 === predicates.length && (this.optrData = this.customFilterOperators[this.options.type + "Operator"], 
            selectedMenu = predicates[0].operator), selectedMenu;
        }, ExcelFilter.prototype.preventClose = function(args) {
            args.event instanceof MouseEvent && args.event.target.classList.contains("e-submenu") && (args.cancel = !0);
        }, ExcelFilter.prototype.getContextBounds = function(context) {
            this.menuObj.element.style.display;
            return this.menuObj.element.style.display = "block", this.menuObj.element.getBoundingClientRect();
        }, ExcelFilter.prototype.getCMenuYPosition = function(target, context) {
            var contextWidth = this.getContextBounds(context).width, targetPosition = target.getBoundingClientRect();
            return targetPosition.right + contextWidth - this.parent.element.clientWidth < 1 ? targetPosition.right + 1 : targetPosition.left - contextWidth - 1;
        }, ExcelFilter.prototype.openDialog = function(options) {
            var _this = this;
            this.updateModel(options), this.getAndSetChkElem(options), this.showDialog(options), 
            this.dialogObj.dataBind();
            var filterLength = this.existingPredicate[options.field] && this.existingPredicate[options.field].length || this.options.filteredColumns.filter(function(col) {
                return _this.options.field === col.field;
            }).length;
            this.createMenu(options.type, filterLength > 0, 1 === filterLength || 2 === filterLength), 
            this.dlg.insertBefore(this.menu, this.dlg.firstChild), this.dlg.classList.add("e-excelfilter"), 
            this.dlg.classList.remove("e-checkboxfilter"), this.cmenu = this.parent.createElement("ul", {
                className: "e-excel-menu"
            }), this.wireExEvents();
        }, ExcelFilter.prototype.closeDialog = function() {
            _super.prototype.closeDialog.call(this);
        }, ExcelFilter.prototype.selectHandler = function(e) {
            e.item && (this.menuItem = e.item, this.renderDialogue(e));
        }, ExcelFilter.prototype.renderDialogue = function(e) {
            var _this = this, target = e.element, column = this.options.field, isComplex = !isNullOrUndefined(column) && isComplexField(column), complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column), mainDiv = this.parent.createElement("div", {
                className: "e-xlfl-maindiv",
                id: isComplex ? complexFieldName + "-xlflmenu" : column + "-xlflmenu"
            });
            this.dlgDiv = this.parent.createElement("div", {
                className: "e-xlflmenu",
                id: isComplex ? complexFieldName + "-xlfldlg" : column + "-xlfldlg"
            }), this.parent.element.appendChild(this.dlgDiv), this.dlgObj = new Dialog({
                header: this.getLocalizedLabel("CustomFilter"),
                isModal: !0,
                overlayClick: this.removeDialog.bind(this),
                showCloseIcon: !0,
                closeOnEscape: !1,
                target: document.body,
                visible: !1,
                enableRtl: this.parent.enableRtl,
                open: function() {
                    var row = _this.dlgObj.element.querySelector("table.e-xlfl-table>tr");
                    _this.options.column.filterTemplate ? row.querySelector("#" + _this.options.column.field + "-xlfl-frstvalue").focus() : row.cells[1].querySelector("input:not([type=hidden])").focus();
                },
                close: this.removeDialog.bind(this),
                created: this.createdDialog.bind(this, target, column),
                buttons: [ {
                    click: this.filterBtnClick.bind(this, column),
                    buttonModel: {
                        content: this.getLocalizedLabel("OKButton"),
                        isPrimary: !0,
                        cssClass: "e-xlfl-okbtn"
                    }
                }, {
                    click: this.removeDialog.bind(this),
                    buttonModel: {
                        content: this.getLocalizedLabel("CancelButton"),
                        cssClass: "e-xlfl-cancelbtn"
                    }
                } ],
                content: mainDiv,
                width: 430,
                animationSettings: {
                    effect: "None"
                }
            }), this.dlgObj.appendTo(this.dlgDiv);
        }, ExcelFilter.prototype.removeDialog = function() {
            this.removeObjects([ this.dropOptr, this.datePicker, this.dateTimePicker, this.actObj, this.numericTxtObj, this.dlgObj ]), 
            remove(this.dlgDiv);
        }, ExcelFilter.prototype.createdDialog = function(target, column) {
            this.renderCustomFilter(target, column), this.dlgObj.element.style.left = "0px", 
            this.dlgObj.element.style.top = "0px", Browser.isDevice && window.innerWidth < 440 && (this.dlgObj.element.style.width = "90%"), 
            this.dlgObj.show();
        }, ExcelFilter.prototype.renderCustomFilter = function(target, column) {
            var dlgConetntEle = this.dlgObj.element.querySelector(".e-xlfl-maindiv"), dlgFields = this.parent.createElement("div", {
                innerHTML: this.getLocalizedLabel("ShowRowsWhere"),
                className: "e-xlfl-dlgfields"
            });
            dlgConetntEle.appendChild(dlgFields);
            var fieldSet = this.parent.createElement("div", {
                innerHTML: this.options.displayName,
                className: "e-xlfl-fieldset"
            });
            dlgConetntEle.appendChild(fieldSet), this.renderFilterUI(column, dlgConetntEle);
        }, ExcelFilter.prototype.filterBtnClick = function(col) {
            var checkBoxValue, isComplex = !isNullOrUndefined(col) && isComplexField(col), complexFieldName = !isNullOrUndefined(col) && getComplexFieldID(col), colValue = isComplex ? complexFieldName : col, fValue = this.dlgDiv.querySelector("#" + colValue + "-xlfl-frstvalue").ej2_instances[0], fOperator = this.dlgDiv.querySelector("#" + colValue + "-xlfl-frstoptr").ej2_instances[0], sValue = this.dlgDiv.querySelector("#" + colValue + "-xlfl-secndvalue").ej2_instances[0], sOperator = this.dlgDiv.querySelector("#" + colValue + "-xlfl-secndoptr").ej2_instances[0];
            if ("string" === this.options.type) {
                checkBoxValue = this.dlgDiv.querySelector("#" + colValue + "-xlflmtcase").ej2_instances[0].checked;
            }
            var andRadio = this.dlgDiv.querySelector("#" + colValue + "e-xlfl-frstpredicate").ej2_instances[0], predicate = (this.dlgDiv.querySelector("#" + colValue + "e-xlfl-secndpredicate").ej2_instances[0], 
            andRadio.checked ? "and" : "or");
            null === sValue.value && (predicate = "or"), this.filterByColumn(this.options.field, fOperator.value, fValue.value, predicate, checkBoxValue, this.parent.filterSettings.ignoreAccent, sOperator.value, sValue.value), 
            this.removeDialog();
        }, ExcelFilter.prototype.filterByColumn = function(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue) {
            var mPredicate, col = this.parent.getColumnByField(fieldName), field = col.isForeignColumn() ? col.foreignKeyValue : fieldName, fColl = [];
            if (fColl.push({
                field: field,
                predicate: predicate,
                matchCase: matchCase,
                ignoreAccent: ignoreAccent,
                operator: firstOperator,
                value: firstValue,
                type: this.options.type
            }), isActionPrevent(this.parent)) this.parent.notify(preventBatch, {
                instance: this,
                handler: this.filterByColumn,
                arg1: fieldName,
                arg2: firstOperator,
                arg3: firstValue,
                arg4: predicate,
                arg5: matchCase,
                arg6: ignoreAccent,
                arg7: secondOperator,
                arg8: secondValue
            }); else {
                mPredicate = new Predicate$1(field, firstOperator.toLowerCase(), firstValue, !matchCase, ignoreAccent), 
                secondValue && (secondOperator = isNullOrUndefined(secondOperator) ? "equal" : secondOperator, 
                fColl.push({
                    field: field,
                    predicate: predicate,
                    matchCase: matchCase,
                    ignoreAccent: ignoreAccent,
                    operator: secondOperator,
                    value: secondValue,
                    type: this.options.type
                }), mPredicate = mPredicate[predicate](field, secondOperator.toLowerCase(), secondValue, !matchCase, ignoreAccent));
                var args = {
                    action: "filtering",
                    filterCollection: fColl,
                    field: this.options.field,
                    ejpredicate: mPredicate,
                    actualPredicate: fColl
                };
                col.isForeignColumn() ? this.foreignKeyFilter(args, fColl, mPredicate) : this.options.handler(args);
            }
        }, ExcelFilter.prototype.renderOperatorUI = function(column, table, elementID, predicates, isFirst) {
            var fieldElement = this.parent.createElement("tr", {
                className: "e-xlfl-fields"
            });
            table.appendChild(fieldElement);
            var xlfloptr = this.parent.createElement("td", {
                className: "e-xlfl-optr"
            });
            fieldElement.appendChild(xlfloptr);
            var optrDiv = this.parent.createElement("div", {
                className: "e-xlfl-optrdiv"
            }), isComplex = !isNullOrUndefined(column) && isComplexField(column), complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column), optrInput = this.parent.createElement("input", {
                id: isComplex ? complexFieldName + elementID : column + elementID
            });
            optrDiv.appendChild(optrInput), xlfloptr.appendChild(optrDiv);
            var optr = this.options.type + "Operator", dropDatasource = this.customFilterOperators[optr];
            this.optrData = dropDatasource;
            var selectedValue = this.dropSelectedVal(column, predicates, isFirst), menuText = "";
            this.menuItem && ((menuText = this.menuItem.text.slice(0, -3)) !== this.getLocalizedLabel("CustomFilter") && (selectedValue = isFirst ? menuText : void 0), 
            menuText === this.getLocalizedLabel("Between") && (selectedValue = this.getLocalizedLabel(isFirst ? "GreaterThanOrEqual" : "LessThanOrEqual"))), 
            this.dropOptr = new DropDownList({
                dataSource: dropDatasource,
                fields: {
                    text: "text",
                    value: "value"
                },
                text: selectedValue,
                open: this.dropDownOpen.bind(this),
                enableRtl: this.parent.enableRtl
            }), this.dropOptr.appendTo(optrInput);
            return {
                fieldElement: fieldElement,
                operator: this.getSelectedValue(selectedValue)
            };
        }, ExcelFilter.prototype.dropDownOpen = function(args) {
            args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
        }, ExcelFilter.prototype.getSelectedValue = function(text) {
            var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("text", "equal", text));
            return isNullOrUndefined(selectedField[0]) ? "" : selectedField[0].value;
        }, ExcelFilter.prototype.dropSelectedVal = function(col, predicates, isFirst) {
            var operator;
            return operator = predicates && predicates.length > 0 ? 2 === predicates.length ? isFirst ? predicates[0].operator : predicates[1].operator : isFirst ? predicates[0].operator : void 0 : isFirst ? "equal" : void 0, 
            this.getSelectedText(operator);
        }, ExcelFilter.prototype.getSelectedText = function(operator) {
            var selectedField = new DataManager(this.optrData).executeLocal(new Query().where("value", "equal", operator));
            return isNullOrUndefined(selectedField[0]) ? "" : selectedField[0].text;
        }, ExcelFilter.prototype.renderFilterUI = function(column, dlgConetntEle) {
            var predicates = this.existingPredicate[column], table = this.parent.createElement("table", {
                className: "e-xlfl-table"
            });
            dlgConetntEle.appendChild(table);
            var colGroup = this.parent.createElement("colGroup");
            colGroup.innerHTML = '<col style="width: 50%"></col><col style="width: 50%"></col>', 
            table.appendChild(colGroup);
            var optr = this.renderOperatorUI(column, table, "-xlfl-frstoptr", predicates, !0);
            this.renderFlValueUI(column, optr, "-xlfl-frstvalue", predicates, !0);
            var predicate = this.parent.createElement("tr", {
                className: "e-xlfl-predicate"
            });
            table.appendChild(predicate), this.renderRadioButton(column, predicate, predicates), 
            optr = this.renderOperatorUI(column, table, "-xlfl-secndoptr", predicates, !1), 
            this.renderFlValueUI(column, optr, "-xlfl-secndvalue", predicates, !1);
        }, ExcelFilter.prototype.renderRadioButton = function(column, tr, predicates) {
            var td = this.parent.createElement("td", {
                className: "e-xlfl-radio",
                attrs: {
                    colSpan: "2"
                }
            });
            tr.appendChild(td);
            var radioDiv = this.parent.createElement("div", {
                className: "e-xlfl-radiodiv",
                attrs: {
                    style: "display: inline-block"
                }
            }), isComplex = !isNullOrUndefined(column) && isComplexField(column), complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column), frstpredicate = this.parent.createElement("input", {
                id: isComplex ? complexFieldName + "e-xlfl-frstpredicate" : column + "e-xlfl-frstpredicate",
                attrs: {
                    type: "radio"
                }
            }), secndpredicate = this.parent.createElement("input", {
                id: isComplex ? complexFieldName + "e-xlfl-secndpredicate" : column + "e-xlfl-secndpredicate",
                attrs: {
                    type: "radio"
                }
            });
            radioDiv.appendChild(frstpredicate), radioDiv.appendChild(secndpredicate), td.appendChild(radioDiv), 
            "string" === this.options.type && this.renderMatchCase(column, tr, td, "-xlflmtcase", predicates);
            var andRadio = new RadioButton({
                label: this.getLocalizedLabel("AND"),
                name: "default",
                cssClass: "e-xlfl-radio-and",
                checked: !0,
                enableRtl: this.parent.enableRtl
            }), orRadio = new RadioButton({
                label: this.getLocalizedLabel("OR"),
                name: "default",
                cssClass: "e-xlfl-radio-or",
                enableRtl: this.parent.enableRtl
            });
            "and" === (predicates && 2 === predicates.length ? predicates[1].predicate : "and") ? (andRadio.checked = !0, 
            orRadio.checked = !1) : (orRadio.checked = !0, andRadio.checked = !1), andRadio.appendTo(frstpredicate), 
            orRadio.appendTo(secndpredicate);
        }, ExcelFilter.prototype.removeObjects = function(elements) {
            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
                var obj = elements_1[_i];
                obj && !obj.isDestroyed && obj.destroy();
            }
        }, ExcelFilter.prototype.renderFlValueUI = function(column, optr, elementId, predicates, isFirst) {
            var value = this.parent.createElement("td", {
                className: "e-xlfl-value"
            });
            optr.fieldElement.appendChild(value);
            var isComplex = !isNullOrUndefined(column) && isComplexField(column), complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column), valueDiv = this.parent.createElement("div", {
                className: "e-xlfl-valuediv"
            }), isFilteredCol = this.filterSettings.columns.some(function(col) {
                return column === col.field;
            }), fltrPredicates = this.options.filteredColumns.filter(function(col) {
                return col.field === column;
            });
            if (this.options.column.filterTemplate) {
                var data = {}, columnObj = this.parent.getColumnByField(column);
                if (isFilteredCol && "-xlfl-frstvalue" === elementId) {
                    data = {
                        column: predicates instanceof Array ? predicates[0] : predicates
                    };
                    var indx = this.options.column.columnData && fltrPredicates.length > 1 ? 1 === this.options.column.columnData.length ? 0 : 1 : 0;
                    data[this.options.field] = columnObj.foreignKeyValue ? this.options.column.columnData[indx][columnObj.foreignKeyValue] : fltrPredicates[indx].value, 
                    this.options.foreignKeyValue && (data[this.options.foreignKeyValue] = this.options.column.columnData[indx][columnObj.foreignKeyValue]);
                }
                appendChildren(valueDiv, this.options.column.getFilterTemplate()(data, this.parent, "filterTemplate")), 
                valueDiv.children[0].id = isComplex ? complexFieldName + elementId : column + elementId, 
                value.appendChild(valueDiv);
            } else {
                var valueInput = this.parent.createElement("input", {
                    id: isComplex ? complexFieldName + elementId : column + elementId
                });
                valueDiv.appendChild(valueInput), value.appendChild(valueDiv);
                var flValue = void 0, predicate = void 0;
                predicates && predicates.length > 0 && (flValue = (predicate = 2 === predicates.length ? isFirst ? predicates[0] : predicates[1] : isFirst ? predicates[0] : void 0) && predicate.operator === optr.operator ? predicate.value : void 0);
                ({
                    string: this.renderAutoComplete.bind(this),
                    number: this.renderNumericTextBox.bind(this),
                    date: this.renderDate.bind(this),
                    datetime: this.renderDateTime.bind(this)
                })[this.options.type](this.options, column, valueInput, flValue, this.parent.enableRtl);
            }
        }, ExcelFilter.prototype.renderMatchCase = function(column, tr, matchCase, elementId, predicates) {
            var matchCaseDiv = this.parent.createElement("div", {
                className: "e-xlfl-matchcasediv",
                attrs: {
                    style: "display: inline-block"
                }
            }), isComplex = !isNullOrUndefined(column) && isComplexField(column), complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column), matchCaseInput = this.parent.createElement("input", {
                id: isComplex ? complexFieldName + elementId : column + elementId,
                attrs: {
                    type: "checkbox"
                }
            });
            matchCaseDiv.appendChild(matchCaseInput), matchCase.appendChild(matchCaseDiv);
            var flValue = !!(predicates && predicates.length > 0) && (predicates && 2 === predicates.length ? predicates[1].matchCase : predicates[0].matchCase);
            new CheckBox({
                label: this.getLocalizedLabel("MatchCase"),
                enableRtl: this.parent.enableRtl,
                checked: flValue
            }).appendTo(matchCaseInput);
        }, ExcelFilter.prototype.renderDate = function(options, column, inputValue, fValue, isRtl) {
            var format = getCustomDateFormat(options.format, options.type);
            this.datePicker = new DatePicker({
                format: format,
                cssClass: "e-popup-flmenu",
                placeholder: this.getLocalizedLabel("CustomFilterDatePlaceHolder"),
                width: "100%",
                enableRtl: isRtl,
                value: new Date(fValue)
            }), this.datePicker.appendTo(inputValue);
        }, ExcelFilter.prototype.renderDateTime = function(options, column, inputValue, fValue, isRtl) {
            var format = getCustomDateFormat(options.format, options.type);
            this.dateTimePicker = new DateTimePicker({
                format: format,
                cssClass: "e-popup-flmenu",
                placeholder: this.getLocalizedLabel("CustomFilterDatePlaceHolder"),
                width: "100%",
                enableRtl: isRtl,
                value: new Date(fValue)
            }), this.dateTimePicker.appendTo(inputValue);
        }, ExcelFilter.prototype.completeAction = function(e) {
            e.result = distinctStringValues(e.result);
        }, ExcelFilter.prototype.renderNumericTextBox = function(options, column, inputValue, fValue, isRtl) {
            this.numericTxtObj = new NumericTextBox({
                format: options.format,
                placeholder: this.getLocalizedLabel("CustomFilterPlaceHolder"),
                enableRtl: isRtl,
                value: fValue
            }), this.numericTxtObj.appendTo(inputValue);
        }, ExcelFilter.prototype.renderAutoComplete = function(options, column, inputValue, fValue, isRtl) {
            var _this = this, colObj = this.parent.getColumnByField(column), isForeignColumn = colObj.isForeignColumn(), dataSource = isForeignColumn ? colObj.dataSource : options.dataSource, fields = {
                value: isForeignColumn ? colObj.foreignKeyValue : column
            }, actObj = new AutoComplete({
                dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
                fields: fields,
                query: this.parent.query.clone(),
                sortOrder: "Ascending",
                locale: this.parent.locale,
                autofill: !0,
                focus: function() {
                    var isComplex = !isNullOrUndefined(column) && isComplexField(column), complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column), columnvalue = isComplex ? complexFieldName : column;
                    actObj.filterType = _this.dlgDiv.querySelector("#" + columnvalue + (inputValue.id === columnvalue + "-xlfl-frstvalue" ? "-xlfl-frstoptr" : "-xlfl-secndoptr")).ej2_instances[0].value, 
                    actObj.ignoreCase = "string" !== options.type || !_this.dlgDiv.querySelector("#" + columnvalue + "-xlflmtcase").ej2_instances[0].checked, 
                    actObj.filterType = isNullOrUndefined(actObj.filterType) ? "equal" : actObj.filterType;
                },
                placeholder: this.getLocalizedLabel("CustomFilterPlaceHolder"),
                enableRtl: isRtl,
                actionComplete: function(e) {
                    var isComplex = !isNullOrUndefined(column) && isComplexField(column);
                    e.result = e.result.filter(function(obj, index, arr) {
                        return arr.map(function(mapObject) {
                            return isComplex ? _this.performComplexDataOperation(actObj.fields.value, mapObject) : mapObject[actObj.fields.value];
                        }).indexOf(isComplex ? _this.performComplexDataOperation(actObj.fields.value, obj) : obj[_this.actObj.fields.value]) === index;
                    });
                },
                value: fValue
            });
            actObj.appendTo(inputValue), this.actObj = actObj;
        }, ExcelFilter.prototype.performComplexDataOperation = function(value, mapObject) {
            for (var returnObj, length = value.split(".").length, splits = value.split("."), duplicateMap = mapObject, i = 0; i < length; i++) duplicateMap = returnObj = duplicateMap[splits[i]];
            return returnObj;
        }, ExcelFilter.prototype.getModuleName = function() {
            return "excelFilter";
        }, ExcelFilter;
    }(CheckBoxFilter), Filter = function() {
        function Filter(parent, filterSettings, serviceLocator) {
            this.predicate = "and", this.contentRefresh = !0, this.values = {}, this.cellText = {}, 
            this.nextFlMenuOpen = "", this.type = {
                Menu: FilterMenuRenderer,
                CheckBox: CheckBoxFilter,
                Excel: ExcelFilter
            }, this.filterOperators = {
                contains: "contains",
                endsWith: "endswith",
                equal: "equal",
                greaterThan: "greaterthan",
                greaterThanOrEqual: "greaterthanorequal",
                lessThan: "lessthan",
                lessThanOrEqual: "lessthanorequal",
                notEqual: "notequal",
                startsWith: "startswith"
            }, this.fltrDlgDetails = {
                field: "",
                isOpen: !1
            }, this.actualPredicate = {}, this.parent = parent, this.filterSettings = filterSettings, 
            this.serviceLocator = serviceLocator, this.addEventListener();
        }
        return Filter.prototype.render = function(e) {
            if (!DataUtil.getObject("args.isFrozen", e)) {
                var gObj = this.parent;
                if (this.l10n = this.serviceLocator.getService("localization"), this.getLocalizedCustomOperators(), 
                "FilterBar" === this.parent.filterSettings.type && gObj.columns.length) {
                    var fltrElem = this.parent.element.querySelector(".e-filterbar");
                    fltrElem && remove(fltrElem);
                    var rowRenderer = new RowRenderer(this.serviceLocator, CellType.Filter, gObj), row = void 0;
                    this.serviceLocator.getService("cellRendererFactory").addCellRenderer(CellType.Filter, new FilterCellRenderer(this.parent, this.serviceLocator)), 
                    this.valueFormatter = this.serviceLocator.getService("valueFormatter"), rowRenderer.element = this.parent.createElement("tr", {
                        className: "e-filterbar"
                    }), (row = this.generateRow()).data = this.values, this.parent.getHeaderContent().querySelector("thead").appendChild(rowRenderer.element), 
                    this.element = rowRenderer.render(row, gObj.getColumns(), null, null, rowRenderer.element);
                    var detail = this.element.querySelector(".e-detailheadercell");
                    detail && (detail.className = "e-filterbarcell e-mastercell");
                    var gCells = [].slice.call(this.element.querySelectorAll(".e-grouptopleftcell"));
                    gCells.length && gCells[gCells.length - 1].classList.add("e-lastgrouptopleftcell"), 
                    this.wireEvents(), this.parent.notify(freezeRender, {
                        case: "filter"
                    });
                }
            }
        }, Filter.prototype.destroy = function() {
            var gridElement = this.parent.element;
            if (gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.filterModule && this.filterModule.destroy(), 
            this.filterSettings.columns = [], this.updateFilterMsg(), this.removeEventListener(), 
            this.unWireEvents(), this.element)) {
                remove(this.element);
                var filterBarElement = this.parent.getHeaderContent().querySelector(".e-filterbar");
                this.parent.getFrozenColumns() && filterBarElement && remove(filterBarElement);
            }
        }, Filter.prototype.generateRow = function(index) {
            var row = new Row({});
            return row.cells = this.generateCells(), row;
        }, Filter.prototype.generateCells = function() {
            var cells = [];
            if (this.parent.allowGrouping) for (var c = 0, len = this.parent.groupSettings.columns.length; c < len; c++) cells.push(this.generateCell({}, CellType.HeaderIndent));
            (this.parent.detailTemplate || this.parent.childGrid) && cells.push(this.generateCell({}, CellType.DetailHeader));
            for (var _i = 0, _a = this.parent.getColumns(); _i < _a.length; _i++) {
                var dummy = _a[_i];
                cells.push(this.generateCell(dummy));
            }
            return cells;
        }, Filter.prototype.generateCell = function(column, cellType) {
            var opt = {
                visible: column.visible,
                isDataCell: !1,
                rowId: "",
                column: column,
                cellType: cellType || CellType.Filter,
                attributes: {
                    title: this.l10n.getConstant("FilterbarTitle")
                }
            };
            return new Cell(opt);
        }, Filter.prototype.updateModel = function() {
            var col = this.parent.getColumnByField(this.fieldName), field = col.isForeignColumn() ? col.foreignKeyValue : this.fieldName;
            this.currentFilterObject = {
                field: field,
                operator: this.operator,
                value: this.value,
                predicate: this.predicate,
                matchCase: this.matchCase,
                ignoreAccent: this.ignoreAccent,
                actualFilterValue: {},
                actualOperator: {}
            };
            var index = this.getFilteredColsIndexByField(col);
            index > -1 ? this.filterSettings.columns[index] = this.currentFilterObject : this.filterSettings.columns.push(this.currentFilterObject), 
            this.filterSettings.columns = this.filterSettings.columns, this.parent.dataBind();
        }, Filter.prototype.getFilteredColsIndexByField = function(col) {
            for (var cols = this.filterSettings.columns, i = 0, len = cols.length; i < len; i++) if (cols[i].field === col.field || col.isForeignColumn() && cols[i].field === col.foreignKeyValue) return i;
            return -1;
        }, Filter.prototype.onActionComplete = function(e) {
            var args = this.isRemove ? {
                requestType: "filtering",
                type: actionComplete
            } : {
                currentFilterObject: this.currentFilterObject,
                currentFilteringColumn: isNullOrUndefined(this.column) ? void 0 : this.column.field,
                columns: this.filterSettings.columns,
                requestType: "filtering",
                type: actionComplete
            };
            this.parent.trigger(actionComplete, extend(e, args)), this.isRemove = !1;
        }, Filter.prototype.wireEvents = function() {
            EventHandler.add(this.parent.getHeaderContent(), "keyup", this.keyUpHandler, this);
        }, Filter.prototype.unWireEvents = function() {
            EventHandler.remove(this.parent.getHeaderContent(), "keyup", this.keyUpHandler);
        }, Filter.prototype.enableAfterRender = function(e) {
            e.module === this.getModuleName() && e.enable && this.render();
        }, Filter.prototype.initialEnd = function() {
            if (this.parent.off(contentReady, this.initialEnd), this.parent.getColumns().length && this.filterSettings.columns.length) {
                var gObj = this.parent;
                this.contentRefresh = !1;
                for (var _i = 0, _a = gObj.filterSettings.columns; _i < _a.length; _i++) {
                    var col = _a[_i];
                    this.filterByColumn(col.field, col.operator, col.value, col.predicate, col.matchCase, col.ignoreAccent, col.actualFilterValue, col.actualOperator);
                }
                this.updateFilterMsg(), this.contentRefresh = !0;
            }
        }, Filter.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(uiUpdate, this.enableAfterRender, this), 
            this.parent.on("filtering-complete", this.onActionComplete, this), this.parent.on(inBoundModelChanged, this.onPropertyChanged, this), 
            this.parent.on(keyPressed, this.keyUpHandler, this), this.parent.on(columnPositionChanged, this.columnPositionChanged, this), 
            this.parent.on(headerRefreshed, this.render, this), this.parent.on(contentReady, this.initialEnd, this), 
            this.parent.on("filter-menu-close", this.filterMenuClose, this), EventHandler.add(document, "click", this.clickHandler, this), 
            this.parent.on("filterOpen", this.columnMenuFilter, this), this.parent.on(click, this.filterIconClickHandler, this));
        }, Filter.prototype.removeEventListener = function() {
            EventHandler.remove(document, "click", this.clickHandler), this.parent.isDestroyed || (this.parent.off(uiUpdate, this.enableAfterRender), 
            this.parent.off("filtering-complete", this.onActionComplete), this.parent.off(inBoundModelChanged, this.onPropertyChanged), 
            this.parent.off(keyPressed, this.keyUpHandler), this.parent.off(columnPositionChanged, this.columnPositionChanged), 
            this.parent.off(headerRefreshed, this.render), this.parent.off("filterOpen", this.columnMenuFilter), 
            this.parent.off("filter-menu-close", this.filterMenuClose), this.parent.off(click, this.filterIconClickHandler));
        }, Filter.prototype.filterMenuClose = function(args) {
            this.fltrDlgDetails.isOpen = !1;
        }, Filter.prototype.filterByColumn = function(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {
            var filterCell, gObj = this.parent;
            if (this.column = gObj.getColumnByField(fieldName), "FilterBar" === this.filterSettings.type && (filterCell = gObj.getHeaderContent().querySelector("[id='" + this.column.field + "_filterBarcell']")), 
            isNullOrUndefined(this.column.allowFiltering) || this.column.allowFiltering) if (isActionPrevent(gObj)) gObj.notify(preventBatch, {
                instance: this,
                handler: this.filterByColumn,
                arg1: fieldName,
                arg2: filterOperator,
                arg3: filterValue,
                arg4: predicate,
                arg5: matchCase,
                arg6: ignoreAccent,
                arg7: actualFilterValue,
                arg8: actualOperator
            }); else {
                if (this.value = filterValue, this.matchCase = matchCase || !1, this.ignoreAccent = this.ignoreAccent = isNullOrUndefined(ignoreAccent) ? this.parent.filterSettings.ignoreAccent : ignoreAccent, 
                this.fieldName = fieldName, this.predicate = predicate || "and", this.operator = filterOperator, 
                filterValue = !isNullOrUndefined(filterValue) && filterValue.toString(), "number" !== this.column.type && "date" !== this.column.type || (this.matchCase = !0), 
                gObj.getColumnHeaderByField(fieldName).setAttribute("aria-filtered", "true"), filterValue.length < 1 || this.checkForSkipInput(this.column, filterValue)) return this.filterStatusMsg = filterValue.length < 1 ? "" : this.l10n.getConstant("InvalidFilterMessage"), 
                void this.updateFilterMsg();
                filterCell && "FilterBar" === this.filterSettings.type && filterCell.value !== filterValue && (filterCell.value = filterValue), 
                isNullOrUndefined(this.column.format) ? this.values[this.column.field] = filterValue : this.applyColumnFormat(filterValue), 
                this.actualPredicate[this.fieldName] = [ {
                    field: this.fieldName,
                    predicate: predicate,
                    matchCase: matchCase,
                    ignoreAccent: ignoreAccent,
                    operator: this.operator,
                    value: this.value,
                    type: this.column.type
                } ], this.addFilteredClass(this.fieldName), this.checkAlreadyColFiltered(this.column.field) || this.updateModel();
            }
        }, Filter.prototype.applyColumnFormat = function(filterValue) {
            var getFlvalue = "date" === this.column.type || "datetime" === this.column.type ? new Date(filterValue) : parseFloat(filterValue);
            this.values[this.column.field] = this.setFormatForFlColumn(getFlvalue, this.column);
        }, Filter.prototype.onPropertyChanged = function(e) {
            if (e.module === this.getModuleName()) for (var _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "columns":
                    this.contentRefresh && (this.parent.notify(modelChanged, {
                        currentFilterObject: this.currentFilterObject,
                        currentFilteringColumn: this.column ? this.column.field : void 0,
                        columns: this.filterSettings.columns,
                        requestType: "filtering",
                        type: actionBegin
                    }), this.refreshFilterSettings(), this.updateFilterMsg(), this.updateFilter());
                    break;

                  case "showFilterBarStatus":
                    e.properties[prop] ? this.updateFilterMsg() : this.parent.allowPaging && this.parent.updateExternalMessage("");
                    break;

                  case "type":
                    this.parent.refreshHeader(), this.refreshFilterSettings();
                }
            }
        }, Filter.prototype.refreshFilterSettings = function() {
            if ("FilterBar" === this.filterSettings.type) {
                for (var i = 0; i < this.filterSettings.columns.length; i++) {
                    this.column = this.parent.getColumnByField(this.filterSettings.columns[i].field) || getColumnByForeignKeyValue(this.filterSettings.columns[i].field, this.parent.getForeignKeyColumns());
                    var filterValue = this.filterSettings.columns[i].value;
                    if (filterValue = !isNullOrUndefined(filterValue) && filterValue.toString(), isNullOrUndefined(this.column.format)) {
                        var key = this.filterSettings.columns[i].field;
                        this.values[key] = this.filterSettings.columns[i].value;
                    } else this.applyColumnFormat(filterValue);
                    (filterElement = this.getFilterBarElement(this.filterSettings.columns[i].field)) && (isNullOrUndefined(this.cellText[this.filterSettings.columns[i].field]) ? filterElement.value = this.filterSettings.columns[i].value : filterElement.value = this.cellText[this.filterSettings.columns[i].field]);
                }
                if (0 === this.filterSettings.columns.length) {
                    var col = this.parent.getColumns();
                    for (i = 0; i < col.length; i++) {
                        var filterElement;
                        (filterElement = this.getFilterBarElement(col[i].field)) && "" !== filterElement.value && (filterElement.value = "", 
                        delete this.values[col[i].field]);
                    }
                }
            }
        }, Filter.prototype.getFilterBarElement = function(col) {
            var filterElement, selector = "[id='" + col + "_filterBarcell']";
            return selector && !isNullOrUndefined(this.element) && (filterElement = this.element.querySelector(selector)), 
            filterElement;
        }, Filter.prototype.refreshFilter = function() {
            this.refreshFilterSettings(), this.updateFilterMsg();
        }, Filter.prototype.clearFiltering = function() {
            var cols = getActualPropFromColl(this.filterSettings.columns);
            if (isActionPrevent(this.parent)) this.parent.notify(preventBatch, {
                instance: this,
                handler: this.clearFiltering
            }); else {
                for (var i = 0, len = cols.length; i < len; i++) this.removeFilteredColsByField(cols[i].field, !1);
                if (0 === this.parent.filterSettings.columns.length && this.parent.element.querySelector(".e-filtered")) {
                    var fltrElement = [].slice.call(this.parent.element.querySelectorAll(".e-filtered"));
                    for (i = 0, len = fltrElement.length; i < len; i++) fltrElement[0].removeAttribute("aria-filtered"), 
                    fltrElement[0].classList.remove("e-filtered");
                }
                this.isRemove = !0, this.filterStatusMsg = "", this.updateFilterMsg();
            }
        }, Filter.prototype.checkAlreadyColFiltered = function(field) {
            for (var _i = 0, columns_1 = this.filterSettings.columns; _i < columns_1.length; _i++) {
                var col = columns_1[_i];
                if (col.field === field && col.value === this.value && col.operator === this.operator && col.predicate === this.predicate) return !0;
            }
            return !1;
        }, Filter.prototype.columnMenuFilter = function(args) {
            this.column = args.col;
            var ele = closest(args.target, "#" + args.id);
            args.isClose && !ele ? this.filterModule.closeDialog() : ele && this.filterDialogOpen(this.column, args.target);
        }, Filter.prototype.filterDialogOpen = function(col, target, left, top) {
            var gObj = this.parent;
            this.filterModule && this.filterModule.closeDialog(), this.filterModule = new this.type[col.filter.type || this.parent.filterSettings.type](this.parent, gObj.filterSettings, this.serviceLocator, this.customOperators, this);
            var dataSource = col.filter.dataSource || gObj.getDataModule().dataManager;
            this.filterModule.openDialog({
                type: col.type,
                field: col.field,
                displayName: col.headerText,
                dataSource: dataSource,
                format: col.format,
                filteredColumns: gObj.filterSettings.columns,
                target: target,
                sortedColumns: gObj.sortSettings.columns,
                formatFn: col.getFormatter(),
                parserFn: col.getParser(),
                query: gObj.query,
                template: col.getFilterItemTemplate(),
                hideSearchbox: !isNullOrUndefined(col.filter.hideSearchbox) && col.filter.hideSearchbox,
                handler: this.filterHandler.bind(this),
                localizedStrings: gObj.getLocaleConstants(),
                position: {
                    X: left,
                    Y: top
                },
                column: col,
                foreignKeyValue: col.foreignKeyValue,
                actualPredicate: this.actualPredicate,
                localeObj: this.parent.localeObj
            });
        }, Filter.prototype.removeFilteredColsByField = function(field, isClearFilterBar) {
            var cols = this.filterSettings.columns;
            if (isActionPrevent(this.parent)) {
                var args = {
                    instance: this,
                    handler: this.removeFilteredColsByField,
                    arg1: field,
                    arg2: isClearFilterBar
                };
                this.parent.notify(preventBatch, args);
            } else {
                for (var i = 0, len = cols.length; i < len; i++) {
                    var column = this.parent.getColumnByField(field) || getColumnByForeignKeyValue(field, this.parent.getForeignKeyColumns());
                    if (cols[i].field === field || cols[i].field === column.foreignKeyValue) {
                        if ("FilterBar" === this.filterSettings.type && !isClearFilterBar) {
                            var selector = "[id='" + cols[i].field + "_filterBarcell']";
                            this.parent.getHeaderContent().querySelector(selector).value = "", delete this.values[field];
                        }
                        cols.splice(i, 1);
                        var fltrElement = this.parent.getColumnHeaderByField(column.field);
                        if (fltrElement.removeAttribute("aria-filtered"), "FilterBar" !== this.filterSettings.type) {
                            var iconClass = this.parent.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
                            fltrElement.querySelector(iconClass).classList.remove("e-filtered");
                        }
                        this.isRemove = !0, this.actualPredicate[field] && delete this.actualPredicate[field], 
                        this.values[field] && delete this.values[field], this.parent.notify(modelChanged, {
                            requestType: "filtering",
                            type: actionBegin,
                            currentFilterObject: {
                                field: column.field,
                                operator: this.operator,
                                value: this.value,
                                predicate: this.predicate,
                                matchCase: this.matchCase,
                                ignoreAccent: this.ignoreAccent,
                                actualFilterValue: {},
                                actualOperator: {}
                            },
                            currentFilterColumn: column
                        });
                        break;
                    }
                }
                this.updateFilterMsg();
            }
        }, Filter.prototype.getModuleName = function() {
            return "filter";
        }, Filter.prototype.keyUpHandler = function(e) {
            var gObj = this.parent, target = e.target;
            if (target && matches(target, ".e-filterbar input")) {
                var closeHeaderEle = closest(target, "th.e-filterbarcell");
                if (this.column = gObj.getColumnByUid(closeHeaderEle.getAttribute("e-mappinguid")), 
                !this.column) return;
                "Immediate" !== this.filterSettings.mode && 13 !== e.keyCode || 9 === e.keyCode || (this.value = target.value.trim(), 
                this.processFilter(e));
            }
        }, Filter.prototype.updateCrossIcon = function(element) {
            element.value.length && element.nextElementSibling.classList.remove("e-hide");
        }, Filter.prototype.updateFilterMsg = function() {
            if ("FilterBar" === this.filterSettings.type) {
                var gObj = this.parent, getFormatFlValue = void 0, columns = this.filterSettings.columns, column = (this.serviceLocator.getService("valueFormatter"), 
                void 0);
                if (!this.filterSettings.showFilterBarStatus) return;
                if (columns.length > 0 && this.filterStatusMsg !== this.l10n.getConstant("InvalidFilterMessage")) {
                    this.filterStatusMsg = "";
                    for (var index = 0; index < columns.length; index++) if (column = gObj.getColumnByField(columns[index].field) || getColumnByForeignKeyValue(columns[index].field, this.parent.getForeignKeyColumns()), 
                    index && (this.filterStatusMsg += " && "), isNullOrUndefined(column.format)) this.filterStatusMsg += column.headerText + ": " + this.values[column.field]; else {
                        var flValue = "date" === column.type || "datetime" === column.type ? new Date(this.values[column.field]) : this.values[column.field];
                        if ("date" !== column.type && "datetime" !== column.type) {
                            getFormatFlValue = this.serviceLocator.getService("valueFormatter").toView(flValue, column.getParser()).toString();
                        } else getFormatFlValue = this.setFormatForFlColumn(flValue, column);
                        this.filterStatusMsg += column.headerText + ": " + getFormatFlValue;
                    }
                }
                gObj.allowPaging && gObj.updateExternalMessage(this.filterStatusMsg), this.filterStatusMsg = "";
            }
        }, Filter.prototype.setFormatForFlColumn = function(value, column) {
            return this.serviceLocator.getService("valueFormatter").toView(value, column.getFormatter()).toString();
        }, Filter.prototype.checkForSkipInput = function(column, value) {
            var isSkip, skipInput;
            if ("number" === column.type) skipInput = [ "=", " ", "!" ], (DataUtil.operatorSymbols[value] || skipInput.indexOf(value) > -1) && (isSkip = !0); else if ("string" === column.type) {
                skipInput = [ ">", "<", "=", "!" ];
                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                    var val = value_1[_i];
                    skipInput.indexOf(val) > -1 && (isSkip = !0);
                }
            }
            return isSkip;
        }, Filter.prototype.processFilter = function(e) {
            this.stopTimer(), this.startTimer(e);
        }, Filter.prototype.startTimer = function(e) {
            var _this = this;
            this.timer = window.setInterval(function() {
                _this.onTimerTick();
            }, 13 === e.keyCode ? 0 : this.filterSettings.immediateModeDelay);
        }, Filter.prototype.stopTimer = function() {
            window.clearInterval(this.timer);
        }, Filter.prototype.onTimerTick = function() {
            var selector = "[id='" + this.column.field + "_filterBarcell']", filterElement = this.element.querySelector(selector);
            !filterElement && this.parent.getFrozenColumns() && (filterElement = this.parent.getHeaderContent().querySelector(selector));
            var filterValue;
            if (this.cellText[this.column.field] = filterElement.value, this.stopTimer(), isNullOrUndefined(this.column.filterBarTemplate)) filterValue = JSON.parse(JSON.stringify(filterElement.value)); else {
                var templateRead = this.column.filterBarTemplate.read;
                "string" == typeof templateRead && (templateRead = getValue(templateRead, window)), 
                isNullOrUndefined(templateRead) || (this.value = templateRead.call(this, filterElement));
            }
            isNullOrUndefined(this.value) || "" === this.value ? this.removeFilteredColsByField(this.column.field) : (this.validateFilterValue(this.value), 
            this.filterByColumn(this.column.field, this.operator, this.value, this.predicate, this.matchCase, this.ignoreAccent), 
            filterElement.value = filterValue, this.updateFilterMsg());
        }, Filter.prototype.validateFilterValue = function(value) {
            var skipInput, index;
            this.parent;
            switch (this.matchCase = !0, this.column.type) {
              case "number":
                this.operator = this.filterOperators.equal, skipInput = [ ">", "<", "=", "!" ];
                for (var i = 0; i < value.length; i++) if (skipInput.indexOf(value[i]) > -1) {
                    index = i;
                    break;
                }
                this.getOperator(value.substring(index)), 0 !== index && (this.value = value.substring(0, index)), 
                "" !== this.value && value.length >= 1 && (this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type)), 
                isNaN(this.value) && (this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage"));
                break;

              case "date":
              case "datetime":
                this.operator = this.filterOperators.equal, "" === this.value || this.value instanceof Date || (this.getOperator(value), 
                this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type), 
                isNullOrUndefined(this.value) && (this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage")));
                break;

              case "string":
                this.matchCase = !1, "*" === value.charAt(0) ? (this.value = this.value.slice(1), 
                this.operator = this.filterOperators.startsWith) : "%" === value.charAt(value.length - 1) ? (this.value = this.value.slice(0, -1), 
                this.operator = this.filterOperators.startsWith) : "%" === value.charAt(0) ? (this.value = this.value.slice(1), 
                this.operator = this.filterOperators.endsWith) : this.operator = this.filterOperators.startsWith;
                break;

              case "boolean":
                "true" === value.toLowerCase() || "1" === value ? this.value = !0 : "false" === value.toLowerCase() || "0" === value ? this.value = !1 : value.length && (this.filterStatusMsg = this.l10n.getConstant("InvalidFilterMessage")), 
                this.operator = this.filterOperators.equal;
                break;

              default:
                this.operator = this.filterOperators.equal;
            }
        }, Filter.prototype.getOperator = function(value) {
            var singleOp = value.charAt(0), multipleOp = value.slice(0, 2), operators = extend({
                "=": this.filterOperators.equal,
                "!": this.filterOperators.notEqual
            }, DataUtil.operatorSymbols);
            (operators.hasOwnProperty(singleOp) || operators.hasOwnProperty(multipleOp)) && (this.operator = operators[singleOp], 
            this.value = value.substring(1), this.operator || (this.operator = operators[multipleOp], 
            this.value = value.substring(2))), this.operator !== this.filterOperators.lessThan && this.operator !== this.filterOperators.greaterThan || "=" === this.value.charAt(0) && (this.operator = this.operator + "orequal", 
            this.value = this.value.substring(1));
        }, Filter.prototype.columnPositionChanged = function(e) {
            this.parent.filterSettings.type;
        }, Filter.prototype.getLocalizedCustomOperators = function() {
            var numOptr = [ {
                value: "equal",
                text: this.l10n.getConstant("Equal")
            }, {
                value: "greaterthan",
                text: this.l10n.getConstant("GreaterThan")
            }, {
                value: "greaterthanorequal",
                text: this.l10n.getConstant("GreaterThanOrEqual")
            }, {
                value: "lessthan",
                text: this.l10n.getConstant("LessThan")
            }, {
                value: "lessthanorequal",
                text: this.l10n.getConstant("LessThanOrEqual")
            }, {
                value: "notequal",
                text: this.l10n.getConstant("NotEqual")
            } ];
            this.customOperators = {
                stringOperator: [ {
                    value: "startswith",
                    text: this.l10n.getConstant("StartsWith")
                }, {
                    value: "endswith",
                    text: this.l10n.getConstant("EndsWith")
                }, {
                    value: "contains",
                    text: this.l10n.getConstant("Contains")
                }, {
                    value: "equal",
                    text: this.l10n.getConstant("Equal")
                }, {
                    value: "notequal",
                    text: this.l10n.getConstant("NotEqual")
                } ],
                numberOperator: numOptr,
                dateOperator: numOptr,
                datetimeOperator: numOptr,
                booleanOperator: [ {
                    value: "equal",
                    text: this.l10n.getConstant("Equal")
                }, {
                    value: "notequal",
                    text: this.l10n.getConstant("NotEqual")
                } ]
            };
        }, Filter.prototype.filterIconClickHandler = function(e) {
            var target = e.target;
            if (target.classList.contains("e-filtermenudiv") && ("Menu" === this.parent.filterSettings.type || "CheckBox" === this.parent.filterSettings.type || "Excel" === this.parent.filterSettings.type)) {
                var gObj = this.parent, col = gObj.getColumnByUid(parentsUntil(target, "e-headercell").firstElementChild.getAttribute("e-mappinguid")), gClient = gObj.element.getBoundingClientRect(), fClient = target.getBoundingClientRect();
                if (this.column = col, this.fltrDlgDetails.field === col.field && this.fltrDlgDetails.isOpen) return;
                this.filterModule && this.filterModule.closeDialog(), this.fltrDlgDetails = {
                    field: col.field,
                    isOpen: !0
                }, this.filterDialogOpen(this.column, target, fClient.right - gClient.left, fClient.bottom - gClient.top);
            }
        }, Filter.prototype.clickHandler = function(e) {
            if ("Immediate" === this.filterSettings.mode || "Menu" === this.parent.filterSettings.type || "CheckBox" === this.parent.filterSettings.type || "Excel" === this.parent.filterSettings.type) {
                this.parent;
                var target = e.target, datepickerEle = target.classList.contains("e-day");
                if (parentsUntil(target, "e-filter-popup") || target.classList.contains("e-filtermenudiv")) return;
                if (!this.filterModule || parentsUntil(target, "e-popup-wrapper") || closest(target, ".e-filter-item.e-menu-item") || parentsUntil(target, "e-popup") || datepickerEle || this.filterModule.closeDialog(target), 
                "Immediate" === this.filterSettings.mode && target.classList.contains("e-clear-icon")) {
                    var targetText = target.previousElementSibling;
                    this.removeFilteredColsByField(targetText.id.slice(0, -14));
                }
            }
        }, Filter.prototype.filterHandler = function(args) {
            var filterIconElement;
            this.actualPredicate[args.field] = args.actualPredicate;
            for (var dataManager = new DataManager(this.filterSettings.columns), query = new Query().where("field", this.filterOperators.equal, args.field), result = dataManager.executeLocal(query), i = 0; i < result.length; i++) {
                for (var index = -1, j = 0; j < this.filterSettings.columns.length; j++) if (result[i].field === this.filterSettings.columns[j].field) {
                    index = j;
                    break;
                }
                -1 !== index && this.filterSettings.columns.splice(index, 1);
            }
            this.values[args.field] && delete this.values[args.field];
            var iconClass = this.parent.showColumnMenu ? ".e-columnmenu" : ".e-icon-filter";
            filterIconElement = this.parent.getColumnHeaderByField(args.field).querySelector(iconClass), 
            "filtering" === args.action ? (this.filterSettings.columns = this.filterSettings.columns.concat(args.filterCollection), 
            this.filterSettings.columns.length && filterIconElement && filterIconElement.classList.add("e-filtered")) : (filterIconElement && filterIconElement.classList.remove("e-filtered"), 
            this.parent.renderModule.refresh()), this.parent.dataBind();
        }, Filter.prototype.updateFilter = function() {
            for (var cols = this.filterSettings.columns, i = 0; i < cols.length; i++) {
                this.column = this.parent.getColumnByField(cols[i].field) || getColumnByForeignKeyValue(cols[i].field, this.parent.getForeignKeyColumns());
                var fieldName = cols[i].field;
                this.parent.getColumnByField(cols[i].field) || (fieldName = getColumnByForeignKeyValue(cols[i].field, this.parent.getForeignKeyColumns()).field), 
                this.refreshFilterIcon(fieldName, cols[i].operator, cols[i].value, cols[i].type, cols[i].predicate, cols[i].matchCase, cols[i].ignoreAccent);
            }
        }, Filter.prototype.refreshFilterIcon = function(fieldName, operator, value, type, predicate, matchCase, ignoreAccent) {
            this.actualPredicate[fieldName] = [ {
                field: fieldName,
                predicate: predicate,
                matchCase: matchCase,
                ignoreAccent: ignoreAccent,
                operator: operator,
                value: value,
                type: type
            } ], this.addFilteredClass(fieldName);
        }, Filter.prototype.addFilteredClass = function(fieldName) {
            var filterIconElement;
            (filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector(".e-icon-filter")) && filterIconElement.classList.add("e-filtered");
        }, Filter;
    }(), resizeClassList = {
        root: "e-rhandler",
        suppress: "e-rsuppress",
        icon: "e-ricon",
        helper: "e-rhelper",
        header: "th.e-headercell",
        cursor: "e-rcursor"
    }, Resize = function() {
        function Resize(parent) {
            this.tapped = !1, this.isDblClk = !0, this.parent = parent, this.parent.isDestroyed || (this.widthService = new ColumnWidthService(parent), 
            this.addEventListener());
        }
        return Resize.prototype.autoFitColumns = function(fName) {
            var columnName = void 0 === fName || null === fName || fName.length <= 0 ? this.parent.getColumns().map(function(x) {
                return x.field;
            }) : "string" == typeof fName ? [ fName ] : fName;
            this.findColumn(columnName);
        }, Resize.prototype.resizeColumn = function(fName, index, id) {
            var headerTable, contentTable, footerTable, headerTextClone, contentTextClone, gObj = this.parent, tWidth = 0, indentWidth = 0, uid = id || this.parent.getUidByColumnField(fName), columnIndex = this.parent.getNormalizedColumnIndex(uid), frzCols = gObj.getFrozenColumns();
            isNullOrUndefined(gObj.getFooterContent()) || (footerTable = gObj.getFooterContentTable()), 
            frzCols ? index < frzCols ? (headerTable = gObj.getHeaderTable(), contentTable = gObj.getContentTable(), 
            headerTextClone = headerTable.querySelectorAll("th")[columnIndex].cloneNode(!0), 
            contentTextClone = contentTable.querySelectorAll("td:nth-child(" + (columnIndex + 1) + ")")) : (headerTable = gObj.getHeaderContent().querySelector(".e-movableheader").children[0], 
            contentTable = gObj.getContent().querySelector(".e-movablecontent").children[0], 
            headerTextClone = headerTable.querySelectorAll("th")[columnIndex - frzCols].cloneNode(!0), 
            contentTextClone = contentTable.querySelectorAll("td:nth-child(" + (columnIndex - frzCols + 1) + ")")) : (headerTable = gObj.getHeaderTable(), 
            contentTable = gObj.getContentTable(), headerTextClone = headerTable.querySelectorAll("th")[columnIndex].cloneNode(!0), 
            contentTextClone = contentTable.querySelectorAll("td:nth-child(" + (columnIndex + 1) + "):not(.e-groupcaption)"));
            var indentWidthClone = headerTable.querySelector("tr").querySelectorAll(".e-grouptopleftcell");
            if (indentWidthClone.length > 0) for (var i = 0; i < indentWidthClone.length; i++) indentWidth += indentWidthClone[i].offsetWidth;
            var detailsElement = contentTable.querySelector(".e-detailrowcollapse") || contentTable.querySelector(".e-detailrowexpand");
            (this.parent.detailTemplate || this.parent.childGrid) && detailsElement && (indentWidth += detailsElement.offsetWidth);
            var headerText = [ headerTextClone ], contentText = [];
            for (i = 0; i < contentTextClone.length; i++) contentText[i] = contentTextClone[i].cloneNode(!0);
            var wHeader = this.createTable(headerTable, headerText, "e-gridheader"), wContent = this.createTable(contentTable, contentText, "e-gridcontent"), columnbyindex = gObj.getColumns()[index];
            columnbyindex.width = formatUnit(wHeader > wContent ? wHeader : wContent);
            this.widthService.setColumnWidth(gObj.getColumns()[index]), !1 === gObj.getColumns().some(function(x) {
                return null === x.width || void 0 === x.width || x.width.length <= 0;
            }) && gObj.getColumns().forEach(function(element) {
                element.visible && (tWidth += parseInt(element.width, 10));
            });
            var calcTableWidth = tWidth + indentWidth;
            tWidth > 0 && !gObj.getFrozenColumns() && ((this.parent.detailTemplate || this.parent.childGrid) && this.widthService.setColumnWidth(new Column({
                width: "30px"
            })), headerTable.style.width = formatUnit(calcTableWidth), contentTable.style.width = formatUnit(calcTableWidth), 
            isNullOrUndefined(footerTable) || (footerTable.style.width = formatUnit(calcTableWidth)));
            var tableWidth = headerTable.offsetWidth;
            gObj.getContent().scrollWidth > tableWidth ? (headerTable.classList.add("e-tableborder"), 
            contentTable.classList.add("e-tableborder")) : (headerTable.classList.remove("e-tableborder"), 
            contentTable.classList.remove("e-tableborder")), isNullOrUndefined(footerTable) || footerTable.classList.add("e-tableborder");
        }, Resize.prototype.destroy = function() {
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.widthService = null, 
            this.unwireEvents(), this.removeEventListener());
        }, Resize.prototype.getModuleName = function() {
            return "resize";
        }, Resize.prototype.findColumn = function(fName) {
            var _this = this;
            fName.forEach(function(element) {
                var fieldName = element, columnIndex = _this.parent.getColumnIndexByField(fieldName);
                !0 === _this.parent.getColumns()[columnIndex].visible && _this.resizeColumn(fieldName, columnIndex);
            });
        }, Resize.prototype.createTable = function(table, text, tag) {
            var myTableDiv = this.parent.createElement("div");
            myTableDiv.className = this.parent.element.className, myTableDiv.style.cssText = "display: inline-block;visibility:hidden;position:absolute";
            var mySubDiv = this.parent.createElement("div");
            mySubDiv.className = tag;
            var myTable = this.parent.createElement("table");
            myTable.className = table.className, myTable.classList.add("e-resizetable"), myTable.style.cssText = "table-layout: auto;width: auto";
            var myTr = this.parent.createElement("tr");
            text.forEach(function(element) {
                var tr = myTr.cloneNode();
                tr.className = table.querySelector("tr").className, tr.appendChild(element), myTable.appendChild(tr);
            }), mySubDiv.appendChild(myTable), myTableDiv.appendChild(mySubDiv), document.body.appendChild(myTableDiv);
            var offsetWidthValue = myTable.getBoundingClientRect().width;
            return document.body.removeChild(myTableDiv), Math.ceil(offsetWidthValue);
        }, Resize.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(headerRefreshed, this.refreshHeight, this), 
            this.parent.on(initialEnd, this.wireEvents, this));
        }, Resize.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(headerRefreshed, this.refreshHeight), 
            this.parent.off(initialEnd, this.wireEvents));
        }, Resize.prototype.render = function() {
            this.unwireEvents(), this.wireEvents(), this.setHandlerHeight();
        }, Resize.prototype.refreshHeight = function() {
            this.getResizeHandlers().forEach(function(ele) {
                ele.parentElement.offsetHeight > 0 && (ele.style.height = ele.parentElement.offsetHeight + "px");
            }), this.setHandlerHeight();
        }, Resize.prototype.wireEvents = function() {
            EventHandler.add(this.parent.getHeaderContent(), Browser.touchStartEvent, this.resizeStart, this), 
            EventHandler.add(this.parent.getHeaderContent(), "dblclick", this.callAutoFit, this);
        }, Resize.prototype.unwireEvents = function() {
            EventHandler.remove(this.parent.getHeaderContent(), Browser.touchStartEvent, this.resizeStart), 
            EventHandler.remove(this.parent.getHeaderContent(), "dblclick", this.callAutoFit);
        }, Resize.prototype.getResizeHandlers = function() {
            return this.parent.getFrozenColumns() ? [].slice.call(this.parent.getHeaderContent().querySelectorAll("." + resizeClassList.root)) : [].slice.call(this.parent.getHeaderTable().querySelectorAll("." + resizeClassList.root));
        }, Resize.prototype.setHandlerHeight = function() {
            [].slice.call(this.parent.getHeaderTable().querySelectorAll("." + resizeClassList.suppress)).forEach(function(ele) {
                ele.style.height = ele.parentElement.offsetHeight + "px";
            });
        }, Resize.prototype.callAutoFit = function(e) {
            if (e.target.classList.contains("e-rhandler")) {
                var col = this.getTargetColumn(e);
                this.resizeColumn(col.field, this.parent.getNormalizedColumnIndex(col.uid), col.uid);
                closest(e.target, resizeClassList.header).classList.add("e-resized");
            }
        }, Resize.prototype.resizeStart = function(e) {
            if (e.target.classList.contains("e-rhandler")) {
                if (!this.helper) {
                    if (0 === this.getScrollBarWidth()) {
                        for (var _i = 0, _a = this.refreshColumnWidth(); _i < _a.length; _i++) {
                            var col = _a[_i];
                            this.widthService.setColumnWidth(col);
                        }
                        this.widthService.setWidthToTable();
                    }
                    if (this.element = e.target, this.parent.getVisibleFrozenColumns()) for (var mtbody = this.parent.getContent().querySelector(".e-movablecontent").querySelector("tbody"), ftbody = this.parent.getContent().querySelector(".e-frozencontent").querySelector("tbody"), mtr = mtbody.querySelectorAll("tr"), ftr = ftbody.querySelectorAll("tr"), i = 0; i < mtr.length; i++) this.parent.rowHeight ? (mtr[i].style.height = this.parent.rowHeight + "px", 
                    ftr[i].style.height = this.parent.rowHeight + "px") : (mtr[i].style.removeProperty("height"), 
                    ftr[i].style.removeProperty("height"));
                    this.parentElementWidth = this.parent.element.getBoundingClientRect().width, this.appendHelper(), 
                    this.column = this.getTargetColumn(e), this.pageX = this.getPointX(e), this.parent.enableRtl ? this.minMove = parseInt(this.column.width.toString(), 10) - (this.column.minWidth ? parseInt(this.column.minWidth.toString(), 10) : 0) : this.minMove = (this.column.minWidth ? parseInt(this.column.minWidth.toString(), 10) : 0) - parseInt(this.column.width.toString(), 10), 
                    this.minMove += this.pageX;
                }
                if (Browser.isDevice && !this.helper.classList.contains(resizeClassList.icon)) this.helper.classList.add(resizeClassList.icon), 
                EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this), EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this); else {
                    var args = {
                        e: e,
                        column: this.column
                    };
                    if (this.parent.trigger("resizeStart", args), args.cancel) return void this.cancelResizeAction();
                    EventHandler.add(document, Browser.touchEndEvent, this.resizeEnd, this), EventHandler.add(this.parent.element, Browser.touchMoveEvent, this.resizing, this), 
                    this.updateCursor("add");
                }
            }
        }, Resize.prototype.cancelResizeAction = function(removeEvents) {
            removeEvents && (EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing), 
            EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd), this.updateCursor("remove")), 
            Browser.isDevice && (EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper), 
            EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart)), detach(this.helper), 
            this.refresh();
        }, Resize.prototype.getWidth = function(width, minWidth, maxWidth) {
            return minWidth && width < minWidth ? minWidth : maxWidth && width > maxWidth ? maxWidth : width;
        }, Resize.prototype.resizing = function(e) {
            this.parent.allowTextWrap && (this.element.style.height = this.element.parentElement.offsetHeight + "px", 
            this.setHelperHeight());
            var pageX = this.getPointX(e), mousemove = this.parent.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX, colData = {
                width: parseInt(this.widthService.getWidth(this.column).toString(), 10) + mousemove,
                minWidth: this.column.minWidth ? parseInt(this.column.minWidth.toString(), 10) : null,
                maxWidth: this.column.maxWidth ? parseInt(this.column.maxWidth.toString(), 10) : null
            }, width = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
            if ((!this.parent.enableRtl && this.minMove >= pageX || this.parent.enableRtl && this.minMove <= pageX) && (width = this.column.minWidth ? parseInt(this.column.minWidth.toString(), 10) : 0, 
            this.pageX = pageX = this.minMove), width !== parseInt(this.column.width.toString(), 10)) {
                this.pageX = pageX, this.column.width = formatUnit(width);
                var args = {
                    e: e,
                    column: this.column
                };
                if (this.parent.trigger("resizing", args), args.cancel) return void this.cancelResizeAction(!0);
                this.widthService.setColumnWidth(this.column, null, "resize"), this.updateHelper();
            }
            this.isDblClk = !1;
        }, Resize.prototype.resizeEnd = function(e) {
            if (this.helper && !this.parent.isDestroyed) {
                EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing), 
                EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd), this.updateCursor("remove"), 
                detach(this.helper);
                var args = {
                    e: e,
                    column: this.column
                };
                this.parent.trigger("resizeStop", args), closest(this.element, ".e-headercell").classList.add("e-resized"), 
                parentsUntil(this.element, "e-frozenheader") ? this.isFrozenColResized = !0 : this.isFrozenColResized = !1, 
                this.parent.getFrozenColumns() && this.parent.notify(freezeRender, {
                    case: "textwrap"
                }), this.refresh(), this.doubleTapEvent(e), this.isDblClk = !0;
            }
        }, Resize.prototype.getPointX = function(e) {
            return e.touches && e.touches.length ? e.touches[0].pageX : e.pageX;
        }, Resize.prototype.refreshColumnWidth = function() {
            for (var columns = this.parent.getColumns(), _i = 0, _a = [].slice.apply(this.parent.getHeaderTable().querySelectorAll("th.e-headercell")); _i < _a.length; _i++) for (var ele = _a[_i], _b = 0, columns_1 = columns; _b < columns_1.length; _b++) {
                var column = columns_1[_b];
                if (ele.querySelector("[e-mappinguid]") && ele.querySelector("[e-mappinguid]").getAttribute("e-mappinguid") === column.uid && column.visible) {
                    column.width = ele.getBoundingClientRect().width;
                    break;
                }
            }
            return columns;
        }, Resize.prototype.getTargetColumn = function(e) {
            var uid = closest(e.target, resizeClassList.header).querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
            return this.parent.getColumnByUid(uid);
        }, Resize.prototype.updateCursor = function(action) {
            var headerRows = [].slice.call(this.parent.getHeaderContent().querySelectorAll("th"));
            headerRows.push(this.parent.element);
            for (var _i = 0, headerRows_1 = headerRows; _i < headerRows_1.length; _i++) {
                headerRows_1[_i].classList[action](resizeClassList.cursor);
            }
        }, Resize.prototype.refresh = function() {
            this.column = null, this.pageX = null, this.element = null, this.helper = null;
        }, Resize.prototype.appendHelper = function() {
            this.helper = this.parent.createElement("div", {
                className: resizeClassList.helper
            }), this.parent.element.appendChild(this.helper), this.setHelperHeight();
        }, Resize.prototype.setHelperHeight = function() {
            var height = this.parent.getContent().offsetHeight - this.getScrollBarWidth(), rect = closest(this.element, resizeClassList.header), tr = [].slice.call(this.parent.getHeaderContent().querySelectorAll("tr")), frzCols = this.parent.getFrozenColumns();
            frzCols && (rect.parentElement.children.length !== frzCols ? tr.splice(0, tr.length / 2) : tr.splice(tr.length / 2, tr.length / 2));
            for (var i = tr.indexOf(rect.parentElement); i < tr.length; i++) height += tr[i].offsetHeight;
            var pos = this.calcPos(rect);
            pos.left += this.parent.enableRtl ? -1 : rect.offsetWidth - 2, this.helper.style.cssText = "height: " + height + "px; top: " + pos.top + "px; left:" + Math.floor(pos.left) + "px;";
        }, Resize.prototype.getScrollBarWidth = function(height) {
            var ele = this.parent.getFrozenColumns() ? this.parent.getContent().querySelector(".e-movablecontent") : this.parent.getContent().firstChild;
            return ele.scrollHeight > ele.clientHeight && height || ele.scrollWidth > ele.clientWidth ? getScrollBarWidth() : 0;
        }, Resize.prototype.removeHelper = function(e) {
            var cls = e.target.classList;
            cls.contains(resizeClassList.root) || cls.contains(resizeClassList.icon) || !this.helper || (EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper), 
            EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart), detach(this.helper), 
            this.refresh());
        }, Resize.prototype.updateHelper = function() {
            var rect = closest(this.element, resizeClassList.header), left = Math.floor(this.calcPos(rect).left + (this.parent.enableRtl ? -1 : rect.offsetWidth - 2));
            if (left > this.parentElementWidth && (left = this.parentElementWidth - 2), this.parent.getFrozenColumns()) {
                var fLeft = closest(rect, ".e-table").offsetLeft;
                left < fLeft && (left = fLeft);
            }
            this.helper.style.left = left + "px";
        }, Resize.prototype.calcPos = function(elem) {
            for (var parentOffset = {
                top: 0,
                left: 0
            }, offset = elem.getBoundingClientRect(), doc = elem.ownerDocument, offsetParent = elem.offsetParent || doc.documentElement; offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && "static" === offsetParent.style.position; ) offsetParent = offsetParent.parentNode;
            return offsetParent && offsetParent !== elem && 1 === offsetParent.nodeType && (parentOffset = offsetParent.getBoundingClientRect()), 
            {
                top: offset.top - parentOffset.top,
                left: offset.left - parentOffset.left
            };
        }, Resize.prototype.doubleTapEvent = function(e) {
            this.getUserAgent() && this.isDblClk && (this.tapped ? (clearTimeout(this.tapped), 
            this.callAutoFit(e), this.tapped = null) : this.tapped = setTimeout(this.timeoutHandler(), 300));
        }, Resize.prototype.getUserAgent = function() {
            var userAgent = Browser.userAgent.toLowerCase();
            return /iphone|ipod|ipad/.test(userAgent);
        }, Resize.prototype.timeoutHandler = function() {
            this.tapped = null;
        }, Resize;
    }(), Reorder = function() {
        function Reorder(parent) {
            this.parent = parent, this.parent.isDestroyed || (this.parent.on(headerDrop, this.headerDrop, this), 
            this.parent.on(uiUpdate, this.enableAfterRender, this), this.parent.on(reorderComplete, this.onActionComplete, this), 
            this.parent.on(columnDrag, this.drag, this), this.parent.on(columnDragStart, this.dragStart, this), 
            this.parent.on(columnDragStop, this.dragStop, this), this.parent.on(headerDrop, this.headerDrop, this), 
            this.parent.on(headerRefreshed, this.createReorderElement, this));
        }
        return Reorder.prototype.chkDropPosition = function(srcElem, destElem) {
            return (srcElem.parentElement.isEqualNode(destElem.parentElement) || this.parent.getFrozenColumns() && Array.prototype.indexOf.call(closest(srcElem, "thead").children, srcElem.parentElement) === Array.prototype.indexOf.call(closest(destElem, "thead").children, destElem.parentElement)) && this.targetParentContainerIndex(srcElem, destElem) > -1;
        }, Reorder.prototype.chkDropAllCols = function(srcElem, destElem) {
            for (var isFound, headers = this.getHeaderCells(); !isFound && headers.length > 0; ) isFound = srcElem !== headers.pop() && this.targetParentContainerIndex(srcElem, destElem) > -1;
            return isFound;
        }, Reorder.prototype.findColParent = function(col, cols, parent) {
            parent = parent;
            for (var i = 0, len = cols.length; i < len; i++) {
                if (col === cols[i]) return !0;
                if (cols[i].columns) {
                    var cnt = parent.length;
                    if (parent.push(cols[i]), this.findColParent(col, cols[i].columns, parent)) return !0;
                    parent.splice(cnt, parent.length - cnt);
                }
            }
            return !1;
        }, Reorder.prototype.getColumnsModel = function(cols) {
            for (var columnModel = [], subCols = [], i = 0, len = cols.length; i < len; i++) columnModel.push(cols[i]), 
            cols[i].columns && (subCols = subCols.concat(cols[i].columns));
            return subCols.length && (columnModel = columnModel.concat(this.getColumnsModel(subCols))), 
            columnModel;
        }, Reorder.prototype.headerDrop = function(e) {
            var gObj = this.parent, uId = (this.element.querySelector(".e-headercelldiv") || this.element.querySelector(".e-stackedheadercelldiv")).getAttribute("e-mappinguid"), column = gObj.getColumnByUid(uId);
            if (closest(e.target, "th") && (isNullOrUndefined(column) || !1 !== column.allowReordering)) {
                var destElem = closest(e.target, ".e-headercell"), destElemUid = (destElem.querySelector(".e-headercelldiv") || destElem.querySelector(".e-stackedheadercelldiv")).getAttribute("e-mappinguid");
                if (!isNullOrUndefined(destElemUid)) {
                    var destColumn = gObj.getColumnByUid(destElemUid);
                    if (isNullOrUndefined(destColumn) || !1 === destColumn.allowReordering) return;
                }
                if (destElem && this.chkDropPosition(this.element, destElem) && this.chkDropAllCols(this.element, destElem)) if (this.parent.enableColumnVirtualization) {
                    var columns = this.parent.columns, sourceUid_1 = this.element.querySelector(".e-headercelldiv").getAttribute("e-mappinguid"), colMatchIndex_1 = null, column_1 = this.parent.getColumns(!0).filter(function(col) {
                        return col.uid === sourceUid_1;
                    })[0], destUid_1 = destElem.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
                    columns.some(function(col, index) {
                        return col.uid === destUid_1 && (colMatchIndex_1 = index, col.uid === destUid_1);
                    });
                    isNullOrUndefined(colMatchIndex_1) || this.moveColumns(colMatchIndex_1, column_1);
                } else {
                    var headers = this.getHeaderCells(), oldIdx = getElementIndex(this.element, headers), column_2 = (columns = this.getColumnsModel(this.parent.columns))[oldIdx], newIndex = this.targetParentContainerIndex(this.element, destElem);
                    this.moveColumns(newIndex, column_2);
                }
            }
        }, Reorder.prototype.isActionPrevent = function(gObj) {
            return isActionPrevent(gObj);
        }, Reorder.prototype.moveColumns = function(destIndex, column) {
            var gObj = this.parent;
            if (this.isActionPrevent(gObj)) gObj.notify(preventBatch, {
                instance: this,
                handler: this.moveColumns,
                arg1: destIndex,
                arg2: column
            }); else {
                var parent = this.getColParent(column, this.parent.columns), cols = parent ? parent.columns : this.parent.columns, srcIdx = inArray(column, cols);
                gObj.allowReordering && srcIdx !== destIndex && -1 !== srcIdx && -1 !== destIndex && (cols.splice(destIndex, 0, cols.splice(srcIdx, 1)[0]), 
                gObj.getColumns(!0), gObj.notify(columnPositionChanged, {
                    fromIndex: destIndex,
                    toIndex: srcIdx
                }), gObj.notify(modelChanged, {
                    type: actionBegin,
                    requestType: "reorder"
                }));
            }
        }, Reorder.prototype.targetParentContainerIndex = function(srcElem, destElem) {
            var headers = this.getHeaderCells(), cols = this.parent.columns, flatColumns = this.getColumnsModel(cols), parent = this.getColParent(flatColumns[getElementIndex(srcElem, headers)], cols);
            return cols = parent ? parent.columns : cols, inArray(flatColumns[getElementIndex(destElem, headers)], cols);
        }, Reorder.prototype.getHeaderCells = function() {
            if (this.parent.getFrozenColumns()) {
                for (var fTh = void 0, mTh = void 0, fHeaders = [], fRows = [].slice.call(this.parent.getHeaderTable().querySelectorAll(".e-columnheader")), mRows = [].slice.call(this.parent.getHeaderContent().querySelector(".e-movableheader").querySelectorAll(".e-columnheader")), i = 0; i < fRows.length; i++) {
                    fTh = [].slice.call(fRows[i].getElementsByClassName("e-headercell")), mTh = [].slice.call(mRows[i].getElementsByClassName("e-headercell")), 
                    fHeaders = fHeaders.concat(fTh);
                    for (var j = 0; j < mTh.length; j++) fTh.length && 0 === j && fTh[fTh.length - 1].innerText === mTh[0].innerText || fHeaders.push(mTh[j]);
                }
                return fHeaders;
            }
            return [].slice.call(this.parent.element.getElementsByClassName("e-headercell"));
        }, Reorder.prototype.getColParent = function(column, columns) {
            var parents$$1 = [];
            return this.findColParent(column, columns, parents$$1), parents$$1[parents$$1.length - 1];
        }, Reorder.prototype.reorderColumns = function(fromFName, toFName) {
            var fColumn = this.parent.getColumnByField(fromFName), toColumn = this.parent.getColumnByField(toFName);
            if ((isNullOrUndefined(fColumn) || fColumn.allowReordering) && (isNullOrUndefined(toColumn) || toColumn.allowReordering)) {
                var column = this.parent.getColumnByField(toFName), parent = this.getColParent(column, this.parent.columns), destIndex = inArray(column, parent ? parent.columns : this.parent.columns);
                destIndex > -1 && this.moveColumns(destIndex, this.parent.getColumnByField(fromFName));
            }
        }, Reorder.prototype.enableAfterRender = function(e) {
            e.module === this.getModuleName() && e.enable && this.createReorderElement();
        }, Reorder.prototype.createReorderElement = function() {
            var header = this.parent.element.querySelector(".e-headercontent");
            this.upArrow = header.appendChild(this.parent.createElement("div", {
                className: "e-icons e-icon-reorderuparrow e-reorderuparrow",
                attrs: {
                    style: "display:none"
                }
            })), this.downArrow = header.appendChild(this.parent.createElement("div", {
                className: "e-icons e-icon-reorderdownarrow e-reorderdownarrow",
                attrs: {
                    style: "display:none"
                }
            }));
        }, Reorder.prototype.onActionComplete = function(e) {
            this.parent.trigger(actionComplete, extend(e, {
                type: actionComplete
            }));
        }, Reorder.prototype.destroy = function() {
            var gridElement = this.parent.element;
            !this.parent.isDestroyed && gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (remove(this.upArrow), 
            remove(this.downArrow), this.parent.off(headerDrop, this.headerDrop), this.parent.off(uiUpdate, this.enableAfterRender), 
            this.parent.off(reorderComplete, this.onActionComplete), this.parent.off(columnDrag, this.drag), 
            this.parent.off(columnDragStart, this.dragStart), this.parent.off(columnDragStop, this.dragStop), 
            this.parent.off(headerRefreshed, this.createReorderElement));
        }, Reorder.prototype.drag = function(e) {
            var gObj = this.parent, target = e.target;
            if (!1 !== e.column.allowReordering) {
                var closest$$1 = closest(target, ".e-headercell:not(.e-stackedHeaderCell)"), cloneElement = gObj.element.querySelector(".e-cloneproperties"), isLeft = this.x > getPosition(e.event).x + gObj.getContent().firstElementChild.scrollLeft;
                removeClass(gObj.getHeaderTable().querySelectorAll(".e-reorderindicate"), [ "e-reorderindicate" ]), 
                this.setDisplay("none"), this.stopTimer(), classList(cloneElement, [ "e-defaultcur" ], [ "e-notallowedcur" ]), 
                this.updateScrollPostion(e.event), closest$$1 && !closest$$1.isEqualNode(this.element) && (target = closest$$1, 
                this.chkDropPosition(this.element, target) && this.chkDropAllCols(this.element, target) ? (this.updateArrowPosition(target, isLeft), 
                classList(target, [ "e-allowDrop", "e-reorderindicate" ], [])) : gObj.allowGrouping && parentsUntil(e.target, "e-groupdroparea") || classList(cloneElement, [ "e-notallowedcur" ], [ "e-defaultcur" ])), 
                gObj.trigger(columnDrag, {
                    target: target,
                    draggableType: "headercell",
                    column: e.column
                });
            }
        }, Reorder.prototype.updateScrollPostion = function(e) {
            var _this = this, frzCols = this.parent.getFrozenColumns(), x = getPosition(e).x, cliRect = this.parent.element.getBoundingClientRect(), cliRectBaseLeft = frzCols ? this.parent.element.querySelector(".e-movableheader").getBoundingClientRect().left : cliRect.left, cliRectBaseRight = cliRect.right, scrollElem = frzCols ? this.parent.getContent().querySelector(".e-movablecontent") : this.parent.getContent().firstElementChild;
            x > cliRectBaseLeft && x < cliRectBaseLeft + 35 ? this.timer = window.setInterval(function() {
                _this.setScrollLeft(scrollElem, !0);
            }, 50) : x < cliRectBaseRight && x > cliRectBaseRight - 35 && (this.timer = window.setInterval(function() {
                _this.setScrollLeft(scrollElem, !1);
            }, 50));
        }, Reorder.prototype.setScrollLeft = function(scrollElem, isLeft) {
            var scrollLeft = scrollElem.scrollLeft;
            scrollElem.scrollLeft = scrollElem.scrollLeft + (isLeft ? -5 : 5), scrollLeft !== scrollElem.scrollLeft && this.setDisplay("none");
        }, Reorder.prototype.stopTimer = function() {
            window.clearInterval(this.timer);
        }, Reorder.prototype.updateArrowPosition = function(target, isLeft) {
            var cliRect = target.getBoundingClientRect(), cliRectBase = this.parent.element.getBoundingClientRect();
            isLeft && cliRect.left < cliRectBase.left || !isLeft && cliRect.right > cliRectBase.right || (this.upArrow.style.top = cliRect.top + cliRect.height - cliRectBase.top + "px", 
            this.downArrow.style.top = cliRect.top - cliRectBase.top - 4 + "px", this.upArrow.style.left = this.downArrow.style.left = (isLeft ? cliRect.left : cliRect.right) - cliRectBase.left - 4 + "px", 
            this.setDisplay(""));
        }, Reorder.prototype.dragStart = function(e) {
            var gObj = this.parent, target = e.target;
            this.element = target.classList.contains("e-headercell") ? target : parentsUntil(target, "e-headercell"), 
            !1 !== e.column.allowReordering && (this.x = getPosition(e.event).x + gObj.getContent().firstElementChild.scrollLeft, 
            gObj.trigger(columnDragStart, {
                target: target,
                draggableType: "headercell",
                column: e.column
            }));
        }, Reorder.prototype.dragStop = function(e) {
            var gObj = this.parent;
            this.setDisplay("none"), this.stopTimer(), e.cancel || gObj.trigger(columnDrop, {
                target: e.target,
                draggableType: "headercell",
                column: e.column
            }), removeClass(gObj.getHeaderTable().querySelectorAll(".e-reorderindicate"), [ "e-reorderindicate" ]);
        }, Reorder.prototype.setDisplay = function(display) {
            this.upArrow.style.display = display, this.downArrow.style.display = display;
        }, Reorder.prototype.getModuleName = function() {
            return "reorder";
        }, Reorder;
    }(), RowDD = function() {
        function RowDD(parent) {
            var _this = this;
            this.selectedRows = [], this.helper = function(e) {
                var gObj = _this.parent;
                if (document.getElementsByClassName("e-griddragarea").length || !e.sender.target.classList.contains("e-selectionbackground") && "Single" !== gObj.selectionSettings.type) return !1;
                var visualElement = _this.parent.createElement("div", {
                    className: "e-cloneproperties e-draganddrop e-grid e-dragclone",
                    styles: 'height:"auto", z-index:2, width:' + gObj.element.offsetWidth
                }), table = _this.parent.createElement("table", {
                    styles: "width:" + gObj.element.offsetWidth
                }), tbody = _this.parent.createElement("tbody");
                if ("Row" === gObj.selectionSettings.mode && "Single" === gObj.selectionSettings.type) {
                    var index = parseInt(e.sender.target.parentElement.getAttribute("aria-rowindex"), 10);
                    gObj.selectRow(index);
                }
                for (var selectedRows = gObj.getSelectedRows(), i = 0, len = selectedRows.length; i < len; i++) {
                    var selectedRow = selectedRows[i].cloneNode(!0);
                    removeElement(selectedRow, ".e-indentcell"), removeElement(selectedRow, ".e-detailrowcollapse"), 
                    removeElement(selectedRow, ".e-detailrowexpand"), tbody.appendChild(selectedRow);
                }
                return table.appendChild(tbody), visualElement.appendChild(table), gObj.element.appendChild(visualElement), 
                visualElement;
            }, this.dragStart = function(e) {
                var gObj = _this.parent;
                if (!document.getElementsByClassName("e-griddragarea").length) {
                    gObj.trigger(rowDragStart, {
                        rows: gObj.getSelectedRows(),
                        target: e.target,
                        draggableType: "rows",
                        data: gObj.getSelectedRecords()
                    });
                    var dropElem = document.getElementById(gObj.rowDropSettings.targetID);
                    gObj.rowDropSettings.targetID && dropElem && dropElem.ej2_instances && dropElem.ej2_instances[0].getContent().classList.add("e-allowRowDrop"), 
                    _this.isDragStop = !1;
                }
            }, this.drag = function(e) {
                var gObj = _this.parent, cloneElement = _this.parent.element.querySelector(".e-cloneproperties"), target = _this.getElementFromPosition(cloneElement, e.event);
                classList(cloneElement, [ "e-defaultcur" ], [ "e-notallowedcur" ]), gObj.trigger(rowDrag, {
                    rows: gObj.getSelectedRows(),
                    target: target,
                    draggableType: "rows",
                    data: gObj.getSelectedRecords()
                }), gObj.element.classList.add("e-rowdrag"), parentsUntil(target, "e-gridcontent") && parentsUntil(cloneElement.parentElement, "e-grid").id !== parentsUntil(target, "e-grid").id || classList(cloneElement, [ "e-notallowedcur" ], [ "e-defaultcur" ]);
            }, this.dragStop = function(e) {
                var gObj = _this.parent;
                if (!_this.parent.isDestroyed) {
                    var target = _this.getElementFromPosition(e.helper, e.event);
                    gObj.element.classList.remove("e-rowdrag");
                    var dropElem = document.getElementById(gObj.rowDropSettings.targetID);
                    gObj.rowDropSettings.targetID && dropElem && dropElem.ej2_instances && dropElem.ej2_instances[0].getContent().classList.remove("e-allowRowDrop");
                    var args = {
                        target: target,
                        draggableType: "rows",
                        cancel: !1,
                        rows: gObj.getSelectedRows(),
                        data: gObj.getSelectedRecords()
                    };
                    gObj.trigger(rowDrop, args), parentsUntil(target, "e-gridcontent") && !args.cancel || remove(e.helper);
                }
            }, this.parent = parent, this.parent.isDestroyed || (this.parent.on(initialEnd, this.initializeDrag, this), 
            this.parent.on(columnDrop, this.columnDrop, this), this.parent.on(rowDragAndDropComplete, this.onActionComplete, this), 
            this.parent.on(uiUpdate, this.enableAfterRender, this));
        }
        return RowDD.prototype.initializeDrag = function() {
            var gObj = this.parent;
            new Draggable(gObj.getContent(), {
                dragTarget: ".e-rowcell",
                distance: 5,
                helper: this.helper,
                dragStart: this.dragStart,
                drag: this.drag,
                dragStop: this.dragStop
            });
        }, RowDD.prototype.getElementFromPosition = function(element, event) {
            var target, position = getPosition(event);
            return element.style.display = "none", target = document.elementFromPoint(position.x, position.y), 
            element.style.display = "", target;
        }, RowDD.prototype.onActionComplete = function(e) {
            this.parent.trigger(actionComplete, extend(e, {
                type: actionComplete
            }));
        }, RowDD.prototype.getTargetIdx = function(targetRow) {
            return targetRow ? parseInt(targetRow.getAttribute("aria-rowindex"), 10) : 0;
        }, RowDD.prototype.columnDrop = function(e) {
            var gObj = this.parent;
            if ("grouping" !== e.droppedElement.getAttribute("action")) {
                var targetRow = closest(e.target, "tr"), srcControl = void 0;
                if (e.droppedElement.parentElement.id === gObj.element.id) return;
                if ((srcControl = e.droppedElement.parentElement.ej2_instances[0]).element.id !== gObj.element.id && srcControl.rowDropSettings.targetID !== gObj.element.id) return;
                var records = srcControl.getSelectedRecords(), targetIndex = this.getTargetIdx(targetRow);
                isNaN(targetIndex) && (targetIndex = 0), gObj.allowPaging && (targetIndex = targetIndex + gObj.pageSettings.currentPage * gObj.pageSettings.pageSize - gObj.pageSettings.pageSize), 
                gObj.notify(rowsAdded, {
                    toIndex: targetIndex,
                    records: records
                }), gObj.notify(modelChanged, {
                    type: actionBegin,
                    requestType: "rowdraganddrop"
                });
                var selectedRows = srcControl.getSelectedRowIndexes(), skip = srcControl.allowPaging ? srcControl.pageSettings.currentPage * srcControl.pageSettings.pageSize - srcControl.pageSettings.pageSize : 0;
                this.selectedRows = [];
                for (var i = 0, len = records.length; i < len; i++) this.selectedRows.push(skip + selectedRows[i]);
                srcControl.notify(rowsRemoved, {
                    indexes: this.selectedRows,
                    records: records
                }), srcControl.notify(modelChanged, {
                    type: actionBegin,
                    requestType: "rowdraganddrop"
                });
            }
        }, RowDD.prototype.enableAfterRender = function(e) {
            e.module === this.getModuleName() && e.enable && this.initializeDrag();
        }, RowDD.prototype.destroy = function() {
            var gridElement = this.parent.element;
            !this.parent.isDestroyed && gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.parent.off(initialEnd, this.initializeDrag), 
            this.parent.off(columnDrop, this.columnDrop), this.parent.off(rowDragAndDropComplete, this.onActionComplete), 
            this.parent.off(uiUpdate, this.enableAfterRender));
        }, RowDD.prototype.getModuleName = function() {
            return "rowDragAndDrop";
        }, RowDD;
    }(), Group = function() {
        function Group(parent, groupSettings, sortedColumns, serviceLocator) {
            var _this = this;
            this.isAppliedGroup = !1, this.isAppliedUnGroup = !1, this.visualElement = createElement("div", {
                className: "e-cloneproperties e-dragclone e-gdclone",
                styles: "line-height:23px",
                attrs: {
                    action: "grouping"
                }
            }), this.helper = function(e) {
                var gObj = _this.parent, target = e.sender.target, element = target.classList.contains("e-groupheadercell") ? target : parentsUntil(target, "e-groupheadercell");
                return !!element && (_this.column = gObj.getColumnByField(element.firstElementChild.getAttribute("ej-mappingname")), 
                _this.visualElement.textContent = element.textContent, _this.visualElement.style.width = element.offsetWidth + 2 + "px", 
                _this.visualElement.style.height = element.offsetHeight + 2 + "px", _this.visualElement.setAttribute("e-mappinguid", _this.column.uid), 
                gObj.element.appendChild(_this.visualElement), _this.visualElement);
            }, this.dragStart = function() {
                _this.parent.element.classList.add("e-ungroupdrag");
            }, this.drag = function(e) {
                var target = e.target, cloneElement = _this.parent.element.querySelector(".e-cloneproperties");
                _this.parent.trigger(columnDrag, {
                    target: target,
                    draggableType: "headercell",
                    column: _this.column
                }), classList(cloneElement, [ "e-defaultcur" ], [ "e-notallowedcur" ]), parentsUntil(target, "e-gridcontent") || parentsUntil(target, "e-headercell") || classList(cloneElement, [ "e-notallowedcur" ], [ "e-defaultcur" ]);
            }, this.dragStop = function(e) {
                _this.parent.element.classList.remove("e-ungroupdrag"), parentsUntil(e.target, "e-gridcontent") || parentsUntil(e.target, "e-gridheader") || remove(e.helper);
            }, this.drop = function(e) {
                var gObj = _this.parent, column = gObj.getColumnByUid(e.droppedElement.getAttribute("e-mappinguid"));
                _this.element.classList.remove("e-hover"), remove(e.droppedElement), _this.aria.setDropTarget(_this.parent.element.querySelector(".e-groupdroparea"), !1), 
                _this.aria.setGrabbed(_this.parent.getHeaderTable().querySelector("[aria-grabbed=true]"), !1), 
                isNullOrUndefined(column) || !1 === column.allowGrouping || parentsUntil(gObj.getColumnHeaderByUid(column.uid), "e-grid").getAttribute("id") !== gObj.element.getAttribute("id") || _this.groupColumn(column.field);
            }, this.contentRefresh = !0, this.aria = new AriaService(), this.parent = parent, 
            this.groupSettings = groupSettings, this.serviceLocator = serviceLocator, this.sortedColumns = sortedColumns, 
            this.focus = serviceLocator.getService("focus"), this.addEventListener(), this.groupGenerator = new GroupModelGenerator(this.parent);
        }
        return Group.prototype.columnDrag = function(e) {
            this.parent;
            var cloneElement = this.parent.element.querySelector(".e-cloneproperties");
            classList(cloneElement, [ "e-defaultcur" ], [ "e-notallowedcur" ]), parentsUntil(e.target, "e-groupdroparea") || this.parent.allowReordering && parentsUntil(e.target, "e-headercell") || classList(cloneElement, [ "e-notallowedcur" ], [ "e-defaultcur" ]), 
            e.target.classList.contains("e-groupdroparea") ? this.element.classList.add("e-hover") : this.element.classList.remove("e-hover");
        }, Group.prototype.columnDragStart = function(e) {
            if (!e.target.classList.contains("e-stackedheadercell")) {
                this.parent;
                var dropArea = this.parent.element.querySelector(".e-groupdroparea");
                this.aria.setDropTarget(dropArea, e.column.allowGrouping);
                var element = e.target.classList.contains("e-headercell") ? e.target : parentsUntil(e.target, "e-headercell");
                this.aria.setGrabbed(element, !0, !e.column.allowGrouping);
            }
        }, Group.prototype.columnDrop = function(e) {
            var gObj = this.parent;
            if ("grouping" === e.droppedElement.getAttribute("action")) {
                var column = gObj.getColumnByUid(e.droppedElement.getAttribute("e-mappinguid"));
                if (isNullOrUndefined(column) || !1 === column.allowGrouping || parentsUntil(gObj.getColumnHeaderByUid(column.uid), "e-grid").getAttribute("id") !== gObj.element.getAttribute("id")) return;
                this.ungroupColumn(column.field);
            }
        }, Group.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(uiUpdate, this.enableAfterRender, this), 
            this.parent.on("grouping-complete", this.onActionComplete, this), this.parent.on("ungrouping-complete", this.onActionComplete, this), 
            this.parent.on(inBoundModelChanged, this.onPropertyChanged, this), this.parent.on(click, this.clickHandler, this), 
            this.parent.on(columnDrag, this.columnDrag, this), this.parent.on(columnDragStart, this.columnDragStart, this), 
            this.parent.on(columnDrop, this.columnDrop, this), this.parent.on(headerRefreshed, this.refreshSortIcons, this), 
            this.parent.on("sorting-complete", this.refreshSortIcons, this), this.parent.on(keyPressed, this.keyPressHandler, this), 
            this.parent.on(contentReady, this.initialEnd, this), this.parent.on(onEmpty, this.initialEnd, this), 
            this.parent.on(initialEnd, this.render, this), this.parent.on("group-aggregates", this.onGroupAggregates, this));
        }, Group.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(initialEnd, this.render), this.parent.off(uiUpdate, this.enableAfterRender), 
            this.parent.off("grouping-complete", this.onActionComplete), this.parent.off("ungrouping-complete", this.onActionComplete), 
            this.parent.off(inBoundModelChanged, this.onPropertyChanged), this.parent.off(click, this.clickHandler), 
            this.parent.off(columnDrag, this.columnDrag), this.parent.off(columnDragStart, this.columnDragStart), 
            this.parent.off(columnDrop, this.columnDrop), this.parent.off(headerRefreshed, this.refreshSortIcons), 
            this.parent.off("sorting-complete", this.refreshSortIcons), this.parent.off(keyPressed, this.keyPressHandler), 
            this.parent.off("group-aggregates", this.onGroupAggregates));
        }, Group.prototype.initialEnd = function() {
            var gObj = this.parent;
            if (this.parent.off(contentReady, this.initialEnd), this.parent.off(onEmpty, this.initialEnd), 
            this.parent.getColumns().length && this.groupSettings.columns.length) {
                this.contentRefresh = !1;
                for (var _i = 0, _a = gObj.groupSettings.columns; _i < _a.length; _i++) {
                    var col = _a[_i];
                    this.groupColumn(col);
                }
                this.contentRefresh = !0;
            }
        }, Group.prototype.keyPressHandler = function(e) {
            var gObj = this.parent;
            if (this.groupSettings.columns.length && -1 !== [ "altDownArrow", "altUpArrow", "ctrlDownArrow", "ctrlUpArrow", "enter" ].indexOf(e.action)) switch (e.preventDefault(), 
            e.action) {
              case "altDownArrow":
              case "altUpArrow":
                var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
                if (selected.length) {
                    for (var rows = gObj.getContentTable().querySelector("tbody").children, grpRow = void 0, i = gObj.getDataRows()[selected[selected.length - 1]].rowIndex; i >= 0; i--) if (!rows[i].classList.contains("e-row") && !rows[i].classList.contains("e-detailrow")) {
                        grpRow = rows[i];
                        break;
                    }
                    this.expandCollapseRows(grpRow.querySelector("altUpArrow" === e.action ? ".e-recordplusexpand" : ".e-recordpluscollapse"));
                }
                break;

              case "ctrlDownArrow":
                this.expandAll();
                break;

              case "ctrlUpArrow":
                this.collapseAll();
                break;

              case "enter":
                if (this.parent.isEdit || null !== closest(e.target, "#" + this.parent.element.id + "_searchbar")) return;
                var element = this.focus.getFocusedElement(), row = element ? element.parentElement.querySelector('[class^="e-record"]') : null;
                if (!row) break;
                this.expandCollapseRows(row);
            }
        }, Group.prototype.clickHandler = function(e) {
            this.expandCollapseRows(e.target), this.applySortFromTarget(e.target), this.unGroupFromTarget(e.target), 
            this.toogleGroupFromHeader(e.target);
        }, Group.prototype.unGroupFromTarget = function(target) {
            target.classList.contains("e-ungroupbutton") && this.ungroupColumn(target.parentElement.getAttribute("ej-mappingname"));
        }, Group.prototype.toogleGroupFromHeader = function(target) {
            this.groupSettings.showToggleButton && (target.classList.contains("e-grptogglebtn") ? target.classList.contains("e-toggleungroup") ? this.ungroupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute("e-mappinguid")).field) : this.groupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute("e-mappinguid")).field) : target.classList.contains("e-toggleungroup") && this.ungroupColumn(target.parentElement.getAttribute("ej-mappingname")));
        }, Group.prototype.applySortFromTarget = function(target) {
            var gObj = this.parent, gHeader = closest(target, ".e-groupheadercell");
            if (gObj.allowSorting && gHeader && !target.classList.contains("e-ungroupbutton") && !target.classList.contains("e-toggleungroup")) {
                var field = gHeader.firstElementChild.getAttribute("ej-mappingname");
                gObj.getColumnHeaderByField(field).querySelectorAll(".e-ascending").length ? gObj.sortColumn(field, "Descending", !0) : gObj.sortColumn(field, "Ascending", !0);
            }
        }, Group.prototype.expandCollapseRows = function(target) {
            var trgt = parentsUntil(target, "e-recordplusexpand") || parentsUntil(target, "e-recordpluscollapse");
            if (trgt) {
                var cellIdx = trgt.cellIndex, rowIdx = trgt.parentElement.rowIndex, rowNodes = this.parent.getContentTable().querySelector("tbody").children, rows = [].slice.call(rowNodes).slice(rowIdx + 1, rowNodes.length), isHide = void 0, expandElem = void 0, toExpand = [], indent = trgt.parentElement.querySelectorAll(".e-indentcell").length, expand = !1;
                trgt.classList.contains("e-recordpluscollapse") ? (addClass([ trgt ], "e-recordplusexpand"), 
                removeClass([ trgt ], "e-recordpluscollapse"), trgt.firstElementChild.className = "e-icons e-gdiagonaldown e-icon-gdownarrow", 
                expand = !0) : (isHide = !0, removeClass([ trgt ], "e-recordplusexpand"), addClass([ trgt ], "e-recordpluscollapse"), 
                trgt.firstElementChild.className = "e-icons e-gnextforward e-icon-grightarrow"), 
                this.aria.setExpand(trgt, expand);
                for (var i = 0, len = rows.length; i < len && (rows[i].querySelectorAll("td")[cellIdx] && rows[i].querySelectorAll("td")[cellIdx].classList.contains("e-indentcell") && rows); i++) isHide ? rows[i].style.display = "none" : rows[i].querySelectorAll(".e-indentcell").length === indent + 1 && (rows[i].style.display = "", 
                (expandElem = rows[i].querySelector(".e-recordplusexpand")) && toExpand.push(expandElem), 
                rows[i].classList.contains("e-detailrow") && rows[i - 1].querySelectorAll(".e-detailrowcollapse").length && (rows[i].style.display = "none"));
                for (i = 0, len = toExpand.length; i < len; i++) removeClass([ toExpand[i] ], "e-recordplusexpand"), 
                addClass([ toExpand[i] ], "e-recordpluscollapse"), toExpand[i].firstElementChild.className = "e-icons e-gnextforward e-icon-grightarrow", 
                this.expandCollapseRows(toExpand[i]);
            }
        }, Group.prototype.expandCollapse = function(isExpand) {
            for (var row, rowNodes = this.parent.getContentTable().querySelector("tbody").children, i = 0, len = rowNodes.length; i < len; i++) rowNodes[i].querySelectorAll(".e-recordplusexpand, .e-recordpluscollapse").length ? ((row = rowNodes[i].querySelector(isExpand ? ".e-recordpluscollapse" : ".e-recordplusexpand")) && (row.className = isExpand ? "e-recordplusexpand" : "e-recordpluscollapse", 
            row.firstElementChild.className = isExpand ? "e-icons e-gdiagonaldown e-icon-gdownarrow" : "e-icons e-gnextforward e-icon-grightarrow"), 
            rowNodes[i].firstElementChild.classList.contains("e-recordplusexpand") || rowNodes[i].firstElementChild.classList.contains("e-recordpluscollapse") || (rowNodes[i].style.display = isExpand ? "" : "none")) : rowNodes[i].style.display = isExpand ? "" : "none";
        }, Group.prototype.expandAll = function() {
            this.expandCollapse(!0);
        }, Group.prototype.collapseAll = function() {
            this.expandCollapse(!1);
        }, Group.prototype.render = function() {
            this.l10n = this.serviceLocator.getService("localization"), this.renderGroupDropArea(), 
            this.initDragAndDrop(), this.refreshToggleBtn();
        }, Group.prototype.renderGroupDropArea = function() {
            var groupElem = this.parent.element.querySelector(".e-groupdroparea");
            groupElem && remove(groupElem), this.element = this.parent.createElement("div", {
                className: "e-groupdroparea",
                attrs: {
                    tabindex: "-1"
                }
            }), this.updateGroupDropArea(), this.parent.element.insertBefore(this.element, this.parent.element.firstChild), 
            this.groupSettings.showDropArea || (this.element.style.display = "none");
        }, Group.prototype.updateGroupDropArea = function(clear) {
            if (this.groupSettings.showDropArea && !this.groupSettings.columns.length) {
                var dragLabel = this.l10n.getConstant("GroupDropArea");
                this.element.innerHTML = dragLabel, this.element.classList.remove("e-grouped");
            } else (this.element.innerHTML === this.l10n.getConstant("GroupDropArea") && (1 === this.groupSettings.columns.length || !this.isAppliedGroup && !this.isAppliedUnGroup) || clear) && (this.element.innerHTML = ""), 
            this.element.classList.add("e-grouped");
        }, Group.prototype.initDragAndDrop = function() {
            this.initializeGHeaderDrop(), this.initializeGHeaderDrag();
        }, Group.prototype.initializeGHeaderDrag = function() {
            new Draggable(this.element, {
                dragTarget: ".e-groupheadercell",
                distance: 5,
                helper: this.helper,
                dragStart: this.dragStart,
                drag: this.drag,
                dragStop: this.dragStop
            });
        }, Group.prototype.initializeGHeaderDrop = function() {
            this.parent, new Droppable(this.element, {
                accept: ".e-dragclone",
                drop: this.drop
            });
        }, Group.prototype.groupColumn = function(columnName) {
            var gObj = this.parent, column = gObj.getColumnByField(columnName);
            isNullOrUndefined(column) || !1 === column.allowGrouping || this.contentRefresh && this.groupSettings.columns.indexOf(columnName) > -1 || (isActionPrevent(gObj) ? gObj.notify(preventBatch, {
                instance: this,
                handler: this.groupColumn,
                arg1: columnName
            }) : (column.visible = gObj.groupSettings.showGroupedColumn, this.colName = columnName, 
            this.isAppliedGroup = !0, this.contentRefresh ? this.updateModel() : this.addColToGroupDrop(columnName), 
            this.updateGroupDropArea(), this.isAppliedGroup = !1));
        }, Group.prototype.ungroupColumn = function(columnName) {
            var gObj = this.parent, column = this.parent.enableColumnVirtualization ? this.parent.columns.filter(function(c) {
                return c.field === columnName;
            })[0] : gObj.getColumnByField(columnName);
            if (!(isNullOrUndefined(column) || !1 === column.allowGrouping || this.groupSettings.columns.indexOf(columnName) < 0)) if (isActionPrevent(gObj)) gObj.notify(preventBatch, {
                instance: this,
                handler: this.ungroupColumn,
                arg1: columnName
            }); else {
                column.visible = !0, this.colName = column.field;
                var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
                if (columns.splice(columns.indexOf(this.colName), 1), this.sortedColumns.indexOf(columnName) < 0) for (var i = 0, len = gObj.sortSettings.columns.length; i < len; i++) if (columnName === gObj.sortSettings.columns[i].field) {
                    gObj.sortSettings.columns.splice(i, 1);
                    break;
                }
                this.groupSettings.columns = columns, gObj.allowGrouping && (this.isAppliedUnGroup = !0, 
                this.parent.dataBind());
            }
        }, Group.prototype.updateModel = function() {
            this.parent;
            var columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
            columns.push(this.colName), this.groupSettings.columns = columns, this.groupAddSortingQuery(this.colName), 
            this.parent.dataBind();
        }, Group.prototype.onActionComplete = function(e) {
            this.parent;
            "grouping" === e.requestType ? this.addColToGroupDrop(this.colName) : this.removeColFromGroupDrop(this.colName);
            var args = this.groupSettings.columns.indexOf(this.colName) > -1 ? {
                columnName: this.colName,
                requestType: "grouping",
                type: actionComplete
            } : {
                requestType: "ungrouping",
                type: actionComplete
            };
            this.parent.trigger(actionComplete, extend(e, args)), this.colName = null;
        }, Group.prototype.groupAddSortingQuery = function(colName) {
            for (var i = 0; i < this.parent.sortSettings.columns.length && this.parent.sortSettings.columns[i].field !== colName; ) i++;
            this.parent.sortSettings.columns.length === i ? this.parent.sortSettings.columns.push({
                field: colName,
                direction: "Ascending"
            }) : this.parent.allowSorting || (this.parent.sortSettings.columns[i].direction = "Ascending");
        }, Group.prototype.addColToGroupDrop = function(field) {
            var gObj = this.parent, direction = "Ascending", groupedColumn = this.parent.createElement("div", {
                className: "e-grid-icon e-groupheadercell"
            }), childDiv = this.parent.createElement("div", {
                attrs: {
                    "ej-mappingname": field
                }
            }), column = this.parent.getColumnByField(field);
            if (!isNullOrUndefined(column)) {
                var headerCell = gObj.getColumnHeaderByUid(column.uid);
                isNullOrUndefined(column.headerTemplate) ? childDiv.appendChild(this.parent.createElement("span", {
                    className: "e-grouptext",
                    innerHTML: column.headerText,
                    attrs: {
                        tabindex: "-1",
                        "aria-label": "sort the grouped column"
                    }
                })) : (-1 !== column.headerTemplate.indexOf("#") ? childDiv.innerHTML = document.querySelector(column.headerTemplate).innerHTML.trim() : childDiv.innerHTML = column.headerTemplate, 
                childDiv.firstElementChild.classList.add("e-grouptext")), this.groupSettings.showToggleButton && childDiv.appendChild(this.parent.createElement("span", {
                    className: "e-togglegroupbutton e-icons e-icon-ungroup e-toggleungroup",
                    innerHTML: "&nbsp;",
                    attrs: {
                        tabindex: "-1",
                        "aria-label": "ungroup button"
                    }
                })), headerCell.querySelectorAll(".e-ascending,.e-descending").length && (direction = headerCell.querySelector(".e-ascending") ? "Ascending" : "Descending"), 
                childDiv.appendChild(this.parent.createElement("span", {
                    className: "e-groupsort e-icons e-" + direction.toLowerCase() + " e-icon-" + direction.toLowerCase(),
                    innerHTML: "&nbsp;",
                    attrs: {
                        tabindex: "-1",
                        "aria-label": "sort the grouped column"
                    }
                })), childDiv.appendChild(this.parent.createElement("span", {
                    className: "e-ungroupbutton e-icons e-icon-hide",
                    innerHTML: "&nbsp;",
                    attrs: {
                        title: this.l10n.getConstant("UnGroup"),
                        tabindex: "-1",
                        "aria-label": "ungroup the grouped column"
                    },
                    styles: this.groupSettings.showUngroupButton ? "" : "display:none"
                })), groupedColumn.appendChild(childDiv), this.element.appendChild(groupedColumn);
            }
        }, Group.prototype.refreshToggleBtn = function(isRemove) {
            if (this.groupSettings.showToggleButton) for (var headers = [].slice.call(this.parent.element.getElementsByClassName("e-headercelldiv")), i = 0, len = headers.length; i < len; i++) if (!headers[i].classList.contains("e-emptycell") && !headers[i].classList.contains("e-headerchkcelldiv")) {
                var column = this.parent.getColumnByUid(headers[i].getAttribute("e-mappinguid"));
                (!this.parent.showColumnMenu || this.parent.showColumnMenu && !column.showColumnMenu) && (headers[i].querySelectorAll(".e-grptogglebtn").length && remove(headers[i].querySelectorAll(".e-grptogglebtn")[0]), 
                isRemove || headers[i].appendChild(this.parent.createElement("span", {
                    className: "e-grptogglebtn e-icons " + (this.groupSettings.columns.indexOf(column.field) > -1 ? "e-toggleungroup e-icon-ungroup" : "e-togglegroup e-icon-group"),
                    attrs: {
                        tabindex: "-1",
                        "aria-label": "Group button"
                    }
                })));
            }
        }, Group.prototype.removeColFromGroupDrop = function(field) {
            isNullOrUndefined(this.getGHeaderCell(field)) || (remove(this.getGHeaderCell(field)), 
            this.updateGroupDropArea()), this.isAppliedUnGroup = !1;
        }, Group.prototype.onPropertyChanged = function(e) {
            var _this = this;
            if (e.module === this.getModuleName()) for (var _loop_1 = function(prop) {
                switch (prop) {
                  case "columns":
                    var args = void 0;
                    if (this_1.contentRefresh) {
                        if (this_1.isAppliedUnGroup) args = {
                            requestType: "ungrouping",
                            type: actionBegin
                        }; else {
                            if (!this_1.isAppliedGroup) {
                                this_1.updateGroupDropArea(!0);
                                for (var i = 0; i < this_1.groupSettings.columns.length; i++) {
                                    this_1.colName = this_1.groupSettings.columns[i];
                                    this_1.parent.getColumnByField(this_1.colName).visible = this_1.parent.groupSettings.showGroupedColumn, 
                                    this_1.groupAddSortingQuery(this_1.colName), i < this_1.groupSettings.columns.length - 1 && this_1.addColToGroupDrop(this_1.groupSettings.columns[i]);
                                }
                            }
                            args = {
                                columnName: this_1.colName,
                                requestType: e.properties[prop].length ? "grouping" : "ungrouping",
                                type: actionBegin
                            };
                        }
                        this_1.groupSettings.showGroupedColumn || e.oldProperties[prop].forEach(function(column) {
                            -1 === e.properties[prop].indexOf(column) && (_this.parent.getColumnByField(column).visible = !0);
                        }), this_1.parent.notify(modelChanged, args);
                    }
                    break;

                  case "showDropArea":
                    this_1.updateGroupDropArea(), this_1.groupSettings.showDropArea ? this_1.element.style.display = "" : this_1.element.style.display = "none";
                    break;

                  case "showGroupedColumn":
                    this_1.updateGroupedColumn(this_1.groupSettings.showGroupedColumn), this_1.parent.notify(modelChanged, {
                        requestType: "refresh"
                    });
                    break;

                  case "showUngroupButton":
                    this_1.updateButtonVisibility(this_1.groupSettings.showUngroupButton, "e-ungroupbutton");
                    break;

                  case "showToggleButton":
                    this_1.updateButtonVisibility(this_1.groupSettings.showToggleButton, "e-togglegroupbutton "), 
                    this_1.parent.refreshHeader();
                }
            }, this_1 = this, _i = 0, _a = Object.keys(e.properties); _i < _a.length; _i++) {
                _loop_1(_a[_i]);
            }
        }, Group.prototype.updateGroupedColumn = function(isVisible) {
            for (var i = 0; i < this.groupSettings.columns.length; i++) this.parent.getColumnByField(this.groupSettings.columns[i]).visible = isVisible;
        }, Group.prototype.updateButtonVisibility = function(isVisible, className) {
            for (var gHeader = [].slice.call(this.element.querySelectorAll("." + className)), i = 0; i < gHeader.length; i++) gHeader[i].style.display = isVisible ? "" : "none";
        }, Group.prototype.enableAfterRender = function(e) {
            e.module === this.getModuleName() && e.enable && this.render();
        }, Group.prototype.destroy = function() {
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.parent.isDestroyed || this.clearGrouping(), 
            this.removeEventListener(), this.refreshToggleBtn(!0), remove(this.element));
        }, Group.prototype.clearGrouping = function() {
            var cols = JSON.parse(JSON.stringify(this.groupSettings.columns));
            this.contentRefresh = !1;
            for (var i = 0, len = cols.length; i < len; i++) this.ungroupColumn(cols[i]);
            this.contentRefresh = !0;
        }, Group.prototype.getModuleName = function() {
            return "group";
        }, Group.prototype.refreshSortIcons = function(e) {
            var header, gObj = this.parent, cols = gObj.sortSettings.columns, gCols = gObj.groupSettings.columns, fieldNames = this.parent.getColumns().map(function(c) {
                return c.field;
            });
            this.refreshToggleBtn();
            for (var i = 0, len = cols.length; i < len; i++) -1 !== fieldNames.indexOf(cols[i].field) && (header = gObj.getColumnHeaderByField(cols[i].field), 
            !gObj.allowSorting && (this.sortedColumns.indexOf(cols[i].field) > -1 || this.groupSettings.columns.indexOf(cols[i].field) > -1) ? (classList(header.querySelector(".e-sortfilterdiv"), [ "e-ascending", "e-icon-ascending" ], []), 
            cols.length > 1 && header.querySelector(".e-headercelldiv").appendChild(this.parent.createElement("span", {
                className: "e-sortnumber",
                innerHTML: (i + 1).toString()
            }))) : this.getGHeaderCell(cols[i].field) && this.getGHeaderCell(cols[i].field).querySelectorAll(".e-groupsort").length && ("Ascending" === cols[i].direction ? classList(this.getGHeaderCell(cols[i].field).querySelector(".e-groupsort"), [ "e-ascending", "e-icon-ascending" ], [ "e-descending", "e-icon-descending" ]) : classList(this.getGHeaderCell(cols[i].field).querySelector(".e-groupsort"), [ "e-descending", "e-icon-descending" ], [ "e-ascending", "e-icon-ascending" ])));
            for (i = 0, len = gCols.length; i < len; i++) -1 !== fieldNames.indexOf(gCols[i]) && gObj.getColumnHeaderByField(gCols[i]).setAttribute("aria-grouped", "true");
        }, Group.prototype.getGHeaderCell = function(field) {
            return this.element && this.element.querySelector('[ej-mappingname="' + field + '"]') ? this.element.querySelector('[ej-mappingname="' + field + '"]').parentElement : null;
        }, Group.prototype.onGroupAggregates = function(editedData) {
            var _this = this, aggregates = this.iterateGroupAggregates(editedData), rowData = this.groupGenerator.generateRows(aggregates, {}), summaryRows = this.parent.getRowsObject().filter(function(row) {
                return !row.isDataRow;
            });
            rowData.filter(function(data) {
                return !data.isDataRow;
            }).forEach(function(row, indx) {
                var args = {
                    cells: row.cells.filter(function(cell) {
                        return cell.isDataCell;
                    }),
                    data: row.data,
                    dataUid: summaryRows[indx] ? summaryRows[indx].uid : ""
                };
                _this.parent.notify("refresh-aggregate-cell", args);
            });
        }, Group.prototype.iterateGroupAggregates = function(editedData) {
            var updatedData = editedData instanceof Array ? editedData : [], rows = this.parent.getRowsObject(), initData = this.parent.getCurrentViewRecords(), deletedCols = [], changeds = rows.map(function(row) {
                return "delete" === row.edit && deletedCols.push(row.data), row.changes instanceof Object ? row.changes : row.data;
            }), field = this.parent.getPrimaryKeyFieldNames()[0];
            changeds = 0 === updatedData.length ? changeds : updatedData;
            var mergeData = initData.map(function(item) {
                var value, pKeyVal = DataUtil.getObject(field, item);
                return changeds.some(function(cItem) {
                    return value = cItem, pKeyVal === DataUtil.getObject(field, cItem);
                }) ? value : item;
            }), eData = editedData;
            (!eData.type || "cancel" !== eData.type) && deletedCols.length > 0 && deletedCols.forEach(function(row) {
                var index = mergeData.indexOf(row);
                mergeData.splice(index, 1);
            });
            var aggregates = [];
            this.parent.aggregates.forEach(function(row) {
                row.columns.forEach(function(col) {
                    var aggr = {};
                    aggr = {
                        type: col.type.toString().toLowerCase(),
                        field: col.field
                    }, aggregates.push(aggr);
                });
            });
            var result, aggrds;
            return this.parent.groupSettings.columns.forEach(function(field) {
                aggrds = result || mergeData, result = DataUtil.group(aggrds, field, aggregates, null, null);
            }), result;
        }, Group;
    }(), DetailRow = function() {
        function DetailRow(parent, locator) {
            this.aria = new AriaService(), this.parent = parent, this.parent.isDestroyed || (this.focus = locator.getService("focus"), 
            this.parent.on(click, this.clickHandler, this), this.parent.on(destroy$1, this.destroy, this), 
            this.parent.on(keyPressed, this.keyPressHandler, this));
        }
        return DetailRow.prototype.clickHandler = function(e) {
            this.toogleExpandcollapse(closest(e.target, "td"));
        }, DetailRow.prototype.toogleExpandcollapse = function(target) {
            var gObj = this.parent;
            if (target && (target.classList.contains("e-detailrowcollapse") || target.classList.contains("e-detailrowexpand"))) {
                var tr = target.parentElement, uid_1 = tr.getAttribute("data-uid"), nextRow = this.parent.getContentTable().querySelector("tbody").children[tr.rowIndex + 1];
                if (target.classList.contains("e-detailrowcollapse")) {
                    var data = (gObj.allowGrouping && gObj.groupSettings.columns.length ? gObj.currentViewData.records : gObj.currentViewData)[tr.getAttribute("aria-rowindex")];
                    if (this.isDetailRow(nextRow)) nextRow.style.display = ""; else if (gObj.getDetailTemplate() || gObj.childGrid) {
                        var detailRow = this.parent.createElement("tr", {
                            className: "e-detailrow"
                        }), detailCell = this.parent.createElement("td", {
                            className: "e-detailcell"
                        });
                        detailCell.setAttribute("colspan", this.parent.getVisibleColumns().length.toString());
                        for (var row = new Row({
                            isDataRow: !0,
                            isExpand: !0,
                            cells: [ new Cell({
                                cellType: CellType.Indent
                            }), new Cell({
                                isDataCell: !0,
                                visible: !0
                            }) ]
                        }), i = 0, len = gObj.groupSettings.columns.length; i < len; i++) detailRow.appendChild(this.parent.createElement("td", {
                            className: "e-indentcell"
                        })), row.cells.unshift(new Cell({
                            cellType: CellType.Indent
                        }));
                        if (detailRow.appendChild(this.parent.createElement("td", {
                            className: "e-detailindentcell"
                        })), detailRow.appendChild(detailCell), tr.parentNode.insertBefore(detailRow, tr.nextSibling), 
                        gObj.detailTemplate) appendChildren(detailCell, gObj.getDetailTemplate()(data, gObj, "detailTemplate")); else {
                            gObj.childGrid.parentDetails = {
                                parentID: gObj.element.id,
                                parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),
                                parentKeyField: gObj.childGrid.queryString,
                                parentKeyFieldValue: data[gObj.childGrid.queryString],
                                parentRowData: data
                            };
                            var grid = new Grid(gObj.childGrid), modules = grid.getInjectedModules(), injectedModues = gObj.getInjectedModules();
                            modules && modules.length === injectedModues.length || grid.setInjectedModules(injectedModues);
                            var gridElem = this.parent.createElement("div", {
                                id: "child" + parents(tr, "e-grid").length + "_grid" + tr.rowIndex + getUid("")
                            });
                            detailCell.appendChild(gridElem), grid.appendTo(gridElem);
                        }
                        detailRow.appendChild(detailCell), tr.parentNode.insertBefore(detailRow, tr.nextSibling);
                        var idx_1;
                        this.parent.getRowsObject().some(function(r, rIndex) {
                            return idx_1 = rIndex, r.uid === uid_1;
                        }), gObj.getRows().splice(tr.rowIndex + 1, 0, detailRow), this.parent.getRowsObject().splice(idx_1 + 1, 0, row), 
                        gObj.trigger("detailDataBound", {
                            detailElement: detailCell,
                            data: data
                        }), gObj.notify("detailDataBound", {
                            rows: this.parent.getRowsObject()
                        });
                    }
                    classList(target, [ "e-detailrowexpand" ], [ "e-detailrowcollapse" ]), classList(target.firstElementChild, [ "e-dtdiagonaldown", "e-icon-gdownarrow" ], [ "e-dtdiagonalright", "e-icon-grightarrow" ]), 
                    this.parent.getRowsObject()[tr.rowIndex].isExpand = !0, this.aria.setExpand(target, !0);
                } else this.isDetailRow(nextRow) && (nextRow.style.display = "none"), classList(target, [ "e-detailrowcollapse" ], [ "e-detailrowexpand" ]), 
                classList(target.firstElementChild, [ "e-dtdiagonalright", "e-icon-grightarrow" ], [ "e-dtdiagonaldown", "e-icon-gdownarrow" ]), 
                this.parent.getRowsObject()[tr.rowIndex].isExpand = !1, this.aria.setExpand(target, !1);
            }
        }, DetailRow.prototype.isDetailRow = function(row) {
            return row && row.classList.contains("e-detailrow");
        }, DetailRow.prototype.destroy = function() {
            var gridElement = this.parent.element;
            !this.parent.isDestroyed && gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.parent.off(click, this.clickHandler), 
            this.parent.off(destroy$1, this.destroy), this.parent.off(keyPressed, this.keyPressHandler));
        }, DetailRow.prototype.getTDfromIndex = function(index, className) {
            var tr = this.parent.getDataRows()[index];
            return tr && tr.querySelector(className) ? tr.querySelector(className) : null;
        }, DetailRow.prototype.expand = function(target) {
            isNaN(target) || (target = this.getTDfromIndex(target, ".e-detailrowcollapse")), 
            target && target.classList.contains("e-detailrowcollapse") && this.toogleExpandcollapse(target);
        }, DetailRow.prototype.collapse = function(target) {
            isNaN(target) || (target = this.getTDfromIndex(target, ".e-detailrowexpand")), target && target.classList.contains("e-detailrowexpand") && this.toogleExpandcollapse(target);
        }, DetailRow.prototype.expandAll = function() {
            this.expandCollapse(!0);
        }, DetailRow.prototype.collapseAll = function() {
            this.expandCollapse(!1);
        }, DetailRow.prototype.expandCollapse = function(isExpand) {
            for (var td, rows = this.parent.getDataRows(), i = 0, len = rows.length; i < len; i++) td = rows[i].querySelector(".e-detailrowcollapse, .e-detailrowexpand"), 
            isExpand ? this.expand(td) : this.collapse(td);
        }, DetailRow.prototype.keyPressHandler = function(e) {
            var gObj = this.parent;
            switch (e.action) {
              case "ctrlDownArrow":
                this.expandAll();
                break;

              case "ctrlUpArrow":
                this.collapseAll();
                break;

              case "altUpArrow":
              case "altDownArrow":
                var selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
                if (selected.length) {
                    var td = gObj.getDataRows()[selected[selected.length - 1]].querySelector(".e-detailrowcollapse, .e-detailrowexpand");
                    "altDownArrow" === e.action ? this.expand(td) : this.collapse(td);
                }
                break;

              case "enter":
                if (this.parent.isEdit) return;
                var element = this.focus.getFocusedElement();
                if (!e.target.classList.contains("e-detailrowcollapse") && !e.target.classList.contains("e-detailrowexpand")) break;
                this.toogleExpandcollapse(element);
            }
        }, DetailRow.prototype.getModuleName = function() {
            return "detailRow";
        }, DetailRow;
    }(), Toolbar$1 = function() {
        function Toolbar$$1(parent, serviceLocator) {
            this.predefinedItems = {}, this.items = [ "Add", "Edit", "Update", "Delete", "Cancel", "Print", "Search", "ColumnChooser", "PdfExport", "ExcelExport", "CsvExport", "WordExport" ], 
            this.parent = parent, this.gridID = parent.element.id, this.serviceLocator = serviceLocator, 
            this.addEventListener();
        }
        return Toolbar$$1.prototype.render = function() {
            this.l10n = this.serviceLocator.getService("localization");
            for (var _i = 0, preItems_1 = [ "Add", "Edit", "Update", "Delete", "Cancel", "Print", "PdfExport", "ExcelExport", "WordExport", "CsvExport" ]; _i < preItems_1.length; _i++) {
                var item = preItems_1[_i], itemStr = item.toLowerCase(), localeName = itemStr[0].toUpperCase() + itemStr.slice(1);
                this.predefinedItems[item] = {
                    id: this.gridID + "_" + itemStr,
                    prefixIcon: "e-" + itemStr,
                    text: this.l10n.getConstant(localeName),
                    tooltipText: this.l10n.getConstant(localeName)
                };
            }
            this.predefinedItems.Search = {
                id: this.gridID + "_search",
                template: '<div class="e-input-group e-search" role="search">            <input id="' + this.gridID + '_searchbar" class="e-input" name="input" type="search"             placeholder= "' + this.l10n.getConstant("Search") + '"/>            <span id="' + this.gridID + '_searchbutton" class="e-input-group-icon e-search-icon e-icons"             tabindex="-1" title="' + this.l10n.getConstant("Search") + '" aria-label= "search"></span>             </div>',
                tooltipText: this.l10n.getConstant("Search"),
                align: "Right",
                cssClass: "e-search-wrapper"
            }, this.predefinedItems.ColumnChooser = {
                id: this.gridID + "_columnchooser",
                cssClass: "e-cc e-ccdiv e-cc-toolbar",
                suffixIcon: "e-columnchooser-btn",
                text: this.l10n.getConstant("Columnchooser"),
                tooltipText: this.l10n.getConstant("Columnchooser"),
                align: "Right"
            }, this.createToolbar();
        }, Toolbar$$1.prototype.getToolbar = function() {
            return this.toolbar.element;
        }, Toolbar$$1.prototype.destroy = function() {
            this.toolbar && !this.toolbar.isDestroyed && (this.toolbar.element ? this.toolbar.destroy() : this.parent.destroyTemplate([ "toolbarTemplate" ]), 
            this.unWireEvent(), this.removeEventListener(), remove(this.element));
        }, Toolbar$$1.prototype.createToolbar = function() {
            var items = this.getItems();
            this.toolbar = new Toolbar({
                items: items,
                clicked: this.toolbarClickHandler.bind(this),
                enablePersistence: this.parent.enablePersistence,
                enableRtl: this.parent.enableRtl
            });
            var viewStr = "viewContainerRef";
            this.parent[viewStr] && (this.toolbar.registeredTemplate = {}, this.toolbar[viewStr] = this.parent[viewStr]), 
            this.element = this.parent.createElement("div", {
                id: this.gridID + "_toolbarItems"
            }), this.parent.toolbarTemplate ? "string" == typeof this.parent.toolbarTemplate ? (this.toolbar.appendTo(this.parent.toolbarTemplate), 
            this.element = this.toolbar.element) : appendChildren(this.element, templateCompiler(this.parent.toolbarTemplate)({}, this.parent, "toolbarTemplate")) : this.toolbar.appendTo(this.element), 
            this.parent.element.insertBefore(this.element, this.parent.getHeaderContent()), 
            this.searchElement = this.element.querySelector("#" + this.gridID + "_searchbar"), 
            this.wireEvent(), this.refreshToolbarItems(), this.parent.searchSettings && this.updateSearchBox();
        }, Toolbar$$1.prototype.refreshToolbarItems = function(args) {
            var gObj = this.parent, enableItems = [], disableItems = [], edit = gObj.editSettings, hasData = gObj.currentViewData && gObj.currentViewData.length;
            edit.allowAdding ? enableItems.push(this.gridID + "_add") : disableItems.push(this.gridID + "_add"), 
            edit.allowEditing && hasData ? enableItems.push(this.gridID + "_edit") : disableItems.push(this.gridID + "_edit"), 
            edit.allowDeleting && hasData ? enableItems.push(this.gridID + "_delete") : disableItems.push(this.gridID + "_delete"), 
            "Batch" === gObj.editSettings.mode ? gObj.element.querySelectorAll(".e-updatedtd").length && (edit.allowAdding || edit.allowEditing) ? (enableItems.push(this.gridID + "_update"), 
            enableItems.push(this.gridID + "_cancel")) : (disableItems.push(this.gridID + "_update"), 
            disableItems.push(this.gridID + "_cancel")) : gObj.isEdit && (edit.allowAdding || edit.allowEditing) ? (enableItems = [ this.gridID + "_update", this.gridID + "_cancel" ], 
            disableItems = [ this.gridID + "_add", this.gridID + "_edit", this.gridID + "_delete" ]) : (disableItems.push(this.gridID + "_update"), 
            disableItems.push(this.gridID + "_cancel")), this.enableItems(enableItems, !0), 
            this.enableItems(disableItems, !1);
        }, Toolbar$$1.prototype.getItems = function() {
            var items = [], toolbarItems = this.parent.toolbar || [];
            if ("string" == typeof this.parent.toolbar) return [];
            for (var _i = 0, toolbarItems_1 = toolbarItems; _i < toolbarItems_1.length; _i++) {
                var item = toolbarItems_1[_i];
                switch (typeof item) {
                  case "number":
                    items.push(this.getItemObject(this.items[item]));
                    break;

                  case "string":
                    items.push(this.getItemObject(item));
                    break;

                  default:
                    items.push(this.getItem(item));
                }
            }
            return items;
        }, Toolbar$$1.prototype.getItem = function(itemObject) {
            var item = this.predefinedItems[itemObject.text];
            return item ? extend(item, item, itemObject) : itemObject;
        }, Toolbar$$1.prototype.getItemObject = function(itemName) {
            return this.predefinedItems[itemName] || {
                text: itemName,
                id: this.gridID + "_" + itemName
            };
        }, Toolbar$$1.prototype.enableItems = function(items, isEnable) {
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i], element = this.element.querySelector("#" + item);
                element && this.toolbar.enableItems(element.parentElement, isEnable);
            }
        }, Toolbar$$1.prototype.toolbarClickHandler = function(args) {
            var gObj = this.parent, gID = this.gridID;
            if (extend(args, {
                cancel: !1
            }), gObj.trigger("toolbarClick", args), !args.cancel) switch (!isNullOrUndefined(args.item) && args.item.id) {
              case gID + "_print":
                gObj.print();
                break;

              case gID + "_edit":
                gObj.startEdit();
                break;

              case gID + "_update":
                gObj.endEdit();
                break;

              case gID + "_cancel":
                gObj.closeEdit();
                break;

              case gID + "_add":
                gObj.addRecord();
                break;

              case gID + "_delete":
                gObj.deleteRecord();
                break;

              case gID + "_search":
                args.originalEvent.target.id === gID + "_searchbutton" && this.search();
                break;

              case gID + "_columnchooser":
                var tarElement = this.parent.element.querySelector(".e-ccdiv"), y = tarElement.getBoundingClientRect().top, x = tarElement.getBoundingClientRect().left, targetEle = args.originalEvent.target;
                y = tarElement.getBoundingClientRect().top + tarElement.offsetTop, gObj.createColumnchooser(x, y, targetEle);
            }
        }, Toolbar$$1.prototype.modelChanged = function(e) {
            "edit" === e.module && this.refreshToolbarItems();
        }, Toolbar$$1.prototype.onPropertyChanged = function(e) {
            e.module === this.getModuleName() && this.parent.toolbar && (this.element && remove(this.element), 
            this.render());
        }, Toolbar$$1.prototype.keyUpHandler = function(e) {
            13 === e.keyCode && this.search();
        }, Toolbar$$1.prototype.search = function() {
            this.parent.search(this.searchElement.value);
        }, Toolbar$$1.prototype.updateSearchBox = function() {
            this.searchElement && (this.searchElement.value = this.parent.searchSettings.key);
        }, Toolbar$$1.prototype.wireEvent = function() {
            this.searchElement && (this.searchBoxObj = new SearchBox(this.searchElement), EventHandler.add(this.searchElement, "keyup", this.keyUpHandler, this), 
            this.searchBoxObj.wireEvent());
        }, Toolbar$$1.prototype.unWireEvent = function() {
            this.searchElement && (EventHandler.remove(this.searchElement, "keyup", this.keyUpHandler), 
            this.searchBoxObj.unWireEvent());
        }, Toolbar$$1.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(initialEnd, this.render, this), this.parent.on(uiUpdate, this.onPropertyChanged, this), 
            this.parent.on(inBoundModelChanged, this.updateSearchBox.bind(this)), this.parent.on(modelChanged, this.refreshToolbarItems, this), 
            this.parent.on("toolbar-refresh", this.refreshToolbarItems, this), this.parent.on(inBoundModelChanged, this.modelChanged, this), 
            this.parent.on(dataBound, this.refreshToolbarItems, this));
        }, Toolbar$$1.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(initialEnd, this.render), this.parent.off(uiUpdate, this.onPropertyChanged), 
            this.parent.off(inBoundModelChanged, this.updateSearchBox), this.parent.off(modelChanged, this.refreshToolbarItems), 
            this.parent.off("toolbar-refresh", this.refreshToolbarItems), this.parent.off(inBoundModelChanged, this.modelChanged), 
            this.parent.off(dataBound, this.refreshToolbarItems));
        }, Toolbar$$1.prototype.getModuleName = function() {
            return "toolbar";
        }, Toolbar$$1;
    }(), __extends$62 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), FooterRenderer = function(_super) {
        function FooterRenderer(gridModule, serviceLocator) {
            var _this = _super.call(this, gridModule, serviceLocator) || this;
            return _this.aggregates = {}, _this.parent = gridModule, _this.locator = serviceLocator, 
            _this.modelGenerator = new SummaryModelGenerator(_this.parent), _this.addEventListener(), 
            _this;
        }
        return __extends$62(FooterRenderer, _super), FooterRenderer.prototype.renderPanel = function() {
            var div = this.parent.createElement("div", {
                className: "e-gridfooter"
            }), innerDiv = this.parent.createElement("div", {
                className: "e-summarycontent"
            }), movableContent = innerDiv;
            if (this.parent.getFrozenColumns()) {
                var fDiv = this.parent.createElement("div", {
                    className: "e-frozenfootercontent"
                }), mDiv = this.parent.createElement("div", {
                    className: "e-movablefootercontent"
                });
                innerDiv.appendChild(fDiv), innerDiv.appendChild(mDiv), this.frozenContent = fDiv, 
                this.movableContent = mDiv, movableContent = mDiv;
            }
            Browser.isDevice && (movableContent.style.overflowX = "scroll"), div.appendChild(innerDiv), 
            this.setPanel(div), null != this.parent.getPager() ? this.parent.element.insertBefore(div, this.parent.getPager()) : this.parent.element.appendChild(div);
        }, FooterRenderer.prototype.renderTable = function() {
            this.getPanel();
            var table = this.createContentTable("_footer_table").querySelector(".e-table"), tFoot = this.parent.createElement("tfoot");
            if (table.appendChild(tFoot), this.parent.getFrozenColumns()) {
                var freezeTable = table.cloneNode(!0);
                this.frozenContent.appendChild(freezeTable), this.freezeTable = freezeTable, this.movableContent.appendChild(table), 
                remove(table.querySelector("colgroup"));
                var colGroup = this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("colgroup").cloneNode(!0);
                table.insertBefore(colGroup, table.querySelector("tbody")), this.setColGroup(colGroup);
            }
            this.setTable(table);
        }, FooterRenderer.prototype.renderSummaryContent = function(e, table, cStart, cEnd) {
            var input = this.parent.dataSource instanceof Array ? this.parent.dataSource : this.parent.currentViewData, summaries = this.modelGenerator.getData(), dummies = isNullOrUndefined(cStart) ? this.modelGenerator.getColumns() : this.modelGenerator.getColumns(cStart, cEnd), rows = isNullOrUndefined(cStart) ? this.modelGenerator.generateRows(input, e || this.aggregates) : this.modelGenerator.generateRows(input, e || this.aggregates, cStart, cEnd), fragment = document.createDocumentFragment(), rowrenderer = new RowRenderer(this.locator, null, this.parent);
            rowrenderer.element = this.parent.createElement("TR", {
                className: "e-summaryrow"
            });
            for (var srow = 0, len = summaries.length; srow < len; srow++) {
                var row = rows[srow];
                if (row) {
                    var tr = rowrenderer.render(row, dummies);
                    fragment.appendChild(tr);
                }
            }
            table.tFoot.appendChild(fragment), this.aggregates = e;
        }, FooterRenderer.prototype.refresh = function(e) {
            if (this.parent.getFrozenColumns() && (remove(this.getPanel()), this.renderPanel(), 
            this.renderTable(), this.freezeTable.tFoot.innerHTML = "", this.renderSummaryContent(e, this.freezeTable, 0, this.parent.getFrozenColumns())), 
            this.getTable().tFoot.innerHTML = "", this.renderSummaryContent(e, this.getTable(), this.parent.getFrozenColumns()), 
            this.parent.getFrozenColumns()) {
                var frozenDiv = this.frozenContent;
                frozenDiv.offsetHeight || (frozenDiv.style.height = this.getTable().offsetHeight + "px");
            }
            this.onScroll();
        }, FooterRenderer.prototype.refreshCol = function() {
            var mheaderCol, fheaderCol = mheaderCol = this.parent.element.querySelector(".e-gridheader").querySelector("colgroup").cloneNode(!0);
            this.parent.getFrozenColumns() && (mheaderCol = renderMovable(fheaderCol, this.parent.getFrozenColumns()), 
            this.freezeTable.replaceChild(fheaderCol, this.freezeTable.querySelector("colGroup"))), 
            this.getTable().replaceChild(mheaderCol, this.getColGroup()), this.setColGroup(mheaderCol);
        }, FooterRenderer.prototype.onWidthChange = function(args) {
            this.getColFromIndex(args.index).style.width = formatUnit(args.width), this.parent.allowResizing && "resize" === args.module && this.updateFooterTableWidth(this.getTable());
        }, FooterRenderer.prototype.onScroll = function(e) {
            void 0 === e && (e = {
                left: this.parent.getContent().firstChild.scrollLeft
            }), this.getTable().parentElement.scrollLeft = e.left;
        }, FooterRenderer.prototype.getColFromIndex = function(index) {
            var fCol = this.parent.getFrozenColumns();
            return fCol && fCol > index ? this.freezeTable.querySelector("colGroup").children[index] : this.getColGroup().children[index - fCol];
        }, FooterRenderer.prototype.columnVisibilityChanged = function() {
            this.refresh();
        }, FooterRenderer.prototype.addEventListener = function() {
            this.parent.on(colGroupRefresh, this.refreshCol, this), this.parent.on("column-width-changed", this.onWidthChange, this), 
            this.parent.on("scroll", this.onScroll, this), this.parent.on(columnVisibilityChanged, this.columnVisibilityChanged, this), 
            this.parent.on("refresh-footer-rendered", this.refreshFooterRenderer, this);
        }, FooterRenderer.prototype.removeEventListener = function() {
            this.parent.off(colGroupRefresh, this.refreshCol), this.parent.off("column-width-changed", this.onWidthChange), 
            this.parent.off("scroll", this.onScroll), this.parent.off(columnVisibilityChanged, this.columnVisibilityChanged), 
            this.parent.off("refresh-footer-rendered", this.refreshFooterRenderer);
        }, FooterRenderer.prototype.updateFooterTableWidth = function(tFoot) {
            var tHead = this.parent.getHeaderTable();
            tHead && tFoot && (tFoot.style.width = tHead.style.width);
        }, FooterRenderer.prototype.refreshFooterRenderer = function(editedData) {
            var aggregates = this.onAggregates(editedData);
            this.refresh(aggregates);
        }, FooterRenderer.prototype.onAggregates = function(editedData) {
            var _this = this;
            editedData = editedData instanceof Array ? editedData : [];
            var mergeds, field = this.parent.getPrimaryKeyFieldNames()[0], deletedCols = [], rows = this.parent.frozenColumns > 0 ? this.parent.getMovableRowsObject() : this.parent.getRowsObject(), initds = this.parent.dataSource instanceof Array ? this.parent.dataSource : this.parent.getCurrentViewRecords(), addrow = [], changeds = rows.map(function(row) {
                return row.changes && "add" === row.edit && addrow.push(row.changes), "delete" === row.edit && deletedCols.push(row.data), 
                row.isDirty && row.changes ? row.changes : row.data;
            });
            changeds = 0 === editedData.length ? changeds : editedData, mergeds = initds.map(function(item) {
                var value, idVal = DataUtil.getObject(field, item);
                return changeds.some(function(cItem) {
                    return value = cItem, idVal === DataUtil.getObject(field, cItem);
                }) ? value : item;
            });
            var currentds, currentData = this.parent.groupSettings.columns.length > 0 && "records" in this.parent.currentViewData ? this.parent.getCurrentViewRecords() : this.parent.currentViewData;
            currentds = currentData.map(function(item) {
                var value, idVal = DataUtil.getObject(field, item);
                return mergeds.some(function(cItem) {
                    return value = cItem, idVal === DataUtil.getObject(field, cItem);
                }) ? value : item;
            }), addrow.length > 0 && addrow.forEach(function(row) {
                mergeds.push(row), currentds.push(row);
            });
            var eData = editedData;
            (!eData.type || "cancel" !== eData.type) && deletedCols.length > 0 && deletedCols.forEach(function(row) {
                var index = mergeds.indexOf(row), curIndx = currentData.indexOf(row);
                mergeds.splice(index, 1), currentds && currentds.length && currentds.splice(curIndx, 1);
            });
            var agrVal, aggregate = {};
            this.parent.aggregates.forEach(function(row) {
                row.columns.forEach(function(col) {
                    var data = [], type = col.type.toString();
                    data = "custom" !== type.toLowerCase() || isNullOrUndefined(currentds) ? mergeds : currentds, 
                    agrVal = calculateAggregate(type, data, col, _this.parent), aggregate[col.field + " - " + type.toLowerCase()] = agrVal;
                });
            });
            return {
                result: this.parent.groupSettings.columns.length > 0 ? mergeds : currentds,
                count: mergeds.length,
                aggregates: aggregate
            };
        }, FooterRenderer;
    }(ContentRender), __extends$63 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), SummaryCellRenderer = function(_super) {
        function SummaryCellRenderer() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.element = _this.parent.createElement("TD", {
                className: "e-summarycell",
                attrs: {
                    role: "gridcell",
                    tabindex: "-1"
                }
            }), _this;
        }
        return __extends$63(SummaryCellRenderer, _super), SummaryCellRenderer.prototype.getValue = function(field, data, column) {
            var key;
            return key = isNullOrUndefined(column.type) ? column.columnName : column.field + " - " + ("string" == typeof column.type ? column.type.toLowerCase() : ""), 
            data[column.columnName] ? data[column.columnName][key] : "";
        }, SummaryCellRenderer.prototype.evaluate = function(node, cell, data, attributes) {
            var column = cell.column;
            if (this.parent.on("refresh-aggregate-cell", this.refreshWithAggregate(node, cell), this), 
            !(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate)) return !0;
            var tempObj = column.getTemplate(cell.cellType);
            return appendChildren(node, tempObj.fn(data[column.columnName], this.parent, tempObj.property)), 
            !1;
        }, SummaryCellRenderer.prototype.refreshWithAggregate = function(node, cell) {
            var _this = this, cellNode = cell;
            return function(args) {
                var cell = cellNode, field = cell.column.columnName ? cell.column.columnName : null, curCell = isNullOrUndefined(field) ? null : args.cells.filter(function(cell) {
                    return cell.column.columnName === field;
                })[0];
                node.parentElement && node.parentElement.getAttribute("data-uid") === args.dataUid && field && field === curCell.column.columnName && _this.refreshTD(node, curCell, args.data);
            };
        }, SummaryCellRenderer;
    }(CellRenderer), Aggregate = function() {
        function Aggregate(parent, locator) {
            this.parent = parent, this.locator = locator, this.addEventListener();
        }
        return Aggregate.prototype.getModuleName = function() {
            return "aggregate";
        }, Aggregate.prototype.initiateRender = function() {
            var _this = this, cellFac = this.locator.getService("cellRendererFactory"), instance = new SummaryCellRenderer(this.parent, this.locator);
            [ CellType.Summary, CellType.CaptionSummary, CellType.GroupSummary ].forEach(function(type) {
                return cellFac.addCellRenderer(type, instance);
            }), this.footerRenderer = new FooterRenderer(this.parent, this.locator), this.footerRenderer.renderPanel(), 
            this.footerRenderer.renderTable(), this.locator.register("footerRenderer", this.footerRenderer);
            var fn = function() {
                _this.prepareSummaryInfo(), _this.parent.off(dataReady, fn);
            };
            this.parent.on(dataReady, fn, this), this.parent.on(dataReady, this.footerRenderer.refresh, this.footerRenderer);
        }, Aggregate.prototype.prepareSummaryInfo = function() {
            var _this = this;
            summaryIterator(this.parent.aggregates, function(column) {
                var type = (_this.parent.getColumnByField(column.field) || {}).type;
                column.setPropertiesSilent({
                    format: _this.getFormatFromType(column.format, type)
                }), column.setFormatter(_this.parent.locale), column.setPropertiesSilent({
                    columnName: column.columnName || column.field
                });
            });
        }, Aggregate.prototype.getFormatFromType = function(format, type) {
            if (isNullOrUndefined(type) || "string" != typeof format) return format;
            var obj;
            switch (type) {
              case "number":
                obj = {
                    format: format
                };
                break;

              case "date":
                obj = {
                    type: type,
                    skeleton: format
                };
                break;

              case "datetime":
                obj = {
                    type: "dateTime",
                    skeleton: format
                };
            }
            return obj;
        }, Aggregate.prototype.onPropertyChanged = function(e) {
            if (e.module === this.getModuleName()) {
                isNullOrUndefined(this.footerRenderer) && this.initiateRender(), this.prepareSummaryInfo(), 
                this.footerRenderer.refresh();
                var cModel = new CaptionSummaryModelGenerator(this.parent);
                0 === new GroupSummaryModelGenerator(this.parent).getData().length && cModel.isEmpty() || this.parent.notify(modelChanged, {});
            }
        }, Aggregate.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(initialEnd, this.initiateRender, this), 
            this.parent.on(uiUpdate, this.onPropertyChanged, this), this.parent.on("refresh-aggregates", this.refresh, this));
        }, Aggregate.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.footerRenderer.removeEventListener(), this.parent.off(initialEnd, this.initiateRender), 
            this.parent.off(dataReady, this.footerRenderer.refresh), this.parent.off(uiUpdate, this.onPropertyChanged), 
            this.parent.off("refresh-aggregates", this.refresh));
        }, Aggregate.prototype.destroy = function() {
            this.removeEventListener(), remove(this.parent.element.querySelector(".e-gridfooter"));
        }, Aggregate.prototype.refresh = function(data) {
            var editedData = data instanceof Array ? data : [ data ];
            this.parent.notify("refresh-footer-rendered", editedData), this.parent.groupSettings.columns.length > 0 && this.parent.notify("group-aggregates", editedData);
        }, Aggregate;
    }(), InterSectionObserver = function() {
        function InterSectionObserver(element, options) {
            var _this = this;
            this.fromWheel = !1, this.touchMove = !1, this.options = {}, this.sentinelInfo = {
                up: {
                    check: function(rect, info) {
                        var top = rect.top - _this.containerRect.top;
                        return info.entered = top >= 0, top + _this.options.pageHeight / 2 >= 0;
                    },
                    axis: "Y"
                },
                down: {
                    check: function(rect, info) {
                        _this.options.container.clientHeight;
                        var top = rect.bottom;
                        return info.entered = rect.bottom <= _this.containerRect.bottom, top - _this.options.pageHeight / 2 <= _this.options.pageHeight / 2;
                    },
                    axis: "Y"
                },
                right: {
                    check: function(rect, info) {
                        var right = rect.right;
                        return info.entered = right < _this.containerRect.right, right - _this.containerRect.width <= _this.containerRect.right;
                    },
                    axis: "X"
                },
                left: {
                    check: function(rect, info) {
                        var left = rect.left;
                        return info.entered = left > 0, left + _this.containerRect.width >= _this.containerRect.left;
                    },
                    axis: "X"
                }
            }, this.element = element, this.options = options;
        }
        return InterSectionObserver.prototype.observe = function(callback, onEnterCallback) {
            var _this = this;
            this.containerRect = this.options.container.getBoundingClientRect(), EventHandler.add(this.options.container, "wheel", function() {
                return _this.fromWheel = !0;
            }, this), EventHandler.add(this.options.container, "scroll", this.virtualScrollHandler(callback, onEnterCallback), this);
        }, InterSectionObserver.prototype.check = function(direction) {
            var info = this.sentinelInfo[direction];
            return info.check(this.element.getBoundingClientRect(), info);
        }, InterSectionObserver.prototype.virtualScrollHandler = function(callback, onEnterCallback) {
            var _this = this, prevTop = 0, prevLeft = 0, debounced100 = debounce(callback, 100), debounced50 = debounce(callback, 50);
            return function(e) {
                var top = e.target.scrollTop, left = e.target.scrollLeft, direction = prevTop < top ? "down" : "up";
                direction = prevLeft === left ? direction : prevLeft < left ? "right" : "left", 
                prevTop = top, prevLeft = left;
                var current = _this.sentinelInfo[direction];
                if (-1 !== _this.options.axes.indexOf(current.axis)) {
                    var check = _this.check(direction);
                    if (current.entered && onEnterCallback(_this.element, current, direction, {
                        top: top,
                        left: left
                    }), check) {
                        var fn = debounced100;
                        "X" === current.axis && (fn = debounced50), fn({
                            direction: direction,
                            sentinel: current,
                            offset: {
                                top: top,
                                left: left
                            },
                            focusElement: document.activeElement
                        });
                    }
                    _this.fromWheel = !1;
                }
            };
        }, InterSectionObserver.prototype.setPageHeight = function(value) {
            this.options.pageHeight = value;
        }, InterSectionObserver;
    }(), VirtualRowModelGenerator = function() {
        function VirtualRowModelGenerator(parent) {
            this.cOffsets = {}, this.cache = {}, this.data = {}, this.groups = {}, this.parent = parent, 
            this.model = this.parent.pageSettings, this.rowModelGenerator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
        }
        return VirtualRowModelGenerator.prototype.generateRows = function(data, notifyArgs) {
            var _this = this, info = notifyArgs.virtualInfo = notifyArgs.virtualInfo || this.getData(), xAxis = info.sentinelInfo && "X" === info.sentinelInfo.axis, page = xAxis || !info.loadNext || info.loadSelf ? info.page : info.nextInfo.page, result = [], indexes = (this.model.pageSize, 
            this.getBlockIndexes(page)), loadedBlocks = [];
            this.checkAndResetCache(notifyArgs.requestType), this.parent.enableColumnVirtualization && info.blockIndexes.forEach(function(value) {
                _this.isBlockAvailable(value) && (_this.cache[value] = _this.rowModelGenerator.refreshRows(_this.cache[value]));
            }), info.blockIndexes.forEach(function(value) {
                if (!_this.isBlockAvailable(value)) {
                    var rows = _this.rowModelGenerator.generateRows(data, {
                        virtualInfo: info,
                        startIndex: _this.getStartIndex(value, data)
                    }), median = ~~Math.max(rows.length, _this.model.pageSize) / 2;
                    _this.isBlockAvailable(indexes[0]) || (_this.cache[indexes[0]] = rows.slice(0, median)), 
                    _this.isBlockAvailable(indexes[1]) || (_this.cache[indexes[1]] = rows.slice(median));
                }
                _this.parent.groupSettings.columns.length && !xAxis && _this.cache[value] && (_this.cache[value] = _this.updateGroupRow(_this.cache[value], value)), 
                result.push.apply(result, _this.cache[value]), _this.isBlockAvailable(value) && loadedBlocks.push(value);
            }), info.blockIndexes = loadedBlocks;
            return this.parent.allowGrouping ? this.parent.currentViewData.records = result.map(function(m) {
                return m.data;
            }) : this.parent.currentViewData = result.map(function(m) {
                return m.data;
            }), result;
        }, VirtualRowModelGenerator.prototype.getBlockIndexes = function(page) {
            return [ page + (page - 1), 2 * page ];
        }, VirtualRowModelGenerator.prototype.getPage = function(block) {
            return block % 2 == 0 ? block / 2 : (block + 1) / 2;
        }, VirtualRowModelGenerator.prototype.isBlockAvailable = function(value) {
            return value in this.cache;
        }, VirtualRowModelGenerator.prototype.getData = function() {
            return {
                page: this.model.currentPage,
                blockIndexes: this.getBlockIndexes(this.model.currentPage),
                direction: "down",
                columnIndexes: this.parent.getColumnIndexesInView()
            };
        }, VirtualRowModelGenerator.prototype.getStartIndex = function(blk, data, full) {
            void 0 === full && (full = !0);
            var even = blk % 2 == 0, index = (this.getPage(blk) - 1) * this.model.pageSize;
            return full || !even ? index : index + ~~(this.model.pageSize / 2);
        }, VirtualRowModelGenerator.prototype.getColumnIndexes = function(content) {
            var _this = this;
            void 0 === content && (content = this.parent.getHeaderContent().firstChild);
            var indexes = [], sLeft = 0 | content.scrollLeft, keys = Object.keys(this.cOffsets), cWidth = content.getBoundingClientRect().width;
            sLeft = Math.min(this.cOffsets[keys.length - 1] - cWidth, sLeft);
            var calWidth = Browser.isDevice ? 2 * cWidth : cWidth / 2, left = sLeft + cWidth + (0 === sLeft ? calWidth : 0);
            return keys.some(function(offset, indx, input) {
                var iOffset = Number(offset), offsetVal = _this.cOffsets[offset];
                return sLeft - calWidth <= offsetVal && left + calWidth >= offsetVal && indexes.push(iOffset), 
                left + calWidth < offsetVal;
            }), indexes;
        }, VirtualRowModelGenerator.prototype.checkAndResetCache = function(action) {
            var clear = [ "paging", "refresh", "sorting", "filtering", "searching", "grouping", "ungrouping", "reorder" ].some(function(value) {
                return action === value;
            });
            return clear && (this.cache = {}, this.data = {}, this.groups = {}), clear;
        }, VirtualRowModelGenerator.prototype.refreshColOffsets = function() {
            var _this = this, col = 0;
            this.cOffsets = {};
            var gLen = this.parent.groupSettings.columns.length, cols = this.parent.columns, cLen = cols.length;
            this.parent.groupSettings.columns.forEach(function(c, n) {
                return _this.cOffsets[n] = 30 + (0 | _this.cOffsets[n - 1]);
            }), Array.apply(null, Array(cLen)).map(function() {
                return col++;
            }).forEach(function(block, i) {
                block += gLen, _this.cOffsets[block] = (0 | _this.cOffsets[block - 1]) + (function(column) {
                    return column.visible && (_this.parent.groupSettings.showGroupedColumn ? column.visible : _this.parent.groupSettings.columns.indexOf(column.field) < 0);
                }(cols[i]) ? parseInt(cols[i].width, 10) : 0);
            });
        }, VirtualRowModelGenerator.prototype.updateGroupRow = function(current, block) {
            var _this = this, currentFirst = current[0], rows = [];
            return Object.keys(this.cache).forEach(function(key) {
                Number(key) < block && (rows = rows.concat(_this.cache[key]));
            }), currentFirst && currentFirst.isDataRow || block % 2 == 0 ? current : this.iterateGroup(current, rows);
        }, VirtualRowModelGenerator.prototype.iterateGroup = function(current, rows) {
            var currentFirst = current[0], offset = 0;
            if (currentFirst && currentFirst.isDataRow) return current;
            return current.some(function(row) {
                return rows.some(function(oRow, index) {
                    var res = oRow && void 0 !== oRow.data.field && oRow.data.field === row.data.field && oRow.data.key === row.data.key;
                    return res && (offset = index), res;
                });
            }) && (current.shift(), current = this.iterateGroup(current, rows.slice(offset))), 
            current;
        }, VirtualRowModelGenerator.prototype.getRows = function() {
            var _this = this, rows = [];
            return Object.keys(this.cache).forEach(function(key) {
                return rows = rows.concat(_this.cache[key]);
            }), rows;
        }, VirtualRowModelGenerator;
    }(), __extends$64 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), VirtualContentRenderer = function(_super) {
        function VirtualContentRenderer(parent, locator) {
            var _this = _super.call(this, parent, locator) || this;
            return _this.prevHeight = 0, _this.currentInfo = {}, _this.preventEvent = !1, _this.actions = [ "filtering", "searching", "grouping", "ungrouping" ], 
            _this.offsets = {}, _this.tmpOffsets = {}, _this.virtualEle = new VirtualElementHandler(), 
            _this.offsetKeys = [], _this.isFocused = !1, _this.locator = locator, _this.eventListener("on"), 
            _this.vgenerator = _this.generator, _this;
        }
        return __extends$64(VirtualContentRenderer, _super), VirtualContentRenderer.prototype.renderTable = function() {
            this.header = this.locator.getService("rendererFactory").getRenderer(RenderType.Header), 
            _super.prototype.renderTable.call(this), this.virtualEle.table = this.getTable(), 
            this.virtualEle.content = this.content = this.getPanel().firstChild, this.virtualEle.renderWrapper(this.parent.height), 
            this.virtualEle.renderPlaceHolder(), this.virtualEle.wrapper.style.position = "absolute";
            var debounceEvent = this.parent.dataSource instanceof DataManager && !this.parent.dataSource.dataSource.offline, opt = {
                container: this.content,
                pageHeight: 2 * this.getBlockHeight(),
                debounceEvent: debounceEvent,
                axes: this.parent.enableColumnVirtualization ? [ "X", "Y" ] : [ "Y" ]
            };
            this.observer = new InterSectionObserver(this.virtualEle.wrapper, opt);
        }, VirtualContentRenderer.prototype.renderEmpty = function(tbody) {
            this.getTable().appendChild(tbody), this.virtualEle.adjustTable(0, 0);
        }, VirtualContentRenderer.prototype.scrollListener = function(scrollArgs) {
            if (this.preventEvent || this.parent.isDestroyed) this.preventEvent = !1; else {
                this.isFocused = this.content === closest(document.activeElement, ".e-content") || this.content === document.activeElement;
                var info = scrollArgs.sentinel, viewInfo = this.currentInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset);
                this.prevInfo && ("Y" === info.axis && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString() || "X" === info.axis && this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString()) || (this.parent.setColumnIndexesInView(this.parent.enableColumnVirtualization ? viewInfo.columnIndexes : []), 
                this.parent.pageSettings.currentPage = viewInfo.loadNext && !viewInfo.loadSelf ? viewInfo.nextInfo.page : viewInfo.page, 
                this.parent.notify(viewInfo.event, {
                    requestType: "virtualscroll",
                    virtualInfo: viewInfo,
                    focusElement: scrollArgs.focusElement
                }));
            }
        }, VirtualContentRenderer.prototype.block = function(blk) {
            return this.vgenerator.isBlockAvailable(blk);
        }, VirtualContentRenderer.prototype.getInfoFromView = function(direction, info, e) {
            var tempBlocks = [], infoType = {
                direction: direction,
                sentinelInfo: info,
                offsets: e
            };
            infoType.page = this.getPageFromTop(e.top, infoType), infoType.blockIndexes = tempBlocks = this.vgenerator.getBlockIndexes(infoType.page), 
            infoType.loadSelf = !this.vgenerator.isBlockAvailable(tempBlocks[infoType.block]);
            var blocks = this.ensureBlocks(infoType);
            return infoType.blockIndexes = blocks, infoType.loadNext = !blocks.filter(function(val) {
                return -1 === tempBlocks.indexOf(val);
            }).every(this.block.bind(this)), infoType.event = infoType.loadNext || infoType.loadSelf ? modelChanged : refreshVirtualBlock, 
            infoType.nextInfo = infoType.loadNext ? {
                page: Math.max(1, infoType.page + ("down" === direction ? 1 : -1))
            } : {}, infoType.columnIndexes = "X" === info.axis ? this.vgenerator.getColumnIndexes() : this.parent.getColumnIndexesInView(), 
            this.parent.enableColumnVirtualization && "X" === info.axis && (infoType.event = refreshVirtualBlock), 
            infoType;
        }, VirtualContentRenderer.prototype.ensureBlocks = function(info) {
            var mIdx, _this = this, index = info.blockIndexes[info.block], old = index, max = Math.max, indexes = "down" === info.direction ? [ max(index, 1), ++index, ++index ] : [ max(index - 1, 1), index, index + 1 ];
            return indexes = indexes.filter(function(val, ind) {
                return indexes.indexOf(val) === ind;
            }), this.prevInfo.blockIndexes.toString() === indexes.toString() ? indexes : ((info.loadSelf || "down" === info.direction && this.isEndBlock(old)) && (indexes = this.vgenerator.getBlockIndexes(info.page)), 
            indexes.some(function(val, ind) {
                var result = val === _this.getTotalBlocks();
                return result && (mIdx = ind), result;
            }), void 0 !== mIdx && (indexes = indexes.slice(0, mIdx + 1), 0 === info.block && 1 === indexes.length && this.vgenerator.isBlockAvailable(indexes[0] - 1) && (indexes = [ indexes[0] - 1, indexes[0] ])), 
            indexes);
        }, VirtualContentRenderer.prototype.appendContent = function(target, newChild, e) {
            var info = e.virtualInfo.sentinelInfo && "Y" === e.virtualInfo.sentinelInfo.axis && this.currentInfo.page && this.currentInfo.page !== e.virtualInfo.page ? this.currentInfo : e.virtualInfo;
            this.prevInfo = this.prevInfo || e.virtualInfo;
            var width, cBlock = info.columnIndexes[0] - 1, cOffset = this.getColumnOffset(cBlock), blocks = info.blockIndexes;
            this.parent.groupSettings.columns.length && this.refreshOffsets();
            var translate = this.getTranslateY(this.content.scrollTop, this.content.getBoundingClientRect().height, info);
            if (this.virtualEle.adjustTable(cOffset, translate), this.parent.enableColumnVirtualization && this.header.virtualEle.adjustTable(cOffset, 0), 
            this.parent.enableColumnVirtualization) {
                var cIndex = info.columnIndexes;
                width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + "", 
                this.header.virtualEle.setWrapperWidth(width);
            }
            if (this.virtualEle.setWrapperWidth(width, this.parent.enableColumnVirtualization), 
            remove(target), (target = this.parent.createElement("tbody")).appendChild(newChild), 
            this.getTable().appendChild(target), this.parent.groupSettings.columns.length) {
                if ("up" === info.direction) {
                    var blk = this.offsets[this.getTotalBlocks()] - this.prevHeight;
                    this.preventEvent = !0;
                    var sTop = this.content.scrollTop;
                    this.content.scrollTop = sTop + blk;
                }
                this.setVirtualHeight(), this.observer.setPageHeight(this.getOffset(blocks[blocks.length - 1]) - this.getOffset(blocks[0] - 1));
            }
            this.prevInfo = info, this.isFocused && this.content.focus();
        }, VirtualContentRenderer.prototype.onDataReady = function(e) {
            isNullOrUndefined(e.count) || (this.count = e.count, this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize)), 
            this.vgenerator.checkAndResetCache(e.requestType), [ "refresh", "filtering", "searching", "grouping", "ungrouping", "reorder", void 0 ].some(function(value) {
                return e.requestType === value;
            }) && this.refreshOffsets(), this.setVirtualHeight(), this.resetScrollPosition(e.requestType);
        }, VirtualContentRenderer.prototype.setVirtualHeight = function() {
            var width = this.parent.enableColumnVirtualization ? this.getColumnOffset(this.parent.columns.length + this.parent.groupSettings.columns.length - 1) + "px" : "100%";
            this.virtualEle.setVirtualHeight(this.offsets[this.getTotalBlocks()], width), this.parent.enableColumnVirtualization && this.header.virtualEle.setVirtualHeight(1, width);
        }, VirtualContentRenderer.prototype.getPageFromTop = function(sTop, info) {
            var _this = this, total = this.getTotalBlocks(), page = 0;
            this.offsets[total], this.prevHeight;
            return this.offsetKeys.some(function(offset) {
                var iOffset = Number(offset), border = sTop < _this.offsets[offset] || iOffset === total && sTop > _this.offsets[offset];
                return border && (info.block = iOffset % 2 == 0 ? 1 : 0, page = Math.max(1, Math.min(_this.vgenerator.getPage(iOffset), _this.maxPage))), 
                border;
            }), page;
        }, VirtualContentRenderer.prototype.getTranslateY = function(sTop, cHeight, info, isOnenter) {
            void 0 === info && ((info = {
                page: this.getPageFromTop(sTop, {})
            }).blockIndexes = this.vgenerator.getBlockIndexes(info.page));
            var block = (info.blockIndexes[0] || 1) - 1, translate = this.getOffset(block), endTranslate = this.getOffset(info.blockIndexes[info.blockIndexes.length - 1]);
            isOnenter && (info = this.prevInfo);
            var result = translate > sTop ? this.getOffset(block - 1) : endTranslate < sTop + cHeight ? this.getOffset(block + 1) : translate, blockHeight = this.offsets[info.blockIndexes[info.blockIndexes.length - 1]] - this.tmpOffsets[info.blockIndexes[0]];
            return result + blockHeight > this.offsets[this.getTotalBlocks()] && (result -= result + blockHeight - this.offsets[this.getTotalBlocks()]), 
            result;
        }, VirtualContentRenderer.prototype.getOffset = function(block) {
            return Math.min(0 | this.offsets[block], 0 | this.offsets[this.maxBlock]);
        }, VirtualContentRenderer.prototype.onEntered = function() {
            var _this = this;
            return function(element, current, direction, e) {
                var xAxis = "X" === current.axis, top = _this.prevInfo.offsets ? _this.prevInfo.offsets.top : null, height = _this.content.getBoundingClientRect().height, x = _this.getColumnOffset(xAxis ? _this.vgenerator.getColumnIndexes()[0] - 1 : _this.prevInfo.columnIndexes[0] - 1), y = _this.getTranslateY(e.top, height, xAxis && top === e.top ? _this.prevInfo : void 0, !0);
                _this.virtualEle.adjustTable(x, Math.min(y, _this.offsets[_this.maxBlock])), _this.parent.enableColumnVirtualization && _this.header.virtualEle.adjustTable(x, 0);
            };
        }, VirtualContentRenderer.prototype.eventListener = function(action) {
            var _this = this;
            this.parent[action](dataReady, this.onDataReady, this), this.parent[action](refreshVirtualBlock, this.refreshContentRows, this), 
            this.actions.forEach(function(event) {
                return _this.parent[action](event + "-begin", _this.onActionBegin, _this);
            });
            var fn = function() {
                _this.observer.observe(function(scrollArgs) {
                    return _this.scrollListener(scrollArgs);
                }, _this.onEntered()), _this.parent.off(contentReady, fn);
            };
            this.parent.on(contentReady, fn, this);
        }, VirtualContentRenderer.prototype.getBlockSize = function() {
            return this.parent.pageSettings.pageSize >> 1;
        }, VirtualContentRenderer.prototype.getBlockHeight = function() {
            return this.getBlockSize() * this.parent.getRowHeight();
        }, VirtualContentRenderer.prototype.isEndBlock = function(index) {
            var totalBlocks = this.getTotalBlocks();
            return index >= totalBlocks || index === totalBlocks - 1;
        }, VirtualContentRenderer.prototype.getTotalBlocks = function() {
            return Math.ceil(this.count / this.getBlockSize());
        }, VirtualContentRenderer.prototype.getColumnOffset = function(block) {
            return 0 | this.vgenerator.cOffsets[block];
        }, VirtualContentRenderer.prototype.getModelGenerator = function() {
            return new VirtualRowModelGenerator(this.parent);
        }, VirtualContentRenderer.prototype.resetScrollPosition = function(action) {
            this.actions.some(function(value) {
                return value === action;
            }) && (this.preventEvent = 0 !== this.content.scrollTop, this.content.scrollTop = 0);
        }, VirtualContentRenderer.prototype.onActionBegin = function(e) {
            this.parent.setProperties({
                pageSettings: {
                    currentPage: 1
                }
            }, !0);
        }, VirtualContentRenderer.prototype.getRows = function() {
            return this.vgenerator.getRows();
        }, VirtualContentRenderer.prototype.getRowByIndex = function(index) {
            var startIdx = (this.prevInfo.blockIndexes[0] - 1) * this.getBlockSize();
            return this.parent.getDataRows()[index - startIdx];
        }, VirtualContentRenderer.prototype.getVirtualRowIndex = function(index) {
            return (this.prevInfo.blockIndexes[0] - 1) * this.getBlockSize() + index;
        }, VirtualContentRenderer.prototype.refreshOffsets = function() {
            var _this = this, row = 0, bSize = this.getBlockSize(), total = this.getTotalBlocks();
            this.prevHeight = this.offsets[total], this.maxBlock = total % 2 == 0 ? total - 2 : total - 1, 
            this.offsets = {}, Array.apply(null, Array(total)).map(function() {
                return ++row;
            }).forEach(function(block) {
                var tmp = (_this.vgenerator.cache[block] || []).length, rem = _this.count % bSize, size = block in _this.vgenerator.cache ? tmp * _this.parent.getRowHeight() : rem && block === total ? rem * _this.parent.getRowHeight() : _this.getBlockHeight();
                _this.offsets[block] = (0 | _this.offsets[block - 1]) + size, _this.tmpOffsets[block] = 0 | _this.offsets[block - 1];
            }), this.offsetKeys = Object.keys(this.offsets), this.parent.enableColumnVirtualization && this.vgenerator.refreshColOffsets();
        }, VirtualContentRenderer.prototype.refreshVirtualElement = function() {
            this.vgenerator.refreshColOffsets(), this.setVirtualHeight();
        }, VirtualContentRenderer;
    }(ContentRender), VirtualHeaderRenderer = function(_super) {
        function VirtualHeaderRenderer(parent, locator) {
            var _this = _super.call(this, parent, locator) || this;
            return _this.virtualEle = new VirtualElementHandler(), _this.gen = new VirtualRowModelGenerator(_this.parent), 
            _this.parent.on(refreshVirtualBlock, function(e) {
                return "X" === e.virtualInfo.sentinelInfo.axis ? _this.refreshUI() : null;
            }, _this), _this;
        }
        return __extends$64(VirtualHeaderRenderer, _super), VirtualHeaderRenderer.prototype.renderTable = function() {
            this.gen.refreshColOffsets(), this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().firstChild)), 
            _super.prototype.renderTable.call(this), this.virtualEle.table = this.getTable(), 
            this.virtualEle.content = this.getPanel().firstChild, this.virtualEle.content.style.position = "relative", 
            this.virtualEle.renderWrapper(), this.virtualEle.renderPlaceHolder("absolute");
        }, VirtualHeaderRenderer.prototype.appendContent = function(table) {
            this.virtualEle.wrapper.appendChild(table);
        }, VirtualHeaderRenderer.prototype.refreshUI = function() {
            this.gen.refreshColOffsets(), this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().firstChild)), 
            _super.prototype.refreshUI.call(this);
        }, VirtualHeaderRenderer;
    }(HeaderRender), VirtualElementHandler = function() {
        function VirtualElementHandler() {}
        return VirtualElementHandler.prototype.renderWrapper = function(height) {
            this.wrapper = createElement("div", {
                className: "e-virtualtable",
                styles: "min-height:" + formatUnit(height)
            }), this.wrapper.appendChild(this.table), this.content.appendChild(this.wrapper);
        }, VirtualElementHandler.prototype.renderPlaceHolder = function(position) {
            void 0 === position && (position = "relative"), this.placeholder = createElement("div", {
                className: "e-virtualtrack",
                styles: "position:" + position
            }), this.content.appendChild(this.placeholder);
        }, VirtualElementHandler.prototype.adjustTable = function(xValue, yValue) {
            this.wrapper.style.transform = "translate(" + xValue + "px, " + yValue + "px)";
        }, VirtualElementHandler.prototype.setWrapperWidth = function(width, full) {
            this.wrapper.style.width = width ? width + "px" : full ? "100%" : "";
        }, VirtualElementHandler.prototype.setVirtualHeight = function(height, width) {
            this.placeholder.style.height = height + "px", this.placeholder.style.width = width;
        }, VirtualElementHandler;
    }(), VirtualScroll = function() {
        function VirtualScroll(parent, locator) {
            this.parent = parent, this.locator = locator, this.addEventListener();
        }
        return VirtualScroll.prototype.getModuleName = function() {
            return "virtualscroll";
        }, VirtualScroll.prototype.instantiateRenderer = function() {
            var renderer = this.locator.getService("rendererFactory");
            this.parent.enableColumnVirtualization && renderer.addRenderer(RenderType.Header, new VirtualHeaderRenderer(this.parent, this.locator)), 
            renderer.addRenderer(RenderType.Content, new VirtualContentRenderer(this.parent, this.locator)), 
            this.ensurePageSize();
        }, VirtualScroll.prototype.ensurePageSize = function() {
            var rowHeight = this.parent.getRowHeight();
            this.blockSize = ~~(this.parent.height / rowHeight);
            var height = 2 * this.blockSize, size = this.parent.pageSettings.pageSize;
            this.parent.setProperties({
                pageSettings: {
                    pageSize: size < height ? height : size
                }
            }, !0);
        }, VirtualScroll.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(initialLoad, this.instantiateRenderer, this), 
            this.parent.on("column-width-changed", this.refreshVirtualElement, this));
        }, VirtualScroll.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(initialLoad, this.instantiateRenderer), 
            this.parent.off("column-width-changed", this.refreshVirtualElement));
        }, VirtualScroll.prototype.refreshVirtualElement = function(args) {
            if (this.parent.enableColumnVirtualization && "resize" === args.module) {
                this.locator.getService("rendererFactory").getRenderer(RenderType.Content).refreshVirtualElement();
            }
        }, VirtualScroll.prototype.destroy = function() {
            this.removeEventListener();
        }, VirtualScroll;
    }(), InlineEditRender = function() {
        function InlineEditRender(parent) {
            this.parent = parent;
        }
        return InlineEditRender.prototype.addNew = function(elements, args) {
            this.isEdit = !1;
            var mTbody, tbody;
            if (tbody = this.parent.frozenRows ? this.parent.getHeaderContent().querySelector("tbody") : this.parent.getContentTable().querySelector("tbody"), 
            args.row = this.parent.createElement("tr", {
                className: "e-row e-addedrow"
            }), tbody.querySelector(".e-emptyrow") && tbody.querySelector(".e-emptyrow").classList.add("e-hide"), 
            tbody.insertBefore(args.row, tbody.firstChild), args.row.appendChild(this.getEditElement(elements, !1, void 0, args, !0)), 
            this.parent.getFrozenColumns()) {
                var mEle = this.renderMovableform(args.row, args);
                (mTbody = this.parent.frozenRows ? this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("tbody") : this.parent.getContent().querySelector(".e-movablecontent").querySelector("tbody")).insertBefore(mEle, mTbody.firstChild), 
                args.row.querySelector(".e-normaledit").setAttribute("colspan", this.parent.getVisibleFrozenColumns() + ""), 
                mEle.setAttribute("colspan", "" + (this.parent.getVisibleColumns().length - this.parent.getVisibleFrozenColumns())), 
                "auto" === this.parent.height && this.parent.notify("frozenHeight", {});
            }
        }, InlineEditRender.prototype.renderMovableform = function(ele, args) {
            var mEle = ele.cloneNode(!0), form = args.movableForm = mEle.querySelector("form");
            return this.parent.editSettings.template ? (form.innerHTML = "", this.appendChildren(form, args.rowData, !1), 
            mEle) : (this.renderMovable(ele, mEle), mEle.querySelector("colgroup").innerHTML = this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("colgroup").innerHTML, 
            mEle);
        }, InlineEditRender.prototype.updateFreezeEdit = function(row, td) {
            return td = td.concat([].slice.call(this.getFreezeRow(row).querySelectorAll("td.e-rowcell")));
        }, InlineEditRender.prototype.getFreezeRow = function(row) {
            if (this.parent.getFrozenColumns()) {
                var idx = parseInt(row.getAttribute("aria-rowindex"), 10), fCont = this.parent.getContent().querySelector(".e-frozencontent").querySelector("tbody"), mCont = this.parent.getContent().querySelector(".e-movablecontent").querySelector("tbody"), fHdr = this.parent.getHeaderContent().querySelector(".e-frozenheader").querySelector("tbody"), mHdr = this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("tbody");
                if (this.parent.frozenRows && idx >= this.parent.frozenRows && (idx -= this.parent.frozenRows), 
                fCont.contains(row)) return mCont.children[idx];
                if (mCont.contains(row)) return fCont.children[idx];
                if (fHdr.contains(row)) return mHdr.children[idx];
                if (mHdr.contains(row)) return fHdr.children[idx];
            }
            return row;
        }, InlineEditRender.prototype.update = function(elements, args) {
            this.isEdit = !0, closest(args.row, ".e-movablecontent") && (args.row = this.getFreezeRow(args.row));
            var tdElement = [].slice.call(args.row.querySelectorAll("td.e-rowcell"));
            args.row.innerHTML = "", tdElement = this.updateFreezeEdit(args.row, tdElement), 
            args.row.appendChild(this.getEditElement(elements, !0, tdElement, args, !0)), args.row.classList.add("e-editedrow"), 
            this.refreshFreezeEdit(args.row, args);
        }, InlineEditRender.prototype.refreshFreezeEdit = function(row, args) {
            var fCls, cont, td = row.firstChild, idx = parseInt(row.getAttribute("aria-rowindex"), 10);
            if (this.parent.getFrozenColumns()) {
                idx < this.parent.frozenRows ? (cont = this.parent.getHeaderContent(), fCls = ".e-frozenheader") : (cont = this.parent.getContent(), 
                fCls = ".e-frozencontent");
                var mTd = td.cloneNode(!0), form = args.movableForm = mTd.querySelector("form");
                this.parent.editSettings.template && (form.innerHTML = "", this.appendChildren(form, args.rowData, !1));
                var fRows = void 0;
                cont.querySelector(fCls).contains(row) ? (fRows = this.parent.getMovableRowByIndex(idx), 
                this.updateFrozenCont(fRows, td, mTd)) : (fRows = this.parent.getRowByIndex(idx), 
                this.updateFrozenCont(fRows, mTd, td)), fRows.appendChild(mTd), fRows.classList.add("e-editedrow");
            }
        }, InlineEditRender.prototype.updateFrozenCont = function(row, ele, mEle) {
            row.innerHTML = "", this.parent.editSettings.template || (this.renderMovable(ele, mEle), 
            mEle.querySelector("colgroup").innerHTML = this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("colgroup").innerHTML), 
            ele.setAttribute("colspan", this.parent.getVisibleFrozenColumns() + ""), mEle.setAttribute("colspan", this.parent.getVisibleColumns().length - this.parent.getVisibleFrozenColumns() + "");
        }, InlineEditRender.prototype.renderMovable = function(ele, mEle) {
            for (var frzCols = this.parent.getFrozenColumns(), i = 0; i < frzCols; i++) mEle.querySelector("tr").removeChild(mEle.querySelector("tr").children[0]);
            i = frzCols;
            for (var len = ele.querySelector("tr").childElementCount; i < len; i++) ele.querySelector("tr").removeChild(ele.querySelector("tr").children[ele.querySelector("tr").childElementCount - 1]);
        }, InlineEditRender.prototype.getEditElement = function(elements, isEdit, tdElement, args, isFrozen) {
            var gObj = this.parent, gLen = 0, isDetail = isNullOrUndefined(gObj.detailTemplate) && isNullOrUndefined(gObj.childGrid) ? 0 : 1;
            gObj.allowGrouping && (gLen = gObj.groupSettings.columns.length);
            var td = this.parent.createElement("td", {
                className: "e-editcell e-normaledit",
                attrs: {
                    colspan: (gObj.getVisibleColumns().length - gObj.getVisibleFrozenColumns() + gLen + isDetail).toString()
                }
            }), form = args.form = this.parent.createElement("form", {
                id: gObj.element.id + "EditForm",
                className: "e-gridform"
            });
            if (this.parent.editSettings.template) return this.appendChildren(form, args.rowData, isFrozen), 
            td.appendChild(form), td;
            var table = this.parent.createElement("table", {
                className: "e-table e-inline-edit",
                attrs: {
                    cellspacing: "0.25"
                }
            });
            table.appendChild(gObj.getContentTable().querySelector("colgroup").cloneNode(!0));
            var tbody = this.parent.createElement("tbody"), tr = this.parent.createElement("tr"), i = 0;
            for (isDetail && tr.insertBefore(this.parent.createElement("td", {
                className: "e-detailrowcollapse"
            }), tr.firstChild); i < gLen; ) tr.appendChild(this.parent.createElement("td", {
                className: "e-indentcell"
            })), i++;
            var m = 0;
            for (i = 0; isEdit && m < tdElement.length && i < gObj.getColumns().length || i < gObj.getColumns().length; ) {
                var span = isEdit ? tdElement[m].getAttribute("colspan") : null, col = gObj.getColumns()[i], td_1 = this.parent.createElement("td", {
                    className: "e-rowcell",
                    attrs: {
                        style: "text-align:" + (col.textAlign ? col.textAlign : ""),
                        colspan: span || ""
                    }
                });
                col.visible ? (td_1.appendChild(elements[col.uid]), "booleanedit" === col.editType ? td_1.classList.add("e-boolcell") : (col.commands || col.commandsTemplate) && addClass([ td_1 ], "e-unboundcell")) : td_1.classList.add("e-hide"), 
                tr.appendChild(td_1), i = span ? i + parseInt(span, 10) : i + 1, m++;
            }
            return tbody.appendChild(tr), table.appendChild(tbody), form.appendChild(table), 
            td.appendChild(form), td;
        }, InlineEditRender.prototype.removeEventListener = function() {}, InlineEditRender.prototype.appendChildren = function(form, data, isFrozen) {
            var dummyData = extend({}, data, {
                isAdd: !this.isEdit,
                isFrozen: isFrozen
            }, !0);
            appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate"));
        }, InlineEditRender;
    }(), BatchEditRender = function() {
        function BatchEditRender(parent) {
            this.parent = parent;
        }
        return BatchEditRender.prototype.update = function(elements, args) {
            args.cell.innerHTML = "", args.cell.appendChild(this.getEditElement(elements, args)), 
            args.cell.classList.add("e-editedbatchcell"), classList(args.row, [ "e-editedrow", "e-batchrow" ], []);
        }, BatchEditRender.prototype.getEditElement = function(elements, args) {
            var gObj = this.parent, form = this.parent.createElement("form", {
                id: gObj.element.id + "EditForm",
                className: "e-gridform"
            });
            return form.appendChild(elements[args.columnObject.uid]), "booleanedit" === args.columnObject.editType && args.cell.classList.add("e-boolcell"), 
            args.columnObject.editType || args.cell.classList.add("e-inputbox"), form;
        }, BatchEditRender.prototype.removeEventListener = function() {}, BatchEditRender;
    }(), DialogEditRender = function() {
        function DialogEditRender(parent, serviceLocator) {
            this.parent = parent, this.serviceLocator = serviceLocator, this.parent.isDestroyed || (this.parent.on(dialogDestroy, this.destroy, this), 
            this.parent.on(destroy$1, this.destroy, this));
        }
        return DialogEditRender.prototype.setLocaleObj = function() {
            this.l10n = this.serviceLocator.getService("localization");
        }, DialogEditRender.prototype.addNew = function(elements, args) {
            this.isEdit = !1, this.createDialog(elements, args);
        }, DialogEditRender.prototype.update = function(elements, args) {
            this.isEdit = !0, this.createDialog(elements, args);
        }, DialogEditRender.prototype.createDialog = function(elements, args) {
            var gObj = this.parent;
            this.dialog = this.parent.createElement("div", {
                id: gObj.element.id + "_dialogEdit_wrapper",
                styles: "width: auto"
            }), gObj.element.appendChild(this.dialog), this.setLocaleObj();
            var position = this.parent.element.getBoundingClientRect().height < 400 ? {
                X: "center",
                Y: "top"
            } : {
                X: "center",
                Y: "center"
            };
            this.dialogObj = args.dialog = new Dialog({
                header: this.isEdit ? this.l10n.getConstant("EditFormTitle") + args.primaryKeyValue[0] : this.l10n.getConstant("AddFormTitle"),
                isModal: !0,
                visible: !0,
                cssClass: "e-edit-dialog",
                content: this.getEditElement(elements, args),
                showCloseIcon: !0,
                allowDragging: !0,
                position: position,
                close: this.dialogClose.bind(this),
                closeOnEscape: !0,
                width: gObj.editSettings.template ? "auto" : "330px",
                target: gObj.element,
                animationSettings: {
                    effect: "None"
                },
                buttons: [ {
                    click: this.btnClick.bind(this),
                    buttonModel: {
                        content: this.l10n.getConstant("SaveButton"),
                        cssClass: "e-primary",
                        isPrimary: !0
                    }
                }, {
                    click: this.btnClick.bind(this),
                    buttonModel: {
                        cssClass: "e-flat",
                        content: this.l10n.getConstant("CancelButton")
                    }
                } ]
            }), this.dialogObj.appendTo(this.dialog);
        }, DialogEditRender.prototype.btnClick = function(e) {
            this.l10n.getConstant("CancelButton").toLowerCase() === e.target.innerText.trim().toLowerCase() ? this.dialogClose() : this.parent.endEdit();
        }, DialogEditRender.prototype.dialogClose = function() {
            this.parent.closeEdit(), this.destroy();
        }, DialogEditRender.prototype.destroy = function(args) {
            this.parent.notify("destroy-form", {}), this.parent.isEdit = !1, this.parent.notify("toolbar-refresh", {}), 
            this.dialog && !this.dialogObj.isDestroyed && (this.dialogObj.destroy(), remove(this.dialog));
        }, DialogEditRender.prototype.getEditElement = function(elements, args) {
            var gObj = this.parent, div = this.parent.createElement("div", {
                className: this.isEdit ? "e-editedrow" : "e-insertedrow"
            }), form = args.form = this.parent.createElement("form", {
                id: gObj.element.id + "EditForm",
                className: "e-gridform"
            });
            if (this.parent.editSettings.template) {
                var dummyData = extend({}, args.rowData, {
                    isAdd: !this.isEdit
                }, !0);
                return appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, "editSettingsTemplate")), 
                div.appendChild(form), div;
            }
            for (var table = this.parent.createElement("table", {
                className: "e-table",
                attrs: {
                    cellspacing: "6px"
                }
            }), tbody = this.parent.createElement("tbody"), cols = gObj.getColumns(), i = 0; i < cols.length; i++) if (cols[i].visible && !cols[i].commands && !cols[i].commandsTemplate) {
                var tr = this.parent.createElement("tr"), dataCell = this.parent.createElement("td", {
                    className: "e-rowcell",
                    attrs: {
                        style: "text-align:" + (this.parent.enableRtl ? "right" : "left") + ";width:190px"
                    }
                });
                this.parent.createElement("label", {
                    innerHTML: cols[i].field
                });
                elements[cols[i].uid].classList.remove("e-input"), dataCell.appendChild(elements[cols[i].uid]), 
                tr.appendChild(dataCell), tbody.appendChild(tr);
            }
            return table.appendChild(tbody), form.appendChild(table), div.appendChild(form), 
            div;
        }, DialogEditRender.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(dialogDestroy, this.destroy), this.parent.off(destroy$1, this.destroy));
        }, DialogEditRender;
    }(), EditRender = function() {
        function EditRender(parent, serviceLocator) {
            this.editType = {
                Inline: InlineEditRender,
                Normal: InlineEditRender,
                Batch: BatchEditRender,
                Dialog: DialogEditRender
            }, this.parent = parent, this.serviceLocator = serviceLocator, this.renderer = new this.editType[this.parent.editSettings.mode](parent, serviceLocator), 
            this.focus = serviceLocator.getService("focus");
        }
        return EditRender.prototype.addNew = function(args) {
            this.renderer.addNew(this.getEditElements(args), args), this.convertWidget(args);
        }, EditRender.prototype.update = function(args) {
            this.renderer.update(this.getEditElements(args), args), this.convertWidget(args);
        }, EditRender.prototype.convertWidget = function(args) {
            var isFocused, cell, fForm, gObj = this.parent, frzCols = gObj.getFrozenColumns(), form = gObj.element.querySelector(".e-gridform");
            if (frzCols && "Normal" === gObj.editSettings.mode) {
                var rowIndex = parseInt(args.row.getAttribute("aria-rowindex"), 10);
                fForm = gObj.frozenRows && ("add" === args.requestType || rowIndex < gObj.frozenRows) ? gObj.element.querySelector(".e-movableheader").querySelector(".e-gridform") : gObj.element.querySelector(".e-movablecontent").querySelector(".e-gridform");
            }
            for (var cols = "Batch" !== gObj.editSettings.mode ? gObj.getColumns() : [ gObj.getColumnByField(args.columnName) ], _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
                var col = cols_1[_i];
                if (!this.parent.editSettings.template || isNullOrUndefined(col.field)) {
                    if (col.visible && !col.commands) {
                        col.valueAccessor(col.field, args.rowData, col), cell = frzCols && cols.indexOf(col) >= frzCols && "Normal" === gObj.editSettings.mode ? fForm.querySelector("[e-mappinguid=" + col.uid + "]") : form.querySelector("[e-mappinguid=" + col.uid + "]");
                        var temp = col.edit.write;
                        isNullOrUndefined(cell) || ("string" == typeof temp ? (temp = getObject$1(temp, window))({
                            rowData: args.rowData,
                            element: cell,
                            column: col,
                            requestType: args.requestType,
                            row: args.row,
                            foreignKeyData: col.isForeignColumn() && getObject$1(col.field, args.foreignKeyData)
                        }) : col.edit.write({
                            rowData: args.rowData,
                            element: cell,
                            column: col,
                            requestType: args.requestType,
                            row: args.row,
                            foreignKeyData: col.isForeignColumn() && getObject$1(col.field, args.foreignKeyData)
                        }), isFocused || cell.getAttribute("disabled") || (this.focusElement(cell, args.type), 
                        isFocused = !0));
                    }
                } else {
                    var cellArgs = extend({}, args);
                    cellArgs.element = form.querySelector("[name=" + getComplexFieldID(col.field) + "]"), 
                    isNullOrUndefined(cellArgs.element) && frzCols && (cellArgs.element = fForm.querySelector("[name=" + getComplexFieldID(col.field) + "]")), 
                    "string" == typeof col.edit.write ? getObject$1(col.edit.write, window)(cellArgs) : col.edit.write(cellArgs);
                }
            }
        }, EditRender.prototype.focusElement = function(elem, type) {
            var chkBox = this.parent.element.querySelector(".e-edit-checkselect");
            isNullOrUndefined(chkBox) || chkBox.nextElementSibling.classList.add("e-focus"), 
            "Batch" === this.parent.editSettings.mode ? this.focus.onClick({
                target: closest(elem, "td")
            }, !0) : elem.focus(), elem.classList.contains("e-defaultcell") && elem.setSelectionRange(elem.value.length, elem.value.length);
        }, EditRender.prototype.getEditElements = function(args) {
            var gObj = this.parent, elements = {}, cols = "Batch" !== gObj.editSettings.mode ? gObj.getColumns() : [ gObj.getColumnByField(args.columnName) ];
            if (this.parent.editSettings.template) return {};
            for (var i = 0, len = cols.length; i < len; i++) {
                var col = cols[i];
                if (col.visible) if (col.commands || col.commandsTemplate) {
                    var cellRendererFact = this.serviceLocator.getService("cellRendererFactory"), model = new RowModelGenerator(this.parent), cellRenderer = cellRendererFact.getCellRenderer(CellType.CommandColumn), cell = model.generateRows(args.rowData)[0].cells.filter(function(cell) {
                        return cell.commands;
                    })[0], td = cellRenderer.render(cell, args.rowData, {
                        index: args.row ? args.row.getAttribute("aria-rowindex") : 0
                    });
                    (div = td.firstElementChild).setAttribute("textAlign", td.getAttribute("textAlign")), 
                    elements[col.uid] = div;
                } else {
                    var tArgs = {
                        column: col,
                        value: col.valueAccessor(col.field, args.rowData, col),
                        type: args.requestType,
                        data: args.rowData
                    }, temp = col.edit.create, input = void 0;
                    if (col.editTemplate) appendChildren(input = this.parent.createElement("span", {
                        attrs: {
                            "e-mappinguid": col.uid
                        }
                    }), col.getEditTemplate()(args.rowData, this.parent, "editTemplate")); else {
                        if ("string" == typeof (input = "string" == typeof temp ? (temp = getObject$1(temp, window))(tArgs) : col.edit.create(tArgs))) {
                            var div;
                            (div = this.parent.createElement("div")).innerHTML = input, input = div.firstChild;
                        }
                        var isInput = "input" !== input.tagName && input.querySelectorAll("input").length, complexFieldName = getComplexFieldID(col.field);
                        attributes(isInput ? input.querySelector("input") : input, {
                            name: complexFieldName,
                            "e-mappinguid": col.uid,
                            id: gObj.element.id + complexFieldName
                        }), classList(input, [ "e-input", "e-field" ], []), "Right" === col.textAlign && input.classList.add("e-ralign"), 
                        ((col.isPrimaryKey || col.isIdentity) && "beginEdit" === args.requestType || col.isIdentity && "add" === args.requestType) && input.setAttribute("disabled", "true");
                    }
                    elements[col.uid] = input;
                }
            }
            return elements;
        }, EditRender.prototype.destroy = function() {
            this.renderer.removeEventListener();
        }, EditRender;
    }(), BooleanEditCell = function() {
        function BooleanEditCell(parent) {
            this.activeClasses = [ "e-selectionbackground", "e-active" ], this.parent = parent;
        }
        return BooleanEditCell.prototype.create = function(args) {
            var col = args.column, classNames = "e-field e-boolcell";
            "checkbox" === col.type && (classNames = "e-field e-boolcell e-edit-checkselect");
            var complexFieldName = getComplexFieldID(args.column.field);
            return this.parent.createElement("input", {
                className: classNames,
                attrs: {
                    type: "checkbox",
                    value: args.value,
                    "e-mappinguid": col.uid,
                    id: this.parent.element.id + complexFieldName,
                    name: complexFieldName
                }
            });
        }, BooleanEditCell.prototype.read = function(element) {
            return element.checked;
        }, BooleanEditCell.prototype.write = function(args) {
            var selectChkBox, chkState;
            "add" === args.requestType || args.row.classList.contains("e-addedrow");
            if (isNullOrUndefined(args.row) || (selectChkBox = args.row.querySelector(".e-edit-checkselect")), 
            getObject$1(args.column.field, args.rowData) && (chkState = JSON.parse(getObject$1(args.column.field, args.rowData).toString().toLowerCase())), 
            !isNullOrUndefined(selectChkBox)) {
                if (this.editType = this.parent.editSettings.mode, this.editRow = args.row, "add" !== args.requestType) {
                    var row = this.parent.getRowObjectFromUID(args.row.getAttribute("data-uid"));
                    chkState = !!row && row.isSelected;
                }
                addRemoveActiveClasses.apply(void 0, [ [].slice.call(args.row.querySelectorAll(".e-rowcell")), chkState ].concat(this.activeClasses));
            }
            this.obj = new CheckBox(extend({
                label: "Dialog" !== this.parent.editSettings.mode ? "" : args.column.headerText,
                checked: chkState,
                disabled: !isEditable(args.column, args.requestType, args.element),
                enableRtl: this.parent.enableRtl,
                change: this.checkBoxChange.bind(this)
            }, args.column.edit.params)), this.obj.appendTo(args.element);
        }, BooleanEditCell.prototype.checkBoxChange = function(args) {
            if (this.editRow && "Dialog" !== this.editType) {
                var add = !1;
                args.checked ? (add = !0, this.editRow.setAttribute("aria-selected", add.toString())) : this.editRow.removeAttribute("aria-selected"), 
                addRemoveActiveClasses.apply(void 0, [ [].slice.call(this.editRow.querySelectorAll(".e-rowcell")), add ].concat(this.activeClasses));
            }
        }, BooleanEditCell.prototype.destroy = function() {
            this.obj && this.obj.destroy();
        }, BooleanEditCell;
    }(), DropDownEditCell = function() {
        function DropDownEditCell(parent) {
            this.parent = parent;
        }
        return DropDownEditCell.prototype.create = function(args) {
            var complexFieldName = getComplexFieldID(args.column.field);
            return this.parent.createElement("input", {
                className: "e-field",
                attrs: {
                    id: this.parent.element.id + complexFieldName,
                    name: complexFieldName,
                    type: "text",
                    "e-mappinguid": args.column.uid
                }
            });
        }, DropDownEditCell.prototype.write = function(args) {
            this.column = args.column;
            var isInline = "Dialog" !== this.parent.editSettings.mode;
            this.obj = new DropDownList(extend({
                dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),
                query: new Query().select(args.column.field),
                enabled: isEditable(args.column, args.requestType, args.element),
                fields: {
                    value: args.column.field
                },
                value: getObject$1(args.column.field, args.rowData),
                enableRtl: this.parent.enableRtl,
                actionComplete: this.ddActionComplete.bind(this),
                placeholder: isInline ? "" : args.column.headerText,
                popupHeight: "200px",
                floatLabelType: isInline ? "Never" : "Always",
                open: this.dropDownOpen.bind(this),
                sortOrder: "Ascending"
            }, args.column.edit.params)), this.obj.appendTo(args.element), args.element.setAttribute("name", getComplexFieldID(args.column.field));
        }, DropDownEditCell.prototype.read = function(element) {
            return element.ej2_instances[0].value;
        }, DropDownEditCell.prototype.ddActionComplete = function(e) {
            e.result = DataUtil.distinct(e.result, this.obj.fields.value, !0), this.column.dataSource && (this.column.dataSource.dataSource.json = e.result);
        }, DropDownEditCell.prototype.dropDownOpen = function(args) {
            var dlgElement = parentsUntil(this.obj.element, "e-dialog");
            if ("Dialog" === this.parent.editSettings.mode && !isNullOrUndefined(dlgElement)) {
                var dlgObj = this.parent.element.querySelector("#" + dlgElement.id).ej2_instances[0];
                args.popup.element.style.zIndex = (dlgObj.zIndex + 1).toString();
            }
        }, DropDownEditCell.prototype.destroy = function() {
            this.obj && this.obj.destroy();
        }, DropDownEditCell;
    }(), NumericEditCell = function() {
        function NumericEditCell(parent) {
            this.parent = parent;
        }
        return NumericEditCell.prototype.create = function(args) {
            var complexFieldName = getComplexFieldID(args.column.field);
            return this.instances = new Internationalization(this.parent.locale), this.parent.createElement("input", {
                className: "e-field",
                attrs: {
                    id: this.parent.element.id + complexFieldName,
                    name: complexFieldName,
                    "e-mappinguid": args.column.uid
                }
            });
        }, NumericEditCell.prototype.read = function(element) {
            return this.instances.getNumberParser({
                format: "n"
            })(element.value);
        }, NumericEditCell.prototype.write = function(args) {
            var col = args.column, isInline = "Dialog" !== this.parent.editSettings.mode;
            this.obj = new NumericTextBox(extend({
                value: parseFloat(getObject$1(args.column.field, args.rowData)),
                enableRtl: this.parent.enableRtl,
                placeholder: isInline ? "" : args.column.headerText,
                enabled: isEditable(args.column, args.requestType, args.element),
                floatLabelType: "Dialog" !== this.parent.editSettings.mode ? "Never" : "Always"
            }, col.edit.params)), this.obj.appendTo(args.element), args.element.setAttribute("name", getComplexFieldID(args.column.field));
        }, NumericEditCell.prototype.destroy = function() {
            this.obj && !this.obj.isDestroyed && this.obj.destroy();
        }, NumericEditCell;
    }(), DefaultEditCell = function() {
        function DefaultEditCell(parent) {
            this.parent = parent;
        }
        return DefaultEditCell.prototype.create = function(args) {
            var col = args.column;
            return this.parent.createElement("input", {
                className: "e-field e-input e-defaultcell",
                attrs: {
                    type: "text",
                    value: isNullOrUndefined(args.value) ? "" : args.value,
                    "e-mappinguid": col.uid,
                    id: this.parent.element.id + getComplexFieldID(col.field),
                    name: getComplexFieldID(col.field),
                    style: "text-align:" + col.textAlign
                }
            });
        }, DefaultEditCell.prototype.read = function(element) {
            return element.value;
        }, DefaultEditCell.prototype.write = function(args) {
            args.column;
            var isInline = "Dialog" !== this.parent.editSettings.mode, inputargs = {
                element: args.element,
                floatLabelType: "Dialog" !== this.parent.editSettings.mode ? "Never" : "Always",
                properties: {
                    enableRtl: this.parent.enableRtl,
                    enabled: isEditable(args.column, args.requestType, args.element),
                    placeholder: isInline ? "" : args.column.headerText
                }
            };
            Input.createInput(inputargs, this.parent.createElement);
        }, DefaultEditCell;
    }(), NormalEdit = function() {
        function NormalEdit(parent, serviceLocator, renderer) {
            this.args = {}, this.parent = parent, this.renderer = renderer, this.serviceLocator = serviceLocator, 
            this.addEventListener();
        }
        return NormalEdit.prototype.clickHandler = function(e) {
            var target = e.target, gObj = this.parent;
            (parentsUntil(target, "e-gridcontent") && parentsUntil(parentsUntil(target, "e-gridcontent"), "e-grid").id === gObj.element.id || gObj.frozenRows && parentsUntil(target, "e-headercontent")) && !parentsUntil(target, "e-unboundcelldiv") && (this.rowIndex = parentsUntil(target, "e-rowcell") ? parseInt(target.parentElement.getAttribute("aria-rowindex"), 10) : -1, 
            gObj.isEdit && gObj.editModule.endEdit());
        }, NormalEdit.prototype.dblClickHandler = function(e) {
            parentsUntil(e.target, "e-rowcell") && this.parent.editSettings.allowEditOnDblClick && this.parent.editModule.startEdit(parentsUntil(e.target, "e-row"));
        }, NormalEdit.prototype.editComplete = function(e) {
            switch (this.parent.isEdit = !1, e.requestType) {
              case "save":
                (this.parent.isCheckBoxSelection || "Multiple" === this.parent.selectionSettings.type) && this.parent.isPersistSelection || this.parent.selectRow(0), 
                this.parent.trigger(actionComplete, extend(e, {
                    requestType: "save",
                    type: actionComplete
                }));
                break;

              case "delete":
                this.parent.trigger(actionComplete, extend(e, {
                    requestType: "delete",
                    type: actionComplete
                })), this.parent.selectRow(this.editRowIndex);
            }
        }, NormalEdit.prototype.startEdit = function(tr) {
            var gObj = this.parent, primaryKeys = gObj.getPrimaryKeyFieldNames(), primaryKeyValues = [];
            this.rowIndex = this.editRowIndex = parseInt(tr.getAttribute("aria-rowindex"), 10), 
            this.previousData = gObj.getCurrentViewRecords()[this.rowIndex];
            for (var i = 0; i < primaryKeys.length; i++) primaryKeyValues.push(this.previousData[primaryKeys[i]]);
            this.uid = tr.getAttribute("data-uid");
            var rowObj = gObj.getRowObjectFromUID(this.uid), args = {
                row: tr,
                primaryKey: primaryKeys,
                primaryKeyValue: primaryKeyValues,
                requestType: "beginEdit",
                rowData: this.previousData,
                rowIndex: this.rowIndex,
                type: "edit",
                cancel: !1,
                foreignKeyData: rowObj && rowObj.foreignKeyData
            };
            gObj.trigger("beginEdit", args), args.type = "actionBegin", gObj.trigger(actionBegin, args), 
            args.cancel || (gObj.isEdit = !0, "Dialog" !== gObj.editSettings.mode && gObj.clearSelection(), 
            "Dialog" === gObj.editSettings.mode && (gObj.selectionModule.preventFocus = !0, 
            args.row.classList.add("e-dlgeditrow")), this.renderer.update(args), this.uid = tr.getAttribute("data-uid"), 
            gObj.editModule.applyFormValidation(), args.type = "actionComplete", gObj.trigger(actionComplete, args), 
            this.args = args, this.parent.allowTextWrap && this.parent.notify(freezeRender, {
                case: "textwrap"
            }));
        }, NormalEdit.prototype.updateRow = function(index, data) {
            var gObj = this.parent, args = {
                requestType: "save",
                type: actionBegin,
                data: data,
                cancel: !1,
                previousData: gObj.getCurrentViewRecords()[index]
            };
            gObj.showSpinner(), gObj.notify(updateData, args), gObj.refresh();
        }, NormalEdit.prototype.editFormValidate = function() {
            var gObj = this.parent, form1 = gObj.editModule.formObj.validate(), form2 = !gObj.editModule.mFormObj || gObj.editModule.mFormObj.validate();
            return form1 && form2;
        }, NormalEdit.prototype.endEdit = function() {
            var gObj = this.parent;
            if (this.parent.isEdit && this.editFormValidate()) {
                var editedData = extend({}, {}, this.previousData, !0), args = extend(this.args, {
                    requestType: "save",
                    type: actionBegin,
                    data: editedData,
                    cancel: !1,
                    previousData: this.previousData,
                    selectedRow: gObj.selectedRowIndex,
                    foreignKeyData: {}
                });
                if (editedData = gObj.editModule.getCurrentEditedData(gObj.element.querySelector(".e-gridform"), editedData), 
                gObj.getFrozenColumns() && "Normal" === gObj.editSettings.mode) {
                    var mForm = gObj.element.querySelector(".e-movableheader").querySelector(".e-gridform");
                    editedData = gObj.frozenRows && mForm ? gObj.editModule.getCurrentEditedData(mForm, editedData) : gObj.editModule.getCurrentEditedData(gObj.element.querySelector(".e-movablecontent").querySelector(".e-gridform"), editedData);
                }
                if (gObj.element.querySelectorAll(".e-editedrow").length) {
                    if (args.action = "edit", gObj.trigger(actionBegin, args), args.cancel) return;
                    gObj.showSpinner(), gObj.notify(updateData, args);
                } else if (args.action = "add", args.selectedRow = 0, args.index = this.addedRowIndex, 
                gObj.notify(modelChanged, args), this.addedRowIndex = null, args.cancel) return;
            }
        }, NormalEdit.prototype.destroyElements = function() {
            var gObj = this.parent;
            gObj.editModule.destroyWidgets(), gObj.editModule.destroyForm(), this.parent.notify(dialogDestroy, {});
        }, NormalEdit.prototype.editHandler = function(args) {
            var _this = this;
            args.promise ? args.promise.then(function(e) {
                return _this.edSucc(e, args);
            }).catch(function(e) {
                return _this.edFail(e);
            }) : this.editSuccess(args.data, args);
        }, NormalEdit.prototype.edSucc = function(e, args) {
            this.editSuccess(e, args);
        }, NormalEdit.prototype.edFail = function(e) {
            this.editFailure(e);
        }, NormalEdit.prototype.updateCurrentViewData = function(data) {
            this.parent.getCurrentViewRecords()[this.editRowIndex] = data;
        }, NormalEdit.prototype.requestSuccess = function(args) {
            this.parent.editModule.formObj && !this.parent.editModule.formObj.isDestroyed && (this.destroyElements(), 
            this.stopEditStatus(), "Dialog" === this.parent.editSettings.mode && "add" !== args.action && this.parent.element.querySelector(".e-dlgeditrow").classList.remove("e-dlgeditrow"));
        }, NormalEdit.prototype.editSuccess = function(e, args) {
            isNullOrUndefined(e) || (args.data = e), this.requestSuccess(args), this.parent.trigger("beforeDataBound", args), 
            args.type = actionComplete, this.parent.isEdit = !1, this.refreshRow(args.data), 
            this.updateCurrentViewData(args.data), this.parent.trigger(actionComplete, args), 
            (this.parent.isCheckBoxSelection || "Multiple" === this.parent.selectionSettings.type) && this.parent.isPersistSelection || "Dialog" !== this.parent.editSettings.mode && this.parent.selectRow(this.rowIndex > -1 ? this.rowIndex : this.editRowIndex), 
            this.parent.hideSpinner();
        }, NormalEdit.prototype.editFailure = function(e) {
            this.parent.trigger("actionFailure", e), this.parent.hideSpinner();
        }, NormalEdit.prototype.refreshRow = function(data) {
            var frzCols = this.parent.getFrozenColumns(), row = new RowRenderer(this.serviceLocator, null, this.parent), rowObj = this.parent.getRowObjectFromUID(this.uid);
            if (rowObj && (rowObj.changes = data, refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes), 
            row.refresh(rowObj, this.parent.getColumns(), !0), frzCols)) {
                var uid = void 0, tr = this.parent.element.querySelector("[data-uid=" + rowObj.uid + "]");
                uid = parentsUntil(tr, "e-frozencontent") || parentsUntil(tr, "e-frozenheader") ? this.parent.getMovableRows()[rowObj.index].getAttribute("data-uid") : this.parent.getRows()[rowObj.index].getAttribute("data-uid"), 
                (rowObj = this.parent.getRowObjectFromUID(uid)).changes = data, row.refresh(rowObj, this.parent.columns, !0);
            }
        }, NormalEdit.prototype.closeEdit = function() {
            if (this.parent.isEdit) {
                var gObj = this.parent, args = extend(this.args, {
                    requestType: "cancel",
                    type: actionBegin,
                    data: this.previousData,
                    selectedRow: gObj.selectedRowIndex
                });
                gObj.trigger(actionBegin, args), "Dialog" === this.parent.editSettings.mode && this.parent.notify(dialogDestroy, {}), 
                gObj.isEdit = !1, this.stopEditStatus(), args.type = actionComplete, "Dialog" !== gObj.editSettings.mode && this.refreshRow(args.data), 
                gObj.getContentTable().querySelector("tr.e-emptyrow") && !gObj.getContentTable().querySelector("tr.e-row") && gObj.getContentTable().querySelector("tr.e-emptyrow").classList.remove("e-hide"), 
                "Dialog" !== gObj.editSettings.mode && gObj.selectRow(this.rowIndex), gObj.trigger(actionComplete, args);
            }
        }, NormalEdit.prototype.addRecord = function(data, index) {
            var _this = this, gObj = this.parent;
            if (this.addedRowIndex = index = isNullOrUndefined(index) ? 0 : index, data) gObj.notify(modelChanged, {
                requestType: "save",
                type: actionBegin,
                data: data,
                selectedRow: 0,
                action: "add",
                index: index
            }); else if (!gObj.isEdit) {
                this.previousData = {}, this.uid = "", gObj.columns.forEach(function(col) {
                    col.field && DataUtil.setValue(col.field, col.defaultValue, _this.previousData);
                });
                var args = {
                    cancel: !1,
                    foreignKeyData: {},
                    requestType: "add",
                    data: this.previousData,
                    type: actionBegin,
                    index: index,
                    rowData: this.previousData
                };
                gObj.trigger(actionBegin, args), args.cancel || (gObj.isEdit = !0, "Dialog" !== gObj.editSettings.mode && gObj.clearSelection(), 
                this.renderer.addNew(args), gObj.editModule.applyFormValidation(), args.type = actionComplete, 
                args.row = gObj.element.querySelector(".e-addedrow"), gObj.trigger(actionComplete, args), 
                this.args = args);
            }
        }, NormalEdit.prototype.deleteRecord = function(fieldname, data) {
            if (this.editRowIndex = this.parent.selectedRowIndex, data) {
                data = data instanceof Array ? data : [ data ];
                var gObj = this.parent, dataLen = Object.keys(data).length;
                fieldname = fieldname || this.parent.getPrimaryKeyFieldNames()[0];
                for (var _loop_1 = function(i) {
                    var tmpRecord, contained = gObj.currentViewData.some(function(record) {
                        return tmpRecord = record, data[i] === getObject$1(fieldname, record) || data[i] === record;
                    });
                    data[i] = contained ? tmpRecord : (_a = {}, _a[fieldname] = data[i], _a);
                    var _a;
                }, i = 0; i < dataLen; i++) _loop_1(i);
            }
            this.parent.notify(modelChanged, {
                requestType: "delete",
                type: actionBegin,
                foreignKeyData: {},
                data: data || this.parent.getSelectedRecords(),
                tr: this.parent.getSelectedRows(),
                cancel: !1
            });
        }, NormalEdit.prototype.stopEditStatus = function() {
            var mElem, editMElem, gObj = this.parent, elem = gObj.element.querySelector(".e-addedrow");
            gObj.getFrozenColumns() && (mElem = gObj.element.querySelectorAll(".e-addedrow")[1], 
            editMElem = gObj.element.querySelectorAll(".e-editedrow")[1], mElem && remove(mElem), 
            editMElem && editMElem.classList.remove("e-editedrow")), elem && remove(elem), (elem = gObj.element.querySelector(".e-editedrow")) && elem.classList.remove("e-editedrow");
        }, NormalEdit.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on("crud-Action", this.editHandler, this), 
            this.parent.on("double-tap", this.dblClickHandler, this), this.parent.on(click, this.clickHandler, this), 
            this.parent.on("recordAdded", this.requestSuccess, this), this.parent.on("dblclick", this.dblClickHandler, this), 
            this.parent.on("delete-complete", this.editComplete, this), this.parent.on("save-complete", this.editComplete, this));
        }, NormalEdit.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off("crud-Action", this.editHandler), this.parent.off("double-tap", this.dblClickHandler), 
            this.parent.off(click, this.clickHandler), this.parent.off("recordAdded", this.requestSuccess), 
            this.parent.off("dblclick", this.dblClickHandler), this.parent.off("delete-complete", this.editComplete), 
            this.parent.off("save-complete", this.editComplete));
        }, NormalEdit.prototype.destroy = function() {
            this.removeEventListener(), this.renderer.destroy();
        }, NormalEdit;
    }(), __extends$65 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), InlineEdit = function(_super) {
        function InlineEdit(parent, serviceLocator, renderer) {
            var _this = _super.call(this, parent, serviceLocator) || this;
            return _this.parent = parent, _this.serviceLocator = serviceLocator, _this.renderer = renderer, 
            _this;
        }
        return __extends$65(InlineEdit, _super), InlineEdit.prototype.closeEdit = function() {
            _super.prototype.closeEdit.call(this);
        }, InlineEdit.prototype.addRecord = function(data, index) {
            _super.prototype.addRecord.call(this, data, index);
        }, InlineEdit.prototype.endEdit = function() {
            _super.prototype.endEdit.call(this);
        }, InlineEdit.prototype.updateRow = function(index, data) {
            _super.prototype.updateRow.call(this, index, data);
        }, InlineEdit.prototype.deleteRecord = function(fieldname, data) {
            _super.prototype.deleteRecord.call(this, fieldname, data);
        }, InlineEdit.prototype.startEdit = function(tr) {
            _super.prototype.startEdit.call(this, tr);
        }, InlineEdit;
    }(NormalEdit), BatchEdit = function() {
        function BatchEdit(parent, serviceLocator, renderer) {
            this.cellDetails = {}, this.parent = parent, this.serviceLocator = serviceLocator, 
            this.renderer = renderer, this.focus = serviceLocator.getService("focus"), this.addEventListener();
        }
        return BatchEdit.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(click, this.clickHandler, this), this.parent.on("dblclick", this.dblClickHandler, this), 
            this.parent.on("beforecellfocused", this.onBeforeCellFocused, this), this.parent.on("cellfocused", this.onCellFocused, this), 
            this.dataBoundFunction = this.dataBound.bind(this), this.parent.addEventListener(dataBound, this.dataBoundFunction), 
            this.parent.on("double-tap", this.dblClickHandler, this), this.parent.on(keyPressed, this.keyDownHandler, this), 
            this.parent.on("editNextValCell", this.editNextValCell, this));
        }, BatchEdit.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(click, this.clickHandler), this.parent.off("dblclick", this.dblClickHandler), 
            this.parent.off("beforecellfocused", this.onBeforeCellFocused), this.parent.off("cellfocused", this.onCellFocused), 
            this.parent.removeEventListener(dataBound, this.dataBoundFunction), this.parent.off("double-tap", this.dblClickHandler), 
            this.parent.off(keyPressed, this.keyDownHandler), this.parent.off("editNextValCell", this.editNextValCell));
        }, BatchEdit.prototype.dataBound = function() {
            this.parent.notify("toolbar-refresh", {});
        }, BatchEdit.prototype.destroy = function() {
            this.removeEventListener();
        }, BatchEdit.prototype.clickHandler = function(e) {
            parentsUntil(e.target, this.parent.element.id + "_add", !0) || (this.parent.isEdit && (this.saveCell(), 
            this.editNextValCell()), parentsUntil(e.target, "e-rowcell") && !this.parent.isEdit && this.setCellIdx(e.target));
        }, BatchEdit.prototype.dblClickHandler = function(e) {
            var target = parentsUntil(e.target, "e-rowcell"), tr = parentsUntil(e.target, "e-row");
            target && tr && !isNaN(parseInt(target.getAttribute("aria-colindex"), 10)) && !target.parentElement.classList.contains("e-editedrow") && this.editCell(parseInt(tr.getAttribute("aria-rowindex"), 10), this.parent.getColumns()[parseInt(target.getAttribute("aria-colindex"), 10)].field, this.isAddRow(parseInt(tr.getAttribute("aria-rowindex"), 10)));
        }, BatchEdit.prototype.onBeforeCellFocused = function(e) {
            this.parent.isEdit && this.validateFormObj() && (e.byClick || [ "tab", "shiftTab", "enter", "shiftEnter" ].indexOf(e.keyArgs.action) > -1) && (e.cancel = !0, 
            e.byClick ? e.clickArgs.preventDefault() : e.keyArgs.preventDefault());
        }, BatchEdit.prototype.onCellFocused = function(e) {
            var frzCols = this.parent.getFrozenColumns(), mCont = this.parent.getContent().querySelector(".e-movablecontent"), mHdr = this.parent.getHeaderContent().querySelector(".e-movableheader"), clear = !(e.container.isContent && e.container.isDataCell || this.parent.frozenRows && e.container.isHeader);
            if (e.byKey && !clear) {
                var _a = e.container.indexes, rowIndex = _a[0], cellIndex = _a[1];
                frzCols && (mCont.contains(e.element) || this.parent.frozenRows && mHdr.contains(e.element)) && (cellIndex += frzCols), 
                this.parent.frozenRows && e.container.isContent && (rowIndex += this.parent.frozenRows);
                var isEdit = this.parent.isEdit;
                if (!this.parent.element.querySelectorAll(".e-popup-open").length) switch (isEdit = isEdit && !this.validateFormObj(), 
                e.keyArgs.action) {
                  case "tab":
                  case "shiftTab":
                    (isEdit || this.parent.isLastCellPrimaryKey) && this.editCellFromIndex(rowIndex, cellIndex);
                    break;

                  case "enter":
                  case "shiftEnter":
                    e.keyArgs.preventDefault(), isEdit && this.editCell(rowIndex, this.cellDetails.column.field);
                    break;

                  case "f2":
                    this.editCellFromIndex(rowIndex, cellIndex), this.focus.focus();
                }
            }
        }, BatchEdit.prototype.isAddRow = function(index) {
            return this.parent.getDataRows()[index].classList.contains("e-insertedrow");
        }, BatchEdit.prototype.editCellFromIndex = function(rowIdx, cellIdx) {
            this.cellDetails.rowIndex = rowIdx, this.cellDetails.cellIndex = cellIdx, this.editCell(rowIdx, this.parent.getColumns()[cellIdx].field, this.isAddRow(rowIdx));
        }, BatchEdit.prototype.closeEdit = function() {
            var gObj = this.parent, rows = this.parent.getRowsObject();
            gObj.frozenColumns && rows.length < 2 * this.parent.currentViewData.length && rows.push.apply(rows, this.parent.getMovableRowsObject());
            var tr, mTr, rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
            gObj.isEdit && this.saveCell(!0), this.isAdded = !1, gObj.clearSelection();
            for (var i = 0; i < rows.length; i++) if (rows[i].isDirty && (gObj.frozenColumns && (gObj.getMovableRowsObject()[rows[i].index].isDirty = !0), 
            tr = gObj.getContentTable().querySelector("[data-uid=" + rows[i].uid + "]"), gObj.frozenRows && (tr = gObj.getHeaderContent().querySelector("[data-uid=" + rows[i].uid + "]")), 
            gObj.frozenColumns && (mTr = gObj.frozenRows ? gObj.getHeaderContent().querySelector(".e-movableheader").querySelector("[data-uid=" + rows[i].uid + "]") : gObj.getContent().querySelector(".e-movablecontent").querySelector("[data-uid=" + rows[i].uid + "]")), 
            tr || mTr)) if (tr && tr.classList.contains("e-insertedrow") || mTr && mTr.classList.contains("e-insertedrow")) tr && remove(tr), 
            mTr && (gObj.frozenColumns || gObj.frozenRows) && remove(mTr), this.removeRowObjectFromUID(rows[i].uid), 
            i--; else {
                refreshForeignData(rows[i], this.parent.getForeignKeyColumns(), rows[i].data), delete rows[i].changes, 
                rows[i].isDirty = !1;
                if (classList(mTr || tr, [], [ "e-hiddenrow", "e-updatedtd" ]), rowRenderer.refresh(rows[i], gObj.getColumns(), !1), 
                this.parent.aggregates.length > 0) {
                    var editType = [];
                    editType.type = "cancel", this.parent.notify("refresh-footer-rendered", editType), 
                    this.parent.groupSettings.columns.length > 0 && this.parent.notify("group-aggregates", editType);
                }
            }
            gObj.getContentTable().querySelector("tr.e-emptyrow") && !gObj.getContentTable().querySelector("tr.e-row") && gObj.getContentTable().querySelector("tr.e-emptyrow").classList.remove("e-hide");
            var args = {
                requestType: "batchCancel",
                rows: this.parent.getRowsObject()
            };
            gObj.notify("batchCancel", {
                rows: this.parent.getRowsObject().length ? this.parent.getRowsObject() : [ new Row({
                    isDataRow: !0,
                    cells: [ new Cell({
                        isDataCell: !0,
                        visible: !0
                    }) ]
                }) ]
            }), gObj.selectRow(this.cellDetails.rowIndex), this.refreshRowIdx(), gObj.notify("toolbar-refresh", {}), 
            this.parent.notify("tooltip-destroy", {}), args = {
                requestType: "batchCancel",
                rows: this.parent.getRowsObject()
            }, gObj.trigger("batchCancel", args), gObj.frozenColumns && rows.splice(this.parent.getMovableRowsObject().length, rows.length);
        }, BatchEdit.prototype.deleteRecord = function(fieldname, data) {
            this.saveCell(), this.validateFormObj() && this.saveCell(!0), this.isAdded = !1, 
            this.bulkDelete(fieldname, data), this.parent.aggregates.length > 0 && (this.parent.notify("refresh-footer-rendered", {}), 
            this.parent.groupSettings.columns.length > 0 && this.parent.notify("group-aggregates", {}));
        }, BatchEdit.prototype.addRecord = function(data) {
            this.bulkAddRow(data);
        }, BatchEdit.prototype.endEdit = function(data) {
            this.parent.isEdit && this.validateFormObj() || this.batchSave();
        }, BatchEdit.prototype.validateFormObj = function() {
            return this.parent.editModule.formObj && !this.parent.editModule.formObj.validate();
        }, BatchEdit.prototype.batchSave = function() {
            var gObj = this.parent;
            if (this.saveCell(), !(gObj.isEdit || this.editNextValCell() || gObj.isEdit)) {
                var changes = this.getBatchChanges();
                "Multiple" === this.parent.selectionSettings.type && changes.deletedRecords.length && (changes.deletedRecords = changes.deletedRecords.concat(this.parent.getSelectedRecords()));
                var original = {
                    changedRecords: this.parent.getRowsObject().filter(function(row) {
                        return row.isDirty && -1 === [ "add", "delete" ].indexOf(row.edit);
                    }).map(function(row) {
                        return row.data;
                    })
                }, args = {
                    batchChanges: changes,
                    cancel: !1
                };
                gObj.trigger("beforeBatchSave", args), args.cancel || (gObj.showSpinner(), gObj.notify("bulk-save", {
                    changes: changes,
                    original: original
                }));
            }
        }, BatchEdit.prototype.getBatchChanges = function() {
            for (var changes = {
                addedRecords: [],
                deletedRecords: [],
                changedRecords: []
            }, rows = this.parent.getRowsObject(), mRows = this.parent.getMovableRowsObject(), frzCols = this.parent.getFrozenColumns(), _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                if (frzCols && this.mergeBatchChanges(row, mRows[row.index], frzCols), row.isDirty) switch (row.edit) {
                  case "add":
                    changes.addedRecords.push(row.changes);
                    break;

                  case "delete":
                    changes.deletedRecords.push(row.data);
                    break;

                  default:
                    changes.changedRecords.push(row.changes);
                }
            }
            return changes;
        }, BatchEdit.prototype.mergeBatchChanges = function(row, mRow, frzCols) {
            if (row.isDirty) {
                if (mRow.isDirty) {
                    var i_1 = 0;
                    Object.keys(row.changes).forEach(function(key) {
                        i_1 >= frzCols && (row.changes[key] = mRow.changes[key]), i_1++;
                    });
                }
            } else mRow.isDirty && (row.changes = mRow.changes, row.isDirty = mRow.isDirty);
        }, BatchEdit.prototype.removeRowObjectFromUID = function(uid) {
            for (var rows = this.parent.getRowsObject(), i = 0, len = rows.length; i < len && rows[i].uid !== uid; i++) ;
            rows.splice(i, 1);
        }, BatchEdit.prototype.addRowObject = function(row) {
            this.parent.getRowsObject().unshift(row);
        }, BatchEdit.prototype.bulkDelete = function(fieldname, data) {
            var gObj = this.parent, index = data ? this.getIndexFromData(data) : gObj.selectedRowIndex, selectedRows = gObj.getSelectedRows(), args = {
                primaryKey: this.parent.getPrimaryKeyFieldNames(),
                rowIndex: index,
                rowData: data || gObj.getSelectedRecords()[0],
                row: data ? gObj.getRows()[index] : selectedRows[0],
                cancel: !1
            };
            if (args.row && (gObj.trigger("beforeBatchDelete", args), !args.cancel)) {
                gObj.clearSelection();
                var uid = args.row.getAttribute("data-uid");
                if (args.row.classList.contains("e-insertedrow")) this.removeRowObjectFromUID(uid), 
                remove(args.row); else {
                    var rowObj = gObj.getRowObjectFromUID(uid);
                    rowObj.isDirty = !0, rowObj.edit = "delete", classList(args.row, [ "e-hiddenrow", "e-updatedtd" ], []), 
                    gObj.getFrozenColumns() ? (classList(data ? gObj.getMovableRows()[index] : selectedRows[1], [ "e-hiddenrow", "e-updatedtd" ], []), 
                    gObj.frozenRows && index < gObj.frozenRows && (gObj.getHeaderContent().querySelector(".e-movableheader").querySelector("tbody").appendChild(gObj.getMovableRowByIndex(gObj.frozenRows - 1)), 
                    gObj.getHeaderContent().querySelector(".e-frozenheader").querySelector("tbody").appendChild(gObj.getRowByIndex(gObj.frozenRows - 1)))) : gObj.frozenRows && index < gObj.frozenRows && gObj.getHeaderContent().querySelector("tbody").appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
                }
                if (!this.parent.frozenColumns && selectedRows.length > 1) for (var i = 0; i < selectedRows.length; i++) {
                    classList(selectedRows[i], [ "e-hiddenrow", "e-updatedtd" ], []);
                    var uniqueid = selectedRows[i].getAttribute("data-uid"), selectedRow = gObj.getRowObjectFromUID(uniqueid);
                    selectedRow.isDirty = !0, selectedRow.edit = "delete", delete selectedRows[i];
                } else delete args.row;
                this.refreshRowIdx(), gObj.selectRow(index), gObj.trigger("batchDelete", args), 
                gObj.notify("batchDelete", {
                    rows: this.parent.getRowsObject()
                }), gObj.notify("toolbar-refresh", {});
            }
        }, BatchEdit.prototype.refreshRowIdx = function() {
            var rows = [], mRows = [], nonMovableRows = [], frzCols = this.parent.getFrozenColumns();
            if (this.parent.frozenRows && (rows = [].slice.call(this.parent.getHeaderTable().querySelector("tbody").children), 
            frzCols)) {
                mRows = [].slice.call(this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("tbody").children);
                for (var i = 0; i < mRows.length; i++) nonMovableRows[i] = this.parent.createElement("tr", {
                    className: "emptynonmv"
                });
            }
            frzCols && (mRows = mRows.concat([].slice.call(this.parent.getContentTable().querySelector("tbody").children)), 
            nonMovableRows = nonMovableRows.concat([].slice.call(this.parent.element.querySelector(".e-movablecontent").querySelector("tbody").children)));
            i = 0;
            for (var j = 0, len = (rows = rows.concat([].slice.call(this.parent.getContentTable().querySelector("tbody").children))).length; i < len; i++) rows[i].classList.contains("e-row") && !rows[i].classList.contains("e-hiddenrow") ? (rows[i].setAttribute("aria-rowindex", j.toString()), 
            frzCols && (mRows[i].setAttribute("aria-rowindex", j.toString()), nonMovableRows[i].classList.contains("e-row") && nonMovableRows[i].setAttribute("aria-rowindex", j.toString())), 
            j++) : (rows[i].removeAttribute("aria-rowindex"), frzCols && mRows[i].removeAttribute("aria-rowindex"));
        }, BatchEdit.prototype.getIndexFromData = function(data) {
            return inArray(data, this.parent.getCurrentViewRecords());
        }, BatchEdit.prototype.bulkAddRow = function(data) {
            var gObj = this.parent;
            if (gObj.editSettings.allowAdding && (gObj.isEdit && (this.saveCell(), this.parent.notify("editNextValCell", {})), 
            !gObj.isEdit)) {
                var args = {
                    defaultData: data || this.getDefaultData(),
                    primaryKey: gObj.getPrimaryKeyFieldNames(),
                    cancel: !1
                };
                if (gObj.trigger("beforeBatchAdd", args), !args.cancel) {
                    this.isAdded = !0, gObj.clearSelection();
                    for (var mTr, mTbody, col, index, row = new RowRenderer(this.serviceLocator, null, this.parent), modelData = new RowModelGenerator(this.parent).generateRows([ args.defaultData ]), tr = row.render(modelData[0], gObj.getColumns()), i = 0; i < this.parent.groupSettings.columns.length; i++) tr.insertBefore(this.parent.createElement("td", {
                        className: "e-indentcell"
                    }), tr.firstChild), modelData[0].cells.unshift(new Cell({
                        cellType: CellType.Indent
                    }));
                    var tbody = gObj.getContentTable().querySelector("tbody");
                    tr.classList.add("e-insertedrow"), tbody.querySelector(".e-emptyrow") && tbody.querySelector(".e-emptyrow").classList.add("e-hide"), 
                    gObj.getFrozenColumns() && (mTr = this.renderMovable(tr), (mTbody = gObj.frozenRows ? gObj.getHeaderContent().querySelector(".e-movableheader").querySelector("tbody") : gObj.getContent().querySelector(".e-movablecontent").querySelector("tbody")).insertBefore(mTr, mTbody.firstChild), 
                    addClass(mTr.querySelectorAll(".e-rowcell"), [ "e-updatedtd" ]), "auto" === this.parent.height && this.parent.notify("frozenHeight", {})), 
                    gObj.frozenRows && (tbody = gObj.getHeaderContent().querySelector("tbody")), tbody.insertBefore(tr, tbody.firstChild), 
                    addClass(tr.querySelectorAll(".e-rowcell"), [ "e-updatedtd" ]), modelData[0].isDirty = !0, 
                    modelData[0].changes = extend({}, {}, modelData[0].data, !0), modelData[0].edit = "add", 
                    this.addRowObject(modelData[0]), this.refreshRowIdx(), this.focus.forgetPrevious(), 
                    gObj.notify("batchAdd", {
                        rows: this.parent.getRowsObject()
                    }), gObj.selectRow(0), data || (index = this.findNextEditableCell(0, !0), col = gObj.getColumns()[index], 
                    this.editCell(0, col.field, !0)), this.parent.aggregates.length > 0 && data && this.parent.notify("refresh-footer-rendered", {});
                    var args1 = {
                        defaultData: args.defaultData,
                        row: tr,
                        columnObject: col,
                        columnIndex: index,
                        primaryKey: args.primaryKey,
                        cell: tr.cells[index]
                    };
                    gObj.trigger("batchAdd", args1);
                }
            }
        }, BatchEdit.prototype.renderMovable = function(ele) {
            for (var mEle = ele.cloneNode(!0), i = 0; i < this.parent.frozenColumns; i++) mEle.removeChild(mEle.children[0]);
            i = this.parent.frozenColumns;
            for (var len = ele.childElementCount; i < len; i++) ele.removeChild(ele.children[ele.childElementCount - 1]);
            return mEle;
        }, BatchEdit.prototype.findNextEditableCell = function(columnIndex, isAdd, isValOnly) {
            for (var validation, cols = this.parent.getColumns(), endIndex = cols.length, i = columnIndex; i < endIndex; i++) {
                if (validation = !!isValOnly && isNullOrUndefined(cols[i].validationRules), !isAdd && this.checkNPCell(cols[i])) return i;
                if (isAdd && !cols[i].template && cols[i].visible && cols[i].allowEditing && (!cols[i].isIdentity || !cols[i].isPrimaryKey) && !validation) return i;
            }
            return -1;
        }, BatchEdit.prototype.checkNPCell = function(col) {
            return !col.template && col.visible && !col.isPrimaryKey && !col.isIdentity && col.allowEditing;
        }, BatchEdit.prototype.getDefaultData = function() {
            for (var data = {}, dValues = {
                number: 0,
                string: null,
                boolean: !1,
                date: null,
                datetime: null
            }, _i = 0, _a = this.parent.columns; _i < _a.length; _i++) {
                var col = _a[_i];
                col.field && setValue(col.field, col.defaultValue ? col.defaultValue : dValues[col.type], data);
            }
            return data;
        }, BatchEdit.prototype.setCellIdx = function(target) {
            var gLen = 0;
            this.parent.allowGrouping && (gLen = this.parent.groupSettings.columns.length), 
            this.cellDetails.cellIndex = target.cellIndex - gLen, this.cellDetails.rowIndex = parseInt(target.parentElement.getAttribute("aria-rowindex"), 10);
        }, BatchEdit.prototype.editCell = function(index, field, isAdd) {
            var gObj = this.parent, col = gObj.getColumnByField(field), keys = gObj.getPrimaryKeyFieldNames();
            if (gObj.editSettings.allowEditing && col.allowEditing) {
                if (gObj.isEdit && (this.cellDetails.column.field !== field || this.cellDetails.rowIndex !== index || this.parent.getDataRows().length - 1 === index) && (this.saveCell(), 
                this.cellDetails.rowIndex === index && this.cellDetails.column.field === field)) return;
                if (gObj.isEdit) return;
                var row = void 0, rowData = void 0, mRowData = void 0, colIdx = gObj.getColumnIndexByField(field), frzCols = gObj.getFrozenColumns();
                if (frzCols && colIdx >= frzCols ? (row = gObj.getMovableDataRows()[index], rowData = (mRowData = this.parent.getRowObjectFromUID(this.parent.getMovableDataRows()[index].getAttribute("data-uid"))).changes ? extend({}, {}, mRowData.changes, !0) : extend({}, {}, this.getDataByIndex(index), !0)) : (row = gObj.getDataRows()[index], 
                rowData = extend({}, {}, this.getDataByIndex(index), !0)), keys[0] === col.field && !row.classList.contains("e-insertedrow") || col.columns || col.isPrimaryKey && col.isIdentity) return void (this.parent.isLastCellPrimaryKey = !0);
                this.parent.isLastCellPrimaryKey = !1;
                var rowObj = gObj.getRowObjectFromUID(row.getAttribute("data-uid")), cells = [].slice.apply(row.cells), args = {
                    cell: cells[this.getColIndex(cells, this.getCellIdx(col.uid))],
                    row: row,
                    columnName: col.field,
                    columnObject: col,
                    isForeignKey: !isNullOrUndefined(col.foreignKeyValue),
                    primaryKey: keys,
                    rowData: rowData,
                    validationRules: extend({}, col.validationRules ? col.validationRules : {}),
                    value: getObject$1(col.field, rowData),
                    type: isAdd ? "add" : "edit",
                    cancel: !1,
                    foreignKeyData: rowObj && rowObj.foreignKeyData
                };
                if (!args.cell) return;
                if (gObj.trigger("cellEdit", args), args.cancel) return;
                this.cellDetails = {
                    rowData: rowData,
                    column: col,
                    value: args.value,
                    isForeignKey: args.isForeignKey,
                    rowIndex: index,
                    cellIndex: parseInt(args.cell.getAttribute("aria-colindex"), 10),
                    foreignKeyData: args.foreignKeyData
                }, args.cell.classList.contains("e-updatedtd") && (this.isColored = !0, args.cell.classList.remove("e-updatedtd")), 
                gObj.isEdit = !0, gObj.clearSelection(), gObj.isCheckBoxSelection && gObj.isPersistSelection || gObj.selectRow(this.cellDetails.rowIndex, !0), 
                this.renderer.update(args), this.form = gObj.element.querySelector("#" + gObj.element.id + "EditForm"), 
                gObj.editModule.applyFormValidation([ col ]), this.parent.element.querySelector(".e-gridpopup").style.display = "none";
            }
        }, BatchEdit.prototype.updateCell = function(rowIndex, field, value) {
            var col = this.parent.getColumnByField(field);
            if (col && !col.isPrimaryKey) {
                var td = this.parent.getDataRows()[rowIndex].cells[this.parent.getColumnIndexByField(field)], rowObj = this.parent.getRowObjectFromUID(td.parentElement.getAttribute("data-uid"));
                this.refreshTD(td, col, rowObj, value), this.parent.trigger("queryCellInfo", {
                    cell: td,
                    column: col,
                    data: rowObj.changes
                });
            }
        }, BatchEdit.prototype.setChanges = function(rowObj, field, value) {
            rowObj.changes || (rowObj.changes = extend({}, {}, rowObj.data, !0)), isNullOrUndefined(field) || DataUtil.setValue(field, value, rowObj.changes), 
            rowObj.data[field] !== value && (rowObj.isDirty = !0);
        }, BatchEdit.prototype.updateRow = function(index, data) {
            for (var _i = 0, keys_1 = Object.keys(data); _i < keys_1.length; _i++) {
                var col = keys_1[_i];
                this.updateCell(index, col, data[col]);
            }
        }, BatchEdit.prototype.getCellIdx = function(uid) {
            var cIdx = this.parent.getColumnIndexByUid(uid) + this.parent.groupSettings.columns.length;
            return isNullOrUndefined(this.parent.detailTemplate) && isNullOrUndefined(this.parent.childGrid) || cIdx++, 
            cIdx;
        }, BatchEdit.prototype.refreshTD = function(td, column, rowObj, value) {
            var rowcell, cell = new CellRenderer(this.parent, this.serviceLocator);
            this.setChanges(rowObj, column.field, value);
            var frzCols = this.parent.getFrozenColumns();
            refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes), 
            rowcell = frzCols && this.getCellIdx(column.uid) >= frzCols && this.parent.getColumns().length === rowObj.cells.length ? rowObj.cells.slice(frzCols, rowObj.cells.length) : rowObj.cells, 
            cell.refreshTD(td, rowcell[this.getCellIdx(column.uid) - (this.getCellIdx(column.uid) >= frzCols ? frzCols : 0)], rowObj.changes, {
                index: this.getCellIdx(column.uid)
            }), td.classList.add("e-updatedtd"), this.parent.notify("toolbar-refresh", {});
        }, BatchEdit.prototype.getColIndex = function(cells, index) {
            var cIdx = 0;
            this.parent.allowGrouping && this.parent.groupSettings.columns && (cIdx = this.parent.groupSettings.columns.length), 
            isNullOrUndefined(this.parent.detailTemplate) && isNullOrUndefined(this.parent.childGrid) || cIdx++;
            for (var m = 0; m < cells.length; m++) {
                if (parseInt(cells[m].getAttribute("aria-colindex"), 10) === index - cIdx) return m;
            }
            return -1;
        }, BatchEdit.prototype.editNextValCell = function() {
            var gObj = this.parent;
            if (this.isAdded && !gObj.isEdit) {
                for (var i = this.cellDetails.cellIndex; i < gObj.getColumns().length; i++) {
                    if (gObj.isEdit) return;
                    var index = this.findNextEditableCell(this.cellDetails.cellIndex + 1, !0, !0), col = gObj.getColumns()[index];
                    col && (this.editCell(0, col.field, !0), this.saveCell());
                }
                gObj.isEdit || (this.isAdded = !1);
            }
        }, BatchEdit.prototype.saveCell = function(isForceSave) {
            var gObj = this.parent;
            if (isForceSave || gObj.isEdit && !this.validateFormObj()) {
                var tr = parentsUntil(this.form, "e-row"), column = this.cellDetails.column, editedData = gObj.editModule.getCurrentEditedData(this.form, {}), cloneEditedData = extend({}, editedData);
                editedData = extend({}, editedData, this.cellDetails.rowData);
                var value = getObject$1(column.field, cloneEditedData);
                isNullOrUndefined(column.field) || setValue(column.field, value, editedData);
                var args = {
                    columnName: column.field,
                    value: getObject$1(column.field, editedData),
                    rowData: this.cellDetails.rowData,
                    previousValue: this.cellDetails.value,
                    columnObject: column,
                    cell: this.form.parentElement,
                    isForeignKey: this.cellDetails.isForeignKey,
                    cancel: !1
                };
                isForceSave || gObj.trigger("cellSave", args), args.cancel || (gObj.editModule.destroyForm(), 
                gObj.isEdit = !1, gObj.editModule.destroyWidgets([ column ]), this.parent.notify("tooltip-destroy", {}), 
                this.refreshTD(args.cell, column, gObj.getRowObjectFromUID(tr.getAttribute("data-uid")), args.value), 
                removeClass([ tr ], [ "e-editedrow", "e-batchrow" ]), removeClass([ args.cell ], [ "e-editedbatchcell", "e-boolcell" ]), 
                (!isNullOrUndefined(args.value) && args.value.toString() === (isNullOrUndefined(this.cellDetails.value) ? "" : this.cellDetails.value).toString() && !this.isColored || isNullOrUndefined(args.value) && isNullOrUndefined(this.cellDetails.value) && !args.cell.parentElement.classList.contains("e-insertedrow")) && args.cell.classList.remove("e-updatedtd"), 
                gObj.trigger("cellSaved", args), gObj.notify("toolbar-refresh", {}), this.isColored = !1, 
                this.parent.aggregates.length > 0 && (this.parent.notify("refresh-footer-rendered", {}), 
                this.parent.groupSettings.columns.length > 0 && !this.isAddRow(this.cellDetails.rowIndex) && this.parent.notify("group-aggregates", {})));
            }
        }, BatchEdit.prototype.getDataByIndex = function(index) {
            var row = this.parent.getRowObjectFromUID(this.parent.getDataRows()[index].getAttribute("data-uid"));
            return row.changes ? row.changes : row.data;
        }, BatchEdit.prototype.keyDownHandler = function(e) {
            if ("tab" === e.action && this.parent.isEdit) {
                var rowcell = parentsUntil(e.target, "e-rowcell");
                if (rowcell) {
                    var cell = rowcell.querySelector(".e-field");
                    if (cell) {
                        var visibleColumns = this.parent.getVisibleColumns();
                        visibleColumns[visibleColumns.length - 1].field === cell.getAttribute("name") && this.saveCell();
                    }
                }
            }
        }, BatchEdit.prototype.addCancelWhilePaging = function() {
            this.validateFormObj() && (this.parent.notify("destroy-form", {}), this.parent.isEdit = !1, 
            this.isColored = !1);
        }, BatchEdit;
    }(), __extends$66 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), DialogEdit = function(_super) {
        function DialogEdit(parent, serviceLocator, renderer) {
            var _this = _super.call(this, parent, serviceLocator) || this;
            return _this.parent = parent, _this.serviceLocator = serviceLocator, _this.renderer = renderer, 
            _this;
        }
        return __extends$66(DialogEdit, _super), DialogEdit.prototype.closeEdit = function() {
            _super.prototype.closeEdit.call(this);
        }, DialogEdit.prototype.addRecord = function(data, index) {
            _super.prototype.addRecord.call(this, data, index);
        }, DialogEdit.prototype.endEdit = function() {
            _super.prototype.endEdit.call(this);
        }, DialogEdit.prototype.updateRow = function(index, data) {
            _super.prototype.updateRow.call(this, index, data);
        }, DialogEdit.prototype.deleteRecord = function(fieldname, data) {
            _super.prototype.deleteRecord.call(this, fieldname, data);
        }, DialogEdit.prototype.startEdit = function(tr) {
            _super.prototype.startEdit.call(this, tr);
        }, DialogEdit;
    }(NormalEdit), DatePickerEditCell = function() {
        function DatePickerEditCell(parent) {
            this.parent = parent;
        }
        return DatePickerEditCell.prototype.create = function(args) {
            var complexFieldName = getComplexFieldID(args.column.field);
            return this.parent.createElement("input", {
                className: "e-field",
                attrs: {
                    id: this.parent.element.id + complexFieldName,
                    name: complexFieldName,
                    type: "text",
                    "e-mappinguid": args.column.uid
                }
            });
        }, DatePickerEditCell.prototype.read = function(element) {
            return element.ej2_instances[0].value;
        }, DatePickerEditCell.prototype.write = function(args) {
            "datepickeredit" === args.column.editType ? this.obj = new DatePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl), args.column.edit.params)) : "datetimepickeredit" === args.column.editType && (this.obj = new DateTimePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl), args.column.edit.params))), 
            this.obj.appendTo(args.element);
        }, DatePickerEditCell.prototype.destroy = function() {
            this.obj && this.obj.destroy();
        }, DatePickerEditCell;
    }(), TemplateEditCell = function() {
        function TemplateEditCell(parent) {
            this.parent = parent;
        }
        return TemplateEditCell.prototype.read = function(element, value) {
            return value;
        }, TemplateEditCell.prototype.write = function() {}, TemplateEditCell.prototype.destroy = function() {}, 
        TemplateEditCell;
    }(), Edit = function() {
        function Edit(parent, serviceLocator) {
            this.editCellType = {
                dropdownedit: DropDownEditCell,
                numericedit: NumericEditCell,
                datepickeredit: DatePickerEditCell,
                datetimepickeredit: DatePickerEditCell,
                booleanedit: BooleanEditCell,
                defaultedit: DefaultEditCell,
                templateedit: TemplateEditCell
            }, this.editType = {
                Inline: InlineEdit,
                Normal: InlineEdit,
                Batch: BatchEdit,
                Dialog: DialogEdit
            }, this.parent = parent, this.serviceLocator = serviceLocator, this.l10n = this.serviceLocator.getService("localization"), 
            this.addEventListener(), this.updateEditObj(), this.createAlertDlg(), this.createConfirmDlg();
        }
        return Edit.prototype.updateColTypeObj = function() {
            var _this = this;
            this.parent.columnModel.forEach(function(col) {
                if (_this.parent.editSettings.template || col.editTemplate) {
                    col.edit = extend(new _this.editCellType.templateedit(_this.parent), col.edit || {});
                } else col.edit = extend(new _this.editCellType[col.editType && _this.editCellType[col.editType] ? col.editType : "defaultedit"](_this.parent, _this.serviceLocator), col.edit || {});
            });
        }, Edit.prototype.getModuleName = function() {
            return "edit";
        }, Edit.prototype.onPropertyChanged = function(e) {
            if (e.module === this.getModuleName()) for (var gObj = this.parent, _i = (e.properties, 
            0), _a = Object.keys(e.properties); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "allowAdding":
                  case "allowDeleting":
                  case "allowEditing":
                    (gObj.editSettings.allowAdding || gObj.editSettings.allowEditing || gObj.editSettings.allowDeleting) && this.initialEnd();
                    break;

                  case "mode":
                    this.updateEditObj(), gObj.isEdit = !1, gObj.refresh();
                }
            }
        }, Edit.prototype.updateEditObj = function() {
            this.editModule && this.editModule.destroy(), this.renderer = new EditRender(this.parent, this.serviceLocator), 
            this.editModule = new this.editType[this.parent.editSettings.mode](this.parent, this.serviceLocator, this.renderer);
        }, Edit.prototype.initialEnd = function() {
            this.updateColTypeObj();
        }, Edit.prototype.wireEvents = function() {
            EventHandler.add(this.parent.getContent(), "touchstart", this.tapEvent, this);
        }, Edit.prototype.unwireEvents = function() {
            EventHandler.remove(this.parent.getContent(), "touchstart", this.tapEvent);
        }, Edit.prototype.tapEvent = function(e) {
            this.getUserAgent() && (Global.timer ? (clearTimeout(Global.timer), Global.timer = null, 
            this.parent.notify("double-tap", e)) : Global.timer = setTimeout(function() {
                Global.timer = null;
            }, 300));
        }, Edit.prototype.getUserAgent = function() {
            var userAgent = window.navigator.userAgent.toLowerCase();
            return /iphone|ipod|ipad/.test(userAgent);
        }, Edit.prototype.startEdit = function(tr) {
            var gObj = this.parent;
            if (gObj.editSettings.allowEditing && !gObj.isEdit && "Batch" !== gObj.editSettings.mode) {
                if (gObj.getSelectedRows().length) tr || (tr = gObj.getSelectedRows()[0]); else if (!tr) return void this.showDialog("EditOperationAlert", this.alertDObj);
                "none" !== tr.style.display && (this.editModule.startEdit(tr), this.refreshToolbar(), 
                gObj.element.querySelector(".e-gridpopup").style.display = "none", this.parent.notify("start-edit", {}));
            }
        }, Edit.prototype.closeEdit = function() {
            "Batch" === this.parent.editSettings.mode && this.parent.editSettings.showConfirmDialog && this.parent.element.querySelectorAll(".e-updatedtd").length ? this.showDialog("CancelEdit", this.dialogObj) : (this.editModule.closeEdit(), 
            this.refreshToolbar(), this.parent.notify("close-edit", {}));
        }, Edit.prototype.refreshToolbar = function() {
            this.parent.notify("toolbar-refresh", {});
        }, Edit.prototype.addRecord = function(data, index) {
            this.parent.editSettings.allowAdding && (this.editModule.addRecord(data, index), 
            this.refreshToolbar(), this.parent.notify("start-add", {}));
        }, Edit.prototype.deleteRecord = function(fieldname, data) {
            var gObj = this.parent;
            gObj.editSettings.allowDeleting && (data || gObj.getSelectedRecords().length ? gObj.editSettings.showDeleteConfirmDialog ? this.showDialog("ConfirmDelete", this.dialogObj) : this.editModule.deleteRecord(fieldname, data) : this.showDialog("DeleteOperationAlert", this.alertDObj));
        }, Edit.prototype.deleteRow = function(tr) {
            this.deleteRecord(null, this.parent.getCurrentViewRecords()[parseInt(tr.getAttribute("aria-rowindex"), 10)]);
        }, Edit.prototype.endEdit = function() {
            "Batch" === this.parent.editSettings.mode && this.parent.editSettings.showConfirmDialog && (isNullOrUndefined(this.formObj) || this.formObj.validate()) && (this.parent.editModule.saveCell(), 
            this.parent.notify("editNextValCell", {}), isNullOrUndefined(this.formObj) || this.formObj.validate()) ? this.showDialog("BatchSaveConfirm", this.dialogObj) : this.endEditing();
        }, Edit.prototype.updateCell = function(rowIndex, field, value) {
            this.editModule.updateCell(rowIndex, field, value);
        }, Edit.prototype.updateRow = function(index, data) {
            this.editModule.updateRow(index, data);
        }, Edit.prototype.batchCancel = function() {
            this.closeEdit();
        }, Edit.prototype.batchSave = function() {
            this.endEdit();
        }, Edit.prototype.editCell = function(index, field) {
            this.editModule.editCell(index, field);
        }, Edit.prototype.editFormValidate = function() {
            return !!this.formObj && this.formObj.validate();
        }, Edit.prototype.getBatchChanges = function() {
            return this.editModule.getBatchChanges ? this.editModule.getBatchChanges() : {};
        }, Edit.prototype.getCurrentEditCellData = function() {
            var obj = this.getCurrentEditedData(this.formObj.element, {});
            return obj[Object.keys(obj)[0]];
        }, Edit.prototype.saveCell = function() {
            this.editModule.saveCell();
        }, Edit.prototype.endEditing = function() {
            this.editModule.endEdit(), this.refreshToolbar();
        }, Edit.prototype.showDialog = function(content, obj) {
            obj.content = "<div>" + this.l10n.getConstant(content) + "</div>", obj.dataBind(), 
            obj.show();
        }, Edit.prototype.getValueFromType = function(col, value) {
            var val = value;
            switch (col.type) {
              case "number":
                val = isNaN(parseFloat(value)) ? null : parseFloat(value);
                break;

              case "boolean":
                "booleanedit" !== col.editType && (val = value === this.l10n.getConstant("True") || !0 === value);
                break;

              case "date":
              case "datetime":
                "datepickeredit" !== col.editType && "datetimepickeredit" !== col.editType && (val = value && value.length ? new Date(value) : null);
            }
            return val;
        }, Edit.prototype.destroyToolTip = function() {
            for (var _i = 0, elements_1 = [].slice.call(this.parent.element.querySelectorAll(".e-griderror")); _i < elements_1.length; _i++) {
                remove(elements_1[_i]);
            }
            this.parent.getContent().firstElementChild.style.position = "relative";
        }, Edit.prototype.createConfirmDlg = function() {
            this.dialogObj = this.dlgWidget([ {
                click: this.dlgOk.bind(this),
                buttonModel: {
                    content: this.l10n.getConstant("OKButton"),
                    cssClass: "e-primary",
                    isPrimary: !0
                }
            }, {
                click: this.dlgCancel.bind(this),
                buttonModel: {
                    cssClass: "e-flat",
                    content: this.l10n.getConstant("CancelButton")
                }
            } ], "EditConfirm");
        }, Edit.prototype.createAlertDlg = function() {
            this.alertDObj = this.dlgWidget([ {
                click: this.alertClick.bind(this),
                buttonModel: {
                    content: this.l10n.getConstant("OKButton"),
                    cssClass: "e-flat",
                    isPrimary: !0
                }
            } ], "EditAlert");
        }, Edit.prototype.alertClick = function() {
            this.alertDObj.hide();
        }, Edit.prototype.dlgWidget = function(btnOptions, name) {
            var div = this.parent.createElement("div", {
                id: this.parent.element.id + name
            });
            this.parent.element.appendChild(div);
            var options = {
                showCloseIcon: !1,
                isModal: !0,
                visible: !1,
                closeOnEscape: !0,
                target: this.parent.element,
                width: "320px",
                animationSettings: {
                    effect: "None"
                }
            };
            options.buttons = btnOptions;
            var obj = new Dialog(options);
            return obj.appendTo(div), obj;
        }, Edit.prototype.dlgCancel = function() {
            this.dialogObj.hide();
        }, Edit.prototype.dlgOk = function(e) {
            switch (this.dialogObj.element.querySelector(".e-dlg-content").firstElementChild.innerText) {
              case this.l10n.getConstant("ConfirmDelete"):
                this.editModule.deleteRecord();
                break;

              case this.l10n.getConstant("CancelEdit"):
                this.editModule.closeEdit();
                break;

              case this.l10n.getConstant("BatchSaveConfirm"):
                this.endEditing();
                break;

              case this.l10n.getConstant("BatchSaveLostChanges"):
                "Batch" === this.parent.editSettings.mode && this.editModule.addCancelWhilePaging(), 
                this.executeAction();
            }
            this.dlgCancel();
        }, Edit.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(inBoundModelChanged, this.onPropertyChanged, this), 
            this.parent.on(initialEnd, this.initialEnd, this), this.parent.on(keyPressed, this.keyPressHandler, this), 
            this.parent.on("auto-col", this.updateColTypeObj, this), this.parent.on("tooltip-destroy", this.destroyToolTip, this), 
            this.parent.on(preventBatch, this.preventBatch, this), this.parent.on("destroy-form", this.destroyForm, this), 
            this.actionBeginFunction = this.onActionBegin.bind(this), this.actionCompleteFunction = this.actionComplete.bind(this), 
            this.parent.addEventListener(actionBegin, this.actionBeginFunction), this.parent.addEventListener(actionComplete, this.actionCompleteFunction), 
            this.parent.on(initialEnd, this.wireEvents, this));
        }, Edit.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(inBoundModelChanged, this.onPropertyChanged), 
            this.parent.off(initialEnd, this.initialEnd), this.parent.off(keyPressed, this.keyPressHandler), 
            this.parent.off("auto-col", this.updateColTypeObj), this.parent.off("tooltip-destroy", this.destroyToolTip), 
            this.parent.off(preventBatch, this.preventBatch), this.parent.off("destroy-form", this.destroyForm), 
            this.parent.removeEventListener(actionComplete, this.actionCompleteFunction), this.parent.removeEventListener(actionBegin, this.actionBeginFunction), 
            this.parent.off(initialEnd, this.unwireEvents));
        }, Edit.prototype.actionComplete = function(e) {
            [ "add", "beginEdit", "save", "delete", "cancel" ].indexOf(e.requestType) < 0 && (this.parent.isEdit = !1), 
            this.refreshToolbar();
        }, Edit.prototype.getCurrentEditedData = function(form, editedData) {
            var _this = this, gObj = this.parent;
            if (gObj.editSettings.template) return [].slice.call(form.elements).forEach(function(element) {
                if (element.hasAttribute("name")) {
                    var field = setComplexFieldID(element.getAttribute("name")), column = gObj.getColumnByField(field) || {
                        field: field,
                        type: element.getAttribute("type")
                    }, value = void 0;
                    "checkbox" === column.type || "boolean" === column.type ? value = element.checked : element.value && (value = element.value, 
                    element.ej2_instances && element.ej2_instances.length && !isNullOrUndefined(element.ej2_instances[0].value) && (element.blur(), 
                    value = element.ej2_instances[0].value)), column.edit && "string" == typeof column.edit.read ? value = getValue(column.edit.read, window)(element, value) : column.edit && column.edit.read && (value = column.edit.read(element, value)), 
                    value = gObj.editModule.getValueFromType(column, value), DataUtil.setValue(column.field, value, editedData);
                }
            }), editedData;
            gObj.columnModel.filter(function(col) {
                return col.editTemplate;
            }).forEach(function(col) {
                if (form[getComplexFieldID(col.field)]) {
                    var inputElements = [].slice.call(form[getComplexFieldID(col.field)]);
                    (inputElements = inputElements.length ? inputElements : [ form[getComplexFieldID(col.field)] ]).forEach(function(input) {
                        var value = _this.getValue(col, input);
                        DataUtil.setValue(col.field, value, editedData);
                    });
                }
            });
            for (var inputs = [].slice.call(form.querySelectorAll(".e-field")), i = 0, len = inputs.length; i < len; i++) {
                var col = gObj.getColumnByUid(inputs[i].getAttribute("e-mappinguid"));
                if (col && col.field) {
                    var value = this.getValue(col, inputs[i]);
                    DataUtil.setValue(col.field, value, editedData);
                }
            }
            return editedData;
        }, Edit.prototype.getValue = function(col, input) {
            var value = input.value, gObj = this.parent, temp = col.edit.read;
            return "checkbox" !== col.type && "boolean" !== col.type ? "string" == typeof temp ? (temp = getValue(temp, window), 
            value = gObj.editModule.getValueFromType(col, temp(input, value))) : value = gObj.editModule.getValueFromType(col, col.edit.read(input, value)) : value = input.checked, 
            value;
        }, Edit.prototype.onActionBegin = function(e) {
            "Batch" !== this.parent.editSettings.mode && this.formObj && !this.formObj.isDestroyed && -1 === [ "filterafteropen", "filterbeforeopen", "filterchoicerequest", "save" ].indexOf(e.requestType) && (this.destroyWidgets(), 
            this.destroyForm());
        }, Edit.prototype.destroyWidgets = function(cols) {
            var gObj = this.parent;
            gObj.editSettings.template && this.parent.destroyTemplate([ "editSettingsTemplate" ]), 
            gObj.columnModel.some(function(column) {
                return !isNullOrUndefined(column.editTemplate);
            }) && this.parent.destroyTemplate([ "editTemplate" ]);
            for (var _i = 0, cols_1 = cols = cols || this.parent.getColumns(); _i < cols_1.length; _i++) {
                var col = cols_1[_i], temp = col.edit.destroy;
                col.edit.destroy && ("string" == typeof temp ? (temp = getValue(temp, window))() : col.edit.destroy());
            }
            [].slice.call(this.formObj.element.elements).forEach(function(element) {
                element.hasAttribute("name") && element.ej2_instances && element.ej2_instances.length && !element.ej2_instances[0].isDestroyed && element.ej2_instances[0].destroy();
            });
        }, Edit.prototype.destroyForm = function() {
            this.destroyToolTip(), this.formObj && !this.formObj.isDestroyed && this.formObj.destroy(), 
            this.destroyToolTip();
        }, Edit.prototype.destroy = function() {
            var gridElement = this.parent.element;
            if (gridElement) {
                var hasGridChild = !(!gridElement.querySelector(".e-gridheader") || !gridElement.querySelector(".e-gridcontent"));
                hasGridChild && this.destroyForm(), this.removeEventListener();
                var elem = this.dialogObj.element;
                elem.childElementCount > 0 && (this.dialogObj.destroy(), remove(elem)), (elem = this.alertDObj.element).childElementCount > 0 && (this.alertDObj.destroy(), 
                remove(elem)), hasGridChild && (this.unwireEvents(), this.editModule && this.editModule.destroy());
            }
        }, Edit.prototype.keyPressHandler = function(e) {
            switch (e.action) {
              case "insert":
                this.addRecord();
                break;

              case "delete":
                "INPUT" === e.target.tagName && !e.target.classList.contains("e-checkselect") || document.querySelector(".e-popup-open") || this.deleteRecord();
                break;

              case "f2":
                this.startEdit();
                break;

              case "enter":
                parentsUntil(e.target, ".e-unboundcelldiv") || "Batch" === this.parent.editSettings.mode || !(parentsUntil(e.target, "e-gridcontent") || this.parent.frozenRows && parentsUntil(e.target, "e-headercontent")) || document.querySelectorAll(".e-popup-open").length || (e.preventDefault(), 
                this.endEdit());
                break;

              case "escape":
                this.closeEdit();
            }
        }, Edit.prototype.preventBatch = function(args) {
            this.preventObj = args, this.showDialog("BatchSaveLostChanges", this.dialogObj);
        }, Edit.prototype.executeAction = function() {
            this.preventObj.handler.call(this.preventObj.instance, this.preventObj.arg1, this.preventObj.arg2, this.preventObj.arg3, this.preventObj.arg4, this.preventObj.arg5, this.preventObj.arg6, this.preventObj.arg7, this.preventObj.arg8);
        }, Edit.prototype.applyFormValidation = function(cols) {
            var gObj = this.parent, frzCols = gObj.getFrozenColumns(), form = gObj.element.querySelector(".e-gridform"), mForm = gObj.element.querySelectorAll(".e-gridform")[1], rules = {}, mRules = {};
            (cols = cols || gObj.columns).forEach(function(col, index) {
                col.visible && (index < frzCols && col.validationRules ? rules[getComplexFieldID(col.field)] = col.validationRules : index >= frzCols && col.validationRules && (mRules[getComplexFieldID(col.field)] = col.validationRules));
            }), frzCols && "Dialog" !== this.parent.editSettings.mode ? this.parent.editModule.mFormObj = this.createFormObj(mForm, mRules) : rules = extend(rules, mRules), 
            this.parent.editModule.formObj = this.createFormObj(form, rules);
        }, Edit.prototype.createFormObj = function(form, rules) {
            var _this = this;
            return new FormValidator(form, {
                rules: rules,
                validationComplete: function(args) {
                    _this.validationComplete(args);
                },
                customPlacement: function(inputElement, error) {
                    _this.valErrorPlacement(inputElement, error);
                }
            });
        }, Edit.prototype.valErrorPlacement = function(inputElement, error) {
            if (this.parent.isEdit) {
                var id = error.getAttribute("for"), elem = this.getElemTable(inputElement).querySelector("#" + id + "_Error");
                elem ? elem.querySelector(".e-tip-content").innerHTML = error.outerHTML : this.createTooltip(inputElement, error, id, "");
            }
        }, Edit.prototype.getElemTable = function(inputElement) {
            var isFHdr;
            return "Dialog" !== this.parent.editSettings.mode && (isFHdr = this.parent.frozenRows && this.parent.frozenRows > (parseInt(closest(inputElement, ".e-row").getAttribute("aria-rowindex"), 10) || 0)), 
            "Dialog" !== this.parent.editSettings.mode ? isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable() : this.parent.element.querySelector("#" + this.parent.element.id + "_dialogEdit_wrapper");
        }, Edit.prototype.validationComplete = function(args) {
            if (this.parent.isEdit) {
                var elem = this.getElemTable(args.element).querySelector("#" + args.inputName + "_Error");
                elem && ("failure" === args.status ? elem.style.display = "" : elem.style.display = "none");
            }
        }, Edit.prototype.createTooltip = function(element, error, name, display) {
            var isFHdr, gcontent = this.parent.getContent().firstElementChild, isScroll = gcontent.scrollHeight > gcontent.clientHeight || gcontent.scrollWidth > gcontent.clientWidth, isInline = "Dialog" !== this.parent.editSettings.mode;
            isInline && (isFHdr = this.parent.frozenRows && this.parent.frozenRows > (parseInt(closest(element, ".e-row").getAttribute("aria-rowindex"), 10) || 0));
            var fCont = this.parent.getContent().querySelector(".e-frozencontent"), table = isInline ? isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable() : this.parent.element.querySelector("#" + this.parent.element.id + "_dialogEdit_wrapper").querySelector(".e-dlg-content"), client = table.getBoundingClientRect(), left = isInline ? this.parent.element.getBoundingClientRect().left : client.left, input = closest(element, "td"), inputClient = input ? input.getBoundingClientRect() : element.parentElement.getBoundingClientRect(), div = this.parent.createElement("div", {
                className: "e-tooltip-wrap e-control e-popup e-griderror",
                id: name + "_Error",
                styles: "display:" + display + ";top:" + ((isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top - (this.parent.getFrozenColumns() ? fCont.scrollTop : 0)) + table.scrollTop + 9) + "px;left:" + (inputClient.left - left + table.scrollLeft + inputClient.width / 2) + "px;max-width:" + inputClient.width + "px;text-align:center;"
            }), content = this.parent.createElement("div", {
                className: "e-tip-content"
            });
            content.appendChild(error);
            var arrow = this.parent.createElement("div", {
                className: "e-arrow-tip e-tip-top"
            });
            arrow.appendChild(this.parent.createElement("div", {
                className: "e-arrow-tip-outer e-tip-top"
            })), arrow.appendChild(this.parent.createElement("div", {
                className: "e-arrow-tip-inner e-tip-top"
            })), div.appendChild(content), div.appendChild(arrow), table.appendChild(div);
            var lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue("font-size"), 10);
            if (div.getBoundingClientRect().width < inputClient.width && div.querySelector("label").getBoundingClientRect().height / (1.2 * lineHeight) >= 2 && (div.style.width = div.style.maxWidth), 
            div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + "px", !isScroll && isInline && !this.parent.allowPaging) {
                gcontent.style.position = "static";
                var pos = calculateRelativeBasedPosition(input, div);
                div.style.top = pos.top + inputClient.height + 9 + "px";
            }
        }, Edit;
    }();
    !function(Global) {
        Global.timer = null;
    }(Global || (Global = {}));
    var InternalEnum, ColumnChooser = function() {
        function ColumnChooser(parent, serviceLocator) {
            this.showColumn = [], this.hideColumn = [], this.isDlgOpen = !1, this.dlghide = !1, 
            this.initialOpenDlg = !0, this.stateChangeColumns = [], this.isInitialOpen = !1, 
            this.isCustomizeOpenCC = !1, this.searchOperator = "startswith", this.parent = parent, 
            this.serviceLocator = serviceLocator, this.addEventListener(), this.cBoxTrue = createCheckBox(this.parent.createElement, !0, {
                checked: !0,
                label: " "
            }), this.cBoxFalse = createCheckBox(this.parent.createElement, !0, {
                checked: !1,
                label: " "
            }), this.cBoxTrue.insertBefore(this.parent.createElement("input", {
                className: "e-chk-hidden e-cc e-cc-chbox",
                attrs: {
                    type: "checkbox"
                }
            }), this.cBoxTrue.firstChild), this.cBoxFalse.insertBefore(this.parent.createElement("input", {
                className: "e-chk-hidden e-cc e-cc-chbox",
                attrs: {
                    type: "checkbox"
                }
            }), this.cBoxFalse.firstChild), this.cBoxFalse.querySelector(".e-frame").classList.add("e-uncheck"), 
            this.parent.enableRtl && addClass([ this.cBoxTrue, this.cBoxFalse ], [ "e-rtl" ]);
        }
        return ColumnChooser.prototype.destroy = function() {
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.removeEventListener(), 
            this.unWireEvents(), isNullOrUndefined(this.dlgObj) || !this.dlgObj.element || this.dlgObj.isDestroyed || this.dlgObj.destroy());
        }, ColumnChooser.prototype.rtlUpdate = function() {
            this.parent.enableRtl ? addClass(this.innerDiv.querySelectorAll(".e-checkbox-wrapper"), [ "e-rtl" ]) : removeClass(this.innerDiv.querySelectorAll(".e-checkbox-wrapper"), [ "e-rtl" ]);
        }, ColumnChooser.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(click, this.clickHandler, this), this.parent.on(uiUpdate, this.enableAfterRenderEle, this), 
            this.parent.on(initialEnd, this.render, this), this.parent.addEventListener(dataBound, this.hideDialog.bind(this)), 
            this.parent.on(destroy$1, this.destroy, this), this.parent.on("rtl-updated", this.rtlUpdate, this));
        }, ColumnChooser.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(click, this.clickHandler), this.parent.off(initialEnd, this.render), 
            this.parent.off(destroy$1, this.destroy), this.parent.off(uiUpdate, this.enableAfterRenderEle), 
            this.parent.off("rtl-updated", this.rtlUpdate));
        }, ColumnChooser.prototype.render = function() {
            this.l10n = this.serviceLocator.getService("localization"), this.renderDlgContent(), 
            this.getShowHideService = this.serviceLocator.getService("showHideService");
        }, ColumnChooser.prototype.clickHandler = function(e) {
            var targetElement = e.target;
            if (!this.isCustomizeOpenCC) {
                if (isNullOrUndefined(closest(targetElement, ".e-cc")) && isNullOrUndefined(closest(targetElement, ".e-cc-toolbar"))) isNullOrUndefined(this.dlgObj) || !this.dlgObj.visible || targetElement.classList.contains("e-toolbar-items") || (this.dlgObj.hide(), 
                this.clearActions(), this.refreshCheckboxState(), this.isDlgOpen = !1); else if (targetElement.classList.contains("e-columnchooser-btn") || targetElement.classList.contains("e-cc-toolbar")) {
                    if (this.initialOpenDlg && this.dlgObj.visible || !this.isDlgOpen) return void (this.isDlgOpen = !0);
                } else targetElement.classList.contains("e-cc-cancel") && (targetElement.parentElement.querySelector(".e-ccsearch").value = "", 
                this.columnChooserSearch(""), this.removeCancelIcon(), this.refreshCheckboxButton());
                (this.parent.detailTemplate || this.parent.childGrid) && (this.targetdlg = e.target);
            }
            this.isCustomizeOpenCC && e.target.classList.contains("e-cc-cancel") && this.refreshCheckboxState(), 
            this.rtlUpdate();
        }, ColumnChooser.prototype.hideDialog = function() {
            !isNullOrUndefined(this.dlgObj) && this.dlgObj.visible && (this.dlgObj.hide(), this.isDlgOpen = !1);
        }, ColumnChooser.prototype.renderColumnChooser = function(x, y, target) {
            if (this.dlgObj.visible || !this.parent.detailTemplate && !this.parent.childGrid || this.hideOpenedDialog(), 
            this.dlgObj.visible) this.hideDialog(), this.addcancelIcon(); else {
                var args1 = {
                    requestType: "beforeOpenColumnChooser",
                    element: this.parent.element,
                    columns: this.getColumns(),
                    cancel: !1,
                    searchOperator: this.searchOperator
                };
                if (this.parent.trigger("beforeOpenColumnChooser", args1), args1.cancel) return;
                this.searchOperator = args1.searchOperator, target && (this.targetdlg = target), 
                this.refreshCheckboxState(), this.dlgObj.dataBind(), this.dlgObj.element.style.maxHeight = "430px";
                var elementVisible = this.dlgObj.element.style.display;
                this.dlgObj.element.style.display = "block";
                var newpos = calculateRelativeBasedPosition(closest(target, ".e-toolbar-item"), this.dlgObj.element);
                this.dlgObj.element.style.display = elementVisible, this.dlgObj.element.style.top = newpos.top + closest(target, ".e-cc-toolbar").getBoundingClientRect().height + "px";
                isNullOrUndefined(closest(target, ".e-bigger")) || (this.dlgObj.width = 258), Browser.isDevice ? (this.dlgObj.target = document.body, 
                this.dlgObj.position = {
                    X: "center",
                    Y: "center"
                }, this.dlgObj.refreshPosition(), this.dlgObj.open = this.mOpenDlg.bind(this)) : this.parent.enableRtl ? this.dlgObj.element.style.left = target.offsetLeft + "px" : this.dlgObj.element.style.left = newpos.left - 250 + closest(target, ".e-cc-toolbar").clientWidth + 2 + "px", 
                this.removeCancelIcon(), this.dlgObj.show();
            }
            this.rtlUpdate();
        }, ColumnChooser.prototype.openColumnChooser = function(X, Y) {
            this.isCustomizeOpenCC = !0, this.dlgObj.visible ? this.hideDialog() : (this.isInitialOpen ? this.refreshCheckboxState() : this.dlgObj.content = this.renderChooserList(), 
            this.dlgObj.dataBind(), this.dlgObj.position = {
                X: "center",
                Y: "center"
            }, isNullOrUndefined(X) ? (this.dlgObj.position = {
                X: "center",
                Y: "center"
            }, this.dlgObj.refreshPosition()) : (this.dlgObj.element.style.top = "", this.dlgObj.element.style.left = "", 
            this.dlgObj.element.style.top = Y + "px", this.dlgObj.element.style.left = X + "px"), 
            this.dlgObj.beforeOpen = this.customDialogOpen.bind(this), this.dlgObj.show(), this.isInitialOpen = !0, 
            this.dlgObj.beforeClose = this.customDialogClose.bind(this));
        }, ColumnChooser.prototype.enableAfterRenderEle = function(e) {
            e.module === this.getModuleName() && e.enable && this.render();
        }, ColumnChooser.prototype.customDialogOpen = function() {
            var searchElement = this.dlgObj.content.querySelector("input.e-ccsearch");
            EventHandler.add(searchElement, "keyup", this.columnChooserManualSearch, this);
        }, ColumnChooser.prototype.customDialogClose = function() {
            var searchElement = this.dlgObj.content.querySelector("input.e-ccsearch");
            EventHandler.remove(searchElement, "keyup", this.columnChooserManualSearch);
        }, ColumnChooser.prototype.getColumns = function() {
            return this.parent.getColumns().filter(function(column) {
                return "checkbox" !== column.type && !0 === column.showInColumnChooser || "checkbox" === column.type && void 0 !== column.field;
            });
        }, ColumnChooser.prototype.renderDlgContent = function() {
            this.dlgDiv = this.parent.createElement("div", {
                className: "e-ccdlg e-cc",
                id: this.parent.element.id + "_ccdlg"
            }), this.parent.element.appendChild(this.dlgDiv);
            this.parent.element.getBoundingClientRect().width, this.parent.enableRtl;
            var tarElement = this.parent.element.querySelector(".e-ccdiv");
            isNullOrUndefined(tarElement) || tarElement.getBoundingClientRect().top, this.dlgObj = new Dialog({
                header: this.l10n.getConstant("ChooseColumns"),
                showCloseIcon: !1,
                closeOnEscape: !1,
                locale: this.parent.locale,
                visible: !1,
                enableRtl: this.parent.enableRtl,
                target: document.getElementById(this.parent.element.id),
                buttons: [ {
                    click: this.confirmDlgBtnClick.bind(this),
                    buttonModel: {
                        content: this.l10n.getConstant("OKButton"),
                        isPrimary: !0,
                        cssClass: "e-cc e-cc_okbtn"
                    }
                }, {
                    click: this.clearActions.bind(this),
                    buttonModel: {
                        cssClass: "e-flat e-cc e-cc-cnbtn",
                        content: this.l10n.getConstant("CancelButton")
                    }
                } ],
                content: this.renderChooserList(),
                width: 250,
                cssClass: "e-cc",
                animationSettings: {
                    effect: "None"
                }
            }), this.dlgObj.appendTo(this.dlgDiv), this.wireEvents();
        }, ColumnChooser.prototype.renderChooserList = function() {
            this.mainDiv = this.parent.createElement("div", {
                className: "e-main-div e-cc"
            });
            var searchDiv = this.parent.createElement("div", {
                className: "e-cc-searchdiv e-cc e-input-group"
            }), ccsearchele = this.parent.createElement("input", {
                className: "e-ccsearch e-cc e-input",
                attrs: {
                    placeholder: this.l10n.getConstant("Search")
                }
            }), ccsearchicon = this.parent.createElement("span", {
                className: "e-ccsearch-icon e-icons e-cc e-input-group-icon",
                attrs: {
                    title: this.l10n.getConstant("Search")
                }
            }), conDiv = this.parent.createElement("div", {
                className: "e-cc-contentdiv"
            });
            this.innerDiv = this.parent.createElement("div", {
                className: "e-innerdiv e-cc"
            }), searchDiv.appendChild(ccsearchele), searchDiv.appendChild(ccsearchicon), this.searchBoxObj = new SearchBox(ccsearchele);
            var innerDivContent = this.refreshCheckboxList(this.parent.getColumns());
            return this.innerDiv.appendChild(innerDivContent), conDiv.appendChild(this.innerDiv), 
            this.mainDiv.appendChild(searchDiv), this.mainDiv.appendChild(conDiv), this.mainDiv;
        }, ColumnChooser.prototype.confirmDlgBtnClick = function(args) {
            if (this.stateChangeColumns = [], !isNullOrUndefined(args)) {
                this.hideColumn.length && this.columnStateChange(this.hideColumn, !1), this.showColumn.length && this.columnStateChange(this.showColumn, !0);
                var params = {
                    requestType: "columnstate",
                    element: this.parent.element,
                    columns: this.stateChangeColumns,
                    dialogInstance: this.dlgObj
                };
                this.parent.trigger(actionComplete, params), this.getShowHideService.setVisible(this.stateChangeColumns), 
                this.clearActions(), this.parent.notify("tooltip-destroy", {
                    module: "edit"
                });
            }
        }, ColumnChooser.prototype.columnStateChange = function(stateColumns, state) {
            for (var index = 0; index < stateColumns.length; index++) {
                var colUid = stateColumns[index], currentCol = this.parent.getColumnByUid(colUid);
                currentCol.visible = state, this.stateChangeColumns.push(currentCol);
            }
        }, ColumnChooser.prototype.clearActions = function() {
            this.hideColumn = [], this.showColumn = [], this.hideDialog(), this.addcancelIcon();
        }, ColumnChooser.prototype.checkstatecolumn = function(isChecked, coluid) {
            isChecked ? (-1 !== this.hideColumn.indexOf(coluid) && this.hideColumn.splice(this.hideColumn.indexOf(coluid), 1), 
            -1 === this.showColumn.indexOf(coluid) && this.showColumn.push(coluid)) : (-1 !== this.showColumn.indexOf(coluid) && this.showColumn.splice(this.showColumn.indexOf(coluid), 1), 
            -1 === this.hideColumn.indexOf(coluid) && this.hideColumn.push(coluid));
        }, ColumnChooser.prototype.columnChooserSearch = function(searchVal) {
            var fltrCol, okButton, clearSearch = !1, buttonEle = this.dlgDiv.querySelector(".e-footer-content");
            if (buttonEle && (okButton = buttonEle.querySelector(".e-btn").ej2_instances[0]), 
            "" === searchVal ? (this.removeCancelIcon(), fltrCol = this.getColumns(), clearSearch = !0) : fltrCol = new DataManager(this.getColumns()).executeLocal(new Query().where("headerText", this.searchOperator, searchVal, !0)), 
            fltrCol.length) this.innerDiv.innerHTML = " ", this.innerDiv.classList.remove("e-ccnmdiv"), 
            this.innerDiv.appendChild(this.refreshCheckboxList(fltrCol, searchVal)), clearSearch ? okButton && (okButton.disabled = !1) : (this.addcancelIcon(), 
            this.refreshCheckboxButton()); else {
                var nMatchele = this.parent.createElement("span", {
                    className: "e-cc e-nmatch"
                });
                nMatchele.innerHTML = this.l10n.getConstant("Matchs"), this.innerDiv.innerHTML = " ", 
                this.innerDiv.appendChild(nMatchele), this.innerDiv.classList.add("e-ccnmdiv"), 
                okButton && (okButton.disabled = !0);
            }
            this.flag = !0, this.stopTimer();
        }, ColumnChooser.prototype.wireEvents = function() {
            EventHandler.add(this.dlgObj.element, "click", this.checkBoxClickHandler, this), 
            EventHandler.add(this.searchBoxObj.searchBox, "keyup", this.columnChooserManualSearch, this), 
            this.searchBoxObj.wireEvent();
        }, ColumnChooser.prototype.unWireEvents = function() {
            this.parent.isDestroyed || (this.dlgObj.element && EventHandler.remove(this.dlgObj.element, "click", this.checkBoxClickHandler), 
            EventHandler.remove(this.searchBoxObj.searchBox, "keyup", this.columnChooserManualSearch), 
            this.searchBoxObj.unWireEvent());
        }, ColumnChooser.prototype.checkBoxClickHandler = function(e) {
            var checkstate, elem = parentsUntil(e.target, "e-checkbox-wrapper");
            if (elem) {
                if (toogleCheckbox(elem.parentElement), elem.querySelector(".e-chk-hidden").focus(), 
                elem.querySelector(".e-check")) checkstate = !0; else {
                    if (!elem.querySelector(".e-uncheck")) return;
                    checkstate = !1;
                }
                var columnUid = parentsUntil(elem, "e-ccheck").getAttribute("uid");
                this.checkstatecolumn(checkstate, columnUid), this.refreshCheckboxButton();
            }
        }, ColumnChooser.prototype.refreshCheckboxButton = function() {
            this.dlgObj.element.querySelector(".e-cc.e-input").value;
            var selected = this.innerDiv.querySelectorAll(".e-check").length, btn = this.dlgDiv.querySelector(".e-footer-content").querySelector(".e-btn").ej2_instances[0];
            btn.disabled = !1;
            for (var srchShowCols = [], searchData = this.parent.element.querySelectorAll(".e-cc-chbox"), i = 0, itemsLen = searchData.length; i < itemsLen; i++) {
                var columnUID = parentsUntil(searchData[i], "e-ccheck").getAttribute("uid");
                srchShowCols.push(columnUID);
            }
            var hideCols = this.showColumn.filter(function(column) {
                return -1 !== srchShowCols.indexOf(column);
            });
            0 === selected && 0 === hideCols.length && (btn.disabled = !0), btn.dataBind();
        }, ColumnChooser.prototype.refreshCheckboxList = function(gdCol, searchVal) {
            this.ulElement = this.parent.createElement("ul", {
                className: "e-ccul-ele e-cc"
            });
            for (var i = 0; i < gdCol.length; i++) {
                var columns = gdCol[i];
                this.renderCheckbox(columns);
            }
            return this.ulElement;
        }, ColumnChooser.prototype.refreshCheckboxState = function() {
            this.dlgObj.element.querySelector(".e-cc.e-input").value = "", this.columnChooserSearch("");
            for (var gridObject = this.parent, currentCheckBoxColls = this.dlgObj.element.querySelectorAll(".e-cc-chbox"), i = 0, itemLen = currentCheckBoxColls.length; i < itemLen; i++) {
                var element = currentCheckBoxColls[i], columnUID = void 0;
                columnUID = this.parent.childGrid || this.parent.detailTemplate ? parentsUntil(this.dlgObj.element.querySelectorAll(".e-cc-chbox")[i], "e-ccheck").getAttribute("uid") : parentsUntil(element, "e-ccheck").getAttribute("uid");
                gridObject.getColumnByUid(columnUID).visible ? (element.checked = !0, this.checkState(element.parentElement.querySelector(".e-icons"), !0)) : (element.checked = !1, 
                this.checkState(element.parentElement.querySelector(".e-icons"), !1));
            }
        }, ColumnChooser.prototype.checkState = function(element, state) {
            state ? classList(element, [ "e-check" ], [ "e-uncheck" ]) : classList(element, [ "e-uncheck" ], [ "e-check" ]);
        }, ColumnChooser.prototype.createCheckBox = function(label, checked, uid) {
            var cbox = checked ? this.cBoxTrue.cloneNode(!0) : this.cBoxFalse.cloneNode(!0);
            return cbox.querySelector(".e-label").innerHTML = label, createCboxWithWrap(uid, cbox, "e-ccheck");
        }, ColumnChooser.prototype.renderCheckbox = function(column) {
            var cclist, hideColState, showColState;
            if (column.showInColumnChooser) {
                cclist = this.parent.createElement("li", {
                    className: "e-cclist e-cc",
                    styles: "list-style:None",
                    id: "e-ccli_" + column.uid
                }), hideColState = -1 !== this.hideColumn.indexOf(column.uid), showColState = -1 !== this.showColumn.indexOf(column.uid);
                var cccheckboxlist = this.createCheckBox(column.headerText, column.visible && !hideColState || showColState, column.uid);
                cclist.appendChild(cccheckboxlist), this.ulElement.appendChild(cclist);
            }
        }, ColumnChooser.prototype.columnChooserManualSearch = function(e) {
            this.addcancelIcon(), this.searchValue = e.target.value, this.stopTimer(), this.startTimer(e);
        }, ColumnChooser.prototype.startTimer = function(e) {
            var proxy = this, interval = proxy.flag || 13 === e.keyCode ? 0 : 500;
            this.timer = window.setInterval(function() {
                proxy.columnChooserSearch(proxy.searchValue);
            }, interval);
        }, ColumnChooser.prototype.stopTimer = function() {
            window.clearInterval(this.timer);
        }, ColumnChooser.prototype.addcancelIcon = function() {
            this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").classList.add("e-cc-cancel");
        }, ColumnChooser.prototype.removeCancelIcon = function() {
            this.dlgDiv.querySelector(".e-cc.e-ccsearch-icon").classList.remove("e-cc-cancel");
        }, ColumnChooser.prototype.mOpenDlg = function() {
            Browser.isDevice && (this.dlgObj.element.querySelector(".e-cc-searchdiv").classList.remove("e-input-focus"), 
            this.dlgObj.element.querySelectorAll(".e-cc-chbox")[0].focus());
        }, ColumnChooser.prototype.getModuleName = function() {
            return "columnChooser";
        }, ColumnChooser.prototype.hideOpenedDialog = function() {
            for (var openCC = [].slice.call(document.getElementsByClassName("e-ccdlg")).filter(function(dlgEle) {
                return dlgEle.classList.contains("e-popup-open");
            }), i = 0, dlgLen = openCC.length; i < dlgLen; i++) (openCC[i].classList.contains("e-dialog") || this.parent.element.id + "_ccdlg" !== openCC[i].id) && openCC[i].ej2_instances[0].hide();
        }, ColumnChooser;
    }(), CellStyle = function() {
        return function() {
            this.numFmtId = 0, this.backColor = "none", this.fontName = "Calibri", this.fontSize = 14, 
            this.fontColor = "#000000", this.italic = !1, this.bold = !1, this.underline = !1, 
            this.wrapText = !1, this.hAlign = "general", this.vAlign = "bottom", this.indent = 0, 
            this.numberFormat = "GENERAL", this.type = "datetime", this.borders = new Borders(), 
            this.isGlobalStyle = !1;
        };
    }(), Font = function() {
        return function() {
            this.sz = 14, this.name = "Calibri", this.u = !1, this.b = !1, this.i = !1, this.color = "FF000000";
        };
    }(), CellXfs = function() {
        return function() {};
    }(), Alignment = function() {
        return function() {};
    }(), CellStyleXfs = function() {
        return function() {};
    }(), CellStyles = function() {
        return function() {
            this.name = "Normal", this.xfId = 0;
        };
    }(), NumFmt = function() {
        return function(id, code) {
            this.numFmtId = id, this.formatCode = code;
        };
    }(), Border = function() {
        return function(mLine, mColor) {
            this.lineStyle = mLine, this.color = mColor;
        };
    }(), Borders = function() {
        return function() {
            this.left = new Border("none", "#FFFFFF"), this.right = new Border("none", "#FFFFFF"), 
            this.top = new Border("none", "#FFFFFF"), this.bottom = new Border("none", "#FFFFFF"), 
            this.all = new Border("none", "#FFFFFF");
        };
    }(), __extends$67 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), Cell$1 = function() {
        return function() {};
    }(), Cells = function(_super) {
        function Cells() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.add = function(cell) {
                for (var inserted = !1, count = 0, _i = 0, _a = _this; _i < _a.length; _i++) {
                    _a[_i].index === cell.index && (_this[count] = cell, inserted = !0), count++;
                }
                inserted || _this.push(cell);
            }, _this;
        }
        return __extends$67(Cells, _super), Cells;
    }(Array), Column$1 = function() {
        return function() {};
    }(), __extends$68 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), Row$1 = function() {
        return function() {};
    }(), Rows = function(_super) {
        function Rows() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.add = function(row) {
                for (var inserted = !1, count = 0, _i = 0, _a = _this; _i < _a.length; _i++) {
                    _a[_i].index === row.index && (_this[count] = row, inserted = !0), count++;
                }
                inserted || _this.push(row);
            }, _this;
        }
        return __extends$68(Rows, _super), Rows;
    }(Array), __extends$69 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), Worksheets = function(_super) {
        function Worksheets() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$69(Worksheets, _super), Worksheets;
    }(Array), __extends$70 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), Worksheet = function() {
        return function() {
            this.isSummaryRowBelow = !0, this.showGridLines = !0;
        };
    }(), HyperLink = function() {
        return function() {};
    }(), Grouping = function() {
        return function() {};
    }(), FreezePane = function() {
        return function() {};
    }(), MergeCell = function() {
        return function() {};
    }(), MergeCells = function(_super) {
        function MergeCells() {
            var _this = null !== _super && _super.apply(this, arguments) || this;
            return _this.add = function(mergeCell) {
                for (var inserted = !1, count = 0, _i = 0, _a = _this; _i < _a.length; _i++) {
                    var mCell = _a[_i];
                    if (MergeCells.isIntersecting(mCell, mergeCell)) {
                        var intersectingCell = new MergeCell();
                        intersectingCell.x = Math.min(mCell.x, mergeCell.x), intersectingCell.y = Math.min(mCell.Y, mergeCell.y), 
                        intersectingCell.width = Math.max(mCell.Width + mCell.X, mergeCell.width + mergeCell.x), 
                        intersectingCell.height = Math.max(mCell.Height + mCell.Y, mergeCell.height + mergeCell.y), 
                        intersectingCell.ref = _this[count].ref.split(":")[0] + ":" + mergeCell.ref.split(":")[1], 
                        _this[count] = intersectingCell, mergeCell = intersectingCell, inserted = !0;
                    }
                    count++;
                }
                return inserted || _this.push(mergeCell), mergeCell;
            }, _this;
        }
        return __extends$70(MergeCells, _super), MergeCells.isIntersecting = function(base, compare) {
            return base.x <= compare.x + compare.width && compare.x <= base.x + base.width && base.y <= compare.y + compare.height && compare.y <= base.y + base.height;
        }, MergeCells;
    }(Array), Save = function() {
        function Save() {}
        return Save.save = function(fileName, buffer) {
            if (null === fileName || void 0 === fileName || "" === fileName) throw new Error("ArgumentException: fileName cannot be undefined, null or empty");
            var extension = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length), mimeType = this.getMimeType(extension);
            if ("" !== mimeType && (buffer = new Blob([ buffer ], {
                type: mimeType
            })), this.isMicrosoftBrowser) navigator.msSaveBlob(buffer, fileName); else {
                var downloadLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
                this.saveInternal(fileName, extension, buffer, downloadLink, "download" in downloadLink);
            }
        }, Save.saveInternal = function(fileName, extension, buffer, downloadLink, hasDownloadAttribute) {
            if (hasDownloadAttribute) {
                downloadLink.download = fileName;
                var dataUrl_1 = window.URL.createObjectURL(buffer);
                downloadLink.href = dataUrl_1;
                var event_1 = document.createEvent("MouseEvent");
                event_1.initEvent("click", !0, !0), downloadLink.dispatchEvent(event_1), setTimeout(function() {
                    window.URL.revokeObjectURL(dataUrl_1), dataUrl_1 = void 0;
                });
            } else if ("docx" !== extension && "xlsx" !== extension) {
                var url = window.URL.createObjectURL(buffer);
                window.open(url, "_blank") || (window.location.href = url);
            } else {
                var reader_1 = new FileReader();
                reader_1.onloadend = function() {
                    window.open(reader_1.result, "_blank") || (window.location.href = reader_1.result);
                }, reader_1.readAsDataURL(buffer);
            }
        }, Save.getMimeType = function(extension) {
            var mimeType = "";
            switch (extension) {
              case "html":
                mimeType = "text/html";
                break;

              case "pdf":
                mimeType = "application/pdf";
                break;

              case "docx":
                mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                break;

              case "xlsx":
                mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                break;

              case "txt":
                mimeType = "text/plain";
            }
            return mimeType;
        }, Save;
    }(), XmlWriter = function() {
        function XmlWriter() {
            this.contentPos = 0, this.bufferText = "", this.bufferBlob = new Blob([ "" ], {
                type: "text/plain"
            }), this.currentState = "Initial", this.namespaceStack = [], this.namespaceStack.push(new Namespace()), 
            this.namespaceStack[0].set("xmlns", "http://www.w3.org/2000/xmlns/", "Special"), 
            this.namespaceStack.push(new Namespace()), this.namespaceStack[1].set("xml", "http://www.w3.org/XML/1998/namespace", "Special"), 
            this.namespaceStack.push(new Namespace()), this.namespaceStack[2].set("", "", "Implied"), 
            this.elementStack = [], this.elementStack.push(new XmlElement()), this.elementStack[0].set("", "", "", this.namespaceStack.length - 1), 
            this.attributeStack = [], Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
        }
        return Object.defineProperty(XmlWriter.prototype, "buffer", {
            get: function() {
                return this.flush(), this.bufferBlob;
            },
            enumerable: !0,
            configurable: !0
        }), XmlWriter.prototype.writeProcessingInstruction = function(name, text) {
            if (void 0 === name || null === name || 0 === name.length) throw new Error("ArgumentException: name should not be undefined, null or empty");
            if (this.checkName(name), void 0 !== text && null !== text || (text = ""), 3 === name.length && "xml" === name && "Initial" !== this.currentState) throw new Error("InvalidArgumentException: Cannot write XML declaration.WriteStartDocument method has already written it");
            if ("Initial" !== this.currentState || void 0 === this.bufferBlob) throw new Error("InvalidOperationException: Wrong Token");
            this.writeStartDocument(), this.writeProcessingInstructionInternal(name, text);
        }, XmlWriter.prototype.writeStartDocument = function(standalone) {
            if ("Initial" !== this.currentState || void 0 === this.bufferBlob) throw new Error("InvalidOperationException: Wrong Token");
            this.currentState = "StartDocument", this.rawText('<?xml version="1.0" encoding="utf-8'), 
            null !== standalone && void 0 !== standalone && (this.rawText('" standalone="'), 
            this.rawText(standalone ? "yes" : "no")), this.rawText('"?>');
        }, XmlWriter.prototype.writeEndDocument = function() {
            for (;this.elementStack.length - 1 > 0; ) this.writeEndElement();
            this.currentState = "EndDocument", this.flush();
        }, XmlWriter.prototype.writeStartElement = function(prefix, localName, namespace) {
            if (void 0 === this.bufferBlob) throw new Error("InvalidOperationException: Wrong Token");
            if (void 0 === localName || null === localName || 0 === localName.length) throw new Error("ArgumentException: localName cannot be undefined, null or empty");
            if (this.checkName(localName), "Initial" === this.currentState && this.writeStartDocument(), 
            "StartElement" === this.currentState && this.startElementContent(), this.currentState = "StartElement", 
            void 0 === prefix || null === prefix) void 0 !== namespace && null !== namespace && (prefix = this.lookupPrefix(namespace)), 
            void 0 !== prefix && null !== prefix || (prefix = ""); else if (prefix.length > 0 && (void 0 !== namespace && null !== namespace || (namespace = this.lookupNamespace(prefix)), 
            void 0 === namespace || null === namespace || void 0 !== namespace && 0 === namespace.length)) throw new Error("ArgumentException: Cannot use a prefix with an empty namespace");
            void 0 !== namespace && null !== namespace || (namespace = this.lookupNamespace(prefix)), 
            this.writeStartElementInternal(prefix, localName, namespace);
        }, XmlWriter.prototype.writeEndElement = function() {
            "StartElement" === this.currentState ? (this.startElementContent(), this.currentState = "ElementContent") : "ElementContent" === this.currentState && (this.currentState = "ElementContent"), 
            this.currentState = "EndElement";
            var top = this.elementStack.length - 1;
            this.writeEndElementInternal(this.elementStack[top].prefix, this.elementStack[top].localName), 
            this.namespaceStack.splice(this.elementStack[top].previousTop + 1), this.elementStack.splice(top), 
            this.bufferText.length > 10240 && this.flush();
        }, XmlWriter.prototype.writeElementString = function(prefix, localName, namespace, value) {
            this.writeStartElement(prefix, localName, namespace), void 0 !== value && null !== value && 0 !== value.length && this.writeString(value), 
            this.writeEndElement();
        }, XmlWriter.prototype.writeAttributeString = function(prefix, localName, namespace, value) {
            this.writeStartAttribute(prefix, localName, namespace, value), this.writeStringInternal(value, !0), 
            this.writeEndAttribute();
        }, XmlWriter.prototype.writeString = function(text) {
            this.writeInternal(text, !1);
        }, XmlWriter.prototype.writeRaw = function(text) {
            this.writeInternal(text, !0);
        }, XmlWriter.prototype.writeInternal = function(text, isRawString) {
            if (void 0 !== text && null !== text) {
                if ("StartElement" !== this.currentState && "ElementContent" !== this.currentState) throw new Error("InvalidOperationException: Wrong Token");
                "StartElement" === this.currentState && this.startElementContent(), this.currentState = "ElementContent", 
                isRawString ? this.rawText(text) : this.writeStringInternal(text, !1);
            }
        }, XmlWriter.prototype.save = function(fileName) {
            for (;this.elementStack.length - 1 > 0; ) this.writeEndElement();
            "" !== this.bufferText && this.flush(), Save.save(fileName, this.buffer);
        }, XmlWriter.prototype.destroy = function() {
            this.bufferBlob = void 0;
            for (var i = 0; i < this.namespaceStack.length; i++) this.namespaceStack[i].destroy();
            this.namespaceStack = [];
            for (i = 0; i < this.elementStack.length; i++) this.elementStack[i].destroy();
            this.elementStack = [], this.bufferText = "", this.contentPos = 0;
        }, XmlWriter.prototype.flush = function() {
            void 0 !== this.bufferBlob && (this.bufferBlob = new Blob([ this.bufferBlob, this.bufferText ], {
                type: "text/plain"
            }), this.bufferText = "");
        }, XmlWriter.prototype.writeProcessingInstructionInternal = function(name, text) {
            this.bufferText += "<?", this.rawText(name), text.length > 0 && (this.bufferText += " ", 
            text = text.replace(/\?\>/g, "? >"), this.bufferText += text), this.bufferText += "?", 
            this.bufferText += ">";
        }, XmlWriter.prototype.writeStartAttribute = function(prefix, localName, namespace, value) {
            if (void 0 === localName || null === localName || 0 === localName.length) {
                if ("xmlns" !== prefix) throw new Error("ArgumentException: localName cannot be undefined, null or empty");
                localName = "xmlns", prefix = "";
            }
            if ("StartElement" !== this.currentState) throw new Error("InvalidOperationException: Wrong Token");
            this.checkName(localName), this.writeStartAttributePrefixAndNameSpace(prefix, localName, namespace, value);
        }, XmlWriter.prototype.writeStartAttributePrefixAndNameSpace = function(prefix, localName, namespace, value) {
            void 0 !== prefix && null !== prefix || (void 0 !== namespace && null !== namespace && ("xmlns" === localName && "http://www.w3.org/2000/xmlns/" === namespace || (prefix = this.lookupPrefix(namespace))), 
            void 0 !== prefix && null !== prefix || (prefix = "")), void 0 !== namespace && null !== namespace || (void 0 !== prefix && null !== prefix && prefix.length > 0 && (namespace = this.lookupNamespace(prefix)), 
            void 0 !== namespace && null !== namespace || (namespace = "")), this.writeStartAttributeSpecialAttribute(prefix, localName, namespace, value);
        }, XmlWriter.prototype.writeStartAttributeSpecialAttribute = function(prefix, localName, namespace, value) {
            if (0 === prefix.length) {
                if ("x" === localName[0] && "xmlns" === localName) return this.skipPushAndWrite(prefix, localName, namespace), 
                void this.pushNamespaceExplicit("", value);
                namespace.length > 0 && (prefix = this.lookupPrefix(namespace));
            } else {
                if ("x" === prefix[0]) {
                    if ("xmlns" === prefix) return this.skipPushAndWrite(prefix, localName, namespace), 
                    void this.pushNamespaceExplicit(localName, value);
                    if ("xml" === prefix && ("space" === localName || "lang" === localName)) return void this.skipPushAndWrite(prefix, localName, namespace);
                }
                0 === namespace.length && (prefix = "");
            }
            void 0 !== prefix && null !== prefix && 0 !== prefix.length && this.pushNamespaceImplicit(prefix, namespace), 
            this.skipPushAndWrite(prefix, localName, namespace);
        }, XmlWriter.prototype.writeEndAttribute = function() {
            this.currentState = "StartElement", this.bufferText += '"';
        }, XmlWriter.prototype.writeStartElementInternal = function(prefix, localName, namespace) {
            this.bufferText += "<", prefix.length > 0 && (this.rawText(prefix), this.bufferText += ":"), 
            this.rawText(localName);
            var top = this.elementStack.length;
            this.elementStack.push(new XmlElement()), this.elementStack[top].set(prefix, localName, namespace, this.namespaceStack.length - 1), 
            this.pushNamespaceImplicit(prefix, namespace);
            for (var i = 0; i < this.attributeStack.length; i++) this.attributeStack[i].destroy();
            this.attributeStack = [];
        }, XmlWriter.prototype.writeEndElementInternal = function(prefix, localName) {
            this.contentPos !== this.bufferText.length + 1 ? (this.bufferText += "</", void 0 !== prefix && null !== prefix && 0 !== prefix.length && (this.rawText(prefix), 
            this.bufferText += ":"), this.rawText(localName), this.bufferText += ">") : (this.bufferText = this.bufferText.substring(0, this.bufferText.length - 1), 
            this.bufferText += " />");
        }, XmlWriter.prototype.writeStartAttributeInternal = function(prefix, localName, namespaceName) {
            this.bufferText += " ", void 0 !== prefix && null !== prefix && prefix.length > 0 && (this.rawText(prefix), 
            this.bufferText += ":"), this.rawText(localName), this.bufferText += "=", this.bufferText += '"';
        }, XmlWriter.prototype.writeNamespaceDeclaration = function(prefix, namespaceUri) {
            this.writeStartNamespaceDeclaration(prefix), this.writeStringInternal(namespaceUri, !0), 
            this.bufferText += '"';
        }, XmlWriter.prototype.writeStartNamespaceDeclaration = function(prefix) {
            void 0 === prefix || null === prefix || 0 === prefix.length ? this.rawText(' xmlns="') : (this.rawText(" xmlns:"), 
            this.rawText(prefix), this.bufferText += "=", this.bufferText += '"');
        }, XmlWriter.prototype.writeStringInternal = function(text, inAttributeValue) {
            null !== text && void 0 !== text || (text = ""), text = (text = (text = text.replace(/\&/g, "&amp;")).replace(/\</g, "&lt;")).replace(/\>/g, "&gt;"), 
            inAttributeValue && (text = text.replace(/\"/g, "&quot;")), this.bufferText += text, 
            inAttributeValue || (this.contentPos = 0);
        }, XmlWriter.prototype.startElementContent = function() {
            for (var start = this.elementStack[this.elementStack.length - 1].previousTop, i = this.namespaceStack.length - 1; i > start; i--) "NeedToWrite" === this.namespaceStack[i].kind && this.writeNamespaceDeclaration(this.namespaceStack[i].prefix, this.namespaceStack[i].namespaceUri);
            this.bufferText += ">", this.contentPos = this.bufferText.length + 1;
        }, XmlWriter.prototype.rawText = function(text) {
            this.bufferText += text;
        }, XmlWriter.prototype.addNamespace = function(prefix, ns, kind) {
            var top = this.namespaceStack.length;
            this.namespaceStack.push(new Namespace()), this.namespaceStack[top].set(prefix, ns, kind);
        }, XmlWriter.prototype.lookupPrefix = function(namespace) {
            for (var i = this.namespaceStack.length - 1; i >= 0; i--) if (this.namespaceStack[i].namespaceUri === namespace) return this.namespaceStack[i].prefix;
        }, XmlWriter.prototype.lookupNamespace = function(prefix) {
            for (var i = this.namespaceStack.length - 1; i >= 0; i--) if (this.namespaceStack[i].prefix === prefix) return this.namespaceStack[i].namespaceUri;
        }, XmlWriter.prototype.lookupNamespaceIndex = function(prefix) {
            for (var i = this.namespaceStack.length - 1; i >= 0; i--) if (this.namespaceStack[i].prefix === prefix) return i;
            return -1;
        }, XmlWriter.prototype.pushNamespaceImplicit = function(prefix, ns) {
            var kind, existingNsIndex = this.lookupNamespaceIndex(prefix);
            if (-1 !== existingNsIndex) {
                if (existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop) {
                    if (this.namespaceStack[existingNsIndex].namespaceUri !== ns) throw new Error("XmlException namespace Uri needs to be the same as the one that is already declared");
                    return;
                }
                if ("Special" === this.namespaceStack[existingNsIndex].kind) {
                    if ("xml" !== prefix) throw new Error('InvalidArgumentException: Prefix "xmlns" is reserved for use by XML.');
                    if (ns !== this.namespaceStack[existingNsIndex].namespaceUri) throw new Error("InvalidArgumentException: Xml String");
                    kind = "Implied";
                } else kind = this.namespaceStack[existingNsIndex].namespaceUri === ns ? "Implied" : "NeedToWrite";
            } else {
                if ("http://www.w3.org/XML/1998/namespace" === ns && "xml" !== prefix || "http://www.w3.org/2000/xmlns/" === ns && "xmlns" !== prefix) throw new Error("InvalidArgumentException");
                kind = "NeedToWrite";
            }
            this.addNamespace(prefix, ns, kind);
        }, XmlWriter.prototype.pushNamespaceExplicit = function(prefix, ns) {
            var existingNsIndex = this.lookupNamespaceIndex(prefix);
            -1 !== existingNsIndex && existingNsIndex > this.elementStack[this.elementStack.length - 1].previousTop ? this.namespaceStack[existingNsIndex].kind = "Written" : this.addNamespace(prefix, ns, "Written");
        }, XmlWriter.prototype.addAttribute = function(prefix, localName, namespaceName) {
            var top = this.attributeStack.length;
            this.attributeStack.push(new XmlAttribute()), this.attributeStack[top].set(prefix, localName, namespaceName);
            for (var i = 0; i < top; i++) if (this.attributeStack[i].isDuplicate(prefix, localName, namespaceName)) throw new Error("XmlException: duplicate attribute name");
        }, XmlWriter.prototype.skipPushAndWrite = function(prefix, localName, namespace) {
            this.addAttribute(prefix, localName, namespace), this.writeStartAttributeInternal(prefix, localName, namespace);
        }, XmlWriter.prototype.checkName = function(text) {
            if (/[ !@#$%^&*()+\=\[\]{};':"\\|,<>\/?]/.test(text)) throw new Error("InvalidArgumentException: invalid name character");
        }, XmlWriter;
    }(), Namespace = function() {
        function Namespace() {}
        return Namespace.prototype.set = function(prefix, namespaceUri, kind) {
            this.prefix = prefix, this.namespaceUri = namespaceUri, this.kind = kind;
        }, Namespace.prototype.destroy = function() {
            this.prefix = void 0, this.namespaceUri = void 0, this.kind = void 0;
        }, Namespace;
    }(), XmlElement = function() {
        function XmlElement() {}
        return XmlElement.prototype.set = function(prefix, localName, namespaceUri, previousTop) {
            this.previousTop = previousTop, this.prefix = prefix, this.namespaceUri = namespaceUri, 
            this.localName = localName;
        }, XmlElement.prototype.destroy = function() {
            this.previousTop = void 0, this.prefix = void 0, this.localName = void 0, this.namespaceUri = void 0;
        }, XmlElement;
    }(), XmlAttribute = function() {
        function XmlAttribute() {}
        return XmlAttribute.prototype.set = function(prefix, localName, namespaceUri) {
            this.prefix = prefix, this.namespaceUri = namespaceUri, this.localName = localName;
        }, XmlAttribute.prototype.isDuplicate = function(prefix, localName, namespaceUri) {
            return this.localName === localName && (this.prefix === prefix || this.namespaceUri === namespaceUri);
        }, XmlAttribute.prototype.destroy = function() {
            this.prefix = void 0, this.namespaceUri = void 0, this.localName = void 0;
        }, XmlAttribute;
    }(), Encoding = function() {
        function Encoding(includeBom) {
            this.emitBOM = !0, this.encodingType = "Ansi", this.initBOM(includeBom);
        }
        return Object.defineProperty(Encoding.prototype, "includeBom", {
            get: function() {
                return this.emitBOM;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Encoding.prototype, "type", {
            get: function() {
                return this.encodingType;
            },
            set: function(value) {
                this.encodingType = value;
            },
            enumerable: !0,
            configurable: !0
        }), Encoding.prototype.initBOM = function(includeBom) {
            this.emitBOM = void 0 === includeBom || null === includeBom || includeBom;
        }, Encoding.prototype.getByteCount = function(chars) {
            if (validateNullOrUndefined(chars, "string"), "" === chars) {
                return this.utf8Len(chars.charCodeAt(0));
            }
            return null !== this.type && void 0 !== this.type || (this.type = "Ansi"), this.getByteCountInternal(chars, 0, chars.length);
        }, Encoding.prototype.utf8Len = function(codePoint) {
            return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : codePoint <= 2097151 ? 4 : 0;
        }, Encoding.prototype.isHighSurrogate = function(codeUnit) {
            return codeUnit >= 55296 && codeUnit <= 56319;
        }, Encoding.prototype.toCodepoint = function(highCodeUnit, lowCodeUnit) {
            return ((highCodeUnit = (1023 & highCodeUnit) << 10) | 1023 & lowCodeUnit) + 65536;
        }, Encoding.prototype.getByteCountInternal = function(chars, charIndex, charCount) {
            var byteCount = 0;
            if ("Utf8" === this.encodingType || "Unicode" === this.encodingType) {
                for (var isUtf8 = "Utf8" === this.encodingType, i = 0; i < charCount; i++) {
                    var charCode = chars.charCodeAt(isUtf8 ? charIndex : charIndex++);
                    if (this.isHighSurrogate(charCode)) if (isUtf8) {
                        var high = charCode, low = chars.charCodeAt(++charIndex);
                        byteCount += this.utf8Len(this.toCodepoint(high, low));
                    } else byteCount += 4, ++i; else byteCount += isUtf8 ? this.utf8Len(charCode) : 2;
                    isUtf8 && charIndex++;
                }
                return byteCount;
            }
            return byteCount = charCount;
        }, Encoding.prototype.getBytes = function(s, charIndex, charCount) {
            if (validateNullOrUndefined(s, "string"), validateNullOrUndefined(charIndex, "charIndex"), 
            validateNullOrUndefined(charCount, "charCount"), charIndex < 0 || charCount < 0) throw new RangeError("Argument Out Of Range Exception: charIndex or charCount is less than zero");
            if (s.length - charIndex < charCount) throw new RangeError("Argument Out Of Range Exception: charIndex and charCount do not denote a valid range in string");
            if ("" === s) return new ArrayBuffer(0);
            null !== this.type && void 0 !== this.type || (this.type = "Ansi");
            var byteCount = this.getByteCountInternal(s, charIndex, charCount);
            switch (this.type) {
              case "Utf8":
                return this.getBytesOfUtf8Encoding(byteCount, s, charIndex, charCount);

              case "Unicode":
                return this.getBytesOfUnicodeEncoding(byteCount, s, charIndex, charCount);

              default:
                return this.getBytesOfAnsiEncoding(byteCount, s, charIndex, charCount);
            }
        }, Encoding.prototype.getString = function(bytes, index, count) {
            if (validateNullOrUndefined(bytes, "bytes"), validateNullOrUndefined(index, "index"), 
            validateNullOrUndefined(count, "count"), index < 0 || count < 0) throw new RangeError("Argument Out Of Range Exception: index or count is less than zero");
            if (bytes.byteLength - index < count) throw new RangeError("Argument Out Of Range Exception: index and count do not denote a valid range in bytes");
            if (0 === bytes.byteLength || 0 === count) return "";
            null !== this.type && void 0 !== this.type || (this.type = "Ansi");
            var out = "", byteCal = new Uint8Array(bytes);
            switch (this.type) {
              case "Utf8":
                return this.getStringOfUtf8Encoding(byteCal, index, count);

              case "Unicode":
                var byteUnicode = new Uint16Array(bytes);
                return out = this.getStringofUnicodeEncoding(byteUnicode, index, count);

              default:
                for (var j = index, i = 0; i < count; i++) {
                    var c = byteCal[j];
                    out += String.fromCharCode(c), j++;
                }
                return out;
            }
        }, Encoding.prototype.getBytesOfAnsiEncoding = function(byteCount, s, charIndex, charCount) {
            for (var bytes = new ArrayBuffer(byteCount), bufview = new Uint8Array(bytes), k = 0, i = 0; i < charCount; i++) {
                var charcode = s.charCodeAt(charIndex++);
                bufview[k] = charcode < 2048 ? charcode : 63, k++;
            }
            return bytes;
        }, Encoding.prototype.getBytesOfUtf8Encoding = function(byteCount, s, charIndex, charCount) {
            for (var bytes = new ArrayBuffer(byteCount), uint = new Uint8Array(bytes), index = charIndex, j = 0, i = 0; i < charCount; i++) {
                var charcode = s.charCodeAt(index);
                charcode <= 127 ? uint[j] = charcode : charcode < 2048 ? (uint[j] = 192 | charcode >> 6, 
                uint[++j] = 128 | 63 & charcode) : charcode < 55296 || charcode >= 57344 ? (uint[j] = 224 | charcode >> 12, 
                uint[++j] = 128 | charcode >> 6 & 63, uint[++j] = 128 | 63 & charcode) : (uint[j] = 239, 
                uint[++j] = 191, uint[++j] = 189), ++j, ++index;
            }
            return bytes;
        }, Encoding.prototype.getBytesOfUnicodeEncoding = function(byteCount, s, charIndex, charCount) {
            for (var bytes = new ArrayBuffer(byteCount), uint16 = new Uint16Array(bytes), i = 0; i < charCount; i++) {
                var charcode = s.charCodeAt(i);
                uint16[i] = charcode;
            }
            return bytes;
        }, Encoding.prototype.getStringOfUtf8Encoding = function(byteCal, index, count) {
            for (var j = 0, i = index, s = ""; j < count; j++) {
                for (var c = byteCal[i++]; i > byteCal.length; ) return s;
                c > 127 && (c > 191 && c < 224 && i < count ? c = (31 & c) << 6 | 63 & byteCal[i] : c > 223 && c < 240 && i < byteCal.byteLength ? c = (15 & c) << 12 | (63 & byteCal[i]) << 6 | 63 & byteCal[++i] : c > 239 && c < 248 && i < byteCal.byteLength && (c = (7 & c) << 18 | (63 & byteCal[i]) << 12 | (63 & byteCal[++i]) << 6 | 63 & byteCal[++i]), 
                ++i), s += String.fromCharCode(c);
            }
            return s;
        }, Encoding.prototype.getStringofUnicodeEncoding = function(byteUni, index, count) {
            if (count > byteUni.length) throw new RangeError("ArgumentOutOfRange_Count");
            for (var byte16 = new Uint16Array(count), i = 0; i < count && i < byteUni.length; i++) byte16[i] = byteUni[index++];
            return String.fromCharCode.apply(null, byte16);
        }, Encoding.prototype.destroy = function() {
            this.emitBOM = void 0, this.encodingType = void 0;
        }, Encoding;
    }(), StreamWriter = function() {
        function StreamWriter(encoding) {
            this.bufferBlob = new Blob([ "" ]), this.bufferText = "", this.init(encoding), Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
        }
        return Object.defineProperty(StreamWriter.prototype, "buffer", {
            get: function() {
                return this.flush(), this.bufferBlob;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(StreamWriter.prototype, "encoding", {
            get: function() {
                return this.enc;
            },
            enumerable: !0,
            configurable: !0
        }), StreamWriter.prototype.init = function(encoding) {
            null === encoding || void 0 === encoding ? (this.enc = new Encoding(!1), this.enc.type = "Utf8") : (this.enc = encoding, 
            this.setBomByte());
        }, StreamWriter.prototype.setBomByte = function() {
            if (this.encoding.includeBom) switch (this.encoding.type) {
              case "Unicode":
                var arrayUnicode = new ArrayBuffer(2), uint8 = new Uint8Array(arrayUnicode);
                uint8[0] = 255, uint8[1] = 254, this.bufferBlob = new Blob([ arrayUnicode ]);
                break;

              case "Utf8":
                var arrayUtf8 = new ArrayBuffer(3), utf8 = new Uint8Array(arrayUtf8);
                utf8[0] = 239, utf8[1] = 187, utf8[2] = 191, this.bufferBlob = new Blob([ arrayUtf8 ]);
                break;

              default:
                this.bufferBlob = new Blob([ "" ]);
            }
        }, StreamWriter.prototype.save = function(fileName) {
            "" !== this.bufferText && this.flush(), Save.save(fileName, this.buffer);
        }, StreamWriter.prototype.write = function(value) {
            if (void 0 === this.encoding) throw new Error("Object Disposed Exception: current writer is disposed");
            validateNullOrUndefined(value, "string"), this.bufferText += value, this.bufferText.length >= 10240 && this.flush();
        }, StreamWriter.prototype.flush = function() {
            if (void 0 !== this.bufferText && null !== this.bufferText && 0 !== this.bufferText.length) {
                var bufferArray = this.encoding.getBytes(this.bufferText, 0, this.bufferText.length);
                this.bufferText = "", this.bufferBlob = new Blob([ this.bufferBlob, bufferArray ]);
            }
        }, StreamWriter.prototype.writeLine = function(value) {
            if (void 0 === this.encoding) throw new Error("Object Disposed Exception: current writer is disposed");
            validateNullOrUndefined(value, "string"), this.bufferText = this.bufferText + value + "\r\n", 
            this.bufferText.length >= 10240 && this.flush();
        }, StreamWriter.prototype.destroy = function() {
            this.bufferBlob = void 0, this.bufferText = void 0, this.enc instanceof Encoding && this.enc.destroy(), 
            this.enc = void 0;
        }, StreamWriter;
    }(), _fileutils = Object.freeze({
        XmlWriter: XmlWriter,
        Namespace: Namespace,
        XmlElement: XmlElement,
        XmlAttribute: XmlAttribute,
        StreamWriter: StreamWriter,
        Encoding: Encoding,
        validateNullOrUndefined: validateNullOrUndefined,
        Save: Save
    }), ARR_LITERAL_CODES = new Int16Array(286), ARR_LITERAL_LENGTHS = new Uint8Array(286), ARR_DISTANCE_CODES = new Int16Array(30), ARR_DISTANCE_LENGTHS = new Uint8Array(30), CompressedStreamWriter = function() {
        function CompressedStreamWriter(noWrap) {
            this.pendingBuffer = new Uint8Array(65536), this.pendingBufLength = 0, this.pendingBufCache = 0, 
            this.pendingBufBitsInCache = 0, this.bufferPosition = 0, this.extraBits = 0, this.currentHash = 0, 
            this.matchStart = 0, this.matchLength = 0, this.matchPrevAvail = !1, this.blockStart = 0, 
            this.stringStart = 0, this.lookAhead = 0, this.totalBytesIn = 0, this.inputOffset = 0, 
            this.inputEnd = 0, this.windowSize = 32768, this.windowMask = this.windowSize - 1, 
            this.hashSize = 32768, this.hashMask = this.hashSize - 1, this.hashShift = Math.floor(17 / 3), 
            this.maxDist = this.windowSize - 262, this.checkSum = 1, this.noWrap = !1, CompressedStreamWriter.isHuffmanTreeInitiated || (CompressedStreamWriter.initHuffmanTree(), 
            CompressedStreamWriter.isHuffmanTreeInitiated = !0), this.treeLiteral = new CompressorHuffmanTree(this, 286, 257, 15), 
            this.treeDistances = new CompressorHuffmanTree(this, 30, 1, 15), this.treeCodeLengths = new CompressorHuffmanTree(this, 19, 4, 7), 
            this.arrDistances = new Uint16Array(16384), this.arrLiterals = new Uint8Array(16384), 
            this.stream = [], this.dataWindow = new Uint8Array(2 * this.windowSize), this.hashHead = new Int16Array(this.hashSize), 
            this.hashPrevious = new Int16Array(this.windowSize), this.blockStart = this.stringStart = 1, 
            this.noWrap = noWrap, noWrap || this.writeZLibHeader();
        }
        return Object.defineProperty(CompressedStreamWriter.prototype, "compressedData", {
            get: function() {
                return this.stream;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(CompressedStreamWriter.prototype, "getCompressedString", {
            get: function() {
                var compressedString = "";
                if (void 0 !== this.stream) for (var i = 0; i < this.stream.length; i++) compressedString += String.fromCharCode.apply(null, this.stream[i]);
                return compressedString;
            },
            enumerable: !0,
            configurable: !0
        }), CompressedStreamWriter.prototype.write = function(data, offset, length) {
            if (void 0 === data || null === data) throw new Error("ArgumentException: data cannot null or undefined");
            var end = offset + length;
            if (0 > offset || offset > end || end > data.length) throw new Error("ArgumentOutOfRangeException: Offset or length is incorrect");
            if ("string" == typeof data) {
                var encode = new Encoding(!1);
                encode.type = "Utf8", end = offset + (data = new Uint8Array(encode.getBytes(data, 0, data.length))).length;
            }
            for (this.inputBuffer = data, this.inputOffset = offset, this.inputEnd = end, this.noWrap || (this.checkSum = ChecksumCalculator.checksumUpdate(this.checkSum, this.inputBuffer, this.inputOffset, end)); this.inputEnd !== this.inputOffset || 0 !== this.pendingBufLength; ) this.pendingBufferFlush(), 
            this.compressData(!1);
        }, CompressedStreamWriter.prototype.writeZLibHeader = function() {
            var headerDate = 30720;
            headerDate |= 64, headerDate += 31 - headerDate % 31, this.pendingBufferWriteShortBytes(headerDate);
        }, CompressedStreamWriter.prototype.pendingBufferWriteShortBytes = function(s) {
            this.pendingBuffer[this.pendingBufLength++] = s >> 8, this.pendingBuffer[this.pendingBufLength++] = s;
        }, CompressedStreamWriter.prototype.compressData = function(finish) {
            var success;
            do {
                this.fillWindow();
                var canFlush = finish && this.inputEnd === this.inputOffset;
                success = this.compressSlow(canFlush, finish);
            } while (0 === this.pendingBufLength && success);
            return success;
        }, CompressedStreamWriter.prototype.compressSlow = function(flush, finish) {
            if (this.lookAhead < 262 && !flush) return !1;
            for (;this.lookAhead >= 262 || flush; ) {
                if (0 === this.lookAhead) return this.lookAheadCompleted(finish);
                this.stringStart >= 2 * this.windowSize - 262 && this.slideWindow();
                var prevMatch = this.matchStart, prevLen = this.matchLength;
                if (this.lookAhead >= 3 && this.discardMatch(), prevLen >= 3 && this.matchLength <= prevLen ? prevLen = this.matchPreviousBest(prevMatch, prevLen) : this.matchPreviousAvailable(), 
                this.bufferPosition >= 16384) return this.huffmanIsFull(finish);
            }
            return !0;
        }, CompressedStreamWriter.prototype.discardMatch = function() {
            var hashHead = this.insertString();
            0 !== hashHead && this.stringStart - hashHead <= this.maxDist && this.findLongestMatch(hashHead) && this.matchLength <= 5 && 3 === this.matchLength && this.stringStart - this.matchStart > 4096 && (this.matchLength = 2);
        }, CompressedStreamWriter.prototype.matchPreviousAvailable = function() {
            this.matchPrevAvail && this.huffmanTallyLit(255 & this.dataWindow[this.stringStart - 1]), 
            this.matchPrevAvail = !0, this.stringStart++, this.lookAhead--;
        }, CompressedStreamWriter.prototype.matchPreviousBest = function(prevMatch, prevLen) {
            this.huffmanTallyDist(this.stringStart - 1 - prevMatch, prevLen), prevLen -= 2;
            do {
                this.stringStart++, this.lookAhead--, this.lookAhead >= 3 && this.insertString();
            } while (--prevLen > 0);
            return this.stringStart++, this.lookAhead--, this.matchPrevAvail = !1, this.matchLength = 2, 
            prevLen;
        }, CompressedStreamWriter.prototype.lookAheadCompleted = function(finish) {
            return this.matchPrevAvail && this.huffmanTallyLit(255 & this.dataWindow[this.stringStart - 1]), 
            this.matchPrevAvail = !1, this.huffmanFlushBlock(this.dataWindow, this.blockStart, this.stringStart - this.blockStart, finish), 
            this.blockStart = this.stringStart, !1;
        }, CompressedStreamWriter.prototype.huffmanIsFull = function(finish) {
            var len = this.stringStart - this.blockStart;
            this.matchPrevAvail && len--;
            var lastBlock = finish && 0 === this.lookAhead && !this.matchPrevAvail;
            return this.huffmanFlushBlock(this.dataWindow, this.blockStart, len, lastBlock), 
            this.blockStart += len, !lastBlock;
        }, CompressedStreamWriter.prototype.fillWindow = function() {
            for (this.stringStart >= this.windowSize + this.maxDist && this.slideWindow(); this.lookAhead < 262 && this.inputOffset < this.inputEnd; ) {
                var more = 2 * this.windowSize - this.lookAhead - this.stringStart;
                more > this.inputEnd - this.inputOffset && (more = this.inputEnd - this.inputOffset), 
                this.dataWindow.set(this.inputBuffer.subarray(this.inputOffset, this.inputOffset + more), this.stringStart + this.lookAhead), 
                this.inputOffset += more, this.totalBytesIn += more, this.lookAhead += more;
            }
            this.lookAhead >= 3 && this.updateHash();
        }, CompressedStreamWriter.prototype.slideWindow = function() {
            this.dataWindow.set(this.dataWindow.subarray(this.windowSize, this.windowSize + this.windowSize), 0), 
            this.matchStart -= this.windowSize, this.stringStart -= this.windowSize, this.blockStart -= this.windowSize;
            for (var i = 0; i < this.hashSize; ++i) {
                var m = 65535 & this.hashHead[i];
                this.hashHead[i] = m >= this.windowSize ? m - this.windowSize : 0;
            }
            for (i = 0; i < this.windowSize; i++) {
                m = 65535 & this.hashPrevious[i];
                this.hashPrevious[i] = m >= this.windowSize ? m - this.windowSize : 0;
            }
        }, CompressedStreamWriter.prototype.insertString = function() {
            var match, hash = (this.currentHash << this.hashShift ^ this.dataWindow[this.stringStart + 2]) & this.hashMask;
            return this.hashPrevious[this.stringStart & this.windowMask] = match = this.hashHead[hash], 
            this.hashHead[hash] = this.stringStart, this.currentHash = hash, 65535 & match;
        }, CompressedStreamWriter.prototype.findLongestMatch = function(curMatch) {
            var match, chainLen = 4096, niceLen = 258, scan = this.stringStart, bestEnd = this.stringStart + this.matchLength, bestLength = Math.max(this.matchLength, 2), limit = Math.max(this.stringStart - this.maxDist, 0), stringEnd = this.stringStart + 258 - 1, scanEnd1 = this.dataWindow[bestEnd - 1], scanEnd = this.dataWindow[bestEnd], data = this.dataWindow;
            bestLength >= 32 && (chainLen >>= 2), niceLen > this.lookAhead && (niceLen = this.lookAhead);
            do {
                if (data[curMatch + bestLength] === scanEnd && data[curMatch + bestLength - 1] === scanEnd1 && data[curMatch] === data[scan] && data[curMatch + 1] === data[scan + 1]) {
                    for (match = curMatch + 2, scan += 2; data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && data[++scan] === data[++match] && scan < stringEnd; ) ;
                    if (scan > bestEnd) {
                        if (this.matchStart = curMatch, bestEnd = scan, (bestLength = scan - this.stringStart) >= niceLen) break;
                        scanEnd1 = data[bestEnd - 1], scanEnd = data[bestEnd];
                    }
                    scan = this.stringStart;
                }
            } while ((curMatch = 65535 & this.hashPrevious[curMatch & this.windowMask]) > limit && 0 != --chainLen);
            return this.matchLength = Math.min(bestLength, this.lookAhead), this.matchLength >= 3;
        }, CompressedStreamWriter.prototype.updateHash = function() {
            this.currentHash = this.dataWindow[this.stringStart] << this.hashShift ^ this.dataWindow[this.stringStart + 1];
        }, CompressedStreamWriter.prototype.huffmanTallyLit = function(literal) {
            return this.arrDistances[this.bufferPosition] = 0, this.arrLiterals[this.bufferPosition++] = literal, 
            this.treeLiteral.codeFrequencies[literal]++, this.bufferPosition >= 16384;
        }, CompressedStreamWriter.prototype.huffmanTallyDist = function(dist, len) {
            this.arrDistances[this.bufferPosition] = dist, this.arrLiterals[this.bufferPosition++] = len - 3;
            var lc = this.huffmanLengthCode(len - 3);
            this.treeLiteral.codeFrequencies[lc]++, lc >= 265 && lc < 285 && (this.extraBits += Math.floor((lc - 261) / 4));
            var dc = this.huffmanDistanceCode(dist - 1);
            return this.treeDistances.codeFrequencies[dc]++, dc >= 4 && (this.extraBits += Math.floor(dc / 2 - 1)), 
            this.bufferPosition >= 16384;
        }, CompressedStreamWriter.prototype.huffmanFlushBlock = function(stored, storedOffset, storedLength, lastBlock) {
            this.treeLiteral.codeFrequencies[256]++, this.treeLiteral.buildTree(), this.treeDistances.buildTree(), 
            this.treeLiteral.calculateBLFreq(this.treeCodeLengths), this.treeDistances.calculateBLFreq(this.treeCodeLengths), 
            this.treeCodeLengths.buildTree();
            for (var blTreeCodes = 4, i = 18; i > blTreeCodes; i--) this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[i]] > 0 && (blTreeCodes = i + 1);
            var opt_len = 14 + 3 * blTreeCodes + this.treeCodeLengths.getEncodedLength() + this.treeLiteral.getEncodedLength() + this.treeDistances.getEncodedLength() + this.extraBits, static_len = this.extraBits;
            for (i = 0; i < 286; i++) static_len += this.treeLiteral.codeFrequencies[i] * ARR_LITERAL_LENGTHS[i];
            for (i = 0; i < 30; i++) static_len += this.treeDistances.codeFrequencies[i] * ARR_DISTANCE_LENGTHS[i];
            opt_len >= static_len && (opt_len = static_len), storedOffset >= 0 && storedLength + 4 < opt_len >> 3 ? this.huffmanFlushStoredBlock(stored, storedOffset, storedLength, lastBlock) : opt_len == static_len ? (this.pendingBufferWriteBits(2 + (lastBlock ? 1 : 0), 3), 
            this.treeLiteral.setStaticCodes(ARR_LITERAL_CODES, ARR_LITERAL_LENGTHS), this.treeDistances.setStaticCodes(ARR_DISTANCE_CODES, ARR_DISTANCE_LENGTHS), 
            this.huffmanCompressBlock(), this.huffmanReset()) : (this.pendingBufferWriteBits(4 + (lastBlock ? 1 : 0), 3), 
            this.huffmanSendAllTrees(blTreeCodes), this.huffmanCompressBlock(), this.huffmanReset());
        }, CompressedStreamWriter.prototype.huffmanFlushStoredBlock = function(stored, storedOffset, storedLength, lastBlock) {
            this.pendingBufferWriteBits(0 + (lastBlock ? 1 : 0), 3), this.pendingBufferAlignToByte(), 
            this.pendingBufferWriteShort(storedLength), this.pendingBufferWriteShort(~storedLength), 
            this.pendingBufferWriteByteBlock(stored, storedOffset, storedLength), this.huffmanReset();
        }, CompressedStreamWriter.prototype.huffmanLengthCode = function(len) {
            if (255 === len) return 285;
            for (var code = 257; len >= 8; ) code += 4, len >>= 1;
            return code + len;
        }, CompressedStreamWriter.prototype.huffmanDistanceCode = function(distance) {
            for (var code = 0; distance >= 4; ) code += 2, distance >>= 1;
            return code + distance;
        }, CompressedStreamWriter.prototype.huffmanSendAllTrees = function(blTreeCodes) {
            this.treeCodeLengths.buildCodes(), this.treeLiteral.buildCodes(), this.treeDistances.buildCodes(), 
            this.pendingBufferWriteBits(this.treeLiteral.treeLength - 257, 5), this.pendingBufferWriteBits(this.treeDistances.treeLength - 1, 5), 
            this.pendingBufferWriteBits(blTreeCodes - 4, 4);
            for (var rank = 0; rank < blTreeCodes; rank++) this.pendingBufferWriteBits(this.treeCodeLengths.codeLengths[CompressorHuffmanTree.huffCodeLengthOrders[rank]], 3);
            this.treeLiteral.writeTree(this.treeCodeLengths), this.treeDistances.writeTree(this.treeCodeLengths);
        }, CompressedStreamWriter.prototype.huffmanReset = function() {
            this.bufferPosition = 0, this.extraBits = 0, this.treeLiteral.reset(), this.treeDistances.reset(), 
            this.treeCodeLengths.reset();
        }, CompressedStreamWriter.prototype.huffmanCompressBlock = function() {
            for (var i = 0; i < this.bufferPosition; i++) {
                var literalLen = 255 & this.arrLiterals[i], dist = this.arrDistances[i];
                if (0 != dist--) {
                    var lc = this.huffmanLengthCode(literalLen);
                    this.treeLiteral.writeCodeToStream(lc);
                    var bits = Math.floor((lc - 261) / 4);
                    bits > 0 && bits <= 5 && this.pendingBufferWriteBits(literalLen & (1 << bits) - 1, bits);
                    var dc = this.huffmanDistanceCode(dist);
                    this.treeDistances.writeCodeToStream(dc), (bits = Math.floor(dc / 2 - 1)) > 0 && this.pendingBufferWriteBits(dist & (1 << bits) - 1, bits);
                } else this.treeLiteral.writeCodeToStream(literalLen);
            }
            this.treeLiteral.writeCodeToStream(256);
        }, CompressedStreamWriter.prototype.pendingBufferWriteBits = function(b, count) {
            var uint = new Uint32Array(1);
            uint[0] = this.pendingBufCache | b << this.pendingBufBitsInCache, this.pendingBufCache = uint[0], 
            this.pendingBufBitsInCache += count, this.pendingBufferFlushBits();
        }, CompressedStreamWriter.prototype.pendingBufferFlush = function(isClose) {
            if (this.pendingBufferFlushBits(), this.pendingBufLength > 0) {
                var array = new Uint8Array(this.pendingBufLength);
                array.set(this.pendingBuffer.subarray(0, this.pendingBufLength), 0), this.stream.push(array);
            }
            this.pendingBufLength = 0;
        }, CompressedStreamWriter.prototype.pendingBufferFlushBits = function() {
            for (var result = 0; this.pendingBufBitsInCache >= 8 && this.pendingBufLength < 65536; ) this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache, 
            this.pendingBufCache >>= 8, this.pendingBufBitsInCache -= 8, result++;
            return result;
        }, CompressedStreamWriter.prototype.pendingBufferWriteByteBlock = function(data, offset, length) {
            var array = data.subarray(offset, offset + length);
            this.pendingBuffer.set(array, this.pendingBufLength), this.pendingBufLength += length;
        }, CompressedStreamWriter.prototype.pendingBufferWriteShort = function(s) {
            this.pendingBuffer[this.pendingBufLength++] = s, this.pendingBuffer[this.pendingBufLength++] = s >> 8;
        }, CompressedStreamWriter.prototype.pendingBufferAlignToByte = function() {
            this.pendingBufBitsInCache > 0 && (this.pendingBuffer[this.pendingBufLength++] = this.pendingBufCache), 
            this.pendingBufCache = 0, this.pendingBufBitsInCache = 0;
        }, CompressedStreamWriter.initHuffmanTree = function() {
            for (var i = 0; i < 144; ) ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(48 + i << 8), 
            ARR_LITERAL_LENGTHS[i++] = 8;
            for (;i < 256; ) ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(256 + i << 7), 
            ARR_LITERAL_LENGTHS[i++] = 9;
            for (;i < 280; ) ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(-256 + i << 9), 
            ARR_LITERAL_LENGTHS[i++] = 7;
            for (;i < 286; ) ARR_LITERAL_CODES[i] = CompressorHuffmanTree.bitReverse(-88 + i << 8), 
            ARR_LITERAL_LENGTHS[i++] = 8;
            for (i = 0; i < 30; i++) ARR_DISTANCE_CODES[i] = CompressorHuffmanTree.bitReverse(i << 11), 
            ARR_DISTANCE_LENGTHS[i] = 5;
        }, CompressedStreamWriter.prototype.close = function() {
            do {
                this.pendingBufferFlush(!0), this.compressData(!0) || (this.pendingBufferFlush(!0), 
                this.pendingBufferAlignToByte(), this.noWrap || (this.pendingBufferWriteShortBytes(this.checkSum >> 16), 
                this.pendingBufferWriteShortBytes(65535 & this.checkSum)), this.pendingBufferFlush(!0));
            } while (this.inputEnd !== this.inputOffset || 0 !== this.pendingBufLength);
        }, CompressedStreamWriter.prototype.destroy = function() {
            this.stream = [], this.stream = void 0, this.pendingBuffer = void 0, this.treeLiteral = void 0, 
            this.treeDistances = void 0, this.treeCodeLengths = void 0, this.arrLiterals = void 0, 
            this.arrDistances = void 0, this.hashHead = void 0, this.hashPrevious = void 0, 
            this.dataWindow = void 0, this.inputBuffer = void 0, this.pendingBufLength = void 0, 
            this.pendingBufCache = void 0, this.pendingBufBitsInCache = void 0, this.bufferPosition = void 0, 
            this.extraBits = void 0, this.currentHash = void 0, this.matchStart = void 0, this.matchLength = void 0, 
            this.matchPrevAvail = void 0, this.blockStart = void 0, this.stringStart = void 0, 
            this.lookAhead = void 0, this.totalBytesIn = void 0, this.inputOffset = void 0, 
            this.inputEnd = void 0, this.windowSize = void 0, this.windowMask = void 0, this.hashSize = void 0, 
            this.hashMask = void 0, this.hashShift = void 0, this.maxDist = void 0, this.checkSum = void 0, 
            this.noWrap = void 0;
        }, CompressedStreamWriter.isHuffmanTreeInitiated = !1, CompressedStreamWriter;
    }(), CompressorHuffmanTree = function() {
        function CompressorHuffmanTree(writer, elementCount, minCodes, maxLength) {
            this.writer = writer, this.codeMinCount = minCodes, this.maxLength = maxLength, 
            this.codeFrequency = new Uint16Array(elementCount), this.lengthCount = new Int32Array(maxLength);
        }
        return Object.defineProperty(CompressorHuffmanTree.prototype, "treeLength", {
            get: function() {
                return this.codeCount;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(CompressorHuffmanTree.prototype, "codeLengths", {
            get: function() {
                return this.codeLength;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(CompressorHuffmanTree.prototype, "codeFrequencies", {
            get: function() {
                return this.codeFrequency;
            },
            enumerable: !0,
            configurable: !0
        }), CompressorHuffmanTree.prototype.setStaticCodes = function(codes, lengths) {
            var temp = new Int16Array(codes.length);
            temp.set(codes, 0), this.codes = temp;
            var lengthTemp = new Uint8Array(lengths.length);
            lengthTemp.set(lengths, 0), this.codeLength = lengthTemp;
        }, CompressorHuffmanTree.prototype.reset = function() {
            for (var i = 0; i < this.codeFrequency.length; i++) this.codeFrequency[i] = 0;
            this.codes = void 0, this.codeLength = void 0;
        }, CompressorHuffmanTree.prototype.writeCodeToStream = function(code) {
            this.writer.pendingBufferWriteBits(65535 & this.codes[code], this.codeLength[code]);
        }, CompressorHuffmanTree.prototype.buildCodes = function() {
            var nextCode = new Int32Array(this.maxLength);
            this.codes = new Int16Array(this.codeCount);
            for (var code = 0, bitsCount = 0; bitsCount < this.maxLength; bitsCount++) nextCode[bitsCount] = code, 
            code += this.lengthCount[bitsCount] << 15 - bitsCount;
            for (var i = 0; i < this.codeCount; i++) {
                var bits = this.codeLength[i];
                bits > 0 && (this.codes[i] = CompressorHuffmanTree.bitReverse(nextCode[bits - 1]), 
                nextCode[bits - 1] += 1 << 16 - bits);
            }
        }, CompressorHuffmanTree.bitReverse = function(value) {
            return CompressorHuffmanTree.reverseBits[15 & value] << 12 | CompressorHuffmanTree.reverseBits[value >> 4 & 15] << 8 | CompressorHuffmanTree.reverseBits[value >> 8 & 15] << 4 | CompressorHuffmanTree.reverseBits[value >> 12];
        }, CompressorHuffmanTree.prototype.getEncodedLength = function() {
            for (var len = 0, i = 0; i < this.codeFrequency.length; i++) len += this.codeFrequency[i] * this.codeLength[i];
            return len;
        }, CompressorHuffmanTree.prototype.calculateBLFreq = function(blTree) {
            for (var maxCount, minCount, count, curLen = -1, i = 0; i < this.codeCount; ) {
                count = 1;
                var nextLen = this.codeLength[i];
                for (0 === nextLen ? (maxCount = 138, minCount = 3) : (maxCount = 6, minCount = 3, 
                curLen !== nextLen && (blTree.codeFrequency[nextLen]++, count = 0)), curLen = nextLen, 
                i++; i < this.codeCount && curLen === this.codeLength[i] && (i++, !(++count >= maxCount)); ) ;
                count < minCount ? blTree.codeFrequency[curLen] += count : 0 !== curLen ? blTree.codeFrequency[16]++ : count <= 10 ? blTree.codeFrequency[17]++ : blTree.codeFrequency[18]++;
            }
        }, CompressorHuffmanTree.prototype.writeTree = function(blTree) {
            for (var maxRepeatCount, minRepeatCount, currentRepeatCount, currentCodeLength = -1, i = 0; i < this.codeCount; ) {
                currentRepeatCount = 1;
                var nextLen = this.codeLength[i];
                for (0 === nextLen ? (maxRepeatCount = 138, minRepeatCount = 3) : (maxRepeatCount = 6, 
                minRepeatCount = 3, currentCodeLength !== nextLen && (blTree.writeCodeToStream(nextLen), 
                currentRepeatCount = 0)), currentCodeLength = nextLen, i++; i < this.codeCount && currentCodeLength === this.codeLength[i] && (i++, 
                !(++currentRepeatCount >= maxRepeatCount)); ) ;
                if (currentRepeatCount < minRepeatCount) for (;currentRepeatCount-- > 0; ) blTree.writeCodeToStream(currentCodeLength); else 0 !== currentCodeLength ? (blTree.writeCodeToStream(16), 
                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 2)) : currentRepeatCount <= 10 ? (blTree.writeCodeToStream(17), 
                this.writer.pendingBufferWriteBits(currentRepeatCount - 3, 3)) : (blTree.writeCodeToStream(18), 
                this.writer.pendingBufferWriteBits(currentRepeatCount - 11, 7));
            }
        }, CompressorHuffmanTree.prototype.buildTree = function() {
            for (var codesCount = this.codeFrequency.length, arrTree = new Int32Array(codesCount), treeLength = 0, maxCount = 0, n = 0; n < codesCount; n++) {
                var freq = this.codeFrequency[n];
                if (0 !== freq) {
                    for (var pos = treeLength++, pPos = 0; pos > 0 && this.codeFrequency[arrTree[pPos = Math.floor((pos - 1) / 2)]] > freq; ) arrTree[pos] = arrTree[pPos], 
                    pos = pPos;
                    arrTree[pos] = n, maxCount = n;
                }
            }
            for (;treeLength < 2; ) arrTree[treeLength++] = maxCount < 2 ? ++maxCount : 0;
            this.codeCount = Math.max(maxCount + 1, this.codeMinCount);
            for (var nodesCount = treeLength, child = new Int32Array(4 * treeLength - 2), values = new Int32Array(2 * treeLength - 1), i = 0; i < treeLength; i++) {
                var node = arrTree[i], iIndex = 2 * i;
                child[iIndex] = node, child[iIndex + 1] = -1, values[i] = this.codeFrequency[node] << 8, 
                arrTree[i] = i;
            }
            this.constructHuffmanTree(arrTree, treeLength, values, nodesCount, child), this.buildLength(child);
        }, CompressorHuffmanTree.prototype.constructHuffmanTree = function(arrTree, treeLength, values, nodesCount, child) {
            do {
                for (var first = arrTree[0], last = arrTree[--treeLength], lastVal = values[last], pPos = 0, path = 1; path < treeLength; ) path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]] && path++, 
                arrTree[pPos] = arrTree[path], path = 2 * (pPos = path) + 1;
                for (;(path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal; ) arrTree[path] = arrTree[pPos];
                arrTree[path] = last;
                var second = arrTree[0];
                child[2 * (last = nodesCount++)] = first, child[2 * last + 1] = second;
                var minDepth = Math.min(255 & values[first], 255 & values[second]);
                for (values[last] = lastVal = values[first] + values[second] - minDepth + 1, pPos = 0, 
                path = 1; path < treeLength; ) path + 1 < treeLength && values[arrTree[path]] > values[arrTree[path + 1]] && path++, 
                arrTree[pPos] = arrTree[path], path = 2 * (pPos = path) + 1;
                for (;(path = pPos) > 0 && values[arrTree[pPos = Math.floor((path - 1) / 2)]] > lastVal; ) arrTree[path] = arrTree[pPos];
                arrTree[path] = last;
            } while (treeLength > 1);
        }, CompressorHuffmanTree.prototype.buildLength = function(child) {
            this.codeLength = new Uint8Array(this.codeFrequency.length);
            for (var numNodes = Math.floor(child.length / 2), numLeafs = Math.floor((numNodes + 1) / 2), overflow = 0, i = 0; i < this.maxLength; i++) this.lengthCount[i] = 0;
            if (0 !== (overflow = this.calculateOptimalCodeLength(child, overflow, numNodes))) {
                var iIncreasableLength = this.maxLength - 1;
                do {
                    for (;0 === this.lengthCount[--iIncreasableLength]; ) ;
                    do {
                        this.lengthCount[iIncreasableLength]--, this.lengthCount[++iIncreasableLength]++, 
                        overflow -= 1 << this.maxLength - 1 - iIncreasableLength;
                    } while (overflow > 0 && iIncreasableLength < this.maxLength - 1);
                } while (overflow > 0);
                this.recreateTree(child, overflow, numLeafs);
            }
        }, CompressorHuffmanTree.prototype.recreateTree = function(child, overflow, numLeafs) {
            this.lengthCount[this.maxLength - 1] += overflow, this.lengthCount[this.maxLength - 2] -= overflow;
            for (var nodePtr = 2 * numLeafs, bits = this.maxLength; 0 !== bits; bits--) for (var n = this.lengthCount[bits - 1]; n > 0; ) {
                var childPtr = 2 * child[nodePtr++];
                -1 === child[childPtr + 1] && (this.codeLength[child[childPtr]] = bits, n--);
            }
        }, CompressorHuffmanTree.prototype.calculateOptimalCodeLength = function(child, overflow, numNodes) {
            var lengths = new Int32Array(numNodes);
            lengths[numNodes - 1] = 0;
            for (var i = numNodes - 1; i >= 0; i--) {
                var childIndex = 2 * i + 1;
                if (-1 !== child[childIndex]) {
                    (bitLength = lengths[i] + 1) > this.maxLength && (bitLength = this.maxLength, overflow++), 
                    lengths[child[childIndex - 1]] = lengths[child[childIndex]] = bitLength;
                } else {
                    var bitLength = lengths[i];
                    this.lengthCount[bitLength - 1]++, this.codeLength[child[childIndex - 1]] = lengths[i];
                }
            }
            return overflow;
        }, CompressorHuffmanTree.reverseBits = [ 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15 ], 
        CompressorHuffmanTree.huffCodeLengthOrders = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ], 
        CompressorHuffmanTree;
    }(), ChecksumCalculator = function() {
        function ChecksumCalculator() {}
        return ChecksumCalculator.checksumUpdate = function(checksum, buffer, offset, length) {
            var uint = new Uint32Array(1);
            uint[0] = checksum;
            for (var checksum_uint = uint[0], s1 = uint[0] = 65535 & checksum_uint, s2 = uint[0] = checksum_uint >> ChecksumCalculator.checkSumBitOffset; length > 0; ) {
                var steps = Math.min(length, ChecksumCalculator.checksumIterationCount);
                for (length -= steps; --steps >= 0; ) s2 += s1 += uint[0] = 255 & buffer[offset++];
                s1 %= ChecksumCalculator.checksumBase, s2 %= ChecksumCalculator.checksumBase;
            }
            return checksum_uint = s2 << ChecksumCalculator.checkSumBitOffset | s1;
        }, ChecksumCalculator.checkSumBitOffset = 16, ChecksumCalculator.checksumBase = 65521, 
        ChecksumCalculator.checksumIterationCount = 3800, ChecksumCalculator;
    }(), CRC32TABLE = [], ZipArchive = function() {
        function ZipArchive() {
            0 === CRC32TABLE.length && ZipArchive.initCrc32Table(), this.files = [], this.level = "Normal", 
            Save.isMicrosoftBrowser = !!navigator.msSaveBlob;
        }
        return Object.defineProperty(ZipArchive.prototype, "compressionLevel", {
            get: function() {
                return this.level;
            },
            set: function(level) {
                this.level = level;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ZipArchive.prototype, "length", {
            get: function() {
                return void 0 === this.files ? 0 : this.files.length;
            },
            enumerable: !0,
            configurable: !0
        }), ZipArchive.prototype.addItem = function(item) {
            if (null === item || void 0 === item) throw new Error("ArgumentException: item cannot be null or undefined");
            for (var i = 0; i < this.files.length; i++) {
                var file = this.files[i];
                if (file instanceof ZipArchiveItem && file.name === item.name) throw new Error("item with same name already exist");
            }
            this.files.push(item);
        }, ZipArchive.prototype.addDirectory = function(directoryName) {
            if (null === directoryName || void 0 === directoryName) throw new Error("ArgumentException: string cannot be null or undefined");
            if (0 === directoryName.length) throw new Error("ArgumentException: string cannot be empty");
            if ("/" !== directoryName.slice(-1) && (directoryName += "/"), -1 !== this.files.indexOf(directoryName)) throw new Error("item with same name already exist");
            this.files.push(directoryName);
        }, ZipArchive.prototype.getItem = function(index) {
            if (index >= 0 && index < this.files.length) return this.files[index];
        }, ZipArchive.prototype.contains = function(item) {
            return -1 !== this.files.indexOf(item);
        }, ZipArchive.prototype.save = function(fileName) {
            if (null === fileName || void 0 === fileName || 0 === fileName.length) throw new Error("ArgumentException: fileName cannot be null or undefined");
            if (0 === this.files.length) throw new Error("InvalidOperation");
            var zipArchive = this;
            return new Promise(function(resolve, reject) {
                zipArchive.saveInternal(fileName, !1).then(function() {
                    resolve(zipArchive);
                });
            });
        }, ZipArchive.prototype.saveAsBlob = function() {
            var zipArchive = this;
            return new Promise(function(resolve, reject) {
                zipArchive.saveInternal("", !0).then(function(blob) {
                    resolve(blob);
                });
            });
        }, ZipArchive.prototype.saveInternal = function(fileName, skipFileSave) {
            var _this = this, zipArchive = this;
            return new Promise(function(resolve, reject) {
                for (var zipData = [], dirLength = 0, i = 0; i < zipArchive.files.length; i++) {
                    _this.getCompressedData(_this.files[i]).then(function(data) {
                        if (dirLength = zipArchive.constructZippedObject(zipData, data, dirLength, data.isDirectory), 
                        zipData.length === zipArchive.files.length) {
                            var blob = zipArchive.writeZippedContent(fileName, zipData, dirLength, skipFileSave);
                            resolve(blob);
                        }
                    });
                }
            });
        }, ZipArchive.prototype.destroy = function() {
            if (void 0 !== this.files && this.files.length > 0) {
                for (var i = 0; i < this.files.length; i++) {
                    var file = this.files[i];
                    file instanceof ZipArchiveItem && file.destroy(), file = void 0;
                }
                this.files = [];
            }
            this.files = void 0, this.level = void 0;
        }, ZipArchive.prototype.getCompressedData = function(item) {
            var zipArchive = this;
            return new Promise(function(resolve, reject) {
                if (item instanceof ZipArchiveItem) {
                    var reader_1 = new FileReader();
                    reader_1.onload = function() {
                        var input = new Uint8Array(reader_1.result), data = {
                            fileName: item.name,
                            crc32Value: 0,
                            compressedData: [],
                            compressedSize: void 0,
                            uncompressedDataSize: input.length,
                            compressionType: void 0,
                            isDirectory: !1
                        };
                        if ("Normal" === zipArchive.level) {
                            zipArchive.compressData(input, data, CRC32TABLE);
                            for (var length_1 = 0, i = 0; i < data.compressedData.length; i++) length_1 += data.compressedData[i].length;
                            data.compressedSize = length_1, data.compressionType = "\b\0";
                        } else data.compressedSize = input.length, data.crc32Value = zipArchive.calculateCrc32Value(0, input, CRC32TABLE), 
                        data.compressionType = "\0\0", data.compressedData.push(input);
                        resolve(data);
                    }, reader_1.readAsArrayBuffer(item.data);
                } else {
                    resolve({
                        fileName: item,
                        crc32Value: 0,
                        compressedData: "",
                        compressedSize: 0,
                        uncompressedDataSize: 0,
                        compressionType: "\0\0",
                        isDirectory: !0
                    });
                }
            });
        }, ZipArchive.prototype.compressData = function(input, data, crc32Table) {
            var compressor = new CompressedStreamWriter(!0), currentIndex = 0, nextIndex = 0;
            do {
                if (currentIndex >= input.length) {
                    compressor.close();
                    break;
                }
                nextIndex = Math.min(input.length, currentIndex + 16384);
                var subArray = input.subarray(currentIndex, nextIndex);
                data.crc32Value = this.calculateCrc32Value(data.crc32Value, subArray, crc32Table), 
                compressor.write(subArray, 0, nextIndex - currentIndex), currentIndex = nextIndex;
            } while (currentIndex <= input.length);
            data.compressedData = compressor.compressedData, compressor.destroy();
        }, ZipArchive.prototype.constructZippedObject = function(zipParts, data, dirLength, isDirectory) {
            var extFileAttr = 0, date = new Date();
            isDirectory && (extFileAttr |= 16), extFileAttr |= 0;
            var header = this.writeHeader(data, date), localHeader = "PK" + header + data.fileName, centralDir = this.writeCentralDirectory(data, header, dirLength, extFileAttr);
            return zipParts.push({
                localHeader: localHeader,
                centralDir: centralDir,
                compressedData: data
            }), dirLength + localHeader.length + data.compressedSize;
        }, ZipArchive.prototype.writeHeader = function(data, date) {
            var zipHeader = "";
            return zipHeader += "\n\0\0\0", zipHeader += data.compressionType, zipHeader += this.getBytes(this.getModifiedTime(date), 2), 
            zipHeader += this.getBytes(this.getModifiedDate(date), 2), zipHeader += this.getBytes(data.crc32Value, 4), 
            zipHeader += this.getBytes(data.compressedSize, 4), zipHeader += this.getBytes(data.uncompressedDataSize, 4), 
            zipHeader += this.getBytes(data.fileName.length, 2), zipHeader += this.getBytes(0, 2);
        }, ZipArchive.prototype.writeZippedContent = function(fileName, zipData, localDirLen, skipFileSave) {
            for (var cenDirLen = 0, buffer = [], i = 0; i < zipData.length; i++) {
                var item = zipData[i];
                for (cenDirLen += item.centralDir.length, buffer.push(this.getArrayBuffer(item.localHeader)); item.compressedData.compressedData.length; ) buffer.push(item.compressedData.compressedData.shift().buffer);
            }
            for (i = 0; i < zipData.length; i++) buffer.push(this.getArrayBuffer(zipData[i].centralDir));
            buffer.push(this.getArrayBuffer(this.writeFooter(zipData, cenDirLen, localDirLen)));
            var blob = new Blob(buffer, {
                type: "application/zip"
            });
            return skipFileSave || Save.save(fileName, blob), blob;
        }, ZipArchive.prototype.writeCentralDirectory = function(data, localHeader, offset, externalFileAttribute) {
            return "PK" + this.getBytes(20, 2) + localHeader + this.getBytes(0, 2) + "\0\0\0\0" + this.getBytes(externalFileAttribute, 4) + this.getBytes(offset, 4) + data.fileName;
        }, ZipArchive.prototype.writeFooter = function(zipData, centralLength, localLength) {
            return "PK\0\0\0\0" + this.getBytes(zipData.length, 2) + this.getBytes(zipData.length, 2) + this.getBytes(centralLength, 4) + this.getBytes(localLength, 4) + this.getBytes(0, 2);
        }, ZipArchive.prototype.getArrayBuffer = function(input) {
            for (var a = new Uint8Array(input.length), j = 0; j < input.length; ++j) a[j] = 255 & input.charCodeAt(j);
            return a.buffer;
        }, ZipArchive.prototype.getBytes = function(value, offset) {
            for (var bytes = "", i = 0; i < offset; i++) bytes += String.fromCharCode(255 & value), 
            value >>>= 8;
            return bytes;
        }, ZipArchive.prototype.getModifiedTime = function(date) {
            var modTime = date.getHours();
            return modTime <<= 6, modTime |= date.getMinutes(), modTime <<= 5, modTime |= date.getSeconds() / 2;
        }, ZipArchive.prototype.getModifiedDate = function(date) {
            var modiDate = date.getFullYear() - 1980;
            return modiDate <<= 4, modiDate |= date.getMonth() + 1, modiDate <<= 5, modiDate |= date.getDate();
        }, ZipArchive.prototype.calculateCrc32Value = function(crc32Value, input, crc32Table) {
            crc32Value ^= -1;
            for (var i = 0; i < input.length; i++) crc32Value = crc32Value >>> 8 ^ crc32Table[255 & (crc32Value ^ input[i])];
            return -1 ^ crc32Value;
        }, ZipArchive.initCrc32Table = function() {
            for (var i, j = 0; j < 256; j++) {
                i = j;
                for (var k = 0; k < 8; k++) i = 1 & i ? 3988292384 ^ i >>> 1 : i >>> 1;
                CRC32TABLE[j] = i;
            }
        }, ZipArchive;
    }(), ZipArchiveItem = function() {
        function ZipArchiveItem(data, itemName) {
            if (null === data || void 0 === data) throw new Error("ArgumentException: data cannot be null or undefined");
            if (null === itemName || void 0 === itemName) throw new Error("ArgumentException: string cannot be null or undefined");
            if (0 === itemName.length) throw new Error("string cannot be empty");
            this.data = data, this.name = itemName;
        }
        return Object.defineProperty(ZipArchiveItem.prototype, "name", {
            get: function() {
                return this.fileName;
            },
            set: function(value) {
                this.fileName = value;
            },
            enumerable: !0,
            configurable: !0
        }), ZipArchiveItem.prototype.destroy = function() {
            this.fileName = void 0, this.data = void 0;
        }, ZipArchiveItem;
    }(), _compression = Object.freeze({
        ZipArchive: ZipArchive,
        ZipArchiveItem: ZipArchiveItem,
        CompressedStreamWriter: CompressedStreamWriter,
        CompressorHuffmanTree: CompressorHuffmanTree,
        ChecksumCalculator: ChecksumCalculator
    }), ValueFormatter$1 = function() {
        function ValueFormatter(cultureName) {
            this.intl = new Internationalization();
        }
        return ValueFormatter.prototype.getFormatFunction = function(format) {
            return format.type ? this.intl.getDateFormat(format) : this.intl.getNumberFormat(format);
        }, ValueFormatter.prototype.toView = function(value, format) {
            var result = value;
            return isNullOrUndefined(format) || isNullOrUndefined(value) || (result = format(value)), 
            result;
        }, ValueFormatter.prototype.displayText = function(value, format) {
            return this.toView(value, this.getFormatFunction(format));
        }, ValueFormatter;
    }(), CsvHelper = function() {
        function CsvHelper(json) {
            if (this.csvStr = "", this.formatter = new ValueFormatter$1(), this.isMicrosoftBrowser = !!navigator.msSaveBlob, 
            null !== json.styles && void 0 !== json.styles) {
                this.globalStyles = new Map();
                for (var i = 0; i < json.styles.length; i++) void 0 !== json.styles[i].name && void 0 !== json.styles[i].numberFormat && this.globalStyles.set(json.styles[i].name, json.styles[i].numberFormat);
            }
            null !== json.worksheets && void 0 !== json.worksheets && this.parseWorksheet(json.worksheets[0]);
        }
        return CsvHelper.prototype.parseWorksheet = function(json) {
            null !== json.rows && void 0 !== json.rows && this.parseRows(json.rows);
        }, CsvHelper.prototype.parseRows = function(rows) {
            for (var count = 1, _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                if (null === row.index || void 0 === row.index) throw Error("Row index is missing.");
                for (;count < row.index; ) this.csvStr += "\n", count++;
                this.parseRow(row);
            }
        }, CsvHelper.prototype.parseRow = function(row) {
            if (null !== row.cells && void 0 !== row.cells) for (var count = 1, _i = 0, _a = row.cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                if (null === cell.index || void 0 === cell.index) throw Error("Cell index is missing.");
                for (;count < cell.index; ) this.csvStr += ",", count++;
                this.parseCell(cell);
            }
        }, CsvHelper.prototype.parseCell = function(cell) {
            var csv = this.csvStr;
            void 0 !== cell.value && (cell.value instanceof Date ? void 0 !== cell.style && void 0 !== cell.style.numberFormat ? csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                skeleton: cell.style.numberFormat
            })) : void 0 !== cell.style && void 0 !== cell.style.name && this.globalStyles.has(cell.style.name) ? csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                type: "dateTime",
                skeleton: this.globalStyles.get(cell.style.name)
            })) : csv += cell.value : "boolean" == typeof cell.value ? csv += cell.value ? "TRUE" : "FALSE" : "number" == typeof cell.value ? void 0 !== cell.style && void 0 !== cell.style.numberFormat ? csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                format: cell.style.numberFormat
            })) : void 0 !== cell.style && void 0 !== cell.style.name && this.globalStyles.has(cell.style.name) ? csv += this.parseCellValue(this.formatter.displayText(cell.value, {
                format: this.globalStyles.get(cell.style.name)
            })) : csv += cell.value : csv += this.parseCellValue(cell.value)), this.csvStr = csv;
        }, CsvHelper.prototype.parseCellValue = function(value) {
            return -1 !== value.indexOf(",") ? value = '"' + value + '"' : value;
        }, CsvHelper.prototype.save = function(fileName) {
            if (this.buffer = new Blob([ "\ufeff" + this.csvStr ], {
                type: "text/csv;charset=UTF-8"
            }), this.isMicrosoftBrowser) navigator.msSaveBlob(this.buffer, fileName); else {
                var dataUrl_1 = window.URL.createObjectURL(this.buffer), dwlLink = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
                dwlLink.download = fileName, dwlLink.href = dataUrl_1;
                var event_1 = document.createEvent("MouseEvent");
                event_1.initEvent("click", !0, !0), dwlLink.dispatchEvent(event_1), setTimeout(function() {
                    window.URL.revokeObjectURL(dataUrl_1);
                });
            }
        }, CsvHelper.prototype.saveAsBlob = function() {
            return new Blob([ "\ufeff" + this.csvStr ], {
                type: "text/csv;charset=UTF-8"
            });
        }, CsvHelper;
    }(), BlobHelper = function() {
        function BlobHelper() {
            this.parts = [];
        }
        return BlobHelper.prototype.append = function(part) {
            this.parts.push(part), this.blob = void 0;
        }, BlobHelper.prototype.getBlob = function() {
            return new Blob(this.parts, {
                type: "text/plain"
            });
        }, BlobHelper;
    }(), Workbook = function() {
        function Workbook(json, saveType, culture, currencyString) {
            if (this.sharedStringCount = 0, this.unitsProportions = [ 1.28, .32, 96, 96 / 25.4, 96 / 2.54, 1, 96 / 72, 96 / 72 / 12700 ], 
            this.hyperlinkStyle = {
                fontColor: "#0000FF",
                underline: !0
            }, this.culture = void 0 !== culture ? culture : "en-US", this.currency = void 0 !== currencyString ? currencyString : "USD", 
            this.intl = new Internationalization(this.culture), this.mSaveType = saveType, "xlsx" === saveType) {
                if (this.mArchive = new ZipArchive(), this.sharedString = [], this.mFonts = [], 
                this.mBorders = [], this.mStyles = [], this.printTitles = new Map(), this.cellStyles = new Map(), 
                this.mNumFmt = new Map(), this.mFills = new Map(), this.mStyles.push(new CellStyle()), 
                this.mFonts.push(new Font()), this.cellStyles.set("Normal", new CellStyles()), this.mCellXfs = [], 
                this.mCellStyleXfs = [], null !== json.styles && void 0 !== json.styles) {
                    this.globalStyles = new Map();
                    for (var i = 0; i < json.styles.length; i++) if (void 0 !== json.styles[i].name) {
                        if (this.cellStyles.has(json.styles[i].name)) throw Error("Style name " + json.styles[i].name + " is already existed");
                        var cellStyle = new CellStyle();
                        cellStyle.isGlobalStyle = !0, this.parserCellStyle(json.styles[i], cellStyle, "none");
                        var cellStylesIn = new CellStyles();
                        cellStylesIn.name = cellStyle.name, cellStylesIn.xfId = cellStyle.index - 1, this.cellStyles.set(cellStylesIn.name, cellStylesIn);
                        var tFormat = {};
                        void 0 !== json.styles[i].numberFormat && (tFormat.format = json.styles[i].numberFormat), 
                        void 0 !== json.styles[i].type ? tFormat.type = json.styles[i].type : tFormat.type = "datetime", 
                        void 0 !== tFormat.format && this.globalStyles.set(json.styles[i].name, tFormat);
                    }
                }
                if (null === json.worksheets || void 0 === json.worksheets) throw Error("Worksheet is expected.");
                this.parserWorksheets(json.worksheets), null !== json.builtInProperties && void 0 !== json.builtInProperties && (this.builtInProperties = new BuiltInProperties(), 
                this.parserBuiltInProperties(json.builtInProperties, this.builtInProperties));
            } else this.csvHelper = new CsvHelper(json);
        }
        return Workbook.prototype.parserBuiltInProperties = function(jsonBuiltInProperties, builtInProperties) {
            null !== jsonBuiltInProperties.author && void 0 !== jsonBuiltInProperties.author && (builtInProperties.author = jsonBuiltInProperties.author), 
            null !== jsonBuiltInProperties.comments && void 0 !== jsonBuiltInProperties.comments && (builtInProperties.comments = jsonBuiltInProperties.comments), 
            null !== jsonBuiltInProperties.category && void 0 !== jsonBuiltInProperties.category && (builtInProperties.category = jsonBuiltInProperties.category), 
            null !== jsonBuiltInProperties.company && void 0 !== jsonBuiltInProperties.company && (builtInProperties.company = jsonBuiltInProperties.company), 
            null !== jsonBuiltInProperties.manager && void 0 !== jsonBuiltInProperties.manager && (builtInProperties.manager = jsonBuiltInProperties.manager), 
            null !== jsonBuiltInProperties.subject && void 0 !== jsonBuiltInProperties.subject && (builtInProperties.subject = jsonBuiltInProperties.subject), 
            null !== jsonBuiltInProperties.title && void 0 !== jsonBuiltInProperties.title && (builtInProperties.title = jsonBuiltInProperties.title), 
            null !== jsonBuiltInProperties.createdDate && void 0 !== jsonBuiltInProperties.createdDate && (builtInProperties.createdDate = jsonBuiltInProperties.createdDate), 
            null !== jsonBuiltInProperties.modifiedDate && void 0 !== jsonBuiltInProperties.modifiedDate && (builtInProperties.modifiedDate = jsonBuiltInProperties.modifiedDate), 
            null !== jsonBuiltInProperties.tags && void 0 !== jsonBuiltInProperties.tags && (builtInProperties.tags = jsonBuiltInProperties.tags), 
            null !== jsonBuiltInProperties.status && void 0 !== jsonBuiltInProperties.status && (builtInProperties.status = jsonBuiltInProperties.status);
        }, Workbook.prototype.parserWorksheets = function(json) {
            this.worksheets = new Worksheets();
            for (var length = json.length, i = 0; i < length; i++) {
                var jsonSheet = json[i], sheet = new Worksheet();
                this.mergeCells = new MergeCells(), this.mergedCellsStyle = new Map(), this.mHyperLinks = [], 
                null !== jsonSheet.name && void 0 !== jsonSheet.name ? sheet.name = jsonSheet.name : sheet.name = "Sheet" + (i + 1).toString(), 
                sheet.index = i + 1, null !== jsonSheet.columns && void 0 !== jsonSheet.columns && this.parserColumns(jsonSheet.columns, sheet), 
                null !== jsonSheet.rows && void 0 !== jsonSheet.rows && this.parserRows(jsonSheet.rows, sheet), 
                null !== jsonSheet.showGridLines && void 0 !== jsonSheet.showGridLines && (sheet.showGridLines = jsonSheet.showGridLines), 
                null !== jsonSheet.freeze && void 0 !== jsonSheet.freeze && this.parserFreezePanes(jsonSheet.freeze, sheet), 
                null !== jsonSheet.printTitle && void 0 !== jsonSheet.printTitle && this.parserPrintTitle(jsonSheet.printTitle, sheet), 
                void 0 !== jsonSheet.pageSetup && void 0 !== jsonSheet.pageSetup.isSummaryRowBelow && (sheet.isSummaryRowBelow = jsonSheet.pageSetup.isSummaryRowBelow), 
                sheet.index = i + 1, sheet.mergeCells = this.mergeCells, sheet.hyperLinks = this.mHyperLinks, 
                this.worksheets.push(sheet);
            }
        }, Workbook.prototype.mergeOptions = function(fromJson, toJson) {
            var result = {};
            return this.applyProperties(fromJson, result), this.applyProperties(toJson, result), 
            result;
        }, Workbook.prototype.applyProperties = function(sourceJson, destJson) {
            for (var keys = Object.keys(sourceJson), index = 0; index < keys.length; index++) "name" !== keys[index] && (destJson[keys[index]] = sourceJson[keys[index]]);
        }, Workbook.prototype.getCellName = function(row, column) {
            return this.getColumnName(column) + row.toString();
        }, Workbook.prototype.getColumnName = function(col) {
            col--;
            var strColumnName = "";
            do {
                var iCurrentDigit = col % 26;
                col = col / 26 - 1, strColumnName = String.fromCharCode(65 + iCurrentDigit) + strColumnName;
            } while (col >= 0);
            return strColumnName;
        }, Workbook.prototype.parserPrintTitle = function(json, sheet) {
            var titleRowName, printTitleName = "";
            if (null !== json.fromRow && void 0 !== json.fromRow) {
                titleRowName = "$" + json.fromRow + ":$" + (null !== json.toRow && void 0 !== json.toRow ? json.toRow : json.fromRow);
            }
            var titleColName;
            if (null !== json.fromColumn && void 0 !== json.fromColumn) {
                var fromColumn = json.fromColumn, toColumn = void 0;
                toColumn = null !== json.toColumn && void 0 !== json.toColumn ? json.toColumn : json.fromColumn, 
                titleColName = "$" + this.getColumnName(fromColumn) + ":$" + this.getColumnName(toColumn);
            }
            void 0 !== titleRowName && (printTitleName += sheet.name + "!" + titleRowName), 
            void 0 !== titleColName && void 0 !== titleRowName ? printTitleName += "," + sheet.name + "!" + titleColName : void 0 !== titleColName && (printTitleName += sheet.name + "!" + titleColName), 
            "" !== printTitleName && this.printTitles.set(sheet.index - 1, printTitleName);
        }, Workbook.prototype.parserFreezePanes = function(json, sheet) {
            sheet.freezePanes = new FreezePane(), null !== json.row && void 0 !== json.row ? sheet.freezePanes.row = json.row : sheet.freezePanes.row = 0, 
            null !== json.column && void 0 !== json.column ? sheet.freezePanes.column = json.column : sheet.freezePanes.column = 0, 
            sheet.freezePanes.leftCell = this.getCellName(sheet.freezePanes.row + 1, sheet.freezePanes.column + 1);
        }, Workbook.prototype.parserColumns = function(json, sheet) {
            var columnsLength = json.length;
            sheet.columns = [];
            for (var column = 0; column < columnsLength; column++) {
                var col = new Column$1();
                if (null === json[column].index || void 0 === json[column].index) throw Error("Column index is missing.");
                col.index = json[column].index, null !== json[column].width && void 0 !== json[column].width && (col.width = json[column].width), 
                sheet.columns.push(col);
            }
        }, Workbook.prototype.parserRows = function(json, sheet) {
            var rowsLength = json.length;
            sheet.rows = new Rows();
            for (var rowId = 0, r = 0; r < rowsLength; r++) {
                var row = this.parserRow(json[r], rowId);
                rowId = row.index, sheet.rows.add(row);
            }
            this.insertMergedCellsStyle(sheet);
        }, Workbook.prototype.insertMergedCellsStyle = function(sheet) {
            var _this = this;
            this.mergeCells.length > 0 && this.mergedCellsStyle.forEach(function(value, key) {
                var row = sheet.rows.filter(function(item) {
                    return item.index === value.y;
                })[0];
                if (isNullOrUndefined(row)) {
                    var rows = sheet.rows.filter(function(item) {
                        return item.index <= value.y;
                    }), rowToInsert = new Row$1();
                    rowToInsert.index = value.y, rowToInsert.cells = new Cells(), rowToInsert.cells.add(_this.createCell(value, key));
                    insertIndex = 0;
                    rows.length > 0 && (insertIndex = sheet.rows.indexOf(rows[rows.length - 1]) + 1), 
                    sheet.rows.splice(insertIndex, 0, rowToInsert);
                } else {
                    var cell = row.cells.filter(function(item) {
                        return item.index === value.x;
                    })[0];
                    if (isNullOrUndefined(cell)) {
                        var cells = row.cells.filter(function(item) {
                            return item.index <= value.x;
                        }), insertIndex = 0;
                        cells.length > 0 && (insertIndex = row.cells.indexOf(cells[cells.length - 1]) + 1), 
                        row.cells.splice(insertIndex, 0, _this.createCell(value, key));
                    } else cell.styleIndex = value.styleIndex;
                }
            });
        }, Workbook.prototype.createCell = function(value, key) {
            var cellToInsert = new Cell$1();
            return cellToInsert.refName = key, cellToInsert.index = value.x, cellToInsert.cellStyle = new CellStyle(), 
            cellToInsert.styleIndex = value.styleIndex, cellToInsert;
        }, Workbook.prototype.parserRow = function(json, rowIndex) {
            var row = new Row$1();
            if (null !== json.height && void 0 !== json.height && (row.height = json.height), 
            null === json.index || void 0 === json.index) throw Error("Row index is missing.");
            return row.index = json.index, null !== json.grouping && void 0 !== json.grouping && this.parseGrouping(json.grouping, row), 
            this.parseCells(json.cells, row), row;
        }, Workbook.prototype.parseGrouping = function(json, row) {
            row.grouping = new Grouping(), void 0 !== json.outlineLevel && (row.grouping.outlineLevel = json.outlineLevel), 
            void 0 !== json.isCollapsed && (row.grouping.isCollapsed = json.isCollapsed), void 0 !== json.isHidden && (row.grouping.isHidden = json.isHidden);
        }, Workbook.prototype.parseCells = function(json, row) {
            row.cells = new Cells();
            for (var cellsLength = void 0 !== json ? json.length : 0, spanMin = 1, spanMax = 1, cellId = 0; cellId < cellsLength; cellId++) {
                var jsonCell = json[cellId], cell = new Cell$1();
                if (null === jsonCell.index || void 0 === jsonCell.index) throw Error("Cell index is missing.");
                if (cell.index = jsonCell.index, cell.index < spanMin ? spanMin = cell.index : cell.index > spanMax && (spanMax = cell.index), 
                cell.refName = this.getCellName(row.index, cell.index), null !== jsonCell.rowSpan && void 0 !== jsonCell.rowSpan ? cell.rowSpan = jsonCell.rowSpan - 1 : cell.rowSpan = 0, 
                null !== jsonCell.colSpan && void 0 !== jsonCell.colSpan ? cell.colSpan = jsonCell.colSpan - 1 : cell.colSpan = 0, 
                null !== jsonCell.hyperlink && void 0 !== jsonCell.hyperlink) {
                    var hyperLink = new HyperLink();
                    void 0 !== jsonCell.hyperlink.target && (hyperLink.target = jsonCell.hyperlink.target, 
                    void 0 !== jsonCell.hyperlink.displayText ? cell.value = jsonCell.hyperlink.displayText : cell.value = jsonCell.hyperlink.target, 
                    cell.type = this.getCellValueType(cell.value), hyperLink.ref = cell.refName, hyperLink.rId = this.mHyperLinks.length + 1, 
                    this.mHyperLinks.push(hyperLink), cell.cellStyle = new CellStyle(), this.parserCellStyle(void 0 !== jsonCell.style ? this.mergeOptions(jsonCell.style, this.hyperlinkStyle) : this.hyperlinkStyle, cell.cellStyle, "string"), 
                    cell.styleIndex = cell.cellStyle.index);
                }
                null !== jsonCell.value && void 0 !== jsonCell.value && (cell.value = jsonCell.value, 
                cell.type = this.getCellValueType(cell.value)), null !== jsonCell.style && void 0 !== jsonCell.style && void 0 === cell.styleIndex ? (cell.cellStyle = new CellStyle(), 
                cell.value instanceof Date ? this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type, 14) : this.parserCellStyle(jsonCell.style, cell.cellStyle, cell.type), 
                cell.styleIndex = cell.cellStyle.index) : cell.value instanceof Date && (cell.cellStyle = new CellStyle(), 
                this.parserCellStyle({}, cell.cellStyle, cell.type, 14), cell.styleIndex = cell.cellStyle.index), 
                this.parseCellType(cell), this.mergeCells = this.processMergeCells(cell, row.index, this.mergeCells), 
                row.cells.add(cell);
            }
            row.spans = spanMin + ":" + spanMax;
        }, Workbook.prototype.applyGlobalStyle = function(json, cellStyle) {
            this.cellStyles.has(json.name) && (cellStyle.index = this.mStyles.filter(function(a) {
                return a.name === json.name;
            })[0].index, cellStyle.name = json.name);
        }, Workbook.prototype.parserCellStyle = function(json, cellStyle, cellType, defStyleIndex) {
            if (null !== json.name && void 0 !== json.name) {
                if (!cellStyle.isGlobalStyle) return void this.applyGlobalStyle(json, cellStyle);
                cellStyle.name = json.name;
            }
            null !== json.backColor && void 0 !== json.backColor && (cellStyle.backColor = json.backColor), 
            cellStyle.borders = new Borders(), null !== json.borders && void 0 !== json.borders && this.parserBorder(json.borders, cellStyle.borders.all), 
            null !== json.leftBorder && void 0 !== json.leftBorder && this.parserBorder(json.leftBorder, cellStyle.borders.left), 
            null !== json.rightBorder && void 0 !== json.rightBorder && this.parserBorder(json.rightBorder, cellStyle.borders.right), 
            null !== json.topBorder && void 0 !== json.topBorder && this.parserBorder(json.topBorder, cellStyle.borders.top), 
            null !== json.bottomBorder && void 0 !== json.bottomBorder && this.parserBorder(json.bottomBorder, cellStyle.borders.bottom), 
            null !== json.fontName && void 0 !== json.fontName && (cellStyle.fontName = json.fontName), 
            null !== json.fontSize && void 0 !== json.fontSize && (cellStyle.fontSize = json.fontSize), 
            null !== json.fontColor && void 0 !== json.fontColor && (cellStyle.fontColor = json.fontColor), 
            null !== json.italic && void 0 !== json.italic && (cellStyle.italic = json.italic), 
            null !== json.bold && void 0 !== json.bold && (cellStyle.bold = json.bold), null !== json.hAlign && void 0 !== json.hAlign && (cellStyle.hAlign = json.hAlign), 
            null !== json.indent && void 0 !== json.indent && (cellStyle.indent = json.indent, 
            "left" !== cellStyle.hAlign && "right" !== cellStyle.hAlign && (cellStyle.hAlign = "left")), 
            null !== json.vAlign && void 0 !== json.vAlign && (cellStyle.vAlign = json.vAlign), 
            null !== json.underline && void 0 !== json.underline && (cellStyle.underline = json.underline), 
            null !== json.wrapText && void 0 !== json.wrapText && (cellStyle.wrapText = json.wrapText), 
            null !== json.numberFormat && void 0 !== json.numberFormat ? null !== json.type && void 0 !== json.type ? cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, json.type) : cellStyle.numberFormat = this.getNumberFormat(json.numberFormat, cellType) : void 0 !== defStyleIndex ? (cellStyle.numFmtId = 14, 
            cellStyle.numberFormat = "GENERAL") : cellStyle.numberFormat = "GENERAL", cellStyle.index = this.processCellStyle(cellStyle);
        }, Workbook.prototype.switchNumberFormat = function(numberFormat, type) {
            var format = this.getNumberFormat(numberFormat, type);
            if (format !== numberFormat) {
                var numFmt = this.mNumFmt.get(numberFormat);
                if (void 0 !== numFmt && (numFmt.formatCode = format, this.mNumFmt.has(format))) {
                    for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
                        var cellStyleXfs = _a[_i];
                        cellStyleXfs.numFmtId === numFmt.numFmtId && (cellStyleXfs.numFmtId = this.mNumFmt.get(format).numFmtId);
                    }
                    for (var _b = 0, _c = this.mCellXfs; _b < _c.length; _b++) {
                        var cellXfs = _c[_b];
                        cellXfs.numFmtId === numFmt.numFmtId && (cellXfs.numFmtId = this.mNumFmt.get(format).numFmtId);
                    }
                }
            }
        }, Workbook.prototype.getNumberFormat = function(numberFormat, type) {
            var returnFormat;
            switch (type) {
              case "number":
                try {
                    returnFormat = this.intl.getNumberPattern({
                        format: numberFormat,
                        currency: this.currency
                    });
                } catch (error) {
                    returnFormat = numberFormat;
                }
                break;

              case "datetime":
                try {
                    returnFormat = this.intl.getDatePattern({
                        skeleton: numberFormat,
                        type: "dateTime"
                    }, !0);
                } catch (error) {
                    returnFormat = numberFormat;
                }
                break;

              case "date":
                try {
                    returnFormat = this.intl.getDatePattern({
                        skeleton: numberFormat,
                        type: "date"
                    }, !0);
                } catch (error) {
                    returnFormat = numberFormat;
                }
                break;

              case "time":
                try {
                    returnFormat = this.intl.getDatePattern({
                        skeleton: numberFormat,
                        type: "time"
                    }, !0);
                } catch (error) {
                    returnFormat = numberFormat;
                }
                break;

              default:
                returnFormat = numberFormat;
            }
            return returnFormat;
        }, Workbook.prototype.parserBorder = function(json, border) {
            null !== json.color && void 0 !== json.color ? border.color = json.color : border.color = "#000000", 
            null !== json.lineStyle && void 0 !== json.lineStyle ? border.lineStyle = json.lineStyle : border.lineStyle = "thin";
        }, Workbook.prototype.processCellStyle = function(style) {
            if (style.isGlobalStyle) return this.processNumFormatId(style), this.mStyles.push(style), 
            this.mStyles.length;
            var compareResult = this.compareStyle(style);
            return compareResult.result ? compareResult.index : (this.processNumFormatId(style), 
            this.mStyles.push(style), this.mStyles.length);
        }, Workbook.prototype.processNumFormatId = function(style) {
            if ("GENERAL" !== style.numberFormat && !this.mNumFmt.has(style.numberFormat)) {
                var id = this.mNumFmt.size + 164;
                this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat));
            }
        }, Workbook.prototype.isNewFont = function(toCompareStyle) {
            for (var result = !1, index = 0, _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
                var font = _a[_i];
                index++;
                var fontColor = void 0;
                if (void 0 !== toCompareStyle.fontColor && (fontColor = "FF" + toCompareStyle.fontColor.replace("#", "")), 
                result = font.color === fontColor && font.b === toCompareStyle.bold && font.i === toCompareStyle.italic && font.u === toCompareStyle.underline && font.name === toCompareStyle.fontName && font.sz === toCompareStyle.fontSize) break;
            }
            return index -= 1, {
                index: index,
                result: result
            };
        }, Workbook.prototype.isNewBorder = function(toCompareStyle) {
            var bStyle = new CellStyle();
            return this.isAllBorder(toCompareStyle.borders) ? bStyle.borders.all.color === toCompareStyle.borders.all.color && bStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle : bStyle.borders.left.color === toCompareStyle.borders.left.color && bStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && bStyle.borders.right.color === toCompareStyle.borders.right.color && bStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && bStyle.borders.top.color === toCompareStyle.borders.top.color && bStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && bStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && bStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle;
        }, Workbook.prototype.isAllBorder = function(toCompareBorder) {
            var allBorderStyle = new CellStyle();
            return allBorderStyle.borders.all.color !== toCompareBorder.all.color && allBorderStyle.borders.all.lineStyle !== toCompareBorder.all.lineStyle;
        }, Workbook.prototype.compareStyle = function(toCompareStyle) {
            for (var result = !0, index = 0, _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
                var baseStyle = _a[_i];
                if (result = !baseStyle.isGlobalStyle && (baseStyle.backColor === toCompareStyle.backColor && baseStyle.bold === toCompareStyle.bold && baseStyle.numFmtId === toCompareStyle.numFmtId && baseStyle.numberFormat === toCompareStyle.numberFormat && baseStyle.type === toCompareStyle.type && baseStyle.fontColor === toCompareStyle.fontColor && baseStyle.fontName === toCompareStyle.fontName && baseStyle.fontSize === toCompareStyle.fontSize && baseStyle.hAlign === toCompareStyle.hAlign && baseStyle.italic === toCompareStyle.italic && baseStyle.underline === toCompareStyle.underline && baseStyle.vAlign === toCompareStyle.vAlign && baseStyle.indent === toCompareStyle.indent && baseStyle.wrapText === toCompareStyle.wrapText && baseStyle.borders.all.color === toCompareStyle.borders.all.color && baseStyle.borders.all.lineStyle === toCompareStyle.borders.all.lineStyle && baseStyle.borders.left.color === toCompareStyle.borders.left.color && baseStyle.borders.left.lineStyle === toCompareStyle.borders.left.lineStyle && baseStyle.borders.right.color === toCompareStyle.borders.right.color && baseStyle.borders.right.lineStyle === toCompareStyle.borders.right.lineStyle && baseStyle.borders.top.color === toCompareStyle.borders.top.color && baseStyle.borders.top.lineStyle === toCompareStyle.borders.top.lineStyle && baseStyle.borders.bottom.color === toCompareStyle.borders.bottom.color && baseStyle.borders.bottom.lineStyle === toCompareStyle.borders.bottom.lineStyle)) {
                    index = baseStyle.index;
                    break;
                }
            }
            return {
                index: index,
                result: result
            };
        }, Workbook.prototype.contains = function(array, item) {
            var index = array.indexOf(item);
            return index > -1 && index < array.length;
        }, Workbook.prototype.getCellValueType = function(value) {
            return value instanceof Date ? "datetime" : "boolean" == typeof value ? "boolean" : "number" == typeof value ? "number" : "string";
        }, Workbook.prototype.parseCellType = function(cell) {
            var saveType, type = cell.type, value = cell.value;
            switch (type) {
              case "datetime":
                if (value = this.toOADate(value), void 0 !== cell.cellStyle && void 0 !== cell.cellStyle.name && this.globalStyles.has(cell.cellStyle.name)) {
                    var value_1 = this.globalStyles.get(cell.cellStyle.name);
                    this.switchNumberFormat(value_1.format, value_1.type);
                }
                saveType = "n";
                break;

              case "boolean":
                value = value ? 1 : 0, saveType = "b";
                break;

              case "number":
                saveType = "n", void 0 !== cell.cellStyle && void 0 !== cell.cellStyle.name && this.globalStyles.has(cell.cellStyle.name) && this.switchNumberFormat(this.globalStyles.get(cell.cellStyle.name).format, "number");
                break;

              case "string":
                this.sharedStringCount++, saveType = "s", this.contains(this.sharedString, value) || this.sharedString.push(value), 
                value = this.sharedString.indexOf(value);
            }
            cell.saveType = saveType, cell.value = value;
        }, Workbook.prototype.saveAsBlob = function(blobSaveType) {
            var _this = this;
            switch (blobSaveType) {
              case "text/csv":
                return new Promise(function(resolve, reject) {
                    var obj = {};
                    obj.blobData = _this.csvHelper.saveAsBlob(), resolve(obj);
                });

              default:
                return new Promise(function(resolve, reject) {
                    _this.saveInternal(), _this.mArchive.saveAsBlob().then(function(blob) {
                        var obj = {};
                        obj.blobData = new Blob([ blob ], {
                            type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        }), resolve(obj);
                    });
                });
            }
        }, Workbook.prototype.save = function(fileName, proxyUrl) {
            var _this = this;
            if (null === fileName || void 0 === fileName || "" === fileName) throw new Error("Argument Null Exception: fileName cannot be null or empty");
            var xlsxMatch = fileName.match(".xlsx$"), csvMatch = fileName.match(".csv$");
            if (null !== xlsxMatch && xlsxMatch[0] === "." + this.mSaveType) this.saveInternal(), 
            this.mArchive.save(fileName).then(function() {
                _this.mArchive.destroy();
            }); else {
                if (null === csvMatch || csvMatch[0] !== "." + this.mSaveType) throw Error("Save type and file extension is different.");
                this.csvHelper.save(fileName);
            }
        }, Workbook.prototype.saveInternal = function() {
            this.saveWorkbook(), this.saveWorksheets(), this.saveSharedString(), this.saveStyles(), 
            this.saveApp(this.builtInProperties), this.saveCore(this.builtInProperties), this.saveContentType(), 
            this.saveTopLevelRelation(), this.saveWorkbookRelation();
        }, Workbook.prototype.saveWorkbook = function() {
            for (var workbookTemp = '<?xml version="1.0" encoding="utf-8"?><workbook xmlns:r = "http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns= "http://schemas.openxmlformats.org/spreadsheetml/2006/main"><workbookPr codeName="ThisWorkbook" defaultThemeVersion= "153222"/><bookViews><workbookView activeTab="0"/></bookViews>', sheets = "<sheets>", length = this.worksheets.length, i = 0; i < length; i++) sheets += '<sheet name="' + this.worksheets[i].name + '" sheetId="' + (i + 1).toString() + '" r:id ="rId' + (i + 1).toString() + '" />';
            if (sheets += "</sheets>", workbookTemp += sheets, this.printTitles.size > 0) {
                var printTitle_1 = "<definedNames>";
                this.printTitles.forEach(function(value, key) {
                    printTitle_1 += '<definedName name="_xlnm.Print_Titles" localSheetId="' + key + '">' + value + "</definedName>";
                }), workbookTemp += printTitle_1 += "</definedNames>";
            }
            this.addToArchive(workbookTemp + "</workbook>", "xl/workbook.xml");
        }, Workbook.prototype.saveWorksheets = function() {
            for (var length = this.worksheets.length, i = 0; i < length; i++) this.saveWorksheet(this.worksheets[i], i);
        }, Workbook.prototype.saveWorksheet = function(sheet, index) {
            var sheetBlob = new BlobHelper(), sheetString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><worksheet xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:x14="http://schemas.microsoft.com/office/spreadsheetml/2009/9/main" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
            if (sheet.isSummaryRowBelow ? sheetString += "<sheetPr />" : sheetString += '<sheetPr><outlinePr summaryBelow="0" ></outlinePr></sheetPr>', 
            sheetString += this.saveSheetView(sheet), void 0 !== sheet.columns) {
                for (var colString = "<cols>", _i = 0, _a = sheet.columns; _i < _a.length; _i++) {
                    var column = _a[_i];
                    void 0 !== column.width ? colString += '<col min="' + column.index + '" max="' + column.index + '" width="' + this.pixelsToColumnWidth(column.width) + '" customWidth="1" />' : colString += '<col min="' + column.index + '" max="' + column.index + '" width="8.43" customWidth="1" />';
                }
                sheetString += colString + "</cols>";
            }
            if (sheetString += "<sheetData>", sheetBlob.append(sheetString), sheetString = "", 
            void 0 !== sheet.rows) for (var _b = 0, _c = sheet.rows; _b < _c.length; _b++) {
                var row = _c[_b], rowString = '<row r="' + row.index + '" ';
                isNullOrUndefined(row.spans) || (rowString += 'spans="' + row.spans + '" '), void 0 !== row.height && (rowString += 'ht="' + this.pixelsToRowHeight(row.height) + '" customHeight="1" '), 
                void 0 !== row.grouping && (row.grouping.isHidden && (rowString += 'hidden="1" '), 
                void 0 !== row.grouping.outlineLevel && (rowString += 'outlineLevel="' + row.grouping.outlineLevel + '" '), 
                row.grouping.isCollapsed && (rowString += 'collapsed="1" ')), rowString += ">";
                for (var _d = 0, _e = row.cells; _d < _e.length; _d++) {
                    var cell = _e[_d];
                    void 0 === cell || void 0 === cell.value && void 0 === cell.cellStyle || (rowString += '<c r="' + cell.refName + '" ', 
                    void 0 !== cell.saveType && (rowString += 't="' + cell.saveType + '" '), void 0 !== cell.styleIndex && (rowString += 's="' + cell.styleIndex + '" '), 
                    rowString += " >", void 0 !== cell.value ? rowString += "<v>" + cell.value + "</v></c>" : rowString += "</c>");
                }
                rowString += "</row>", sheetBlob.append(rowString);
            }
            if (sheetString += "</sheetData>", sheet.mergeCells.length > 0) {
                sheetString += '<mergeCells count="' + sheet.mergeCells.length + '">';
                for (var _f = 0, _g = sheet.mergeCells; _f < _g.length; _f++) {
                    sheetString += '<mergeCell ref="' + _g[_f].ref + '" />';
                }
                sheetString += "</mergeCells>";
            }
            if (sheet.hyperLinks.length > 0) {
                sheetString += "<hyperlinks>";
                for (var _h = 0, _j = sheet.hyperLinks; _h < _j.length; _h++) {
                    var hLink = _j[_h];
                    sheetString += '<hyperlink ref="' + hLink.ref + '" r:id="rId' + hLink.rId + '" />';
                }
                sheetString += "</hyperlinks>", this.addToArchive(this.saveSheetRelations(sheet), "xl/worksheets/_rels/sheet" + sheet.index + ".xml.rels");
            }
            sheetString += '<pageMargins left="0.75" right="0.75" top="1" bottom="1" header="0.5" footer="0.5" /><headerFooter scaleWithDoc="1" alignWithMargins="0" differentFirst="0" differentOddEven="0" /></worksheet>', 
            sheetBlob.append(sheetString), this.addToArchive(sheetBlob.getBlob(), "xl/worksheets/sheet" + (index + 1) + ".xml");
        }, Workbook.prototype.pixelsToColumnWidth = function(pixels) {
            var val = pixels > 12 ? this.trunc((pixels - 5) / 7 * 100 + .5) / 100 : pixels / 12;
            return val > 1 ? (7 * val + 5) / 7 * 256 / 256 : 12 * val / 7 * 256 / 256;
        }, Workbook.prototype.trunc = function(x) {
            var n = x - x % 1;
            return 0 === n && (x < 0 || 0 === x && 1 / x != 1 / 0) ? -0 : n;
        }, Workbook.prototype.pixelsToRowHeight = function(pixels) {
            return pixels * this.unitsProportions[5] / this.unitsProportions[6];
        }, Workbook.prototype.saveSheetRelations = function(sheet) {
            for (var relStr = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">', _i = 0, _a = sheet.hyperLinks; _i < _a.length; _i++) {
                var hLink = _a[_i];
                relStr += '<Relationship Id="rId' + hLink.rId + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" Target="' + hLink.target + '" TargetMode="External" />';
            }
            return relStr += "</Relationships>";
        }, Workbook.prototype.saveSheetView = function(sheet) {
            var paneString = '<sheetViews><sheetView workbookViewId="0" ';
            return !1 === sheet.showGridLines ? paneString += 'showGridLines="0" >' : paneString += ">", 
            void 0 !== sheet.freezePanes && (paneString += '<pane state="frozen" topLeftCell="' + sheet.freezePanes.leftCell + '" ', 
            0 !== sheet.freezePanes.row && (paneString += 'ySplit="' + sheet.freezePanes.row + '" '), 
            0 !== sheet.freezePanes.column && (paneString += 'xSplit="' + sheet.freezePanes.column + '" '), 
            paneString += "/>"), paneString += "</sheetView></sheetViews > ";
        }, Workbook.prototype.saveSharedString = function() {
            var length = this.sharedString.length;
            if (length > 0) {
                for (var sstStart = '<?xml version="1.0" encoding="utf-8"?><sst uniqueCount="' + length + '" count="' + this.sharedStringCount + '" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">', si = "", i = 0; i < length; i++) si += "<si><t>", 
                si += this.processString(this.sharedString[i]), si += "</t></si>";
                si += "</sst>", this.addToArchive(sstStart + si, "xl/sharedStrings.xml");
            }
        }, Workbook.prototype.processString = function(value) {
            return -1 !== value.indexOf("&") && (value = value.replace(/&/g, "&amp;")), -1 !== value.indexOf("<") && (value = value.replace(/</g, "&lt;")), 
            -1 !== value.indexOf(">") && (value = value.replace(/>/g, "&gt;")), value;
        }, Workbook.prototype.saveStyles = function() {
            this.updateCellXfsStyleXfs();
            var styleTemp = '<?xml version="1.0" encoding="utf-8"?><styleSheet xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">';
            styleTemp += this.saveNumberFormats(), styleTemp += this.saveFonts(), styleTemp += this.saveFills(), 
            styleTemp += this.saveBorders(), styleTemp += this.saveCellStyleXfs(), styleTemp += this.saveCellXfs(), 
            styleTemp += this.saveCellStyles(), this.addToArchive(styleTemp + "</styleSheet>", "xl/styles.xml");
        }, Workbook.prototype.updateCellXfsStyleXfs = function() {
            for (var _i = 0, _a = this.mStyles; _i < _a.length; _i++) {
                var style = _a[_i], cellXfs = void 0;
                style.isGlobalStyle ? (cellXfs = new CellStyleXfs()).xfId = style.index - 1 : (cellXfs = new CellXfs()).xfId = 0;
                var compareFontResult = this.isNewFont(style);
                if (compareFontResult.result) cellXfs.fontId = compareFontResult.index; else {
                    var font = new Font();
                    font.b = style.bold, font.i = style.italic, font.name = style.fontName, font.sz = style.fontSize, 
                    font.u = style.underline, font.color = "FF" + style.fontColor.replace("#", ""), 
                    this.mFonts.push(font), cellXfs.fontId = this.mFonts.length - 1;
                }
                if ("none" !== style.backColor) {
                    var backColor = "FF" + style.backColor.replace("#", "");
                    if (this.mFills.has(backColor)) {
                        var fillId = this.mFills.get(backColor);
                        cellXfs.fillId = fillId;
                    } else {
                        fillId = this.mFills.size + 2;
                        this.mFills.set(backColor, fillId), cellXfs.fillId = fillId;
                    }
                } else cellXfs.fillId = 0;
                if (this.isNewBorder(style) ? cellXfs.borderId = 0 : (this.mBorders.push(style.borders), 
                cellXfs.borderId = this.mBorders.length), "GENERAL" !== style.numberFormat) if (this.mNumFmt.has(style.numberFormat)) {
                    var numFmt = this.mNumFmt.get(style.numberFormat);
                    cellXfs.numFmtId = numFmt.numFmtId;
                } else {
                    var id = this.mNumFmt.size + 164;
                    this.mNumFmt.set(style.numberFormat, new NumFmt(id, style.numberFormat)), cellXfs.numFmtId = id;
                } else "GENERAL" === style.numberFormat && 14 === style.numFmtId ? cellXfs.numFmtId = 14 : cellXfs.numFmtId = 0;
                style.isGlobalStyle || (cellXfs.applyAlignment = 1), cellXfs.alignment = new Alignment(), 
                cellXfs.alignment.indent = style.indent, cellXfs.alignment.horizontal = style.hAlign, 
                cellXfs.alignment.vertical = style.vAlign, cellXfs.alignment.wrapText = style.wrapText ? 1 : 0, 
                style.isGlobalStyle ? (this.mCellStyleXfs.push(cellXfs), this.mCellXfs.push(cellXfs)) : this.mCellXfs.push(cellXfs);
            }
        }, Workbook.prototype.saveNumberFormats = function() {
            if (this.mNumFmt.size >= 1) {
                var numFmtStyle_1 = '<numFmts count="' + this.mNumFmt.size + '">';
                return this.mNumFmt.forEach(function(value, key) {
                    numFmtStyle_1 += '<numFmt numFmtId="' + value.numFmtId + '" formatCode="' + value.formatCode.replace(/"/g, "&quot;") + '" />';
                }), numFmtStyle_1 += "</numFmts>";
            }
            return "";
        }, Workbook.prototype.saveFonts = function() {
            var fontStyle = '<fonts count="' + this.mFonts.length + '">';
            if (this.mFonts.length >= 1) for (var _i = 0, _a = this.mFonts; _i < _a.length; _i++) {
                var font = _a[_i];
                fontStyle += "<font>", font.b && (fontStyle += "<b />"), font.i && (fontStyle += "<i />"), 
                font.u && (fontStyle += "<u />"), fontStyle += '<sz val="' + this.pixelsToRowHeight(font.sz) + '" />', 
                fontStyle += '<color rgb="' + font.color + '" />', fontStyle += '<name val="' + font.name + '" /></font>';
            }
            return fontStyle + "</fonts>";
        }, Workbook.prototype.saveFills = function() {
            var fillsStyle = '<fills count="' + (this.mFills.size + 2) + '"><fill><patternFill patternType="none"></patternFill></fill><fill><patternFill patternType="gray125"></patternFill></fill>';
            return this.mFills.size >= 1 && this.mFills.forEach(function(value, key) {
                fillsStyle += '<fill><patternFill patternType="solid"><fgColor rgb="' + key + '" /><bgColor rgb="FFFFFFFF" /></patternFill></fill>';
            }), fillsStyle + "</fills>";
        }, Workbook.prototype.saveBorders = function() {
            var bordersStyle = '<borders count="' + (this.mBorders.length + 1) + '"><border><left /><right /><top /><bottom /><diagonal /></border>';
            if (this.mBorders.length >= 1) for (var _i = 0, _a = this.mBorders; _i < _a.length; _i++) {
                var borders = _a[_i];
                if (this.isAllBorder(borders)) {
                    var color = borders.all.color.replace("#", ""), lineStyle = borders.all.lineStyle;
                    bordersStyle += '<border><left style="' + lineStyle + '"><color rgb="FF' + color + '" /></left><right style="' + lineStyle + '"><color rgb="FF' + color + '" /></right><top style="' + lineStyle + '"><color rgb="FF' + color + '" /></top><bottom style="' + lineStyle + '"><color rgb="FF' + color + '" /></bottom></border>';
                } else bordersStyle += '<border><left style="' + borders.left.lineStyle + '"><color rgb="FF' + borders.left.color.replace("#", "") + '" /></left><right style="' + borders.right.lineStyle + '"><color rgb="FF' + borders.right.color.replace("#", "") + '" /></right><top style="' + borders.top.lineStyle + '"><color rgb="FF' + borders.top.color.replace("#", "") + '" /></top><bottom style="' + borders.bottom.lineStyle + '"><color rgb="FF' + borders.bottom.color.replace("#", "") + '" /></bottom></border>';
            }
            return bordersStyle + "</borders>";
        }, Workbook.prototype.saveCellStyles = function() {
            var _this = this, cellStyleString = '<cellStyles  count="' + this.cellStyles.size + '">';
            return this.cellStyles.forEach(function(value, key) {
                cellStyleString += '<cellStyle name="' + key + '" xfId="' + _this.cellStyles.get(key).xfId + '"', 
                "Normal" === key && (cellStyleString += ' builtinId="0"'), cellStyleString += " />";
            }), cellStyleString += "</cellStyles>";
        }, Workbook.prototype.saveCellStyleXfs = function() {
            var cellXfsStyle = '<cellStyleXfs count="' + (this.mCellStyleXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" />';
            if (this.mCellStyleXfs.length >= 1) for (var _i = 0, _a = this.mCellStyleXfs; _i < _a.length; _i++) {
                var cellStyleXf = _a[_i];
                cellXfsStyle += '<xf numFmtId="' + cellStyleXf.numFmtId + '" fontId="' + cellStyleXf.fontId + '" fillId="' + cellStyleXf.fillId + '" borderId="' + cellStyleXf.borderId + '" ', 
                void 0 !== cellStyleXf.alignment ? cellXfsStyle += ">" + this.saveAlignment(cellStyleXf) + "</xf>" : cellXfsStyle += " />";
            }
            return cellXfsStyle + "</cellStyleXfs>";
        }, Workbook.prototype.saveCellXfs = function() {
            var cellXfsStyle = '<cellXfs count="' + (this.mCellXfs.length + 1) + '"><xf numFmtId="0" fontId="0" fillId="0" borderId="0" xfId="0" />';
            if (this.mCellXfs.length >= 1) for (var _i = 0, _a = this.mCellXfs; _i < _a.length; _i++) {
                var cellXf = _a[_i];
                cellXfsStyle += '<xf numFmtId="' + cellXf.numFmtId + '" fontId="' + cellXf.fontId + '" fillId="' + cellXf.fillId + '" borderId="' + cellXf.borderId + '" xfId="' + cellXf.xfId + '" ', 
                1 === cellXf.applyAlignment && (cellXfsStyle += 'applyAlignment="1"'), cellXfsStyle += ">" + this.saveAlignment(cellXf) + "</xf>";
            }
            return cellXfsStyle + "</cellXfs>";
        }, Workbook.prototype.saveAlignment = function(cellXf) {
            var alignString = "<alignment ";
            return void 0 !== cellXf.alignment.horizontal && (alignString += 'horizontal="' + cellXf.alignment.horizontal + '" '), 
            void 0 !== cellXf.alignment.indent && (alignString += 'indent="' + cellXf.alignment.indent + '" '), 
            void 0 !== cellXf.alignment.vertical && (alignString += 'vertical="' + cellXf.alignment.vertical + '" '), 
            alignString += 'wrapText="' + cellXf.alignment.wrapText + '" />';
        }, Workbook.prototype.saveApp = function(builtInProperties) {
            var appString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Properties xmlns="http://schemas.openxmlformats.org/officeDocument/2006/extended-properties"><Application>Essential XlsIO</Application>';
            void 0 !== builtInProperties && (void 0 !== builtInProperties.manager && (appString += "<Manager>" + builtInProperties.manager + "</Manager>"), 
            void 0 !== builtInProperties.company && (appString += "<Company>" + builtInProperties.company + "</Company>")), 
            this.addToArchive(appString + "</Properties>", "docProps/app.xml");
        }, Workbook.prototype.saveCore = function(builtInProperties) {
            var createdDate = new Date(), coreString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><cp:coreProperties xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties">';
            void 0 !== this.builtInProperties ? (void 0 !== builtInProperties.author && (coreString += "<dc:creator>" + builtInProperties.author + "</dc:creator>"), 
            void 0 !== builtInProperties.subject && (coreString += "<dc:subject>" + builtInProperties.subject + "</dc:subject>"), 
            void 0 !== builtInProperties.category && (coreString += "<cp:category>" + builtInProperties.category + "</cp:category>"), 
            void 0 !== builtInProperties.comments && (coreString += "<dc:description>" + builtInProperties.comments + "</dc:description>"), 
            void 0 !== builtInProperties.title && (coreString += "<dc:title>" + builtInProperties.title + "</dc:title>"), 
            void 0 !== builtInProperties.tags && (coreString += "<cp:keywords>" + builtInProperties.tags + "</cp:keywords>"), 
            void 0 !== builtInProperties.status && (coreString += "<cp:contentStatus>" + builtInProperties.status + "</cp:contentStatus>"), 
            void 0 !== builtInProperties.createdDate ? coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + builtInProperties.createdDate.toISOString() + "</dcterms:created>" : coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>", 
            void 0 !== builtInProperties.modifiedDate ? coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + builtInProperties.modifiedDate.toISOString() + "</dcterms:modified>" : coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>") : (coreString += '<dcterms:created xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:created>", 
            coreString += '<dcterms:modified xsi:type="dcterms:W3CDTF">' + createdDate.toISOString() + "</dcterms:modified>"), 
            coreString += "</cp:coreProperties>", this.addToArchive(coreString, "docProps/core.xml");
        }, Workbook.prototype.saveTopLevelRelation = function() {
            this.addToArchive('<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships"><Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml" /><Relationship Id="rId2" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties" Target="docProps/app.xml" /><Relationship Id="rId3" Type="http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties" Target="docProps/core.xml" /></Relationships>', "_rels/.rels");
        }, Workbook.prototype.saveWorkbookRelation = function() {
            for (var wbRelation = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">', length = this.worksheets.length, count = 0, i = 0; i < length; i++, 
            count++) wbRelation += '<Relationship Id="rId' + (i + 1).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet' + (i + 1).toString() + '.xml" />';
            wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles" Target="styles.xml" />', 
            this.sharedStringCount > 0 && (wbRelation += '<Relationship Id="rId' + (++count).toString() + '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings" Target="sharedStrings.xml" />'), 
            this.addToArchive(wbRelation + "</Relationships>", "xl/_rels/workbook.xml.rels");
        }, Workbook.prototype.saveContentType = function() {
            for (var contentTypeString = '<?xml version="1.0" encoding="utf-8" standalone="yes"?><Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types"><Default Extension="xml" ContentType="application/xml" /><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" /><Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" /><Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" /><Override PartName="/docProps/app.xml" ContentType="application/vnd.openxmlformats-officedocument.extended-properties+xml" /><Override PartName="/docProps/core.xml" ContentType="application/vnd.openxmlformats-package.core-properties+xml" />', sheetsOverride = "", length = this.worksheets.length, i = 0; i < length; i++) sheetsOverride += '<Override PartName="/xl/worksheets/sheet' + (i + 1).toString() + '.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" />';
            this.sharedStringCount > 0 && (contentTypeString += '<Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml" />'), 
            this.addToArchive(contentTypeString + sheetsOverride + "</Types>", "[Content_Types].xml");
        }, Workbook.prototype.addToArchive = function(xmlString, itemName) {
            if ("string" == typeof xmlString) {
                var blob = new Blob([ xmlString ], {
                    type: "text/plain"
                }), archiveItem = new ZipArchiveItem(blob, itemName);
                this.mArchive.addItem(archiveItem);
            } else {
                archiveItem = new ZipArchiveItem(xmlString, itemName);
                this.mArchive.addItem(archiveItem);
            }
        }, Workbook.prototype.processMergeCells = function(cell, rowIndex, mergeCells) {
            if (0 !== cell.rowSpan || 0 !== cell.colSpan) {
                var mCell = new MergeCell();
                mCell.x = cell.index, mCell.width = cell.colSpan, mCell.y = rowIndex, mCell.height = cell.rowSpan;
                var startCell = this.getCellName(mCell.y, mCell.x), endCell = this.getCellName(rowIndex + mCell.height, cell.index + mCell.width);
                mCell.ref = startCell + ":" + endCell;
                mergeCells.add(mCell);
                var start = {
                    x: mCell.x,
                    y: mCell.y
                }, end = {
                    x: cell.index + mCell.width,
                    y: rowIndex + mCell.height
                };
                this.updatedMergedCellStyles(start, end, cell);
            }
            return mergeCells;
        }, Workbook.prototype.updatedMergedCellStyles = function(sCell, eCell, cell) {
            for (var x = sCell.x; x <= eCell.x; x++) for (var y = sCell.y; y <= eCell.y; y++) this.mergedCellsStyle.set(this.getCellName(y, x), {
                x: x,
                y: y,
                styleIndex: cell.styleIndex
            });
        }, Workbook.prototype.dateToTicks = function(year, month, day) {
            if (year >= 1 && year <= 9999 && month >= 1 && month <= 12) {
                var y = year - 1;
                return 864e9 * (365 * y + (y / 4 | 0) - (y / 100 | 0) + (y / 400 | 0) + (this.isLeapYear(year) ? [ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 ] : [ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 ])[month - 1] + day - 1);
            }
            throw new Error("Not a valid date");
        }, Workbook.prototype.timeToTicks = function(hour, minute, second) {
            if (hour >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60) {
                return 1e4 * (3600 * hour + 60 * minute + second) * 1e3;
            }
            throw new Error("Not valid time");
        }, Workbook.prototype.isLeapYear = function(year) {
            return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
        }, Workbook.prototype.toOADate = function(date) {
            var ticks = 0;
            if (0 === (ticks = this.dateToTicks(date.getFullYear(), date.getMonth() + 1, date.getDate()) + this.timeToTicks(date.getHours(), date.getMinutes(), date.getSeconds()))) return 0;
            if (ticks < 31241376e9) throw new Error("Arg_OleAutDateInvalid");
            return (ticks - 599264352e9) / 1e4 / 864e5;
        }, Workbook;
    }(), BuiltInProperties = function() {
        return function() {};
    }(), _excelexport = Object.freeze({
        CellStyle: CellStyle,
        Font: Font,
        CellXfs: CellXfs,
        Alignment: Alignment,
        CellStyleXfs: CellStyleXfs,
        CellStyles: CellStyles,
        NumFmt: NumFmt,
        Border: Border,
        Borders: Borders,
        Cell: Cell$1,
        Cells: Cells,
        Column: Column$1,
        Row: Row$1,
        Rows: Rows,
        Workbook: Workbook,
        BuiltInProperties: BuiltInProperties,
        Worksheet: Worksheet,
        HyperLink: HyperLink,
        Grouping: Grouping,
        FreezePane: FreezePane,
        MergeCell: MergeCell,
        MergeCells: MergeCells,
        Worksheets: Worksheets,
        CsvHelper: CsvHelper,
        ValueFormatter: ValueFormatter$1,
        BlobHelper: BlobHelper
    }), ExportHelper = function() {
        function ExportHelper(parent) {
            this.hideColumnInclude = !1, this.foreignKeyData = {}, this.parent = parent;
        }
        return ExportHelper.getQuery = function(parent, data) {
            return data.isRemote() ? data.generateQuery(!0).requiresCount().take(parent.pageSettings.totalRecordsCount) : data.generateQuery(!0).requiresCount();
        }, ExportHelper.prototype.getFData = function(value, column) {
            return getForeignData(column, {}, value, this.foreignKeyData[column.field])[0];
        }, ExportHelper.prototype.getColumnData = function(gridObj) {
            var promise, _this = this, columnPromise = [], fColumns = gridObj.getForeignKeyColumns();
            return fColumns.length && (fColumns.forEach(function(col) {
                columnPromise.push(col.dataSource.executeQuery(new Query()));
            }), promise = Promise.all(columnPromise).then(function(e) {
                fColumns.forEach(function(col, index) {
                    _this.foreignKeyData[col.field] = e[index].result;
                });
            })), promise;
        }, ExportHelper.prototype.getHeaders = function(column, isHideColumnInclude) {
            this.hideColumnInclude = !!isHideColumnInclude;
            var cols = column;
            this.colDepth = this.measureColumnDepth(cols);
            for (var rows = [], actualColumns = [], i = 0; i < this.colDepth; i++) rows[i] = new Row({}), 
            rows[i].cells = [];
            rows = this.processColumns(rows);
            for (var _i = 0, rows_1 = rows = this.processHeaderCells(rows); _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                for (i = 0; i < row.cells.length; i++) {
                    var cell = row.cells[i];
                    void 0 === cell.visible && cell.cellType !== CellType.StackedHeader && (row.cells = this.removeCellFromRow(row.cells, i), 
                    i -= 1), isHideColumnInclude || void 0 === cell.visible || cell.visible || (row.cells = this.removeCellFromRow(row.cells, i), 
                    i -= 1);
                }
            }
            for (i = 0; i < cols.length; i++) this.generateActualColumns(cols[i], actualColumns);
            return {
                rows: rows,
                columns: actualColumns
            };
        }, ExportHelper.prototype.getConvertedWidth = function(input) {
            var value = parseFloat(input);
            return -1 !== input.indexOf("%") ? this.parent.element.getBoundingClientRect().width * value / 100 : value;
        }, ExportHelper.prototype.generateActualColumns = function(column, actualColumns) {
            if (!column.commands) if (column.columns) {
                if (column.visible || this.hideColumnInclude) {
                    if (0 !== this.getCellCount(column, 0)) for (var i = 0; i < column.columns.length; i++) this.generateActualColumns(column.columns[i], actualColumns);
                }
            } else (column.visible || this.hideColumnInclude) && actualColumns.push(column);
        }, ExportHelper.prototype.removeCellFromRow = function(cells, cellIndex) {
            for (var resultCells = [], i = 0; i < cellIndex; i++) resultCells.push(cells[i]);
            for (i = cellIndex + 1; i < cells.length; i++) resultCells.push(cells[i]);
            return resultCells;
        }, ExportHelper.prototype.processHeaderCells = function(rows) {
            for (var columns = this.parent.enableColumnVirtualization ? this.parent.getColumns() : this.parent.columns, i = 0; i < columns.length; i++) columns[i].commands || (rows = this.appendGridCells(columns[i], rows, 0, 0 === i, !1, i === columns.length - 1));
            return rows;
        }, ExportHelper.prototype.appendGridCells = function(cols, gridRows, index, isFirstObj, isFirstColumn, isLastColumn) {
            var lastCol = isLastColumn ? "e-lastcell" : "";
            if (cols.columns) {
                var colSpan = this.getCellCount(cols, 0);
                colSpan && gridRows[index].cells.push(new Cell({
                    cellType: CellType.StackedHeader,
                    column: cols,
                    colSpan: colSpan
                }));
                for (var isIgnoreFirstCell = void 0, i = 0, len = cols.columns.length; i < len; i++) cols.columns[i].visible && !isIgnoreFirstCell && (isIgnoreFirstCell = !0), 
                gridRows = this.appendGridCells(cols.columns[i], gridRows, index + 1, isFirstObj, 0 === i, i === len - 1 && isLastColumn);
            } else gridRows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? "" : isFirstColumn ? "e-firstcell" : "") + lastCol, index, this.parent.getColumnIndexByUid(cols.uid)));
            return gridRows;
        }, ExportHelper.prototype.generateCell = function(gridColumn, cellType, rowSpan, className, rowIndex, columnIndex) {
            var option = {
                visible: gridColumn.visible,
                isDataCell: !1,
                isTemplate: !isNullOrUndefined(gridColumn.headerTemplate),
                rowID: "",
                column: gridColumn,
                cellType: cellType,
                rowSpan: rowSpan,
                className: className,
                index: rowIndex,
                colIndex: columnIndex
            };
            return (!option.rowSpan || option.rowSpan < 2) && delete option.rowSpan, new Cell(option);
        }, ExportHelper.prototype.processColumns = function(rows) {
            for (var gridObj = this.parent, columnIndexes = this.parent.getColumnIndexesInView(), i = 0, len = rows.length; i < len; i++) {
                if (gridObj.allowGrouping) for (var j = 0, len_1 = gridObj.groupSettings.columns.length; j < len_1; j++) this.parent.enableColumnVirtualization && -1 === columnIndexes.indexOf(j) || rows[i].cells.push(this.generateCell({}, CellType.HeaderIndent));
                (gridObj.detailTemplate || gridObj.childGrid) && rows[i].cells.push(this.generateCell({}, CellType.DetailHeader));
            }
            return rows;
        }, ExportHelper.prototype.getCellCount = function(column, count) {
            if (column.columns) for (var i = 0; i < column.columns.length; i++) count = this.getCellCount(column.columns[i], count); else (column.visible || this.hideColumnInclude) && count++;
            return count;
        }, ExportHelper.prototype.measureColumnDepth = function(column) {
            for (var max = 0, i = 0; i < column.length; i++) {
                var depth = this.checkDepth(column[i], 0);
                max < depth && (max = depth);
            }
            return max + 1;
        }, ExportHelper.prototype.checkDepth = function(col, index) {
            var max = index, indices = [];
            if (col.columns) {
                index++;
                for (var i = 0; i < col.columns.length; i++) indices[i] = this.checkDepth(col.columns[i], index);
                for (var j = 0; j < indices.length; j++) max < indices[j] && (max = indices[j]);
                index = max;
            }
            return index;
        }, ExportHelper;
    }(), ExportValueFormatter = function() {
        function ExportValueFormatter(culture) {
            this.valueFormatter = new ValueFormatter(culture), this.internationalization = new Internationalization(culture);
        }
        return ExportValueFormatter.prototype.returnFormattedValue = function(args, customFormat) {
            return !isNullOrUndefined(args.value) && args.value ? this.valueFormatter.getFormatFunction(customFormat)(args.value) : "";
        }, ExportValueFormatter.prototype.formatCellValue = function(args) {
            if (args.isForeignKey && (args.value = getValue(args.column.foreignKeyValue, getForeignData(args.column, {}, args.value)[0])), 
            "number" === args.column.type && void 0 !== args.column.format && "" !== args.column.format) return args.value ? this.internationalization.getNumberFormat({
                format: args.column.format
            })(args.value) : "";
            if ("boolean" === args.column.type) return args.value ? "true" : "false";
            if ("date" !== args.column.type && "datetime" !== args.column.type && "time" !== args.column.type || void 0 === args.column.format) return (isNullOrUndefined(args.column.type) || isNullOrUndefined(args.value)) && isNullOrUndefined(args.value) ? "" : args.value.toString();
            if ("string" == typeof args.column.format) {
                var format = void 0;
                return format = "date" === args.column.type ? {
                    type: "date",
                    skeleton: args.column.format
                } : "time" === args.column.type ? {
                    type: "time",
                    skeleton: args.column.format
                } : {
                    type: "dateTime",
                    skeleton: args.column.format
                }, this.returnFormattedValue(args, format);
            }
            if (args.column.format instanceof Object && void 0 === args.column.format.type) return args.value.toString();
            var customFormat = void 0;
            return customFormat = "date" === args.column.type ? {
                type: args.column.format.type,
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
            } : "time" === args.column.type ? {
                type: "time",
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
            } : {
                type: "dateTime",
                format: args.column.format.format,
                skeleton: args.column.format.skeleton
            }, this.returnFormattedValue(args, customFormat);
        }, ExportValueFormatter;
    }(), ExcelExport = function() {
        function ExcelExport(parent) {
            this.book = {}, this.workSheet = [], this.rows = [], this.columns = [], this.styles = [], 
            this.rowLength = 1, this.expType = "AppendToSheet", this.includeHiddenColumn = !1, 
            this.isCsvExport = !1, this.isElementIdChanged = !1, this.foreignKeyData = {}, this.parent = parent, 
            this.helper = new ExportHelper(parent);
        }
        return ExcelExport.prototype.getModuleName = function() {
            return "ExcelExport";
        }, ExcelExport.prototype.init = function(gObj) {
            null !== gObj.element && "" === gObj.element.id && (gObj.element.id = new Date().toISOString(), 
            this.isElementIdChanged = !0), this.parent = gObj, this.parent.isDestroyed || (this.isExporting = void 0, 
            this.book = {}, this.workSheet = [], this.rows = [], this.columns = [], this.styles = [], 
            this.rowLength = 1, this.footer = void 0, this.expType = "AppendToSheet", this.includeHiddenColumn = !1, 
            this.exportValueFormatter = new ExportValueFormatter(gObj.locale));
        }, ExcelExport.prototype.Map = function(grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {
            var gObj = grid, args = {
                requestType: "beforeExcelExport",
                gridObject: gObj,
                cancel: !1,
                isMultipleExport: isMultipleExport,
                workbook: workbook,
                isCsv: isCsv,
                isBlob: isBlob
            };
            return gObj.trigger("beforeExcelExport", args), this.data = new Data(gObj), this.isExporting = !0, 
            this.isBlob = args.isBlob, this.isCsvExport = !!args.isCsv && args.isCsv, this.processRecords(gObj, exportProperties, args.isMultipleExport, args.workbook);
        }, ExcelExport.prototype.processRecords = function(gObj, exportProperties, isMultipleExport, workbook) {
            var _this = this;
            if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && exportProperties.dataSource instanceof DataManager) return new Promise(function(resolve, reject) {
                exportProperties.dataSource.executeQuery(new Query()).then(function(r) {
                    _this.init(gObj), _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r), 
                    resolve(_this.book);
                });
            });
            var allPromise = [];
            return allPromise.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data))), 
            allPromise.push(this.helper.getColumnData(gObj)), Promise.all(allPromise).then(function(e) {
                return _this.init(gObj), _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]), 
                _this.book;
            }).catch(function(e) {
                _this.parent.trigger("actionFailure", e);
            });
        }, ExcelExport.prototype.processInnerRecords = function(gObj, exportProperties, isMultipleExport, workbook, r) {
            this.groupedColLength = gObj.groupSettings.columns.length;
            var blankRows = 5;
            isNullOrUndefined(exportProperties) || isNullOrUndefined(exportProperties.multipleExport) || (this.expType = isNullOrUndefined(exportProperties.multipleExport.type) ? "AppendToSheet" : exportProperties.multipleExport.type, 
            isNullOrUndefined(exportProperties.multipleExport.blankRows) || (blankRows = exportProperties.multipleExport.blankRows)), 
            isNullOrUndefined(workbook) ? (this.workSheet = [], this.rows = [], this.columns = [], 
            this.styles = []) : "NewSheet" === this.expType ? (this.workSheet = workbook.worksheets, 
            this.rows = [], this.columns = [], this.styles = workbook.styles) : (this.workSheet = [], 
            this.rows = workbook.worksheets[0].rows, this.columns = workbook.worksheets[0].columns, 
            this.styles = workbook.styles, this.rowLength = this.rows[this.rows.length - 1].index + blankRows, 
            this.rowLength++), isNullOrUndefined(exportProperties) || (isNullOrUndefined(isMultipleExport) ? (isNullOrUndefined(exportProperties.header) || this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header))), 
            isNullOrUndefined(exportProperties.footer) || (this.footer = JSON.parse(JSON.stringify(exportProperties.footer)))) : (isNullOrUndefined(exportProperties.header) || !isMultipleExport && "NewSheet" !== this.expType || this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header))), 
            isNullOrUndefined(exportProperties.footer) || ("AppendToSheet" === this.expType ? isMultipleExport || (this.footer = JSON.parse(JSON.stringify(exportProperties.footer))) : this.footer = JSON.parse(JSON.stringify(exportProperties.footer))))), 
            this.includeHiddenColumn = !isNullOrUndefined(exportProperties) && exportProperties.includeHiddenColumn;
            var headerRow = this.helper.getHeaders(gObj.columns, this.includeHiddenColumn), groupIndent = 0;
            isNullOrUndefined(r.result.level) || (groupIndent += r.result.level, groupIndent += r.result.childLevels), 
            this.processHeaderContent(gObj, headerRow, exportProperties, groupIndent), isNullOrUndefined(exportProperties) || isNullOrUndefined(exportProperties.dataSource) || exportProperties.dataSource instanceof DataManager ? isNullOrUndefined(exportProperties) || "CurrentPage" !== exportProperties.exportType ? this.processRecordContent(gObj, r, headerRow, isMultipleExport, exportProperties) : this.processRecordContent(gObj, r, headerRow, isMultipleExport, exportProperties, gObj.currentViewData) : this.processRecordContent(gObj, r, headerRow, isMultipleExport, exportProperties, exportProperties.dataSource), 
            this.isExporting = !1, gObj.trigger("excelExportComplete", this.isBlob ? {
                promise: this.blobPromise
            } : {});
        }, ExcelExport.prototype.processRecordContent = function(gObj, returnType, headerRow, isMultipleExport, exportProperties, currentViewRecords) {
            gObj.columns;
            var record = void 0;
            isNullOrUndefined((record = isNullOrUndefined(currentViewRecords) ? returnType.result : currentViewRecords).level) ? this.processRecordRows(gObj, record, headerRow, 0) : this.processGroupedRows(gObj, record, headerRow, record.level), 
            isNullOrUndefined(returnType.aggregates) || (isNullOrUndefined(currentViewRecords) ? this.processAggregates(gObj, returnType.result) : this.processAggregates(gObj, returnType.result, currentViewRecords)), 
            isNullOrUndefined(this.footer) || ("AppendToSheet" === this.expType && !isMultipleExport || "NewSheet" === this.expType) && this.processExcelFooter(this.footer);
            var sheet = {};
            if (this.columns.length > 0 && (sheet.columns = this.columns), sheet.rows = this.rows, 
            this.workSheet.push(sheet), this.book.worksheets = this.workSheet, this.book.styles = this.styles, 
            !isMultipleExport) {
                if (this.isCsvExport) {
                    var book = new Workbook(this.book, "csv", gObj.locale);
                    this.isBlob ? this.blobPromise = book.saveAsBlob("text/csv") : !isNullOrUndefined(exportProperties) && exportProperties.fileName ? book.save(exportProperties.fileName) : book.save("Export.csv");
                } else {
                    book = new Workbook(this.book, "xlsx", gObj.locale);
                    this.isBlob ? this.blobPromise = book.saveAsBlob("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") : !isNullOrUndefined(exportProperties) && exportProperties.fileName ? book.save(exportProperties.fileName) : book.save("Export.xlsx");
                }
                this.isElementIdChanged && (gObj.element.id = "");
            }
        }, ExcelExport.prototype.processGroupedRows = function(gObj, dataSource, headerRow, level) {
            for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
                var item = dataSource_1[_i], cells = [], cell = {};
                cell.index = 1 + level;
                var col = gObj.getColumnByField(item.field), args = {
                    value: item.key,
                    column: col,
                    style: void 0,
                    isForeignKey: col.isForeignColumn()
                };
                cell.value = this.parent.getColumnByField(item.field).headerText + ": " + this.exportValueFormatter.formatCellValue(args) + " - ", 
                item.count > 1 ? cell.value += item.count + " items" : cell.value += item.count + " item", 
                cell.style = this.getCaptionThemeStyle(this.theme);
                var groupCaptionSummaryRows = new CaptionSummaryModelGenerator(gObj).generateRows(item);
                if (this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, this.rowLength), 
                cells.push(cell), this.rows[this.rows.length - 1].cells.length > 0) {
                    for (var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length, hIndex = 0, _a = 0, _b = this.rows[this.rows.length - 1].cells; _a < _b.length; _a++) {
                        var tCell = _b[_a];
                        tCell.index < lIndex && (lIndex = tCell.index), tCell.index > hIndex && (hIndex = tCell.index), 
                        tCell.style = this.getCaptionThemeStyle(this.theme), cells[cells.length - 1].index !== tCell.index && cells.push(tCell);
                    }
                    for (lIndex - cell.index > 1 && (cell.colSpan = lIndex - cell.index); hIndex < headerRow.columns.length + level + dataSource.childLevels; ) {
                        var sCell = {};
                        sCell.index = hIndex + 1, sCell.style = this.getCaptionThemeStyle(this.theme), cells.push(sCell), 
                        hIndex++;
                    }
                } else {
                    for (var span = 0, _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {
                        _d[_c].visible && span++;
                    }
                    cell.colSpan = dataSource.childLevels + span;
                }
                if (this.rows[this.rows.length - 1].cells = cells, this.rowLength++, this.groupedColLength < 8 && level > 1) {
                    var grouping = {
                        outlineLevel: level - 1,
                        isCollapsed: !0
                    };
                    this.rows[this.rows.length - 1].grouping = grouping;
                }
                !isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0 ? this.processGroupedRows(gObj, item.items, headerRow, item.items.level) : (this.processRecordRows(gObj, item.items, headerRow, level), 
                this.processAggregates(gObj, item, void 0, level, !0));
            }
        }, ExcelExport.prototype.processRecordRows = function(gObj, record, headerRow, level) {
            for (var rLen = Object.keys(record).length, index = 1, cells = [], r = 0; r < rLen; r++) {
                cells = [], index = 1;
                for (var c = 0, len = headerRow.columns.length; c < len; c++) {
                    var value = isNullOrUndefined(headerRow.columns[c].field) ? "" : getValue(headerRow.columns[c].field, record[r]), column = headerRow.columns[c], foreignKeyData$$1 = void 0;
                    if (column.isForeignColumn && column.isForeignColumn() && (foreignKeyData$$1 = this.helper.getFData(value, column), 
                    value = getValue(column.foreignKeyValue, foreignKeyData$$1)), !isNullOrUndefined(value)) {
                        var excelCellArgs = {
                            data: record[r],
                            column: headerRow.columns[c],
                            foreignKeyData: foreignKeyData$$1
                        }, cell = {};
                        if (gObj.trigger("excelQueryCellInfo", extend(excelCellArgs, {
                            column: headerRow.columns[c],
                            data: record[r],
                            value: value,
                            style: void 0,
                            colSpan: 1,
                            cell: cell
                        })), cell = excelCellArgs.cell, cell.index = index + level, cell.value = excelCellArgs.value, 
                        excelCellArgs.colSpan > 1 && (cell.colSpan = excelCellArgs.colSpan), isNullOrUndefined(excelCellArgs.style)) cell.style = {
                            name: gObj.element.id + "column" + (index + level)
                        }; else {
                            var styleIndex = this.getColumnStyle(gObj, index + level);
                            cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);
                        }
                        cells.push(cell);
                    }
                    index++;
                }
                if (this.groupedColLength < 8 && level > 0) {
                    var grouping = {
                        outlineLevel: level,
                        isCollapsed: !0
                    };
                    this.rows.push({
                        index: this.rowLength++,
                        cells: cells,
                        grouping: grouping
                    });
                } else this.rows.push({
                    index: this.rowLength++,
                    cells: cells
                });
            }
        }, ExcelExport.prototype.processAggregates = function(gObj, rec, currentViewRecords, indent, byGroup) {
            var summaryModel = new SummaryModelGenerator(gObj), data = void 0;
            if (data = isNullOrUndefined(currentViewRecords) ? rec : currentViewRecords, void 0 === indent && (indent = 0), 
            gObj.groupSettings.columns.length > 0 && byGroup) {
                var groupSummaryRows = new GroupSummaryModelGenerator(gObj).generateRows(data, {
                    level: data.level
                });
                groupSummaryRows.length > 0 && this.fillAggregates(gObj, groupSummaryRows, indent);
            } else {
                indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;
                var sRows = summaryModel.generateRows(data, rec.aggregates);
                sRows.length > 0 && !byGroup && this.fillAggregates(gObj, sRows, indent);
            }
        }, ExcelExport.prototype.fillAggregates = function(gObj, cells, indent, customIndex) {
            for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                for (var row = cells_1[_i], cells_2 = [], index = 0, _a = 0, _b = row.cells; _a < _b.length; _a++) {
                    var cell = _b[_a], eCell = {};
                    if (cell.visible || this.includeHiddenColumn) if (index++, cell.isDataCell) {
                        if (eCell.index = index + indent, isNullOrUndefined(cell.column.footerTemplate)) if (isNullOrUndefined(cell.column.groupFooterTemplate)) if (isNullOrUndefined(cell.column.groupCaptionTemplate)) for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {
                            _d[_c] === cell.column.type && (isNullOrUndefined(row.data[cell.column.field].Sum) ? isNullOrUndefined(row.data[cell.column.field].Average) ? isNullOrUndefined(row.data[cell.column.field].Max) ? isNullOrUndefined(row.data[cell.column.field].Min) ? isNullOrUndefined(row.data[cell.column.field].Count) ? isNullOrUndefined(row.data[cell.column.field].TrueCount) ? isNullOrUndefined(row.data[cell.column.field].FalseCount) ? isNullOrUndefined(row.data[cell.column.field].Custom) || (eCell.value = row.data[cell.column.field].Custom) : eCell.value = row.data[cell.column.field].FalseCount : eCell.value = row.data[cell.column.field].TrueCount : eCell.value = row.data[cell.column.field].Count : eCell.value = row.data[cell.column.field].Min : eCell.value = row.data[cell.column.field].Max : eCell.value = row.data[cell.column.field].Average : eCell.value = row.data[cell.column.field].Sum);
                        } else eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row); else eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row); else eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);
                        eCell.style = this.getCaptionThemeStyle(this.theme), cell.attributes.style.textAlign && (eCell.style.hAlign = cell.attributes.style.textAlign), 
                        cells_2.push(eCell);
                    } else void 0 === customIndex && (eCell.index = index + indent, eCell.style = this.getCaptionThemeStyle(this.theme), 
                    cells_2.push(eCell));
                }
                if (isNullOrUndefined(customIndex)) {
                    var row_1 = {};
                    if (this.groupedColLength < 8 && this.groupedColLength > 0) {
                        var grouping = {
                            outlineLevel: this.rows[this.rows.length - 1].grouping.outlineLevel,
                            isCollapsed: !0
                        };
                        row_1 = {
                            index: this.rowLength++,
                            cells: cells_2,
                            grouping: grouping
                        };
                    } else row_1 = {
                        index: this.rowLength++,
                        cells: cells_2
                    };
                    this.rows.push(row_1);
                } else this.rows.push({
                    index: customIndex,
                    cells: cells_2
                });
            }
        }, ExcelExport.prototype.getAggreateValue = function(cellType, template, cell, row) {
            var templateFn = {};
            templateFn[getEnumValue(CellType, cell.cellType)] = compile$$1(template);
            return templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName])[0].wholeText;
        }, ExcelExport.prototype.mergeOptions = function(JSON1, JSON2) {
            for (var result = {}, attrname = Object.keys(JSON1), index = 0; index < attrname.length; index++) "name" !== attrname[index] && (result[attrname[index]] = JSON1[attrname[index]]);
            attrname = Object.keys(JSON2);
            for (index = 0; index < attrname.length; index++) "name" !== attrname[index] && (result[attrname[index]] = JSON2[attrname[index]]);
            return result;
        }, ExcelExport.prototype.getColumnStyle = function(gObj, columnIndex) {
            for (var index = 0, _i = 0, _a = this.styles; _i < _a.length; _i++) {
                if (_a[_i].name === gObj.element.id + "column" + columnIndex) return index;
                index++;
            }
        }, ExcelExport.prototype.processHeaderContent = function(gObj, headerRow, exportProperties, indent) {
            gObj.columns;
            var returnValue = headerRow, gridRows = returnValue.rows, gridColumns = returnValue.columns, spannedCells = [];
            if (indent > 0) for (var index = 0; index !== indent; ) this.columns.push({
                index: index + 1,
                width: 30
            }), index++;
            for (var row = 0; row < gridRows.length; row++) {
                for (var currentCellIndex = 1 + indent, cells = [], column_1 = 0; column_1 < gridRows[row].cells.length; column_1++) {
                    for (var style = {}, cell = {}, gridCell = gridRows[row].cells[column_1], result = {
                        contains: !0,
                        index: 1
                    }; result.contains; ) if (result = this.getIndex(spannedCells, 1, currentCellIndex), 
                    currentCellIndex = result.index, !result.contains) {
                        cell.index = result.index;
                        break;
                    }
                    if (!isNullOrUndefined(gridCell.rowSpan) && 1 !== gridCell.rowSpan) {
                        cell.rowSpan = gridCell.rowSpan;
                        for (var i = 1; i < gridCell.rowSpan + 1; i++) {
                            var spannedCell = {
                                rowIndex: 0,
                                columnIndex: 0
                            };
                            spannedCell.rowIndex = i, spannedCell.columnIndex = currentCellIndex, spannedCells.push(spannedCell);
                        }
                    }
                    isNullOrUndefined(gridCell.colSpan) || 1 === gridCell.colSpan || (cell.colSpan = gridCell.colSpan, 
                    currentCellIndex = currentCellIndex + cell.colSpan - 1), cell.value = gridCell.column.headerText, 
                    isNullOrUndefined(exportProperties) || isNullOrUndefined(exportProperties.theme) || (this.theme = exportProperties.theme), 
                    style = this.getHeaderThemeStyle(this.theme), isNullOrUndefined(gridCell.column.textAlign) || (style.hAlign = gridCell.column.textAlign), 
                    isNullOrUndefined(gridCell.column.headerTextAlign) || (style.hAlign = gridCell.column.headerTextAlign);
                    var excelHeaderCellArgs = {
                        cell: cell,
                        gridCell: gridCell,
                        setStyle: style
                    };
                    gObj.trigger("excelHeaderQueryCellInfo", extend(excelHeaderCellArgs, {
                        cell: cell,
                        setStyle: style
                    })), cell.style = style, cells.push(cell), currentCellIndex++;
                }
                this.rows.push({
                    index: this.rowLength++,
                    cells: cells
                });
            }
            for (var col = 0; col < gridColumns.length; col++) this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);
        }, ExcelExport.prototype.getHeaderThemeStyle = function(theme) {
            var style = {};
            return style.fontSize = 12, style.borders = {
                color: "#E0E0E0"
            }, isNullOrUndefined(theme) || isNullOrUndefined(theme.header) || (style = this.updateThemeStyle(theme.header, style)), 
            style;
        }, ExcelExport.prototype.updateThemeStyle = function(themestyle, style) {
            return isNullOrUndefined(themestyle.fontColor) || (style.fontColor = themestyle.fontColor), 
            isNullOrUndefined(themestyle.fontName) || (style.fontName = themestyle.fontName), 
            isNullOrUndefined(themestyle.fontSize) || (style.fontSize = themestyle.fontSize), 
            isNullOrUndefined(themestyle.borders) || (isNullOrUndefined(themestyle.borders.color) || (style.borders.color = themestyle.borders.color), 
            isNullOrUndefined(themestyle.borders.lineStyle) || (style.borders.lineStyle = themestyle.borders.lineStyle)), 
            !1 !== themestyle.bold && (style.bold = themestyle.bold), style;
        }, ExcelExport.prototype.getCaptionThemeStyle = function(theme) {
            var style = {};
            return style.fontSize = 13, style.backColor = "#F6F6F6", isNullOrUndefined(theme) || isNullOrUndefined(theme.caption) || (style = this.updateThemeStyle(theme.caption, style)), 
            style;
        }, ExcelExport.prototype.getRecordThemeStyle = function(theme) {
            var style = {};
            return style.fontSize = 13, style.borders = {
                color: "#E0E0E0"
            }, isNullOrUndefined(theme) || isNullOrUndefined(theme.record) || (style = this.updateThemeStyle(theme.record, style)), 
            style;
        }, ExcelExport.prototype.processExcelHeader = function(header) {
            if (!isNullOrUndefined(header.rows) && ("NewSheet" === this.expType || 1 === this.rowLength)) {
                var noRows = void 0;
                void 0 === header.headerRows ? this.rowLength = header.rows.length : this.rowLength = header.headerRows, 
                noRows = this.rowLength < header.rows.length ? this.rowLength : header.rows.length, 
                this.rowLength++;
                for (var row = 0; row < noRows; row++) {
                    var json = header.rows[row];
                    (null === json.index || isNullOrUndefined(json.index)) && (json.index = row + 1), 
                    this.updatedCellIndex(json);
                }
            }
        }, ExcelExport.prototype.updatedCellIndex = function(json) {
            for (var cellsLength = json.cells.length, cellId = 0; cellId < cellsLength; cellId++) {
                var jsonCell = json.cells[cellId];
                (null === jsonCell.index || isNullOrUndefined(jsonCell.index)) && (jsonCell.index = cellId + 1);
            }
            this.rows.push(json);
        }, ExcelExport.prototype.processExcelFooter = function(footer) {
            if (!isNullOrUndefined(footer.rows)) {
                var noRows = void 0;
                void 0 === footer.footerRows ? this.rowLength += footer.rows.length : footer.footerRows > footer.rows.length ? (this.rowLength += footer.footerRows - footer.rows.length, 
                noRows = footer.rows.length) : noRows = footer.footerRows;
                for (var row = 0; row < noRows; row++) {
                    var json = footer.rows[row];
                    null === json.index || void 0 === json.index ? json.index = this.rowLength++ : json.index += this.rowLength, 
                    this.updatedCellIndex(json);
                }
            }
        }, ExcelExport.prototype.getIndex = function(spannedCells, rowIndex, columnIndex) {
            for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {
                var spannedCell = spannedCells_1[_i];
                if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) return columnIndex += 1, 
                {
                    contains: !0,
                    index: columnIndex
                };
            }
            return {
                contains: !1,
                index: columnIndex
            };
        }, ExcelExport.prototype.parseStyles = function(gObj, col, style, index) {
            isNullOrUndefined(col.format) || ("object" == typeof col.format ? (style.numberFormat = isNullOrUndefined(col.format.format) ? col.format.skeleton : col.format.format, 
            isNullOrUndefined(col.format.type) || (style.type = col.format.type)) : (style.numberFormat = col.format, 
            style.type = col.type)), isNullOrUndefined(col.textAlign) || (style.hAlign = col.textAlign), 
            Object.keys(style).length > 0 && (style.name = gObj.element.id + "column" + index, 
            this.styles.push(style)), isNullOrUndefined(col.width) || this.columns.push({
                index: index,
                width: "number" == typeof col.width ? col.width : this.helper.getConvertedWidth(col.width)
            });
        }, ExcelExport.prototype.destroy = function() {}, ExcelExport;
    }(), Dictionary = function() {
        function Dictionary(toStringFunction) {
            this.table = {}, this.nElements = 0, this.toStr = toStringFunction || defaultToString;
        }
        return Dictionary.prototype.getValue = function(key) {
            var pair = this.table["$" + this.toStr(key)];
            if (void 0 !== pair) return pair.value;
        }, Dictionary.prototype.setValue = function(key, value) {
            var k = "$" + this.toStr(key);
            this.table[k];
            this.nElements++, this.table[k] = {
                key: key,
                value: value
            };
        }, Dictionary.prototype.remove = function(key) {
            var k = "$" + this.toStr(key), previousElement = this.table[k];
            return delete this.table[k], this.nElements--, previousElement.value;
        }, Dictionary.prototype.keys = function() {
            for (var keysArray = [], namesOfKeys = Object.keys(this.table), index1 = 0; index1 < namesOfKeys.length; index1++) {
                var pair1 = this.table[namesOfKeys[index1]];
                keysArray.push(pair1.key);
            }
            return keysArray;
        }, Dictionary.prototype.values = function() {
            for (var valuesArray = [], namesOfValues = Object.keys(this.table), index2 = 0; index2 < namesOfValues.length; index2++) {
                var pair2 = this.table[namesOfValues[index2]];
                valuesArray.push(pair2.value);
            }
            return valuesArray;
        }, Dictionary.prototype.containsKey = function(key) {
            return !(void 0 === this.getValue(key));
        }, Dictionary.prototype.clear = function() {
            this.table = {}, this.nElements = 0;
        }, Dictionary.prototype.size = function() {
            return this.nElements;
        }, Dictionary;
    }(), PdfName = function() {
        function PdfName(value) {
            this.stringStartMark = "/", this.internalValue = "", this.isSaving6 = !1, this.position6 = -1, 
            this.internalValue = this.normalizeValue(value);
        }
        return Object.defineProperty(PdfName.prototype, "status", {
            get: function() {
                return this.status6;
            },
            set: function(value) {
                this.status6 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfName.prototype, "isSaving", {
            get: function() {
                return this.isSaving6;
            },
            set: function(value) {
                this.isSaving6 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfName.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index6;
            },
            set: function(value) {
                this.index6 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfName.prototype, "position", {
            get: function() {
                return this.position6;
            },
            set: function(value) {
                this.position6 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfName.prototype, "clonedObject", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfName.prototype, "value", {
            get: function() {
                return this.internalValue;
            },
            set: function(value) {
                var val = value;
                null !== value && value.length > 0 ? (val = value, this.internalValue = this.normalizeValue(val)) : this.internalValue = val;
            },
            enumerable: !0,
            configurable: !0
        }), PdfName.prototype.save = function(writer) {
            writer.write(this.toString());
        }, PdfName.prototype.toString = function() {
            return this.stringStartMark + this.escapeString(this.value);
        }, PdfName.prototype.clone = function(crossTable) {
            var newName = new PdfName();
            return newName.value = this.internalValue, newName;
        }, PdfName.prototype.escapeString = function(stringValue) {
            for (var result = "", i = 0, len_1 = stringValue.length; i < len_1; i++) {
                var ch = stringValue[i];
                PdfName.delimiters.indexOf(ch);
                result += ch;
            }
            return result;
        }, PdfName.prototype.normalizeValue = function(value, c) {
            return value;
        }, PdfName.delimiters = "()<>[]{}/%}", PdfName.replacements = [ " ", "\t", "\n", "\r" ], 
        PdfName;
    }(), Operators = function() {
        function Operators() {
            this.forTest = "test", this.forTest = Operators.obj;
        }
        return Operators.obj = "obj", Operators.endObj = "endobj", Operators.r = "R", Operators.whiteSpace = " ", 
        Operators.slash = "/", Operators.newLine = "\r\n", Operators.stream = "stream", 
        Operators.endStream = "endstream", Operators.xref = "xref", Operators.f = "f", Operators.n = "n", 
        Operators.trailer = "trailer", Operators.startxref = "startxref", Operators.eof = "%%EOF", 
        Operators.header = "%PDF-1.5", Operators.beginText = "BT", Operators.endText = "ET", 
        Operators.beginPath = "m", Operators.appendLineSegment = "l", Operators.stroke = "S", 
        Operators.fill = "f", Operators.fillEvenOdd = "f*", Operators.fillStroke = "B", 
        Operators.fillStrokeEvenOdd = "B*", Operators.appendbeziercurve = "c", Operators.appendRectangle = "re", 
        Operators.saveState = "q", Operators.restoreState = "Q", Operators.paintXObject = "Do", 
        Operators.modifyCtm = "cm", Operators.modifyTM = "Tm", Operators.setLineWidth = "w", 
        Operators.setLineCapStyle = "J", Operators.setLineJoinStyle = "j", Operators.setDashPattern = "d", 
        Operators.setFlatnessTolerance = "i", Operators.closePath = "h", Operators.closeStrokePath = "s", 
        Operators.closeFillStrokePath = "b", Operators.setCharacterSpace = "Tc", Operators.setWordSpace = "Tw", 
        Operators.setHorizontalScaling = "Tz", Operators.setTextLeading = "TL", Operators.setFont = "Tf", 
        Operators.setRenderingMode = "Tr", Operators.setTextRise = "Ts", Operators.setTextScaling = "Tz", 
        Operators.setCoords = "Td", Operators.goToNextLine = "T*", Operators.setText = "Tj", 
        Operators.setTextWithFormatting = "TJ", Operators.setTextOnNewLine = "'", Operators.selectcolorspaceforstroking = "CS", 
        Operators.selectcolorspacefornonstroking = "cs", Operators.setrbgcolorforstroking = "RG", 
        Operators.setrbgcolorfornonstroking = "rg", Operators.setcmykcolorforstroking = "K", 
        Operators.setcmykcolorfornonstroking = "k", Operators.setgraycolorforstroking = "G", 
        Operators.setgraycolorfornonstroking = "g", Operators.clipPath = "W", Operators.clipPathEvenOdd = "W*", 
        Operators.endPath = "n", Operators.setGraphicsState = "gs", Operators.comment = "%", 
        Operators.evenOdd = "*", Operators.setMiterLimit = "M", Operators;
    }(), DictionaryProperties = function() {
        return function() {
            this.pages = "Pages", this.kids = "Kids", this.count = "Count", this.resources = "Resources", 
            this.type = "Type", this.size = "Size", this.mediaBox = "MediaBox", this.parent = "Parent", 
            this.root = "Root", this.decodeParms = "DecodeParms", this.filter = "Filter", this.font = "Font", 
            this.type1 = "Type1", this.baseFont = "BaseFont", this.encoding = "Encoding", this.subtype = "Subtype", 
            this.contents = "Contents", this.procset = "ProcSet", this.colorSpace = "ColorSpace", 
            this.extGState = "ExtGState", this.pattern = "Pattern", this.xObject = "XObject", 
            this.length = "Length", this.width = "Width", this.height = "Height", this.bitsPerComponent = "BitsPerComponent", 
            this.image = "Image", this.dctdecode = "DCTDecode", this.columns = "Columns", this.blackIs1 = "BlackIs1", 
            this.k = "K", this.s = "S", this.predictor = "Predictor", this.deviceRgb = "DeviceRGB", 
            this.next = "Next", this.action = "Action", this.link = "Link", this.a = "A", this.annot = "Annot", 
            this.p = "P", this.c = "C", this.rect = "Rect", this.uri = "URI", this.annots = "Annots", 
            this.ca = "ca", this.CA = "CA", this.xyz = "XYZ", this.fit = "Fit", this.dest = "Dest", 
            this.BM = "BM", this.flatedecode = "FlateDecode", this.rotate = "Rotate", this.bBox = "BBox", 
            this.form = "Form", this.w = "W", this.cIDFontType2 = "CIDFontType2", this.cIDToGIDMap = "CIDToGIDMap", 
            this.identity = "Identity", this.dw = "DW", this.fontDescriptor = "FontDescriptor", 
            this.cIDSystemInfo = "CIDSystemInfo", this.fontName = "FontName", this.flags = "Flags", 
            this.fontBBox = "FontBBox", this.missingWidth = "MissingWidth", this.stemV = "StemV", 
            this.italicAngle = "ItalicAngle", this.capHeight = "CapHeight", this.ascent = "Ascent", 
            this.descent = "Descent", this.leading = "Leading", this.avgWidth = "AvgWidth", 
            this.fontFile2 = "FontFile2", this.maxWidth = "MaxWidth", this.xHeight = "XHeight", 
            this.stemH = "StemH", this.registry = "Registry", this.ordering = "Ordering", this.supplement = "Supplement", 
            this.type0 = "Type0", this.identityH = "Identity-H", this.toUnicode = "ToUnicode", 
            this.descendantFonts = "DescendantFonts";
        };
    }(), PdfDictionary = function() {
        function PdfDictionary(dictionary) {
            if (this.position7 = -1, this.primitiveItems = new Dictionary(), this.prefix = "<<", 
            this.suffix = ">>", this.resources = [], this.object = null, this.archive = !0, 
            this.isFont = !1, void 0 === dictionary) this.primitiveItems = new Dictionary(), 
            this.encrypt = !0, this.dictionaryProperties = new DictionaryProperties(); else {
                this.primitiveItems = new Dictionary();
                for (var keys = dictionary.items.keys(), values = dictionary.items.values(), index = 0; index < dictionary.items.size(); index++) this.primitiveItems.setValue(keys[index], values[index]);
                this.status = dictionary.status, this.freezeChanges(this), this.encrypt = !0, this.dictionaryProperties = new DictionaryProperties();
            }
        }
        return Object.defineProperty(PdfDictionary.prototype, "items", {
            get: function() {
                return this.primitiveItems;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDictionary.prototype, "status", {
            get: function() {
                return this.status7;
            },
            set: function(value) {
                this.status7 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDictionary.prototype, "isSaving", {
            get: function() {
                return this.isSaving7;
            },
            set: function(value) {
                this.isSaving7 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDictionary.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index7;
            },
            set: function(value) {
                this.index7 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDictionary.prototype, "clonedObject", {
            get: function() {
                return this.object;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDictionary.prototype, "position", {
            get: function() {
                return this.position7;
            },
            set: function(value) {
                this.position7 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDictionary.prototype, "Count", {
            get: function() {
                return this.primitiveItems.size();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDictionary.prototype, "Dictionary", {
            get: function() {
                return this;
            },
            enumerable: !0,
            configurable: !0
        }), PdfDictionary.prototype.getArchive = function() {
            return this.archive;
        }, PdfDictionary.prototype.setArchive = function(value) {
            this.archive = value;
        }, PdfDictionary.prototype.setEncrypt = function(value) {
            this.encrypt = value, this.modify();
        }, PdfDictionary.prototype.getEncrypt = function() {
            return this.encrypt;
        }, PdfDictionary.prototype.freezeChanges = function(freezer) {
            this.bChanged = !1;
        }, PdfDictionary.prototype.clone = function(crossTable) {
            return new PdfDictionary();
        }, PdfDictionary.prototype.modify = function() {
            this.bChanged = !0;
        }, PdfDictionary.prototype.remove = function(key) {
            "string" != typeof key ? (this.primitiveItems.remove(key.value), this.modify()) : this.remove(new PdfName(key));
        }, PdfDictionary.prototype.containsKey = function(key) {
            return this.primitiveItems.containsKey(key.toString());
        }, PdfDictionary.prototype.onBeginSave = function() {
            this.beginSave.sender.beginSave();
        }, PdfDictionary.prototype.onFontDictionaryBeginSave = function() {
            this.fontDictionaryBeginSave.sender.fontDictionaryBeginSave();
        }, PdfDictionary.prototype.onDescendantFontBeginSave = function() {
            this.descendantFontBeginSave.sender.descendantFontBeginSave();
        }, PdfDictionary.prototype.onTemplateBeginSave = function() {
            this.pageBeginDrawTemplate.sender.pageBeginSave();
        }, PdfDictionary.prototype.onBeginAnnotationSave = function() {
            this.annotationBeginSave.sender.beginSave();
        }, PdfDictionary.prototype.onSectionBeginSave = function(writer) {
            var saveEvent = this.sectionBeginSave;
            saveEvent.sender.beginSave(saveEvent.state, writer);
        }, PdfDictionary.prototype.save = function(writer, bRaiseEvent) {
            void 0 === bRaiseEvent ? this.save(writer, !0) : (writer.write(this.prefix), void 0 !== this.beginSave && this.onBeginSave(), 
            void 0 !== this.descendantFontBeginSave && this.onDescendantFontBeginSave(), void 0 !== this.fontDictionaryBeginSave && this.onFontDictionaryBeginSave(), 
            void 0 !== this.annotationBeginSave && this.onBeginAnnotationSave(), void 0 !== this.sectionBeginSave && this.onSectionBeginSave(writer), 
            void 0 !== this.pageBeginDrawTemplate && this.onTemplateBeginSave(), this.Count > 0 && this.saveItems(writer), 
            writer.write(this.suffix), writer.write(Operators.newLine));
        }, PdfDictionary.prototype.saveItems = function(writer) {
            writer.write(Operators.newLine);
            for (var keys = this.primitiveItems.keys(), values = this.primitiveItems.values(), index = 0; index < keys.length; index++) {
                var key = keys[index];
                new PdfName(key).save(writer), writer.write(Operators.whiteSpace);
                values[index].save(writer), writer.write(Operators.newLine);
            }
        }, PdfDictionary;
    }(), SaveSectionCollectionEventHandler = function() {
        return function(sender) {
            this.sender = sender;
        };
    }(), SaveDescendantFontEventHandler = function() {
        return function(sender) {
            this.sender = sender;
        };
    }(), SaveFontDictionaryEventHandler = function() {
        return function(sender) {
            this.sender = sender;
        };
    }(), SaveAnnotationEventHandler = function() {
        return function(sender) {
            this.sender = sender;
        };
    }(), SaveSectionEventHandler = function() {
        return function(sender, state) {
            this.sender = sender, this.state = state;
        };
    }(), SaveTemplateEventHandler = function() {
        return function(sender) {
            this.sender = sender;
        };
    }(), PdfNumber = function() {
        function PdfNumber(value) {
            this.position5 = -1, this.value = value;
        }
        return Object.defineProperty(PdfNumber.prototype, "intValue", {
            get: function() {
                return this.value;
            },
            set: function(value) {
                this.value = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfNumber.prototype, "isInteger", {
            get: function() {
                return this.integer;
            },
            set: function(value) {
                this.integer = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfNumber.prototype, "status", {
            get: function() {
                return this.status5;
            },
            set: function(value) {
                this.status5 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfNumber.prototype, "isSaving", {
            get: function() {
                return this.isSaving5;
            },
            set: function(value) {
                this.isSaving5 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfNumber.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index5;
            },
            set: function(value) {
                this.index5 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfNumber.prototype, "position", {
            get: function() {
                return this.position5;
            },
            set: function(value) {
                this.position5 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfNumber.prototype, "clonedObject", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), PdfNumber.prototype.save = function(writer) {
            writer.write(this.intValue.toString());
        }, PdfNumber.prototype.clone = function(crossTable) {
            return new PdfNumber(this.value);
        }, PdfNumber.floatToString = function(number) {
            var returnString = number.toFixed(2);
            return "0.00" === returnString && (returnString = ".00"), returnString;
        }, PdfNumber.min = function(x, y, z) {
            var r = Math.min(x, y);
            return Math.min(z, r);
        }, PdfNumber;
    }(), PdfArray = function() {
        function PdfArray(array) {
            if (this.startMark = "[", this.endMark = "]", this.position9 = -1, this.clonedObject9 = null, 
            this.isFont = !1, void 0 === array) this.internalElements = []; else if (void 0 === array || array instanceof PdfArray) {
                var tempArray = array;
                this.internalElements = [];
                for (index = 0; index < tempArray.elements.length; index++) this.internalElements.push(tempArray.elements[index]);
            } else for (var tempNumberArray = array, index = 0; index < tempNumberArray.length; index++) {
                var pdfNumber = new PdfNumber(tempNumberArray[index]);
                this.add(pdfNumber);
            }
        }
        return PdfArray.prototype.items = function(index) {
            return this.internalElements[index];
        }, Object.defineProperty(PdfArray.prototype, "count", {
            get: function() {
                return this.internalElements.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfArray.prototype, "status", {
            get: function() {
                return this.status9;
            },
            set: function(value) {
                this.status9 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfArray.prototype, "isSaving", {
            get: function() {
                return this.isSaving9;
            },
            set: function(value) {
                this.isSaving9 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfArray.prototype, "clonedObject", {
            get: function() {
                return this.clonedObject9;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfArray.prototype, "position", {
            get: function() {
                return this.position9;
            },
            set: function(value) {
                this.position9 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfArray.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index9;
            },
            set: function(value) {
                this.index9 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfArray.prototype, "CrossTable", {
            get: function() {
                return this.pdfCrossTable;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfArray.prototype, "elements", {
            get: function() {
                return this.internalElements;
            },
            enumerable: !0,
            configurable: !0
        }), PdfArray.prototype.add = function(element) {
            void 0 === this.internalElements && (this.internalElements = []), this.internalElements.push(element), 
            this.markedChange();
        }, PdfArray.prototype.markedChange = function() {
            this.bChanged = !0;
        }, PdfArray.prototype.contains = function(element) {
            for (var index = 0; index < this.internalElements.length; index++) {
                var tempElement = this.internalElements[index], inputElement = element;
                if (null != tempElement && void 0 !== tempElement && null != inputElement && void 0 !== inputElement && tempElement.value === inputElement.value) return !0;
            }
            return !1;
        }, PdfArray.prototype.getItems = function(index) {
            return this.internalElements[index];
        }, PdfArray.prototype.save = function(writer) {
            writer.write(this.startMark);
            for (var i = 0, len = this.count; i < len; i++) this.getItems(i).save(writer), i + 1 !== len && writer.write(Operators.whiteSpace);
            writer.write(this.endMark);
        }, PdfArray.prototype.clone = function(crossTable) {
            this.clonedObject9 = null;
            for (var newArray = new PdfArray(), index = 0; index < this.internalElements.length; index++) {
                var obj = this.internalElements[index];
                newArray.add(obj.clone(crossTable));
            }
            return newArray.pdfCrossTable = crossTable, this.clonedObject9 = newArray, newArray;
        }, PdfArray.fromRectangle = function(bounds) {
            return new PdfArray([ bounds.x, bounds.y, bounds.width, bounds.height ]);
        }, PdfArray.prototype.insert = function(index, element) {
            if (index < this.internalElements.length && index > 0) {
                for (var tempElements = [], i = 0; i < index; i++) tempElements.push(this.internalElements[i]);
                tempElements.push(element);
                for (i = index; i < this.internalElements.length; i++) tempElements.push(this.internalElements[i]);
                this.internalElements = tempElements;
            } else this.internalElements.push(element);
            this.markChanged();
        }, PdfArray.prototype.indexOf = function(element) {
            return this.internalElements.indexOf(element);
        }, PdfArray.prototype.remove = function(element) {
            var index = this.internalElements.indexOf(element);
            this.internalElements[index] = null, this.markChanged();
        }, PdfArray.prototype.removeAt = function(index) {
            if (this.internalElements.length > index) {
                for (var tempArray = [], i = 0; i < index; i++) tempArray.push(this.internalElements[i]);
                for (i = index + 1; i < this.internalElements.length; i++) tempArray.push(this.internalElements[i]);
                this.internalElements = tempArray;
            }
            this.markChanged();
        }, PdfArray.prototype.clear = function() {
            this.internalElements = [], this.markChanged();
        }, PdfArray.prototype.markChanged = function() {
            this.bChanged = !0;
        }, PdfArray;
    }(), __extends$71 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfStream = function(_super) {
        function PdfStream(dictionary, data) {
            var _this = _super.call(this, dictionary) || this;
            return _this.dicPrefix = "stream", _this.dicSuffix = "endstream", _this.clonedObject2 = null, 
            _this.bCompress = !0, _this.isImageStream = !1, _this.isFontStream = !1, void 0 !== dictionary || void 0 !== data ? (_this.dataStream2 = [], 
            _this.dataStream2 = data, _this.bCompress2 = !1) : (_this.dataStream2 = [], _this.bCompress2 = !0), 
            _this;
        }
        return __extends$71(PdfStream, _super), Object.defineProperty(PdfStream.prototype, "internalStream", {
            get: function() {
                return this.dataStream2;
            },
            set: function(value) {
                this.dataStream2 = [], this.dataStream2 = value, this.modify();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStream.prototype, "isImage", {
            get: function() {
                return this.isImageStream;
            },
            set: function(value) {
                this.isImageStream = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStream.prototype, "isFont", {
            get: function() {
                return this.isFontStream;
            },
            set: function(value) {
                this.isFontStream = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStream.prototype, "compress", {
            get: function() {
                return this.bCompress;
            },
            set: function(value) {
                this.bCompress = value, this.modify();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStream.prototype, "data", {
            get: function() {
                return this.dataStream2;
            },
            set: function(value) {
                this.dataStream2 = [], this.dataStream2 = value, this.modify();
            },
            enumerable: !0,
            configurable: !0
        }), PdfStream.prototype.clearStream = function() {
            this.internalStream = [], this.items.containsKey(this.dictionaryProperties.filter) && this.remove(this.dictionaryProperties.filter), 
            this.bCompress = !0, this.modify();
        }, PdfStream.prototype.write = function(text) {
            if (null == text) throw new Error("ArgumentNullException:text");
            if (text.length <= 0) throw new Error("ArgumentException: Can not write an empty string, text");
            this.dataStream2.push(text), this.modify();
        }, PdfStream.prototype.writeBytes = function(data) {
            if (null === data) throw new Error("ArgumentNullException:data");
            if (data.length <= 0) throw new Error("ArgumentException: Can not write an empty bytes, data");
            for (var text = "", i = 0; i < data.length; i++) text += String.fromCharCode(data[i]);
            this.dataStream2.push(text), this.modify();
        }, PdfStream.prototype.onCmapBeginSave = function() {
            this.cmapBeginSave.sender.cmapBeginSave();
        }, PdfStream.prototype.onFontProgramBeginSave = function() {
            this.fontProgramBeginSave.sender.fontProgramBeginSave();
        }, PdfStream.prototype.compressContent = function(data, writer) {
            if (this.bCompress) {
                for (var byteArray = [], i = 0; i < data.length; i++) byteArray.push(data.charCodeAt(i));
                var dataArray = new Uint8Array(byteArray), sw = new CompressedStreamWriter();
                sw.write(dataArray, 0, dataArray.length), sw.close(), data = sw.getCompressedString, 
                this.addFilter(this.dictionaryProperties.flatedecode);
            }
            return data;
        }, PdfStream.prototype.addFilter = function(filterName) {
            var obj = this.items.getValue(this.dictionaryProperties.filter);
            if (obj instanceof PdfReferenceHolder) {
                obj = obj.object;
            }
            var array = obj, name = obj;
            null != name && ((array = new PdfArray()).insert(0, name), this.items.setValue(this.dictionaryProperties.filter, array)), 
            name = new PdfName(filterName), null == array ? this.items.setValue(this.dictionaryProperties.filter, name) : array.insert(0, name);
        }, PdfStream.prototype.save = function(writer) {
            void 0 !== this.cmapBeginSave && this.onCmapBeginSave(), void 0 !== this.fontProgramBeginSave && this.onFontProgramBeginSave();
            for (var data = "", i = 0; i < this.data.length; i++) data += this.data[i];
            data.length > 1 && !this.isImage && !this.isFont && (data = "q\r\n" + data + "Q\r\n");
            var length = (data = this.compressContent(data, writer)).length;
            this.items.setValue(this.dictionaryProperties.length, new PdfNumber(length)), _super.prototype.save.call(this, writer, !1), 
            writer.write(this.dicPrefix), writer.write(Operators.newLine), data.length > 0 && writer.write(data), 
            writer.write(Operators.newLine), writer.write(this.dicSuffix), writer.write(Operators.newLine);
        }, PdfStream.bytesToString = function(byteArray) {
            for (var output = "", i = 0; i < byteArray.length; i++) output += String.fromCharCode(byteArray[i]);
            return output;
        }, PdfStream;
    }(PdfDictionary), SaveCmapEventHandler = function() {
        return function(sender) {
            this.sender = sender;
        };
    }(), SaveFontProgramEventHandler = function() {
        return function(sender) {
            this.sender = sender;
        };
    }();
    !function(InternalEnum) {
        !function(ForceEncoding) {
            ForceEncoding[ForceEncoding.None = 0] = "None", ForceEncoding[ForceEncoding.Ascii = 1] = "Ascii", 
            ForceEncoding[ForceEncoding.Unicode = 2] = "Unicode";
        }(InternalEnum.ForceEncoding || (InternalEnum.ForceEncoding = {}));
        var SourceType;
        !function(SourceType) {
            SourceType[SourceType.StringValue = 0] = "StringValue", SourceType[SourceType.ByteBuffer = 1] = "ByteBuffer";
        }(SourceType || (SourceType = {}));
    }(InternalEnum || (InternalEnum = {}));
    var PdfHorizontalAlignment, PdfString = function() {
        function PdfString(value) {
            if (this.bHex = !1, this.position1 = -1, this.clonedObject1 = null, this.bDecrypted = !1, 
            this.isParentDecrypted = !1, this.isPacked = !1, this.isFormField = !1, this.isColorSpace = !1, 
            this.isHexString = !0, void 0 === value) this.bHex = !1; else if (!(value.length > 0 && "0xfeff" === value[0])) {
                this.stringValue = value, this.data = [];
                for (var i = 0; i < value.length; ++i) this.data.push(value.charCodeAt(i));
            }
        }
        return Object.defineProperty(PdfString.prototype, "hex", {
            get: function() {
                return this.bHex;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "value", {
            get: function() {
                return this.stringValue;
            },
            set: function(value) {
                this.stringValue = value, this.data = null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "status", {
            get: function() {
                return this.status1;
            },
            set: function(value) {
                this.status1 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "isSaving", {
            get: function() {
                return this.isSaving1;
            },
            set: function(value) {
                this.isSaving1 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index1;
            },
            set: function(value) {
                this.index1 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "clonedObject", {
            get: function() {
                return this.clonedObject1;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "position", {
            get: function() {
                return this.position1;
            },
            set: function(value) {
                this.position1 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "CrossTable", {
            get: function() {
                return this.crossTable;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "converted", {
            get: function() {
                return this.bConverted;
            },
            set: function(value) {
                this.bConverted = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfString.prototype, "encode", {
            get: function() {
                return this.bForceEncoding;
            },
            set: function(value) {
                this.bForceEncoding = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfString.bytesToHex = function(bytes) {
            if (null == bytes) return "";
            return "";
        }, PdfString.prototype.save = function(writer) {
            if (null === writer) throw new Error("ArgumentNullException : writer");
            void 0 !== this.encode && this.encode === InternalEnum.ForceEncoding.Ascii ? writer.write(this.pdfEncode()) : writer.write(PdfString.stringMark[0] + this.value + PdfString.stringMark[1]);
        }, PdfString.prototype.pdfEncode = function() {
            var result = "";
            if (void 0 !== this.encode && this.encode === InternalEnum.ForceEncoding.Ascii) {
                for (var data = this.escapeSymbols(this.value), i = 0; i < data.length; i++) result += String.fromCharCode(data[i]);
                result = PdfString.stringMark[0] + result + PdfString.stringMark[1];
            } else result = this.value;
            return result;
        }, PdfString.prototype.escapeSymbols = function(value) {
            for (var data = [], i = 0; i < value.length; i++) {
                var currentData = value.charCodeAt(i);
                switch (currentData) {
                  case 40:
                  case 41:
                    data.push(92), data.push(currentData);
                    break;

                  case 13:
                    data.push(92), data.push(114);
                    break;

                  case 92:
                    data.push(92), data.push(currentData);
                    break;

                  default:
                    data.push(currentData);
                }
            }
            return data;
        }, PdfString.prototype.clone = function(crossTable) {
            if (null !== this.clonedObject1 && this.clonedObject1.CrossTable === crossTable) return this.clonedObject1;
            this.clonedObject1 = null;
            var newString = new PdfString(this.stringValue);
            return newString.bHex = this.bHex, newString.crossTable = crossTable, newString.isColorSpace = this.isColorSpace, 
            this.clonedObject1 = newString, newString;
        }, PdfString.toUnicodeArray = function(value, bAddPrefix) {
            if (null == value) throw new Error("Argument Null Exception : value");
            for (var output = [], i = 0; i < value.length; i++) {
                var code = value.charCodeAt(i);
                output.push(code / 256 >>> 0), output.push(255 & code);
            }
            return output;
        }, PdfString.byteToString = function(data) {
            if (null == data) throw new Error("Argument Null Exception : stream");
            for (var result = "", i = 0; i < data.length; ++i) result += String.fromCharCode(data[i]);
            return result;
        }, PdfString.stringMark = "()", PdfString.hexStringMark = "<>", PdfString.hexFormatPattern = "{0:X2}", 
        PdfString;
    }(), PdfReference = function() {
        function PdfReference(objNumber, genNumber) {
            this.index3 = -1, this.position3 = -1, this.objNumber = 0, this.genNumber = 0, "number" == typeof objNumber && "number" == typeof genNumber ? (this.objNumber = objNumber, 
            this.genNumber = genNumber) : (this.objNumber = Number(objNumber), this.genNumber = Number(genNumber));
        }
        return Object.defineProperty(PdfReference.prototype, "status", {
            get: function() {
                return this.status3;
            },
            set: function(value) {
                this.status3 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReference.prototype, "isSaving", {
            get: function() {
                return this.isSaving3;
            },
            set: function(value) {
                this.isSaving3 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReference.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index3;
            },
            set: function(value) {
                this.index3 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReference.prototype, "position", {
            get: function() {
                return this.position3;
            },
            set: function(value) {
                this.position3 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReference.prototype, "clonedObject", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), PdfReference.prototype.save = function(writer) {
            writer.write(this.toString());
        }, PdfReference.prototype.toString = function() {
            return this.objNumber.toString() + " " + this.genNumber.toString() + " R";
        }, PdfReference.prototype.clone = function(crossTable) {
            return null;
        }, PdfReference;
    }(), PdfReferenceHolder = function() {
        function PdfReferenceHolder(obj1, obj2) {
            if (this.index4 = -1, this.position4 = -1, this.objectIndex = -1, this.dictionaryProperties = new DictionaryProperties(), 
            obj1 instanceof PdfArray || obj1 instanceof PdfDictionary || obj1 instanceof PdfName || obj1 instanceof PdfNumber || obj1 instanceof PdfStream || obj1 instanceof PdfReference || obj1 instanceof PdfString) this.primitiveObject = obj1; else {
                var tempObj = obj1;
                this.constructor(tempObj.element);
            }
        }
        return Object.defineProperty(PdfReferenceHolder.prototype, "status", {
            get: function() {
                return this.status4;
            },
            set: function(value) {
                this.status4 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "isSaving", {
            get: function() {
                return this.isSaving4;
            },
            set: function(value) {
                this.isSaving4 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index4;
            },
            set: function(value) {
                this.index4 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "position", {
            get: function() {
                return this.position4;
            },
            set: function(value) {
                this.position4 = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "clonedObject", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "object", {
            get: function() {
                return this.primitiveObject;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "reference", {
            get: function() {
                return this.pdfReference;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "index", {
            get: function() {
                return this.objectIndex;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfReferenceHolder.prototype, "element", {
            get: function() {
                return this.primitiveObject;
            },
            enumerable: !0,
            configurable: !0
        }), PdfReferenceHolder.prototype.save = function(writer) {
            writer.position;
            var cTable = writer.document.crossTable;
            this.object.isSaving = !0;
            cTable.getReference(this.object).save(writer);
        }, PdfReferenceHolder.prototype.clone = function(crossTable) {
            return null;
        }, PdfReferenceHolder;
    }(), PdfAction = function() {
        function PdfAction() {
            this.action = null, this.dictionaryProperties = new DictionaryProperties(), this.initialize();
        }
        return Object.defineProperty(PdfAction.prototype, "next", {
            get: function() {
                return this.action;
            },
            set: function(value) {
                this.action = value, this.dictionary.items.setValue(this.dictionaryProperties.next, new PdfReferenceHolder(this.action));
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAction.prototype, "dictionary", {
            get: function() {
                return void 0 === this.pdfDictionary && (this.pdfDictionary = new PdfDictionary()), 
                this.pdfDictionary;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAction.prototype.initialize = function() {
            this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.action));
        }, Object.defineProperty(PdfAction.prototype, "element", {
            get: function() {
                return this.dictionary;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAction;
    }(), __extends$72 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfUriAction = function(_super) {
        function PdfUriAction(uri) {
            var _this = _super.call(this) || this;
            return _this.uniformResourceIdentifier = "", _this;
        }
        return __extends$72(PdfUriAction, _super), Object.defineProperty(PdfUriAction.prototype, "uri", {
            get: function() {
                return this.uniformResourceIdentifier;
            },
            set: function(value) {
                this.uniformResourceIdentifier = value, this.dictionary.items.setValue(this.dictionaryProperties.uri, new PdfString(this.uniformResourceIdentifier));
            },
            enumerable: !0,
            configurable: !0
        }), PdfUriAction.prototype.initialize = function() {
            _super.prototype.initialize.call(this), this.dictionary.items.setValue(this.dictionaryProperties.s, new PdfName(this.dictionaryProperties.uri));
        }, PdfUriAction;
    }(PdfAction);
    !function(PdfHorizontalAlignment) {
        PdfHorizontalAlignment[PdfHorizontalAlignment.Left = 0] = "Left", PdfHorizontalAlignment[PdfHorizontalAlignment.Center = 1] = "Center", 
        PdfHorizontalAlignment[PdfHorizontalAlignment.Right = 2] = "Right";
    }(PdfHorizontalAlignment || (PdfHorizontalAlignment = {}));
    var PdfVerticalAlignment;
    !function(PdfVerticalAlignment) {
        PdfVerticalAlignment[PdfVerticalAlignment.Top = 0] = "Top", PdfVerticalAlignment[PdfVerticalAlignment.Middle = 1] = "Middle", 
        PdfVerticalAlignment[PdfVerticalAlignment.Bottom = 2] = "Bottom";
    }(PdfVerticalAlignment || (PdfVerticalAlignment = {}));
    var PdfTextAlignment;
    !function(PdfTextAlignment) {
        PdfTextAlignment[PdfTextAlignment.Left = 0] = "Left", PdfTextAlignment[PdfTextAlignment.Center = 1] = "Center", 
        PdfTextAlignment[PdfTextAlignment.Right = 2] = "Right", PdfTextAlignment[PdfTextAlignment.Justify = 3] = "Justify";
    }(PdfTextAlignment || (PdfTextAlignment = {}));
    var TextRenderingMode;
    !function(TextRenderingMode) {
        TextRenderingMode[TextRenderingMode.Fill = 0] = "Fill", TextRenderingMode[TextRenderingMode.Stroke = 1] = "Stroke", 
        TextRenderingMode[TextRenderingMode.FillStroke = 2] = "FillStroke", TextRenderingMode[TextRenderingMode.None = 3] = "None", 
        TextRenderingMode[TextRenderingMode.ClipFlag = 4] = "ClipFlag", TextRenderingMode[TextRenderingMode.ClipFill = 4] = "ClipFill", 
        TextRenderingMode[TextRenderingMode.ClipStroke = 5] = "ClipStroke", TextRenderingMode[TextRenderingMode.ClipFillStroke = 6] = "ClipFillStroke", 
        TextRenderingMode[TextRenderingMode.Clip = 7] = "Clip";
    }(TextRenderingMode || (TextRenderingMode = {}));
    var PdfLineJoin;
    !function(PdfLineJoin) {
        PdfLineJoin[PdfLineJoin.Miter = 0] = "Miter", PdfLineJoin[PdfLineJoin.Round = 1] = "Round", 
        PdfLineJoin[PdfLineJoin.Bevel = 2] = "Bevel";
    }(PdfLineJoin || (PdfLineJoin = {}));
    var PdfLineCap;
    !function(PdfLineCap) {
        PdfLineCap[PdfLineCap.Flat = 0] = "Flat", PdfLineCap[PdfLineCap.Round = 1] = "Round", 
        PdfLineCap[PdfLineCap.Square = 2] = "Square";
    }(PdfLineCap || (PdfLineCap = {}));
    var PdfDashStyle;
    !function(PdfDashStyle) {
        PdfDashStyle[PdfDashStyle.Solid = 0] = "Solid", PdfDashStyle[PdfDashStyle.Dash = 1] = "Dash", 
        PdfDashStyle[PdfDashStyle.Dot = 2] = "Dot", PdfDashStyle[PdfDashStyle.DashDot = 3] = "DashDot", 
        PdfDashStyle[PdfDashStyle.DashDotDot = 4] = "DashDotDot", PdfDashStyle[PdfDashStyle.Custom = 5] = "Custom";
    }(PdfDashStyle || (PdfDashStyle = {}));
    var PdfFillMode;
    !function(PdfFillMode) {
        PdfFillMode[PdfFillMode.Winding = 0] = "Winding", PdfFillMode[PdfFillMode.Alternate = 1] = "Alternate";
    }(PdfFillMode || (PdfFillMode = {}));
    var PdfColorSpace;
    !function(PdfColorSpace) {
        PdfColorSpace[PdfColorSpace.Rgb = 0] = "Rgb", PdfColorSpace[PdfColorSpace.Cmyk = 1] = "Cmyk", 
        PdfColorSpace[PdfColorSpace.GrayScale = 2] = "GrayScale", PdfColorSpace[PdfColorSpace.Indexed = 3] = "Indexed";
    }(PdfColorSpace || (PdfColorSpace = {}));
    var PdfBlendMode;
    !function(PdfBlendMode) {
        PdfBlendMode[PdfBlendMode.Normal = 0] = "Normal", PdfBlendMode[PdfBlendMode.Multiply = 1] = "Multiply", 
        PdfBlendMode[PdfBlendMode.Screen = 2] = "Screen", PdfBlendMode[PdfBlendMode.Overlay = 3] = "Overlay", 
        PdfBlendMode[PdfBlendMode.Darken = 4] = "Darken", PdfBlendMode[PdfBlendMode.Lighten = 5] = "Lighten", 
        PdfBlendMode[PdfBlendMode.ColorDodge = 6] = "ColorDodge", PdfBlendMode[PdfBlendMode.ColorBurn = 7] = "ColorBurn", 
        PdfBlendMode[PdfBlendMode.HardLight = 8] = "HardLight", PdfBlendMode[PdfBlendMode.SoftLight = 9] = "SoftLight", 
        PdfBlendMode[PdfBlendMode.Difference = 10] = "Difference", PdfBlendMode[PdfBlendMode.Exclusion = 11] = "Exclusion", 
        PdfBlendMode[PdfBlendMode.Hue = 12] = "Hue", PdfBlendMode[PdfBlendMode.Saturation = 13] = "Saturation", 
        PdfBlendMode[PdfBlendMode.Color = 14] = "Color", PdfBlendMode[PdfBlendMode.Luminosity = 15] = "Luminosity";
    }(PdfBlendMode || (PdfBlendMode = {}));
    var PdfGraphicsUnit;
    !function(PdfGraphicsUnit) {
        PdfGraphicsUnit[PdfGraphicsUnit.Centimeter = 0] = "Centimeter", PdfGraphicsUnit[PdfGraphicsUnit.Pica = 1] = "Pica", 
        PdfGraphicsUnit[PdfGraphicsUnit.Pixel = 2] = "Pixel", PdfGraphicsUnit[PdfGraphicsUnit.Point = 3] = "Point", 
        PdfGraphicsUnit[PdfGraphicsUnit.Inch = 4] = "Inch", PdfGraphicsUnit[PdfGraphicsUnit.Document = 5] = "Document", 
        PdfGraphicsUnit[PdfGraphicsUnit.Millimeter = 6] = "Millimeter";
    }(PdfGraphicsUnit || (PdfGraphicsUnit = {}));
    var PdfGridImagePosition;
    !function(PdfGridImagePosition) {
        PdfGridImagePosition[PdfGridImagePosition.Fit = 0] = "Fit", PdfGridImagePosition[PdfGridImagePosition.Center = 1] = "Center", 
        PdfGridImagePosition[PdfGridImagePosition.Stretch = 2] = "Stretch", PdfGridImagePosition[PdfGridImagePosition.Tile = 3] = "Tile";
    }(PdfGridImagePosition || (PdfGridImagePosition = {}));
    var PdfTextDirection;
    !function(PdfTextDirection) {
        PdfTextDirection[PdfTextDirection.None = 0] = "None", PdfTextDirection[PdfTextDirection.LeftToRight = 1] = "LeftToRight", 
        PdfTextDirection[PdfTextDirection.RightToLeft = 2] = "RightToLeft";
    }(PdfTextDirection || (PdfTextDirection = {}));
    var PdfFontStyle, PdfColor = function() {
        function PdfColor(color1, color2, color3, color4) {
            color1 instanceof PdfColor ? (this.redColor = color1.r, this.greenColor = color1.g, 
            this.blueColor = color1.b, this.grayColor = color1.gray, this.alpha = color1.alpha, 
            this.filled = 0 !== this.alpha) : "number" == typeof color1 && "number" == typeof color2 && "number" == typeof color3 && void 0 === color4 ? this.constructor(PdfColor.maxColourChannelValue, color1, color2, color3) : "number" == typeof color1 && "number" == typeof color2 && "number" == typeof color3 && "number" == typeof color4 && (this.redColor = color2, 
            this.cyanColor = 0, this.greenColor = color3, this.magentaColor = 0, this.blueColor = color4, 
            this.yellowColor = 0, this.blackColor = 0, this.grayColor = 0, this.alpha = color1, 
            this.filled = !0, this.assignCMYK(color2, color3, color4));
        }
        return PdfColor.prototype.assignCMYK = function(r, g, b) {
            var red = r / PdfColor.maxColourChannelValue, green = g / PdfColor.maxColourChannelValue, blue = b / PdfColor.maxColourChannelValue, black = PdfNumber.min(1 - red, 1 - green, 1 - blue), cyan = 1 === black ? 0 : (1 - red - black) / (1 - black), magenta = 1 === black ? 0 : (1 - green - black) / (1 - black), yellow = 1 === black ? 0 : (1 - blue - black) / (1 - black);
            this.blackColor = black, this.cyanColor = cyan, this.magentaColor = magenta, this.yellowColor = yellow;
        }, Object.defineProperty(PdfColor.prototype, "r", {
            get: function() {
                return this.redColor;
            },
            set: function(value) {
                this.redColor = value, this.assignCMYK(this.redColor, this.greenColor, this.blueColor), 
                this.filled = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "red", {
            get: function() {
                return this.r / PdfColor.maxColourChannelValue;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "b", {
            get: function() {
                return this.blueColor;
            },
            set: function(value) {
                this.blueColor = value, this.assignCMYK(this.redColor, this.greenColor, this.blueColor), 
                this.filled = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "blue", {
            get: function() {
                return this.b / PdfColor.maxColourChannelValue;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "g", {
            get: function() {
                return this.greenColor;
            },
            set: function(value) {
                this.greenColor = value, this.assignCMYK(this.redColor, this.greenColor, this.blueColor), 
                this.filled = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "green", {
            get: function() {
                return this.g / PdfColor.maxColourChannelValue;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "gray", {
            get: function() {
                return (this.redColor + this.greenColor + this.blueColor) / (3 * PdfColor.maxColourChannelValue);
            },
            set: function(value) {
                this.grayColor = value < 0 ? 0 : value > 1 ? 1 : value, this.r = this.grayColor * PdfColor.maxColourChannelValue, 
                this.g = this.grayColor * PdfColor.maxColourChannelValue, this.b = this.grayColor * PdfColor.maxColourChannelValue, 
                this.assignCMYK(this.redColor, this.greenColor, this.blueColor), this.filled = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "isEmpty", {
            get: function() {
                return !this.filled;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfColor.prototype, "a", {
            get: function() {
                return this.alpha;
            },
            set: function(value) {
                this.alpha = value < 0 ? 0 : value, this.filled = !0;
            },
            enumerable: !0,
            configurable: !0
        }), PdfColor.prototype.toString = function(colorSpace, stroke) {
            return this.isEmpty ? "" : this.rgbToString(stroke);
        }, PdfColor.prototype.rgbToString = function(ifStroking) {
            var r = this.r, g = this.g, b = this.b, key = (r << 16) + (g << 8) + b;
            ifStroking && (key += 1 << 24);
            var colour = "", obj = null;
            if (PdfColor.rgbStrings.containsKey(key) && (obj = PdfColor.rgbStrings.getValue(key)), 
            null == obj) {
                var red = r / PdfColor.maxColourChannelValue, green = g / PdfColor.maxColourChannelValue, blue = b / PdfColor.maxColourChannelValue;
                colour = ifStroking ? red.toString() + " " + green.toString() + " " + blue.toString() + " RG" : red.toString() + " " + green.toString() + " " + blue.toString() + " rg", 
                PdfColor.rgbStrings.setValue(key, colour);
            } else colour = obj.toString();
            return colour + Operators.newLine;
        }, PdfColor.prototype.toArray = function(colorSpace) {
            var array = new PdfArray();
            switch (colorSpace) {
              case PdfColorSpace.Rgb:
                array.add(new PdfNumber(this.red)), array.add(new PdfNumber(this.green)), array.add(new PdfNumber(this.blue));
                break;

              default:
                throw new Error("NotSupportedException : Unsupported colour space.");
            }
            return array;
        }, PdfColor.rgbStrings = new Dictionary(), PdfColor.grayStringsSroke = new Dictionary(), 
        PdfColor.grayStringsFill = new Dictionary(), PdfColor.maxColourChannelValue = 255, 
        PdfColor;
    }(), PointF = function() {
        return function(x, y) {
            void 0 === x ? (this.x = 0, this.y = 0) : (this.x = null !== x ? x : 0, this.y = null !== y ? y : 0);
        };
    }(), SizeF = function() {
        return function(width, height) {
            void 0 === height ? (this.height = 0, this.width = 0) : (this.height = null !== height ? height : 0, 
            this.width = null !== width ? width : 0);
        };
    }(), RectangleF = function() {
        return function(arg1, arg2, arg3, arg4) {
            if (typeof arg1 == typeof arg1 && void 0 === arg1) this.x = 0, this.y = 0, this.height = 0, 
            this.width = 0; else if (arg1 instanceof PointF && arg2 instanceof SizeF && void 0 === arg3) {
                var pointf = arg1;
                this.x = pointf.x, this.y = pointf.y;
                var sizef = arg2;
                this.height = sizef.height, this.width = sizef.width;
            } else {
                var x = arg1, y = arg2, width = arg3, height = arg4;
                this.x = x, this.y = y, this.height = height, this.width = width;
            }
        };
    }(), Rectangle = function() {
        function Rectangle(left, top, right, bottom) {
            this.left = left, this.top = top, this.right = right, this.bottom = bottom;
        }
        return Object.defineProperty(Rectangle.prototype, "width", {
            get: function() {
                return this.right - this.left;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Rectangle.prototype, "height", {
            get: function() {
                return this.bottom - this.top;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Rectangle.prototype, "topLeft", {
            get: function() {
                return new PointF(this.left, this.top);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Rectangle.prototype, "size", {
            get: function() {
                return new SizeF(this.width, this.height);
            },
            enumerable: !0,
            configurable: !0
        }), Rectangle.prototype.toString = function() {
            return this.topLeft + "x" + this.size;
        }, Rectangle;
    }(), PdfBrush = function() {
        return function() {};
    }(), __extends$75 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfSolidBrush = function(_super) {
        function PdfSolidBrush(color) {
            var _this = _super.call(this) || this;
            return _this.pdfColor = color, _this;
        }
        return __extends$75(PdfSolidBrush, _super), Object.defineProperty(PdfSolidBrush.prototype, "color", {
            get: function() {
                return this.pdfColor;
            },
            set: function(value) {
                this.pdfColor = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfSolidBrush.prototype.monitorChanges = function(brush, streamWriter, getResources, saveChanges, currentColorSpace) {
            if (null == streamWriter) throw new Error("ArgumentNullException:streamWriter");
            var diff = !1;
            return diff = !0, streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, !1), 
            diff;
        }, PdfSolidBrush.prototype.resetChanges = function(streamWriter) {
            streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, !1);
        }, PdfSolidBrush;
    }(PdfBrush);
    !function(PdfFontStyle) {
        PdfFontStyle[PdfFontStyle.Regular = 0] = "Regular", PdfFontStyle[PdfFontStyle.Bold = 1] = "Bold", 
        PdfFontStyle[PdfFontStyle.Italic = 2] = "Italic", PdfFontStyle[PdfFontStyle.Underline = 4] = "Underline", 
        PdfFontStyle[PdfFontStyle.Strikeout = 8] = "Strikeout";
    }(PdfFontStyle || (PdfFontStyle = {}));
    var PdfFontFamily;
    !function(PdfFontFamily) {
        PdfFontFamily[PdfFontFamily.Helvetica = 0] = "Helvetica", PdfFontFamily[PdfFontFamily.Courier = 1] = "Courier", 
        PdfFontFamily[PdfFontFamily.TimesRoman = 2] = "TimesRoman", PdfFontFamily[PdfFontFamily.Symbol = 3] = "Symbol", 
        PdfFontFamily[PdfFontFamily.ZapfDingbats = 4] = "ZapfDingbats";
    }(PdfFontFamily || (PdfFontFamily = {}));
    var PdfFontType;
    !function(PdfFontType) {
        PdfFontType[PdfFontType.Standard = 0] = "Standard", PdfFontType[PdfFontType.TrueType = 1] = "TrueType", 
        PdfFontType[PdfFontType.TrueTypeEmbedded = 2] = "TrueTypeEmbedded";
    }(PdfFontType || (PdfFontType = {}));
    var PdfWordWrapType;
    !function(PdfWordWrapType) {
        PdfWordWrapType[PdfWordWrapType.None = 0] = "None", PdfWordWrapType[PdfWordWrapType.Word = 1] = "Word", 
        PdfWordWrapType[PdfWordWrapType.WordOnly = 2] = "WordOnly", PdfWordWrapType[PdfWordWrapType.Character = 3] = "Character";
    }(PdfWordWrapType || (PdfWordWrapType = {}));
    var PdfSubSuperScript;
    !function(PdfSubSuperScript) {
        PdfSubSuperScript[PdfSubSuperScript.None = 0] = "None", PdfSubSuperScript[PdfSubSuperScript.SuperScript = 1] = "SuperScript", 
        PdfSubSuperScript[PdfSubSuperScript.SubScript = 2] = "SubScript";
    }(PdfSubSuperScript || (PdfSubSuperScript = {}));
    var FontEncoding;
    !function(FontEncoding) {
        FontEncoding[FontEncoding.Unknown = 0] = "Unknown", FontEncoding[FontEncoding.StandardEncoding = 1] = "StandardEncoding", 
        FontEncoding[FontEncoding.MacRomanEncoding = 2] = "MacRomanEncoding", FontEncoding[FontEncoding.MacExpertEncoding = 3] = "MacExpertEncoding", 
        FontEncoding[FontEncoding.WinAnsiEncoding = 4] = "WinAnsiEncoding", FontEncoding[FontEncoding.PdfDocEncoding = 5] = "PdfDocEncoding", 
        FontEncoding[FontEncoding.IdentityH = 6] = "IdentityH";
    }(FontEncoding || (FontEncoding = {}));
    var TtfCmapFormat;
    !function(TtfCmapFormat) {
        TtfCmapFormat[TtfCmapFormat.Apple = 0] = "Apple", TtfCmapFormat[TtfCmapFormat.Microsoft = 4] = "Microsoft", 
        TtfCmapFormat[TtfCmapFormat.Trimmed = 6] = "Trimmed";
    }(TtfCmapFormat || (TtfCmapFormat = {}));
    var TtfCmapEncoding;
    !function(TtfCmapEncoding) {
        TtfCmapEncoding[TtfCmapEncoding.Unknown = 0] = "Unknown", TtfCmapEncoding[TtfCmapEncoding.Symbol = 1] = "Symbol", 
        TtfCmapEncoding[TtfCmapEncoding.Unicode = 2] = "Unicode", TtfCmapEncoding[TtfCmapEncoding.Macintosh = 3] = "Macintosh";
    }(TtfCmapEncoding || (TtfCmapEncoding = {}));
    var TtfPlatformID;
    !function(TtfPlatformID) {
        TtfPlatformID[TtfPlatformID.AppleUnicode = 0] = "AppleUnicode", TtfPlatformID[TtfPlatformID.Macintosh = 1] = "Macintosh", 
        TtfPlatformID[TtfPlatformID.Iso = 2] = "Iso", TtfPlatformID[TtfPlatformID.Microsoft = 3] = "Microsoft";
    }(TtfPlatformID || (TtfPlatformID = {}));
    var TtfMicrosoftEncodingID;
    !function(TtfMicrosoftEncodingID) {
        TtfMicrosoftEncodingID[TtfMicrosoftEncodingID.Undefined = 0] = "Undefined", TtfMicrosoftEncodingID[TtfMicrosoftEncodingID.Unicode = 1] = "Unicode";
    }(TtfMicrosoftEncodingID || (TtfMicrosoftEncodingID = {}));
    var TtfMacintoshEncodingID;
    !function(TtfMacintoshEncodingID) {
        TtfMacintoshEncodingID[TtfMacintoshEncodingID.Roman = 0] = "Roman", TtfMacintoshEncodingID[TtfMacintoshEncodingID.Japanese = 1] = "Japanese", 
        TtfMacintoshEncodingID[TtfMacintoshEncodingID.Chinese = 2] = "Chinese";
    }(TtfMacintoshEncodingID || (TtfMacintoshEncodingID = {}));
    var FontDescriptorFlags;
    !function(FontDescriptorFlags) {
        FontDescriptorFlags[FontDescriptorFlags.FixedPitch = 1] = "FixedPitch", FontDescriptorFlags[FontDescriptorFlags.Serif = 2] = "Serif", 
        FontDescriptorFlags[FontDescriptorFlags.Symbolic = 4] = "Symbolic", FontDescriptorFlags[FontDescriptorFlags.Script = 8] = "Script", 
        FontDescriptorFlags[FontDescriptorFlags.Nonsymbolic = 32] = "Nonsymbolic", FontDescriptorFlags[FontDescriptorFlags.Italic = 64] = "Italic", 
        FontDescriptorFlags[FontDescriptorFlags.ForceBold = 262144] = "ForceBold";
    }(FontDescriptorFlags || (FontDescriptorFlags = {}));
    var TtfCompositeGlyphFlags;
    !function(TtfCompositeGlyphFlags) {
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.Arg1And2AreWords = 1] = "Arg1And2AreWords", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.ArgsAreXyValues = 2] = "ArgsAreXyValues", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.RoundXyToGrid = 4] = "RoundXyToGrid", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.WeHaveScale = 8] = "WeHaveScale", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.Reserved = 16] = "Reserved", TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.MoreComponents = 32] = "MoreComponents", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.WeHaveAnXyScale = 64] = "WeHaveAnXyScale", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.WeHaveTwoByTwo = 128] = "WeHaveTwoByTwo", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.WeHaveInstructions = 256] = "WeHaveInstructions", 
        TtfCompositeGlyphFlags[TtfCompositeGlyphFlags.UseMyMetrics = 512] = "UseMyMetrics";
    }(TtfCompositeGlyphFlags || (TtfCompositeGlyphFlags = {}));
    var LineType, PdfStringFormat = function() {
        function PdfStringFormat(arg1, arg2) {
            this.scalingFactor = 100, this.wordWrapType = PdfWordWrapType.Word, void 0 === arg1 ? (this.internalLineLimit = !0, 
            this.wordWrapType = PdfWordWrapType.Word) : "string" == typeof arg1 ? this.constructor() : void 0 === arg2 ? (this.constructor(), 
            this.textAlignment = arg1) : (this.constructor(arg1), this.verticalAlignment = arg2);
        }
        return Object.defineProperty(PdfStringFormat.prototype, "alignment", {
            get: function() {
                return this.textAlignment;
            },
            set: function(value) {
                this.textAlignment = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "textDirection", {
            get: function() {
                return this.direction;
            },
            set: function(value) {
                this.direction = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "lineAlignment", {
            get: function() {
                return void 0 === this.verticalAlignment || null == this.verticalAlignment ? PdfVerticalAlignment.Top : this.verticalAlignment;
            },
            set: function(value) {
                this.verticalAlignment = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "rightToLeft", {
            get: function() {
                return void 0 !== this.isRightToLeft && null != this.isRightToLeft && this.isRightToLeft;
            },
            set: function(value) {
                this.isRightToLeft = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "characterSpacing", {
            get: function() {
                return void 0 === this.internalCharacterSpacing || null == this.internalCharacterSpacing ? 0 : this.internalCharacterSpacing;
            },
            set: function(value) {
                this.internalCharacterSpacing = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "wordSpacing", {
            get: function() {
                return void 0 === this.internalWordSpacing || null == this.internalWordSpacing ? 0 : this.internalWordSpacing;
            },
            set: function(value) {
                this.internalWordSpacing = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "lineSpacing", {
            get: function() {
                return void 0 === this.leading || null == this.leading ? 0 : this.leading;
            },
            set: function(value) {
                this.leading = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "clipPath", {
            get: function() {
                return void 0 !== this.clip && null != this.clip && this.clip;
            },
            set: function(value) {
                this.clip = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "subSuperScript", {
            get: function() {
                return void 0 === this.pdfSubSuperScript || null == this.pdfSubSuperScript ? PdfSubSuperScript.None : this.pdfSubSuperScript;
            },
            set: function(value) {
                this.pdfSubSuperScript = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "paragraphIndent", {
            get: function() {
                return void 0 === this.internalParagraphIndent || null == this.internalParagraphIndent ? 0 : this.internalParagraphIndent;
            },
            set: function(value) {
                this.internalParagraphIndent = value, this.firstLineIndent = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "lineLimit", {
            get: function() {
                return this.internalLineLimit;
            },
            set: function(value) {
                this.internalLineLimit = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "measureTrailingSpaces", {
            get: function() {
                return void 0 !== this.trailingSpaces && null != this.trailingSpaces && this.trailingSpaces;
            },
            set: function(value) {
                this.trailingSpaces = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "noClip", {
            get: function() {
                return void 0 !== this.isNoClip && null != this.isNoClip && this.isNoClip;
            },
            set: function(value) {
                this.isNoClip = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "wordWrap", {
            get: function() {
                return this.wordWrapType;
            },
            set: function(value) {
                this.wordWrapType = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "horizontalScalingFactor", {
            get: function() {
                return this.scalingFactor;
            },
            set: function(value) {
                if (value <= 0) throw new Error("ArgumentOutOfRangeException:The scaling factor cant be less of equal to zero, ScalingFactor");
                this.scalingFactor = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringFormat.prototype, "firstLineIndent", {
            get: function() {
                return void 0 === this.initialLineIndent || null == this.initialLineIndent ? 0 : this.initialLineIndent;
            },
            set: function(value) {
                this.initialLineIndent = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfStringFormat.prototype.clone = function() {
            return this;
        }, PdfStringFormat;
    }(), StringTokenizer = function() {
        function StringTokenizer(textValue) {
            if (this.currentPosition = 0, null == textValue) throw new Error("ArgumentNullException:text");
            this.text = textValue;
        }
        return Object.defineProperty(StringTokenizer.prototype, "length", {
            get: function() {
                return this.text.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(StringTokenizer.prototype, "end", {
            get: function() {
                return this.currentPosition === this.text.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(StringTokenizer.prototype, "position", {
            get: function() {
                return this.currentPosition;
            },
            set: function(value) {
                this.currentPosition = value;
            },
            enumerable: !0,
            configurable: !0
        }), StringTokenizer.getCharsCount = function(text, symbols) {
            if ("string" == typeof symbols) {
                if (null == text) throw new Error("ArgumentNullException:wholeText");
                for (var numSymbols = 0, curIndex = 0; -1 !== (curIndex = text.indexOf(symbols, curIndex)); ) numSymbols++, 
                curIndex++;
                return numSymbols;
            }
            if (null == text) throw new Error("ArgumentNullException:text");
            if (null == symbols) throw new Error("ArgumentNullException:symbols");
            for (var count = 0, i = 0, len = text.length; i < len; i++) {
                var ch = text[i];
                this.contains(symbols, ch) && count++;
            }
            return count;
        }, StringTokenizer.prototype.readLine = function() {
            for (var pos = this.currentPosition; pos < this.length; ) {
                switch (this.text[pos]) {
                  case "\r":
                  case "\n":
                    var text = this.text.substring(this.currentPosition, pos - this.currentPosition);
                    return this.currentPosition = pos + 1, this.currentPosition++, text;
                }
                pos++;
            }
            if (pos > this.currentPosition) {
                var text2 = this.text.substring(this.currentPosition, pos - this.currentPosition);
                return this.currentPosition = pos, text2;
            }
            return null;
        }, StringTokenizer.prototype.peekLine = function() {
            var pos = this.currentPosition, line = this.readLine();
            return this.currentPosition = pos, line;
        }, StringTokenizer.prototype.readWord = function() {
            for (var pos = this.currentPosition; pos < this.length; ) {
                var ch = this.text[pos];
                switch (ch) {
                  case "\r":
                  case "\n":
                    var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);
                    return this.currentPosition = pos + 1, "\r" === ch && this.currentPosition < this.length && "\n" === this.text[this.currentPosition] && this.currentPosition++, 
                    textValue;

                  case " ":
                  case "\t":
                    pos === this.currentPosition && pos++;
                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);
                    return this.currentPosition = pos, text;
                }
                pos++;
            }
            if (pos > this.currentPosition) {
                var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);
                return this.currentPosition = pos, text2;
            }
            return null;
        }, StringTokenizer.prototype.peekWord = function() {
            var pos = this.currentPosition, word = this.readWord();
            return this.currentPosition = pos, word;
        }, StringTokenizer.prototype.read = function(count) {
            if (void 0 === count) {
                var ch = "0";
                return this.end || (ch = this.text[this.currentPosition], this.currentPosition++), 
                ch;
            }
            for (var num = 0, builder = ""; !this.end && num < count; ) {
                builder += ch = this.read(), num++;
            }
            return builder;
        }, StringTokenizer.prototype.peek = function() {
            var ch = "0";
            return this.end || (ch = this.text[this.currentPosition]), ch;
        }, StringTokenizer.prototype.close = function() {
            this.text = null;
        }, StringTokenizer.prototype.readToEnd = function() {
            var text;
            return text = 0 === this.currentPosition ? this.text : this.text.substring(this.length, this.currentPosition), 
            this.currentPosition = this.length, text;
        }, StringTokenizer.contains = function(array, symbol) {
            for (var contains = !1, i = 0; i < array.length; i++) if (array[i] === symbol) {
                contains = !0;
                break;
            }
            return contains;
        }, StringTokenizer.whiteSpace = " ", StringTokenizer.tab = "\t", StringTokenizer.spaces = [ StringTokenizer.whiteSpace, StringTokenizer.tab ], 
        StringTokenizer.whiteSpacePattern = "^[ \t]+$", StringTokenizer;
    }(), PdfStringLayouter = function() {
        function PdfStringLayouter() {
            this.isOverloadWithPosition = !1;
        }
        return PdfStringLayouter.prototype.layout = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
            if (arg4 instanceof RectangleF) {
                this.initialize(arg1, arg2, arg3, arg4, arg5), this.isOverloadWithPosition = arg6, 
                this.clientSize = arg7;
                var result = this.doLayout();
                return this.clear(), result;
            }
            this.initialize(arg1, arg2, arg3, arg4), this.isOverloadWithPosition = arg5, this.clientSize = arg6;
            result = this.doLayout();
            return this.clear(), result;
        }, PdfStringLayouter.prototype.initialize = function(text, font, format, rectSize, pageHeight) {
            if ("number" == typeof pageHeight) {
                if (null == text) throw new Error("ArgumentNullException:text");
                if (null == font) throw new Error("ArgumentNullException:font");
                this.text = text, this.font = font, this.format = format, this.size = new SizeF(rectSize.width, rectSize.height), 
                this.rectangle = rectSize, this.pageHeight = pageHeight, this.reader = new StringTokenizer(text);
            } else this.initialize(text, font, format, new RectangleF(new PointF(0, 0), rectSize), 0);
        }, PdfStringLayouter.prototype.clear = function() {
            this.font = null, this.format = null, this.reader.close(), this.reader = null, this.text = null;
        }, PdfStringLayouter.prototype.doLayout = function() {
            for (var result = new PdfStringLayoutResult(), lineResult = new PdfStringLayoutResult(), lines = [], line = this.reader.peekLine(), lineIndent = this.getLineIndent(!0); null != line; ) {
                if (null !== (lineResult = this.layoutLine(line, lineIndent)) || void 0 !== lineResult) {
                    var numSymbolsInserted = 0, returnedValue = this.copyToResult(result, lineResult, lines, numSymbolsInserted), success = returnedValue.success;
                    if (numSymbolsInserted = returnedValue.numInserted, !success) {
                        this.reader.read(numSymbolsInserted);
                        break;
                    }
                }
                this.reader.readLine(), line = this.reader.peekLine(), lineIndent = this.getLineIndent(!1);
            }
            return this.finalizeResult(result, lines), result;
        }, PdfStringLayouter.prototype.getLineIndent = function(firstLine) {
            var lineIndent = 0;
            return null != this.format && (lineIndent = firstLine ? this.format.firstLineIndent : this.format.paragraphIndent, 
            lineIndent = this.size.width > 0 ? Math.min(this.size.width, lineIndent) : lineIndent), 
            lineIndent;
        }, PdfStringLayouter.prototype.getLineHeight = function() {
            var height = this.font.height;
            return null != this.format && 0 !== this.format.lineSpacing && (height = this.format.lineSpacing + this.font.height), 
            height;
        }, PdfStringLayouter.prototype.getLineWidth = function(line) {
            return this.font.getLineWidth(line, this.format);
        }, PdfStringLayouter.prototype.layoutLine = function(line, lineIndent) {
            var lineResult = new PdfStringLayoutResult();
            lineResult.layoutLineHeight = this.getLineHeight();
            var lines = [], maxWidth = this.size.width, lineWidth = this.getLineWidth(line) + lineIndent, lineType = LineType.FirstParagraphLine, readWord = !0;
            if (maxWidth <= 0 || Math.round(lineWidth) <= Math.round(maxWidth)) this.addToLineResult(lineResult, lines, line, lineWidth, LineType.NewLineBreak | lineType); else {
                var builder = "", curLine = "";
                lineWidth = lineIndent;
                var curIndent = lineIndent, reader = new StringTokenizer(line), word = reader.peekWord();
                for (word.length !== reader.length && " " === word && (curLine += word, builder += word, 
                reader.position += 1, word = reader.peekWord()); null != word; ) {
                    curLine += word;
                    var curLineWidth = this.getLineWidth(curLine.toString()) + curIndent;
                    if (" " === curLine.toString() && (curLine = "", curLineWidth = 0), curLineWidth > maxWidth) {
                        if (this.getWrapType() === PdfWordWrapType.None) break;
                        if (curLine.length === word.length) {
                            if (this.getWrapType() === PdfWordWrapType.WordOnly) {
                                lineResult.textRemainder = line.substring(reader.position);
                                break;
                            }
                            if (1 === curLine.length) {
                                builder += word;
                                break;
                            }
                            readWord = !1, curLine = "", word = reader.peek().toString();
                            continue;
                        }
                        if (this.getLineWidth(word.toString()) > maxWidth ? this.format.wordWrap = PdfWordWrapType.Character : void 0 !== this.format && null !== this.format && (this.format.wordWrap = PdfWordWrapType.Word), 
                        this.getWrapType() === PdfWordWrapType.Character && readWord) readWord = !1, curLine = "", 
                        curLine += builder.toString(), word = reader.peek().toString(); else {
                            " " !== (ln = builder.toString()) && this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.LayoutBreak | lineType), 
                            this.isOverloadWithPosition && (maxWidth = this.clientSize.width), curLine = "", 
                            builder = "", lineWidth = 0, curIndent = 0, curLineWidth = 0, lineType = LineType.None, 
                            word = readWord ? word : reader.peekWord(), readWord = !0;
                        }
                    } else builder += word, lineWidth = curLineWidth, readWord ? (reader.readWord(), 
                    word = reader.peekWord()) : (reader.read(), word = reader.peek().toString());
                }
                if (builder.length > 0) {
                    var ln = builder.toString();
                    this.addToLineResult(lineResult, lines, ln, lineWidth, LineType.NewLineBreak | LineType.LastParagraphLine);
                }
                reader.close();
            }
            lineResult.layoutLines = [];
            for (var index = 0; index < lines.length; index++) lineResult.layoutLines.push(lines[index]);
            return lines = [], lineResult;
        }, PdfStringLayouter.prototype.addToLineResult = function(lineResult, lines, line, lineWidth, breakType) {
            var info = new LineInfo();
            info.text = line, info.width = lineWidth, info.lineType = breakType, lines.push(info);
            var size = lineResult.actualSize;
            size.height += this.getLineHeight(), size.width = Math.max(size.width, lineWidth), 
            lineResult.size = size;
        }, PdfStringLayouter.prototype.copyToResult = function(result, lineResult, lines, numInserted) {
            var success = !0, allowPartialLines = null != this.format && !this.format.lineLimit, height = result.actualSize.height, maxHeight = this.size.height;
            if (this.pageHeight > 0 && maxHeight + this.rectangle.y > this.pageHeight && (maxHeight = this.rectangle.y - this.pageHeight, 
            maxHeight = Math.max(maxHeight, -maxHeight)), numInserted = 0, null != lineResult.lines) for (var i = 0, len = lineResult.lines.length; i < len; i++) {
                var expHeight = height + lineResult.lineHeight;
                if (!(expHeight <= maxHeight || maxHeight <= 0 || allowPartialLines)) {
                    success = !1;
                    break;
                }
                var info = lineResult.lines[i];
                numInserted += info.text.length, info = this.trimLine(info, 0 === lines.length), 
                lines.push(info);
                var size = result.actualSize;
                size.width = Math.max(size.width, info.width), result.size = size, height = expHeight;
            }
            if (height != result.size.height) {
                var size1 = result.actualSize;
                size1.height = height, result.size = size1;
            }
            return {
                success: success,
                numInserted: numInserted
            };
        }, PdfStringLayouter.prototype.finalizeResult = function(result, lines) {
            result.layoutLines = [];
            for (var index = 0; index < lines.length; index++) result.layoutLines.push(lines[index]);
            result.layoutLineHeight = this.getLineHeight(), this.reader.end || (result.textRemainder = this.reader.readToEnd()), 
            lines = [];
        }, PdfStringLayouter.prototype.trimLine = function(info, firstLine) {
            var line = info.text, lineWidth = info.width;
            info.lineType, LineType.FirstParagraphLine, null == this.format || this.format.rightToLeft;
            return (line = line.trim()).length !== info.text.length && (lineWidth = this.getLineWidth(line), 
            (info.lineType & LineType.FirstParagraphLine) > 0 && (lineWidth += this.getLineIndent(firstLine))), 
            info.text = line, info.width = lineWidth, info;
        }, PdfStringLayouter.prototype.getWrapType = function() {
            return null != this.format ? this.format.wordWrap : PdfWordWrapType.Word;
        }, PdfStringLayouter;
    }(), PdfStringLayoutResult = function() {
        function PdfStringLayoutResult() {}
        return Object.defineProperty(PdfStringLayoutResult.prototype, "remainder", {
            get: function() {
                return this.textRemainder;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringLayoutResult.prototype, "actualSize", {
            get: function() {
                return void 0 === this.size && (this.size = new SizeF(0, 0)), this.size;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringLayoutResult.prototype, "lines", {
            get: function() {
                return this.layoutLines;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringLayoutResult.prototype, "lineHeight", {
            get: function() {
                return this.layoutLineHeight;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringLayoutResult.prototype, "empty", {
            get: function() {
                return null == this.layoutLines || 0 === this.layoutLines.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStringLayoutResult.prototype, "lineCount", {
            get: function() {
                return this.empty ? 0 : this.layoutLines.length;
            },
            enumerable: !0,
            configurable: !0
        }), PdfStringLayoutResult;
    }(), LineInfo = function() {
        function LineInfo() {}
        return Object.defineProperty(LineInfo.prototype, "lineType", {
            get: function() {
                return this.type;
            },
            set: function(value) {
                this.type = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(LineInfo.prototype, "text", {
            get: function() {
                return this.content;
            },
            set: function(value) {
                this.content = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(LineInfo.prototype, "width", {
            get: function() {
                return this.lineWidth;
            },
            set: function(value) {
                this.lineWidth = value;
            },
            enumerable: !0,
            configurable: !0
        }), LineInfo;
    }();
    !function(LineType) {
        LineType[LineType.None = 0] = "None", LineType[LineType.NewLineBreak = 1] = "NewLineBreak", 
        LineType[LineType.LayoutBreak = 2] = "LayoutBreak", LineType[LineType.FirstParagraphLine = 4] = "FirstParagraphLine", 
        LineType[LineType.LastParagraphLine = 8] = "LastParagraphLine";
    }(LineType || (LineType = {}));
    var ObjectStatus, PdfFont = function() {
        function PdfFont(size, style) {
            this.fontStyle = PdfFontStyle.Regular, "number" == typeof size && void 0 === style ? this.fontSize = size : (this.fontSize = size, 
            this.setStyle(style));
        }
        return Object.defineProperty(PdfFont.prototype, "name", {
            get: function() {
                return this.metrics.name;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "size", {
            get: function() {
                return this.fontSize;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "height", {
            get: function() {
                return this.metrics.getHeight(null);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "style", {
            get: function() {
                return this.fontStyle;
            },
            set: function(value) {
                this.fontStyle = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "bold", {
            get: function() {
                return (this.style & PdfFontStyle.Bold) > 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "italic", {
            get: function() {
                return (this.style & PdfFontStyle.Italic) > 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "strikeout", {
            get: function() {
                return (this.style & PdfFontStyle.Strikeout) > 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "underline", {
            get: function() {
                return (this.style & PdfFontStyle.Underline) > 0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "metrics", {
            get: function() {
                return this.fontMetrics;
            },
            set: function(value) {
                this.fontMetrics = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfFont.prototype, "element", {
            get: function() {
                return this.pdfFontInternals;
            },
            enumerable: !0,
            configurable: !0
        }), PdfFont.prototype.measureString = function(text, arg2, arg3, arg4, arg5) {
            if ("string" == typeof text && void 0 === arg2) return this.measureString(text, null);
            if ("string" == typeof text && (arg2 instanceof PdfStringFormat || null == arg2) && void 0 === arg3 && void 0 === arg4) {
                var temparg2 = arg2;
                return this.measureString(text, temparg2, 0, 0);
            }
            if ("string" == typeof text && (arg2 instanceof PdfStringFormat || null == arg2) && "number" == typeof arg3 && "number" == typeof arg4) {
                temparg2 = arg2;
                return this.measureString(text, 0, temparg2, arg3, arg4);
            }
            if ("string" == typeof text && "number" == typeof arg2 && (arg3 instanceof PdfStringFormat || null == arg3) && "number" == typeof arg4 && "number" == typeof arg5) {
                var layoutArea = new SizeF(arg2, 0), temparg3 = arg3;
                return this.measureString(text, layoutArea, temparg3, arg4, arg5);
            }
            if (null == text) throw Error('ArgumentNullException("text")');
            temparg2 = arg2, temparg3 = arg3;
            var result = new PdfStringLayouter().layout(text, this, temparg3, temparg2, !1, new SizeF(0, 0));
            return arg4 = text.length, arg5 = result.empty ? 0 : result.lines.length, result.actualSize;
        }, PdfFont.prototype.equalsTo = function(obj) {
            return this.equalsToFont(obj);
        }, PdfFont.prototype.getInternals = function() {
            return this.pdfFontInternals;
        }, PdfFont.prototype.setInternals = function(internals) {
            if (null == internals) throw new Error("ArgumentNullException:internals");
            this.pdfFontInternals = internals;
        }, PdfFont.prototype.setStyle = function(style) {
            this.fontStyle = style;
        }, PdfFont.prototype.applyFormatSettings = function(line, format, width) {
            var realWidth = width;
            if (null != format && width > 0 && (0 !== format.characterSpacing && (realWidth += (line.length - 1) * format.characterSpacing), 
            0 !== format.wordSpacing)) {
                var symbols = StringTokenizer.spaces;
                realWidth += StringTokenizer.getCharsCount(line, symbols) * format.wordSpacing;
            }
            return realWidth;
        }, PdfFont.charSizeMultiplier = .001, PdfFont.syncObject = new Object(), PdfFont;
    }(), PdfWriter = function() {
        function PdfWriter(stream) {
            this.streamWriter = stream;
        }
        return Object.defineProperty(PdfWriter.prototype, "document", {
            get: function() {
                return this.pdfDocument;
            },
            set: function(value) {
                this.pdfDocument = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfWriter.prototype, "position", {
            get: function() {
                return this.streamWriter.buffer.size;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfWriter.prototype, "length", {
            get: function() {
                return this.streamWriter.buffer.size;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfWriter.prototype, "stream", {
            get: function() {
                return this.streamWriter;
            },
            enumerable: !0,
            configurable: !0
        }), PdfWriter.prototype.write = function(overload) {
            var tempOverload = overload;
            this.streamWriter.write(tempOverload);
        }, PdfWriter;
    }();
    !function(ObjectStatus) {
        ObjectStatus[ObjectStatus.None = 0] = "None", ObjectStatus[ObjectStatus.Registered = 1] = "Registered";
    }(ObjectStatus || (ObjectStatus = {}));
    var ObjectType, PdfMainObjectCollection = function() {
        function PdfMainObjectCollection() {
            this.objectCollections = [], this.mainObjectCollection = new Dictionary(), this.primitiveObjectCollection = new Dictionary();
        }
        return Object.defineProperty(PdfMainObjectCollection.prototype, "count", {
            get: function() {
                return this.objectCollections.length;
            },
            enumerable: !0,
            configurable: !0
        }), PdfMainObjectCollection.prototype.items = function(index) {
            return this.objectCollections[index];
        }, Object.defineProperty(PdfMainObjectCollection.prototype, "outIsNew", {
            get: function() {
                return this.isNew;
            },
            enumerable: !0,
            configurable: !0
        }), PdfMainObjectCollection.prototype.add = function(element) {
            var objInfo = new ObjectInfo(element);
            this.objectCollections.push(objInfo), this.primitiveObjectCollection.containsKey(element) || this.primitiveObjectCollection.setValue(element, this.objectCollections.length - 1), 
            element.position = this.index = this.objectCollections.length - 1, element.status = ObjectStatus.Registered;
        }, PdfMainObjectCollection.prototype.lookFor = function(obj) {
            var index = -1;
            if (-1 !== obj.position) return obj.position;
            if (this.primitiveObjectCollection.containsKey(obj) && this.count === this.primitiveObjectCollection.size()) index = this.primitiveObjectCollection.getValue(obj); else for (var i = this.count - 1; i >= 0; i--) {
                if (this.objectCollections[i].object === obj) {
                    index = i;
                    break;
                }
            }
            return index;
        }, PdfMainObjectCollection.prototype.getReference = function(index, isNew) {
            this.index = this.lookFor(index);
            this.isNew = !1;
            return {
                reference: this.objectCollections[this.index].reference,
                wasNew: isNew
            };
        }, PdfMainObjectCollection.prototype.trySetReference = function(obj, reference, found) {
            this.index = this.lookFor(obj);
            return this.objectCollections[this.index].setReference(reference), !0;
        }, PdfMainObjectCollection.prototype.destroy = function() {
            for (var _i = 0, _a = this.objectCollections; _i < _a.length; _i++) {
                var obj = _a[_i];
                void 0 !== obj && (obj.pdfObject.position = -1, obj.pdfObject.isSaving = void 0, 
                obj.pdfObject.objectCollectionIndex = void 0, obj.pdfObject.position = void 0);
            }
            this.objectCollections = [], this.mainObjectCollection = new Dictionary(), this.primitiveObjectCollection = new Dictionary();
        }, PdfMainObjectCollection;
    }(), ObjectInfo = function() {
        function ObjectInfo(obj, reference) {
            this.pdfObject = obj, this.pdfReference = reference;
        }
        return Object.defineProperty(ObjectInfo.prototype, "object", {
            get: function() {
                return this.pdfObject;
            },
            set: function(value) {
                this.pdfObject = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ObjectInfo.prototype, "reference", {
            get: function() {
                return this.pdfReference;
            },
            enumerable: !0,
            configurable: !0
        }), ObjectInfo.prototype.setReference = function(reference) {
            this.pdfReference = reference;
        }, ObjectInfo;
    }(), PdfDocumentBase = function() {
        function PdfDocumentBase(document) {
            this.isStreamCopied = !1, document instanceof PdfDocument && (this.document = document);
        }
        return Object.defineProperty(PdfDocumentBase.prototype, "pdfObjects", {
            get: function() {
                return this.objects;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentBase.prototype, "crossTable", {
            get: function() {
                return this.pdfCrossTable;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentBase.prototype, "currentSavingObj", {
            get: function() {
                return this.currentSavingObject;
            },
            set: function(value) {
                this.currentSavingObject = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentBase.prototype, "catalog", {
            get: function() {
                return this.pdfCatalog;
            },
            set: function(value) {
                this.pdfCatalog = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfDocumentBase.prototype.setMainObjectCollection = function(mainObjectCollection) {
            this.objects = mainObjectCollection;
        }, PdfDocumentBase.prototype.setCrossTable = function(cTable) {
            this.pdfCrossTable = cTable;
        }, PdfDocumentBase.prototype.setCatalog = function(catalog) {
            this.pdfCatalog = catalog;
        }, PdfDocumentBase.prototype.save = function(filename) {
            var _this = this, encoding = new Encoding(!0), SW = new StreamWriter(encoding);
            if (void 0 === filename) {
                var encoding_1 = new Encoding(!0), SW_1 = new StreamWriter(encoding_1);
                return new Promise(function(resolve, reject) {
                    var obj = {};
                    obj.blobData = new Blob([ _this.document.docSave(SW_1, !0) ], {
                        type: "application/pdf"
                    }), resolve(obj);
                });
            }
            this.document.docSave(SW, filename, !0);
        }, PdfDocumentBase.prototype.clone = function() {
            return this.document;
        }, PdfDocumentBase;
    }();
    !function(ObjectType) {
        ObjectType[ObjectType.Free = 0] = "Free", ObjectType[ObjectType.Normal = 1] = "Normal", 
        ObjectType[ObjectType.Packed = 2] = "Packed";
    }(ObjectType || (ObjectType = {}));
    var PdfPageOrientation, __extends$78 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfCatalog = function(_super) {
        function PdfCatalog() {
            var _this = _super.call(this) || this;
            return _this.sections = null, _this.tempDictionaryProperties = new DictionaryProperties(), 
            _this.items.setValue(new DictionaryProperties().type, new PdfName("Catalog")), _this;
        }
        return __extends$78(PdfCatalog, _super), Object.defineProperty(PdfCatalog.prototype, "pages", {
            get: function() {
                return this.sections;
            },
            set: function(value) {
                value.element;
                this.sections = value, this.items.setValue(this.tempDictionaryProperties.pages, new PdfReferenceHolder(value));
            },
            enumerable: !0,
            configurable: !0
        }), PdfCatalog;
    }(PdfDictionary), PdfCrossTable = function() {
        function PdfCrossTable() {
            this.objects = new Dictionary(), this.maxGenNumIndex = 0, this.objectCount = 0, 
            this.dictionaryProperties = new DictionaryProperties();
        }
        return Object.defineProperty(PdfCrossTable.prototype, "isMerging", {
            get: function() {
                return this.merging;
            },
            set: function(value) {
                this.merging = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCrossTable.prototype, "trailer", {
            get: function() {
                return null == this.internalTrailer && (this.internalTrailer = new PdfStream()), 
                this.internalTrailer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCrossTable.prototype, "document", {
            get: function() {
                return this.pdfDocument;
            },
            set: function(value) {
                this.pdfDocument = value, this.items = this.pdfDocument.pdfObjects;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCrossTable.prototype, "pdfObjects", {
            get: function() {
                return this.items;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCrossTable.prototype, "objectCollection", {
            get: function() {
                return this.pdfDocument.pdfObjects;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCrossTable.prototype, "count", {
            get: function() {
                return this.objectCount;
            },
            set: function(value) {
                this.objectCount = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCrossTable.prototype, "nextObjNumber", {
            get: function() {
                return this.count = this.count + 1, this.count;
            },
            enumerable: !0,
            configurable: !0
        }), PdfCrossTable.prototype.save = function(writer, filename) {
            this.saveHead(writer), this.mappedReferences = null, this.objects.clear(), this.markTrailerReferences(), 
            this.saveObjects(writer);
            var saveCount = this.count, xrefPos = writer.position;
            this.registerObject(0, new PdfReference(0, -1), !0);
            writer.write(Operators.xref), writer.write(Operators.newLine), this.saveSections(writer), 
            this.saveTrailer(writer, this.count, 0), this.saveTheEndess(writer, xrefPos), this.count = saveCount;
            for (var i = 0; i < this.objectCollection.count; ++i) {
                this.objectCollection.items(i).object.isSaving = !1;
            }
            if (void 0 === filename) return writer.stream.buffer;
            writer.stream.save(filename);
        }, PdfCrossTable.prototype.saveTheEndess = function(writer, xrefPos) {
            writer.write(Operators.newLine + Operators.startxref + Operators.newLine), writer.write(xrefPos.toString() + Operators.newLine), 
            writer.write(Operators.eof + Operators.newLine);
        }, PdfCrossTable.prototype.saveTrailer = function(writer, count, prevXRef) {
            writer.write(Operators.trailer + Operators.newLine);
            var trailer = this.trailer;
            trailer.items.setValue(this.dictionaryProperties.size, new PdfNumber(this.objectCount + 1)), 
            (trailer = new PdfDictionary(trailer)).setEncrypt(!1), trailer.save(writer);
        }, PdfCrossTable.prototype.saveSections = function(writer) {
            var objectNum = 0, count = 0;
            do {
                count = this.prepareSubsection(objectNum), this.saveSubsection(writer, objectNum, count), 
                objectNum += count;
            } while (0 !== count);
        }, PdfCrossTable.prototype.saveSubsection = function(writer, objectNum, count) {
            if (!(count <= 0 || objectNum >= this.count)) {
                writer.write(objectNum + " " + (count + 1) + Operators.newLine);
                for (var i = objectNum; i <= objectNum + count; ++i) {
                    var obj = this.objects.getValue(i), str = "";
                    str = obj.type === ObjectType.Free ? this.getItem(obj.offset, 65535, !0) : this.getItem(obj.offset, obj.generation, !1), 
                    writer.write(str);
                }
            }
        }, PdfCrossTable.prototype.getItem = function(offset, genNumber, isFree) {
            var returnString = "", addOffsetLength = 10 - offset.toString().length;
            genNumber <= 0 && (genNumber = 0);
            for (var addGenNumberLength = 5 - genNumber.toString().length <= 0 ? 0 : 5 - genNumber.toString().length, index = 0; index < addOffsetLength; index++) returnString += "0";
            returnString = returnString + offset.toString() + " ";
            for (index = 0; index < addGenNumberLength; index++) returnString += "0";
            return returnString = returnString + genNumber.toString() + " ", returnString = returnString + (isFree ? Operators.f : Operators.n) + Operators.newLine;
        }, PdfCrossTable.prototype.prepareSubsection = function(objectNum) {
            for (var i, count = 0, total = this.count, k = 0; k < this.document.pdfObjects.count; k++) this.document.pdfObjects.items(k).reference.toString().split(" ");
            if (objectNum >= total) return count;
            for (i = objectNum; i < total; ++i) break;
            for (objectNum = i; i < total; ++i) ++count;
            return count;
        }, PdfCrossTable.prototype.markTrailerReferences = function() {
            this.trailer.items.keys(), this.trailer.items.values();
        }, PdfCrossTable.prototype.saveHead = function(writer) {
            var version = this.generateFileVersion(writer.document);
            writer.write("%PDF-" + version), writer.write(Operators.newLine);
        }, PdfCrossTable.prototype.generateFileVersion = function(document) {
            return "1." + 4..toString();
        }, PdfCrossTable.prototype.getReference = function(obj, bNew) {
            if (void 0 === bNew) {
                return this.getReference(obj, !1);
            }
            return this.getSubReference(obj, bNew);
        }, PdfCrossTable.prototype.getSubReference = function(obj, bNew) {
            var wasNew, isNew = !1, reference = null;
            if (this.items.count > 0 && obj.objectCollectionIndex > 0 && this.items.count > obj.objectCollectionIndex - 1) {
                var tempObj = this.document.pdfObjects.getReference(obj, wasNew);
                reference = tempObj.reference, wasNew = tempObj.wasNew;
            }
            if (wasNew = null == reference && obj.status !== ObjectStatus.Registered, null == reference) {
                var objnumber = this.nextObjNumber;
                reference = new PdfReference(objnumber, 0);
                if (wasNew) {
                    this.document.pdfObjects.add(obj), this.document.pdfObjects.trySetReference(obj, reference, void 0);
                    var tempIndex = this.document.pdfObjects.count - 1, tempkey = this.document.pdfObjects.objectCollections[tempIndex].reference.objNumber, tempvalue = this.document.pdfObjects.objectCollections[this.document.pdfObjects.count - 1];
                    this.document.pdfObjects.mainObjectCollection.setValue(tempkey, tempvalue), obj.position = -1;
                } else this.document.pdfObjects.trySetReference(obj, reference, void 0);
                obj.objectCollectionIndex = reference.objNumber, obj.status = ObjectStatus.None, 
                isNew = !0;
            }
            return isNew || this.bForceNew, reference;
        }, PdfCrossTable.prototype.saveObjects = function(writer) {
            for (var objectCollection = this.objectCollection, i = 0; i < objectCollection.count; ++i) {
                var obj = objectCollection.items(i).object;
                obj.isSaving = !0, this.saveIndirectObject(obj, writer);
            }
        }, PdfCrossTable.prototype.saveIndirectObject = function(obj, writer) {
            var reference = this.getReference(obj);
            obj instanceof PdfCatalog && this.trailer.items.setValue(this.dictionaryProperties.root, reference), 
            this.pdfDocument.currentSavingObj = reference;
            obj.getArchive(), this.registerObject(writer.position, reference), this.doSaveObject(obj, reference, writer);
        }, PdfCrossTable.prototype.doSaveObject = function(obj, reference, writer) {
            writer.length;
            writer.write(reference.objNumber.toString()), writer.write(Operators.whiteSpace), 
            writer.write(reference.genNumber.toString()), writer.write(Operators.whiteSpace), 
            writer.write(Operators.obj), writer.write(Operators.newLine), obj.save(writer);
            writer.stream;
            writer.write(Operators.endObj), writer.write(Operators.newLine);
        }, PdfCrossTable.prototype.registerObject = function(offset, reference, free) {
            "boolean" == typeof free ? (this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference, free)), 
            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber)) : void 0 === free && (this.objects.setValue(reference.objNumber, new RegisteredObject(offset, reference)), 
            this.maxGenNumIndex = Math.max(this.maxGenNumIndex, reference.genNumber));
        }, PdfCrossTable.dereference = function(obj) {
            return null != obj && (obj = obj.object), obj;
        }, PdfCrossTable;
    }(), RegisteredObject = function() {
        function RegisteredObject(offset, reference, free) {
            if (void 0 === free) {
                var tempOffset = offset;
                this.offsetNumber = tempOffset;
                var tempReference = reference;
                this.generation = tempReference.genNumber, this.object = tempReference.objNumber, 
                this.type = ObjectType.Normal;
            } else {
                tempOffset = offset, tempReference = reference;
                this.constructor(tempOffset, tempReference), this.type = ObjectType.Free;
            }
        }
        return Object.defineProperty(RegisteredObject.prototype, "objectNumber", {
            get: function() {
                return this.object;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RegisteredObject.prototype, "offset", {
            get: function() {
                return this.offsetNumber;
            },
            enumerable: !0,
            configurable: !0
        }), RegisteredObject;
    }(), PdfPageSize = function() {
        function PdfPageSize() {}
        return PdfPageSize.letter = new SizeF(612, 792), PdfPageSize.note = new SizeF(540, 720), 
        PdfPageSize.legal = new SizeF(612, 1008), PdfPageSize.a0 = new SizeF(2380, 3368), 
        PdfPageSize.a1 = new SizeF(1684, 2380), PdfPageSize.a2 = new SizeF(1190, 1684), 
        PdfPageSize.a3 = new SizeF(842, 1190), PdfPageSize.a4 = new SizeF(595, 842), PdfPageSize.a5 = new SizeF(421, 595), 
        PdfPageSize.a6 = new SizeF(297, 421), PdfPageSize.a7 = new SizeF(210, 297), PdfPageSize.a8 = new SizeF(148, 210), 
        PdfPageSize.a9 = new SizeF(105, 148), PdfPageSize.a10 = new SizeF(74, 105), PdfPageSize.b0 = new SizeF(2836, 4008), 
        PdfPageSize.b1 = new SizeF(2004, 2836), PdfPageSize.b2 = new SizeF(1418, 2004), 
        PdfPageSize.b3 = new SizeF(1002, 1418), PdfPageSize.b4 = new SizeF(709, 1002), PdfPageSize.b5 = new SizeF(501, 709), 
        PdfPageSize.archE = new SizeF(2592, 3456), PdfPageSize.archD = new SizeF(1728, 2592), 
        PdfPageSize.archC = new SizeF(1296, 1728), PdfPageSize.archB = new SizeF(864, 1296), 
        PdfPageSize.archA = new SizeF(648, 864), PdfPageSize.flsa = new SizeF(612, 936), 
        PdfPageSize.halfLetter = new SizeF(396, 612), PdfPageSize.letter11x17 = new SizeF(792, 1224), 
        PdfPageSize.ledger = new SizeF(1224, 792), PdfPageSize;
    }();
    !function(PdfPageOrientation) {
        PdfPageOrientation[PdfPageOrientation.Portrait = 0] = "Portrait", PdfPageOrientation[PdfPageOrientation.Landscape = 1] = "Landscape";
    }(PdfPageOrientation || (PdfPageOrientation = {}));
    var PdfPageRotateAngle;
    !function(PdfPageRotateAngle) {
        PdfPageRotateAngle[PdfPageRotateAngle.RotateAngle0 = 0] = "RotateAngle0", PdfPageRotateAngle[PdfPageRotateAngle.RotateAngle90 = 1] = "RotateAngle90", 
        PdfPageRotateAngle[PdfPageRotateAngle.RotateAngle180 = 2] = "RotateAngle180", PdfPageRotateAngle[PdfPageRotateAngle.RotateAngle270 = 3] = "RotateAngle270";
    }(PdfPageRotateAngle || (PdfPageRotateAngle = {}));
    var PdfNumberStyle;
    !function(PdfNumberStyle) {
        PdfNumberStyle[PdfNumberStyle.None = 0] = "None", PdfNumberStyle[PdfNumberStyle.Numeric = 1] = "Numeric", 
        PdfNumberStyle[PdfNumberStyle.LowerLatin = 2] = "LowerLatin", PdfNumberStyle[PdfNumberStyle.LowerRoman = 3] = "LowerRoman", 
        PdfNumberStyle[PdfNumberStyle.UpperLatin = 4] = "UpperLatin", PdfNumberStyle[PdfNumberStyle.UpperRoman = 5] = "UpperRoman";
    }(PdfNumberStyle || (PdfNumberStyle = {}));
    var PdfDockStyle;
    !function(PdfDockStyle) {
        PdfDockStyle[PdfDockStyle.None = 0] = "None", PdfDockStyle[PdfDockStyle.Bottom = 1] = "Bottom", 
        PdfDockStyle[PdfDockStyle.Top = 2] = "Top", PdfDockStyle[PdfDockStyle.Left = 3] = "Left", 
        PdfDockStyle[PdfDockStyle.Right = 4] = "Right", PdfDockStyle[PdfDockStyle.Fill = 5] = "Fill";
    }(PdfDockStyle || (PdfDockStyle = {}));
    var PdfAlignmentStyle;
    !function(PdfAlignmentStyle) {
        PdfAlignmentStyle[PdfAlignmentStyle.None = 0] = "None", PdfAlignmentStyle[PdfAlignmentStyle.TopLeft = 1] = "TopLeft", 
        PdfAlignmentStyle[PdfAlignmentStyle.TopCenter = 2] = "TopCenter", PdfAlignmentStyle[PdfAlignmentStyle.TopRight = 3] = "TopRight", 
        PdfAlignmentStyle[PdfAlignmentStyle.MiddleLeft = 4] = "MiddleLeft", PdfAlignmentStyle[PdfAlignmentStyle.MiddleCenter = 5] = "MiddleCenter", 
        PdfAlignmentStyle[PdfAlignmentStyle.MiddleRight = 6] = "MiddleRight", PdfAlignmentStyle[PdfAlignmentStyle.BottomLeft = 7] = "BottomLeft", 
        PdfAlignmentStyle[PdfAlignmentStyle.BottomCenter = 8] = "BottomCenter", PdfAlignmentStyle[PdfAlignmentStyle.BottomRight = 9] = "BottomRight";
    }(PdfAlignmentStyle || (PdfAlignmentStyle = {}));
    var TemplateType;
    !function(TemplateType) {
        TemplateType[TemplateType.None = 0] = "None", TemplateType[TemplateType.Top = 1] = "Top", 
        TemplateType[TemplateType.Bottom = 2] = "Bottom", TemplateType[TemplateType.Left = 3] = "Left", 
        TemplateType[TemplateType.Right = 4] = "Right";
    }(TemplateType || (TemplateType = {}));
    var ImageFormat, PdfMargins = function() {
        function PdfMargins() {
            this.pdfMargin = 40, this.setMargins(this.pdfMargin);
        }
        return Object.defineProperty(PdfMargins.prototype, "left", {
            get: function() {
                return this.leftMargin;
            },
            set: function(value) {
                this.leftMargin = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfMargins.prototype, "top", {
            get: function() {
                return this.topMargin;
            },
            set: function(value) {
                this.topMargin = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfMargins.prototype, "right", {
            get: function() {
                return this.rightMargin;
            },
            set: function(value) {
                this.rightMargin = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfMargins.prototype, "bottom", {
            get: function() {
                return this.bottomMargin;
            },
            set: function(value) {
                this.bottomMargin = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfMargins.prototype, "all", {
            set: function(value) {
                this.setMargins(value);
            },
            enumerable: !0,
            configurable: !0
        }), PdfMargins.prototype.setMargins = function(margin1, margin2, margin3, margin4) {
            void 0 === margin2 ? this.leftMargin = this.topMargin = this.rightMargin = this.bottomMargin = margin1 : void 0 === margin3 ? (this.leftMargin = this.rightMargin = margin1, 
            this.bottomMargin = this.topMargin = margin2) : (this.leftMargin = margin1, this.topMargin = margin2, 
            this.rightMargin = margin3, this.bottomMargin = margin4);
        }, PdfMargins.prototype.clone = function() {
            return this;
        }, PdfMargins;
    }(), PdfPageSettings = function() {
        function PdfPageSettings(margins) {
            this.pageMargins = new PdfMargins(), this.pageSize = PdfPageSize.a4, this.rotateAngle = PdfPageRotateAngle.RotateAngle0, 
            this.pageOrientation = PdfPageOrientation.Portrait, this.pageOrigin = new PointF(0, 0), 
            this.isRotation = !1, "number" == typeof margins && this.pageMargins.setMargins(margins);
        }
        return Object.defineProperty(PdfPageSettings.prototype, "size", {
            get: function() {
                return this.pageSize;
            },
            set: function(value) {
                this.setSize(value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageSettings.prototype, "orientation", {
            get: function() {
                return this.pageOrientation;
            },
            set: function(orientation) {
                this.pageOrientation !== orientation && (this.pageOrientation = orientation, this.updateSize(orientation));
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageSettings.prototype, "margins", {
            get: function() {
                return this.pageMargins;
            },
            set: function(value) {
                this.pageMargins = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageSettings.prototype, "width", {
            get: function() {
                return this.pageSize.width;
            },
            set: function(value) {
                this.pageSize.width = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageSettings.prototype, "height", {
            get: function() {
                return this.pageSize.height;
            },
            set: function(value) {
                this.pageSize.height = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageSettings.prototype, "origin", {
            get: function() {
                return this.pageOrigin;
            },
            set: function(value) {
                this.pageOrigin = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageSettings.prototype, "rotate", {
            get: function() {
                return this.rotateAngle;
            },
            set: function(value) {
                this.rotateAngle = value, this.isRotation = !0;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageSettings.prototype.updateSize = function(orientation) {
            var min = Math.min(this.pageSize.width, this.pageSize.height), max = Math.max(this.pageSize.width, this.pageSize.height);
            switch (orientation) {
              case PdfPageOrientation.Portrait:
                this.pageSize = new SizeF(min, max);
                break;

              case PdfPageOrientation.Landscape:
                this.pageSize = new SizeF(max, min);
            }
        }, PdfPageSettings.prototype.clone = function() {
            return this.pageMargins = this.pageMargins.clone(), this;
        }, PdfPageSettings.prototype.getActualSize = function() {
            var width = this.width - (this.margins.left + this.margins.right), height = this.height - (this.margins.top + this.margins.bottom);
            return new SizeF(width, height);
        }, PdfPageSettings.prototype.setSize = function(size) {
            var min = Math.min(size.width, size.height), max = Math.max(size.width, size.height);
            this.orientation === PdfPageOrientation.Portrait ? this.pageSize = new SizeF(min, max) : this.pageSize = new SizeF(max, min);
        }, PdfPageSettings;
    }(), PdfStreamWriter = function() {
        function PdfStreamWriter(stream) {
            if (null == stream) throw new Error("ArgumentNullException:stream");
            this.stream = stream;
        }
        return PdfStreamWriter.prototype.clear = function() {
            this.stream.clearStream();
        }, PdfStreamWriter.prototype.setGraphicsState = function(dictionaryName) {
            dictionaryName instanceof PdfName ? (this.stream.write(dictionaryName.toString()), 
            this.stream.write(Operators.whiteSpace), this.writeOperator(Operators.setGraphicsState)) : (this.stream.write(Operators.slash), 
            this.stream.write(dictionaryName), this.stream.write(Operators.whiteSpace), this.writeOperator(Operators.setGraphicsState));
        }, PdfStreamWriter.prototype.executeObject = function(name) {
            this.stream.write(name.toString()), this.stream.write(Operators.whiteSpace), this.writeOperator(Operators.paintXObject), 
            this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.closePath = function() {
            this.writeOperator(Operators.closePath);
        }, PdfStreamWriter.prototype.clipPath = function(useEvenOddRule) {
            this.stream.write(Operators.clipPath), useEvenOddRule && this.stream.write(Operators.evenOdd), 
            this.stream.write(Operators.whiteSpace), this.stream.write(Operators.endPath), this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.closeFillStrokePath = function(useEvenOddRule) {
            this.stream.write(Operators.closeFillStrokePath), useEvenOddRule ? (this.stream.write(Operators.evenOdd), 
            this.stream.write(Operators.newLine)) : this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.fillStrokePath = function(useEvenOddRule) {
            this.stream.write(Operators.fillStroke), useEvenOddRule ? (this.stream.write(Operators.evenOdd), 
            this.stream.write(Operators.newLine)) : this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.fillPath = function(useEvenOddRule) {
            this.stream.write(Operators.fill), useEvenOddRule ? (this.stream.write(Operators.evenOdd), 
            this.stream.write(Operators.newLine)) : this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.endPath = function() {
            this.writeOperator(Operators.n);
        }, PdfStreamWriter.prototype.closeFillPath = function(useEvenOddRule) {
            this.writeOperator(Operators.closePath), this.stream.write(Operators.fill), useEvenOddRule ? (this.stream.write(Operators.evenOdd), 
            this.stream.write(Operators.newLine)) : this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.closeStrokePath = function() {
            this.writeOperator(Operators.closeStrokePath);
        }, PdfStreamWriter.prototype.setTextScaling = function(textScaling) {
            this.stream.write(PdfNumber.floatToString(textScaling)), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setTextScaling);
        }, PdfStreamWriter.prototype.strokePath = function() {
            this.writeOperator(Operators.stroke);
        }, PdfStreamWriter.prototype.restoreGraphicsState = function() {
            this.writeOperator(Operators.restoreState);
        }, PdfStreamWriter.prototype.saveGraphicsState = function() {
            this.writeOperator(Operators.saveState);
        }, PdfStreamWriter.prototype.startNextLine = function(arg1, arg2) {
            void 0 === arg1 ? this.writeOperator(Operators.goToNextLine) : arg1 instanceof PointF ? (this.writePoint(arg1), 
            this.writeOperator(Operators.setCoords)) : (this.writePoint(arg1, arg2), this.writeOperator(Operators.setCoords));
        }, PdfStreamWriter.prototype.showText = function(text) {
            this.checkTextParam(text), this.writeText(text), this.writeOperator(Operators.setText);
        }, PdfStreamWriter.prototype.setLeading = function(leading) {
            this.stream.write(PdfNumber.floatToString(leading)), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setTextLeading);
        }, PdfStreamWriter.prototype.beginPath = function(x, y) {
            this.writePoint(x, y), this.writeOperator(Operators.beginPath);
        }, PdfStreamWriter.prototype.beginText = function() {
            this.writeOperator(Operators.beginText);
        }, PdfStreamWriter.prototype.endText = function() {
            this.writeOperator(Operators.endText);
        }, PdfStreamWriter.prototype.appendRectangle = function(arg1, arg2, arg3, arg4) {
            arg1 instanceof RectangleF ? this.appendRectangle(arg1.x, arg1.y, arg1.width, arg1.height) : (this.writePoint(arg1, arg2), 
            this.writePoint(arg3, arg4), this.writeOperator(Operators.appendRectangle));
        }, PdfStreamWriter.prototype.appendLineSegment = function(arg1, arg2) {
            arg1 instanceof PointF ? this.appendLineSegment(arg1.x, arg1.y) : (this.writePoint(arg1, arg2), 
            this.writeOperator(Operators.appendLineSegment));
        }, PdfStreamWriter.prototype.setTextRenderingMode = function(renderingMode) {
            this.stream.write(renderingMode.toString()), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setRenderingMode);
        }, PdfStreamWriter.prototype.setCharacterSpacing = function(charSpacing) {
            this.stream.write(PdfNumber.floatToString(charSpacing)), this.stream.write(Operators.whiteSpace), 
            this.stream.write(Operators.setCharacterSpace), this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.setWordSpacing = function(wordSpacing) {
            this.stream.write(PdfNumber.floatToString(wordSpacing)), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setWordSpace);
        }, PdfStreamWriter.prototype.showNextLineText = function(arg1, arg2) {
            arg1 instanceof PdfString ? (this.checkTextParam(arg1), this.writeText(arg1), this.writeOperator(Operators.setTextOnNewLine)) : (this.checkTextParam(arg1), 
            this.writeText(arg1, arg2), this.writeOperator(Operators.setTextOnNewLine));
        }, PdfStreamWriter.prototype.setColorSpace = function(arg1, arg2) {
            if (arg1 instanceof PdfName && "boolean" == typeof arg2) {
                var temparg1 = arg1, op = (temparg2 = arg2) ? Operators.selectcolorspaceforstroking : Operators.selectcolorspacefornonstroking;
                this.stream.write(temparg1.toString()), this.stream.write(Operators.whiteSpace), 
                this.stream.write(op), this.stream.write(Operators.newLine);
            } else {
                temparg1 = arg1;
                var temparg2 = arg2;
                this.setColorSpace(new PdfName(temparg1), temparg2);
            }
        }, PdfStreamWriter.prototype.modifyCtm = function(matrix) {
            if (null == matrix) throw new Error("ArgumentNullException:matrix");
            this.stream.write(matrix.toString()), this.stream.write(Operators.whiteSpace), this.writeOperator(Operators.modifyCtm);
        }, PdfStreamWriter.prototype.setFont = function(font, name, size) {
            if ("string" == typeof name) this.setFont(font, new PdfName(name), size); else {
                if (null == font) throw new Error("ArgumentNullException:font");
                this.stream.write(name.toString()), this.stream.write(Operators.whiteSpace), this.stream.write(PdfNumber.floatToString(size)), 
                this.stream.write(Operators.whiteSpace), this.writeOperator(Operators.setFont);
            }
        }, PdfStreamWriter.prototype.writeOperator = function(opcode) {
            this.stream.write(opcode), this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.checkTextParam = function(text) {
            if (null == text) throw new Error("ArgumentNullException:text");
            if ("string" == typeof text && "" === text) throw new Error("ArgumentException:The text can not be an empty string, text");
        }, PdfStreamWriter.prototype.writeText = function(arg1, arg2) {
            if (arg1 instanceof PdfString && void 0 === arg2) this.stream.write(arg1.pdfEncode()); else {
                var start = void 0, end = void 0;
                arg2 ? (start = PdfString.hexStringMark[0], end = PdfString.hexStringMark[1]) : (start = PdfString.stringMark[0], 
                end = PdfString.stringMark[1]), this.stream.write(start), this.stream.write(arg1), 
                this.stream.write(end);
            }
        }, PdfStreamWriter.prototype.writePoint = function(arg1, arg2) {
            if (arg1 instanceof PointF && void 0 === arg2) this.writePoint(arg1.x, arg1.y); else {
                var temparg1 = arg1;
                this.stream.write(PdfNumber.floatToString(temparg1)), this.stream.write(Operators.whiteSpace), 
                arg2 = this.updateY(arg2), this.stream.write(PdfNumber.floatToString(arg2)), this.stream.write(Operators.whiteSpace);
            }
        }, PdfStreamWriter.prototype.updateY = function(arg) {
            return -arg;
        }, PdfStreamWriter.prototype.write = function(string) {
            var builder = "";
            builder += string, builder += Operators.newLine, this.writeOperator(builder);
        }, PdfStreamWriter.prototype.writeComment = function(comment) {
            if (!(null != comment && comment.length > 0)) throw new Error("Invalid comment");
            var builder = "";
            builder += Operators.comment, builder += Operators.whiteSpace, builder += comment, 
            this.writeOperator(builder);
        }, PdfStreamWriter.prototype.setColorAndSpace = function(color, colorSpace, forStroking) {
            color.isEmpty || (this.stream.write(color.toString(colorSpace, forStroking)), this.stream.write(Operators.newLine));
        }, PdfStreamWriter.prototype.setLineDashPattern = function(pattern, patternOffset) {
            this.setLineDashPatternHelper(pattern, patternOffset);
        }, PdfStreamWriter.prototype.setLineDashPatternHelper = function(pattern, patternOffset) {
            var tempPattern = "[";
            if (pattern.length > 1) for (var index = 0; index < pattern.length; index++) index === pattern.length - 1 ? tempPattern += pattern[index].toString() : tempPattern += pattern[index].toString() + " ";
            tempPattern += "] ", tempPattern += patternOffset.toString(), tempPattern += " " + Operators.setDashPattern, 
            this.stream.write(tempPattern), this.stream.write(Operators.newLine);
        }, PdfStreamWriter.prototype.setMiterLimit = function(miterLimit) {
            this.stream.write(PdfNumber.floatToString(miterLimit)), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setMiterLimit);
        }, PdfStreamWriter.prototype.setLineWidth = function(width) {
            this.stream.write(PdfNumber.floatToString(width)), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setLineWidth);
        }, PdfStreamWriter.prototype.setLineCap = function(lineCapStyle) {
            this.stream.write(lineCapStyle.toString()), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setLineCapStyle);
        }, PdfStreamWriter.prototype.setLineJoin = function(lineJoinStyle) {
            this.stream.write(lineJoinStyle.toString()), this.stream.write(Operators.whiteSpace), 
            this.writeOperator(Operators.setLineJoinStyle);
        }, Object.defineProperty(PdfStreamWriter.prototype, "position", {
            get: function() {
                return this.stream.position;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStreamWriter.prototype, "length", {
            get: function() {
                var returnValue = 0;
                if (0 !== this.stream.data.length && -1 !== this.stream.data.length) for (var index = 0; index < this.stream.data.length; index++) returnValue += this.stream.data[index].length;
                return returnValue;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfStreamWriter.prototype, "document", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), PdfStreamWriter;
    }(), PdfPen = function() {
        function PdfPen(arg1, arg2) {
            this.pdfColor = new PdfColor(0, 0, 0), this.dashOffsetValue = 0, this.penDashPattern = [ 0 ], 
            this.pdfDashStyle = PdfDashStyle.Solid, this.pdfLineCap = 0, this.pdfLineJoin = 0, 
            this.penWidth = 1, this.internalMiterLimit = 0, this.colorSpace = PdfColorSpace.Rgb, 
            "number" == typeof arg2 ? (this.constructor(arg1), this.width = arg2) : void 0 === arg2 && arg1 instanceof PdfBrush ? this.setBrush(arg1) : void 0 === arg2 && arg1 instanceof PdfColor && (this.color = arg1);
        }
        return Object.defineProperty(PdfPen.prototype, "color", {
            get: function() {
                return this.pdfColor;
            },
            set: function(value) {
                this.pdfColor = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPen.prototype, "dashOffset", {
            get: function() {
                return void 0 === this.dashOffsetValue || null == this.dashOffsetValue ? 0 : this.dashOffsetValue;
            },
            set: function(value) {
                this.dashOffsetValue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPen.prototype, "dashPattern", {
            get: function() {
                return this.penDashPattern;
            },
            set: function(value) {
                this.penDashPattern = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPen.prototype, "dashStyle", {
            get: function() {
                return this.pdfDashStyle;
            },
            set: function(value) {
                if (this.pdfDashStyle !== value) switch (this.pdfDashStyle = value, this.pdfDashStyle) {
                  case PdfDashStyle.Custom:
                    break;

                  case PdfDashStyle.Dash:
                    this.penDashPattern = [ 3, 1 ];
                    break;

                  case PdfDashStyle.Dot:
                    this.penDashPattern = [ 1, 1 ];
                    break;

                  case PdfDashStyle.DashDot:
                    this.penDashPattern = [ 3, 1, 1, 1 ];
                    break;

                  case PdfDashStyle.DashDotDot:
                    this.penDashPattern = [ 3, 1, 1, 1, 1, 1 ];
                    break;

                  case PdfDashStyle.Solid:
                    break;

                  default:
                    this.pdfDashStyle = PdfDashStyle.Solid, this.penDashPattern = [ 0 ];
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPen.prototype, "lineCap", {
            get: function() {
                return this.pdfLineCap;
            },
            set: function(value) {
                this.pdfLineCap = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPen.prototype, "lineJoin", {
            get: function() {
                return this.pdfLineJoin;
            },
            set: function(value) {
                this.pdfLineJoin = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPen.prototype, "miterLimit", {
            get: function() {
                return this.internalMiterLimit;
            },
            set: function(value) {
                this.internalMiterLimit = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPen.prototype, "width", {
            get: function() {
                return this.penWidth;
            },
            set: function(value) {
                this.penWidth = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPen.prototype.clone = function() {
            return this;
        }, PdfPen.prototype.setBrush = function(brush) {
            var sBrush = brush;
            this.color = sBrush.color, this.pdfBrush = sBrush;
        }, PdfPen.prototype.monitorChanges = function(currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {
            saveState = !0, this.dashControl(currentPen, saveState, streamWriter), streamWriter.setLineWidth(this.width), 
            streamWriter.setLineJoin(this.lineJoin), streamWriter.setLineCap(this.lineCap);
            var miterLimit = this.miterLimit;
            miterLimit > 0 && streamWriter.setMiterLimit(miterLimit);
            this.pdfBrush;
            return streamWriter.setColorAndSpace(this.color, currentColorSpace, !0), !0;
        }, PdfPen.prototype.dashControl = function(pen, saveState, streamWriter) {
            saveState = !0;
            var lineWidth = this.width, pattern = this.getPattern();
            return streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth), saveState;
        }, PdfPen.prototype.getPattern = function() {
            for (var pattern = this.dashPattern, i = 0; i < pattern.length; ++i) pattern[i] *= this.width;
            return pattern;
        }, PdfPen;
    }(), PdfTransformationMatrix = function() {
        function PdfTransformationMatrix(value) {
            this.radDegFactor = 180 / Math.PI, this.transformationMatrix = new Matrix$1(1, 0, 0, void 0 === value ? 1 : -1, 0, 0);
        }
        return Object.defineProperty(PdfTransformationMatrix.prototype, "matrix", {
            get: function() {
                return this.transformationMatrix;
            },
            set: function(value) {
                this.transformationMatrix = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTransformationMatrix.prototype.translate = function(offsetX, offsetY) {
            this.transformationMatrix.translate(offsetX, offsetY);
        }, PdfTransformationMatrix.prototype.scale = function(scaleX, scaleY) {
            this.transformationMatrix.elements[0] = scaleX, this.transformationMatrix.elements[3] = scaleY;
        }, PdfTransformationMatrix.prototype.rotate = function(angle) {
            angle = angle * Math.PI / 180, this.transformationMatrix.elements[0] = Math.cos(angle), 
            this.transformationMatrix.elements[1] = Math.sin(angle), this.transformationMatrix.elements[2] = -Math.sin(angle), 
            this.transformationMatrix.elements[3] = Math.cos(angle);
        }, PdfTransformationMatrix.prototype.toString = function() {
            for (var builder = "", i = 0, len = this.transformationMatrix.elements.length; i < len; i++) {
                this.matrix.elements[i];
                builder += PdfNumber.floatToString(this.transformationMatrix.elements[i]), builder += " ";
            }
            return builder;
        }, PdfTransformationMatrix.prototype.multiply = function(matrix) {
            this.transformationMatrix.multiply(matrix.matrix);
        }, PdfTransformationMatrix.degreesToRadians = function(degreesX) {
            return this.degRadFactor * degreesX;
        }, PdfTransformationMatrix.prototype.radiansToDegrees = function(radians) {
            return this.radDegFactor * radians;
        }, PdfTransformationMatrix.prototype.clone = function() {
            return this;
        }, PdfTransformationMatrix.degRadFactor = Math.PI / 180, PdfTransformationMatrix;
    }(), Matrix$1 = function() {
        function Matrix(arg1, arg2, arg3, arg4, arg5, arg6) {
            void 0 === arg1 ? this.metrixElements = [] : "number" == typeof arg1 ? (this.constructor(), 
            this.metrixElements.push(arg1), this.metrixElements.push(arg2), this.metrixElements.push(arg3), 
            this.metrixElements.push(arg4), this.metrixElements.push(arg5), this.metrixElements.push(arg6)) : this.metrixElements = arg1;
        }
        return Object.defineProperty(Matrix.prototype, "elements", {
            get: function() {
                return this.metrixElements;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Matrix.prototype, "offsetX", {
            get: function() {
                return this.metrixElements[4];
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(Matrix.prototype, "offsetY", {
            get: function() {
                return this.metrixElements[5];
            },
            enumerable: !0,
            configurable: !0
        }), Matrix.prototype.translate = function(offsetX, offsetY) {
            this.metrixElements[4] = offsetX, this.metrixElements[5] = offsetY;
        }, Matrix.prototype.transform = function(point) {
            var x = point.x, y = point.y, x2 = x * this.elements[0] + y * this.elements[2] + this.offsetX, y2 = x * this.elements[1] + y * this.elements[3] + this.offsetY;
            return new PointF(x2, y2);
        }, Matrix.prototype.multiply = function(matrix) {
            var tempMatrix = [];
            tempMatrix.push(this.elements[0] * matrix.elements[0] + this.elements[1] * matrix.elements[2]), 
            tempMatrix[1] = this.elements[0] * matrix.elements[1] + this.elements[1] * matrix.elements[3], 
            tempMatrix[2] = this.elements[2] * matrix.elements[0] + this.elements[3] * matrix.elements[2], 
            tempMatrix[3] = this.elements[2] * matrix.elements[1] + this.elements[3] * matrix.elements[3], 
            tempMatrix[4] = this.offsetX * matrix.elements[0] + this.offsetY * matrix.elements[2] + matrix.offsetX, 
            tempMatrix[5] = this.offsetX * matrix.elements[1] + this.offsetY * matrix.elements[3] + matrix.offsetY;
            for (var i = 0; i < tempMatrix.length; i++) this.elements[i] = tempMatrix[i];
        }, Matrix.prototype.dispose = function() {
            this.metrixElements = null;
        }, Matrix.prototype.clone = function() {
            return new Matrix(this.metrixElements);
        }, Matrix;
    }(), ProcedureSets = function() {
        return function() {
            this.pdf = "PDF", this.text = "Text", this.imageB = "ImageB", this.imageC = "ImageC", 
            this.imageI = "ImageI";
        };
    }(), TemporaryDictionary = function() {
        function TemporaryDictionary() {
            this.mKeys = [], this.mValues = [];
        }
        return TemporaryDictionary.prototype.size = function() {
            return this.mKeys.length;
        }, TemporaryDictionary.prototype.add = function(key, value) {
            if (void 0 === key || null === key || void 0 === value || null === value) throw new ReferenceError("Provided key or value is not valid.");
            if (this.mKeys.indexOf(key) < 0) return this.mKeys.push(key), this.mValues.push(value), 
            1;
            throw new RangeError("An item with the same key has already been added.");
        }, TemporaryDictionary.prototype.keys = function() {
            return this.mKeys;
        }, TemporaryDictionary.prototype.values = function() {
            return this.mValues;
        }, TemporaryDictionary.prototype.getValue = function(key) {
            if (void 0 === key || null === key) throw new ReferenceError("Provided key is not valid.");
            var index = this.mKeys.indexOf(key);
            if (index < 0) throw new RangeError("No item with the specified key has been added.");
            return this.mValues[index];
        }, TemporaryDictionary.prototype.setValue = function(key, value) {
            if (void 0 === key || null === key) throw new ReferenceError("Provided key is not valid.");
            var index = this.mKeys.indexOf(key);
            index < 0 ? (this.mKeys.push(key), this.mValues.push(value)) : this.mValues[index] = value;
        }, TemporaryDictionary.prototype.remove = function(key) {
            if (void 0 === key || null === key) throw new ReferenceError("Provided key is not valid.");
            var index = this.mKeys.indexOf(key);
            if (index < 0) throw new RangeError("No item with the specified key has been added.");
            return this.mKeys.splice(index, 1), this.mValues.splice(index, 1), !0;
        }, TemporaryDictionary.prototype.containsKey = function(key) {
            if (void 0 === key || null === key) throw new ReferenceError("Provided key is not valid.");
            return !(this.mKeys.indexOf(key) < 0);
        }, TemporaryDictionary.prototype.clear = function() {
            this.mKeys = [], this.mValues = [];
        }, TemporaryDictionary;
    }(), PdfTransparency = function() {
        function PdfTransparency(stroke, fill, mode) {
            this.dictionary = new PdfDictionary(), this.dictionaryProperties = new DictionaryProperties(), 
            this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke)), 
            this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill)), 
            this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));
        }
        return Object.defineProperty(PdfTransparency.prototype, "element", {
            get: function() {
                return this.dictionary;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTransparency;
    }(), PdfAutomaticFieldInfoCollection = function() {
        function PdfAutomaticFieldInfoCollection() {
            this.automaticFieldsInformation = [];
        }
        return Object.defineProperty(PdfAutomaticFieldInfoCollection.prototype, "automaticFields", {
            get: function() {
                return this.automaticFieldsInformation;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAutomaticFieldInfoCollection.prototype.add = function(fieldInfo) {
            return this.automaticFields.push(fieldInfo);
        }, PdfAutomaticFieldInfoCollection;
    }(), PdfGraphicsElement = function() {
        function PdfGraphicsElement() {}
        return PdfGraphicsElement.prototype.drawHelper = function(graphics, x, y) {
            var bNeedSave = 0 !== x || 0 !== y, gState = null;
            bNeedSave && (gState = graphics.save(), graphics.translateTransform(x, y)), this.drawInternal(graphics), 
            bNeedSave && graphics.restore(gState);
        }, PdfGraphicsElement;
    }(), __extends$81 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfAutomaticField = function(_super) {
        function PdfAutomaticField() {
            var _this = _super.call(this) || this;
            return _this.internalBounds = new RectangleF(0, 0, 0, 0), _this.internalTemplateSize = new SizeF(0, 0), 
            _this;
        }
        return __extends$81(PdfAutomaticField, _super), Object.defineProperty(PdfAutomaticField.prototype, "bounds", {
            get: function() {
                return this.internalBounds;
            },
            set: function(value) {
                this.internalBounds = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticField.prototype, "size", {
            get: function() {
                return new SizeF(this.bounds.width, this.bounds.height);
            },
            set: function(value) {
                this.bounds.width = value.width, this.bounds.height = value.height;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticField.prototype, "location", {
            get: function() {
                return new PointF(this.bounds.x, this.bounds.y);
            },
            set: function(value) {
                this.bounds.x = value.x, this.bounds.y = value.y;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticField.prototype, "font", {
            get: function() {
                return this.internalFont;
            },
            set: function(value) {
                this.internalFont = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticField.prototype, "brush", {
            get: function() {
                return this.internalBrush;
            },
            set: function(value) {
                this.internalBrush = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticField.prototype, "pen", {
            get: function() {
                return this.internalPen;
            },
            set: function(value) {
                this.internalPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticField.prototype, "stringFormat", {
            get: function() {
                return this.internalStringFormat;
            },
            set: function(value) {
                this.internalStringFormat = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAutomaticField.prototype.performDrawHelper = function(graphics, location, scalingX, scalingY) {
            if (0 === this.bounds.height || 0 === this.bounds.width) {
                var text = this.getValue(graphics);
                this.internalTemplateSize = this.getFont().measureString(text, this.size, this.stringFormat);
            }
        }, PdfAutomaticField.prototype.draw = function(arg1, arg2, arg3) {
            if (void 0 === arg2) {
                var location_1 = new PointF(0, 0);
                this.draw(arg1, location_1);
            } else if (arg2 instanceof PointF) this.draw(arg1, arg2.x, arg2.y); else {
                this.drawHelper(arg1, arg2, arg3);
                var info = new PdfAutomaticFieldInfo(this, new PointF(arg2, arg3));
                arg1.automaticFields.add(info);
            }
        }, PdfAutomaticField.prototype.getSize = function() {
            return 0 === this.bounds.height || 0 === this.bounds.width ? this.internalTemplateSize : this.size;
        }, PdfAutomaticField.prototype.drawInternal = function(graphics) {}, PdfAutomaticField.prototype.getBrush = function() {
            return void 0 === this.internalBrush || null == this.internalBrush ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.internalBrush;
        }, PdfAutomaticField.prototype.getFont = function() {
            return void 0 === this.internalFont || null == this.internalFont ? PdfDocument.defaultFont : this.internalFont;
        }, PdfAutomaticField.prototype.getPageFromGraphics = function(graphics) {
            if (void 0 !== graphics.page && null !== graphics.page) {
                return graphics.page;
            }
            return graphics.currentPage;
        }, PdfAutomaticField;
    }(PdfGraphicsElement), PdfAutomaticFieldInfo = function() {
        function PdfAutomaticFieldInfo(field, location, scaleX, scaleY) {
            this.pageNumberFieldLocation = new PointF(), this.pageNumberField = null, this.scaleX = 1, 
            this.scaleY = 1, void 0 === location && field instanceof PdfAutomaticFieldInfo ? (this.pageNumberField = field.field, 
            this.pageNumberFieldLocation = field.location, this.scaleX = field.scalingX, this.scaleY = field.scalingY) : void 0 === scaleX && location instanceof PointF && field instanceof PdfAutomaticField ? (this.pageNumberField = field, 
            this.pageNumberFieldLocation = location) : (this.pageNumberField = field, this.pageNumberFieldLocation = location, 
            this.scaleX = scaleX, this.scaleY = scaleY);
        }
        return Object.defineProperty(PdfAutomaticFieldInfo.prototype, "location", {
            get: function() {
                return this.pageNumberFieldLocation;
            },
            set: function(value) {
                this.pageNumberFieldLocation = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticFieldInfo.prototype, "field", {
            get: function() {
                return this.pageNumberField;
            },
            set: function(value) {
                this.pageNumberField = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticFieldInfo.prototype, "scalingX", {
            get: function() {
                return this.scaleX;
            },
            set: function(value) {
                this.scaleX = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAutomaticFieldInfo.prototype, "scalingY", {
            get: function() {
                return this.scaleY;
            },
            set: function(value) {
                this.scaleY = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAutomaticFieldInfo;
    }(), ByteArray = function() {
        function ByteArray(length) {
            this.mPosition = 0, this.buffer = new Uint8Array(length), this.dataView = new DataView(this.buffer.buffer);
        }
        return Object.defineProperty(ByteArray.prototype, "position", {
            get: function() {
                return this.mPosition;
            },
            set: function(value) {
                this.mPosition = value;
            },
            enumerable: !0,
            configurable: !0
        }), ByteArray.prototype.read = function(buffer, offset, count) {
            for (var index = offset; index < count; index++) {
                var position = this.position;
                buffer.buffer[index] = this.readByte(position), this.position++;
            }
        }, ByteArray.prototype.getBuffer = function(index) {
            return this.buffer[index];
        }, ByteArray.prototype.writeFromBase64String = function(base64) {
            var arr = this.encodedString(base64);
            this.buffer = arr;
        }, ByteArray.prototype.encodedString = function(input) {
            var chr1, chr2, chr3, enc2, enc3, keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", i = 0, resultIndex = 0, totalLength = 3 * (input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "")).length / 4;
            input.charAt(input.length - 1) === keyStr.charAt(64) && totalLength--;
            for (var output = new Uint8Array(0 | totalLength); i < input.length; ) chr1 = keyStr.indexOf(input.charAt(i++)) << 2 | (enc2 = keyStr.indexOf(input.charAt(i++))) >> 4, 
            chr2 = (15 & enc2) << 4 | (enc3 = keyStr.indexOf(input.charAt(i++))) >> 2, chr3 = (3 & enc3) << 6 | keyStr.indexOf(input.charAt(i++)), 
            output[resultIndex++] = chr1, output[resultIndex++] = chr2, output[resultIndex++] = chr3;
            return output;
        }, ByteArray.prototype.readByte = function(offset) {
            return this.buffer[offset];
        }, Object.defineProperty(ByteArray.prototype, "internalBuffer", {
            get: function() {
                return this.buffer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ByteArray.prototype, "count", {
            get: function() {
                return this.buffer.byteLength;
            },
            enumerable: !0,
            configurable: !0
        }), ByteArray;
    }(), PdfBoolean = function() {
        function PdfBoolean(value) {
            this.currentPosition = -1, this.value = value;
        }
        return Object.defineProperty(PdfBoolean.prototype, "status", {
            get: function() {
                return this.objectStatus;
            },
            set: function(value) {
                this.objectStatus = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBoolean.prototype, "isSaving", {
            get: function() {
                return this.saving;
            },
            set: function(value) {
                this.saving = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBoolean.prototype, "objectCollectionIndex", {
            get: function() {
                return this.index;
            },
            set: function(value) {
                this.index = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBoolean.prototype, "position", {
            get: function() {
                return this.currentPosition;
            },
            set: function(value) {
                this.currentPosition = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBoolean.prototype, "clonedObject", {
            get: function() {
                return null;
            },
            enumerable: !0,
            configurable: !0
        }), PdfBoolean.prototype.save = function(writer) {
            writer.write(this.boolToStr(this.value));
        }, PdfBoolean.prototype.clone = function(crossTable) {
            return new PdfBoolean(this.value);
        }, PdfBoolean.prototype.boolToStr = function(value) {
            return value ? "true" : "false";
        }, PdfBoolean;
    }();
    !function(ImageFormat) {
        ImageFormat[ImageFormat.Unknown = 0] = "Unknown", ImageFormat[ImageFormat.Bmp = 1] = "Bmp", 
        ImageFormat[ImageFormat.Emf = 2] = "Emf", ImageFormat[ImageFormat.Gif = 3] = "Gif", 
        ImageFormat[ImageFormat.Jpeg = 4] = "Jpeg", ImageFormat[ImageFormat.Png = 5] = "Png", 
        ImageFormat[ImageFormat.Wmf = 6] = "Wmf", ImageFormat[ImageFormat.Icon = 7] = "Icon";
    }(ImageFormat || (ImageFormat = {}));
    var PdfLayoutType, ImageDecoder = function() {
        function ImageDecoder(stream) {
            this.mFormat = ImageFormat.Unknown, this.mbitsPerComponent = 8, this.dictionaryProperties = new DictionaryProperties(), 
            this.mStream = stream, this.initialize();
        }
        return Object.defineProperty(ImageDecoder.prototype, "height", {
            get: function() {
                return this.mHeight;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ImageDecoder.prototype, "width", {
            get: function() {
                return this.mWidth;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ImageDecoder.prototype, "bitsPerComponent", {
            get: function() {
                return this.mbitsPerComponent;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ImageDecoder.prototype, "size", {
            get: function() {
                return this.mImageData.count;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ImageDecoder.prototype, "imageData", {
            get: function() {
                return this.mImageData;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ImageDecoder.prototype, "imageDataAsNumberArray", {
            get: function() {
                return this.mImageData.internalBuffer.buffer;
            },
            enumerable: !0,
            configurable: !0
        }), ImageDecoder.prototype.initialize = function() {
            this.mFormat === ImageFormat.Unknown && this.checkIfJpeg() && (this.mFormat = ImageFormat.Jpeg, 
            this.parseJpegImage()), this.reset(), this.mImageData = new ByteArray(this.mStream.count), 
            this.mStream.read(this.mImageData, 0, this.mImageData.count);
        }, ImageDecoder.prototype.reset = function() {
            this.mStream.position = 0;
        }, ImageDecoder.prototype.parseJpegImage = function() {
            this.reset();
            var imgData = new ByteArray(this.mStream.count);
            this.mStream.read(imgData, 0, imgData.count);
            var i = 4;
            if ("J" === String.fromCharCode(imgData.getBuffer(i + 2)) && "F" === String.fromCharCode(imgData.getBuffer(i + 3)) && "I" === String.fromCharCode(imgData.getBuffer(i + 4)) && "F" === String.fromCharCode(imgData.getBuffer(i + 5)) && 0 === imgData.getBuffer(i + 6)) for (var length_1 = 256 * imgData.getBuffer(i) + imgData.getBuffer(i + 1); i + length_1 < imgData.count; ) {
                if (i += length_1, 192 === imgData.getBuffer(i + 1)) return this.mHeight = 256 * imgData.getBuffer(i + 5) + imgData.getBuffer(i + 6), 
                void (this.mWidth = 256 * imgData.getBuffer(i + 7) + imgData.getBuffer(i + 8));
                i += 2, length_1 = 256 * imgData.getBuffer(i) + imgData.getBuffer(i + 1);
            }
        }, Object.defineProperty(ImageDecoder.prototype, "format", {
            get: function() {
                return this.mFormat;
            },
            enumerable: !0,
            configurable: !0
        }), ImageDecoder.prototype.checkIfJpeg = function() {
            this.reset();
            for (var i = 0; i < ImageDecoder.mJpegHeader.length; i++) {
                if (ImageDecoder.mJpegHeader[i] !== this.mStream.readByte(i)) return !1;
                this.mStream.position++;
            }
            return !0;
        }, ImageDecoder.prototype.getImageDictionary = function() {
            if (this.mFormat === ImageFormat.Jpeg) {
                this.imageData.internalBuffer.length;
                this.imageStream = new PdfStream(), this.imageStream.isImage = !0;
                for (var tempString = "", decodedString = "", i = 0; i < this.imageDataAsNumberArray.byteLength; i++) tempString += String.fromCharCode(null, this.mStream.readByte(i));
                for (i = 0; i < tempString.length; i++) i % 2 != 0 && (decodedString += tempString[i]);
                return this.imageStream.data = [ decodedString ], this.imageStream.compress = !1, 
                this.imageStream.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.xObject)), 
                this.imageStream.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.image)), 
                this.imageStream.items.setValue(this.dictionaryProperties.width, new PdfNumber(this.width)), 
                this.imageStream.items.setValue(this.dictionaryProperties.height, new PdfNumber(this.height)), 
                this.imageStream.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent)), 
                this.imageStream.items.setValue(this.dictionaryProperties.filter, new PdfName(this.dictionaryProperties.dctdecode)), 
                this.imageStream.items.setValue(this.dictionaryProperties.colorSpace, new PdfName(this.getColorSpace())), 
                this.imageStream.items.setValue(this.dictionaryProperties.decodeParms, this.getDecodeParams()), 
                this.imageStream;
            }
            return this.imageStream;
        }, ImageDecoder.prototype.getColorSpace = function() {
            return this.dictionaryProperties.deviceRgb;
        }, ImageDecoder.prototype.getDecodeParams = function() {
            var decodeParams = new PdfDictionary();
            return decodeParams.items.setValue(this.dictionaryProperties.columns, new PdfNumber(this.width)), 
            decodeParams.items.setValue(this.dictionaryProperties.blackIs1, new PdfBoolean(!0)), 
            decodeParams.items.setValue(this.dictionaryProperties.k, new PdfNumber(-1)), decodeParams.items.setValue(this.dictionaryProperties.predictor, new PdfNumber(15)), 
            decodeParams.items.setValue(this.dictionaryProperties.bitsPerComponent, new PdfNumber(this.bitsPerComponent)), 
            decodeParams;
        }, ImageDecoder.mPngHeader = [ 137, 80, 78, 71, 13, 10, 26, 10 ], ImageDecoder.mJpegHeader = [ 255, 216 ], 
        ImageDecoder.GIF_HEADER = "G,I,F,8", ImageDecoder.BMP_HEADER = "B,M", ImageDecoder;
    }(), PdfUnitConverter = function() {
        function PdfUnitConverter(dpi) {
            this.updateProportionsHelper(dpi);
        }
        return PdfUnitConverter.prototype.convertUnits = function(value, from, to) {
            return this.convertFromPixels(this.convertToPixels(value, from), to);
        }, PdfUnitConverter.prototype.convertToPixels = function(value, from) {
            var index = from;
            return value * this.proportions[index];
        }, PdfUnitConverter.prototype.convertFromPixels = function(value, to) {
            var index = to;
            return value / this.proportions[index];
        }, PdfUnitConverter.prototype.updateProportionsHelper = function(pixelPerInch) {
            this.proportions = [ pixelPerInch / 2.54, pixelPerInch / 6, 1, pixelPerInch / 72, pixelPerInch, pixelPerInch / 300, pixelPerInch / 25.4 ];
        }, PdfUnitConverter.horizontalResolution = 96, PdfUnitConverter.verticalResolution = 96, 
        PdfUnitConverter;
    }(), PdfImage = function() {
        function PdfImage() {}
        return Object.defineProperty(PdfImage.prototype, "width", {
            get: function() {
                return this.imageWidth;
            },
            set: function(value) {
                this.imageWidth = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfImage.prototype, "height", {
            get: function() {
                return this.imageHeight;
            },
            set: function(value) {
                this.imageHeight = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfImage.prototype, "size", {
            set: function(value) {
                this.width = value.width, this.height = value.height;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfImage.prototype, "physicalDimension", {
            get: function() {
                return this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution), 
                new SizeF(this.width, this.height);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfImage.prototype, "element", {
            get: function() {
                return this.imageStream;
            },
            enumerable: !0,
            configurable: !0
        }), PdfImage.prototype.getPointSize = function(width, height, horizontalResolution, verticalResolution) {
            if (void 0 === horizontalResolution) {
                var dpiX = PdfUnitConverter.horizontalResolution, dpiY = PdfUnitConverter.verticalResolution;
                return this.getPointSize(width, height, dpiX, dpiY);
            }
            var ucX = new PdfUnitConverter(horizontalResolution), ucY = new PdfUnitConverter(verticalResolution), ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point), ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);
            return new SizeF(ptWidth, ptHeight);
        }, PdfImage;
    }(), __extends$82 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfBitmap = function(_super) {
        function PdfBitmap(encodedString) {
            var _this = _super.call(this) || this;
            return _this.imageStatus = !0, _this.dictionaryProperties = new DictionaryProperties(), 
            _this.loadImage(encodedString), _this;
        }
        return __extends$82(PdfBitmap, _super), PdfBitmap.prototype.loadImage = function(encodedString) {
            this.initializeAsync(encodedString);
        }, PdfBitmap.prototype.initializeAsync = function(encodedString) {
            var byteArray = new ByteArray(encodedString.length);
            byteArray.writeFromBase64String(encodedString), this.decoder = new ImageDecoder(byteArray), 
            this.height = this.decoder.height, this.width = this.decoder.width, this.bitsPerComponent = this.decoder.bitsPerComponent;
        }, PdfBitmap.prototype.save = function() {
            this.imageStatus = !0, this.imageStream = this.decoder.getImageDictionary();
        }, PdfBitmap;
    }(PdfImage), TtfTableInfo = function() {
        function TtfTableInfo() {}
        return Object.defineProperty(TtfTableInfo.prototype, "empty", {
            get: function() {
                return this.offset === this.length && this.length === this.checksum && 0 === this.checksum;
            },
            enumerable: !0,
            configurable: !0
        }), TtfTableInfo;
    }(), TtfNameTable = function() {
        return function() {};
    }(), TtfNameRecord = function() {
        return function() {};
    }(), TtfHeadTable = function() {
        return function() {};
    }(), TtfMetrics = function() {
        function TtfMetrics() {}
        return Object.defineProperty(TtfMetrics.prototype, "isItalic", {
            get: function() {
                return 0 != (2 & this.macStyle);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TtfMetrics.prototype, "isBold", {
            get: function() {
                return 0 != (1 & this.macStyle);
            },
            enumerable: !0,
            configurable: !0
        }), TtfMetrics;
    }(), TtfHorizontalHeaderTable = function() {
        return function() {};
    }(), TtfOS2Table = function() {
        return function() {};
    }(), TtfPostTable = function() {
        return function() {};
    }(), TtfLongHorMetric = function() {
        return function() {};
    }(), TtfCmapSubTable = function() {
        return function() {};
    }(), TtfCmapTable = function() {
        return function() {};
    }(), TtfGlyphInfo = function() {
        function TtfGlyphInfo() {}
        return Object.defineProperty(TtfGlyphInfo.prototype, "empty", {
            get: function() {
                return this.index === this.width && this.width === this.charCode && 0 === this.charCode;
            },
            enumerable: !0,
            configurable: !0
        }), TtfGlyphInfo.prototype.compareTo = function(obj) {
            var glyph = obj;
            return this.index - glyph.index;
        }, TtfGlyphInfo;
    }(), TtfLocaTable = function() {
        return function() {};
    }(), TtfAppleCmapSubTable = function() {
        return function() {};
    }(), TtfMicrosoftCmapSubTable = function() {
        return function() {};
    }(), TtfTrimmedCmapSubTable = function() {
        return function() {};
    }(), TtfGlyphHeader = function() {
        return function() {};
    }(), BigEndianWriter = function() {
        function BigEndianWriter(capacity) {
            this.int32Size = 4, this.int16Size = 2, this.int64Size = 8, this.bufferLength = capacity, 
            this.buffer = [];
        }
        return Object.defineProperty(BigEndianWriter.prototype, "data", {
            get: function() {
                if (this.buffer.length < this.bufferLength) for (var length_1 = this.bufferLength - this.buffer.length, i = 0; i < length_1; i++) this.buffer.push(0);
                return this.buffer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(BigEndianWriter.prototype, "position", {
            get: function() {
                return void 0 !== this.internalPosition && null !== this.internalPosition || (this.internalPosition = 0), 
                this.internalPosition;
            },
            enumerable: !0,
            configurable: !0
        }), BigEndianWriter.prototype.writeShort = function(value) {
            var bytes = [ (65280 & value) >> 8, 255 & value ];
            this.flush(bytes);
        }, BigEndianWriter.prototype.writeInt = function(value) {
            var bytes = [ (4278190080 & value) >> 24, (16711680 & value) >> 16, (65280 & value) >> 8, 255 & value ];
            this.flush(bytes);
        }, BigEndianWriter.prototype.writeUInt = function(value) {
            var buff = [ (4278190080 & value) >> 24, (16711680 & value) >> 16, (65280 & value) >> 8, 255 & value ];
            this.flush(buff);
        }, BigEndianWriter.prototype.writeString = function(value) {
            if (null == value) throw new Error("Argument Null Exception : value");
            for (var bytes = [], i = 0; i < value.length; i++) bytes.push(value.charCodeAt(i));
            this.flush(bytes);
        }, BigEndianWriter.prototype.writeBytes = function(value) {
            this.flush(value);
        }, BigEndianWriter.prototype.flush = function(buff) {
            if (null === buff) throw new Error("Argument Null Exception : buff");
            for (var result = [], i = 0; i < this.position; i++) result.push(this.buffer[i]);
            for (i = 0; i < buff.length; i++) result.push(buff[i]);
            for (i = this.position; i < this.buffer.length; i++) result.push(this.buffer[i]);
            this.buffer = result, this.internalPosition += buff.length;
        }, BigEndianWriter;
    }(), TtfReader = function() {
        function TtfReader(fontData) {
            this.int32Size = 4, this.isTtcFont = !1, this.isMacTtf = !1, this.metricsName = "", 
            this.isMacTTF = !1, this.missedGlyphs = 0, this.tableNames = [ "cvt ", "fpgm", "glyf", "head", "hhea", "hmtx", "loca", "maxp", "prep" ], 
            this.entrySelectors = [ 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4 ], 
            this.fontData = fontData, this.initialize();
        }
        return Object.defineProperty(TtfReader.prototype, "macintosh", {
            get: function() {
                return null !== this.macintoshDictionary && void 0 !== this.macintoshDictionary || (this.macintoshDictionary = new Dictionary()), 
                this.macintoshDictionary;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TtfReader.prototype, "microsoft", {
            get: function() {
                return null !== this.microsoftDictionary && void 0 !== this.microsoftDictionary || (this.microsoftDictionary = new Dictionary()), 
                this.microsoftDictionary;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TtfReader.prototype, "macintoshGlyphs", {
            get: function() {
                return null !== this.internalMacintoshGlyphs && void 0 !== this.internalMacintoshGlyphs || (this.internalMacintoshGlyphs = new Dictionary()), 
                this.internalMacintoshGlyphs;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(TtfReader.prototype, "microsoftGlyphs", {
            get: function() {
                return null !== this.internalMicrosoftGlyphs && void 0 !== this.internalMicrosoftGlyphs || (this.internalMicrosoftGlyphs = new Dictionary()), 
                this.internalMicrosoftGlyphs;
            },
            enumerable: !0,
            configurable: !0
        }), TtfReader.prototype.initialize = function() {
            void 0 === this.metrics && (this.metrics = new TtfMetrics()), this.readFontDictionary();
            var nameTable = this.readNameTable(), headTable = this.readHeadTable();
            this.initializeFontName(nameTable), this.metrics.macStyle = headTable.macStyle;
        }, TtfReader.prototype.readFontDictionary = function() {
            this.offset = 0;
            this.checkPreambula();
            var numTables = this.readInt16(this.offset);
            this.readInt16(this.offset), this.readInt16(this.offset), this.readInt16(this.offset);
            void 0 === this.tableDirectory && (this.tableDirectory = new Dictionary());
            for (var i = 0; i < numTables; ++i) {
                var table = new TtfTableInfo(), tableKey = this.readString(this.int32Size);
                table.checksum = this.readInt32(this.offset), table.offset = this.readInt32(this.offset), 
                table.length = this.readInt32(this.offset), this.tableDirectory.setValue(tableKey, table);
            }
            this.lowestPosition = this.offset, this.isTtcFont || this.fixOffsets();
        }, TtfReader.prototype.fixOffsets = function() {
            for (var minOffset = Number.MAX_VALUE, tableKeys = this.tableDirectory.keys(), i = 0; i < tableKeys.length; i++) {
                var offset = (value = this.tableDirectory.getValue(tableKeys[i])).offset;
                if (minOffset > offset && (minOffset = offset) <= this.lowestPosition) break;
            }
            var shift = minOffset - this.lowestPosition;
            if (0 !== shift) {
                var table = new Dictionary();
                for (i = 0; i < tableKeys.length; i++) {
                    var value;
                    (value = this.tableDirectory.getValue(tableKeys[i])).offset -= shift, table.setValue(tableKeys[i], value);
                }
                this.tableDirectory = table;
            }
        }, TtfReader.prototype.checkPreambula = function() {
            var version = this.readInt32(this.offset);
            if (this.isMacTtf = 1953658213 === version, 65536 !== version && 1953658213 !== version && 1330926671 !== version) {
                this.isTtcFont = !0, this.offset = 0;
                if ("ttcf" !== this.readString(4)) throw new Error("Can not read TTF font data");
                this.offset += 4;
                if (this.readInt32(this.offset) < 0) throw new Error("Can not read TTF font data");
                this.offset = this.readInt32(this.offset), version = this.readInt32(this.offset);
            }
            return version;
        }, TtfReader.prototype.readNameTable = function() {
            var tableInfo = this.getTable("name");
            this.offset = tableInfo.offset;
            var table = new TtfNameTable();
            table.formatSelector = this.readUInt16(this.offset), table.recordsCount = this.readUInt16(this.offset), 
            table.offset = this.readUInt16(this.offset), table.nameRecords = [];
            for (var position = this.offset, i = 0; i < table.recordsCount; i++) {
                this.offset = position;
                var record = new TtfNameRecord();
                record.platformID = this.readUInt16(this.offset), record.encodingID = this.readUInt16(this.offset), 
                record.languageID = this.readUInt16(this.offset), record.nameID = this.readUInt16(this.offset), 
                record.length = this.readUInt16(this.offset), record.offset = this.readUInt16(this.offset), 
                this.offset = tableInfo.offset + table.offset + record.offset;
                var unicode = 0 === record.platformID || 3 === record.platformID;
                record.name = this.readString(record.length, unicode), table.nameRecords[i] = record, 
                position += 12;
            }
            return table;
        }, TtfReader.prototype.readHeadTable = function() {
            var tableInfo = this.getTable("head");
            this.offset = tableInfo.offset;
            var table = new TtfHeadTable();
            return table.version = this.readFixed(this.offset), table.fontRevision = this.readFixed(this.offset), 
            table.checkSumAdjustment = this.readUInt32(this.offset), table.magicNumber = this.readUInt32(this.offset), 
            table.flags = this.readUInt16(this.offset), table.unitsPerEm = this.readUInt16(this.offset), 
            table.created = this.readInt64(this.offset), table.modified = this.readInt64(this.offset), 
            table.xMin = this.readInt16(this.offset), table.yMin = this.readInt16(this.offset), 
            table.xMax = this.readInt16(this.offset), table.yMax = this.readInt16(this.offset), 
            table.macStyle = this.readUInt16(this.offset), table.lowestReadableSize = this.readUInt16(this.offset), 
            table.fontDirectionHint = this.readInt16(this.offset), table.indexToLocalFormat = this.readInt16(this.offset), 
            table.glyphDataFormat = this.readInt16(this.offset), table;
        }, TtfReader.prototype.readHorizontalHeaderTable = function() {
            var tableInfo = this.getTable("hhea");
            this.offset = tableInfo.offset;
            var table = new TtfHorizontalHeaderTable();
            return table.version = this.readFixed(this.offset), table.ascender = this.readInt16(this.offset), 
            table.descender = this.readInt16(this.offset), table.lineGap = this.readInt16(this.offset), 
            table.advanceWidthMax = this.readUInt16(this.offset), table.minLeftSideBearing = this.readInt16(this.offset), 
            table.minRightSideBearing = this.readInt16(this.offset), table.xMaxExtent = this.readInt16(this.offset), 
            table.caretSlopeRise = this.readInt16(this.offset), table.caretSlopeRun = this.readInt16(this.offset), 
            this.offset += 10, table.metricDataFormat = this.readInt16(this.offset), table.numberOfHMetrics = this.readUInt16(this.offset), 
            table;
        }, TtfReader.prototype.readOS2Table = function() {
            var tableInfo = this.getTable("OS/2");
            this.offset = tableInfo.offset;
            var table = new TtfOS2Table();
            return table.version = this.readUInt16(this.offset), table.xAvgCharWidth = this.readInt16(this.offset), 
            table.usWeightClass = this.readUInt16(this.offset), table.usWidthClass = this.readUInt16(this.offset), 
            table.fsType = this.readInt16(this.offset), table.ySubscriptXSize = this.readInt16(this.offset), 
            table.ySubscriptYSize = this.readInt16(this.offset), table.ySubscriptXOffset = this.readInt16(this.offset), 
            table.ySubscriptYOffset = this.readInt16(this.offset), table.ySuperscriptXSize = this.readInt16(this.offset), 
            table.ySuperscriptYSize = this.readInt16(this.offset), table.ySuperscriptXOffset = this.readInt16(this.offset), 
            table.ySuperscriptYOffset = this.readInt16(this.offset), table.yStrikeoutSize = this.readInt16(this.offset), 
            table.yStrikeoutPosition = this.readInt16(this.offset), table.sFamilyClass = this.readInt16(this.offset), 
            table.panose = this.readBytes(10), table.ulUnicodeRange1 = this.readUInt32(this.offset), 
            table.ulUnicodeRange2 = this.readUInt32(this.offset), table.ulUnicodeRange3 = this.readUInt32(this.offset), 
            table.ulUnicodeRange4 = this.readUInt32(this.offset), table.vendorIdentifier = this.readBytes(4), 
            table.fsSelection = this.readUInt16(this.offset), table.usFirstCharIndex = this.readUInt16(this.offset), 
            table.usLastCharIndex = this.readUInt16(this.offset), table.sTypoAscender = this.readInt16(this.offset), 
            table.sTypoDescender = this.readInt16(this.offset), table.sTypoLineGap = this.readInt16(this.offset), 
            table.usWinAscent = this.readUInt16(this.offset), table.usWinDescent = this.readUInt16(this.offset), 
            table.ulCodePageRange1 = this.readUInt32(this.offset), table.ulCodePageRange2 = this.readUInt32(this.offset), 
            table.version > 1 ? (table.sxHeight = this.readInt16(this.offset), table.sCapHeight = this.readInt16(this.offset), 
            table.usDefaultChar = this.readUInt16(this.offset), table.usBreakChar = this.readUInt16(this.offset), 
            table.usMaxContext = this.readUInt16(this.offset)) : (table.sxHeight = 0, table.sCapHeight = 0, 
            table.usDefaultChar = 0, table.usBreakChar = 0, table.usMaxContext = 0), table;
        }, TtfReader.prototype.readPostTable = function() {
            var tableInfo = this.getTable("post");
            this.offset = tableInfo.offset;
            var table = new TtfPostTable();
            return table.formatType = this.readFixed(this.offset), table.italicAngle = this.readFixed(this.offset), 
            table.underlinePosition = this.readInt16(this.offset), table.underlineThickness = this.readInt16(this.offset), 
            table.isFixedPitch = this.readUInt32(this.offset), table.minType42 = this.readUInt32(this.offset), 
            table.maxType42 = this.readUInt32(this.offset), table.minType1 = this.readUInt32(this.offset), 
            table.maxType1 = this.readUInt32(this.offset), table;
        }, TtfReader.prototype.readWidthTable = function(glyphCount, unitsPerEm) {
            var tableInfo = this.getTable("hmtx");
            this.offset = tableInfo.offset;
            for (var width = [], i = 0; i < glyphCount; i++) {
                var glyph = new TtfLongHorMetric();
                glyph.advanceWidth = this.readUInt16(this.offset), glyph.lsb = this.readInt16(this.offset);
                var glyphWidth = 1e3 * glyph.advanceWidth / unitsPerEm;
                width.push(Math.floor(glyphWidth));
            }
            return width;
        }, TtfReader.prototype.readCmapTable = function() {
            var tableInfo = this.getTable("cmap");
            this.offset = tableInfo.offset;
            var table = new TtfCmapTable();
            table.version = this.readUInt16(this.offset), table.tablesCount = this.readUInt16(this.offset);
            for (var position = this.offset, subTables = [], i = 0; i < table.tablesCount; i++) {
                this.offset = position;
                var subTable = new TtfCmapSubTable();
                subTable.platformID = this.readUInt16(this.offset), subTable.encodingID = this.readUInt16(this.offset), 
                subTable.offset = this.readUInt32(this.offset), position = this.offset, this.readCmapSubTable(subTable), 
                subTables[i] = subTable;
            }
            return subTables;
        }, TtfReader.prototype.readCmapSubTable = function(subTable) {
            var tableInfo = this.getTable("cmap");
            this.offset = tableInfo.offset + subTable.offset;
            var format = this.readUInt16(this.offset), encoding = this.getCmapEncoding(subTable.platformID, subTable.encodingID);
            encoding === TtfCmapEncoding.Macintosh ? TtfPlatformID.Macintosh : TtfPlatformID.Microsoft;
            if (encoding !== TtfCmapEncoding.Unknown) switch (format) {
              case TtfCmapFormat.Apple:
                this.readAppleCmapTable(subTable, encoding);
                break;

              case TtfCmapFormat.Microsoft:
                this.readMicrosoftCmapTable(subTable, encoding);
                break;

              case TtfCmapFormat.Trimmed:
                this.readTrimmedCmapTable(subTable, encoding);
            }
        }, TtfReader.prototype.readAppleCmapTable = function(subTable, encoding) {
            var tableInfo = this.getTable("cmap");
            this.offset = tableInfo.offset + subTable.offset;
            var table = new TtfAppleCmapSubTable();
            table.format = this.readUInt16(this.offset), table.length = this.readUInt16(this.offset), 
            table.version = this.readUInt16(this.offset), null !== this.maxMacIndex && void 0 !== this.maxMacIndex || (this.maxMacIndex = 0);
            for (var i = 0; i < 256; ++i) {
                var glyphInfo = new TtfGlyphInfo();
                glyphInfo.index = this.readByte(this.offset), glyphInfo.width = this.getWidth(glyphInfo.index), 
                glyphInfo.charCode = i, this.macintosh.setValue(i, glyphInfo), this.addGlyph(glyphInfo, encoding), 
                this.maxMacIndex = Math.max(i, this.maxMacIndex);
            }
        }, TtfReader.prototype.readMicrosoftCmapTable = function(subTable, encoding) {
            var tableInfo = this.getTable("cmap");
            this.offset = tableInfo.offset + subTable.offset;
            var collection = encoding === TtfCmapEncoding.Unicode ? this.microsoft : this.macintosh, table = new TtfMicrosoftCmapSubTable();
            table.format = this.readUInt16(this.offset), table.length = this.readUInt16(this.offset), 
            table.version = this.readUInt16(this.offset), table.segCountX2 = this.readUInt16(this.offset), 
            table.searchRange = this.readUInt16(this.offset), table.entrySelector = this.readUInt16(this.offset), 
            table.rangeShift = this.readUInt16(this.offset);
            var segCount = table.segCountX2 / 2;
            table.endCount = this.readUshortArray(segCount), table.reservedPad = this.readUInt16(this.offset), 
            table.startCount = this.readUshortArray(segCount), table.idDelta = this.readUshortArray(segCount), 
            table.idRangeOffset = this.readUshortArray(segCount);
            var length = table.length / 2 - 8 - 4 * segCount;
            table.glyphID = this.readUshortArray(length);
            for (var codeOffset = 0, index = 0, j = 0; j < segCount; j++) for (var k = table.startCount[j]; k <= table.endCount[j] && 65535 !== k; k++) {
                if (0 === table.idRangeOffset[j]) codeOffset = k + table.idDelta[j] & 65535; else {
                    if ((index = j + table.idRangeOffset[j] / 2 - segCount + k - table.startCount[j]) >= table.glyphID.length) continue;
                    codeOffset = table.glyphID[index] + table.idDelta[j] & 65535;
                }
                var glyph = new TtfGlyphInfo();
                glyph.index = codeOffset, glyph.width = this.getWidth(glyph.index);
                var id = encoding === TtfCmapEncoding.Symbol && 61440 == (65280 & k) ? 255 & k : k;
                glyph.charCode = id, collection.setValue(id, glyph), this.addGlyph(glyph, encoding);
            }
        }, TtfReader.prototype.readTrimmedCmapTable = function(subTable, encoding) {
            var tableInfo = this.getTable("cmap");
            this.offset = tableInfo.offset + subTable.offset;
            var table = new TtfTrimmedCmapSubTable();
            table.format = this.readUInt16(this.offset), table.length = this.readUInt16(this.offset), 
            table.version = this.readUInt16(this.offset), table.firstCode = this.readUInt16(this.offset), 
            table.entryCount = this.readUInt16(this.offset);
            for (var i = 0; i < table.entryCount; ++i) {
                var glyphInfo = new TtfGlyphInfo();
                glyphInfo.index = this.readUInt16(this.offset), glyphInfo.width = this.getWidth(glyphInfo.index), 
                glyphInfo.charCode = i + table.firstCode, this.macintosh.setValue(i, glyphInfo), 
                this.addGlyph(glyphInfo, encoding), this.maxMacIndex = Math.max(i, this.maxMacIndex);
            }
        }, TtfReader.prototype.initializeFontName = function(nameTable) {
            for (var i = 0; i < nameTable.recordsCount; i++) {
                var record = nameTable.nameRecords[i];
                if (1 === record.nameID ? this.metrics.fontFamily = record.name : 6 === record.nameID && (this.metrics.postScriptName = record.name), 
                null !== this.metrics.fontFamily && void 0 !== this.metrics.fontFamily && null !== this.metrics.postScriptName && void 0 !== this.metrics.postScriptName) break;
            }
        }, TtfReader.prototype.getTable = function(name) {
            var obj, table = new TtfTableInfo();
            return this.tableDirectory.containsKey(name) && (obj = this.tableDirectory.getValue(name)), 
            null !== obj && void 0 !== obj && (table = obj), table;
        }, TtfReader.prototype.getWidth = function(glyphCode) {
            return glyphCode = glyphCode < this.width.length ? glyphCode : this.width.length - 1, 
            this.width[glyphCode];
        }, TtfReader.prototype.getCmapEncoding = function(platformID, encodingID) {
            var format = TtfCmapEncoding.Unknown;
            return platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Undefined ? format = TtfCmapEncoding.Symbol : platformID == TtfPlatformID.Microsoft && encodingID == TtfMicrosoftEncodingID.Unicode ? format = TtfCmapEncoding.Unicode : platformID == TtfPlatformID.Macintosh && encodingID == TtfMacintoshEncodingID.Roman && (format = TtfCmapEncoding.Macintosh), 
            format;
        }, TtfReader.prototype.addGlyph = function(glyph, encoding) {
            var collection = null;
            switch (encoding) {
              case TtfCmapEncoding.Unicode:
                collection = this.microsoftGlyphs;
                break;

              case TtfCmapEncoding.Macintosh:
              case TtfCmapEncoding.Symbol:
                collection = this.macintoshGlyphs;
            }
            collection.setValue(glyph.index, glyph);
        }, TtfReader.prototype.initializeMetrics = function(nameTable, headTable, horizontalHeadTable, os2Table, postTable, cmapTables) {
            this.initializeFontName(nameTable);
            for (var bSymbol = !1, i = 0; i < cmapTables.length; i++) {
                var subTable = cmapTables[i];
                if (this.getCmapEncoding(subTable.platformID, subTable.encodingID) === TtfCmapEncoding.Symbol) {
                    bSymbol = !0;
                    break;
                }
            }
            this.metrics.isSymbol = bSymbol, this.metrics.macStyle = headTable.macStyle, this.metrics.isFixedPitch = 0 !== postTable.isFixedPitch, 
            this.metrics.italicAngle = postTable.italicAngle;
            var factor = 1e3 / headTable.unitsPerEm;
            this.metrics.winAscent = os2Table.sTypoAscender * factor, this.metrics.macAscent = horizontalHeadTable.ascender * factor, 
            this.metrics.capHeight = 0 !== os2Table.sCapHeight ? os2Table.sCapHeight : .7 * headTable.unitsPerEm * factor, 
            this.metrics.winDescent = os2Table.sTypoDescender * factor, this.metrics.macDescent = horizontalHeadTable.descender * factor, 
            this.metrics.leading = (os2Table.sTypoAscender - os2Table.sTypoDescender + os2Table.sTypoLineGap) * factor, 
            this.metrics.lineGap = Math.ceil(horizontalHeadTable.lineGap * factor);
            var left = headTable.xMin * factor, top = Math.ceil(this.metrics.macAscent + this.metrics.lineGap), right = headTable.xMax * factor, bottom = this.metrics.macDescent;
            this.metrics.fontBox = new Rectangle(left, top, right, bottom), this.metrics.stemV = 80, 
            this.metrics.widthTable = this.updateWidth(), this.metrics.contains = this.tableDirectory.containsKey("CFF"), 
            this.metrics.subScriptSizeFactor = headTable.unitsPerEm / os2Table.ySubscriptYSize, 
            this.metrics.superscriptSizeFactor = headTable.unitsPerEm / os2Table.ySuperscriptYSize;
        }, TtfReader.prototype.updateWidth = function() {
            var bytes = [];
            if (this.metrics.isSymbol) for (var i = 0; i < 256; i++) {
                var glyphInfo = this.getGlyph(String.fromCharCode(i));
                bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width;
            } else {
                var byteToProcess = [], space = String.fromCharCode(32);
                for (i = 0; i < 256; i++) {
                    byteToProcess[0] = i;
                    var text = this.getString(byteToProcess, 0, byteToProcess.length), ch = text.length > 0 ? text[0] : "?";
                    (glyphInfo = this.getGlyph(ch)).empty ? (glyphInfo = this.getGlyph(space), bytes[i] = glyphInfo.empty ? 0 : glyphInfo.width) : bytes[i] = glyphInfo.width;
                }
            }
            return bytes;
        }, TtfReader.prototype.getDefaultGlyph = function() {
            return this.getGlyph(StringTokenizer.whiteSpace);
        }, TtfReader.prototype.getString = function(byteToProcess, start, length) {
            for (var result = "", index = 0; index < length; index++) result += String.fromCharCode(byteToProcess[index + start]);
            return result;
        }, TtfReader.prototype.readLocaTable = function(bShort) {
            var tableInfo = this.getTable("loca");
            this.offset = tableInfo.offset;
            var table = new TtfLocaTable(), buffer = null;
            if (bShort) {
                var len = tableInfo.length / 2;
                buffer = [];
                for (var i = 0; i < len; i++) buffer[i] = 2 * this.readUInt16(this.offset);
            } else {
                len = tableInfo.length / 4;
                buffer = [];
                for (i = 0; i < len; i++) buffer[i] = this.readUInt32(this.offset);
            }
            return table.offsets = buffer, table;
        }, TtfReader.prototype.updateGlyphChars = function(glyphChars, locaTable) {
            glyphChars.containsKey(0) || glyphChars.setValue(0, 0);
            for (var clone = new Dictionary(), glyphCharKeys = glyphChars.keys(), i = 0; i < glyphCharKeys.length; i++) clone.setValue(glyphCharKeys[i], glyphChars.getValue(glyphCharKeys[i]));
            for (i = 0; i < glyphCharKeys.length; i++) {
                var nextKey = glyphCharKeys[i];
                this.processCompositeGlyph(glyphChars, nextKey, locaTable);
            }
        }, TtfReader.prototype.processCompositeGlyph = function(glyphChars, glyph, locaTable) {
            if (glyph < locaTable.offsets.length - 1) {
                var glyphOffset = locaTable.offsets[glyph];
                if (glyphOffset !== locaTable.offsets[glyph + 1]) {
                    var tableInfo = this.getTable("glyf");
                    this.offset = tableInfo.offset + glyphOffset;
                    var glyphHeader = new TtfGlyphHeader();
                    if (glyphHeader.numberOfContours = this.readInt16(this.offset), glyphHeader.xMin = this.readInt16(this.offset), 
                    glyphHeader.yMin = this.readInt16(this.offset), glyphHeader.xMax = this.readInt16(this.offset), 
                    glyphHeader.yMax = this.readInt16(this.offset), glyphHeader.numberOfContours < 0) for (var skipBytes = 0; ;) {
                        var flags = this.readUInt16(this.offset), glyphIndex = this.readUInt16(this.offset);
                        if (glyphChars.containsKey(glyphIndex) || glyphChars.setValue(glyphIndex, 0), 0 == (flags & TtfCompositeGlyphFlags.MoreComponents)) break;
                        skipBytes = 0 != (flags & TtfCompositeGlyphFlags.Arg1And2AreWords) ? 4 : 2, 0 != (flags & TtfCompositeGlyphFlags.WeHaveScale) ? skipBytes += 2 : 0 != (flags & TtfCompositeGlyphFlags.WeHaveAnXyScale) ? skipBytes += 4 : 0 != (flags & TtfCompositeGlyphFlags.WeHaveTwoByTwo) && (skipBytes += 8), 
                        this.offset += skipBytes;
                    }
                }
            }
        }, TtfReader.prototype.generateGlyphTable = function(glyphChars, locaTable, newLocaTable, newGlyphTable) {
            newLocaTable = [];
            var activeGlyphs = glyphChars.keys();
            activeGlyphs.sort(function(a, b) {
                return a - b;
            });
            for (var glyphSize = 0, i = 0; i < activeGlyphs.length; i++) {
                var glyphIndex = activeGlyphs[i];
                locaTable.offsets.length > 0 && (glyphSize += locaTable.offsets[glyphIndex + 1] - locaTable.offsets[glyphIndex]);
            }
            var glyphSizeAligned = this.align(glyphSize);
            newGlyphTable = [];
            for (i = 0; i < glyphSizeAligned; i++) newGlyphTable.push(0);
            var nextGlyphOffset = 0, nextGlyphIndex = 0, table = this.getTable("glyf");
            for (i = 0; i < locaTable.offsets.length; i++) if (newLocaTable.push(nextGlyphOffset), 
            nextGlyphIndex < activeGlyphs.length && activeGlyphs[nextGlyphIndex] === i) {
                ++nextGlyphIndex, newLocaTable[i] = nextGlyphOffset;
                var oldGlyphOffset = locaTable.offsets[i], oldNextGlyphOffset = locaTable.offsets[i + 1] - oldGlyphOffset;
                if (oldNextGlyphOffset > 0) {
                    this.offset = table.offset + oldGlyphOffset;
                    newGlyphTable = this.read(newGlyphTable, nextGlyphOffset, oldNextGlyphOffset).buffer, 
                    nextGlyphOffset += oldNextGlyphOffset;
                }
            }
            return {
                glyphTableSize: glyphSize,
                newLocaTable: newLocaTable,
                newGlyphTable: newGlyphTable
            };
        }, TtfReader.prototype.updateLocaTable = function(newLocaTable, bLocaIsShort, newLocaTableOut) {
            if (null === newLocaTable) throw new Error("Argument Null Exception : newLocaTable");
            for (var size = bLocaIsShort ? 2 * newLocaTable.length : 4 * newLocaTable.length, count = this.align(size), writer = new BigEndianWriter(count), i = 0; i < newLocaTable.length; i++) {
                var value = newLocaTable[i];
                bLocaIsShort ? (value /= 2, writer.writeShort(value)) : writer.writeInt(value);
            }
            return {
                newLocaUpdated: writer.data,
                newLocaSize: size
            };
        }, TtfReader.prototype.align = function(value) {
            return value + 3 & -4;
        }, TtfReader.prototype.getFontProgram = function(newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {
            if (null === newLocaTableOut) throw new Error("Argument Null Exception : newLocaTableOut");
            if (null === newGlyphTable) throw new Error("Argument Null Exception : newGlyphTable");
            this.tableNames;
            var result = this.getFontProgramLength(newLocaTableOut, newGlyphTable, 0), fontProgramLength = result.fontProgramLength, numTables = result.numTables, writer = new BigEndianWriter(fontProgramLength);
            writer.writeInt(65536), writer.writeShort(numTables);
            var entrySelector = this.entrySelectors[numTables];
            return writer.writeShort(16 * (1 << (31 & entrySelector))), writer.writeShort(entrySelector), 
            writer.writeShort(16 * (numTables - (1 << (31 & entrySelector)))), this.writeCheckSums(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize), 
            this.writeGlyphs(writer, newLocaTableOut, newGlyphTable), writer.data;
        }, TtfReader.prototype.getFontProgramLength = function(newLocaTableOut, newGlyphTable, numTables) {
            if (null === newLocaTableOut) throw new Error("Argument Null Exception : newLocaTableOut");
            if (null === newGlyphTable) throw new Error("Argument Null Exception : newGlyphTable");
            numTables = 2;
            for (var tableNames = this.tableNames, fontProgramLength = 0, i = 0; i < tableNames.length; i++) {
                var tableName = tableNames[i];
                if ("glyf" !== tableName && "loca" !== tableName) {
                    var table = this.getTable(tableName);
                    table.empty || (++numTables, fontProgramLength += this.align(table.length));
                }
            }
            fontProgramLength += newLocaTableOut.length, fontProgramLength += newGlyphTable.length;
            return fontProgramLength += 16 * numTables + 12, {
                fontProgramLength: fontProgramLength,
                numTables: numTables
            };
        }, TtfReader.prototype.writeCheckSums = function(writer, numTables, newLocaTableOut, newGlyphTable, glyphTableSize, locaTableSize) {
            if (null === writer) throw new Error("Argument Null Exception : writer");
            if (null === newLocaTableOut) throw new Error("Argument Null Exception : newLocaTableOut");
            if (null === newGlyphTable) throw new Error("Argument Null Exception : newGlyphTable");
            for (var tableNames = this.tableNames, usedTablesSize = 16 * numTables + 12, nextTableSize = 0, i = 0; i < tableNames.length; i++) {
                var tableName = tableNames[i], tableInfo = this.getTable(tableName);
                if (!tableInfo.empty) {
                    if (writer.writeString(tableName), "glyf" === tableName) {
                        var checksum = this.calculateCheckSum(newGlyphTable);
                        writer.writeInt(checksum), nextTableSize = glyphTableSize;
                    } else if ("loca" === tableName) {
                        checksum = this.calculateCheckSum(newLocaTableOut);
                        writer.writeInt(checksum), nextTableSize = locaTableSize;
                    } else writer.writeInt(tableInfo.checksum), nextTableSize = tableInfo.length;
                    writer.writeUInt(usedTablesSize), writer.writeUInt(nextTableSize), usedTablesSize += this.align(nextTableSize);
                }
            }
        }, TtfReader.prototype.calculateCheckSum = function(bytes) {
            if (null === bytes) throw new Error("Argument Null Exception : bytes");
            for (var pos = 0, byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0, i = 0; i < (bytes.length + 1) / 4; i++) byte4 += 255 & bytes[pos++], 
            byte3 += 255 & bytes[pos++], byte2 += 255 & bytes[pos++], byte1 += 255 & bytes[pos++];
            var result = byte1;
            return result += byte2 << 8, result += byte3 << 16, result += byte4 << 24;
        }, TtfReader.prototype.writeGlyphs = function(writer, newLocaTable, newGlyphTable) {
            if (null === writer) throw new Error("Argument Null Exception : writer");
            if (null === newLocaTable) throw new Error("Argument Null Exception : newLocaTableOut");
            if (null === newGlyphTable) throw new Error("Argument Null Exception : newGlyphTable");
            for (var tableNames = this.tableNames, i = 0; i < tableNames.length; i++) {
                var tableName = tableNames[i], tableInfo = this.getTable(tableName);
                if (!tableInfo.empty) if ("glyf" === tableName) writer.writeBytes(newGlyphTable); else if ("loca" === tableName) writer.writeBytes(newLocaTable); else {
                    for (var count = this.align(tableInfo.length), buff = [], i_1 = 0; i_1 < count; i_1++) buff.push(0);
                    this.offset = tableInfo.offset;
                    var result = this.read(buff, 0, tableInfo.length);
                    writer.writeBytes(result.buffer);
                }
            }
        }, TtfReader.prototype.setOffset = function(offset) {
            this.offset = offset;
        }, TtfReader.prototype.createInternals = function() {
            this.metrics = new TtfMetrics();
            var nameTable = this.readNameTable(), headTable = this.readHeadTable();
            this.bIsLocaShort = 0 === headTable.indexToLocalFormat;
            var horizontalHeadTable = this.readHorizontalHeaderTable(), os2Table = this.readOS2Table(), postTable = this.readPostTable();
            this.width = this.readWidthTable(horizontalHeadTable.numberOfHMetrics, headTable.unitsPerEm);
            var subTables = this.readCmapTable();
            this.initializeMetrics(nameTable, headTable, horizontalHeadTable, os2Table, postTable, subTables);
        }, TtfReader.prototype.getGlyph = function(charCode) {
            if ("number" == typeof charCode) {
                var obj1 = null;
                this.metrics.isSymbol || null == this.microsoftGlyphs ? this.metrics.isSymbol && null != this.macintoshGlyphs && this.macintoshGlyphs.containsKey(charCode) && (obj1 = this.macintoshGlyphs.getValue(charCode)) : this.microsoftGlyphs.containsKey(charCode) && (obj1 = this.microsoftGlyphs.getValue(charCode));
                return null != obj1 ? obj1 : this.getDefaultGlyph();
            }
            var obj = null, code = charCode.charCodeAt(0);
            this.metrics.isSymbol || null === this.microsoft ? (this.metrics.isSymbol && null !== this.macintosh || this.isMacTTF) && (0 !== this.maxMacIndex ? code %= this.maxMacIndex + 1 : code = 61440 == (65280 & code) ? 255 & code : code, 
            this.macintosh.containsKey(code) && (obj = this.macintosh.getValue(code), this.isFontPresent = !0)) : this.microsoft.containsKey(code) ? (obj = this.microsoft.getValue(code), 
            code !== StringTokenizer.whiteSpace.charCodeAt(0) && (this.isFontPresent = !0)) : code !== StringTokenizer.whiteSpace.charCodeAt(0) && (this.isFontPresent = !1), 
            charCode === StringTokenizer.whiteSpace && null === obj && (obj = new TtfGlyphInfo());
            return null !== obj ? obj : this.getDefaultGlyph();
        }, TtfReader.prototype.getGlyphChars = function(chars) {
            if (null === chars || void 0 === chars) throw new Error("Argument Null Exception : chars");
            for (var dictionary = new Dictionary(), charKeys = chars.keys(), i = 0; i < charKeys.length; i++) {
                var ch = charKeys[i], glyph = this.getGlyph(ch);
                glyph.empty || dictionary.setValue(glyph.index, ch.charCodeAt(0));
            }
            return dictionary;
        }, TtfReader.prototype.getAllGlyphs = function() {
            for (var allGlyphInfo = [], info = new TtfGlyphInfo(), index = 0, i = 0; i < this.width.length; i++) {
                var width = this.width[i];
                info.index = index, info.width = width, allGlyphInfo.push(info), index++;
            }
            return allGlyphInfo;
        }, TtfReader.prototype.readFontProgram = function(chars) {
            var glyphChars = this.getGlyphChars(chars), locaTable = this.readLocaTable(this.bIsLocaShort);
            glyphChars.size() < chars.size() && (this.missedGlyphs = chars.size() - glyphChars.size()), 
            this.updateGlyphChars(glyphChars, locaTable);
            var result1 = this.generateGlyphTable(glyphChars, locaTable, null, null), glyphTableSize = result1.glyphTableSize, newLocaTable = result1.newLocaTable, newGlyphTable = result1.newGlyphTable, result2 = this.updateLocaTable(newLocaTable, this.bIsLocaShort, null), newLocaSize = result2.newLocaSize, newLocaUpdated = result2.newLocaUpdated;
            return this.getFontProgram(newLocaUpdated, newGlyphTable, glyphTableSize, newLocaSize);
        }, TtfReader.prototype.convertString = function(text) {
            if (null === text) throw new Error("Argument Null Exception : text");
            for (var glyph = "", k = 0; k < text.length; k++) {
                var ch = text[k], glyphInfo = this.getGlyph(ch);
                glyphInfo.empty || (glyph += String.fromCharCode(glyphInfo.index));
            }
            return glyph;
        }, TtfReader.prototype.getCharWidth = function(code) {
            var glyphInfo = this.getGlyph(code);
            return (glyphInfo = glyphInfo.empty ? this.getDefaultGlyph() : glyphInfo).empty ? 0 : glyphInfo.width;
        }, TtfReader.prototype.readString = function(length, isUnicode) {
            if (void 0 === isUnicode) return this.readString(length, !1);
            var result = "";
            if (isUnicode) for (var i = 0; i < length; i++) i % 2 != 0 && (result += String.fromCharCode(this.fontData[this.offset])), 
            this.offset += 1; else for (i = 0; i < length; i++) result += String.fromCharCode(this.fontData[this.offset]), 
            this.offset += 1;
            return result;
        }, TtfReader.prototype.readFixed = function(offset) {
            return this.readInt16(offset) + this.readInt16(offset + 2) / 16384;
        }, TtfReader.prototype.readInt32 = function(offset) {
            var i1 = this.fontData[offset + 3], i2 = this.fontData[offset + 2], i3 = this.fontData[offset + 1], i4 = this.fontData[offset];
            return this.offset += 4, i1 + (i2 << 8) + (i3 << 16) + (i4 << 24);
        }, TtfReader.prototype.readUInt32 = function(offset) {
            var i1 = this.fontData[offset + 3], i2 = this.fontData[offset + 2], i3 = this.fontData[offset + 1], i4 = this.fontData[offset];
            return this.offset += 4, i1 | i2 << 8 | i3 << 16 | i4 << 24;
        }, TtfReader.prototype.readInt16 = function(offset) {
            var result = (this.fontData[offset] << 8) + this.fontData[offset + 1];
            return result = 32768 & result ? result - 65536 : result, this.offset += 2, result;
        }, TtfReader.prototype.readInt64 = function(offset) {
            var low = this.readInt32(offset + 4), n = 4294967296 * this.readInt32(offset) + low;
            return low < 0 && (n += 4294967296), n;
        }, TtfReader.prototype.readUInt16 = function(offset) {
            var result = this.fontData[offset] << 8 | this.fontData[offset + 1];
            return this.offset += 2, result;
        }, TtfReader.prototype.readUshortArray = function(length) {
            for (var buffer = [], i = 0; i < length; i++) buffer[i] = this.readUInt16(this.offset);
            return buffer;
        }, TtfReader.prototype.readBytes = function(length) {
            for (var result = [], i = 0; i < length; i++) result.push(this.fontData[this.offset]), 
            this.offset += 1;
            return result;
        }, TtfReader.prototype.readByte = function(offset) {
            var result = this.fontData[offset];
            return this.offset += 1, result;
        }, TtfReader.prototype.read = function(buffer, index, count) {
            if (null === buffer) throw new Error("Argument Null Exception : buffer");
            var written = 0, read = 0;
            do {
                for (var i = 0; i < count - written && this.offset + i < this.fontData.length; i++) buffer[index + i] = this.fontData[this.offset + i];
                read = count - written, this.offset += read, written += read;
            } while (written < count);
            return {
                buffer: buffer,
                written: written
            };
        }, TtfReader;
    }(), __extends$83 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfFontMetrics = function() {
        function PdfFontMetrics() {
            this.lineGap = 0;
        }
        return PdfFontMetrics.prototype.getAscent = function(format) {
            return this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);
        }, PdfFontMetrics.prototype.getDescent = function(format) {
            return this.descent * PdfFont.charSizeMultiplier * this.getSize(format);
        }, PdfFontMetrics.prototype.getLineGap = function(format) {
            return this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);
        }, PdfFontMetrics.prototype.getHeight = function(format) {
            for (var clearTypeFonts = [ "cambria", "candara", "constantia", "corbel", "cariadings" ], clearTypeFontCollection = [], index = 0; index < clearTypeFonts.length; index++) {
                var font = clearTypeFonts[index];
                clearTypeFontCollection.push(font);
            }
            return this.getDescent(format) < 0 ? this.getAscent(format) - this.getDescent(format) + this.getLineGap(format) : this.getAscent(format) + this.getDescent(format) + this.getLineGap(format);
        }, PdfFontMetrics.prototype.getSize = function(format) {
            var size = this.size;
            if (null != format) switch (format.subSuperScript) {
              case PdfSubSuperScript.SubScript:
                size /= this.subScriptSizeFactor;
                break;

              case PdfSubSuperScript.SuperScript:
                size /= this.superscriptSizeFactor;
            }
            return size;
        }, PdfFontMetrics.prototype.clone = function() {
            return this.widthTable = WidthTable.clone(), this;
        }, Object.defineProperty(PdfFontMetrics.prototype, "widthTable", {
            get: function() {
                return this.internalWidthTable;
            },
            set: function(value) {
                this.internalWidthTable = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfFontMetrics;
    }(), WidthTable = function() {
        function WidthTable() {}
        return WidthTable.clone = function() {
            return null;
        }, WidthTable;
    }(), StandardWidthTable = function(_super) {
        function StandardWidthTable(widths) {
            var _this = _super.call(this) || this;
            if (null == widths) throw new Error("ArgumentNullException:widths");
            return _this.widths = widths, _this;
        }
        return __extends$83(StandardWidthTable, _super), StandardWidthTable.prototype.items = function(index) {
            if (index < 0 || index >= this.widths.length) throw new Error("ArgumentOutOfRangeException:index, The character is not supported by the font.");
            return this.widths[index];
        }, Object.defineProperty(StandardWidthTable.prototype, "length", {
            get: function() {
                return this.widths.length;
            },
            enumerable: !0,
            configurable: !0
        }), StandardWidthTable.prototype.clone = function() {
            return this.widths = this.widths, this;
        }, StandardWidthTable.prototype.toArray = function() {
            return new PdfArray(this.widths);
        }, StandardWidthTable;
    }(WidthTable), UnicodeTrueTypeFont = function() {
        function UnicodeTrueTypeFont(base64String, size) {
            if (this.nameString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", this.dictionaryProperties = new DictionaryProperties(), 
            this.isCompress = !1, this.isEmbedFont = !1, this.cmapPrefix = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap" + Operators.newLine + "/CIDSystemInfo << /Registry (Adobe)/Ordering (UCS)/Supplement 0>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange" + Operators.newLine, 
            this.cmapEndCodespaceRange = "endcodespacerange" + Operators.newLine, this.cmapBeginRange = "beginbfrange" + Operators.newLine, 
            this.cmapEndRange = "endbfrange" + Operators.newLine, this.cmapSuffix = "endbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend end" + Operators.newLine, 
            null === base64String || void 0 === base64String) throw new Error("ArgumentNullException:base64String");
            this.fontSize = size, this.fontString = base64String, this.Initialize();
        }
        return UnicodeTrueTypeFont.prototype.getCharWidth = function(charCode) {
            return this.ttfReader.getCharWidth(charCode);
        }, UnicodeTrueTypeFont.prototype.getLineWidth = function(line) {
            for (var width = 0, i = 0, len = line.length; i < len; i++) {
                var ch = line[i];
                width += this.getCharWidth(ch);
            }
            return width;
        }, UnicodeTrueTypeFont.prototype.Initialize = function() {
            var byteArray = new ByteArray(this.fontString.length);
            byteArray.writeFromBase64String(this.fontString), this.fontData = byteArray.internalBuffer, 
            this.ttfReader = new TtfReader(this.fontData), this.ttfMetrics = this.ttfReader.metrics;
        }, UnicodeTrueTypeFont.prototype.createInternals = function() {
            this.fontDictionary = new PdfDictionary(), this.fontProgram = new PdfStream(), this.cmap = new PdfStream(), 
            this.descendantFont = new PdfDictionary(), this.metrics = new PdfFontMetrics(), 
            this.ttfReader.createInternals(), this.ttfMetrics = this.ttfReader.metrics, this.initializeMetrics(), 
            this.subsetName = this.getFontName(), this.createDescendantFont(), this.createCmap(), 
            this.createFontDictionary(), this.createFontProgram();
        }, UnicodeTrueTypeFont.prototype.getInternals = function() {
            return this.fontDictionary;
        }, UnicodeTrueTypeFont.prototype.initializeMetrics = function() {
            var ttfMetrics = this.ttfReader.metrics;
            this.metrics.ascent = ttfMetrics.macAscent, this.metrics.descent = ttfMetrics.macDescent, 
            this.metrics.height = ttfMetrics.macAscent - ttfMetrics.macDescent + ttfMetrics.lineGap, 
            this.metrics.name = ttfMetrics.fontFamily, this.metrics.postScriptName = ttfMetrics.postScriptName, 
            this.metrics.size = this.fontSize, this.metrics.widthTable = new StandardWidthTable(ttfMetrics.widthTable), 
            this.metrics.lineGap = ttfMetrics.lineGap, this.metrics.subScriptSizeFactor = ttfMetrics.subScriptSizeFactor, 
            this.metrics.superscriptSizeFactor = ttfMetrics.superscriptSizeFactor, this.metrics.isBold = ttfMetrics.isBold;
        }, UnicodeTrueTypeFont.prototype.getFontName = function() {
            for (var name, builder = "", i = 0; i < 6; i++) {
                var index = Math.floor(26 * Math.random()) + 0;
                builder += this.nameString[index];
            }
            return builder += "+", builder += this.ttfReader.metrics.postScriptName, name = builder.toString(), 
            name = this.formatName(name);
        }, UnicodeTrueTypeFont.prototype.formatName = function(fontName) {
            var ret = fontName.replace("(", "#28");
            return ret = ret.replace(")", "#29"), ret = ret.replace("[", "#5B"), ret = ret.replace("]", "#5D"), 
            ret = ret.replace("<", "#3C"), ret = ret.replace(">", "#3E"), ret = ret.replace("{", "#7B"), 
            ret = ret.replace("}", "#7D"), ret = ret.replace("/", "#2F"), (ret = ret.replace("%", "#25")).replace(" ", "#20");
        }, UnicodeTrueTypeFont.prototype.createDescendantFont = function() {
            this.descendantFont.isFont = !0, this.descendantFont.descendantFontBeginSave = new SaveDescendantFontEventHandler(this), 
            this.descendantFont.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font)), 
            this.descendantFont.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.cIDFontType2)), 
            this.descendantFont.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName)), 
            this.descendantFont.items.setValue(this.dictionaryProperties.cIDToGIDMap, new PdfName(this.dictionaryProperties.identity)), 
            this.descendantFont.items.setValue(this.dictionaryProperties.dw, new PdfNumber(1e3)), 
            this.fontDescriptor = this.createFontDescriptor(), this.descendantFont.items.setValue(this.dictionaryProperties.fontDescriptor, new PdfReferenceHolder(this.fontDescriptor));
            var systemInfo = this.createSystemInfo();
            this.descendantFont.items.setValue(this.dictionaryProperties.cIDSystemInfo, systemInfo);
        }, UnicodeTrueTypeFont.prototype.createFontDescriptor = function() {
            var descriptor = new PdfDictionary(), metrics = this.ttfReader.metrics;
            return descriptor.isFont = !0, descriptor.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.fontDescriptor)), 
            descriptor.items.setValue(this.dictionaryProperties.fontName, new PdfName(this.subsetName)), 
            descriptor.items.setValue(this.dictionaryProperties.flags, new PdfNumber(this.getDescriptorFlags())), 
            descriptor.items.setValue(this.dictionaryProperties.fontBBox, PdfArray.fromRectangle(this.getBoundBox())), 
            descriptor.items.setValue(this.dictionaryProperties.missingWidth, new PdfNumber(metrics.widthTable[32])), 
            descriptor.items.setValue(this.dictionaryProperties.stemV, new PdfNumber(metrics.stemV)), 
            descriptor.items.setValue(this.dictionaryProperties.italicAngle, new PdfNumber(metrics.italicAngle)), 
            descriptor.items.setValue(this.dictionaryProperties.capHeight, new PdfNumber(metrics.capHeight)), 
            descriptor.items.setValue(this.dictionaryProperties.ascent, new PdfNumber(metrics.winAscent)), 
            descriptor.items.setValue(this.dictionaryProperties.descent, new PdfNumber(metrics.winDescent)), 
            descriptor.items.setValue(this.dictionaryProperties.leading, new PdfNumber(metrics.leading)), 
            descriptor.items.setValue(this.dictionaryProperties.avgWidth, new PdfNumber(metrics.widthTable[32])), 
            descriptor.items.setValue(this.dictionaryProperties.fontFile2, new PdfReferenceHolder(this.fontProgram)), 
            descriptor.items.setValue(this.dictionaryProperties.maxWidth, new PdfNumber(metrics.widthTable[32])), 
            descriptor.items.setValue(this.dictionaryProperties.xHeight, new PdfNumber(0)), 
            descriptor.items.setValue(this.dictionaryProperties.stemH, new PdfNumber(0)), descriptor;
        }, UnicodeTrueTypeFont.prototype.createCmap = function() {
            this.cmap.cmapBeginSave = new SaveCmapEventHandler(this);
        }, UnicodeTrueTypeFont.prototype.createFontDictionary = function() {
            this.fontDictionary.isFont = !0, this.fontDictionary.fontDictionaryBeginSave = new SaveFontDictionaryEventHandler(this), 
            this.fontDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font)), 
            this.fontDictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.subsetName)), 
            this.fontDictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type0)), 
            this.fontDictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(this.dictionaryProperties.identityH));
            var descFonts = new PdfArray(), reference = new PdfReferenceHolder(this.descendantFont);
            descFonts.isFont = !0, descFonts.add(reference), this.fontDictionary.items.setValue(this.dictionaryProperties.descendantFonts, descFonts);
        }, UnicodeTrueTypeFont.prototype.createFontProgram = function() {
            this.fontProgram.fontProgramBeginSave = new SaveFontProgramEventHandler(this);
        }, UnicodeTrueTypeFont.prototype.createSystemInfo = function() {
            var systemInfo = new PdfDictionary();
            return systemInfo.items.setValue(this.dictionaryProperties.registry, new PdfString("Adobe")), 
            systemInfo.items.setValue(this.dictionaryProperties.ordering, new PdfString(this.dictionaryProperties.identity)), 
            systemInfo.items.setValue(this.dictionaryProperties.supplement, new PdfNumber(0)), 
            systemInfo;
        }, UnicodeTrueTypeFont.prototype.descendantFontBeginSave = function() {
            if (null !== this.usedChars && void 0 !== this.usedChars && this.usedChars.size() > 0) {
                var width = this.getDescendantWidth();
                null !== width && this.descendantFont.items.setValue(this.dictionaryProperties.w, width);
            }
        }, UnicodeTrueTypeFont.prototype.cmapBeginSave = function() {
            this.generateCmap();
        }, UnicodeTrueTypeFont.prototype.fontDictionaryBeginSave = function() {
            null !== this.usedChars && void 0 !== this.usedChars && this.usedChars.size() > 0 && !this.fontDictionary.containsKey(this.dictionaryProperties.toUnicode) && this.fontDictionary.items.setValue(this.dictionaryProperties.toUnicode, new PdfReferenceHolder(this.cmap));
        }, UnicodeTrueTypeFont.prototype.fontProgramBeginSave = function() {
            this.isCompress = !0, this.generateFontProgram();
        }, UnicodeTrueTypeFont.prototype.getDescendantWidth = function() {
            var array = new PdfArray();
            if (null !== this.usedChars && void 0 !== this.usedChars && this.usedChars.size() > 0) {
                for (var glyphInfo = [], keys = this.usedChars.keys(), i = 0; i < keys.length; i++) {
                    var chLen = keys[i];
                    (glyph = this.ttfReader.getGlyph(chLen)).empty || glyphInfo.push(glyph);
                }
                glyphInfo.sort(function(a, b) {
                    return a.index - b.index;
                });
                var firstGlyphIndex = 0, lastGlyphIndex = 0, firstGlyphIndexWasSet = !1, widthDetails = new PdfArray();
                for (i = 0; i < glyphInfo.length; i++) {
                    var glyph = glyphInfo[i];
                    firstGlyphIndexWasSet || (firstGlyphIndexWasSet = !0, firstGlyphIndex = glyph.index, 
                    lastGlyphIndex = glyph.index - 1), (lastGlyphIndex + 1 !== glyph.index || i + 1 === glyphInfo.length) && glyphInfo.length > 1 && (array.add(new PdfNumber(firstGlyphIndex)), 
                    0 !== i && array.add(widthDetails), firstGlyphIndex = glyph.index, widthDetails = new PdfArray()), 
                    widthDetails.add(new PdfNumber(glyph.width)), i + 1 === glyphInfo.length && (array.add(new PdfNumber(firstGlyphIndex)), 
                    array.add(widthDetails)), lastGlyphIndex = glyph.index;
                }
            }
            return array;
        }, UnicodeTrueTypeFont.prototype.generateCmap = function() {
            if (null !== this.usedChars && void 0 !== this.usedChars && this.usedChars.size() > 0) {
                var glyphChars = this.ttfReader.getGlyphChars(this.usedChars);
                if (glyphChars.size() > 0) {
                    var keys = glyphChars.keys().sort(), first = keys[0], last = keys[keys.length - 1], middlePart = this.toHexString(first, !1) + this.toHexString(last, !1) + Operators.newLine, builder = "";
                    builder += this.cmapPrefix, builder += middlePart, builder += this.cmapEndCodespaceRange;
                    for (var nextRange = 0, i = 0; i < keys.length; i++) {
                        0 === nextRange && (0 !== i && (builder += this.cmapEndRange), builder += nextRange = Math.min(100, keys.length - i), 
                        builder += Operators.whiteSpace, builder += this.cmapBeginRange), nextRange -= 1;
                        var key = keys[i];
                        builder += this.toHexString(key, !0) + this.toHexString(key, !0) + this.toHexString(glyphChars.getValue(key), !0) + "\n";
                    }
                    builder += this.cmapSuffix, this.cmap.clearStream(), this.cmap.isFont = !0, this.cmap.write(builder);
                }
            }
        }, UnicodeTrueTypeFont.prototype.generateFontProgram = function() {
            var fontProgram = null;
            this.usedChars = null === this.usedChars || void 0 === this.usedChars ? new Dictionary() : this.usedChars, 
            this.ttfReader.setOffset(0), fontProgram = this.ttfReader.readFontProgram(this.usedChars), 
            this.fontProgram.clearStream(), this.fontProgram.isFont = !0, this.fontProgram.writeBytes(fontProgram);
        }, UnicodeTrueTypeFont.prototype.getDescriptorFlags = function() {
            var flags = 0, metrics = this.ttfReader.metrics;
            return metrics.isFixedPitch && (flags |= FontDescriptorFlags.FixedPitch), metrics.isSymbol ? flags |= FontDescriptorFlags.Symbolic : flags |= FontDescriptorFlags.Nonsymbolic, 
            metrics.isItalic && (flags |= FontDescriptorFlags.Italic), metrics.isBold && (flags |= FontDescriptorFlags.ForceBold), 
            flags;
        }, UnicodeTrueTypeFont.prototype.getBoundBox = function() {
            var rect = this.ttfReader.metrics.fontBox, width = Math.abs(rect.right - rect.left), height = Math.abs(rect.top - rect.bottom);
            return new RectangleF(rect.left, rect.bottom, width, height);
        }, UnicodeTrueTypeFont.prototype.toHexString = function(n, isCaseChange) {
            var s = n.toString(16);
            return isCaseChange && (s = s.toUpperCase()), "<0000".substring(0, 5 - s.length) + s + ">";
        }, UnicodeTrueTypeFont.prototype.setSymbols = function(text) {
            if (null === text) throw new Error("Argument Null Exception : text");
            null !== this.usedChars && void 0 !== this.usedChars || (this.usedChars = new Dictionary());
            for (var i = 0; i < text.length; i++) {
                var ch = text[i];
                this.usedChars.setValue(ch, String.fromCharCode(0));
            }
            !1 === this.isEmbedFont && this.getDescendantWidth();
        }, UnicodeTrueTypeFont;
    }(), ArabicShapeRenderer = function() {
        function ArabicShapeRenderer() {
            this.arabicCharTable = [ [ "ء", "ﺀ" ], [ "آ", "ﺁ", "ﺂ" ], [ "أ", "ﺃ", "ﺄ" ], [ "ؤ", "ﺅ", "ﺆ" ], [ "إ", "ﺇ", "ﺈ" ], [ "ئ", "ﺉ", "ﺊ", "ﺋ", "ﺌ" ], [ "ا", "ﺍ", "ﺎ" ], [ "ب", "ﺏ", "ﺐ", "ﺑ", "ﺒ" ], [ "ة", "ﺓ", "ﺔ" ], [ "ت", "ﺕ", "ﺖ", "ﺗ", "ﺘ" ], [ "ث", "ﺙ", "ﺚ", "ﺛ", "ﺜ" ], [ "ج", "ﺝ", "ﺞ", "ﺟ", "ﺠ" ], [ "ح", "ﺡ", "ﺢ", "ﺣ", "ﺤ" ], [ "خ", "ﺥ", "ﺦ", "ﺧ", "ﺨ" ], [ "د", "ﺩ", "ﺪ" ], [ "ذ", "ﺫ", "ﺬ" ], [ "ر", "ﺭ", "ﺮ" ], [ "ز", "ﺯ", "ﺰ" ], [ "س", "ﺱ", "ﺲ", "ﺳ", "ﺴ" ], [ "ش", "ﺵ", "ﺶ", "ﺷ", "ﺸ" ], [ "ص", "ﺹ", "ﺺ", "ﺻ", "ﺼ" ], [ "ض", "ﺽ", "ﺾ", "ﺿ", "ﻀ" ], [ "ط", "ﻁ", "ﻂ", "ﻃ", "ﻄ" ], [ "ظ", "ﻅ", "ﻆ", "ﻇ", "ﻈ" ], [ "ع", "ﻉ", "ﻊ", "ﻋ", "ﻌ" ], [ "غ", "ﻍ", "ﻎ", "ﻏ", "ﻐ" ], [ "ـ", "ـ", "ـ", "ـ", "ـ" ], [ "ف", "ﻑ", "ﻒ", "ﻓ", "ﻔ" ], [ "ق", "ﻕ", "ﻖ", "ﻗ", "ﻘ" ], [ "ك", "ﻙ", "ﻚ", "ﻛ", "ﻜ" ], [ "ل", "ﻝ", "ﻞ", "ﻟ", "ﻠ" ], [ "م", "ﻡ", "ﻢ", "ﻣ", "ﻤ" ], [ "ن", "ﻥ", "ﻦ", "ﻧ", "ﻨ" ], [ "ه", "ﻩ", "ﻪ", "ﻫ", "ﻬ" ], [ "و", "ﻭ", "ﻮ" ], [ "ى", "ﻯ", "ﻰ", "ﯨ", "ﯩ" ], [ "ي", "ﻱ", "ﻲ", "ﻳ", "ﻴ" ], [ "ٱ", "ﭐ", "ﭑ" ], [ "ٹ", "ﭦ", "ﭧ", "ﭨ", "ﭩ" ], [ "ٺ", "ﭞ", "ﭟ", "ﭠ", "ﭡ" ], [ "ٻ", "ﭒ", "ﭓ", "ﭔ", "ﭕ" ], [ "پ", "ﭖ", "ﭗ", "ﭘ", "ﭙ" ], [ "ٿ", "ﭢ", "ﭣ", "ﭤ", "ﭥ" ], [ "ڀ", "ﭚ", "ﭛ", "ﭜ", "ﭝ" ], [ "ڃ", "ﭶ", "ﭷ", "ﭸ", "ﭹ" ], [ "ڄ", "ﭲ", "ﭳ", "ﭴ", "ﭵ" ], [ "چ", "ﭺ", "ﭻ", "ﭼ", "ﭽ" ], [ "ڇ", "ﭾ", "ﭿ", "ﮀ", "ﮁ" ], [ "ڈ", "ﮈ", "ﮉ" ], [ "ڌ", "ﮄ", "ﮅ" ], [ "ڍ", "ﮂ", "ﮃ" ], [ "ڎ", "ﮆ", "ﮇ" ], [ "ڑ", "ﮌ", "ﮍ" ], [ "ژ", "ﮊ", "ﮋ" ], [ "ڤ", "ﭪ", "ﭫ", "ﭬ", "ﭭ" ], [ "ڦ", "ﭮ", "ﭯ", "ﭰ", "ﭱ" ], [ "ک", "ﮎ", "ﮏ", "ﮐ", "ﮑ" ], [ "ڭ", "ﯓ", "ﯔ", "ﯕ", "ﯖ" ], [ "گ", "ﮒ", "ﮓ", "ﮔ", "ﮕ" ], [ "ڱ", "ﮚ", "ﮛ", "ﮜ", "ﮝ" ], [ "ڳ", "ﮖ", "ﮗ", "ﮘ", "ﮙ" ], [ "ں", "ﮞ", "ﮟ" ], [ "ڻ", "ﮠ", "ﮡ", "ﮢ", "ﮣ" ], [ "ھ", "ﮪ", "ﮫ", "ﮬ", "ﮭ" ], [ "ۀ", "ﮤ", "ﮥ" ], [ "ہ", "ﮦ", "ﮧ", "ﮨ", "ﮩ" ], [ "ۅ", "ﯠ", "ﯡ" ], [ "ۆ", "ﯙ", "ﯚ" ], [ "ۇ", "ﯗ", "ﯘ" ], [ "ۈ", "ﯛ", "ﯜ" ], [ "ۉ", "ﯢ", "ﯣ" ], [ "ۋ", "ﯞ", "ﯟ" ], [ "ی", "ﯼ", "ﯽ", "ﯾ", "ﯿ" ], [ "ې", "ﯤ", "ﯥ", "ﯦ", "ﯧ" ], [ "ے", "ﮮ", "ﮯ" ], [ "ۓ", "ﮰ", "ﮱ" ] ], 
            this.alef = "ا", this.alefHamza = "أ", this.alefHamzaBelow = "إ", this.alefMadda = "آ", 
            this.lam = "ل", this.hamza = "ء", this.zeroWidthJoiner = "‍", this.hamzaAbove = "ٔ", 
            this.hamzaBelow = "ٕ", this.wawHamza = "ؤ", this.yehHamza = "ئ", this.waw = "و", 
            this.alefMaksura = "ى", this.yeh = "ي", this.farsiYeh = "ی", this.shadda = "ّ", 
            this.madda = "ٓ", this.lwa = "ﻻ", this.lwawh = "ﻷ", this.lwawhb = "ﻹ", this.lwawm = "ﻵ", 
            this.bwhb = "ۓ", this.fathatan = "ً", this.superScriptalef = "ٰ", this.vowel = 1, 
            this.arabicMapTable = new Dictionary();
            for (var i = 0; i < this.arabicCharTable.length; i++) this.arabicMapTable.setValue(this.arabicCharTable[i][0], this.arabicCharTable[i]);
        }
        return ArabicShapeRenderer.prototype.getCharacterShape = function(input, index) {
            if (input >= this.hamza && input <= this.bwhb) {
                if (this.arabicMapTable.getValue(input)) return this.arabicMapTable.getValue(input)[index + 1];
            } else if (input >= this.lwawm && input <= this.lwa) return input;
            return input;
        }, ArabicShapeRenderer.prototype.shape = function(text, level) {
            for (var builder = "", str2 = "", i = 0; i < text.length; i++) {
                var c = text[i];
                if (c >= "؀" && c <= "ۿ") str2 += c; else {
                    if (str2.length > 0) {
                        builder += this.doShape(str2.toString(), 0), str2 = "";
                    }
                    builder += c;
                }
            }
            if (str2.length > 0) {
                builder += this.doShape(str2.toString(), 0);
            }
            return builder.toString();
        }, ArabicShapeRenderer.prototype.doShape = function(input, level) {
            for (var str = "", len = 0, i = 0, next = "", previous = new ArabicShape(), present = new ArabicShape(); i < input.length; ) if (next = input[i++], 
            0 === this.ligature(next, present)) {
                var shapeCount = this.getShapeCount(next);
                len = 1 === shapeCount ? 0 : 2, previous.Shapes > 2 && (len += 1), len %= present.Shapes, 
                present.Value = this.getCharacterShape(present.Value, len), str = this.append(str, previous, level), 
                previous = present, (present = new ArabicShape()).Value = next, present.Shapes = shapeCount, 
                present.Ligature++;
            }
            return len = previous.Shapes > 2 ? 1 : 0, len %= present.Shapes, present.Value = this.getCharacterShape(present.Value, len), 
            str = this.append(str, previous, level), (str = this.append(str, present, level)).toString();
        }, ArabicShapeRenderer.prototype.append = function(builder, shape, level) {
            return "" !== shape.Value && (builder += shape.Value, shape.Ligature -= 1, "" !== shape.Type && (0 == (level & this.vowel) ? (builder += shape.Type, 
            shape.Ligature -= 1) : shape.Ligature -= 1), "" !== shape.vowel && (0 == (level & this.vowel) ? (builder += shape.vowel, 
            shape.Ligature -= 1) : shape.Ligature -= 1)), builder;
        }, ArabicShapeRenderer.prototype.ligature = function(value, shape) {
            if ("" !== shape.Value) {
                var result = 0;
                if (value >= this.fathatan && value <= this.hamzaBelow || value === this.superScriptalef) {
                    if (result = 1, "" !== shape.vowel && value !== this.shadda && (result = 2), value === this.shadda) {
                        if (null != shape.Type) return 0;
                        shape.Type = this.shadda;
                    } else value === this.hamzaBelow ? shape.Value === this.alef ? (shape.Value = this.alefHamzaBelow, 
                    result = 2) : value === this.lwa ? (shape.Value = this.lwawhb, result = 2) : shape.Type = this.hamzaBelow : value === this.hamzaAbove ? shape.Value === this.alef ? (shape.Value = this.alefHamza, 
                    result = 2) : shape.Value === this.lwa ? (shape.Value = this.lwawh, result = 2) : shape.Value === this.waw ? (shape.Value = this.wawHamza, 
                    result = 2) : shape.Value === this.yeh || shape.Value === this.alefMaksura || shape.Value === this.farsiYeh ? (shape.Value = this.yehHamza, 
                    result = 2) : shape.Type = this.hamzaAbove : value === this.madda ? shape.Value === this.alef && (shape.Value = this.alefMadda, 
                    result = 2) : shape.vowel = value;
                    return 1 === result && shape.Ligature++, result;
                }
                return "" !== shape.vowel ? 0 : (shape.Value === this.lam && (value === this.alef ? (shape.Value = this.lwa, 
                shape.Shapes = 2, result = 3) : value === this.alefHamza ? (shape.Value = this.lwawh, 
                shape.Shapes = 2, result = 3) : value === this.alefHamzaBelow ? (shape.Value = this.lwawhb, 
                shape.Shapes = 2, result = 3) : value === this.alefMadda && (shape.Value = this.lwawm, 
                shape.Shapes = 2, result = 3)), result);
            }
            return 0;
        }, ArabicShapeRenderer.prototype.getShapeCount = function(shape) {
            if (shape >= this.hamza && shape <= this.bwhb && !(shape >= this.fathatan && shape <= this.hamzaBelow || shape === this.superScriptalef)) {
                if (this.arabicMapTable.getValue(shape)) return this.arabicMapTable.getValue(shape).length - 1;
            } else if (shape === this.zeroWidthJoiner) return 4;
            return 1;
        }, ArabicShapeRenderer;
    }(), ArabicShape = function() {
        function ArabicShape() {
            this.shapeValue = "", this.shapeType = "", this.shapeVowel = "", this.shapeLigature = 0, 
            this.shapeShapes = 1;
        }
        return Object.defineProperty(ArabicShape.prototype, "Value", {
            get: function() {
                return this.shapeValue;
            },
            set: function(value) {
                this.shapeValue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ArabicShape.prototype, "Type", {
            get: function() {
                return this.shapeType;
            },
            set: function(value) {
                this.shapeType = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ArabicShape.prototype, "vowel", {
            get: function() {
                return this.shapeVowel;
            },
            set: function(value) {
                this.shapeVowel = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ArabicShape.prototype, "Ligature", {
            get: function() {
                return this.shapeLigature;
            },
            set: function(value) {
                this.shapeLigature = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(ArabicShape.prototype, "Shapes", {
            get: function() {
                return this.shapeShapes;
            },
            set: function(value) {
                this.shapeShapes = value;
            },
            enumerable: !0,
            configurable: !0
        }), ArabicShape;
    }(), Bidi = function() {
        function Bidi() {
            this.indexes = [], this.indexLevels = [], this.mirroringShapeCharacters = new Dictionary(), 
            this.update();
        }
        return Bidi.prototype.doMirrorShaping = function(text) {
            for (var result = [], i = 0; i < text.length; i++) 1 == (1 & this.indexLevels[i]) && this.mirroringShapeCharacters.containsKey(text[i].charCodeAt(0)) ? result[i] = String.fromCharCode(this.mirroringShapeCharacters.getValue(text[i].charCodeAt(0))) : result[i] = text[i].toString();
            for (var res = "", j = 0; j < result.length; j++) res += result[j];
            return res;
        }, Bidi.prototype.getLogicalToVisualString = function(inputText, isRtl) {
            var rtlCharacters = new RtlCharacters();
            this.indexLevels = rtlCharacters.getVisualOrder(inputText, isRtl), this.setDefaultIndexLevel(), 
            this.doOrder(0, this.indexLevels.length - 1);
            for (var text = this.doMirrorShaping(inputText), resultBuilder = "", i = 0; i < this.indexes.length; i++) {
                resultBuilder += text[this.indexes[i]];
            }
            return resultBuilder.toString();
        }, Bidi.prototype.setDefaultIndexLevel = function() {
            for (var i = 0; i < this.indexLevels.length; i++) this.indexes[i] = i;
        }, Bidi.prototype.doOrder = function(sIndex, eIndex) {
            for (var max = this.indexLevels[sIndex], min = max, odd = max, even = max, i = sIndex + 1; i <= eIndex; ++i) {
                var data = this.indexLevels[i];
                data > max ? max = data : data < min && (min = data), odd &= data, even |= data;
            }
            if (0 != (1 & even)) if (1 != (1 & odd)) for (min |= 1; max >= min; ) {
                for (var pstart = sIndex; ;) {
                    for (;pstart <= eIndex && !(this.indexLevels[pstart] >= max); ) pstart += 1;
                    if (pstart > eIndex) break;
                    for (var pend = pstart + 1; pend <= eIndex && !(this.indexLevels[pend] < max); ) pend += 1;
                    this.reArrange(pstart, pend), pstart = pend + 1;
                }
                max -= 1;
            } else this.reArrange(sIndex, eIndex + 1);
        }, Bidi.prototype.reArrange = function(i, j) {
            var length = (i + j) / 2;
            for (--j; i < length; ++i, --j) {
                var temp = this.indexes[i];
                this.indexes[i] = this.indexes[j], this.indexes[j] = temp;
            }
        }, Bidi.prototype.update = function() {
            this.mirroringShapeCharacters.setValue(40, 41), this.mirroringShapeCharacters.setValue(41, 40), 
            this.mirroringShapeCharacters.setValue(60, 62), this.mirroringShapeCharacters.setValue(62, 60), 
            this.mirroringShapeCharacters.setValue(91, 93), this.mirroringShapeCharacters.setValue(93, 91), 
            this.mirroringShapeCharacters.setValue(123, 125), this.mirroringShapeCharacters.setValue(125, 123), 
            this.mirroringShapeCharacters.setValue(171, 187), this.mirroringShapeCharacters.setValue(187, 171), 
            this.mirroringShapeCharacters.setValue(8249, 8250), this.mirroringShapeCharacters.setValue(8250, 8249), 
            this.mirroringShapeCharacters.setValue(8261, 8262), this.mirroringShapeCharacters.setValue(8262, 8261), 
            this.mirroringShapeCharacters.setValue(8317, 8318), this.mirroringShapeCharacters.setValue(8318, 8317), 
            this.mirroringShapeCharacters.setValue(8333, 8334), this.mirroringShapeCharacters.setValue(8334, 8333), 
            this.mirroringShapeCharacters.setValue(8712, 8715), this.mirroringShapeCharacters.setValue(8713, 8716), 
            this.mirroringShapeCharacters.setValue(8714, 8717), this.mirroringShapeCharacters.setValue(8715, 8712), 
            this.mirroringShapeCharacters.setValue(8716, 8713), this.mirroringShapeCharacters.setValue(8717, 8714), 
            this.mirroringShapeCharacters.setValue(8725, 10741), this.mirroringShapeCharacters.setValue(8764, 8765), 
            this.mirroringShapeCharacters.setValue(8765, 8764), this.mirroringShapeCharacters.setValue(8771, 8909), 
            this.mirroringShapeCharacters.setValue(8786, 8787), this.mirroringShapeCharacters.setValue(8787, 8786), 
            this.mirroringShapeCharacters.setValue(8788, 8789), this.mirroringShapeCharacters.setValue(8789, 8788), 
            this.mirroringShapeCharacters.setValue(8804, 8805), this.mirroringShapeCharacters.setValue(8805, 8804), 
            this.mirroringShapeCharacters.setValue(8806, 8807), this.mirroringShapeCharacters.setValue(8807, 8806), 
            this.mirroringShapeCharacters.setValue(8808, 8809), this.mirroringShapeCharacters.setValue(8809, 8808), 
            this.mirroringShapeCharacters.setValue(8810, 8811), this.mirroringShapeCharacters.setValue(8811, 8810), 
            this.mirroringShapeCharacters.setValue(8814, 8815), this.mirroringShapeCharacters.setValue(8815, 8814), 
            this.mirroringShapeCharacters.setValue(8816, 8817), this.mirroringShapeCharacters.setValue(8817, 8816), 
            this.mirroringShapeCharacters.setValue(8818, 8819), this.mirroringShapeCharacters.setValue(8819, 8818), 
            this.mirroringShapeCharacters.setValue(8820, 8821), this.mirroringShapeCharacters.setValue(8821, 8820), 
            this.mirroringShapeCharacters.setValue(8822, 8823), this.mirroringShapeCharacters.setValue(8823, 8822), 
            this.mirroringShapeCharacters.setValue(8824, 8825), this.mirroringShapeCharacters.setValue(8825, 8824), 
            this.mirroringShapeCharacters.setValue(8826, 8827), this.mirroringShapeCharacters.setValue(8827, 8826), 
            this.mirroringShapeCharacters.setValue(8828, 8829), this.mirroringShapeCharacters.setValue(8829, 8828), 
            this.mirroringShapeCharacters.setValue(8830, 8831), this.mirroringShapeCharacters.setValue(8831, 8830), 
            this.mirroringShapeCharacters.setValue(8832, 8833), this.mirroringShapeCharacters.setValue(8833, 8832), 
            this.mirroringShapeCharacters.setValue(8834, 8835), this.mirroringShapeCharacters.setValue(8835, 8834), 
            this.mirroringShapeCharacters.setValue(8836, 8837), this.mirroringShapeCharacters.setValue(8837, 8836), 
            this.mirroringShapeCharacters.setValue(8838, 8839), this.mirroringShapeCharacters.setValue(8839, 8838), 
            this.mirroringShapeCharacters.setValue(8840, 8841), this.mirroringShapeCharacters.setValue(8841, 8840), 
            this.mirroringShapeCharacters.setValue(8842, 8843), this.mirroringShapeCharacters.setValue(8843, 8842), 
            this.mirroringShapeCharacters.setValue(8847, 8848), this.mirroringShapeCharacters.setValue(8848, 8847), 
            this.mirroringShapeCharacters.setValue(8849, 8850), this.mirroringShapeCharacters.setValue(8850, 8849), 
            this.mirroringShapeCharacters.setValue(8856, 10680), this.mirroringShapeCharacters.setValue(8866, 8867), 
            this.mirroringShapeCharacters.setValue(8867, 8866), this.mirroringShapeCharacters.setValue(8870, 10974), 
            this.mirroringShapeCharacters.setValue(8872, 10980), this.mirroringShapeCharacters.setValue(8873, 10979), 
            this.mirroringShapeCharacters.setValue(8875, 10981), this.mirroringShapeCharacters.setValue(8880, 8881), 
            this.mirroringShapeCharacters.setValue(8881, 8880), this.mirroringShapeCharacters.setValue(8882, 8883), 
            this.mirroringShapeCharacters.setValue(8883, 8882), this.mirroringShapeCharacters.setValue(8884, 8885), 
            this.mirroringShapeCharacters.setValue(8885, 8884), this.mirroringShapeCharacters.setValue(8886, 8887), 
            this.mirroringShapeCharacters.setValue(8887, 8886), this.mirroringShapeCharacters.setValue(8905, 8906), 
            this.mirroringShapeCharacters.setValue(8906, 8905), this.mirroringShapeCharacters.setValue(8907, 8908), 
            this.mirroringShapeCharacters.setValue(8908, 8907), this.mirroringShapeCharacters.setValue(8909, 8771), 
            this.mirroringShapeCharacters.setValue(8912, 8913), this.mirroringShapeCharacters.setValue(8913, 8912), 
            this.mirroringShapeCharacters.setValue(8918, 8919), this.mirroringShapeCharacters.setValue(8919, 8918), 
            this.mirroringShapeCharacters.setValue(8920, 8921), this.mirroringShapeCharacters.setValue(8921, 8920), 
            this.mirroringShapeCharacters.setValue(8922, 8923), this.mirroringShapeCharacters.setValue(8923, 8922), 
            this.mirroringShapeCharacters.setValue(8924, 8925), this.mirroringShapeCharacters.setValue(8925, 8924), 
            this.mirroringShapeCharacters.setValue(8926, 8927), this.mirroringShapeCharacters.setValue(8927, 8926), 
            this.mirroringShapeCharacters.setValue(8928, 8929), this.mirroringShapeCharacters.setValue(8929, 8928), 
            this.mirroringShapeCharacters.setValue(8930, 8931), this.mirroringShapeCharacters.setValue(8931, 8930), 
            this.mirroringShapeCharacters.setValue(8932, 8933), this.mirroringShapeCharacters.setValue(8933, 8932), 
            this.mirroringShapeCharacters.setValue(8934, 8935), this.mirroringShapeCharacters.setValue(8935, 8934), 
            this.mirroringShapeCharacters.setValue(8936, 8937), this.mirroringShapeCharacters.setValue(8937, 8936), 
            this.mirroringShapeCharacters.setValue(8938, 8939), this.mirroringShapeCharacters.setValue(8939, 8938), 
            this.mirroringShapeCharacters.setValue(8940, 8941), this.mirroringShapeCharacters.setValue(8941, 8940), 
            this.mirroringShapeCharacters.setValue(8944, 8945), this.mirroringShapeCharacters.setValue(8945, 8944), 
            this.mirroringShapeCharacters.setValue(8946, 8954), this.mirroringShapeCharacters.setValue(8947, 8955), 
            this.mirroringShapeCharacters.setValue(8948, 8956), this.mirroringShapeCharacters.setValue(8950, 8957), 
            this.mirroringShapeCharacters.setValue(8951, 8958), this.mirroringShapeCharacters.setValue(8954, 8946), 
            this.mirroringShapeCharacters.setValue(8955, 8947), this.mirroringShapeCharacters.setValue(8956, 8948), 
            this.mirroringShapeCharacters.setValue(8957, 8950), this.mirroringShapeCharacters.setValue(8958, 8951), 
            this.mirroringShapeCharacters.setValue(8968, 8969), this.mirroringShapeCharacters.setValue(8969, 8968), 
            this.mirroringShapeCharacters.setValue(8970, 8971), this.mirroringShapeCharacters.setValue(8971, 8970), 
            this.mirroringShapeCharacters.setValue(9001, 9002), this.mirroringShapeCharacters.setValue(9002, 9001), 
            this.mirroringShapeCharacters.setValue(10088, 10089), this.mirroringShapeCharacters.setValue(10089, 10088), 
            this.mirroringShapeCharacters.setValue(10090, 10091), this.mirroringShapeCharacters.setValue(10091, 10090), 
            this.mirroringShapeCharacters.setValue(10092, 10093), this.mirroringShapeCharacters.setValue(10093, 10092), 
            this.mirroringShapeCharacters.setValue(10094, 10095), this.mirroringShapeCharacters.setValue(10095, 10094), 
            this.mirroringShapeCharacters.setValue(10096, 10097), this.mirroringShapeCharacters.setValue(10097, 10096), 
            this.mirroringShapeCharacters.setValue(10098, 10099), this.mirroringShapeCharacters.setValue(10099, 10098), 
            this.mirroringShapeCharacters.setValue(10100, 10101), this.mirroringShapeCharacters.setValue(10101, 10100), 
            this.mirroringShapeCharacters.setValue(10197, 10198), this.mirroringShapeCharacters.setValue(10198, 10197), 
            this.mirroringShapeCharacters.setValue(10205, 10206), this.mirroringShapeCharacters.setValue(10206, 10205), 
            this.mirroringShapeCharacters.setValue(10210, 10211), this.mirroringShapeCharacters.setValue(10211, 10210), 
            this.mirroringShapeCharacters.setValue(10212, 10213), this.mirroringShapeCharacters.setValue(10213, 10212), 
            this.mirroringShapeCharacters.setValue(10214, 10215), this.mirroringShapeCharacters.setValue(10215, 10214), 
            this.mirroringShapeCharacters.setValue(10216, 10217), this.mirroringShapeCharacters.setValue(10217, 10216), 
            this.mirroringShapeCharacters.setValue(10218, 10219), this.mirroringShapeCharacters.setValue(10219, 10218), 
            this.mirroringShapeCharacters.setValue(10627, 10628), this.mirroringShapeCharacters.setValue(10628, 10627), 
            this.mirroringShapeCharacters.setValue(10629, 10630), this.mirroringShapeCharacters.setValue(10630, 10629), 
            this.mirroringShapeCharacters.setValue(10631, 10632), this.mirroringShapeCharacters.setValue(10632, 10631), 
            this.mirroringShapeCharacters.setValue(10633, 10634), this.mirroringShapeCharacters.setValue(10634, 10633), 
            this.mirroringShapeCharacters.setValue(10635, 10636), this.mirroringShapeCharacters.setValue(10636, 10635), 
            this.mirroringShapeCharacters.setValue(10637, 10640), this.mirroringShapeCharacters.setValue(10638, 10639), 
            this.mirroringShapeCharacters.setValue(10639, 10638), this.mirroringShapeCharacters.setValue(10640, 10637), 
            this.mirroringShapeCharacters.setValue(10641, 10642), this.mirroringShapeCharacters.setValue(10642, 10641), 
            this.mirroringShapeCharacters.setValue(10643, 10644), this.mirroringShapeCharacters.setValue(10644, 10643), 
            this.mirroringShapeCharacters.setValue(10645, 10646), this.mirroringShapeCharacters.setValue(10646, 10645), 
            this.mirroringShapeCharacters.setValue(10647, 10648), this.mirroringShapeCharacters.setValue(10648, 10647), 
            this.mirroringShapeCharacters.setValue(10680, 8856), this.mirroringShapeCharacters.setValue(10688, 10689), 
            this.mirroringShapeCharacters.setValue(10689, 10688), this.mirroringShapeCharacters.setValue(10692, 10693), 
            this.mirroringShapeCharacters.setValue(10693, 10692), this.mirroringShapeCharacters.setValue(10703, 10704), 
            this.mirroringShapeCharacters.setValue(10704, 10703), this.mirroringShapeCharacters.setValue(10705, 10706), 
            this.mirroringShapeCharacters.setValue(10706, 10705), this.mirroringShapeCharacters.setValue(10708, 10709), 
            this.mirroringShapeCharacters.setValue(10709, 10708), this.mirroringShapeCharacters.setValue(10712, 10713), 
            this.mirroringShapeCharacters.setValue(10713, 10712), this.mirroringShapeCharacters.setValue(10714, 10715), 
            this.mirroringShapeCharacters.setValue(10715, 10714), this.mirroringShapeCharacters.setValue(10741, 8725), 
            this.mirroringShapeCharacters.setValue(10744, 10745), this.mirroringShapeCharacters.setValue(10745, 10744), 
            this.mirroringShapeCharacters.setValue(10748, 10749), this.mirroringShapeCharacters.setValue(10749, 10748), 
            this.mirroringShapeCharacters.setValue(10795, 10796), this.mirroringShapeCharacters.setValue(10796, 10795), 
            this.mirroringShapeCharacters.setValue(10797, 10796), this.mirroringShapeCharacters.setValue(10798, 10797), 
            this.mirroringShapeCharacters.setValue(10804, 10805), this.mirroringShapeCharacters.setValue(10805, 10804), 
            this.mirroringShapeCharacters.setValue(10812, 10813), this.mirroringShapeCharacters.setValue(10813, 10812), 
            this.mirroringShapeCharacters.setValue(10852, 10853), this.mirroringShapeCharacters.setValue(10853, 10852), 
            this.mirroringShapeCharacters.setValue(10873, 10874), this.mirroringShapeCharacters.setValue(10874, 10873), 
            this.mirroringShapeCharacters.setValue(10877, 10878), this.mirroringShapeCharacters.setValue(10878, 10877), 
            this.mirroringShapeCharacters.setValue(10879, 10880), this.mirroringShapeCharacters.setValue(10880, 10879), 
            this.mirroringShapeCharacters.setValue(10881, 10882), this.mirroringShapeCharacters.setValue(10882, 10881), 
            this.mirroringShapeCharacters.setValue(10883, 10884), this.mirroringShapeCharacters.setValue(10884, 10883), 
            this.mirroringShapeCharacters.setValue(10891, 10892), this.mirroringShapeCharacters.setValue(10892, 10891), 
            this.mirroringShapeCharacters.setValue(10897, 10898), this.mirroringShapeCharacters.setValue(10898, 10897), 
            this.mirroringShapeCharacters.setValue(10899, 10900), this.mirroringShapeCharacters.setValue(10900, 10899), 
            this.mirroringShapeCharacters.setValue(10901, 10902), this.mirroringShapeCharacters.setValue(10902, 10901), 
            this.mirroringShapeCharacters.setValue(10903, 10904), this.mirroringShapeCharacters.setValue(10904, 10903), 
            this.mirroringShapeCharacters.setValue(10905, 10906), this.mirroringShapeCharacters.setValue(10906, 10905), 
            this.mirroringShapeCharacters.setValue(10907, 10908), this.mirroringShapeCharacters.setValue(10908, 10907), 
            this.mirroringShapeCharacters.setValue(10913, 10914), this.mirroringShapeCharacters.setValue(10914, 10913), 
            this.mirroringShapeCharacters.setValue(10918, 10919), this.mirroringShapeCharacters.setValue(10919, 10918), 
            this.mirroringShapeCharacters.setValue(10920, 10921), this.mirroringShapeCharacters.setValue(10921, 10920), 
            this.mirroringShapeCharacters.setValue(10922, 10923), this.mirroringShapeCharacters.setValue(10923, 10922), 
            this.mirroringShapeCharacters.setValue(10924, 10925), this.mirroringShapeCharacters.setValue(10925, 10924), 
            this.mirroringShapeCharacters.setValue(10927, 10928), this.mirroringShapeCharacters.setValue(10928, 10927), 
            this.mirroringShapeCharacters.setValue(10931, 10932), this.mirroringShapeCharacters.setValue(10932, 10931), 
            this.mirroringShapeCharacters.setValue(10939, 10940), this.mirroringShapeCharacters.setValue(10940, 10939), 
            this.mirroringShapeCharacters.setValue(10941, 10942), this.mirroringShapeCharacters.setValue(10942, 10941), 
            this.mirroringShapeCharacters.setValue(10943, 10944), this.mirroringShapeCharacters.setValue(10944, 10943), 
            this.mirroringShapeCharacters.setValue(10945, 10946), this.mirroringShapeCharacters.setValue(10946, 10945), 
            this.mirroringShapeCharacters.setValue(10947, 10948), this.mirroringShapeCharacters.setValue(10948, 10947), 
            this.mirroringShapeCharacters.setValue(10949, 10950), this.mirroringShapeCharacters.setValue(10950, 10949), 
            this.mirroringShapeCharacters.setValue(10957, 10958), this.mirroringShapeCharacters.setValue(10958, 10957), 
            this.mirroringShapeCharacters.setValue(10959, 10960), this.mirroringShapeCharacters.setValue(10960, 10959), 
            this.mirroringShapeCharacters.setValue(10961, 10962), this.mirroringShapeCharacters.setValue(10962, 10961), 
            this.mirroringShapeCharacters.setValue(10963, 10964), this.mirroringShapeCharacters.setValue(10964, 10963), 
            this.mirroringShapeCharacters.setValue(10965, 10966), this.mirroringShapeCharacters.setValue(10966, 10965), 
            this.mirroringShapeCharacters.setValue(10974, 8870), this.mirroringShapeCharacters.setValue(10979, 8873), 
            this.mirroringShapeCharacters.setValue(10980, 8872), this.mirroringShapeCharacters.setValue(10981, 8875), 
            this.mirroringShapeCharacters.setValue(10988, 10989), this.mirroringShapeCharacters.setValue(10989, 10988), 
            this.mirroringShapeCharacters.setValue(10999, 11e3), this.mirroringShapeCharacters.setValue(11e3, 10999), 
            this.mirroringShapeCharacters.setValue(11001, 11002), this.mirroringShapeCharacters.setValue(11002, 11001), 
            this.mirroringShapeCharacters.setValue(12296, 12297), this.mirroringShapeCharacters.setValue(12297, 12296), 
            this.mirroringShapeCharacters.setValue(12298, 12299), this.mirroringShapeCharacters.setValue(12299, 12298), 
            this.mirroringShapeCharacters.setValue(12300, 12301), this.mirroringShapeCharacters.setValue(12301, 12300), 
            this.mirroringShapeCharacters.setValue(12302, 12303), this.mirroringShapeCharacters.setValue(12303, 12302), 
            this.mirroringShapeCharacters.setValue(12304, 12305), this.mirroringShapeCharacters.setValue(12305, 12304), 
            this.mirroringShapeCharacters.setValue(12308, 12309), this.mirroringShapeCharacters.setValue(12309, 12308), 
            this.mirroringShapeCharacters.setValue(12310, 12311), this.mirroringShapeCharacters.setValue(12311, 12310), 
            this.mirroringShapeCharacters.setValue(12312, 12313), this.mirroringShapeCharacters.setValue(12313, 12312), 
            this.mirroringShapeCharacters.setValue(12314, 12315), this.mirroringShapeCharacters.setValue(12315, 12314), 
            this.mirroringShapeCharacters.setValue(65288, 65289), this.mirroringShapeCharacters.setValue(65289, 65288), 
            this.mirroringShapeCharacters.setValue(65308, 65310), this.mirroringShapeCharacters.setValue(65310, 65308), 
            this.mirroringShapeCharacters.setValue(65339, 65341), this.mirroringShapeCharacters.setValue(65341, 65339), 
            this.mirroringShapeCharacters.setValue(65371, 65373), this.mirroringShapeCharacters.setValue(65373, 65371), 
            this.mirroringShapeCharacters.setValue(65375, 65376), this.mirroringShapeCharacters.setValue(65376, 65375), 
            this.mirroringShapeCharacters.setValue(65378, 65379), this.mirroringShapeCharacters.setValue(65379, 65378);
        }, Bidi;
    }(), RtlCharacters = function() {
        function RtlCharacters() {
            this.types = [], this.textOrder = -1, this.rtlCharacterTypes = new Array(65536), 
            this.L = 0, this.LRE = 1, this.LRO = 2, this.R = 3, this.AL = 4, this.RLE = 5, this.RLO = 6, 
            this.PDF = 7, this.EN = 8, this.ES = 9, this.ET = 10, this.AN = 11, this.CS = 12, 
            this.NSM = 13, this.BN = 14, this.B = 15, this.S = 16, this.WS = 17, this.ON = 18, 
            this.charTypes = [ this.L, this.EN, this.BN, this.ES, this.ES, this.S, this.ET, this.ET, this.B, this.AN, this.AN, this.S, this.CS, this.CS, this.WS, this.NSM, this.NSM, this.B, this.BN, 27, this.BN, 28, 30, this.B, 31, 31, this.S, 32, 32, this.WS, 33, 34, this.ON, 35, 37, this.ET, 38, 42, this.ON, 43, 43, this.ET, 44, 44, this.CS, 45, 45, this.ET, 46, 46, this.CS, 47, 47, this.CS, 48, 57, this.EN, 58, 58, this.CS, 59, 64, this.ON, 65, 90, this.L, 91, 96, this.ON, 97, 122, this.L, 123, 126, this.ON, 127, 132, this.BN, 133, 133, this.B, 134, 159, this.BN, 160, 160, this.CS, 161, 161, this.ON, 162, 165, this.ET, 166, 169, this.ON, 170, 170, this.L, 171, 175, this.ON, 176, 177, this.ET, 178, 179, this.EN, 180, 180, this.ON, 181, 181, this.L, 182, 184, this.ON, 185, 185, this.EN, 186, 186, this.L, 187, 191, this.ON, 192, 214, this.L, 215, 215, this.ON, 216, 246, this.L, 247, 247, this.ON, 248, 696, this.L, 697, 698, this.ON, 699, 705, this.L, 706, 719, this.ON, 720, 721, this.L, 722, 735, this.ON, 736, 740, this.L, 741, 749, this.ON, 750, 750, this.L, 751, 767, this.ON, 768, 855, this.NSM, 856, 860, this.L, 861, 879, this.NSM, 880, 883, this.L, 884, 885, this.ON, 886, 893, this.L, 894, 894, this.ON, 895, 899, this.L, 900, 901, this.ON, 902, 902, this.L, 903, 903, this.ON, 904, 1013, this.L, 1014, 1014, this.ON, 1015, 1154, this.L, 1155, 1158, this.NSM, 1159, 1159, this.L, 1160, 1161, this.NSM, 1162, 1417, this.L, 1418, 1418, this.ON, 1419, 1424, this.L, 1425, 1441, this.NSM, 1442, 1442, this.L, 1443, 1465, this.NSM, 1466, 1466, this.L, 1467, 1469, this.NSM, 1470, 1470, this.R, 1471, 1471, this.NSM, 1472, 1472, this.R, 1473, 1474, this.NSM, 1475, 1475, this.R, 1476, 1476, this.NSM, 1477, 1487, this.L, 1488, 1514, this.R, 1515, 1519, this.L, 1520, 1524, this.R, 1525, 1535, this.L, 1536, 1539, this.AL, 1540, 1547, this.L, 1548, 1548, this.CS, 1549, 1549, this.AL, 1550, 1551, this.ON, 1552, 1557, this.NSM, 1558, 1562, this.L, 1563, 1563, this.AL, 1564, 1566, this.L, 1567, 1567, this.AL, 1568, 1568, this.L, 1569, 1594, this.AL, 1595, 1599, this.L, 1600, 1610, this.AL, 1611, 1624, this.NSM, 1625, 1631, this.L, 1632, 1641, this.AN, 1642, 1642, this.ET, 1643, 1644, this.AN, 1645, 1647, this.AL, 1648, 1648, this.NSM, 1649, 1749, this.AL, 1750, 1756, this.NSM, 1757, 1757, this.AL, 1758, 1764, this.NSM, 1765, 1766, this.AL, 1767, 1768, this.NSM, 1769, 1769, this.ON, 1770, 1773, this.NSM, 1774, 1775, this.AL, 1776, 1785, this.EN, 1786, 1805, this.AL, 1806, 1806, this.L, 1807, 1807, this.BN, 1808, 1808, this.AL, 1809, 1809, this.NSM, 1810, 1839, this.AL, 1840, 1866, this.NSM, 1867, 1868, this.L, 1869, 1871, this.AL, 1872, 1919, this.L, 1920, 1957, this.AL, 1958, 1968, this.NSM, 1969, 1969, this.AL, 1970, 2304, this.L, 2305, 2306, this.NSM, 2307, 2363, this.L, 2364, 2364, this.NSM, 2365, 2368, this.L, 2369, 2376, this.NSM, 2377, 2380, this.L, 2381, 2381, this.NSM, 2382, 2384, this.L, 2385, 2388, this.NSM, 2389, 2401, this.L, 2402, 2403, this.NSM, 2404, 2432, this.L, 2433, 2433, this.NSM, 2434, 2491, this.L, 2492, 2492, this.NSM, 2493, 2496, this.L, 2497, 2500, this.NSM, 2501, 2508, this.L, 2509, 2509, this.NSM, 2510, 2529, this.L, 2530, 2531, this.NSM, 2532, 2545, this.L, 2546, 2547, this.ET, 2548, 2560, this.L, 2561, 2562, this.NSM, 2563, 2619, this.L, 2620, 2620, this.NSM, 2621, 2624, this.L, 2625, 2626, this.NSM, 2627, 2630, this.L, 2631, 2632, this.NSM, 2633, 2634, this.L, 2635, 2637, this.NSM, 2638, 2671, this.L, 2672, 2673, this.NSM, 2674, 2688, this.L, 2689, 2690, this.NSM, 2691, 2747, this.L, 2748, 2748, this.NSM, 2749, 2752, this.L, 2753, 2757, this.NSM, 2758, 2758, this.L, 2759, 2760, this.NSM, 2761, 2764, this.L, 2765, 2765, this.NSM, 2766, 2785, this.L, 2786, 2787, this.NSM, 2788, 2800, this.L, 2801, 2801, this.ET, 2802, 2816, this.L, 2817, 2817, this.NSM, 2818, 2875, this.L, 2876, 2876, this.NSM, 2877, 2878, this.L, 2879, 2879, this.NSM, 2880, 2880, this.L, 2881, 2883, this.NSM, 2884, 2892, this.L, 2893, 2893, this.NSM, 2894, 2901, this.L, 2902, 2902, this.NSM, 2903, 2945, this.L, 2946, 2946, this.NSM, 2947, 3007, this.L, 3008, 3008, this.NSM, 3009, 3020, this.L, 3021, 3021, this.NSM, 3022, 3058, this.L, 3059, 3064, this.ON, 3065, 3065, this.ET, 3066, 3066, this.ON, 3067, 3133, this.L, 3134, 3136, this.NSM, 3137, 3141, this.L, 3142, 3144, this.NSM, 3145, 3145, this.L, 3146, 3149, this.NSM, 3150, 3156, this.L, 3157, 3158, this.NSM, 3159, 3259, this.L, 3260, 3260, this.NSM, 3261, 3275, this.L, 3276, 3277, this.NSM, 3278, 3392, this.L, 3393, 3395, this.NSM, 3396, 3404, this.L, 3405, 3405, this.NSM, 3406, 3529, this.L, 3530, 3530, this.NSM, 3531, 3537, this.L, 3538, 3540, this.NSM, 3541, 3541, this.L, 3542, 3542, this.NSM, 3543, 3632, this.L, 3633, 3633, this.NSM, 3634, 3635, this.L, 3636, 3642, this.NSM, 3643, 3646, this.L, 3647, 3647, this.ET, 3648, 3654, this.L, 3655, 3662, this.NSM, 3663, 3760, this.L, 3761, 3761, this.NSM, 3762, 3763, this.L, 3764, 3769, this.NSM, 3770, 3770, this.L, 3771, 3772, this.NSM, 3773, 3783, this.L, 3784, 3789, this.NSM, 3790, 3863, this.L, 3864, 3865, this.NSM, 3866, 3892, this.L, 3893, 3893, this.NSM, 3894, 3894, this.L, 3895, 3895, this.NSM, 3896, 3896, this.L, 3897, 3897, this.NSM, 3898, 3901, this.ON, 3902, 3952, this.L, 3953, 3966, this.NSM, 3967, 3967, this.L, 3968, 3972, this.NSM, 3973, 3973, this.L, 3974, 3975, this.NSM, 3976, 3983, this.L, 3984, 3991, this.NSM, 3992, 3992, this.L, 3993, 4028, this.NSM, 4029, 4037, this.L, 4038, 4038, this.NSM, 4039, 4140, this.L, 4141, 4144, this.NSM, 4145, 4145, this.L, 4146, 4146, this.NSM, 4147, 4149, this.L, 4150, 4151, this.NSM, 4152, 4152, this.L, 4153, 4153, this.NSM, 4154, 4183, this.L, 4184, 4185, this.NSM, 4186, 5759, this.L, 5760, 5760, this.WS, 5761, 5786, this.L, 5787, 5788, this.ON, 5789, 5905, this.L, 5906, 5908, this.NSM, 5909, 5937, this.L, 5938, 5940, this.NSM, 5941, 5969, this.L, 5970, 5971, this.NSM, 5972, 6001, this.L, 6002, 6003, this.NSM, 6004, 6070, this.L, 6071, 6077, this.NSM, 6078, 6085, this.L, 6086, 6086, this.NSM, 6087, 6088, this.L, 6089, 6099, this.NSM, 6100, 6106, this.L, 6107, 6107, this.ET, 6108, 6108, this.L, 6109, 6109, this.NSM, 6110, 6127, this.L, 6128, 6137, this.ON, 6138, 6143, this.L, 6144, 6154, this.ON, 6155, 6157, this.NSM, 6158, 6158, this.WS, 6159, 6312, this.L, 6313, 6313, this.NSM, 6314, 6431, this.L, 6432, 6434, this.NSM, 6435, 6438, this.L, 6439, 6443, this.NSM, 6444, 6449, this.L, 6450, 6450, this.NSM, 6451, 6456, this.L, 6457, 6459, this.NSM, 6460, 6463, this.L, 6464, 6464, this.ON, 6465, 6467, this.L, 6468, 6469, this.ON, 6470, 6623, this.L, 6624, 6655, this.ON, 6656, 8124, this.L, 8125, 8125, this.ON, 8126, 8126, this.L, 8127, 8129, this.ON, 8130, 8140, this.L, 8141, 8143, this.ON, 8144, 8156, this.L, 8157, 8159, this.ON, 8160, 8172, this.L, 8173, 8175, this.ON, 8176, 8188, this.L, 8189, 8190, this.ON, 8191, 8191, this.L, 8192, 8202, this.WS, 8203, 8205, this.BN, 8206, 8206, this.L, 8207, 8207, this.R, 8208, 8231, this.ON, 8232, 8232, this.WS, 8233, 8233, this.B, 8234, 8234, this.LRE, 8235, 8235, this.RLE, 8236, 8236, this.PDF, 8237, 8237, this.LRO, 8238, 8238, this.RLO, 8239, 8239, this.WS, 8240, 8244, this.ET, 8245, 8276, this.ON, 8277, 8278, this.L, 8279, 8279, this.ON, 8280, 8286, this.L, 8287, 8287, this.WS, 8288, 8291, this.BN, 8292, 8297, this.L, 8298, 8303, this.BN, 8304, 8304, this.EN, 8305, 8307, this.L, 8308, 8313, this.EN, 8314, 8315, this.ET, 8316, 8318, this.ON, 8319, 8319, this.L, 8320, 8329, this.EN, 8330, 8331, this.ET, 8332, 8334, this.ON, 8335, 8351, this.L, 8352, 8369, this.ET, 8370, 8399, this.L, 8400, 8426, this.NSM, 8427, 8447, this.L, 8448, 8449, this.ON, 8450, 8450, this.L, 8451, 8454, this.ON, 8455, 8455, this.L, 8456, 8457, this.ON, 8458, 8467, this.L, 8468, 8468, this.ON, 8469, 8469, this.L, 8470, 8472, this.ON, 8473, 8477, this.L, 8478, 8483, this.ON, 8484, 8484, this.L, 8485, 8485, this.ON, 8486, 8486, this.L, 8487, 8487, this.ON, 8488, 8488, this.L, 8489, 8489, this.ON, 8490, 8493, this.L, 8494, 8494, this.ET, 8495, 8497, this.L, 8498, 8498, this.ON, 8499, 8505, this.L, 8506, 8507, this.ON, 8508, 8511, this.L, 8512, 8516, this.ON, 8517, 8521, this.L, 8522, 8523, this.ON, 8524, 8530, this.L, 8531, 8543, this.ON, 8544, 8591, this.L, 8592, 8721, this.ON, 8722, 8723, this.ET, 8724, 9013, this.ON, 9014, 9082, this.L, 9083, 9108, this.ON, 9109, 9109, this.L, 9110, 9168, this.ON, 9169, 9215, this.L, 9216, 9254, this.ON, 9255, 9279, this.L, 9280, 9290, this.ON, 9291, 9311, this.L, 9312, 9371, this.EN, 9372, 9449, this.L, 9450, 9450, this.EN, 9451, 9751, this.ON, 9752, 9752, this.L, 9753, 9853, this.ON, 9854, 9855, this.L, 9856, 9873, this.ON, 9874, 9887, this.L, 9888, 9889, this.ON, 9890, 9984, this.L, 9985, 9988, this.ON, 9989, 9989, this.L, 9990, 9993, this.ON, 9994, 9995, this.L, 9996, 10023, this.ON, 10024, 10024, this.L, 10025, 10059, this.ON, 10060, 10060, this.L, 10061, 10061, this.ON, 10062, 10062, this.L, 10063, 10066, this.ON, 10067, 10069, this.L, 10070, 10070, this.ON, 10071, 10071, this.L, 10072, 10078, this.ON, 10079, 10080, this.L, 10081, 10132, this.ON, 10133, 10135, this.L, 10136, 10159, this.ON, 10160, 10160, this.L, 10161, 10174, this.ON, 10175, 10191, this.L, 10192, 10219, this.ON, 10220, 10223, this.L, 10224, 11021, this.ON, 11022, 11903, this.L, 11904, 11929, this.ON, 11930, 11930, this.L, 11931, 12019, this.ON, 12020, 12031, this.L, 12032, 12245, this.ON, 12246, 12271, this.L, 12272, 12283, this.ON, 12284, 12287, this.L, 12288, 12288, this.WS, 12289, 12292, this.ON, 12293, 12295, this.L, 12296, 12320, this.ON, 12321, 12329, this.L, 12330, 12335, this.NSM, 12336, 12336, this.ON, 12337, 12341, this.L, 12342, 12343, this.ON, 12344, 12348, this.L, 12349, 12351, this.ON, 12352, 12440, this.L, 12441, 12442, this.NSM, 12443, 12444, this.ON, 12445, 12447, this.L, 12448, 12448, this.ON, 12449, 12538, this.L, 12539, 12539, this.ON, 12540, 12828, this.L, 12829, 12830, this.ON, 12831, 12879, this.L, 12880, 12895, this.ON, 12896, 12923, this.L, 12924, 12925, this.ON, 12926, 12976, this.L, 12977, 12991, this.ON, 12992, 13003, this.L, 13004, 13007, this.ON, 13008, 13174, this.L, 13175, 13178, this.ON, 13179, 13277, this.L, 13278, 13279, this.ON, 13280, 13310, this.L, 13311, 13311, this.ON, 13312, 19903, this.L, 19904, 19967, this.ON, 19968, 42127, this.L, 42128, 42182, this.ON, 42183, 64284, this.L, 64285, 64285, this.R, 64286, 64286, this.NSM, 64287, 64296, this.R, 64297, 64297, this.ET, 64298, 64310, this.R, 64311, 64311, this.L, 64312, 64316, this.R, 64317, 64317, this.L, 64318, 64318, this.R, 64319, 64319, this.L, 64320, 64321, this.R, 64322, 64322, this.L, 64323, 64324, this.R, 64325, 64325, this.L, 64326, 64335, this.R, 64336, 64433, this.AL, 64434, 64466, this.L, 64467, 64829, this.AL, 64830, 64831, this.ON, 64832, 64847, this.L, 64848, 64911, this.AL, 64912, 64913, this.L, 64914, 64967, this.AL, 64968, 65007, this.L, 65008, 65020, this.AL, 65021, 65021, this.ON, 65022, 65023, this.L, 65024, 65039, this.NSM, 65040, 65055, this.L, 65056, 65059, this.NSM, 65060, 65071, this.L, 65072, 65103, this.ON, 65104, 65104, this.CS, 65105, 65105, this.ON, 65106, 65106, this.CS, 65107, 65107, this.L, 65108, 65108, this.ON, 65109, 65109, this.CS, 65110, 65118, this.ON, 65119, 65119, this.ET, 65120, 65121, this.ON, 65122, 65123, this.ET, 65124, 65126, this.ON, 65127, 65127, this.L, 65128, 65128, this.ON, 65129, 65130, this.ET, 65131, 65131, this.ON, 65132, 65135, this.L, 65136, 65140, this.AL, 65141, 65141, this.L, 65142, 65276, this.AL, 65277, 65278, this.L, 65279, 65279, this.BN, 65280, 65280, this.L, 65281, 65282, this.ON, 65283, 65285, this.ET, 65286, 65290, this.ON, 65291, 65291, this.ET, 65292, 65292, this.CS, 65293, 65293, this.ET, 65294, 65294, this.CS, 65295, 65295, this.ES, 65296, 65305, this.EN, 65306, 65306, this.CS, 65307, 65312, this.ON, 65313, 65338, this.L, 65339, 65344, this.ON, 65345, 65370, this.L, 65371, 65381, this.ON, 65382, 65503, this.L, 65504, 65505, this.ET, 65506, 65508, this.ON, 65509, 65510, this.ET, 65511, 65511, this.L, 65512, 65518, this.ON, 65519, 65528, this.L, 65529, 65531, this.BN, 65532, 65533, this.ON, 65534, 65535, this.L ];
            for (var i = 0; i < this.charTypes.length; ++i) for (var start = this.charTypes[i], end = this.charTypes[++i], b = this.charTypes[++i]; start <= end; ) this.rtlCharacterTypes[start++] = b;
        }
        return RtlCharacters.prototype.getVisualOrder = function(inputText, isRtl) {
            this.types = this.getCharacterCode(inputText), this.textOrder = isRtl ? this.LRE : this.L, 
            this.doVisualOrder();
            for (var result = [], i = 0; i < this.levels.length; i++) result[i] = this.levels[i];
            return result;
        }, RtlCharacters.prototype.getCharacterCode = function(text) {
            for (var characterCodes = [], i = 0; i < text.length; i++) characterCodes[i] = this.rtlCharacterTypes[text[i].charCodeAt(0)];
            return characterCodes;
        }, RtlCharacters.prototype.setDefaultLevels = function() {
            for (var i = 0; i < this.length; i++) this.levels[i] = this.textOrder;
        }, RtlCharacters.prototype.setLevels = function() {
            this.setDefaultLevels();
            for (var n = 0; n < this.length; ++n) {
                var level = this.levels[n];
                0 != (128 & level) && (level &= 127, this.result[n] = 0 == (1 & level) ? this.L : this.R), 
                this.levels[n] = level;
            }
        }, RtlCharacters.prototype.updateLevels = function(index, level, length) {
            if (0 == (1 & level)) for (var i = index; i < length; ++i) this.result[i] === this.R ? this.levels[i] += 1 : this.result[i] !== this.L && (this.levels[i] += 2); else for (i = index; i < length; ++i) this.result[i] !== this.R && (this.levels[i] += 1);
        }, RtlCharacters.prototype.doVisualOrder = function() {
            this.length = this.types.length, this.result = this.types, this.levels = [], this.setLevels(), 
            this.length = this.getEmbeddedCharactersLength();
            for (var preview = this.textOrder, i = 0; i < this.length; ) {
                for (var level = this.levels[i], preType = 0 == (1 & Math.max(preview, level)) ? this.L : this.R, length_1 = i + 1; length_1 < this.length && this.levels[length_1] === level; ) ++length_1;
                var success = length_1 < this.length ? this.levels[length_1] : this.textOrder, type = 0 == (1 & Math.max(success, level)) ? this.L : this.R;
                this.checkNSM(i, length_1, level, preType, type), this.updateLevels(i, level, length_1), 
                preview = level, i = length_1;
            }
            this.checkEmbeddedCharacters(this.length);
        }, RtlCharacters.prototype.getEmbeddedCharactersLength = function() {
            for (var index = 0, i = 0; i < this.length; ++i) this.types[i] !== this.LRE && this.types[i] !== this.RLE && this.types[i] !== this.LRO && this.types[i] !== this.RLO && this.types[i] !== this.PDF && this.types[i] !== this.BN && (this.result[index] = this.result[i], 
            this.levels[index] = this.levels[i], index++);
            return index;
        }, RtlCharacters.prototype.checkEmbeddedCharacters = function(length) {
            for (var i = this.types.length - 1; i >= 0; --i) this.types[i] === this.LRE || this.types[i] === this.RLE || this.types[i] === this.LRO || this.types[i] === this.RLO || this.types[i] === this.PDF || this.types[i] === this.BN ? (this.result[i] = this.types[i], 
            this.levels[i] = -1) : (length -= 1, this.result[i] = this.result[length], this.levels[i] = this.levels[length]);
            for (i = 0; i < this.types.length; i++) -1 === this.levels[i] && (this.levels[i] = 0 === i ? this.textOrder : this.levels[i - 1]);
        }, RtlCharacters.prototype.checkNSM = function(index, length, level, startType, endType) {
            for (var charType = startType, i = index; i < length; ++i) this.result[i] === this.NSM ? this.result[i] = charType : charType = this.result[i];
            this.checkEuropeanDigits(index, length, level, startType, endType);
        }, RtlCharacters.prototype.checkEuropeanDigits = function(index, length, level, startType, endType) {
            for (var i = index; i < length; ++i) if (this.result[i] === this.EN) for (var j = i - 1; j >= index; --j) if (this.result[j] === this.L || this.result[j] === this.R || this.result[j] === this.AL) {
                this.result[j] === this.AL && (this.result[i] = this.AN);
                break;
            }
            this.checkArabicCharacters(index, length, level, startType, endType);
        }, RtlCharacters.prototype.checkArabicCharacters = function(index, length, level, startType, endType) {
            for (var i = index; i < length; ++i) this.result[i] === this.AL && (this.result[i] = this.R);
            this.checkEuropeanNumberSeparator(index, length, level, startType, endType);
        }, RtlCharacters.prototype.checkEuropeanNumberSeparator = function(index, length, level, startType, endType) {
            for (var i = index + 1; i < length - 1; ++i) if (this.result[i] === this.ES || this.result[i] === this.CS) {
                var preview = this.result[i - 1], success = this.result[i + 1];
                preview === this.EN && success === this.EN ? this.result[i] = this.EN : this.result[i] === this.CS && preview === this.AN && success === this.AN && (this.result[i] = this.AN);
            }
            this.checkEuropeanNumberTerminator(index, length, level, startType, endType);
        }, RtlCharacters.prototype.checkEuropeanNumberTerminator = function(index, length, level, startType, endType) {
            for (var i = index; i < length; ++i) if (this.result[i] === this.ET) {
                var s = i, b = [];
                b.push(this.ET);
                var l = this.getLength(s, length, b), data = s === index ? startType : this.result[s - 1];
                if (data !== this.EN && (data = l === length ? endType : this.result[l]), data === this.EN) for (var j = s; j < l; ++j) this.result[j] = this.EN;
                i = l;
            }
            this.checkOtherNeutrals(index, length, level, startType, endType);
        }, RtlCharacters.prototype.checkOtherNeutrals = function(index, length, level, startType, endType) {
            for (var i = index; i < length; ++i) this.result[i] !== this.ES && this.result[i] !== this.ET && this.result[i] !== this.CS || (this.result[i] = this.ON);
            this.checkOtherCharacters(index, length, level, startType, endType);
        }, RtlCharacters.prototype.checkOtherCharacters = function(index, length, level, startType, endType) {
            for (var i = index; i < length; ++i) if (this.result[i] === this.EN) {
                for (var pst = startType, j = i - 1; j >= index; --j) if (this.result[j] === this.L || this.result[j] === this.R) {
                    pst = this.result[j];
                    break;
                }
                pst === this.L && (this.result[i] = this.L);
            }
            this.checkCommanCharacters(index, length, level, startType, endType);
        }, RtlCharacters.prototype.getLength = function(index, length, validSet) {
            for (--index; ++index < length; ) {
                for (var t = this.result[index], i = 0; i < validSet.length; ++i) t === validSet[i] && (index = this.getLength(++index, length, validSet));
                return index;
            }
            return length;
        }, RtlCharacters.prototype.checkCommanCharacters = function(index, length, level, startType, endType) {
            for (var i = index; i < length; ++i) if (this.result[i] === this.WS || this.result[i] === this.ON || this.result[i] === this.B || this.result[i] === this.S) {
                var s = i, byte = [ this.B, this.S, this.WS, this.ON ], l = this.getLength(s, length, byte), lt = 0, tt = 0, rt = 0;
                s === index ? lt = startType : (lt = this.result[s - 1]) === this.AN ? lt = this.R : lt === this.EN && (lt = this.R), 
                l === length ? tt = endType : (tt = this.result[l]) === this.AN ? tt = this.R : tt === this.EN && (tt = this.R), 
                rt = lt === tt ? lt : 0 == (1 & level) ? this.L : this.R;
                for (var j = s; j < l; ++j) this.result[j] = rt;
                i = l;
            }
        }, RtlCharacters;
    }(), RtlRenderer = function() {
        function RtlRenderer() {
            this.openBracket = "(", this.closeBracket = ")";
        }
        return RtlRenderer.prototype.layout = function(line, font, rtl, wordSpace, format) {
            if (null == line) throw new Error("ArgumentNullException : line");
            if (null == font) throw new Error("ArgumentNullException : font");
            var result = [];
            return font.Unicode ? result = this.customLayout(line, rtl, format, font, wordSpace) : (result = [])[0] = line, 
            result;
        }, RtlRenderer.prototype.splitLayout = function(line, font, rtl, wordSpace, format) {
            if (null == line) throw new Error("ArgumentNullException : line");
            if (null == font) throw new Error("ArgumentNullException : font");
            return this.customSplitLayout(line, font, rtl, wordSpace, format);
        }, RtlRenderer.prototype.getGlyphIndex = function(line, font, rtl, glyphs, custom) {
            if (null == line) throw new Error("ArgumentNullException : line");
            if (null == font) throw new Error("ArgumentNullException : font");
            if (glyphs = null, 0 === line.length) return {
                success: !1,
                glyphs: glyphs
            };
            var text = new ArabicShapeRenderer().shape(line, 0), ttfReader = font.fontInternal.ttfReader;
            glyphs = new Uint16Array(text.length);
            for (var i = 0, k = 0, len = text.length; k < len; k++) {
                var ch = text[k], glyphInfo = ttfReader.getGlyph(ch);
                null !== glyphInfo && void 0 !== glyphInfo && (glyphs[i++] = glyphInfo.index);
            }
            return {
                success: !0,
                glyphs: glyphs
            };
        }, RtlRenderer.prototype.customLayout = function(line, rtl, format, font, wordSpace) {
            if (null === wordSpace || void 0 === wordSpace) {
                if (null == line) throw new Error("ArgumentNullException : line");
                var result = null;
                if (null !== format && format.textDirection !== PdfTextDirection.None) {
                    result = new Bidi().getLogicalToVisualString(line, rtl);
                }
                return result;
            }
            if (null == line) throw new Error("ArgumentNullException : line");
            if (null == font) throw new Error("ArgumentNullException : font");
            var layouted = null;
            if (null !== format && format.textDirection !== PdfTextDirection.None) {
                var txt = new ArabicShapeRenderer().shape(line, 0);
                layouted = this.customLayout(txt, rtl, format);
            }
            result = [];
            if (wordSpace) {
                for (var words = layouted.split(""), count = words.length, i = 0; i < count; i++) words[i] = this.addChars(font, words[i]);
                result = words;
            } else (result = [])[0] = this.addChars(font, layouted);
            return result;
        }, RtlRenderer.prototype.addChars = function(font, glyphs) {
            var line = glyphs;
            if (null == font) throw new Error("ArgumentNullException : font");
            if (null == line) throw new Error("ArgumentNullException : line");
            var text = line, ttfReader = font.fontInternal.ttfReader;
            font.setSymbols(text), text = ttfReader.convertString(text);
            var bytes = PdfString.toUnicodeArray(text, !1);
            return text = PdfString.byteToString(bytes);
        }, RtlRenderer.prototype.customSplitLayout = function(line, font, rtl, wordSpace, format) {
            if (null == line) throw new Error("ArgumentNullException : line");
            if (null == font) throw new Error("ArgumentNullException : font");
            return this.customLayout(line, rtl, format).split("");
        }, RtlRenderer;
    }(), PdfGraphics = function() {
        function PdfGraphics(arg1, arg2, arg3) {
            this.currentColorSpace = PdfColorSpace.Rgb, this.previousTextRenderingMode = TextRenderingMode.Fill, 
            this.previousCharacterSpacing = 0, this.previousWordSpacing = 0, this.previousTextScaling = 100, 
            this.procedureSets = new ProcedureSets(), this.isNormalRender = !0, this.isUseFontSize = !1, 
            this.isItalic = !1, this.isEmfTextScaled = !1, this.isEmf = !1, this.isEmfPlus = !1, 
            this.isBaselineFormat = !0, this.emfScalingFactor = new SizeF(0, 0), this.colorSpaceChanged = !1, 
            this.dictionaryProperties = new DictionaryProperties(), this.isOverloadWithPosition = !1, 
            this.isPointOverload = !1, this.currentColorSpaces = [ "RGB", "CMYK", "GrayScale", "Indexed" ], 
            this.isImageOptimized = !1, this.graphicsState = [], this.istransparencySet = !1, 
            this.internalAutomaticFields = null, this.startCutIndex = -1, arg3 instanceof PdfStreamWriter ? (this.pdfStreamWriter = arg3, 
            this.getResources = arg2, this.canvasSize = arg1, this.initialize()) : this.constructor(arg1, arg2, new PdfStreamWriter(arg3));
        }
        return Object.defineProperty(PdfGraphics.prototype, "stringLayoutResult", {
            get: function() {
                return this.pdfStringLayoutResult;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "size", {
            get: function() {
                return this.canvasSize;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "mediaBoxUpperRightBound", {
            get: function() {
                return void 0 === this.internalMediaBoxUpperRightBound && (this.internalMediaBoxUpperRightBound = 0), 
                this.internalMediaBoxUpperRightBound;
            },
            set: function(value) {
                this.internalMediaBoxUpperRightBound = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "clientSize", {
            get: function() {
                return new SizeF(this.clipBounds.width, this.clipBounds.height);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "colorSpace", {
            get: function() {
                return this.currentColorSpace;
            },
            set: function(value) {
                this.currentColorSpace = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "streamWriter", {
            get: function() {
                return this.pdfStreamWriter;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "matrix", {
            get: function() {
                return null == this.transformationMatrix && (this.transformationMatrix = new PdfTransformationMatrix()), 
                this.transformationMatrix;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "layer", {
            get: function() {
                return this.pageLayer;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "page", {
            get: function() {
                return this.pageLayer.page;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphics.prototype, "automaticFields", {
            get: function() {
                return null != this.internalAutomaticFields && void 0 !== this.internalAutomaticFields || (this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection()), 
                this.internalAutomaticFields;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGraphics.prototype.initialize = function() {
            this.bStateSaved = !1, this.currentPen = null, this.currentBrush = null, this.currentFont = null, 
            this.currentColorSpace = PdfColorSpace.Rgb, this.bCSInitialized = !1, this.transformationMatrix = null, 
            this.previousTextRenderingMode = -1, this.previousCharacterSpacing = -1, this.previousWordSpacing = -1, 
            this.previousTextScaling = -100, this.currentStringFormat = null, this.clipBounds = new RectangleF(new PointF(0, 0), this.size), 
            this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);
        }, PdfGraphics.prototype.drawPdfTemplate = function(template, location, size) {
            if (void 0 === size) {
                if (null == template) throw Error("ArgumentNullException-template");
                this.drawPdfTemplate(template, location, template.size);
            } else {
                if (null == template) throw Error("ArgumentNullException-template");
                var scaleX = template.width > 0 ? size.width / template.width : 1, scaleY = template.height > 0 ? size.height / template.height : 1, bNeedScale = !(1 === scaleX && 1 === scaleY), state = this.save(), matrix = new PdfTransformationMatrix();
                null != this.pageLayer && this.getTranslateTransform(location.x, location.y + size.height, matrix), 
                bNeedScale && this.getScaleTransform(scaleX, scaleY, matrix), this.pdfStreamWriter.modifyCtm(matrix);
                var name_1 = this.getResources.getResources().getName(template);
                this.pdfStreamWriter.executeObject(name_1), this.restore(state);
                var g = template.graphics;
                if (null != g) for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {
                    var fieldInfo = g.automaticFields.automaticFields[index], newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y), scalingX = 0 == template.size.width ? 0 : size.width / template.size.width, scalingY = 0 == template.size.height ? 0 : size.height / template.size.height;
                    this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY)), 
                    this.page.dictionary.modify();
                }
                this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB), 
                this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC), 
                this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI), 
                this.getResources.getResources().requireProcedureSet(this.procedureSets.text);
            }
        }, PdfGraphics.prototype.drawString = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
            if ("string" == typeof arg1 && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || null === arg3) && (arg4 instanceof PdfBrush || null === arg4) && "number" == typeof arg5 && "number" == typeof arg6 && (arg7 instanceof PdfStringFormat || null === arg7) && void 0 === arg8) this.isOverloadWithPosition = !0, 
            this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, this.clientSize.width - arg5, 0, arg7); else {
                var temparg3 = arg3, temparg4 = arg4, temparg5 = arg5, temparg6 = arg6, temparg7 = arg7, temparg8 = arg8, temparg9 = arg9, result = new PdfStringLayouter().layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);
                if (!result.empty) {
                    var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);
                    temparg7 <= 0 && (temparg5 = rect.x, temparg7 = rect.width), temparg8 <= 0 && (temparg6 = rect.y, 
                    temparg8 = rect.height), this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9), 
                    this.isEmfTextScaled = !1, this.emfScalingFactor = new SizeF(0, 0);
                }
                this.getResources.getResources().requireProcedureSet(this.procedureSets.text), this.isNormalRender = !0, 
                this.pdfStringLayoutResult = result, this.isUseFontSize = !1;
            }
        }, PdfGraphics.prototype.drawLine = function(arg1, arg2, arg3, arg4, arg5) {
            if (arg2 instanceof PointF) {
                var temparg2 = arg2, temparg3 = arg3;
                this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);
            } else {
                temparg2 = arg2, temparg3 = arg3;
                var temparg4 = arg4, temparg5 = arg5;
                this.stateControl(arg1, null, null);
                var sw = this.streamWriter;
                sw.beginPath(temparg2, temparg3), sw.appendLineSegment(temparg4, temparg5), sw.strokePath(), 
                this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);
            }
        }, PdfGraphics.prototype.drawRectangle = function(arg1, arg2, arg3, arg4, arg5, arg6) {
            if (arg1 instanceof PdfPen && "number" == typeof arg2) {
                var temparg3 = arg3;
                this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);
            } else if (arg1 instanceof PdfBrush && "number" == typeof arg2) {
                temparg3 = arg3;
                this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);
            } else {
                temparg3 = arg3;
                var temparg4 = arg4, temparg5 = arg5, temparg6 = arg6;
                arg2 instanceof PdfSolidBrush && arg2.color.isEmpty && (arg2 = null);
                var temparg1 = arg1, temparg2 = arg2;
                this.stateControl(temparg1, temparg2, null), this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6), 
                this.drawPath(temparg1, temparg2, !1);
            }
        }, PdfGraphics.prototype.drawPath = function(arg1, arg2, arg3, arg4) {
            if ("boolean" == typeof arg3) {
                var temparg3 = arg3;
                this.drawPath(arg1, arg2, PdfFillMode.Winding, temparg3);
            } else {
                var isPen = null != arg1, isBrush = null != arg2, isEvenOdd = (temparg3 = arg3) === PdfFillMode.Alternate;
                isPen && isBrush ? this.streamWriter.fillStrokePath(isEvenOdd) : isPen || isBrush ? isPen ? this.streamWriter.strokePath() : this.streamWriter.fillPath(isEvenOdd) : this.streamWriter.endPath();
            }
        }, PdfGraphics.prototype.drawImage = function(arg1, arg2, arg3, arg4, arg5) {
            if ("number" == typeof arg2 && "number" == typeof arg3 && void 0 === arg4) {
                var size = arg1.physicalDimension;
                this.drawImage(arg1, arg2, arg3, size.width, size.height);
            } else {
                var temparg2 = arg2, temparg3 = arg3, temparg5 = arg5;
                arg1.save();
                var matrix = new PdfTransformationMatrix();
                this.getTranslateTransform(temparg2, temparg3 + temparg5, matrix), this.getScaleTransform(arg4, arg5, matrix), 
                this.pdfStreamWriter.write("q"), this.pdfStreamWriter.modifyCtm(matrix);
                var resources = this.getResources.getResources();
                void 0 !== this.pageLayer && null != this.page && (resources.document = this.page.document);
                var name_2 = resources.getName(arg1);
                void 0 !== this.pageLayer && this.page.setResources(resources), this.pdfStreamWriter.executeObject(name_2), 
                this.pdfStreamWriter.write(Operators.restoreState), this.pdfStreamWriter.write(Operators.newLine);
                var resource = this.getResources.getResources();
                resource.requireProcedureSet(this.procedureSets.imageB), resource.requireProcedureSet(this.procedureSets.imageC), 
                resource.requireProcedureSet(this.procedureSets.imageI), resource.requireProcedureSet(this.procedureSets.text);
            }
        }, PdfGraphics.prototype.getLineBounds = function(lineIndex, result, font, layoutRectangle, format) {
            var bounds;
            if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {
                var line = result.lines[lineIndex], y = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format) + layoutRectangle.y + result.lineHeight * lineIndex, lineWidth = line.width, hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format), lineIndent = this.getLineIndent(line, format, layoutRectangle, 0 === lineIndex);
                hShift += this.rightToLeft(format) ? 0 : lineIndent;
                var x = layoutRectangle.x + hShift, width = this.shouldJustify(line, layoutRectangle.width, format) ? layoutRectangle.width - lineIndent : lineWidth - lineIndent, height = result.lineHeight;
                bounds = new RectangleF(x, y, width, height);
            } else bounds = new RectangleF(0, 0, 0, 0);
            return bounds;
        }, PdfGraphics.prototype.checkCorrectLayoutRectangle = function(textSize, x, y, format) {
            var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);
            if (null != format) {
                switch (format.alignment) {
                  case PdfTextAlignment.Center:
                    layoutedRectangle.x -= layoutedRectangle.width / 2;
                    break;

                  case PdfTextAlignment.Right:
                    layoutedRectangle.x -= layoutedRectangle.width;
                }
                switch (format.lineAlignment) {
                  case PdfVerticalAlignment.Middle:
                    layoutedRectangle.y -= layoutedRectangle.height / 2;
                    break;

                  case PdfVerticalAlignment.Bottom:
                    layoutedRectangle.y -= layoutedRectangle.height;
                }
            }
            return layoutedRectangle;
        }, PdfGraphics.prototype.setLayer = function(layer) {
            this.pageLayer = layer;
            var page = layer.page;
            null != page && void 0 !== page && (page.beginSave = this.pageSave);
        }, PdfGraphics.prototype.pageSave = function(page) {
            if (null != page.graphics.automaticFields) for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {
                var fieldInfo = page.graphics.automaticFields.automaticFields[i];
                fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);
            }
        }, PdfGraphics.prototype.drawStringLayoutResult = function(result, font, pen, brush, layoutRectangle, format) {
            if (result.empty) throw new Error("ArgumentNullException:result");
            this.applyStringSettings(font, pen, brush, format, layoutRectangle);
            var textScaling = null != format ? format.horizontalScalingFactor : 100;
            textScaling === this.previousTextScaling || this.isEmfTextScaled || (this.pdfStreamWriter.setTextScaling(textScaling), 
            this.previousTextScaling = textScaling);
            var height = null == format || 0 === format.lineSpacing ? font.height : format.lineSpacing + font.height, shift = 0;
            shift = null != format && format.subSuperScript === PdfSubSuperScript.SubScript ? height - (font.height + font.metrics.getDescent(format)) : height - font.metrics.getAscent(format), 
            this.shift = shift, this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift), 
            this.pdfStreamWriter.setLeading(+height);
            for (var resultHeight = 0, remainingString = "", i = 0; i < result.lines.length; i++) if (resultHeight += result.lineHeight, 
            layoutRectangle.y + resultHeight > this.clientSize.height) {
                this.startCutIndex = i;
                break;
            }
            for (var j = this.startCutIndex; j < result.lines.length && j >= 0; j++) remainingString += result.lines[j].text;
            var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);
            if (this.drawLayoutResult(result, font, format, layoutRectangle), this.underlineStrikeoutText(pen, brush, result, font, bounds, format), 
            this.isEmfPlus = !1, this.isUseFontSize = !1, -1 !== this.startCutIndex) {
                this.getNextPage().graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);
            }
        }, PdfGraphics.prototype.getNextPage = function() {
            var section = this.currentPage.section, index = section.indexOf(this.currentPage);
            return index === section.count - 1 ? section.add() : section.getPages()[index + 1];
        }, PdfGraphics.prototype.setClip = function(rectangle, mode) {
            void 0 === mode ? this.setClip(rectangle, PdfFillMode.Winding) : (this.pdfStreamWriter.appendRectangle(rectangle), 
            this.pdfStreamWriter.clipPath(mode === PdfFillMode.Alternate));
        }, PdfGraphics.prototype.applyStringSettings = function(font, pen, brush, format, bounds) {
            var tm = this.getTextRenderingMode(pen, brush, format);
            this.stateControl(pen, brush, font, format), this.pdfStreamWriter.beginText(), tm !== this.previousTextRenderingMode && (this.pdfStreamWriter.setTextRenderingMode(tm), 
            this.previousTextRenderingMode = tm);
            var cs = null != format ? format.characterSpacing : 0;
            cs === this.previousCharacterSpacing || this.isEmfTextScaled || (this.pdfStreamWriter.setCharacterSpacing(cs), 
            this.previousCharacterSpacing = cs);
            var ws = null != format ? format.wordSpacing : 0;
            ws !== this.previousWordSpacing && (this.pdfStreamWriter.setWordSpacing(ws), this.previousWordSpacing = ws);
        }, PdfGraphics.prototype.getTextVerticalAlignShift = function(textHeight, boundsHeight, format) {
            var shift = 0;
            if (boundsHeight >= 0 && null != format && format.lineAlignment !== PdfVerticalAlignment.Top) switch (format.lineAlignment) {
              case PdfVerticalAlignment.Middle:
                shift = (boundsHeight - textHeight) / 2;
                break;

              case PdfVerticalAlignment.Bottom:
                shift = boundsHeight - textHeight;
            }
            return shift;
        }, PdfGraphics.prototype.drawLayoutResult = function(result, font, format, layoutRectangle) {
            var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);
            0 !== vAlignShift && this.pdfStreamWriter.startNextLine(0, vAlignShift);
            for (var ttfFont = font, unicode = null != ttfFont && ttfFont.isUnicode, lines = (null != ttfFont && ttfFont.isEmbedFont, 
            result.lines), i = 0, len = lines.length; i < len && i !== this.startCutIndex; i++) {
                var lineInfo = lines[i], lineWidth = (lineInfo.text, lineInfo.width), hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format), lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, 0 === i);
                0 === (hAlignShift += this.rightToLeft(format) ? 0 : lineIndent) || this.isEmfTextScaled || this.pdfStreamWriter.startNextLine(hAlignShift, 0), 
                unicode ? this.drawUnicodeLine(lineInfo, layoutRectangle, font, format) : this.drawAsciiLine(lineInfo, layoutRectangle, font, format), 
                0 === hAlignShift || this.isEmfTextScaled || this.pdfStreamWriter.startNextLine(-hAlignShift, 0), 
                this.isOverloadWithPosition && lines.length > 1 && (this.pdfStreamWriter.startNextLine(-layoutRectangle.x, 0), 
                layoutRectangle.x = 0, layoutRectangle.width = this.clientSize.width, this.isOverloadWithPosition = !1, 
                this.isPointOverload = !0);
            }
            this.getResources.getResources().requireProcedureSet(this.procedureSets.text), 0 !== vAlignShift && this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight)), 
            this.pdfStreamWriter.endText();
        }, PdfGraphics.prototype.drawAsciiLine = function(lineInfo, layoutRectangle, font, format) {
            this.justifyLine(lineInfo, layoutRectangle.width, format);
            var value = "";
            if (-1 !== lineInfo.text.indexOf("(") || -1 !== lineInfo.text.indexOf(")")) for (var i = 0; i < lineInfo.text.length; i++) "(" === lineInfo.text[i] ? value += "\\(" : ")" === lineInfo.text[i] ? value += "\\)" : value += lineInfo.text[i];
            "" === value && (value = lineInfo.text);
            var line = "(" + value + ")";
            this.pdfStreamWriter.showNextLineText(new PdfString(line));
        }, PdfGraphics.prototype.drawUnicodeLine = function(lineInfo, layoutRectangle, font, format) {
            var line = lineInfo.text, rtl = (lineInfo.width, null !== format && format.rightToLeft), useWordSpace = null !== format && (0 !== format.wordSpacing || format.alignment === PdfTextAlignment.Justify), ttfFont = font, wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format), rtlRender = new RtlRenderer();
            if (rtl || null !== format && format.textDirection !== PdfTextDirection.None) {
                var blocks = null, rightAlign = null !== format && format.alignment === PdfTextAlignment.Right, words = null;
                words = (blocks = null !== format && format.textDirection !== PdfTextDirection.None ? rtlRender.layout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft, useWordSpace, format) : rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format)).length > 1 ? null !== format && format.textDirection !== PdfTextDirection.None ? rtlRender.splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft, useWordSpace, format) : rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format) : [ line ], 
                this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);
            } else if (useWordSpace) {
                var result = this.breakUnicodeLine(line, ttfFont, null);
                blocks = result.tokens, words = result.words;
                this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);
            } else {
                var token = this.convertToUnicode(line, ttfFont), value = this.getUnicodeString(token);
                this.streamWriter.showNextLineText(value);
            }
        }, PdfGraphics.prototype.drawUnicodeBlocks = function(blocks, words, font, format, wordSpacing) {
            if (null == blocks) throw new Error("Argument Null Exception : blocks");
            if (null == words) throw new Error("Argument Null Exception : words");
            if (null == font) throw new Error("Argument Null Exception : font");
            this.streamWriter.startNextLine();
            var x = 0, xShift = 0, firstLineIndent = 0, paragraphIndent = 0;
            try {
                null !== format && (firstLineIndent = format.firstLineIndent, paragraphIndent = format.paragraphIndent, 
                format.firstLineIndent = 0, format.paragraphIndent = 0);
                var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing, characterSpacing = null != format ? format.characterSpacing : 0;
                spaceWidth += characterSpacing + (null !== format && 0 === wordSpacing ? format.wordSpacing : 0);
                for (var i = 0; i < blocks.length; i++) {
                    var token = blocks[i], word = words[i], tokenWidth = 0;
                    if (0 !== x && this.streamWriter.startNextLine(x, 0), word.length > 0) {
                        tokenWidth += font.measureString(word, format).width, tokenWidth += characterSpacing;
                        var val = this.getUnicodeString(token);
                        this.streamWriter.showText(val);
                    }
                    i !== blocks.length - 1 && (xShift += x = tokenWidth + spaceWidth);
                }
                xShift > 0 && this.streamWriter.startNextLine(-xShift, 0);
            } finally {
                null !== format && (format.firstLineIndent = firstLineIndent, format.paragraphIndent = paragraphIndent);
            }
        }, PdfGraphics.prototype.breakUnicodeLine = function(line, ttfFont, words) {
            if (null === line) throw new Error("Argument Null Exception : line");
            words = line.split(null);
            for (var tokens = [], i = 0; i < words.length; i++) {
                var word = words[i], token = this.convertToUnicode(word, ttfFont);
                tokens[i] = token;
            }
            return {
                tokens: tokens,
                words: words
            };
        }, PdfGraphics.prototype.getUnicodeString = function(token) {
            if (null === token) throw new Error("Argument Null Exception : token");
            var val = new PdfString(token);
            return val.converted = !0, val.encode = InternalEnum.ForceEncoding.Ascii, val;
        }, PdfGraphics.prototype.convertToUnicode = function(text, ttfFont) {
            var token = null;
            if (null == text) throw new Error("Argument Null Exception : text");
            if (null == ttfFont) throw new Error("Argument Null Exception : ttfFont");
            if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {
                var ttfReader = ttfFont.fontInternal.ttfReader;
                ttfFont.setSymbols(text), token = ttfReader.convertString(text);
                var bytes = PdfString.toUnicodeArray(token, !1);
                token = PdfString.byteToString(bytes);
            }
            return token;
        }, PdfGraphics.prototype.justifyLine = function(lineInfo, boundsWidth, format) {
            var line = lineInfo.text, lineWidth = lineInfo.width, shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format), hasWordSpacing = null != format && 0 !== format.wordSpacing, symbols = StringTokenizer.spaces, whitespacesCount = StringTokenizer.getCharsCount(line, symbols), wordSpace = 0;
            if (shouldJustify) {
                hasWordSpacing && (lineWidth -= whitespacesCount * format.wordSpacing);
                wordSpace = (boundsWidth - lineWidth) / whitespacesCount, this.pdfStreamWriter.setWordSpacing(wordSpace);
            } else hasWordSpacing ? this.pdfStreamWriter.setWordSpacing(format.wordSpacing) : this.pdfStreamWriter.setWordSpacing(0);
            return wordSpace;
        }, PdfGraphics.prototype.reset = function(size) {
            this.canvasSize = size, this.streamWriter.clear(), this.initialize(), this.initializeCoordinates();
        }, PdfGraphics.prototype.shouldJustify = function(lineInfo, boundsWidth, format) {
            var line = lineInfo.text, lineWidth = lineInfo.width, justifyStyle = null != format && format.alignment === PdfTextAlignment.Justify, goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth, symbols = StringTokenizer.spaces, hasSpaces = StringTokenizer.getCharsCount(line, symbols) > 0 && line[0] !== StringTokenizer.whiteSpace, goodLineBreakStyle = (lineInfo.lineType & LineType.LayoutBreak) > 0;
            return justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify);
        }, PdfGraphics.prototype.underlineStrikeoutText = function(pen, brush, result, font, layoutRectangle, format) {
            if (font.underline || font.strikeout) {
                var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);
                if (null != linePen) {
                    var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format), underlineYOffset = 0;
                    underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;
                    for (var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width, lines = result.lines, i = 0, len = result.lineCount; i < len; i++) {
                        var lineInfo = lines[i], lineWidth = (lineInfo.text, lineInfo.width), hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format), lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, 0 === i);
                        hShift += this.rightToLeft(format) ? 0 : lineIndent;
                        var x1 = layoutRectangle.x + hShift, x2 = this.shouldJustify(lineInfo, layoutRectangle.width, format) ? x1 + layoutRectangle.width - lineIndent : x1 + lineWidth - lineIndent;
                        if (font.underline) {
                            var y = underlineYOffset;
                            this.drawLine(linePen, x1, y, x2, y), underlineYOffset += result.lineHeight;
                        }
                        if (font.strikeout) {
                            y = strikeoutYOffset;
                            this.drawLine(linePen, x1, y, x2, y), strikeoutYOffset += result.lineHeight;
                        }
                        this.isPointOverload && lines.length > 1 && (layoutRectangle.x = 0, layoutRectangle.width = this.clientSize.width);
                    }
                    this.isPointOverload = !1;
                }
            }
        }, PdfGraphics.prototype.createUnderlineStikeoutPen = function(pen, brush, font, format) {
            var lineWidth = font.metrics.getSize(format) / 20, linePen = null;
            return null != pen ? linePen = new PdfPen(pen.color, lineWidth) : null != brush && (linePen = new PdfPen(brush, lineWidth)), 
            linePen;
        }, PdfGraphics.prototype.getTextRenderingMode = function(pen, brush, format) {
            var tm = TextRenderingMode.None;
            return tm = null != pen && null != brush ? TextRenderingMode.FillStroke : null != pen ? TextRenderingMode.Stroke : TextRenderingMode.Fill, 
            null != format && format.clipPath && (tm |= TextRenderingMode.ClipFlag), tm;
        }, PdfGraphics.prototype.getLineIndent = function(lineInfo, format, layoutBounds, firstLine) {
            var lineIndent = 0, firstParagraphLine = (lineInfo.lineType & LineType.FirstParagraphLine) > 0;
            return null != format && firstParagraphLine && (lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent, 
            lineIndent = layoutBounds.width > 0 ? Math.min(layoutBounds.width, lineIndent) : lineIndent), 
            lineIndent;
        }, PdfGraphics.prototype.getHorizontalAlignShift = function(lineWidth, boundsWidth, format) {
            var shift = 0;
            if (boundsWidth >= 0 && null != format && format.alignment !== PdfTextAlignment.Left) switch (format.alignment) {
              case PdfTextAlignment.Center:
                shift = (boundsWidth - lineWidth) / 2;
                break;

              case PdfTextAlignment.Right:
                shift = boundsWidth - lineWidth;
            }
            return shift;
        }, PdfGraphics.prototype.rightToLeft = function(format) {
            var rtl = null != format && format.rightToLeft;
            return null !== format && void 0 !== format && format.textDirection !== PdfTextDirection.None && void 0 !== format.textDirection && (rtl = !0), 
            rtl;
        }, PdfGraphics.prototype.stateControl = function(pen, brush, font, format) {
            if (void 0 === format) this.stateControl(pen, brush, font, null); else {
                null !== brush ? (void 0 !== this.pageLayer && null != this.pageLayer && !1 === this.colorSpaceChanged && (this.lastDocumentCS = this.pageLayer.page.document.colorSpace, 
                this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace, this.colorSpace = this.pageLayer.page.document.colorSpace, 
                this.currentColorSpace = this.pageLayer.page.document.colorSpace, this.colorSpaceChanged = !0), 
                this.initCurrentColorSpace(this.currentColorSpace)) : null != pen && (void 0 !== this.pageLayer && null != this.pageLayer && (this.colorSpace = this.pageLayer.page.document.colorSpace, 
                this.currentColorSpace = this.pageLayer.page.document.colorSpace), this.initCurrentColorSpace(this.currentColorSpace)), 
                this.penControl(pen, !1), this.brushControl(brush, !1), this.fontControl(font, format, !1);
            }
        }, PdfGraphics.prototype.initCurrentColorSpace = function(colorspace) {
            this.getResources.getResources();
            this.bCSInitialized || (this.pdfStreamWriter.setColorSpace("Device" + this.currentColorSpaces[this.currentColorSpace], !0), 
            this.pdfStreamWriter.setColorSpace("Device" + this.currentColorSpaces[this.currentColorSpace], !1), 
            this.bCSInitialized = !0);
        }, PdfGraphics.prototype.penControl = function(pen, saveState) {
            null != pen && (this.currentPen = pen, this.colorSpace = PdfColorSpace.Rgb, pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone()), 
            this.currentPen = pen.clone());
        }, PdfGraphics.prototype.brushControl = function(brush, saveState) {
            null != brush && (this.currentBrush = brush, brush.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace), 
            this.currentBrush = brush, brush = null);
        }, PdfGraphics.prototype.fontControl = function(font, format, saveState) {
            if (null != font) {
                var curSubSuper = null != format ? format.subSuperScript : PdfSubSuperScript.None, prevSubSuper = null != this.currentStringFormat ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None;
                if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {
                    var resources = this.getResources.getResources();
                    this.currentFont = font, this.currentStringFormat = format;
                    var size = font.metrics.getSize(format);
                    this.isEmfTextScaled = !1;
                    var fontName = resources.getName(font);
                    this.pdfStreamWriter.setFont(font, fontName, size);
                }
            }
        }, PdfGraphics.prototype.setTransparency = function(arg1, arg2, arg3) {
            if (void 0 === arg2) this.istransparencySet = !0, this.setTransparency(arg1, arg1, PdfBlendMode.Normal); else if ("number" == typeof arg2 && void 0 === arg3) this.setTransparency(arg1, arg2, PdfBlendMode.Normal); else {
                null == this.trasparencies && (this.trasparencies = new TemporaryDictionary());
                var transp = null, td = new TransparencyData(arg1, arg2, arg3);
                this.trasparencies.containsKey(td) && (transp = this.trasparencies.getValue(td)), 
                null == transp && (transp = new PdfTransparency(arg1, arg2, arg3), this.trasparencies.setValue(td, transp));
                var name_3 = this.getResources.getResources().getName(transp);
                this.streamWriter.setGraphicsState(name_3);
            }
        }, PdfGraphics.prototype.clipTranslateMargins = function(x, y, left, top, right, bottom) {
            if (x instanceof RectangleF && void 0 === y) this.clipBounds = x, this.pdfStreamWriter.writeComment("Clip margins."), 
            this.pdfStreamWriter.appendRectangle(x), this.pdfStreamWriter.closePath(), this.pdfStreamWriter.clipPath(!1), 
            this.pdfStreamWriter.writeComment("Translate co-ordinate system."), this.translateTransform(x.x, x.y); else if ("number" == typeof x) {
                var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);
                this.clipBounds = clipArea, this.pdfStreamWriter.writeComment("Clip margins."), 
                this.pdfStreamWriter.appendRectangle(clipArea), this.pdfStreamWriter.closePath(), 
                this.pdfStreamWriter.clipPath(!1), this.pdfStreamWriter.writeComment("Translate co-ordinate system."), 
                this.translateTransform(x, y);
            }
        }, PdfGraphics.prototype.updateY = function(y) {
            return -y;
        }, PdfGraphics.prototype.translateTransform = function(offsetX, offsetY) {
            var matrix = new PdfTransformationMatrix();
            this.getTranslateTransform(offsetX, offsetY, matrix), this.pdfStreamWriter.modifyCtm(matrix), 
            this.matrix.multiply(matrix);
        }, PdfGraphics.prototype.getTranslateTransform = function(x, y, input) {
            return input.translate(x, this.updateY(y)), input;
        }, PdfGraphics.prototype.scaleTransform = function(scaleX, scaleY) {
            var matrix = new PdfTransformationMatrix();
            this.getScaleTransform(scaleX, scaleY, matrix), this.pdfStreamWriter.modifyCtm(matrix), 
            this.matrix.multiply(matrix);
        }, PdfGraphics.prototype.getScaleTransform = function(x, y, input) {
            return null == input && (input = new PdfTransformationMatrix()), input.scale(x, y), 
            input;
        }, PdfGraphics.prototype.rotateTransform = function(angle) {
            var matrix = new PdfTransformationMatrix();
            this.getRotateTransform(angle, matrix), this.pdfStreamWriter.modifyCtm(matrix), 
            this.matrix.multiply(matrix);
        }, PdfGraphics.prototype.initializeCoordinates = function() {
            this.pdfStreamWriter.writeComment("Change co-ordinate system to left/top."), this.mediaBoxUpperRightBound !== -this.size.height && null == this.cropBox && (this.mediaBoxUpperRightBound === this.size.height || 0 === this.mediaBoxUpperRightBound ? this.translateTransform(0, this.updateY(this.size.height)) : this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound)));
        }, PdfGraphics.prototype.getRotateTransform = function(angle, input) {
            return null != input && void 0 !== input || (input = new PdfTransformationMatrix()), 
            input.rotate(this.updateY(angle)), input;
        }, PdfGraphics.prototype.save = function() {
            var state = new PdfGraphicsState(this, this.matrix.clone());
            return state.brush = this.currentBrush, state.pen = this.currentPen, state.font = this.currentFont, 
            state.colorSpace = this.currentColorSpace, state.characterSpacing = this.previousCharacterSpacing, 
            state.wordSpacing = this.previousWordSpacing, state.textScaling = this.previousTextScaling, 
            state.textRenderingMode = this.previousTextRenderingMode, this.graphicsState.push(state), 
            this.pdfStreamWriter.saveGraphicsState(), state;
        }, PdfGraphics.prototype.restore = function(state) {
            if (void 0 === state) this.graphicsState.length > 0 && this.doRestoreState(); else if (-1 !== this.graphicsState.indexOf(state)) for (;0 !== this.graphicsState.length; ) {
                if (this.doRestoreState() === state) break;
            }
        }, PdfGraphics.prototype.doRestoreState = function() {
            var state = this.graphicsState.pop();
            return this.transformationMatrix = state.matrix, this.currentBrush = state.brush, 
            this.currentPen = state.pen, this.currentFont = state.font, this.currentColorSpace = state.colorSpace, 
            this.previousCharacterSpacing = state.characterSpacing, this.previousWordSpacing = state.wordSpacing, 
            this.previousTextScaling = state.textScaling, this.previousTextRenderingMode = state.textRenderingMode, 
            this.pdfStreamWriter.restoreGraphicsState(), state;
        }, PdfGraphics.pathTypesValuesMask = 15, PdfGraphics.transparencyObject = !1, PdfGraphics;
    }(), GetResourceEventHandler = function() {
        function GetResourceEventHandler(sender) {
            this.sender = sender;
        }
        return GetResourceEventHandler.prototype.getResources = function() {
            return this.sender.getResources();
        }, GetResourceEventHandler;
    }(), PdfGraphicsState = function() {
        function PdfGraphicsState(graphics, matrix) {
            this.internalTextRenderingMode = TextRenderingMode.Fill, this.internalCharacterSpacing = 0, 
            this.internalWordSpacing = 0, this.internalTextScaling = 100, this.pdfColorSpace = PdfColorSpace.Rgb, 
            void 0 !== graphics && (this.pdfGraphics = graphics, this.transformationMatrix = matrix);
        }
        return Object.defineProperty(PdfGraphicsState.prototype, "graphics", {
            get: function() {
                return this.pdfGraphics;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "matrix", {
            get: function() {
                return this.transformationMatrix;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "characterSpacing", {
            get: function() {
                return this.internalCharacterSpacing;
            },
            set: function(value) {
                this.internalCharacterSpacing = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "wordSpacing", {
            get: function() {
                return this.internalWordSpacing;
            },
            set: function(value) {
                this.internalWordSpacing = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "textScaling", {
            get: function() {
                return this.internalTextScaling;
            },
            set: function(value) {
                this.internalTextScaling = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "pen", {
            get: function() {
                return this.pdfPen;
            },
            set: function(value) {
                this.pdfPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "brush", {
            get: function() {
                return this.pdfBrush;
            },
            set: function(value) {
                this.pdfBrush = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "font", {
            get: function() {
                return this.pdfFont;
            },
            set: function(value) {
                this.pdfFont = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "colorSpace", {
            get: function() {
                return this.pdfColorSpace;
            },
            set: function(value) {
                this.pdfColorSpace = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGraphicsState.prototype, "textRenderingMode", {
            get: function() {
                return this.internalTextRenderingMode;
            },
            set: function(value) {
                this.internalTextRenderingMode = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGraphicsState;
    }(), TransparencyData = function() {
        return function(alphaPen, alphaBrush, blendMode) {
            this.alphaPen = alphaPen, this.alphaBrush = alphaBrush, this.blendMode = blendMode;
        };
    }(), PdfPageLayer = function() {
        function PdfPageLayer(page, streamClipPageTemplates) {
            if (this.pdfColorSpace = PdfColorSpace.Rgb, this.isVisible = !0, this.sublayer = !1, 
            this.contentLength = 0, this.dictionaryProperties = new DictionaryProperties(), 
            void 0 === streamClipPageTemplates) this.pdfPage = page, this.clipPageTemplates = !0, 
            this.content = new PdfStream(); else if (streamClipPageTemplates instanceof PdfStream || null === streamClipPageTemplates) {
                if (null == page) throw new Error("ArgumentNullException:page");
                if (null == streamClipPageTemplates) throw new Error("ArgumentNullException:stream");
                this.pdfPage = page, this.content = streamClipPageTemplates;
            } else this.constructor(page), this.clipPageTemplates = streamClipPageTemplates;
        }
        return Object.defineProperty(PdfPageLayer.prototype, "colorSpace", {
            get: function() {
                return this.pdfColorSpace;
            },
            set: function(value) {
                this.pdfColorSpace = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageLayer.prototype, "page", {
            get: function() {
                return this.pdfPage;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageLayer.prototype, "layerId", {
            get: function() {
                return this.layerid;
            },
            set: function(value) {
                this.layerid = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageLayer.prototype, "name", {
            get: function() {
                return this.layerName;
            },
            set: function(value) {
                this.layerName = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageLayer.prototype, "visible", {
            get: function() {
                return this.isVisible;
            },
            set: function(value) {
                this.isVisible = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageLayer.prototype, "graphics", {
            get: function() {
                return null == this.pdfGraphics && this.initializeGraphics(this.page), this.pdfGraphics;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageLayer.prototype, "layers", {
            get: function() {
                return null == this.layer ? (this.layer = new PdfPageLayerCollection(this.page), 
                this.layer.sublayer = !0, this.layer) : this.layer;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageLayer.prototype.add = function() {
            var layer = new PdfPageLayer(this.pdfPage);
            return layer.name = "", layer;
        }, PdfPageLayer.prototype.sign = function(number) {
            return 0 === number ? 0 : number > 0 ? 1 : -1;
        }, PdfPageLayer.prototype.initializeGraphics = function(page) {
            var oPage = page, gr = new GetResourceEventHandler(this.page);
            if (this.pdfGraphics = new PdfGraphics(page.size, gr, this.content), this.pdfGraphics.mediaBoxUpperRightBound = 0, 
            null != oPage) {
                var sc = oPage.section.parent;
                null != sc && (this.pdfGraphics.colorSpace = sc.document.colorSpace, this.colorSpace = sc.document.colorSpace);
            }
            var isSame = this.sign(page.origin.y) === this.sign(page.origin.x);
            (page.origin.x >= 0 && page.origin.y >= 0 || !isSame) && this.pdfGraphics.initializeCoordinates();
            var clipRect = oPage.section.getActualBounds(oPage, !0), margins = oPage.section.pageSettings.margins;
            this.clipPageTemplates ? page.origin.x >= 0 && page.origin.y >= 0 && this.pdfGraphics.clipTranslateMargins(clipRect) : this.graphics.clipTranslateMargins(clipRect.x, clipRect.y, margins.left, margins.top, margins.right, margins.bottom), 
            this.pdfGraphics.setLayer(this);
        }, Object.defineProperty(PdfPageLayer.prototype, "element", {
            get: function() {
                return this.content;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageLayer;
    }(), PdfCollection = function() {
        function PdfCollection() {}
        return Object.defineProperty(PdfCollection.prototype, "count", {
            get: function() {
                return void 0 === this.collection && (this.collection = []), this.collection.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCollection.prototype, "list", {
            get: function() {
                return void 0 === this.collection && (this.collection = []), this.collection;
            },
            enumerable: !0,
            configurable: !0
        }), PdfCollection;
    }(), __extends$80 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfPageLayerCollection = function(_super) {
        function PdfPageLayerCollection(page) {
            var _this = _super.call(this) || this;
            if (_this.parentLayerCount = 0, _this.sublayer = !1, _this.optionalContent = new PdfDictionary(), 
            page instanceof PdfPageBase) {
                _this.page = page;
                var lPage = page;
                _this.parseLayers(lPage);
            }
            return _this;
        }
        return __extends$80(PdfPageLayerCollection, _super), PdfPageLayerCollection.prototype.items = function(index, value) {
            if ("number" == typeof index && void 0 === value) {
                return this.list[index];
            }
            if (null == value) throw new Error("ArgumentNullException: layer");
            if (value.page !== this.page) throw new Error("ArgumentException: The layer belongs to another page");
        }, PdfPageLayerCollection.prototype.add = function(firstArgument, secondArgument) {
            if (void 0 === firstArgument) {
                var layer = new PdfPageLayer(this.page);
                return layer.name = "", this.add(layer), layer;
            }
            if (firstArgument instanceof PdfPageLayer) {
                var index = this.list.push(firstArgument);
                return this.addLayer(index, firstArgument), index;
            }
            return 0;
        }, PdfPageLayerCollection.prototype.addLayer = function(index, layer) {
            var reference = new PdfReferenceHolder(layer);
            this.page.contents.add(reference);
        }, PdfPageLayerCollection.prototype.insert = function(index, layer) {
            for (var list = [], length = this.list.length, i = index; i < length; i++) list.push(this.list.pop());
            this.list.push(layer);
            for (i = 0; i < list.length; i++) this.list.push(list[i]);
            this.insertLayer(index, layer);
        }, PdfPageLayerCollection.prototype.insertLayer = function(index, layer) {
            if (null == layer) throw new Error("ArgumentNullException:layer");
            var reference = new PdfReferenceHolder(layer);
            this.page.contents.insert(index, reference);
        }, PdfPageLayerCollection.prototype.parseLayers = function(loadedPage) {
            var contents = this.page.contents;
            this.page.getResources();
            loadedPage.crossTable;
            var saveStream = new PdfStream(), restoreStream = new PdfStream(), saveData = [];
            saveData.push("q"), saveStream.data = saveData, contents.insert(0, new PdfReferenceHolder(saveStream)), 
            (saveData = []).push("Q"), restoreStream.data = saveData, contents.insert(contents.count, new PdfReferenceHolder(restoreStream));
        }, PdfPageLayerCollection.prototype.indexOf = function(layer) {
            if (null == layer) throw new Error("ArgumentNullException: layer");
            return this.list.indexOf(layer);
        }, PdfPageLayerCollection;
    }(PdfCollection), PdfTemplate = function() {
        function PdfTemplate(arg1, arg2) {
            if (this.dictionaryProperties = new DictionaryProperties(), this.writeTransformation = !0, 
            void 0 === arg1) ; else if (arg1 instanceof SizeF && void 0 === arg2) {
                this.content = new PdfStream();
                var tempSize = new SizeF(arg1.width, arg1.height);
                this.setSize(tempSize), this.initialize();
            } else this.content = new PdfStream(), this.setSize(new SizeF(arg1, arg2)), this.initialize();
        }
        return Object.defineProperty(PdfTemplate.prototype, "size", {
            get: function() {
                return this.templateSize;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTemplate.prototype, "width", {
            get: function() {
                return this.size.width;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTemplate.prototype, "height", {
            get: function() {
                return this.size.height;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTemplate.prototype, "graphics", {
            get: function() {
                if (null == this.pdfGraphics || void 0 === this.pdfGraphics) {
                    var gr = new GetResourceEventHandler(this), g = new PdfGraphics(this.size, gr, this.content);
                    this.pdfGraphics = g, this.pdfGraphics.initializeCoordinates();
                }
                return this.pdfGraphics;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTemplate.prototype.getResources = function() {
            return null == this.resources && (this.resources = new PdfResources(), this.content.items.setValue(this.dictionaryProperties.resources, this.resources)), 
            this.resources;
        }, PdfTemplate.prototype.initialize = function() {
            this.addType(), this.addSubType();
        }, PdfTemplate.prototype.addType = function() {
            var value = new PdfName(this.dictionaryProperties.xObject);
            this.content.items.setValue(this.dictionaryProperties.type, value);
        }, PdfTemplate.prototype.addSubType = function() {
            var value = new PdfName(this.dictionaryProperties.form);
            this.content.items.setValue(this.dictionaryProperties.subtype, value);
        }, PdfTemplate.prototype.reset = function(size) {
            void 0 === size ? (null != this.resources && (this.resources = null, this.content.remove(this.dictionaryProperties.resources)), 
            null != this.graphics && this.graphics.reset(this.size)) : (this.setSize(size), 
            this.reset());
        }, PdfTemplate.prototype.setSize = function(size) {
            var rect = new RectangleF(new PointF(0, 0), size), val = PdfArray.fromRectangle(rect);
            this.content.items.setValue(this.dictionaryProperties.bBox, val), this.templateSize = size;
        }, Object.defineProperty(PdfTemplate.prototype, "element", {
            get: function() {
                return this.content;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTemplate;
    }(), __extends$84 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfResources = function(_super) {
        function PdfResources(baseDictionary) {
            var _this = _super.call(this) || this;
            return _this.properties = new PdfDictionary(), baseDictionary instanceof PdfDictionary && (_this = _super.call(this, baseDictionary) || this), 
            _this;
        }
        return __extends$84(PdfResources, _super), Object.defineProperty(PdfResources.prototype, "names", {
            get: function() {
                return this.getNames();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfResources.prototype, "document", {
            get: function() {
                return this.pdfDocument;
            },
            set: function(value) {
                this.pdfDocument = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfResources.prototype.getName = function(obj) {
            var primitive = obj.element, name = null;
            if (this.names.containsKey(primitive) && (name = this.names.getValue(primitive)), 
            null == name) {
                var sName = this.generateName();
                name = new PdfName(sName), this.names.setValue(primitive, name), obj instanceof PdfFont ? this.add(obj, name) : obj instanceof PdfTemplate ? this.add(obj, name) : obj instanceof PdfTransparency ? this.add(obj, name) : (obj instanceof PdfImage || obj instanceof PdfBitmap) && this.add(obj, name);
            }
            return name;
        }, PdfResources.prototype.getNames = function() {
            null == this.pdfNames && (this.pdfNames = new TemporaryDictionary());
            var fonts = this.items.getValue(this.dictionaryProperties.font);
            if (null != fonts) {
                PdfCrossTable.dereference(fonts);
            }
            return this.pdfNames;
        }, PdfResources.prototype.requireProcedureSet = function(procedureSetName) {
            if (null == procedureSetName) throw new Error("ArgumentNullException:procedureSetName");
            var procSets = this.items.getValue(this.dictionaryProperties.procset);
            null == procSets && (procSets = new PdfArray(), this.items.setValue(this.dictionaryProperties.procset, procSets));
            var name = new PdfName(procedureSetName);
            procSets.contains(name) || procSets.add(name);
        }, PdfResources.prototype.removeFont = function(name) {
            for (var key = null, keys = this.pdfNames.keys(), index = 0; index < this.pdfNames.size(); index++) if (this.pdfNames.getValue(keys[index]) === new PdfName(name)) {
                key = keys[index];
                break;
            }
            null != key && this.pdfNames.remove(key);
        }, PdfResources.prototype.generateName = function() {
            return Guid.getNewGuidString();
        }, PdfResources.prototype.add = function(arg1, arg2) {
            if (arg1 instanceof PdfFont) {
                var dictionary = null, fonts = this.items.getValue(this.dictionaryProperties.font);
                if (null != fonts) {
                    var reference = fonts;
                    dictionary = fonts, dictionary = fonts;
                } else dictionary = new PdfDictionary(), this.items.setValue(this.dictionaryProperties.font, dictionary);
                dictionary.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));
            } else if (arg1 instanceof PdfTemplate) {
                var xobjects = void 0;
                null == (xobjects = this.items.getValue(this.dictionaryProperties.xObject)) && (xobjects = new PdfDictionary(), 
                this.items.setValue(this.dictionaryProperties.xObject, xobjects)), xobjects.items.setValue(arg2.value, new PdfReferenceHolder(arg1.element));
            } else if (arg1 instanceof PdfBrush) ; else if (arg1 instanceof PdfTransparency) {
                var savable = arg1.element, transDic = null;
                null == (transDic = this.items.getValue(this.dictionaryProperties.extGState)) && (transDic = new PdfDictionary(), 
                this.items.setValue(this.dictionaryProperties.extGState, transDic)), transDic.items.setValue(arg2.value, new PdfReferenceHolder(savable));
            } else {
                xobjects = this.Dictionary.items.getValue(this.dictionaryProperties.xObject);
                var parentXObjects = void 0;
                void 0 !== this.pdfDocument && (parentXObjects = this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.getValue(this.dictionaryProperties.xObject));
                this.Dictionary.items.values();
                var hasSameImageStream = !1, oldReference = void 0;
                if (void 0 === this.pdfDocument || void 0 !== typeof parentXObjects && null != parentXObjects) {
                    if (void 0 !== this.pdfDocument) for (var values_1 = parentXObjects.items.values(), i = 0; i < values_1.length; i++) void 0 !== values_1[i] && void 0 !== values_1[i].element && values_1[i].element.data[0] === arg1.element.data[0] && (oldReference = values_1[i], 
                    hasSameImageStream = !0);
                } else parentXObjects = new PdfDictionary(), this.pdfDocument.sections.element.items.getValue(this.dictionaryProperties.resources).items.setValue(this.dictionaryProperties.xObject, parentXObjects);
                if (null == xobjects && (xobjects = new PdfDictionary(), this.Dictionary.items.setValue(this.dictionaryProperties.xObject, xobjects)), 
                hasSameImageStream && void 0 !== oldReference) xobjects.items.setValue(arg2.value, oldReference); else {
                    reference = new PdfReferenceHolder(arg1.element);
                    xobjects.items.setValue(arg2.value, reference), void 0 !== this.pdfDocument && parentXObjects.items.setValue(arg2.value, reference);
                }
            }
        }, PdfResources;
    }(PdfDictionary), Guid = function() {
        function Guid(stringValue) {
            this.stringValue = stringValue || Guid.getNewGuidString();
        }
        return Object.defineProperty(Guid, "randomNumber", {
            get: function() {
                return Guid.guid = Guid.guid + 1, Guid.guid = Guid.guid > 999999999999 ? 0 : Guid.guid;
            },
            enumerable: !0,
            configurable: !0
        }), Guid.prototype.toString = function() {
            return this.stringValue;
        }, Guid.getNewGuidString = function() {
            var randomString = Guid.randomNumber.toString();
            return randomString = "abc7def4-ghi9-jkl2-m6n3-" + "opqrstuvwxyz".substr(0, 12 - randomString.length) + randomString;
        }, Guid.guid = 0, Guid;
    }(), PdfPageBase = function() {
        function PdfPageBase(dictionary) {
            this.defLayerIndex = -1, this.modified = !1, this.dictionaryProperties = new DictionaryProperties(), 
            this.pageDictionary = dictionary;
        }
        return Object.defineProperty(PdfPageBase.prototype, "section", {
            get: function() {
                return this.pdfSection;
            },
            set: function(value) {
                this.pdfSection = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageBase.prototype, "dictionary", {
            get: function() {
                return this.pageDictionary;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageBase.prototype, "element", {
            get: function() {
                return this.pageDictionary;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageBase.prototype, "defaultLayer", {
            get: function() {
                var layer = this.layers, index = this.defaultLayerIndex;
                return layer.items(index);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageBase.prototype, "defaultLayerIndex", {
            get: function() {
                if (0 === this.layerCollection.count || -1 === this.defLayerIndex) {
                    var layer = this.layerCollection.add();
                    this.defLayerIndex = this.layerCollection.indexOf(layer);
                }
                return this.defLayerIndex;
            },
            set: function(value) {
                if (value < 0 || value > this.layers.count - 1) throw new Error("ArgumentOutOfRangeException : value, Index can not be less 0 and greater Layers.Count - 1");
                this.defLayerIndex = value, this.modified = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageBase.prototype, "layers", {
            get: function() {
                return null != this.layerCollection && void 0 !== this.layerCollection || (this.layerCollection = new PdfPageLayerCollection(this)), 
                this.layerCollection;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageBase.prototype.getResources = function() {
            return null == this.resources && (this.resources = new PdfResources(), this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources)), 
            this.resources;
        }, Object.defineProperty(PdfPageBase.prototype, "contents", {
            get: function() {
                var contents = this.pageDictionary.items.getValue(this.dictionaryProperties.contents);
                return null == contents && (contents = new PdfArray(), this.pageDictionary.items.setValue(this.dictionaryProperties.contents, contents)), 
                contents;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageBase.prototype.setResources = function(res) {
            this.resources = res, this.dictionary.items.setValue(this.dictionaryProperties.resources, this.resources), 
            this.modified = !0;
        }, PdfPageBase;
    }(), PdfAnnotationCollection = function() {
        function PdfAnnotationCollection(page) {
            this.alreadyExistsAnnotationError = "This annotatation had been already added to page", 
            this.missingAnnotationException = "Annotation is not contained in collection.", 
            this.dictionaryProperties = new DictionaryProperties(), this.internalAnnotations = new PdfArray(), 
            this.lists = [], void 0 !== page && (this.page = page);
        }
        return Object.defineProperty(PdfAnnotationCollection.prototype, "annotations", {
            get: function() {
                return this.internalAnnotations;
            },
            set: function(value) {
                this.internalAnnotations = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAnnotationCollection.prototype.add = function(annotation) {
            this.doAdd(annotation);
        }, PdfAnnotationCollection.prototype.doAdd = function(annotation) {
            if (void 0 === annotation.destination) return annotation.setPage(this.page), this.internalAnnotations.add(new PdfReferenceHolder(annotation)), 
            this.lists.push(annotation);
            var layoutResult = new PdfStringLayouter().layout(annotation.text, annotation.font, annotation.stringFormat, new SizeF(annotation.bounds.width, 0), !1, new SizeF(0, 0)), lastPosition = annotation.bounds.y;
            if (1 === layoutResult.lines.length) {
                var size = annotation.font.measureString(layoutResult.lines[0].text);
                annotation.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size), 
                annotation.text = layoutResult.lines[0].text, this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, annotation.bounds.y, annotation.bounds.width, annotation.bounds.height, null), 
                annotation.setPage(this.page), this.setColor(annotation), this.internalAnnotations.add(new PdfReferenceHolder(annotation)), 
                this.lists.push(annotation);
            } else for (var i = 0; i < layoutResult.lines.length; i++) {
                size = annotation.font.measureString(layoutResult.lines[i].text);
                if (0 === i) annotation.bounds = new RectangleF(annotation.bounds.x, lastPosition, size.width, size.height), 
                annotation.text = layoutResult.lines[i].text, this.page.graphics.drawString(annotation.text, annotation.font, null, annotation.brush, annotation.bounds.x, lastPosition, size.width, size.height, null), 
                annotation.setPage(this.page), this.setColor(annotation), this.internalAnnotations.add(new PdfReferenceHolder(annotation)), 
                this.lists.push(annotation), lastPosition += annotation.bounds.height; else {
                    var annot = annotation.clone();
                    annot.bounds = new RectangleF(new PointF(annotation.bounds.x, lastPosition), size), 
                    annot.text = layoutResult.lines[i].text, this.page.graphics.drawString(annot.text, annot.font, null, annot.brush, annot.bounds.x, annot.bounds.y, annot.bounds.width, annot.bounds.height, null), 
                    annot.setPage(this.page), this.setColor(annot), this.internalAnnotations.add(new PdfReferenceHolder(annot)), 
                    this.lists.push(annot), lastPosition += annot.bounds.height;
                }
            }
        }, PdfAnnotationCollection.prototype.setColor = function(annotation) {
            var cs = PdfColorSpace.Rgb, colours = annotation.color.toArray(cs);
            annotation.dictionary.items.setValue(this.dictionaryProperties.c, colours);
        }, Object.defineProperty(PdfAnnotationCollection.prototype, "element", {
            get: function() {
                return this.internalAnnotations;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAnnotationCollection;
    }(), __extends$79 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfPage = function(_super) {
        function PdfPage() {
            var _this = _super.call(this, new PdfDictionary()) || this;
            return _this.annotationCollection = null, _this.beginSave = null, _this.initialize(), 
            _this;
        }
        return __extends$79(PdfPage, _super), Object.defineProperty(PdfPage.prototype, "document", {
            get: function() {
                return null !== this.section && null !== this.section.parent ? this.section.parent.document : null;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPage.prototype, "graphics", {
            get: function() {
                var result = this.defaultLayer.graphics;
                return result.currentPage = this, result;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPage.prototype, "crossTable", {
            get: function() {
                if (null === this.section) throw new Error("PdfDocumentException : Page is not created");
                return null === this.section.parent ? this.section.parentDocument.crossTable : this.section.parent.document.crossTable;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPage.prototype, "size", {
            get: function() {
                return this.section.pageSettings.size;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPage.prototype, "origin", {
            get: function() {
                return this.section.pageSettings.origin;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPage.prototype, "annotations", {
            get: function() {
                return null == this.annotationCollection && (this.annotationCollection = new PdfAnnotationCollection(this), 
                this.dictionary.items.setValue(this.dictionaryProperties.annots, this.annotationCollection.element), 
                this.annotationCollection.annotations = this.dictionary.items.getValue(this.dictionaryProperties.annots)), 
                this.annotationCollection;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPage.prototype.initialize = function() {
            this.dictionary.items.setValue(this.dictionaryProperties.type, new PdfName("Page")), 
            this.dictionary.pageBeginDrawTemplate = new SaveTemplateEventHandler(this);
        }, PdfPage.prototype.setSection = function(section) {
            this.section = section, this.dictionary.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(section));
        }, PdfPage.prototype.resetProgress = function() {
            this.isProgressOn = !1;
        }, PdfPage.prototype.getClientSize = function() {
            var returnValue = this.section.getActualBounds(this, !0);
            return new SizeF(returnValue.width, returnValue.height);
        }, PdfPage.prototype.pageBeginSave = function() {
            var doc = this.document;
            void 0 !== typeof doc && null != doc && this.drawPageTemplates(doc), null != this.beginSave && void 0 !== this.beginSave && this.beginSave(this);
        }, PdfPage.prototype.drawPageTemplates = function(document) {
            if (this.section.containsTemplates(document, this, !1)) {
                var backLayer = new PdfPageLayer(this, !1);
                if (this.layers.insert(0, backLayer), this.section.drawTemplates(this, backLayer, document, !1), 
                null !== backLayer.graphics && void 0 !== backLayer.graphics) for (var i = 0; i < backLayer.graphics.automaticFields.automaticFields.length; i++) {
                    var fieldInfo = backLayer.graphics.automaticFields.automaticFields[i];
                    fieldInfo.field.performDraw(backLayer.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);
                }
            }
            if (this.section.containsTemplates(document, this, !0)) {
                var frontLayer = new PdfPageLayer(this, !1);
                this.layers.add(frontLayer), this.section.drawTemplates(this, frontLayer, document, !0);
            }
        }, PdfPage;
    }(PdfPageBase), PageAddedEventArgs = function() {
        function PageAddedEventArgs(page) {
            this.pdfPage = void 0 !== page ? page : null;
        }
        return Object.defineProperty(PageAddedEventArgs.prototype, "page", {
            get: function() {
                return this.pdfPage;
            },
            enumerable: !0,
            configurable: !0
        }), PageAddedEventArgs;
    }(), PdfSectionPageCollection = function() {
        function PdfSectionPageCollection(section) {
            if (this.pdfSection = null, null == section) throw Error('ArgumentNullException("section")');
            this.section = section;
        }
        return Object.defineProperty(PdfSectionPageCollection.prototype, "section", {
            get: function() {
                return this.pdfSection;
            },
            set: function(value) {
                this.pdfSection = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfSectionPageCollection.prototype.contains = function(page) {
            return this.section.contains(page);
        }, PdfSectionPageCollection.prototype.remove = function(page) {
            this.section.remove(page);
        }, PdfSectionPageCollection.prototype.add = function() {
            return this.section.add();
        }, PdfSectionPageCollection;
    }(), PdfDocumentTemplate = function() {
        function PdfDocumentTemplate() {}
        return Object.defineProperty(PdfDocumentTemplate.prototype, "left", {
            get: function() {
                return this.leftTemplate;
            },
            set: function(value) {
                this.leftTemplate = this.checkElement(value, TemplateType.Left);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "top", {
            get: function() {
                return this.topTemplate;
            },
            set: function(value) {
                this.topTemplate = this.checkElement(value, TemplateType.Top);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "right", {
            get: function() {
                return this.rightTemplate;
            },
            set: function(value) {
                this.rightTemplate = this.checkElement(value, TemplateType.Right);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "bottom", {
            get: function() {
                return this.bottomTemplate;
            },
            set: function(value) {
                this.bottomTemplate = this.checkElement(value, TemplateType.Bottom);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "EvenLeft", {
            get: function() {
                return this.evenLeft;
            },
            set: function(value) {
                this.evenLeft = this.checkElement(value, TemplateType.Left);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "EvenTop", {
            get: function() {
                return this.evenTop;
            },
            set: function(value) {
                this.evenTop = this.checkElement(value, TemplateType.Top);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "EvenRight", {
            get: function() {
                return this.evenRight;
            },
            set: function(value) {
                this.evenRight = this.checkElement(value, TemplateType.Right);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "EvenBottom", {
            get: function() {
                return this.evenBottom;
            },
            set: function(value) {
                this.evenBottom = this.checkElement(value, TemplateType.Bottom);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "OddLeft", {
            get: function() {
                return this.oddLeft;
            },
            set: function(value) {
                this.oddLeft = this.checkElement(value, TemplateType.Left);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "OddTop", {
            get: function() {
                return this.oddTop;
            },
            set: function(value) {
                this.oddTop = this.checkElement(value, TemplateType.Top);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "OddRight", {
            get: function() {
                return this.oddRight;
            },
            set: function(value) {
                this.oddRight = this.checkElement(value, TemplateType.Right);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentTemplate.prototype, "OddBottom", {
            get: function() {
                return this.oddBottom;
            },
            set: function(value) {
                this.oddBottom = this.checkElement(value, TemplateType.Bottom);
            },
            enumerable: !0,
            configurable: !0
        }), PdfDocumentTemplate.prototype.getLeft = function(page) {
            if (null == page) throw new Error("ArgumentNullException:page");
            return this.isEven(page) ? null != this.EvenLeft ? this.EvenLeft : this.left : null != this.OddLeft ? this.OddLeft : this.left;
        }, PdfDocumentTemplate.prototype.getTop = function(page) {
            if (null == page) throw new Error("ArgumentNullException:page");
            return this.isEven(page) ? null != this.EvenTop ? this.EvenTop : this.top : null != this.OddTop ? this.OddTop : this.top;
        }, PdfDocumentTemplate.prototype.getRight = function(page) {
            if (null == page) throw new Error("ArgumentNullException:page");
            return this.isEven(page) ? null != this.EvenRight ? this.EvenRight : this.right : null != this.OddRight ? this.OddRight : this.right;
        }, PdfDocumentTemplate.prototype.getBottom = function(page) {
            if (null == page) throw new Error("ArgumentNullException:page");
            return this.isEven(page) ? null != this.EvenBottom ? this.EvenBottom : this.bottom : null != this.OddBottom ? this.OddBottom : this.bottom;
        }, PdfDocumentTemplate.prototype.isEven = function(page) {
            var pages = page.section.document.pages;
            return (pages.pageCollectionIndex.containsKey(page) ? pages.pageCollectionIndex.getValue(page) + 1 : pages.indexOf(page) + 1) % 2 == 0;
        }, PdfDocumentTemplate.prototype.checkElement = function(templateElement, type) {
            if (null != templateElement) {
                if (void 0 !== templateElement.type && templateElement.type !== TemplateType.None) throw new Error("NotSupportedException:Can not reassign the template element. Please, create new one.");
                templateElement.type = type;
            }
            return templateElement;
        }, PdfDocumentTemplate;
    }(), __extends$85 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfSectionTemplate = function(_super) {
        function PdfSectionTemplate() {
            var _this = _super.call(this) || this;
            return _this.leftValue = _this.topValue = _this.rightValue = _this.bottomValue = _this.stampValue = !0, 
            _this;
        }
        return __extends$85(PdfSectionTemplate, _super), Object.defineProperty(PdfSectionTemplate.prototype, "applyDocumentLeftTemplate", {
            get: function() {
                return this.leftValue;
            },
            set: function(value) {
                this.leftValue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSectionTemplate.prototype, "applyDocumentTopTemplate", {
            get: function() {
                return this.topValue;
            },
            set: function(value) {
                this.topValue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSectionTemplate.prototype, "applyDocumentRightTemplate", {
            get: function() {
                return this.rightValue;
            },
            set: function(value) {
                this.rightValue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSectionTemplate.prototype, "applyDocumentBottomTemplate", {
            get: function() {
                return this.bottomValue;
            },
            set: function(value) {
                this.bottomValue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSectionTemplate.prototype, "applyDocumentStamps", {
            get: function() {
                return this.stampValue;
            },
            set: function(value) {
                this.stampValue = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfSectionTemplate;
    }(PdfDocumentTemplate), PdfSection = function() {
        function PdfSection(document, pageSettings) {
            this.pageAdded = new PageAddedEventArgs(), this.pdfPages = [], this.dictionaryProperties = new DictionaryProperties(), 
            void 0 === pageSettings ? this.constructor(document, document.pageSettings) : (this.pdfDocument = document, 
            this.settings = pageSettings.clone(), this.initialSettings = this.settings.clone(), 
            this.initialize());
        }
        return Object.defineProperty(PdfSection.prototype, "parent", {
            get: function() {
                return this.sectionCollection;
            },
            set: function(value) {
                this.sectionCollection = value, this.section.items.setValue(this.dictionaryProperties.parent, new PdfReferenceHolder(value));
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSection.prototype, "parentDocument", {
            get: function() {
                return this.pdfDocument;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSection.prototype, "pageSettings", {
            get: function() {
                return this.settings;
            },
            set: function(value) {
                if (null == value) throw Error("Value can not be null.");
                this.settings = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSection.prototype, "element", {
            get: function() {
                return this.section;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSection.prototype, "count", {
            get: function() {
                return this.pagesReferences.count;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSection.prototype, "template", {
            get: function() {
                return null == this.pageTemplate && (this.pageTemplate = new PdfSectionTemplate()), 
                this.pageTemplate;
            },
            set: function(value) {
                this.pageTemplate = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSection.prototype, "document", {
            get: function() {
                return this.sectionCollection.document;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSection.prototype, "pages", {
            get: function() {
                return null != this.pagesCollection && void 0 !== this.pagesCollection || (this.pagesCollection = new PdfSectionPageCollection(this)), 
                this.pagesCollection;
            },
            enumerable: !0,
            configurable: !0
        }), PdfSection.prototype.getPages = function() {
            return this.pdfPages;
        }, PdfSection.prototype.pointToNativePdf = function(page, point) {
            var bounds = this.getActualBounds(page, !0);
            return point.x += bounds.x, point.y = this.pageSettings.height - point.y, point;
        }, PdfSection.prototype.setPageSettings = function(settings) {
            this.settings = settings, this.state.orientation = settings.orientation, this.state.rotate = settings.rotate, 
            this.state.size = settings.size, this.state.origin = settings.origin;
        }, PdfSection.prototype.initialize = function() {
            this.pagesReferences = new PdfArray(), this.section = new PdfDictionary(), this.state = new PageSettingsState(this.pdfDocument), 
            this.section.sectionBeginSave = new SaveSectionEventHandler(this, this.state), this.pageCount = new PdfNumber(0), 
            this.section.items.setValue(this.dictionaryProperties.count, this.pageCount), this.section.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.pages)), 
            this.section.items.setValue(this.dictionaryProperties.kids, this.pagesReferences);
        }, PdfSection.prototype.containsTemplates = function(document, page, foreground) {
            var documentHeaders = this.getDocumentTemplates(document, page, !0, foreground), documentTemplates = this.getDocumentTemplates(document, page, !1, foreground);
            return documentHeaders.length > 0 || documentTemplates.length > 0;
        }, PdfSection.prototype.getDocumentTemplates = function(document, page, headers, foreground) {
            var templates = [];
            return headers && (this.template.applyDocumentTopTemplate && null != document.template.getTop(page) && (!document.template.getTop(page).foreground && !foreground || document.template.getTop(page).foreground && foreground) && templates.push(document.template.getTop(page)), 
            this.template.applyDocumentBottomTemplate && null != document.template.getBottom(page) && (!document.template.getBottom(page).foreground && !foreground || document.template.getBottom(page).foreground && foreground) && templates.push(document.template.getBottom(page)), 
            this.template.applyDocumentLeftTemplate && null != document.template.getLeft(page) && (!document.template.getLeft(page).foreground && !foreground || document.template.getLeft(page).foreground && foreground) && templates.push(document.template.getLeft(page)), 
            this.template.applyDocumentRightTemplate && null != document.template.getRight(page) && (!document.template.getRight(page).foreground && !foreground || document.template.getRight(page).foreground && foreground) && templates.push(document.template.getRight(page))), 
            templates;
        }, PdfSection.prototype.add = function(page) {
            if (void 0 === page) {
                var page_1 = new PdfPage();
                return this.add(page_1), page_1;
            }
            var r = this.checkPresence(page);
            this.pdfPages.push(page), this.pagesReferences.add(r), page.setSection(this), page.resetProgress(), 
            this.pageAddedMethod(page);
        }, PdfSection.prototype.checkPresence = function(page) {
            for (var rh = new PdfReferenceHolder(page), contains = !1, sc = this.parent, index = 0; index < sc.section.length; index++) {
                var section = sc.section[index];
                contains = contains || section.contains(page);
            }
            return rh;
        }, PdfSection.prototype.contains = function(page) {
            return 0 <= this.indexOf(page);
        }, PdfSection.prototype.indexOf = function(page) {
            for (var index = 0; index < this.pdfPages.length; index++) if (this.pdfPages[index] === page) return this.pdfPages.indexOf(page);
            var r = new PdfReferenceHolder(page);
            return this.pagesReferences.indexOf(r);
        }, PdfSection.prototype.pageAddedMethod = function(page) {
            var args = new PageAddedEventArgs(page);
            this.onPageAdded(args);
            this.parent.document.pages.onPageAdded(args), this.pageCount.intValue = this.count;
        }, PdfSection.prototype.onPageAdded = function(args) {}, PdfSection.prototype.getActualBounds = function(arg1, arg2, arg3) {
            if (arg1 instanceof PdfPage && "boolean" == typeof arg2) {
                var document_1 = this.parent.document;
                return this.getActualBounds(document_1, arg1, arg2);
            }
            arg1 = arg1, arg2 = arg2, arg3 = arg3;
            var bounds = new RectangleF(0, 0, 0, 0);
            bounds.height = arg3 ? this.pageSettings.size.height : this.pageSettings.getActualSize().height, 
            bounds.width = arg3 ? this.pageSettings.size.width : this.pageSettings.getActualSize().width;
            var left = this.getLeftIndentWidth(arg1, arg2, arg3), top_1 = this.getTopIndentHeight(arg1, arg2, arg3), right = this.getRightIndentWidth(arg1, arg2, arg3), bottom = this.getBottomIndentHeight(arg1, arg2, arg3);
            return bounds.x += left, bounds.y += top_1, bounds.width -= left + right, bounds.height -= top_1 + bottom, 
            bounds;
        }, PdfSection.prototype.getLeftIndentWidth = function(document, page, includeMargins) {
            if (null == document) throw new Error("ArgumentNullException:document");
            if (null == page) throw new Error("ArgumentNullException:page");
            var value = includeMargins ? this.pageSettings.margins.left : 0, templateWidth = null != this.template.getLeft(page) ? this.template.getLeft(page).width : 0, docTemplateWidth = null != document.template.getLeft(page) ? document.template.getLeft(page).width : 0;
            return value += this.template.applyDocumentLeftTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
        }, PdfSection.prototype.getTopIndentHeight = function(document, page, includeMargins) {
            if (null == document) throw new Error("ArgumentNullException:document");
            if (null == page) throw new Error("ArgumentNullException:page");
            var value = includeMargins ? this.pageSettings.margins.top : 0, templateHeight = null != this.template.getTop(page) ? this.template.getTop(page).height : 0, docTemplateHeight = null != document.template.getTop(page) ? document.template.getTop(page).height : 0;
            return value += this.template.applyDocumentTopTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
        }, PdfSection.prototype.getRightIndentWidth = function(document, page, includeMargins) {
            if (null == document) throw new Error("ArgumentNullException:document");
            if (null == page) throw new Error("ArgumentNullException:page");
            var value = includeMargins ? this.pageSettings.margins.right : 0, templateWidth = null != this.template.getRight(page) ? this.template.getRight(page).width : 0, docTemplateWidth = null != document.template.getRight(page) ? document.template.getRight(page).width : 0;
            return value += this.template.applyDocumentRightTemplate ? Math.max(templateWidth, docTemplateWidth) : templateWidth;
        }, PdfSection.prototype.getBottomIndentHeight = function(document, page, includeMargins) {
            if (null == document) throw new Error("ArgumentNullException:document");
            if (null == page) throw new Error("ArgumentNullException:page");
            var value = includeMargins ? this.pageSettings.margins.bottom : 0, templateHeight = null != this.template.getBottom(page) ? this.template.getBottom(page).height : 0, docTemplateHeight = null != document.template.getBottom(page) ? document.template.getBottom(page).height : 0;
            return value += this.template.applyDocumentBottomTemplate ? Math.max(templateHeight, docTemplateHeight) : templateHeight;
        }, PdfSection.prototype.remove = function(page) {
            if (null == page) throw Error('ArgumentNullException("page")');
            var index = this.pdfPages.indexOf(page);
            this.pagesReferences.removeAt(index);
            for (var temproaryPages = [], j = 0; j < index; j++) temproaryPages.push(this.pdfPages[j]);
            for (j = index + 1; j < this.pdfPages.length; j++) temproaryPages.push(this.pdfPages[j]);
            this.pdfPages = temproaryPages;
        }, PdfSection.prototype.applyPageSettings = function(container, parentSettings, state) {
            var bounds = new RectangleF(state.origin, state.size);
            container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));
            var rotate = 0;
            rotate = PdfSectionCollection.rotateFactor * state.rotate;
            var angle = new PdfNumber(rotate);
            container.items.setValue(this.dictionaryProperties.rotate, angle);
        }, PdfSection.prototype.beginSave = function(state, writer) {
            var doc = writer.document;
            this.applyPageSettings(this.section, doc.pageSettings, state);
        }, PdfSection.prototype.drawTemplates = function(page, layer, document, foreground) {
            var documentHeaders = this.getDocumentTemplates(document, page, !0, foreground), documentTemplates = this.getDocumentTemplates(document, page, !1, foreground);
            this.drawTemplatesHelper(layer, document, documentHeaders), this.drawTemplatesHelper(layer, document, documentTemplates);
        }, PdfSection.prototype.drawTemplatesHelper = function(layer, document, templates) {
            if (null != templates && templates.length > 0) for (var len = templates.length, i = 0; i < len; i++) {
                templates[i].draw(layer, document);
            }
        }, PdfSection;
    }(), PageSettingsState = function() {
        function PageSettingsState(document) {
            this.pageOrientation = document.pageSettings.orientation, this.pageRotate = document.pageSettings.rotate, 
            this.pageSize = document.pageSettings.size, this.pageOrigin = document.pageSettings.origin;
        }
        return Object.defineProperty(PageSettingsState.prototype, "orientation", {
            get: function() {
                return this.pageOrientation;
            },
            set: function(value) {
                this.pageOrientation = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PageSettingsState.prototype, "rotate", {
            get: function() {
                return this.pageRotate;
            },
            set: function(value) {
                this.pageRotate = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PageSettingsState.prototype, "size", {
            get: function() {
                return this.pageSize;
            },
            set: function(value) {
                this.pageSize = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PageSettingsState.prototype, "origin", {
            get: function() {
                return this.pageOrigin;
            },
            set: function(value) {
                this.pageOrigin = value;
            },
            enumerable: !0,
            configurable: !0
        }), PageSettingsState;
    }(), PdfSectionCollection = function() {
        function PdfSectionCollection(document) {
            this.sections = [], this.dictionaryProperties = new DictionaryProperties(), this.pdfDocument = document.clone(), 
            this.initialize();
        }
        return Object.defineProperty(PdfSectionCollection.prototype, "section", {
            get: function() {
                return this.sections;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSectionCollection.prototype, "document", {
            get: function() {
                return this.pdfDocument;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSectionCollection.prototype, "count", {
            get: function() {
                return this.sections.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfSectionCollection.prototype, "element", {
            get: function() {
                return this.pages;
            },
            enumerable: !0,
            configurable: !0
        }), PdfSectionCollection.prototype.initialize = function() {
            this.sectionCount = new PdfNumber(0), this.sectionCollection = new PdfArray(), this.pages = new PdfDictionary(), 
            this.pages.beginSave = new SaveSectionCollectionEventHandler(this), this.pages.items.setValue(this.dictionaryProperties.type, new PdfName("Pages")), 
            this.pages.items.setValue(this.dictionaryProperties.kids, this.sectionCollection), 
            this.pages.items.setValue(this.dictionaryProperties.count, this.sectionCount), this.pages.items.setValue(this.dictionaryProperties.resources, new PdfDictionary()), 
            this.setPageSettings(this.pages, this.pdfDocument.pageSettings);
        }, PdfSectionCollection.prototype.pdfSectionCollection = function(index) {
            if (index < 0 || index >= this.count) throw new Error("IndexOutOfRangeException()");
            return this.sections[index];
        }, PdfSectionCollection.prototype.setPageSettings = function(container, pageSettings) {
            var bounds = new RectangleF(new PointF(), pageSettings.size);
            container.items.setValue(this.dictionaryProperties.mediaBox, PdfArray.fromRectangle(bounds));
        }, PdfSectionCollection.prototype.add = function(section) {
            if (void 0 === section) {
                var section_1 = new PdfSection(this.pdfDocument);
                return this.add(section_1), section_1;
            }
            var r = this.checkSection(section);
            return this.sections.push(section), section.parent = this, this.sectionCollection.add(r), 
            this.sections.indexOf(section);
        }, PdfSectionCollection.prototype.checkSection = function(section) {
            var r = new PdfReferenceHolder(section);
            this.sectionCollection.contains(r);
            return r;
        }, PdfSectionCollection.prototype.countPages = function() {
            var count = 0;
            return this.sections.forEach(function(n) {
                return count += n.count;
            }), count;
        }, PdfSectionCollection.prototype.beginSave = function() {
            this.sectionCount.intValue = this.countPages();
        }, PdfSectionCollection.rotateFactor = 90, PdfSectionCollection;
    }(), PdfDocumentPageCollection = function() {
        function PdfDocumentPageCollection(document) {
            this.pdfPageCollectionIndex = new Dictionary(), this.previousPageOrientation = PdfPageOrientation.Portrait, 
            this.document = document;
        }
        return Object.defineProperty(PdfDocumentPageCollection.prototype, "count", {
            get: function() {
                return this.countPages();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocumentPageCollection.prototype, "pageCollectionIndex", {
            get: function() {
                return this.pdfPageCollectionIndex;
            },
            enumerable: !0,
            configurable: !0
        }), PdfDocumentPageCollection.prototype.add = function(page) {
            if (void 0 === page) {
                var page_1 = new PdfPage();
                return this.add(page_1), page_1;
            }
            var section = this.getLastSection();
            section.pageSettings.orientation !== this.previousPageOrientation && ((section = this.document.sections.add()).pageSettings.orientation = this.document.pageSettings.orientation), 
            section.add(page);
        }, PdfDocumentPageCollection.prototype.getLastSection = function() {
            var sc = this.document.sections;
            0 === sc.section.length && sc.add();
            return sc.section[sc.section.length - 1];
        }, PdfDocumentPageCollection.prototype.onPageAdded = function(args) {}, PdfDocumentPageCollection.prototype.countPages = function() {
            for (var sc = this.document.sections, count = 0, index = 0; index < sc.section.length; index++) count += sc.section[index].count;
            return count;
        }, PdfDocumentPageCollection.prototype.getPageByIndex = function(index) {
            return this.getPage(index);
        }, PdfDocumentPageCollection.prototype.getPage = function(index) {
            if (index < 0 || index >= this.count) throw Error('ArgumentOutOfRangeException("index", "Value can not be less 0")');
            for (var page = null, sectionStartIndex = 0, sectionCount = 0, pageIndex = 0, length = this.document.sections.count, i = 0; i < length; i++) {
                var section = this.document.sections.section[i];
                if (sectionCount = section.count, pageIndex = index - sectionStartIndex, index >= sectionStartIndex && pageIndex < sectionCount) {
                    page = section.getPages()[pageIndex];
                    break;
                }
                sectionStartIndex += sectionCount;
            }
            return page;
        }, PdfDocumentPageCollection.prototype.indexOf = function(page) {
            var index = -1;
            if (null == page) throw new Error("ArgumentNullException: page");
            for (var numPages = 0, i = 0, len = this.document.sections.count; i < len; i++) {
                var section = this.document.sections.pdfSectionCollection(i);
                if ((index = section.indexOf(page)) >= 0) {
                    index += numPages;
                    break;
                }
                index = -1, numPages += section.count;
            }
            return index;
        }, PdfDocumentPageCollection.prototype.remove = function(page) {
            if (null == page) throw Error('ArgumentNullException("page")');
            for (var section = null, i = 0, len_1 = this.document.sections.count; i < len_1; i++) if ((section = this.document.sections.pdfSectionCollection(i)).pages.contains(page)) {
                section.pages.remove(page);
                break;
            }
            return section;
        }, PdfDocumentPageCollection;
    }(), PdfCacheCollection = function() {
        function PdfCacheCollection() {
            this.referenceObjects = [], this.pdfFontCollection = new Dictionary();
        }
        return PdfCacheCollection.prototype.search = function(obj) {
            var result = null, group = this.getGroup(obj);
            return null == group ? group = this.createNewGroup() : group.length > 0 && (result = group[0]), 
            group.push(obj), result;
        }, PdfCacheCollection.prototype.createNewGroup = function() {
            var group = [];
            return this.referenceObjects.push(group), group;
        }, PdfCacheCollection.prototype.getGroup = function(result) {
            var group = null;
            if (null !== result) for (var len = this.referenceObjects.length, i = 0; i < len; i++) {
                if (this.referenceObjects.length > 0) {
                    var tGroup = this.referenceObjects[i];
                    if (tGroup.length > 0) {
                        var representative = tGroup[0];
                        if (result.equalsTo(representative)) {
                            group = tGroup;
                            break;
                        }
                    } else this.removeGroup(tGroup);
                }
                len = this.referenceObjects.length;
            }
            return group;
        }, PdfCacheCollection.prototype.removeGroup = function(group) {
            if (null !== group) {
                var index = this.referenceObjects.indexOf(group);
                this.referenceObjects.slice(index, index + 1);
            }
        }, PdfCacheCollection.prototype.destroy = function() {
            this.pdfFontCollection = void 0, this.referenceObjects = void 0;
        }, PdfCacheCollection;
    }(), __extends$77 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfDocument = function(_super) {
        function PdfDocument(isMerging) {
            var _this = _super.call(this) || this;
            if (_this.defaultMargin = 40, _this.streamWriter = null, _this = _super.call(this, _this) || this, 
            !0 === isMerging || !1 === isMerging || void 0 !== isMerging) {
                var objects = new PdfMainObjectCollection();
                _this.setMainObjectCollection(objects);
                var crossTable = new PdfCrossTable();
                crossTable.isMerging = isMerging, crossTable.document = _this, _this.setCrossTable(crossTable);
                var catalog = new PdfCatalog();
                _this.setCatalog(catalog), objects.add(catalog), catalog.position = -1, _this.sectionCollection = new PdfSectionCollection(_this), 
                _this.documentPageCollection = new PdfDocumentPageCollection(_this), catalog.pages = _this.sectionCollection;
            } else PdfDocument.cacheCollection = new PdfCacheCollection(), _this.constructor(!1);
            return _this;
        }
        return __extends$77(PdfDocument, _super), Object.defineProperty(PdfDocument, "defaultFont", {
            get: function() {
                return null == this.defaultStandardFont && (this.defaultStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 8)), 
                this.defaultStandardFont;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocument.prototype, "sections", {
            get: function() {
                return this.sectionCollection;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocument.prototype, "pageSettings", {
            get: function() {
                return null == this.settings && (this.settings = new PdfPageSettings(this.defaultMargin)), 
                this.settings;
            },
            set: function(value) {
                this.settings = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocument.prototype, "pages", {
            get: function() {
                return this.documentPageCollection;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocument, "cache", {
            get: function() {
                return void 0 === PdfDocument.cacheCollection || null == PdfDocument.cacheCollection ? new PdfCacheCollection() : PdfDocument.cacheCollection;
            },
            set: function(value) {
                this.cacheCollection = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocument, "enableCache", {
            get: function() {
                return this.isCacheEnabled;
            },
            set: function(value) {
                this.isCacheEnabled = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocument.prototype, "colorSpace", {
            get: function() {
                return this.pdfColorSpace === PdfColorSpace.Rgb || this.pdfColorSpace === PdfColorSpace.Cmyk || this.pdfColorSpace === PdfColorSpace.GrayScale ? this.pdfColorSpace : PdfColorSpace.Rgb;
            },
            set: function(value) {
                value === PdfColorSpace.Rgb || value === PdfColorSpace.Cmyk || value === PdfColorSpace.GrayScale ? this.pdfColorSpace = value : this.pdfColorSpace = PdfColorSpace.Rgb;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDocument.prototype, "template", {
            get: function() {
                return null == this.pageTemplate && (this.pageTemplate = new PdfDocumentTemplate()), 
                this.pageTemplate;
            },
            set: function(value) {
                this.pageTemplate = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfDocument.prototype.docSave = function(stream, arg2, arg3) {
            if (this.checkPagesPresence(), null === stream) throw new Error("ArgumentNullException : stream");
            this.streamWriter = stream;
            var writer = new PdfWriter(stream);
            if (writer.document = this, "boolean" == typeof arg2 && void 0 === arg3) return this.crossTable.save(writer);
            this.crossTable.save(writer, arg2);
        }, PdfDocument.prototype.checkPagesPresence = function() {
            0 === this.pages.count && this.pages.add();
        }, PdfDocument.prototype.destroy = function() {
            this.catalog = void 0, this.colorSpace = void 0, this.currentSavingObj = void 0, 
            this.documentPageCollection = void 0, this.isStreamCopied = void 0, this.pageSettings = void 0, 
            this.pageTemplate = void 0, this.pdfColorSpace = void 0, this.sectionCollection = void 0, 
            PdfDocument.cache.destroy(), this.crossTable.pdfObjects.destroy(), PdfDocument.cache = void 0, 
            this.streamWriter.destroy();
        }, PdfDocument.defaultStandardFont = null, PdfDocument.isCacheEnabled = !0, PdfDocument;
    }(PdfDocumentBase), PdfStandardFontMetricsFactory = function() {
        function PdfStandardFontMetricsFactory() {}
        return PdfStandardFontMetricsFactory.getMetrics = function(fontFamily, fontStyle, size) {
            var metrics = null;
            switch (fontFamily) {
              case PdfFontFamily.Helvetica:
                metrics = this.getHelveticaMetrics(fontFamily, fontStyle, size);
                break;

              case PdfFontFamily.Courier:
                metrics = this.getCourierMetrics(fontFamily, fontStyle, size);
                break;

              case PdfFontFamily.TimesRoman:
                metrics = this.getTimesMetrics(fontFamily, fontStyle, size);
                break;

              case PdfFontFamily.Symbol:
                metrics = this.getSymbolMetrics(fontFamily, fontStyle, size);
                break;

              case PdfFontFamily.ZapfDingbats:
                metrics = this.getZapfDingbatsMetrics(fontFamily, fontStyle, size);
                break;

              default:
                metrics = this.getHelveticaMetrics(PdfFontFamily.Helvetica, fontStyle, size);
            }
            return metrics.name = fontFamily.toString(), metrics.subScriptSizeFactor = this.subSuperScriptFactor, 
            metrics.superscriptSizeFactor = this.subSuperScriptFactor, metrics;
        }, PdfStandardFontMetricsFactory.getHelveticaMetrics = function(fontFamily, fontStyle, size) {
            var metrics = new PdfFontMetrics();
            return (fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0 ? (metrics.ascent = this.helveticaBoldItalicAscent, 
            metrics.descent = this.helveticaBoldItalicDescent, metrics.postScriptName = this.helveticaBoldItalicName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.arialBoldWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (fontStyle & PdfFontStyle.Bold) > 0 ? (metrics.ascent = this.helveticaBoldAscent, 
            metrics.descent = this.helveticaBoldDescent, metrics.postScriptName = this.helveticaBoldName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.arialBoldWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (fontStyle & PdfFontStyle.Italic) > 0 ? (metrics.ascent = this.helveticaItalicAscent, 
            metrics.descent = this.helveticaItalicDescent, metrics.postScriptName = this.helveticaItalicName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.arialWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (metrics.ascent = this.helveticaAscent, 
            metrics.descent = this.helveticaDescent, metrics.postScriptName = this.helveticaName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.arialWidth), 
            metrics.height = metrics.ascent - metrics.descent), metrics;
        }, PdfStandardFontMetricsFactory.getCourierMetrics = function(fontFamily, fontStyle, size) {
            var metrics = new PdfFontMetrics();
            return (fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0 ? (metrics.ascent = this.courierBoldItalicAscent, 
            metrics.descent = this.courierBoldItalicDescent, metrics.postScriptName = this.courierBoldItalicName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.fixedWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (fontStyle & PdfFontStyle.Bold) > 0 ? (metrics.ascent = this.courierBoldAscent, 
            metrics.descent = this.courierBoldDescent, metrics.postScriptName = this.courierBoldName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.fixedWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (fontStyle & PdfFontStyle.Italic) > 0 ? (metrics.ascent = this.courierItalicAscent, 
            metrics.descent = this.courierItalicDescent, metrics.postScriptName = this.courierItalicName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.fixedWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (metrics.ascent = this.courierAscent, 
            metrics.descent = this.courierDescent, metrics.postScriptName = this.courierName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.fixedWidth), 
            metrics.height = metrics.ascent - metrics.descent), metrics;
        }, PdfStandardFontMetricsFactory.getTimesMetrics = function(fontFamily, fontStyle, size) {
            var metrics = new PdfFontMetrics();
            return (fontStyle & PdfFontStyle.Bold) > 0 && (fontStyle & PdfFontStyle.Italic) > 0 ? (metrics.ascent = this.timesBoldItalicAscent, 
            metrics.descent = this.timesBoldItalicDescent, metrics.postScriptName = this.timesBoldItalicName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.timesRomanBoldItalicWidths), 
            metrics.height = metrics.ascent - metrics.descent) : (fontStyle & PdfFontStyle.Bold) > 0 ? (metrics.ascent = this.timesBoldAscent, 
            metrics.descent = this.timesBoldDescent, metrics.postScriptName = this.timesBoldName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.timesRomanBoldWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (fontStyle & PdfFontStyle.Italic) > 0 ? (metrics.ascent = this.timesItalicAscent, 
            metrics.descent = this.timesItalicDescent, metrics.postScriptName = this.timesItalicName, 
            metrics.size = size, metrics.widthTable = new StandardWidthTable(this.timesRomanItalicWidth), 
            metrics.height = metrics.ascent - metrics.descent) : (metrics.ascent = this.timesAscent, 
            metrics.descent = this.timesDescent, metrics.postScriptName = this.timesName, metrics.size = size, 
            metrics.widthTable = new StandardWidthTable(this.timesRomanWidth), metrics.height = metrics.ascent - metrics.descent), 
            metrics;
        }, PdfStandardFontMetricsFactory.getSymbolMetrics = function(fontFamily, fontStyle, size) {
            var metrics = new PdfFontMetrics();
            return metrics.ascent = this.symbolAscent, metrics.descent = this.symbolDescent, 
            metrics.postScriptName = this.symbolName, metrics.size = size, metrics.widthTable = new StandardWidthTable(this.symbolWidth), 
            metrics.height = metrics.ascent - metrics.descent, metrics;
        }, PdfStandardFontMetricsFactory.getZapfDingbatsMetrics = function(fontFamily, fontStyle, size) {
            var metrics = new PdfFontMetrics();
            return metrics.ascent = this.zapfDingbatsAscent, metrics.descent = this.zapfDingbatsDescent, 
            metrics.postScriptName = this.zapfDingbatsName, metrics.size = size, metrics.widthTable = new StandardWidthTable(this.zapfDingbatsWidth), 
            metrics.height = metrics.ascent - metrics.descent, metrics;
        }, PdfStandardFontMetricsFactory.subSuperScriptFactor = 1.52, PdfStandardFontMetricsFactory.helveticaAscent = 931, 
        PdfStandardFontMetricsFactory.helveticaDescent = -225, PdfStandardFontMetricsFactory.helveticaName = "Helvetica", 
        PdfStandardFontMetricsFactory.helveticaBoldAscent = 962, PdfStandardFontMetricsFactory.helveticaBoldDescent = -228, 
        PdfStandardFontMetricsFactory.helveticaBoldName = "Helvetica-Bold", PdfStandardFontMetricsFactory.helveticaItalicAscent = 931, 
        PdfStandardFontMetricsFactory.helveticaItalicDescent = -225, PdfStandardFontMetricsFactory.helveticaItalicName = "Helvetica-Oblique", 
        PdfStandardFontMetricsFactory.helveticaBoldItalicAscent = 962, PdfStandardFontMetricsFactory.helveticaBoldItalicDescent = -228, 
        PdfStandardFontMetricsFactory.helveticaBoldItalicName = "Helvetica-BoldOblique", 
        PdfStandardFontMetricsFactory.courierAscent = 805, PdfStandardFontMetricsFactory.courierDescent = -250, 
        PdfStandardFontMetricsFactory.courierName = "Courier", PdfStandardFontMetricsFactory.courierBoldAscent = 801, 
        PdfStandardFontMetricsFactory.courierBoldDescent = -250, PdfStandardFontMetricsFactory.courierBoldName = "Courier-Bold", 
        PdfStandardFontMetricsFactory.courierItalicAscent = 805, PdfStandardFontMetricsFactory.courierItalicDescent = -250, 
        PdfStandardFontMetricsFactory.courierItalicName = "Courier-Oblique", PdfStandardFontMetricsFactory.courierBoldItalicAscent = 801, 
        PdfStandardFontMetricsFactory.courierBoldItalicDescent = -250, PdfStandardFontMetricsFactory.courierBoldItalicName = "Courier-BoldOblique", 
        PdfStandardFontMetricsFactory.timesAscent = 898, PdfStandardFontMetricsFactory.timesDescent = -218, 
        PdfStandardFontMetricsFactory.timesName = "Times-Roman", PdfStandardFontMetricsFactory.timesBoldAscent = 935, 
        PdfStandardFontMetricsFactory.timesBoldDescent = -218, PdfStandardFontMetricsFactory.timesBoldName = "Times-Bold", 
        PdfStandardFontMetricsFactory.timesItalicAscent = 883, PdfStandardFontMetricsFactory.timesItalicDescent = -217, 
        PdfStandardFontMetricsFactory.timesItalicName = "Times-Italic", PdfStandardFontMetricsFactory.timesBoldItalicAscent = 921, 
        PdfStandardFontMetricsFactory.timesBoldItalicDescent = -218, PdfStandardFontMetricsFactory.timesBoldItalicName = "Times-BoldItalic", 
        PdfStandardFontMetricsFactory.symbolAscent = 1010, PdfStandardFontMetricsFactory.symbolDescent = -293, 
        PdfStandardFontMetricsFactory.symbolName = "Symbol", PdfStandardFontMetricsFactory.zapfDingbatsAscent = 820, 
        PdfStandardFontMetricsFactory.zapfDingbatsDescent = -143, PdfStandardFontMetricsFactory.zapfDingbatsName = "ZapfDingbats", 
        PdfStandardFontMetricsFactory.arialWidth = [ 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722, 500, 500, 500, 334, 260, 334, 584, 0, 556, 0, 222, 556, 333, 1e3, 556, 556, 333, 1e3, 667, 333, 1e3, 0, 611, 0, 0, 222, 222, 333, 333, 350, 556, 1e3, 333, 1e3, 500, 333, 944, 0, 500, 667, 0, 333, 556, 556, 556, 556, 260, 556, 333, 737, 370, 556, 584, 0, 737, 333, 400, 584, 333, 333, 333, 556, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556, 556, 584, 611, 556, 556, 556, 556, 500, 556, 500 ], 
        PdfStandardFontMetricsFactory.arialBoldWidth = [ 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778, 556, 556, 500, 389, 280, 389, 584, 0, 556, 0, 278, 556, 500, 1e3, 556, 556, 333, 1e3, 667, 333, 1e3, 0, 611, 0, 0, 278, 278, 500, 500, 350, 556, 1e3, 333, 1e3, 556, 333, 944, 0, 500, 667, 0, 333, 556, 556, 556, 556, 280, 556, 333, 737, 370, 556, 584, 0, 737, 333, 400, 584, 333, 333, 333, 611, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611, 611, 584, 611, 611, 611, 611, 611, 556, 611, 556 ], 
        PdfStandardFontMetricsFactory.fixedWidth
        PdfStandardFontMetricsFactory.timesRomanWidth = [ 250, 333, 408, 500, 500, 833, 778, 180, 333, 333, 500, 564, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 564, 564, 564, 444, 921, 722, 667, 667, 722, 611, 556, 722, 722, 333, 389, 722, 611, 889, 722, 722, 556, 722, 667, 556, 611, 722, 722, 944, 722, 722, 611, 333, 278, 333, 469, 500, 333, 444, 500, 444, 500, 444, 333, 500, 500, 278, 278, 500, 278, 778, 500, 500, 500, 500, 333, 389, 278, 500, 500, 722, 500, 500, 444, 480, 200, 480, 541, 0, 500, 0, 333, 500, 444, 1e3, 500, 500, 333, 1e3, 556, 333, 889, 0, 611, 0, 0, 333, 333, 444, 444, 350, 500, 1e3, 333, 980, 389, 333, 722, 0, 444, 722, 0, 333, 500, 500, 500, 500, 200, 500, 333, 760, 276, 500, 564, 0, 760, 333, 400, 564, 300, 300, 333, 500, 453, 250, 333, 300, 310, 500, 750, 750, 750, 444, 722, 722, 722, 722, 722, 722, 889, 667, 611, 611, 611, 611, 333, 333, 333, 333, 722, 722, 722, 722, 722, 722, 722, 564, 722, 722, 722, 722, 722, 722, 556, 500, 444, 444, 444, 444, 444, 444, 667, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 500, 500, 500, 500, 500, 500, 564, 500, 500, 500, 500, 500, 500, 500, 500 ], 
        PdfStandardFontMetricsFactory.timesRomanBoldWidth = [ 250, 333, 555, 500, 500, 1e3, 833, 278, 333, 333, 500, 570, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570, 570, 500, 930, 722, 667, 722, 722, 667, 611, 778, 778, 389, 500, 778, 667, 944, 722, 778, 611, 778, 722, 556, 667, 722, 722, 1e3, 722, 722, 667, 333, 278, 333, 581, 500, 333, 500, 556, 444, 556, 444, 333, 500, 556, 278, 333, 556, 278, 833, 556, 500, 556, 556, 444, 389, 333, 556, 500, 722, 500, 500, 444, 394, 220, 394, 520, 0, 500, 0, 333, 500, 500, 1e3, 500, 500, 333, 1e3, 556, 333, 1e3, 0, 667, 0, 0, 333, 333, 500, 500, 350, 500, 1e3, 333, 1e3, 389, 333, 722, 0, 444, 722, 0, 333, 500, 500, 500, 500, 220, 500, 333, 747, 300, 500, 570, 0, 747, 333, 400, 570, 300, 300, 333, 556, 540, 250, 333, 300, 330, 500, 750, 750, 750, 500, 722, 722, 722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 389, 389, 389, 389, 722, 722, 778, 778, 778, 778, 778, 570, 778, 722, 722, 722, 722, 722, 611, 556, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 500, 556, 500 ], 
        PdfStandardFontMetricsFactory.timesRomanItalicWidth = [ 250, 333, 420, 500, 500, 833, 778, 214, 333, 333, 500, 675, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 675, 675, 675, 500, 920, 611, 611, 667, 722, 611, 611, 722, 722, 333, 444, 667, 556, 833, 667, 722, 611, 722, 611, 500, 556, 722, 611, 833, 611, 556, 556, 389, 278, 389, 422, 500, 333, 500, 500, 444, 500, 444, 278, 500, 500, 278, 278, 444, 278, 722, 500, 500, 500, 500, 389, 389, 278, 500, 444, 667, 444, 444, 389, 400, 275, 400, 541, 0, 500, 0, 333, 500, 556, 889, 500, 500, 333, 1e3, 500, 333, 944, 0, 556, 0, 0, 333, 333, 556, 556, 350, 500, 889, 333, 980, 389, 333, 667, 0, 389, 556, 0, 389, 500, 500, 500, 500, 275, 500, 333, 760, 276, 500, 675, 0, 760, 333, 400, 675, 300, 300, 333, 500, 523, 250, 333, 300, 310, 500, 750, 750, 750, 500, 611, 611, 611, 611, 611, 611, 889, 667, 611, 611, 611, 611, 333, 333, 333, 333, 722, 667, 722, 722, 722, 722, 722, 675, 722, 722, 722, 722, 722, 556, 611, 500, 500, 500, 500, 500, 500, 500, 667, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 500, 500, 500, 500, 500, 500, 675, 500, 500, 500, 500, 500, 444, 500, 444 ], 
        PdfStandardFontMetricsFactory.timesRomanBoldItalicWidths = [ 250, 389, 555, 500, 500, 833, 778, 278, 333, 333, 500, 570, 250, 333, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 333, 333, 570, 570, 570, 500, 832, 667, 667, 667, 722, 667, 667, 722, 778, 389, 500, 667, 611, 889, 722, 722, 611, 722, 667, 556, 611, 722, 667, 889, 667, 611, 611, 333, 278, 333, 570, 500, 333, 500, 500, 444, 500, 444, 333, 500, 556, 278, 278, 500, 278, 778, 556, 500, 500, 500, 389, 389, 278, 556, 444, 667, 500, 444, 389, 348, 220, 348, 570, 0, 500, 0, 333, 500, 500, 1e3, 500, 500, 333, 1e3, 556, 333, 944, 0, 611, 0, 0, 333, 333, 500, 500, 350, 500, 1e3, 333, 1e3, 389, 333, 722, 0, 389, 611, 0, 389, 500, 500, 500, 500, 220, 500, 333, 747, 266, 500, 606, 0, 747, 333, 400, 570, 300, 300, 333, 576, 500, 250, 333, 300, 300, 500, 750, 750, 750, 500, 667, 667, 667, 667, 667, 667, 944, 667, 667, 667, 667, 667, 389, 389, 389, 389, 722, 722, 722, 722, 722, 722, 722, 570, 722, 722, 722, 722, 722, 611, 611, 500, 500, 500, 500, 500, 500, 500, 722, 444, 444, 444, 444, 444, 278, 278, 278, 278, 500, 556, 500, 500, 500, 500, 500, 570, 500, 556, 556, 556, 556, 444, 500, 444 ], 
        PdfStandardFontMetricsFactory.symbolWidth = [ 250, 333, 713, 500, 549, 833, 778, 439, 333, 333, 500, 549, 250, 549, 250, 278, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 278, 278, 549, 549, 549, 444, 549, 722, 667, 722, 612, 611, 763, 603, 722, 333, 631, 722, 686, 889, 722, 722, 768, 741, 556, 592, 611, 690, 439, 768, 645, 795, 611, 333, 863, 333, 658, 500, 500, 631, 549, 549, 494, 439, 521, 411, 603, 329, 603, 549, 549, 576, 521, 549, 549, 521, 549, 603, 439, 576, 713, 686, 493, 686, 494, 480, 200, 480, 549, 750, 620, 247, 549, 167, 713, 500, 753, 753, 753, 753, 1042, 987, 603, 987, 603, 400, 549, 411, 549, 549, 713, 494, 460, 549, 549, 549, 549, 1e3, 603, 1e3, 658, 823, 686, 795, 987, 768, 768, 823, 768, 768, 713, 713, 713, 713, 713, 713, 713, 768, 713, 790, 790, 890, 823, 549, 250, 713, 603, 603, 1042, 987, 603, 987, 603, 494, 329, 790, 790, 786, 713, 384, 384, 384, 384, 384, 384, 494, 494, 494, 494, 329, 274, 686, 686, 686, 384, 384, 384, 384, 384, 384, 494, 494, 494, -1 ], 
        PdfStandardFontMetricsFactory.zapfDingbatsWidth = [ 278, 974, 961, 974, 980, 719, 789, 790, 791, 690, 960, 939, 549, 855, 911, 933, 911, 945, 974, 755, 846, 762, 761, 571, 677, 763, 760, 759, 754, 494, 552, 537, 577, 692, 786, 788, 788, 790, 793, 794, 816, 823, 789, 841, 823, 833, 816, 831, 923, 744, 723, 749, 790, 792, 695, 776, 768, 792, 759, 707, 708, 682, 701, 826, 815, 789, 789, 707, 687, 696, 689, 786, 787, 713, 791, 785, 791, 873, 761, 762, 762, 759, 759, 892, 892, 788, 784, 438, 138, 277, 415, 392, 392, 668, 668, 390, 390, 317, 317, 276, 276, 509, 509, 410, 410, 234, 234, 334, 334, 732, 544, 544, 910, 667, 760, 760, 776, 595, 694, 626, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 788, 894, 838, 1016, 458, 748, 924, 748, 918, 927, 928, 928, 834, 873, 828, 924, 924, 917, 930, 931, 463, 883, 836, 836, 867, 867, 696, 696, 874, 874, 760, 946, 771, 865, 771, 888, 967, 888, 831, 873, 927, 970, 918 ], 
        PdfStandardFontMetricsFactory;
    }(), __extends$76 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfStandardFont = function(_super) {
        function PdfStandardFont(fontFamilyPrototype, size, style) {
            var _this = _super.call(this, size, style) || this;
            return _this.dictionaryProperties = new DictionaryProperties(), _this.encodings = [ "Unknown", "StandardEncoding", "MacRomanEncoding", "MacExpertEncoding", "WinAnsiEncoding", "PDFDocEncoding", "IdentityH" ], 
            "number" == typeof fontFamilyPrototype && void 0 === style ? _this.constructor(fontFamilyPrototype, size, PdfFontStyle.Regular) : "number" == typeof fontFamilyPrototype && void 0 !== style ? ((_this = _super.call(this, size, style) || this).pdfFontFamily = fontFamilyPrototype, 
            _this.checkStyle(), _this.initializeInternals()) : fontFamilyPrototype instanceof PdfStandardFont && void 0 === style ? _this.constructor(fontFamilyPrototype.fontFamily, size, fontFamilyPrototype.style) : fontFamilyPrototype instanceof PdfStandardFont && void 0 !== style && _this.constructor(fontFamilyPrototype.fontFamily, size, style), 
            _this;
        }
        return __extends$76(PdfStandardFont, _super), Object.defineProperty(PdfStandardFont.prototype, "fontFamily", {
            get: function() {
                return this.pdfFontFamily;
            },
            enumerable: !0,
            configurable: !0
        }), PdfStandardFont.prototype.checkStyle = function() {
            if (this.fontFamily === PdfFontFamily.Symbol || this.fontFamily === PdfFontFamily.ZapfDingbats) {
                var style = this.style;
                style &= ~(PdfFontStyle.Bold | PdfFontStyle.Italic), this.setStyle(style);
            }
        }, PdfStandardFont.prototype.getLineWidth = function(line, format) {
            if (null == line) throw new Error("ArgumentNullException:line");
            for (var width = 0, i = (this.name, 0), len = (line = PdfStandardFont.convert(line)).length; i < len; i++) {
                var ch = line[i];
                width += this.getCharWidthInternal(ch, format);
            }
            var size = this.metrics.getSize(format);
            return width *= PdfFont.charSizeMultiplier * size, width = this.applyFormatSettings(line, format, width);
        }, PdfStandardFont.prototype.equalsToFont = function(font) {
            var equal = !1, stFont = font;
            if (null != stFont) {
                var fontFamilyEqual = this.fontFamily === stFont.fontFamily, lineReducer = ~(PdfFontStyle.Underline | PdfFontStyle.Strikeout), styleEqual = (this.style & lineReducer) == (stFont.style & lineReducer);
                equal = fontFamilyEqual && styleEqual;
            }
            return equal;
        }, PdfStandardFont.prototype.initializeInternals = function() {
            PdfDocument.cache.search(this);
            var internals = null, metrics = PdfStandardFontMetricsFactory.getMetrics(this.pdfFontFamily, this.style, this.size);
            this.metrics = metrics, internals = this.createInternals(), this.setInternals(internals);
        }, PdfStandardFont.prototype.createInternals = function() {
            var dictionary = new PdfDictionary();
            if (dictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.font)), 
            dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.type1)), 
            dictionary.items.setValue(this.dictionaryProperties.baseFont, new PdfName(this.metrics.postScriptName)), 
            this.fontFamily !== PdfFontFamily.Symbol && this.fontFamily !== PdfFontFamily.ZapfDingbats) {
                var encoding = this.encodings[FontEncoding.WinAnsiEncoding];
                dictionary.items.setValue(this.dictionaryProperties.encoding, new PdfName(encoding));
            }
            return dictionary;
        }, PdfStandardFont.prototype.getCharWidthInternal = function(charCode, format) {
            var code = 0;
            code = charCode.charCodeAt(0), "0" !== this.name && "1" !== this.name && "2" !== this.name && "3" !== this.name && "4" !== this.name || (code -= PdfStandardFont.charOffset), 
            code = code >= 0 && 128 !== code ? code : 0;
            return this.metrics.widthTable.items(code);
        }, PdfStandardFont.convert = function(text) {
            return text;
        }, PdfStandardFont.charOffset = 32, PdfStandardFont;
    }(PdfFont), PdfAnnotation = function() {
        function PdfAnnotation(arg1) {
            this.dictionaryProperties = new DictionaryProperties(), this.pdfColor = new PdfColor(255, 255, 255), 
            this.rectangle = new RectangleF(0, 0, 0, 0), this.pdfPage = null, this.textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0)), 
            this.textFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10), this.format = new PdfStringFormat(PdfTextAlignment.Left), 
            this.content = "", this.pdfDictionary = new PdfDictionary(), this.internalColor = new PdfColor(), 
            this.darkness = 1, void 0 === arg1 ? this.initialize() : (this.initialize(), this.bounds = arg1);
        }
        return Object.defineProperty(PdfAnnotation.prototype, "color", {
            get: function() {
                return this.pdfColor;
            },
            set: function(value) {
                this.pdfColor = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "innerColor", {
            get: function() {
                return this.internalColor;
            },
            set: function(value) {
                this.internalColor = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "bounds", {
            get: function() {
                return this.rectangle;
            },
            set: function(value) {
                this.rectangle = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "page", {
            get: function() {
                return this.pdfPage;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "font", {
            get: function() {
                return this.textFont;
            },
            set: function(value) {
                this.textFont = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "stringFormat", {
            get: function() {
                return this.format;
            },
            set: function(value) {
                this.format = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "brush", {
            get: function() {
                return this.textBrush;
            },
            set: function(value) {
                this.textBrush = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "text", {
            get: function() {
                return this.content;
            },
            set: function(value) {
                this.content = value, this.dictionary.items.setValue(this.dictionaryProperties.contents, new PdfString(this.content));
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfAnnotation.prototype, "dictionary", {
            get: function() {
                return this.pdfDictionary;
            },
            set: function(value) {
                this.pdfDictionary = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAnnotation.prototype.initialize = function() {
            this.pdfDictionary.annotationBeginSave = new SaveAnnotationEventHandler(this), this.pdfDictionary.items.setValue(this.dictionaryProperties.type, new PdfName(this.dictionaryProperties.annot));
        }, PdfAnnotation.prototype.setPage = function(page) {
            this.pdfPage = page, this.pdfDictionary.items.setValue(this.dictionaryProperties.p, new PdfReferenceHolder(this.pdfPage));
        }, PdfAnnotation.prototype.beginSave = function() {
            this.save();
        }, PdfAnnotation.prototype.save = function() {
            var nativeRectangle = new RectangleF(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height), section = this.pdfPage.section, initialHeight = nativeRectangle.height, tempLoacation = section.pointToNativePdf(this.page, new PointF(nativeRectangle.x, nativeRectangle.y));
            nativeRectangle.x = tempLoacation.x, nativeRectangle.width = tempLoacation.x + nativeRectangle.width, 
            nativeRectangle.y = tempLoacation.y - this.page.document.pageSettings.margins.top, 
            nativeRectangle.height = nativeRectangle.y - initialHeight, this.pdfDictionary.items.setValue(this.dictionaryProperties.rect, PdfArray.fromRectangle(nativeRectangle)), 
            this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(this.darkness));
        }, Object.defineProperty(PdfAnnotation.prototype, "element", {
            get: function() {
                return this.pdfDictionary;
            },
            enumerable: !0,
            configurable: !0
        }), PdfAnnotation;
    }(), __extends$74 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfLinkAnnotation = function(_super) {
        function PdfLinkAnnotation(rectangle) {
            return void 0 === rectangle ? _super.call(this) || this : _super.call(this, rectangle) || this;
        }
        return __extends$74(PdfLinkAnnotation, _super), PdfLinkAnnotation.prototype.initialize = function() {
            _super.prototype.initialize.call(this), this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));
        }, PdfLinkAnnotation;
    }(PdfAnnotation), __extends$73 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfActionLinkAnnotation = function(_super) {
        function PdfActionLinkAnnotation(rectangle) {
            var _this = _super.call(this, rectangle) || this;
            return _this.pdfAction = null, _this;
        }
        return __extends$73(PdfActionLinkAnnotation, _super), PdfActionLinkAnnotation.prototype.getSetAction = function(value) {
            if (void 0 === value) return this.pdfAction;
            this.pdfAction = value;
        }, PdfActionLinkAnnotation;
    }(PdfLinkAnnotation), __extends$86 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfDocumentLinkAnnotation = function(_super) {
        function PdfDocumentLinkAnnotation(rectangle, destination) {
            var _this = _super.call(this, rectangle) || this;
            return _this.pdfDestination = null, void 0 !== destination && (_this.destination = destination), 
            _this;
        }
        return __extends$86(PdfDocumentLinkAnnotation, _super), Object.defineProperty(PdfDocumentLinkAnnotation.prototype, "destination", {
            get: function() {
                return this.pdfDestination;
            },
            set: function(value) {
                this.pdfDestination = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfDocumentLinkAnnotation.prototype.save = function() {
            _super.prototype.save.call(this), null != this.pdfDestination && this.dictionary.items.setValue(this.dictionaryProperties.dest, this.pdfDestination.element);
        }, PdfDocumentLinkAnnotation.prototype.clone = function() {
            var annot = new PdfDocumentLinkAnnotation(this.bounds, this.destination);
            return annot.color = this.color, annot.brush = this.brush, annot.destination = this.destination, 
            annot.font = this.font, annot;
        }, PdfDocumentLinkAnnotation;
    }(PdfLinkAnnotation), ElementLayouter = function() {
        function ElementLayouter(element) {
            this.layoutElement = element;
        }
        return Object.defineProperty(ElementLayouter.prototype, "elements", {
            get: function() {
                return this.layoutElement;
            },
            enumerable: !0,
            configurable: !0
        }), ElementLayouter.prototype.getElement = function() {
            return this.layoutElement;
        }, ElementLayouter.prototype.layout = function(param) {
            return this.layoutInternal(param);
        }, ElementLayouter.prototype.Layouter = function(param) {
            return this.layoutInternal(param);
        }, ElementLayouter.prototype.getNextPage = function(currentPage) {
            return currentPage.section.add();
        }, ElementLayouter;
    }(), PdfLayoutFormat = function() {
        function PdfLayoutFormat(baseFormat) {
            void 0 === baseFormat || (this.break = baseFormat.break, this.layout = baseFormat.layout, 
            this.paginateBounds = baseFormat.paginateBounds, this.boundsSet = baseFormat.usePaginateBounds);
        }
        return Object.defineProperty(PdfLayoutFormat.prototype, "layout", {
            get: function() {
                return this.layoutType;
            },
            set: function(value) {
                this.layoutType = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfLayoutFormat.prototype, "break", {
            get: function() {
                return this.breakType;
            },
            set: function(value) {
                this.breakType = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfLayoutFormat.prototype, "paginateBounds", {
            get: function() {
                return void 0 === this.layoutPaginateBounds && null == this.layoutPaginateBounds && (this.layoutPaginateBounds = new RectangleF(0, 0, 0, 0)), 
                this.layoutPaginateBounds;
            },
            set: function(value) {
                this.layoutPaginateBounds = value, this.boundsSet = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfLayoutFormat.prototype, "usePaginateBounds", {
            get: function() {
                return this.boundsSet;
            },
            enumerable: !0,
            configurable: !0
        }), PdfLayoutFormat;
    }(), PdfLayoutParams = function() {
        function PdfLayoutParams() {}
        return Object.defineProperty(PdfLayoutParams.prototype, "page", {
            get: function() {
                return this.pdfPage;
            },
            set: function(value) {
                this.pdfPage = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfLayoutParams.prototype, "bounds", {
            get: function() {
                return new RectangleF(this.layoutBounds.x, this.layoutBounds.y, this.layoutBounds.width, this.layoutBounds.height);
            },
            set: function(value) {
                this.layoutBounds = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfLayoutParams.prototype, "format", {
            get: function() {
                return this.layoutFormat;
            },
            set: function(value) {
                this.layoutFormat = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfLayoutParams;
    }(), PdfLayoutResult = function() {
        function PdfLayoutResult(page, bounds) {
            this.pdfPage = page, this.layoutBounds = bounds;
        }
        return Object.defineProperty(PdfLayoutResult.prototype, "page", {
            get: function() {
                return this.pdfPage;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfLayoutResult.prototype, "bounds", {
            get: function() {
                return this.layoutBounds;
            },
            enumerable: !0,
            configurable: !0
        }), PdfLayoutResult;
    }(), PdfLayoutElement = function() {
        function PdfLayoutElement() {}
        return Object.defineProperty(PdfLayoutElement.prototype, "raiseBeginPageLayout", {
            get: function() {
                return void 0 !== this.beginPageLayout;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfLayoutElement.prototype, "raiseEndPageLayout", {
            get: function() {
                return void 0 !== this.endPageLayout;
            },
            enumerable: !0,
            configurable: !0
        }), PdfLayoutElement.prototype.onBeginPageLayout = function(args) {
            this.beginPageLayout && this.beginPageLayout(this, args);
        }, PdfLayoutElement.prototype.onEndPageLayout = function(args) {
            this.endPageLayout && this.endPageLayout(this, args);
        }, PdfLayoutElement.prototype.drawHelper = function(arg2, arg3, arg4, arg5) {
            if (arg3 instanceof PointF && void 0 === arg3.width && void 0 === arg4) return this.drawHelper(arg2, arg3.x, arg3.y);
            if ("number" == typeof arg3 && "number" == typeof arg4 && void 0 === arg5) return this.drawHelper(arg2, arg3, arg4, null);
            if (arg3 instanceof RectangleF && void 0 !== arg3.width && void 0 === arg4) return this.drawHelper(arg2, arg3, null);
            if (arg3 instanceof PointF && void 0 === arg3.width && arg4 instanceof PdfLayoutFormat) return this.drawHelper(arg2, arg3.x, arg3.y, arg4);
            if ("number" == typeof arg3 && "number" == typeof arg4 && (arg5 instanceof PdfLayoutFormat || null == arg5)) {
                var width = arg2.graphics.clientSize.width - arg3, layoutRectangle = new RectangleF(arg3, arg4, width, 0);
                return this.drawHelper(arg2, layoutRectangle, arg5);
            }
            if (arg3 instanceof RectangleF && void 0 !== arg3.width && "boolean" == typeof arg4) return this.bEmbedFonts = arg4, 
            this.drawHelper(arg2, arg3, null);
            var param = new PdfLayoutParams(), temparg3 = arg3, temparg4 = arg4;
            param.page = arg2, param.bounds = temparg3, param.format = null != temparg4 ? temparg4 : new PdfLayoutFormat();
            return this.layout(param);
        }, PdfLayoutElement;
    }();
    !function(PdfLayoutType) {
        PdfLayoutType[PdfLayoutType.Paginate = 0] = "Paginate", PdfLayoutType[PdfLayoutType.OnePage = 1] = "OnePage";
    }(PdfLayoutType || (PdfLayoutType = {}));
    var PdfLayoutBreakType;
    !function(PdfLayoutBreakType) {
        PdfLayoutBreakType[PdfLayoutBreakType.FitPage = 0] = "FitPage", PdfLayoutBreakType[PdfLayoutBreakType.FitElement = 1] = "FitElement", 
        PdfLayoutBreakType[PdfLayoutBreakType.FitColumnsToPage = 2] = "FitColumnsToPage";
    }(PdfLayoutBreakType || (PdfLayoutBreakType = {}));
    var PdfDestinationMode, __extends$89 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), TextLayouter = function(_super) {
        function TextLayouter(element) {
            return _super.call(this, element) || this;
        }
        return __extends$89(TextLayouter, _super), Object.defineProperty(TextLayouter.prototype, "element", {
            get: function() {
                return _super.prototype.getElement.call(this);
            },
            enumerable: !0,
            configurable: !0
        }), TextLayouter.prototype.layoutInternal = function(param) {
            this.format = null !== this.element.stringFormat && void 0 !== this.element.stringFormat ? this.element.stringFormat : null;
            var currentPage = param.page, currentBounds = param.bounds, text = this.element.value, result = null, pageResult = new TextPageLayoutResult();
            for (pageResult.page = currentPage, pageResult.remainder = text; ;) {
                pageResult = this.layoutOnPage(text, currentPage, currentBounds, param), result = this.getLayoutResult(pageResult);
                break;
            }
            return result;
        }, TextLayouter.prototype.getLayoutResult = function(pageResult) {
            return new PdfTextLayoutResult(pageResult.page, pageResult.bounds, pageResult.remainder, pageResult.lastLineBounds);
        }, TextLayouter.prototype.layoutOnPage = function(text, currentPage, currentBounds, param) {
            var result = new TextPageLayoutResult();
            result.remainder = text, result.page = currentPage, currentBounds = this.checkCorrectBounds(currentPage, currentBounds);
            var stringResult = new PdfStringLayouter().layout(text, this.element.font, this.format, currentBounds, currentPage.getClientSize().height, !1, new SizeF(0, 0)), textFinished = null == stringResult.remainder, graphics = (param.format.break === PdfLayoutBreakType.FitElement || stringResult.empty, 
            currentPage.graphics), brush = this.element.getBrush();
            this.element instanceof PdfTextWebLink && (brush.color = new PdfColor(0, 0, 255)), 
            graphics.drawStringLayoutResult(stringResult, this.element.font, this.element.pen, brush, currentBounds, this.format);
            stringResult.lines[stringResult.lineCount - 1];
            return result.lastLineBounds = graphics.getLineBounds(stringResult.lineCount - 1, stringResult, this.element.font, currentBounds, this.format), 
            result.bounds = this.getTextPageBounds(currentPage, currentBounds, stringResult), 
            result.remainder = stringResult.remainder, result.end = textFinished, result;
        }, TextLayouter.prototype.checkCorrectBounds = function(currentPage, currentBounds) {
            var pageSize = currentPage.graphics.clientSize;
            return currentBounds.height = currentBounds.height > 0 ? currentBounds.height : pageSize.height - currentBounds.y, 
            currentBounds;
        }, TextLayouter.prototype.getTextPageBounds = function(currentPage, currentBounds, stringResult) {
            var textSize = stringResult.actualSize, x = currentBounds.x, y = currentBounds.y, width = currentBounds.width > 0 ? currentBounds.width : textSize.width, height = textSize.height;
            x = currentPage.graphics.checkCorrectLayoutRectangle(textSize, currentBounds.x, currentBounds.y, this.format).x;
            var verticalShift = currentPage.graphics.getTextVerticalAlignShift(textSize.height, currentBounds.height, this.format);
            return new RectangleF(x, y += verticalShift, width, height);
        }, TextLayouter;
    }(ElementLayouter), TextPageLayoutResult = function() {
        return function() {};
    }(), PdfTextLayoutResult = function(_super) {
        function PdfTextLayoutResult(page, bounds, remainder, lastLineBounds) {
            var _this = _super.call(this, page, bounds) || this;
            return _this.remainderText = remainder, _this.lastLineTextBounds = lastLineBounds, 
            _this;
        }
        return __extends$89(PdfTextLayoutResult, _super), Object.defineProperty(PdfTextLayoutResult.prototype, "remainder", {
            get: function() {
                return this.remainderText;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTextLayoutResult.prototype, "lastLineBounds", {
            get: function() {
                return this.lastLineTextBounds;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTextLayoutResult;
    }(PdfLayoutResult), __extends$88 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfTextElement = function(_super) {
        function PdfTextElement(arg1, arg2, arg3, arg4, arg5) {
            var _this = _super.call(this) || this;
            return _this.content = "", _this.elementValue = "", _this.hasPointOverload = !1, 
            _this.isPdfTextElement = !1, void 0 === arg1 || ("string" == typeof arg1 && void 0 === arg2 ? ((_this = _super.call(this) || this).content = arg1, 
            _this.elementValue = arg1) : "string" == typeof arg1 && arg2 instanceof PdfFont && void 0 === arg3 ? ((_this = _super.call(this) || this).content = arg1, 
            _this.elementValue = arg1, _this.pdfFont = arg2) : "string" == typeof arg1 && arg2 instanceof PdfFont && arg3 instanceof PdfPen && void 0 === arg4 ? ((_this = _super.call(this) || this).content = arg1, 
            _this.elementValue = arg1, _this.pdfFont = arg2, _this.pdfPen = arg3) : "string" == typeof arg1 && arg2 instanceof PdfFont && arg3 instanceof PdfBrush && void 0 === arg4 ? ((_this = _super.call(this) || this).content = arg1, 
            _this.elementValue = arg1, _this.pdfFont = arg2, _this.pdfBrush = arg3) : ((_this = _super.call(this) || this).content = arg1, 
            _this.elementValue = arg1, _this.pdfFont = arg2, _this.pdfPen = arg3, _this.pdfBrush = arg4, 
            _this.format = arg5)), _this;
        }
        return __extends$88(PdfTextElement, _super), Object.defineProperty(PdfTextElement.prototype, "text", {
            get: function() {
                return this.content;
            },
            set: function(value) {
                this.elementValue = value, this.content = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTextElement.prototype, "value", {
            get: function() {
                return this.elementValue;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTextElement.prototype, "pen", {
            get: function() {
                return this.pdfPen;
            },
            set: function(value) {
                this.pdfPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTextElement.prototype, "brush", {
            get: function() {
                return this.pdfBrush;
            },
            set: function(value) {
                this.pdfBrush = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTextElement.prototype, "font", {
            get: function() {
                return this.pdfFont;
            },
            set: function(value) {
                this.pdfFont = value, this.pdfFont instanceof PdfStandardFont && null != this.content ? this.elementValue = PdfStandardFont.convert(this.content) : this.elementValue = this.content;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTextElement.prototype, "stringFormat", {
            get: function() {
                return this.format;
            },
            set: function(value) {
                this.format = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTextElement.prototype.getBrush = function() {
            return null == this.pdfBrush || void 0 === this.pdfBrush ? new PdfSolidBrush(new PdfColor(0, 0, 0)) : this.pdfBrush;
        }, PdfTextElement.prototype.layout = function(param) {
            return new TextLayouter(this).layout(param);
        }, PdfTextElement.prototype.drawText = function(arg2, arg3, arg4, arg5) {
            if (arg3 instanceof PointF && void 0 === arg3.width && void 0 === arg4) return this.hasPointOverload = !0, 
            this.drawText(arg2, arg3.x, arg3.y);
            if ("number" == typeof arg3 && "number" == typeof arg4 && void 0 === arg5) return this.hasPointOverload = !0, 
            this.drawText(arg2, arg3, arg4, null);
            if (arg3 instanceof RectangleF && void 0 !== arg3.width && void 0 === arg4) return this.drawText(arg2, arg3, null);
            if (arg3 instanceof PointF && void 0 === arg3.width && arg4 instanceof PdfLayoutFormat) return this.hasPointOverload = !0, 
            this.drawText(arg2, arg3.x, arg3.y, arg4);
            if ("number" == typeof arg3 && "number" == typeof arg4 && (arg5 instanceof PdfLayoutFormat || null == arg5)) {
                this.hasPointOverload = !0;
                var width = arg2.graphics.clientSize.width - arg3, layoutRectangle = new RectangleF(arg3, arg4, width, 0);
                return this.drawText(arg2, layoutRectangle, arg5);
            }
            if (arg3 instanceof RectangleF && void 0 !== arg3.width && "boolean" == typeof arg4) return this.drawText(arg2, arg3, null);
            var layout = new PdfStringLayouter();
            if (this.hasPointOverload) {
                var stringLayoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.graphics.clientSize.width - arg3.x, 0), !0, arg2.graphics.clientSize), layoutResult = void 0, temparg3 = arg3, temparg4 = arg4;
                if ((param = new PdfLayoutParams()).page = arg2, param.bounds = temparg3, param.format = null != temparg4 ? temparg4 : new PdfLayoutFormat(), 
                stringLayoutResult.lines.length > 1) {
                    if (this.text = stringLayoutResult.layoutLines[0].text, param.bounds.y <= param.page.graphics.clientSize.height) {
                        var previousPosition = new PointF(param.bounds.x, param.bounds.y);
                        layoutResult = this.layout(param);
                        for (var bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, arg2.graphics.clientSize.width, stringLayoutResult.lineHeight), i = 1; i < stringLayoutResult.lines.length; i++) if (param.page = layoutResult.page, 
                        param.bounds = new RectangleF(new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height)), 
                        this.text = stringLayoutResult.layoutLines[i].text, bounds.y + stringLayoutResult.lineHeight > layoutResult.page.graphics.clientSize.height && (param.page = param.page.graphics.getNextPage(), 
                        bounds = previousPosition.y > layoutResult.page.graphics.clientSize.height - layoutResult.bounds.height ? new RectangleF(0, layoutResult.bounds.height, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight) : new RectangleF(0, 0, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight), 
                        param.bounds = bounds), layoutResult = this.layout(param), i !== stringLayoutResult.lines.length - 1) bounds = new RectangleF(0, layoutResult.bounds.y + stringLayoutResult.lineHeight, layoutResult.page.graphics.clientSize.width, stringLayoutResult.lineHeight); else {
                            var lineWidth = this.font.measureString(this.text, this.format).width;
                            layoutResult = this.calculateResultBounds(layoutResult, lineWidth, layoutResult.page.graphics.clientSize.width, 0);
                        }
                    }
                    return layoutResult;
                }
                var lineSize = this.font.measureString(this.text, this.format);
                return param.bounds.y <= param.page.graphics.clientSize.height && (layoutResult = this.layout(param), 
                layoutResult = this.calculateResultBounds(layoutResult, lineSize.width, layoutResult.page.graphics.clientSize.width, 0)), 
                layoutResult;
            }
            layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg3.width, 0), !1, arg2.graphics.clientSize);
            var param, result = void 0;
            temparg3 = arg3, temparg4 = arg4;
            if ((param = new PdfLayoutParams()).page = arg2, param.bounds = temparg3, param.format = null != temparg4 ? temparg4 : new PdfLayoutFormat(), 
            layoutResult.lines.length > 1) {
                if (this.text = layoutResult.layoutLines[0].text, param.bounds.y <= param.page.graphics.clientSize.height) {
                    previousPosition = new PointF(param.bounds.x, param.bounds.y);
                    result = this.layout(param);
                    for (bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight), 
                    i = 1; i < layoutResult.lines.length; i++) if (param.page = result.page, param.bounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height), 
                    this.text = layoutResult.layoutLines[i].text, bounds.y + layoutResult.lineHeight > result.page.graphics.clientSize.height && (param.page = param.page.graphics.getNextPage(), 
                    bounds = previousPosition.y > result.page.graphics.clientSize.height - result.bounds.height ? new RectangleF(temparg3.x, layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight) : new RectangleF(temparg3.x, 0, temparg3.width, layoutResult.lineHeight), 
                    param.bounds = bounds), result = this.layout(param), i !== layoutResult.lines.length - 1) bounds = new RectangleF(temparg3.x, result.bounds.y + layoutResult.lineHeight, temparg3.width, layoutResult.lineHeight); else {
                        lineWidth = this.font.measureString(this.text, this.format).width;
                        result = this.calculateResultBounds(result, lineWidth, temparg3.width, temparg3.x);
                    }
                }
                return result;
            }
            lineSize = this.font.measureString(this.text, this.format);
            return param.bounds.y <= param.page.graphics.clientSize.height && (result = this.layout(param), 
            result = this.calculateResultBounds(result, lineSize.width, temparg3.width, temparg3.x)), 
            result;
        }, PdfTextElement.prototype.calculateResultBounds = function(result, lineWidth, maximumWidth, startPosition) {
            return null != this.stringFormat && void 0 !== this.stringFormat && this.stringFormat.alignment === PdfTextAlignment.Center ? (result.bounds.x = startPosition + (maximumWidth - lineWidth) / 2, 
            result.bounds.width = lineWidth) : null != this.stringFormat && void 0 !== this.stringFormat && this.stringFormat.alignment === PdfTextAlignment.Right ? (result.bounds.x = startPosition + (maximumWidth - lineWidth), 
            result.bounds.width = lineWidth) : null != this.stringFormat && void 0 !== this.stringFormat && this.stringFormat.alignment === PdfTextAlignment.Justify ? (result.bounds.x = startPosition, 
            result.bounds.width = maximumWidth) : (result.bounds.width = startPosition, result.bounds.width = lineWidth), 
            result;
        }, PdfTextElement;
    }(PdfLayoutElement), __extends$90 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfUriAnnotation = function(_super) {
        function PdfUriAnnotation(rectangle, uri) {
            var _this = _super.call(this, rectangle) || this;
            return void 0 !== uri && (_this.uri = uri), _this;
        }
        return __extends$90(PdfUriAnnotation, _super), Object.defineProperty(PdfUriAnnotation.prototype, "uriAction", {
            get: function() {
                return void 0 === this.pdfUriAction && (this.pdfUriAction = new PdfUriAction()), 
                this.pdfUriAction;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfUriAnnotation.prototype, "uri", {
            get: function() {
                return this.uriAction.uri;
            },
            set: function(value) {
                this.uriAction.uri !== value && (this.uriAction.uri = value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfUriAnnotation.prototype, "action", {
            get: function() {
                return this.getSetAction();
            },
            set: function(value) {
                this.getSetAction(value), this.uriAction.next = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfUriAnnotation.prototype.initialize = function() {
            _super.prototype.initialize.call(this), this.dictionary.items.setValue(this.dictionaryProperties.subtype, new PdfName(this.dictionaryProperties.link));
            this.uriAction.element;
            this.dictionary.items.setValue(this.dictionaryProperties.a, this.uriAction.element);
        }, PdfUriAnnotation;
    }(PdfActionLinkAnnotation), __extends$87 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfTextWebLink = function(_super) {
        function PdfTextWebLink() {
            var _this = _super.call(this) || this;
            _this.uniformResourceLocator = "", _this.uriAnnotation = null, _this.recalculateBounds = !1, 
            _this.defaultBorder = new PdfArray();
            for (var i = 0; i < 3; i++) _this.defaultBorder.add(new PdfNumber(0));
            return _this;
        }
        return __extends$87(PdfTextWebLink, _super), Object.defineProperty(PdfTextWebLink.prototype, "url", {
            get: function() {
                return this.uniformResourceLocator;
            },
            set: function(value) {
                if (0 === value.length) throw new Error("ArgumentException : Url - string can not be empty");
                this.uniformResourceLocator = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTextWebLink.prototype.draw = function(arg1, arg2) {
            if (arg1 instanceof PdfPage) {
                var layout = new PdfStringLayouter(), previousFontStyle = this.font.style;
                if (arg2 instanceof PointF) {
                    this.recalculateBounds = !0, this.font.style = PdfFontStyle.Underline;
                    if (1 === (layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg1.graphics.clientSize.width - arg2.x, 0), !0, arg1.graphics.clientSize)).lines.length) {
                        var textSize = this.font.measureString(this.value), rect = new RectangleF(arg2, textSize);
                        rect = this.calculateBounds(rect, textSize.width, arg1.graphics.clientSize.width, arg2.x), 
                        this.uriAnnotation = new PdfUriAnnotation(rect, this.url), this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder), 
                        arg1.annotations.add(this.uriAnnotation);
                        var result = this.drawText(arg1, arg2);
                        return this.font.style = previousFontStyle, result;
                    }
                    result = this.drawMultipleLineWithPoint(layoutResult, arg1, arg2);
                    return this.font.style = previousFontStyle, result;
                }
                var layoutResult = layout.layout(this.value, this.font, this.stringFormat, new SizeF(arg2.width, 0), !1, new SizeF(0, 0));
                if (this.font.style = PdfFontStyle.Underline, 1 === layoutResult.lines.length) {
                    textSize = this.font.measureString(this.value), rect = new RectangleF(new PointF(arg2.x, arg2.y), textSize);
                    rect = this.calculateBounds(rect, textSize.width, arg2.width, arg2.x), this.uriAnnotation = new PdfUriAnnotation(rect, this.url), 
                    this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder), arg1.annotations.add(this.uriAnnotation);
                    var returnValue = this.drawText(arg1, arg2);
                    return this.font.style = previousFontStyle, returnValue;
                }
                returnValue = this.drawMultipleLineWithBounds(layoutResult, arg1, arg2);
                return this.font.style = previousFontStyle, returnValue;
            }
            var page = new PdfPage();
            return page = arg1.page, this.draw(page, arg2);
        }, PdfTextWebLink.prototype.drawMultipleLineWithPoint = function(result, page, location) {
            for (var layoutResult, i = 0; i < result.layoutLines.length; i++) {
                var size = this.font.measureString(result.lines[i].text), bounds = new RectangleF(location, size);
                if (0 !== i && (bounds.x = 0), this.text = result.lines[i].text, bounds.y + size.height > page.graphics.clientSize.height) {
                    if (0 === i) break;
                    page = page.graphics.getNextPage(), bounds = new RectangleF(0, 0, page.graphics.clientSize.width, size.height), 
                    location.y = 0;
                }
                bounds = this.calculateBounds(bounds, size.width, page.graphics.clientSize.width, bounds.x), 
                this.uriAnnotation = new PdfUriAnnotation(bounds, this.url), this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder), 
                page.annotations.add(this.uriAnnotation), layoutResult = 0 !== i ? this.drawText(page, new PointF(0, bounds.y)) : this.drawText(page, bounds.x, bounds.y), 
                location.y += size.height;
            }
            return layoutResult;
        }, PdfTextWebLink.prototype.drawMultipleLineWithBounds = function(result, page, bounds) {
            for (var layoutResult, i = 0; i < result.layoutLines.length; i++) {
                var size = this.font.measureString(result.lines[i].text), internalBounds = new RectangleF(new PointF(bounds.x, bounds.y), size);
                if (internalBounds = this.calculateBounds(internalBounds, size.width, bounds.width, bounds.x), 
                this.text = result.lines[i].text, bounds.y + size.height > page.graphics.clientSize.height) {
                    if (0 === i) break;
                    page = page.graphics.getNextPage(), bounds = new RectangleF(bounds.x, 0, bounds.width, size.height), 
                    internalBounds.y = 0;
                }
                this.uriAnnotation = new PdfUriAnnotation(internalBounds, this.url), this.uriAnnotation.dictionary.items.setValue("Border", this.defaultBorder), 
                page.annotations.add(this.uriAnnotation), layoutResult = this.drawText(page, bounds), 
                bounds.y += size.height;
            }
            return layoutResult;
        }, PdfTextWebLink.prototype.calculateBounds = function(currentBounds, lineWidth, maximumWidth, startPosition) {
            return null != this.stringFormat && void 0 !== this.stringFormat && this.stringFormat.alignment === PdfTextAlignment.Center ? (currentBounds.x = startPosition + (maximumWidth - lineWidth) / 2, 
            currentBounds.width = lineWidth) : null != this.stringFormat && void 0 !== this.stringFormat && this.stringFormat.alignment === PdfTextAlignment.Right ? (currentBounds.x = startPosition + (maximumWidth - lineWidth), 
            currentBounds.width = lineWidth) : null != this.stringFormat && void 0 !== this.stringFormat && this.stringFormat.alignment === PdfTextAlignment.Justify ? (currentBounds.x = startPosition, 
            currentBounds.width = maximumWidth) : (currentBounds.width = startPosition, currentBounds.width = lineWidth), 
            currentBounds;
        }, PdfTextWebLink;
    }(PdfTextElement), PdfNumbersConvertor = function() {
        function PdfNumbersConvertor() {}
        return PdfNumbersConvertor.convert = function(intArabic, numberStyle) {
            var result = "";
            switch (numberStyle) {
              case PdfNumberStyle.None:
                result = "";
                break;

              case PdfNumberStyle.Numeric:
                result = intArabic.toString();
                break;

              case PdfNumberStyle.LowerLatin:
                result = this.arabicToLetter(intArabic).toLowerCase();
                break;

              case PdfNumberStyle.LowerRoman:
                result = this.arabicToRoman(intArabic).toLowerCase();
                break;

              case PdfNumberStyle.UpperLatin:
                result = this.arabicToLetter(intArabic);
                break;

              case PdfNumberStyle.UpperRoman:
                result = this.arabicToRoman(intArabic);
            }
            return result;
        }, PdfNumbersConvertor.arabicToRoman = function(intArabic) {
            var retval = "";
            return retval += this.generateNumber(intArabic, 1e3, "M"), retval += this.generateNumber(intArabic, 900, "CM"), 
            retval += this.generateNumber(intArabic, 500, "D"), retval += this.generateNumber(intArabic, 400, "CD"), 
            retval += this.generateNumber(intArabic, 100, "C"), retval += this.generateNumber(intArabic, 90, "XC"), 
            retval += this.generateNumber(intArabic, 50, "L"), retval += this.generateNumber(intArabic, 40, "XL"), 
            retval += this.generateNumber(intArabic, 10, "X"), retval += this.generateNumber(intArabic, 9, "IX"), 
            retval += this.generateNumber(intArabic, 5, "V"), retval += this.generateNumber(intArabic, 4, "IV"), 
            (retval += this.generateNumber(intArabic, 1, "I")).toString();
        }, PdfNumbersConvertor.arabicToLetter = function(arabic) {
            for (var stack = this.convertToLetter(arabic), result = ""; stack.length > 0; ) {
                var num = stack.pop();
                result = this.appendChar(result, num);
            }
            return result.toString();
        }, PdfNumbersConvertor.generateNumber = function(value, magnitude, letter) {
            for (var numberstring = ""; value >= magnitude; ) value -= magnitude, numberstring += letter;
            return numberstring.toString();
        }, PdfNumbersConvertor.convertToLetter = function(arabic) {
            if (arabic <= 0) throw Error("ArgumentOutOfRangeException-arabic, Value can not be less 0");
            for (var stack = []; arabic > this.letterLimit; ) {
                var remainder = arabic % this.letterLimit;
                0 === remainder ? (arabic = arabic / this.letterLimit - 1, remainder = this.letterLimit) : arabic /= this.letterLimit, 
                stack.push(remainder);
            }
            return stack.push(arabic), stack;
        }, PdfNumbersConvertor.appendChar = function(builder, value) {
            return builder += String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);
        }, PdfNumbersConvertor.letterLimit = 26, PdfNumbersConvertor.acsiiStartIndex = 64, 
        PdfNumbersConvertor;
    }(), PdfTemplateValuePair = function() {
        function PdfTemplateValuePair(template, value) {
            this.pdfTemplate = null, this.content = "", void 0 === template || (this.template = template, 
            this.value = value);
        }
        return Object.defineProperty(PdfTemplateValuePair.prototype, "template", {
            get: function() {
                return this.pdfTemplate;
            },
            set: function(value) {
                this.pdfTemplate = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfTemplateValuePair.prototype, "value", {
            get: function() {
                return this.content;
            },
            set: function(value) {
                this.content = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTemplateValuePair;
    }(), __extends$92 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfMultipleValueField = function(_super) {
        function PdfMultipleValueField() {
            var _this = _super.call(this) || this;
            return _this.list = new TemporaryDictionary(), _this;
        }
        return __extends$92(PdfMultipleValueField, _super), PdfMultipleValueField.prototype.performDraw = function(graphics, location, scalingX, scalingY) {
            _super.prototype.performDrawHelper.call(this, graphics, location, scalingX, scalingY);
            var value = this.getValue(graphics), template = new PdfTemplate(this.getSize());
            this.list.setValue(graphics, new PdfTemplateValuePair(template, value));
            var size = this.getSize();
            template.graphics.drawString(value, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);
            var drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);
            graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY));
        }, PdfMultipleValueField;
    }(PdfAutomaticField), __extends$91 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfPageNumberField = function(_super) {
        function PdfPageNumberField(font, arg2) {
            var _this = _super.call(this) || this;
            return _this.internalNumberStyle = PdfNumberStyle.Numeric, void 0 === arg2 ? _this.font = font : arg2 instanceof PdfBrush ? (_this.font = font, 
            _this.brush = arg2) : (_this.font = font, _this.bounds = arg2), _this;
        }
        return __extends$91(PdfPageNumberField, _super), Object.defineProperty(PdfPageNumberField.prototype, "numberStyle", {
            get: function() {
                return this.internalNumberStyle;
            },
            set: function(value) {
                this.internalNumberStyle = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageNumberField.prototype.getValue = function(graphics) {
            var page = this.getPageFromGraphics(graphics);
            return this.internalGetValue(page);
        }, PdfPageNumberField.prototype.internalGetValue = function(page) {
            var pageIndex = page.document.pages.indexOf(page) + 1;
            return PdfNumbersConvertor.convert(pageIndex, this.numberStyle);
        }, PdfPageNumberField;
    }(PdfMultipleValueField), __extends$93 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfCompositeField = function(_super) {
        function PdfCompositeField(font, brush, text) {
            for (var list = [], _i = 3; _i < arguments.length; _i++) list[_i - 3] = arguments[_i];
            var _this = _super.call(this) || this;
            return _this.internalAutomaticFields = null, _this.internalText = "", _this.font = font, 
            _this.brush = brush, _this.text = text, _this.automaticFields = list, _this;
        }
        return __extends$93(PdfCompositeField, _super), Object.defineProperty(PdfCompositeField.prototype, "text", {
            get: function() {
                return this.internalText;
            },
            set: function(value) {
                this.internalText = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfCompositeField.prototype, "automaticFields", {
            get: function() {
                return this.internalAutomaticFields;
            },
            set: function(value) {
                this.internalAutomaticFields = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfCompositeField.prototype.getValue = function(graphics) {
            var text = this.text.toString();
            if (void 0 !== this.automaticFields && null != this.automaticFields && this.automaticFields.length > 0) for (var i = 0; i < this.automaticFields.length; i++) {
                var automaticField = this.automaticFields[i];
                text = text.replace("{" + i + "}", automaticField.getValue(graphics));
            }
            return text;
        }, PdfCompositeField;
    }(PdfMultipleValueField), __extends$95 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfSingleValueField = function(_super) {
        function PdfSingleValueField() {
            var _this = _super.call(this) || this;
            return _this.list = new TemporaryDictionary(), _this.painterGraphics = [], _this;
        }
        return __extends$95(PdfSingleValueField, _super), PdfSingleValueField.prototype.performDraw = function(graphics, location, scalingX, scalingY) {
            _super.prototype.performDrawHelper.call(this, graphics, location, scalingX, scalingY);
            var document = this.getPageFromGraphics(graphics).document, textValue = this.getValue(graphics);
            if (this.list.containsKey(document)) {
                var pair = this.list.getValue(document), drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);
                graphics.drawPdfTemplate(pair.template, drawLocation, new SizeF(pair.template.width * scalingX, pair.template.height * scalingY)), 
                this.painterGraphics.push(graphics);
            } else {
                var size = this.getSize(), template = new PdfTemplate(size);
                this.list.setValue(document, new PdfTemplateValuePair(template, textValue)), template.graphics.drawString(textValue, this.getFont(), this.pen, this.getBrush(), 0, 0, size.width, size.height, this.stringFormat);
                drawLocation = new PointF(location.x + this.location.x, location.y + this.location.y);
                graphics.drawPdfTemplate(template, drawLocation, new SizeF(template.width * scalingX, template.height * scalingY)), 
                this.painterGraphics.push(graphics);
            }
        }, PdfSingleValueField;
    }(PdfAutomaticField), __extends$94 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfPageCountField = function(_super) {
        function PdfPageCountField(font, arg2) {
            var _this = _super.call(this) || this;
            return _this.internalNumberStyle = PdfNumberStyle.Numeric, void 0 === arg2 ? _this.font = font : arg2 instanceof PdfBrush ? (_this.font = font, 
            _this.brush = arg2) : (_this.font = font, _this.bounds = arg2), _this;
        }
        return __extends$94(PdfPageCountField, _super), Object.defineProperty(PdfPageCountField.prototype, "numberStyle", {
            get: function() {
                return this.internalNumberStyle;
            },
            set: function(value) {
                this.internalNumberStyle = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageCountField.prototype.getValue = function(graphics) {
            var count = this.getPageFromGraphics(graphics).section.parent.document.pages.count;
            return PdfNumbersConvertor.convert(count, this.numberStyle);
        }, PdfPageCountField;
    }(PdfSingleValueField);
    !function(PdfDestinationMode) {
        PdfDestinationMode[PdfDestinationMode.Location = 0] = "Location", PdfDestinationMode[PdfDestinationMode.FitToPage = 1] = "FitToPage", 
        PdfDestinationMode[PdfDestinationMode.FitR = 2] = "FitR";
    }(PdfDestinationMode || (PdfDestinationMode = {}));
    var PdfBorderOverlapStyle, PdfDestination = function() {
        function PdfDestination(arg1, arg2) {
            if (this.dictionaryProperties = new DictionaryProperties(), this.destinationMode = PdfDestinationMode.Location, 
            this.zoomFactor = 0, this.destinationLocation = new PointF(0, 0), this.bounds = new RectangleF(), 
            this.array = new PdfArray(), void 0 === arg2) {
                PdfPageRotateAngle.RotateAngle0;
                this.destinationLocation = new PointF(0, this.destinationLocation.y), this.pdfPage = arg1;
            } else arg2 instanceof PointF ? (this.constructor(arg1), this.destinationLocation = arg2) : (this.constructor(arg1), 
            this.bounds = arg2);
        }
        return Object.defineProperty(PdfDestination.prototype, "zoom", {
            get: function() {
                return this.zoomFactor;
            },
            set: function(value) {
                this.zoomFactor = value, this.initializePrimitive();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDestination.prototype, "page", {
            get: function() {
                return this.pdfPage;
            },
            set: function(value) {
                this.pdfPage = value, this.initializePrimitive();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDestination.prototype, "mode", {
            get: function() {
                return this.destinationMode;
            },
            set: function(value) {
                this.destinationMode = value, this.initializePrimitive();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfDestination.prototype, "location", {
            get: function() {
                return this.destinationLocation;
            },
            set: function(value) {
                this.destinationLocation = value, this.initializePrimitive();
            },
            enumerable: !0,
            configurable: !0
        }), PdfDestination.prototype.pointToNativePdf = function(page, point) {
            return page.section.pointToNativePdf(page, point);
        }, PdfDestination.prototype.initializePrimitive = function() {
            switch (this.array.clear(), this.array.add(new PdfReferenceHolder(this.pdfPage)), 
            this.destinationMode) {
              case PdfDestinationMode.Location:
                var simplePage = this.pdfPage, point = new PointF();
                point = this.pointToNativePdf(simplePage, this.destinationLocation), this.array.add(new PdfName(this.dictionaryProperties.xyz)), 
                this.array.add(new PdfNumber(point.x)), this.array.add(new PdfNumber(point.y)), 
                this.array.add(new PdfNumber(this.zoomFactor));
                break;

              case PdfDestinationMode.FitToPage:
                this.array.add(new PdfName(this.dictionaryProperties.fit));
            }
        }, Object.defineProperty(PdfDestination.prototype, "element", {
            get: function() {
                return this.initializePrimitive(), this.array;
            },
            enumerable: !0,
            configurable: !0
        }), PdfDestination;
    }(), __extends$96 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfTrueTypeFont = function(_super) {
        function PdfTrueTypeFont(base64String, size, style) {
            var _this = _super.call(this, size) || this;
            return _this.isEmbedFont = !1, _this.isUnicode = !0, void 0 !== style ? _this.createFontInternal(base64String, style) : _this.createFontInternal(base64String, PdfFontStyle.Regular), 
            _this;
        }
        return __extends$96(PdfTrueTypeFont, _super), PdfTrueTypeFont.prototype.equalsToFont = function(font) {
            return !1;
        }, PdfTrueTypeFont.prototype.getLineWidth = function(line, format) {
            var width = 0;
            if (null !== format && format.textDirection !== PdfTextDirection.None) {
                width = this.getUnicodeLineWidth(line, width, format).width;
            } else width = this.fontInternal.getLineWidth(line);
            var size = this.metrics.getSize(format);
            return width *= PdfFont.charSizeMultiplier * size, width = this.applyFormatSettings(line, format, width);
        }, PdfTrueTypeFont.prototype.getCharWidth = function(charCode, format) {
            var codeWidth = this.fontInternal.getCharWidth(charCode);
            return codeWidth *= .001 * this.metrics.getSize(format);
        }, PdfTrueTypeFont.prototype.createFontInternal = function(base64String, style) {
            this.fontInternal = new UnicodeTrueTypeFont(base64String, this.size), this.calculateStyle(style), 
            this.initializeInternals();
        }, PdfTrueTypeFont.prototype.calculateStyle = function(style) {
            var iStyle = this.fontInternal.ttfMetrics.macStyle;
            0 != (style & PdfFontStyle.Underline) && (iStyle |= PdfFontStyle.Underline), 0 != (style & PdfFontStyle.Strikeout) && (iStyle |= PdfFontStyle.Strikeout), 
            this.setStyle(iStyle);
        }, PdfTrueTypeFont.prototype.initializeInternals = function() {
            var equalFont = null;
            PdfDocument.enableCache && (equalFont = PdfDocument.cache.search(this));
            var internals = null;
            if (null !== equalFont && void 0 !== equalFont) {
                internals = equalFont.getInternals();
                var metrics = equalFont.metrics;
                (metrics = metrics.clone()).size = this.size, this.metrics = metrics, this.fontInternal = equalFont.fontInternal;
            } else null == equalFont && (this.fontInternal instanceof UnicodeTrueTypeFont && (this.fontInternal.isEmbed = this.isEmbedFont), 
            this.fontInternal.createInternals(), internals = this.fontInternal.getInternals(), 
            this.metrics = this.fontInternal.metrics);
            this.metrics.isUnicodeFont = !0, this.setInternals(internals);
        }, PdfTrueTypeFont.prototype.setSymbols = function(text) {
            var internalFont = this.fontInternal;
            null != internalFont && internalFont.setSymbols(text);
        }, Object.defineProperty(PdfTrueTypeFont.prototype, "Unicode", {
            get: function() {
                return this.isUnicode;
            },
            enumerable: !0,
            configurable: !0
        }), PdfTrueTypeFont.prototype.getUnicodeLineWidth = function(line, width, format) {
            width = 0;
            var glyphIndices = null, result = new RtlRenderer().getGlyphIndex(line, this, format.textDirection === PdfTextDirection.RightToLeft, glyphIndices, !0), resultGlyph = result.success;
            if (glyphIndices = result.glyphs, resultGlyph && null !== glyphIndices) for (var ttfReader = this.fontInternal.ttfReader, i = 0, len = glyphIndices.length; i < len; i++) {
                var glyphIndex = glyphIndices[i], glyph = ttfReader.getGlyph(glyphIndex);
                null !== glyph && void 0 !== glyph && (width += glyph.width);
            }
            return {
                success: resultGlyph,
                width: width
            };
        }, PdfTrueTypeFont;
    }(PdfFont), PdfPageTemplateElement = function() {
        function PdfPageTemplateElement(arg1, arg2, arg3, arg4, arg5) {
            arg1 instanceof RectangleF && void 0 === arg2 ? this.constructor(arg1.x, arg1.y, arg1.width, arg1.height) : arg1 instanceof RectangleF && arg2 instanceof PdfPage && void 0 === arg3 ? this.constructor(arg1.x, arg1.y, arg1.width, arg1.height, arg2) : arg1 instanceof PointF && arg2 instanceof SizeF && void 0 === arg3 ? this.constructor(arg1.x, arg1.y, arg2.width, arg2.height) : arg1 instanceof PointF && arg2 instanceof SizeF && arg3 instanceof PdfPage && void 0 === arg4 ? this.constructor(arg1.x, arg1.y, arg2.width, arg2.height, arg3) : arg1 instanceof SizeF && void 0 === arg2 ? this.constructor(arg1.width, arg1.height) : "number" == typeof arg1 && "number" == typeof arg2 && void 0 === arg3 ? this.constructor(0, 0, arg1, arg2) : "number" == typeof arg1 && "number" == typeof arg2 && arg3 instanceof PdfPage && void 0 === arg4 ? this.constructor(0, 0, arg1, arg2, arg3) : (this.x = arg1, 
            this.y = arg2, this.pdfTemplate = new PdfTemplate(arg3, arg4));
        }
        return Object.defineProperty(PdfPageTemplateElement.prototype, "dock", {
            get: function() {
                return this.dockStyle;
            },
            set: function(value) {
                this.dockStyle = value, this.resetAlignment();
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "alignment", {
            get: function() {
                return this.alignmentStyle;
            },
            set: function(value) {
                this.setAlignment(value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "foreground", {
            get: function() {
                return this.isForeground;
            },
            set: function(value) {
                this.isForeground = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "background", {
            get: function() {
                return !this.isForeground;
            },
            set: function(value) {
                this.isForeground = !value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "location", {
            get: function() {
                return this.currentLocation;
            },
            set: function(value) {
                this.type === TemplateType.None && (this.currentLocation = value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "x", {
            get: function() {
                return void 0 !== this.currentLocation ? this.currentLocation.x : 0;
            },
            set: function(value) {
                this.type === TemplateType.None && (this.currentLocation.x = value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "y", {
            get: function() {
                return void 0 !== this.currentLocation ? this.currentLocation.y : 0;
            },
            set: function(value) {
                this.type === TemplateType.None && (this.currentLocation.y = value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "size", {
            get: function() {
                return this.template.size;
            },
            set: function(value) {
                this.type === TemplateType.None && this.template.reset(value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "width", {
            get: function() {
                return this.template.width;
            },
            set: function(value) {
                if (this.template.width !== value && this.type === TemplateType.None) {
                    var size = this.template.size;
                    size.width = value, this.template.reset(size);
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "height", {
            get: function() {
                return this.template.height;
            },
            set: function(value) {
                if (this.template.height !== value && this.type === TemplateType.None) {
                    var size = this.template.size;
                    size.height = value, this.template.reset(size);
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "graphics", {
            get: function() {
                return this.template.graphics;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "template", {
            get: function() {
                return this.pdfTemplate;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "type", {
            get: function() {
                return this.templateType;
            },
            set: function(value) {
                this.updateDocking(value), this.templateType = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPageTemplateElement.prototype, "bounds", {
            get: function() {
                return new RectangleF(new PointF(this.x, this.y), this.size);
            },
            set: function(value) {
                this.type === TemplateType.None && (this.location = new PointF(value.x, value.y), 
                this.size = new SizeF(value.width, value.height));
            },
            enumerable: !0,
            configurable: !0
        }), PdfPageTemplateElement.prototype.updateDocking = function(type) {
            if (type !== TemplateType.None) {
                switch (type) {
                  case TemplateType.Top:
                    this.dock = PdfDockStyle.Top;
                    break;

                  case TemplateType.Bottom:
                    this.dock = PdfDockStyle.Bottom;
                    break;

                  case TemplateType.Left:
                    this.dock = PdfDockStyle.Left;
                    break;

                  case TemplateType.Right:
                    this.dock = PdfDockStyle.Right;
                }
                this.resetAlignment();
            }
        }, PdfPageTemplateElement.prototype.resetAlignment = function() {
            this.alignment = PdfAlignmentStyle.None;
        }, PdfPageTemplateElement.prototype.setAlignment = function(alignment) {
            if (this.dock === PdfDockStyle.None) this.alignmentStyle = alignment; else {
                var canBeSet = !1;
                switch (this.dock) {
                  case PdfDockStyle.Left:
                    canBeSet = alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.MiddleLeft || alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.None;
                    break;

                  case PdfDockStyle.Top:
                    canBeSet = alignment === PdfAlignmentStyle.TopLeft || alignment === PdfAlignmentStyle.TopCenter || alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.None;
                    break;

                  case PdfDockStyle.Right:
                    canBeSet = alignment === PdfAlignmentStyle.TopRight || alignment === PdfAlignmentStyle.MiddleRight || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None;
                    break;

                  case PdfDockStyle.Bottom:
                    canBeSet = alignment === PdfAlignmentStyle.BottomLeft || alignment === PdfAlignmentStyle.BottomCenter || alignment === PdfAlignmentStyle.BottomRight || alignment === PdfAlignmentStyle.None;
                    break;

                  case PdfDockStyle.Fill:
                    canBeSet = alignment === PdfAlignmentStyle.MiddleCenter || alignment === PdfAlignmentStyle.None;
                }
                canBeSet && (this.alignmentStyle = alignment);
            }
        }, PdfPageTemplateElement.prototype.draw = function(layer, document) {
            var page = layer.page, bounds = this.calculateBounds(page, document);
            -0 === bounds.x && (bounds.x = 0), layer.graphics.drawPdfTemplate(this.template, new PointF(bounds.x, bounds.y), new SizeF(bounds.width, bounds.height));
        }, PdfPageTemplateElement.prototype.calculateBounds = function(page, document) {
            var result = this.bounds;
            return this.alignmentStyle !== PdfAlignmentStyle.None ? result = this.getAlignmentBounds(page, document) : this.dockStyle !== PdfDockStyle.None && (result = this.getDockBounds(page, document)), 
            result;
        }, PdfPageTemplateElement.prototype.getAlignmentBounds = function(page, document) {
            this.bounds;
            return this.type === TemplateType.None ? this.getSimpleAlignmentBounds(page, document) : this.getTemplateAlignmentBounds(page, document);
        }, PdfPageTemplateElement.prototype.getSimpleAlignmentBounds = function(page, document) {
            var bounds = this.bounds, actualBounds = page.section.getActualBounds(document, page, !1), x = this.x, y = this.y;
            switch (this.alignmentStyle) {
              case PdfAlignmentStyle.TopLeft:
                x = 0, y = 0;
                break;

              case PdfAlignmentStyle.TopCenter:
                x = (actualBounds.width - this.width) / 2, y = 0;
                break;

              case PdfAlignmentStyle.TopRight:
                x = actualBounds.width - this.width, y = 0;
                break;

              case PdfAlignmentStyle.MiddleLeft:
                x = 0, y = (actualBounds.height - this.height) / 2;
                break;

              case PdfAlignmentStyle.MiddleCenter:
                x = (actualBounds.width - this.width) / 2, y = (actualBounds.height - this.height) / 2;
                break;

              case PdfAlignmentStyle.MiddleRight:
                x = actualBounds.width - this.width, y = (actualBounds.height - this.height) / 2;
                break;

              case PdfAlignmentStyle.BottomLeft:
                x = 0, y = actualBounds.height - this.height;
                break;

              case PdfAlignmentStyle.BottomCenter:
                x = (actualBounds.width - this.width) / 2, y = actualBounds.height - this.height;
                break;

              case PdfAlignmentStyle.BottomRight:
                x = actualBounds.width - this.width, y = actualBounds.height - this.height;
            }
            return bounds.x = x, bounds.y = y, bounds;
        }, PdfPageTemplateElement.prototype.getTemplateAlignmentBounds = function(page, document) {
            var result = this.bounds, section = page.section, actualBounds = section.getActualBounds(document, page, !1), x = this.x, y = this.y;
            switch (this.alignmentStyle) {
              case PdfAlignmentStyle.TopLeft:
                this.type === TemplateType.Left ? (x = -actualBounds.x, y = 0) : this.type === TemplateType.Top && (x = -actualBounds.x, 
                y = -actualBounds.y);
                break;

              case PdfAlignmentStyle.TopCenter:
                x = (actualBounds.width - this.width) / 2, y = -actualBounds.y;
                break;

              case PdfAlignmentStyle.TopRight:
                this.type === TemplateType.Right ? (x = actualBounds.width + section.getRightIndentWidth(document, page, !1) - this.width, 
                y = 0) : this.type === TemplateType.Top && (x = actualBounds.width + section.getRightIndentWidth(document, page, !1) - this.width, 
                y = -actualBounds.y);
                break;

              case PdfAlignmentStyle.MiddleLeft:
                x = -actualBounds.x, y = (actualBounds.height - this.height) / 2;
                break;

              case PdfAlignmentStyle.MiddleCenter:
                x = (actualBounds.width - this.width) / 2, y = (actualBounds.height - this.height) / 2;
                break;

              case PdfAlignmentStyle.MiddleRight:
                x = actualBounds.width + section.getRightIndentWidth(document, page, !1) - this.width, 
                y = (actualBounds.height - this.height) / 2;
                break;

              case PdfAlignmentStyle.BottomLeft:
                this.type === TemplateType.Left ? (x = -actualBounds.x, y = actualBounds.height - this.height) : this.type === TemplateType.Bottom && (x = -actualBounds.x, 
                y = actualBounds.height + section.getBottomIndentHeight(document, page, !1) - this.height);
                break;

              case PdfAlignmentStyle.BottomCenter:
                x = (actualBounds.width - this.width) / 2, y = actualBounds.height + section.getBottomIndentHeight(document, page, !1) - this.height;
                break;

              case PdfAlignmentStyle.BottomRight:
                this.type === TemplateType.Right ? (x = actualBounds.width + section.getRightIndentWidth(document, page, !1) - this.width, 
                y = actualBounds.height - this.height) : this.type === TemplateType.Bottom && (x = actualBounds.width + section.getRightIndentWidth(document, page, !1) - this.width, 
                y = actualBounds.height + section.getBottomIndentHeight(document, page, !1) - this.height);
            }
            return result.x = x, result.y = y, result;
        }, PdfPageTemplateElement.prototype.getDockBounds = function(page, document) {
            this.bounds;
            return this.type === TemplateType.None ? this.getSimpleDockBounds(page, document) : this.getTemplateDockBounds(page, document);
        }, PdfPageTemplateElement.prototype.getSimpleDockBounds = function(page, document) {
            this.bounds;
            var actualBounds = page.section.getActualBounds(document, page, !1), x = this.x, y = this.y, width = this.width, height = this.height;
            switch (this.dockStyle) {
              case PdfDockStyle.Left:
                x = 0, y = 0, width = this.width, height = actualBounds.height;
                break;

              case PdfDockStyle.Top:
                x = 0, y = 0, width = actualBounds.width, height = this.height;
                break;

              case PdfDockStyle.Right:
                x = actualBounds.width - this.width, y = 0, width = this.width, height = actualBounds.height;
                break;

              case PdfDockStyle.Bottom:
                x = 0, y = actualBounds.height - this.height, width = actualBounds.width, height = this.height;
                break;

              case PdfDockStyle.Fill:
                x = 0, x = 0, width = actualBounds.width, height = actualBounds.height;
            }
            return new RectangleF(x, y, width, height);
        }, PdfPageTemplateElement.prototype.getTemplateDockBounds = function(page, document) {
            this.bounds;
            var section = page.section, actualBounds = section.getActualBounds(document, page, !1), actualSize = section.pageSettings.getActualSize(), x = this.x, y = this.y, width = this.width, height = this.height;
            switch (this.dockStyle) {
              case PdfDockStyle.Left:
                x = -actualBounds.x, y = 0, width = this.width, height = actualBounds.height;
                break;

              case PdfDockStyle.Top:
                x = -actualBounds.x, y = -actualBounds.y, width = actualSize.width, height = this.height, 
                actualBounds.height < 0 && (y = -actualBounds.y + actualSize.height);
                break;

              case PdfDockStyle.Right:
                x = actualBounds.width + section.getRightIndentWidth(document, page, !1) - this.width, 
                y = 0, width = this.width, height = actualBounds.height;
                break;

              case PdfDockStyle.Bottom:
                x = -actualBounds.x, y = actualBounds.height + section.getBottomIndentHeight(document, page, !1) - this.height, 
                width = actualSize.width, height = this.height, actualBounds.height < 0 && (y -= actualSize.height);
                break;

              case PdfDockStyle.Fill:
                x = 0, x = 0, width = actualBounds.width, height = actualBounds.height;
            }
            return new RectangleF(x, y, width, height);
        }, PdfPageTemplateElement;
    }(), PdfBorders = function() {
        function PdfBorders() {
            var defaultBorderPenLeft = new PdfPen(new PdfColor(0, 0, 0));
            defaultBorderPenLeft.dashStyle = PdfDashStyle.Solid;
            var defaultBorderPenRight = new PdfPen(new PdfColor(0, 0, 0));
            defaultBorderPenRight.dashStyle = PdfDashStyle.Solid;
            var defaultBorderPenTop = new PdfPen(new PdfColor(0, 0, 0));
            defaultBorderPenTop.dashStyle = PdfDashStyle.Solid;
            var defaultBorderPenBottom = new PdfPen(new PdfColor(0, 0, 0));
            defaultBorderPenBottom.dashStyle = PdfDashStyle.Solid, this.leftPen = defaultBorderPenLeft, 
            this.rightPen = defaultBorderPenRight, this.topPen = defaultBorderPenTop, this.bottomPen = defaultBorderPenBottom;
        }
        return Object.defineProperty(PdfBorders.prototype, "left", {
            get: function() {
                return this.leftPen;
            },
            set: function(value) {
                this.leftPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBorders.prototype, "right", {
            get: function() {
                return this.rightPen;
            },
            set: function(value) {
                this.rightPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBorders.prototype, "top", {
            get: function() {
                return this.topPen;
            },
            set: function(value) {
                this.topPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBorders.prototype, "bottom", {
            get: function() {
                return this.bottomPen;
            },
            set: function(value) {
                this.bottomPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBorders.prototype, "all", {
            set: function(value) {
                this.leftPen = this.rightPen = this.topPen = this.bottomPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBorders.prototype, "isAll", {
            get: function() {
                return this.leftPen === this.rightPen && this.leftPen === this.topPen && this.leftPen === this.bottomPen;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfBorders, "default", {
            get: function() {
                return new PdfBorders();
            },
            enumerable: !0,
            configurable: !0
        }), PdfBorders;
    }(), PdfPaddings = function() {
        function PdfPaddings(left, right, top, bottom) {
            void 0 === left ? (this.leftPad = this.rightPad = 5.76, this.bottom = this.topPad = .5) : (this.leftPad = left, 
            this.rightPad = right, this.topPad = top, this.bottomPad = bottom);
        }
        return Object.defineProperty(PdfPaddings.prototype, "left", {
            get: function() {
                return this.leftPad;
            },
            set: function(value) {
                this.leftPad = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPaddings.prototype, "right", {
            get: function() {
                return this.rightPad;
            },
            set: function(value) {
                this.rightPad = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPaddings.prototype, "top", {
            get: function() {
                return this.topPad;
            },
            set: function(value) {
                this.topPad = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPaddings.prototype, "bottom", {
            get: function() {
                return this.bottomPad;
            },
            set: function(value) {
                this.bottomPad = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfPaddings.prototype, "all", {
            set: function(value) {
                this.leftPad = this.rightPad = this.topPad = this.bottomPad = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfPaddings;
    }();
    !function(PdfBorderOverlapStyle) {
        PdfBorderOverlapStyle[PdfBorderOverlapStyle.Overlap = 0] = "Overlap", PdfBorderOverlapStyle[PdfBorderOverlapStyle.Inside = 1] = "Inside";
    }(PdfBorderOverlapStyle || (PdfBorderOverlapStyle = {}));
    var PdfHorizontalOverflowType, __extends$97 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfGridStyleBase = function() {
        function PdfGridStyleBase() {}
        return Object.defineProperty(PdfGridStyleBase.prototype, "backgroundBrush", {
            get: function() {
                return this.gridBackgroundBrush;
            },
            set: function(value) {
                this.gridBackgroundBrush = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyleBase.prototype, "textBrush", {
            get: function() {
                return this.gridTextBrush;
            },
            set: function(value) {
                this.gridTextBrush = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyleBase.prototype, "textPen", {
            get: function() {
                return this.gridTextPen;
            },
            set: function(value) {
                this.gridTextPen = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyleBase.prototype, "font", {
            get: function() {
                return this.gridFont;
            },
            set: function(value) {
                this.gridFont = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyleBase.prototype, "backgroundImage", {
            get: function() {
                return this.gridBackgroundImage;
            },
            set: function(value) {
                this.gridBackgroundImage = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridStyleBase;
    }(), PdfGridStyle = function(_super) {
        function PdfGridStyle() {
            var _this = _super.call(this) || this;
            return _this.gridBorderOverlapStyle = PdfBorderOverlapStyle.Overlap, _this.bAllowHorizontalOverflow = !1, 
            _this.gridHorizontalOverflowType = PdfHorizontalOverflowType.LastPage, _this;
        }
        return __extends$97(PdfGridStyle, _super), Object.defineProperty(PdfGridStyle.prototype, "cellSpacing", {
            get: function() {
                return void 0 === this.gridCellSpacing && (this.gridCellSpacing = 0), this.gridCellSpacing;
            },
            set: function(value) {
                this.gridCellSpacing = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyle.prototype, "horizontalOverflowType", {
            get: function() {
                return this.gridHorizontalOverflowType;
            },
            set: function(value) {
                this.gridHorizontalOverflowType = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyle.prototype, "allowHorizontalOverflow", {
            get: function() {
                return this.bAllowHorizontalOverflow;
            },
            set: function(value) {
                this.bAllowHorizontalOverflow = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyle.prototype, "cellPadding", {
            get: function() {
                return void 0 === this.gridCellPadding && (this.gridCellPadding = new PdfPaddings()), 
                this.gridCellPadding;
            },
            set: function(value) {
                void 0 === this.gridCellPadding ? (this.gridCellPadding = new PdfPaddings(), this.gridCellPadding = value) : this.gridCellPadding = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridStyle.prototype, "borderOverlapStyle", {
            get: function() {
                return this.gridBorderOverlapStyle;
            },
            set: function(value) {
                this.gridBorderOverlapStyle = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridStyle;
    }(PdfGridStyleBase), PdfGridCellStyle = function(_super) {
        function PdfGridCellStyle() {
            var _this = _super.call(this) || this;
            return _this.gridCellBorders = PdfBorders.default, _this;
        }
        return __extends$97(PdfGridCellStyle, _super), Object.defineProperty(PdfGridCellStyle.prototype, "stringFormat", {
            get: function() {
                return this.format;
            },
            set: function(value) {
                this.format = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCellStyle.prototype, "borders", {
            get: function() {
                return this.gridCellBorders;
            },
            set: function(value) {
                this.gridCellBorders = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCellStyle.prototype, "cellPadding", {
            get: function() {
                return this.gridCellPadding;
            },
            set: function(value) {
                null != this.gridCellPadding && void 0 !== this.gridCellPadding || (this.gridCellPadding = new PdfPaddings()), 
                this.gridCellPadding = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridCellStyle;
    }(PdfGridStyleBase), PdfGridRowStyle = function() {
        function PdfGridRowStyle() {}
        return Object.defineProperty(PdfGridRowStyle.prototype, "backgroundBrush", {
            get: function() {
                return this.gridRowBackgroundBrush;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRowStyle.prototype.setBackgroundBrush = function(value) {
            if (this.gridRowBackgroundBrush = value, void 0 !== this.parent) for (var i = 0; i < this.parent.cells.count; i++) this.parent.cells.getCell(i).style.backgroundBrush = value;
        }, Object.defineProperty(PdfGridRowStyle.prototype, "textBrush", {
            get: function() {
                return this.gridRowTextBrush;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRowStyle.prototype.setTextBrush = function(value) {
            if (this.gridRowTextBrush = value, void 0 !== this.parent) for (var i = 0; i < this.parent.cells.count; i++) this.parent.cells.getCell(i).style.textBrush = value;
        }, Object.defineProperty(PdfGridRowStyle.prototype, "textPen", {
            get: function() {
                return this.gridRowTextPen;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRowStyle.prototype.setTextPen = function(value) {
            if (this.gridRowTextPen = value, void 0 !== this.parent) for (var i = 0; i < this.parent.cells.count; i++) this.parent.cells.getCell(i).style.textPen = value;
        }, Object.defineProperty(PdfGridRowStyle.prototype, "font", {
            get: function() {
                return this.gridRowFont;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRowStyle.prototype.setFont = function(value) {
            if (this.gridRowFont = value, void 0 !== this.parent) for (var i = 0; i < this.parent.cells.count; i++) this.parent.cells.getCell(i).style.font = value;
        }, Object.defineProperty(PdfGridRowStyle.prototype, "border", {
            get: function() {
                return void 0 === this.gridRowBorder && this.setBorder(new PdfBorders()), this.gridRowBorder;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRowStyle.prototype.setBorder = function(value) {
            if (this.gridRowBorder = value, void 0 !== this.parent) for (var i = 0; i < this.parent.cells.count; i++) this.parent.cells.getCell(i).style.borders = value;
        }, PdfGridRowStyle.prototype.setParent = function(parent) {
            this.parent = parent;
        }, Object.defineProperty(PdfGridRowStyle.prototype, "backgroundImage", {
            get: function() {
                return this.gridRowBackgroundImage;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRowStyle;
    }();
    !function(PdfHorizontalOverflowType) {
        PdfHorizontalOverflowType[PdfHorizontalOverflowType.NextPage = 0] = "NextPage", 
        PdfHorizontalOverflowType[PdfHorizontalOverflowType.LastPage = 1] = "LastPage";
    }(PdfHorizontalOverflowType || (PdfHorizontalOverflowType = {}));
    var PdfGridCell = function() {
        function PdfGridCell(row) {
            this.cellWidth = 0, this.cellHeight = 0, this.tempval = 0, this.fontSpilt = !1, 
            this.finsh = !0, this.rowSpanRemainingHeight = 0, this.hasRowSpan = !1, this.hasColSpan = !1, 
            this.isFinish = !0, this.present = !1, void 0 === row ? (this.gridRowSpan = 1, this.colSpan = 1) : (this.constructor(), 
            this.gridRow = row);
        }
        return Object.defineProperty(PdfGridCell.prototype, "isCellMergeContinue", {
            get: function() {
                return this.internalIsCellMergeContinue;
            },
            set: function(value) {
                this.internalIsCellMergeContinue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "isRowMergeContinue", {
            get: function() {
                return this.internalIsRowMergeContinue;
            },
            set: function(value) {
                this.internalIsRowMergeContinue = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "isCellMergeStart", {
            get: function() {
                return this.internalIsCellMergeStart;
            },
            set: function(value) {
                this.internalIsCellMergeStart = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "isRowMergeStart", {
            get: function() {
                return this.internalIsRowMergeStart;
            },
            set: function(value) {
                this.internalIsRowMergeStart = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "remainingString", {
            get: function() {
                return this.remaining;
            },
            set: function(value) {
                this.remaining = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "FinishedDrawingCell", {
            get: function() {
                return this.isFinish;
            },
            set: function(value) {
                this.isFinish = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "stringFormat", {
            get: function() {
                return null == this.format && (this.format = new PdfStringFormat()), this.format;
            },
            set: function(value) {
                this.format = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "row", {
            get: function() {
                return this.gridRow;
            },
            set: function(value) {
                this.gridRow = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "value", {
            get: function() {
                return this.objectValue;
            },
            set: function(value) {
                if (this.objectValue = value, this.objectValue instanceof PdfGrid) {
                    this.row.grid.isSingleGrid = !1;
                    this.objectValue.ParentCell = this, this.objectValue.isChildGrid = !0;
                    for (var rowCount = this.row.grid.rows.count, i = 0; i < rowCount; i++) for (var row = this.row.grid.rows.getRow(i), colCount = row.cells.count, j = 0; j < colCount; j++) {
                        row.cells.getCell(j).parent = this;
                    }
                }
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "rowSpan", {
            get: function() {
                return this.gridRowSpan;
            },
            set: function(value) {
                if (value < 1) throw new Error("ArgumentException : Invalid span specified, must be greater than or equal to 1");
                this.gridRowSpan = value, this.row.rowSpanExists = !0, this.row.grid.hasRowSpanSpan = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "style", {
            get: function() {
                return null == this.cellStyle && (this.cellStyle = new PdfGridCellStyle()), this.cellStyle;
            },
            set: function(value) {
                this.cellStyle = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "height", {
            get: function() {
                return 0 === this.cellHeight && (this.cellHeight = this.measureHeight()), this.cellHeight;
            },
            set: function(value) {
                this.cellHeight = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "columnSpan", {
            get: function() {
                return this.colSpan;
            },
            set: function(value) {
                if (value < 1) throw Error("Invalid span specified, must be greater than or equal to 1");
                this.colSpan = value, this.row.columnSpanExists = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridCell.prototype, "width", {
            get: function() {
                return (0 === this.cellWidth || this.row.grid.isComplete) && (this.cellWidth = this.measureWidth()), 
                Math.round(this.cellWidth);
            },
            set: function(value) {
                this.cellWidth = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridCell.prototype.measureWidth = function() {
            var width = 0, layouter = new PdfStringLayouter();
            if ("string" == typeof this.objectValue) {
                width += layouter.layout(this.objectValue, this.getTextFont(), this.stringFormat, new SizeF(Number.MAX_VALUE, Number.MAX_VALUE), !1, new SizeF(0, 0)).actualSize.width, 
                width += 2 * (this.style.borders.left.width + this.style.borders.right.width);
            } else if (this.objectValue instanceof PdfGrid) width = this.objectValue.size.width; else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) width += this.objectValue.width; else if (this.objectValue instanceof PdfTextWebLink) {
                var webLink = this.objectValue;
                width += layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(0, 0), !1, new SizeF(0, 0)).actualSize.width, 
                width += 2 * (this.style.borders.left.width + this.style.borders.right.width);
            }
            return null != this.style.cellPadding ? width += this.style.cellPadding.left + this.style.cellPadding.right : width += this.row.grid.style.cellPadding.left + this.row.grid.style.cellPadding.right, 
            width += this.row.grid.style.cellSpacing;
        }, PdfGridCell.prototype.drawCellBackground = function(graphics, bounds) {
            var backgroundBrush = this.getBackgroundBrush();
            if (null != backgroundBrush && (graphics.save(), graphics.drawRectangle(backgroundBrush, bounds.x, bounds.y, bounds.width, bounds.height), 
            graphics.restore()), null != this.style.backgroundImage) {
                this.getBackgroundImage();
                graphics.drawImage(this.style.backgroundImage, bounds.x, bounds.y, bounds.width, bounds.height);
            }
        }, PdfGridCell.prototype.adjustContentLayoutArea = function(bounds) {
            var returnBounds = new RectangleF(bounds.x, bounds.y, bounds.width, bounds.height);
            return void 0 === this.style.cellPadding || null == this.style.cellPadding ? (returnBounds.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width, 
            returnBounds.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width, 
            returnBounds.width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left, 
            returnBounds.height -= this.gridRow.grid.style.cellPadding.bottom + this.gridRow.grid.style.cellPadding.top, 
            returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width) : (returnBounds.x += this.style.cellPadding.left + this.cellStyle.borders.left.width, 
            returnBounds.y += this.style.cellPadding.top + this.cellStyle.borders.top.width, 
            returnBounds.width -= this.style.cellPadding.right + this.style.cellPadding.left, 
            returnBounds.width -= this.cellStyle.borders.left.width + this.cellStyle.borders.right.width, 
            returnBounds.height -= this.style.cellPadding.bottom + this.style.cellPadding.top, 
            returnBounds.height -= this.cellStyle.borders.top.width + this.cellStyle.borders.bottom.width, 
            1 === this.rowSpan && (returnBounds.width -= this.style.borders.left.width)), returnBounds;
        }, PdfGridCell.prototype.draw = function(graphics, bounds, cancelSubsequentSpans) {
            var result = null;
            if (this.internalIsCellMergeContinue || this.internalIsRowMergeContinue) {
                if (!this.internalIsCellMergeContinue || !this.row.grid.style.allowHorizontalOverflow) return result;
                if (this.row.rowOverflowIndex > 0 && this.row.cells.indexOf(this) != this.row.rowOverflowIndex + 1 || 0 == this.row.rowOverflowIndex && this.internalIsCellMergeContinue) return result;
            }
            bounds = this.adjustOuterLayoutArea(bounds, graphics), this.drawCellBackground(graphics, bounds);
            var textPen = this.getTextPen(), textBrush = this.getTextBrush();
            void 0 === textPen && void 0 === textBrush && (textBrush = new PdfSolidBrush(new PdfColor(0, 0, 0)));
            var font = this.getTextFont(), strFormat = this.getStringFormat(), innerLayoutArea = bounds;
            if (innerLayoutArea.height >= graphics.clientSize.height && this.row.grid.allowRowBreakAcrossPages && (innerLayoutArea.height -= innerLayoutArea.y), 
            innerLayoutArea = this.adjustContentLayoutArea(innerLayoutArea), "string" == typeof this.objectValue || "string" == typeof this.remaining) {
                var temp = void 0, layoutRectangle = void 0;
                if (layoutRectangle = innerLayoutArea.height < font.height ? new RectangleF(innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, font.height) : innerLayoutArea, 
                innerLayoutArea.height < font.height && this.row.grid.isChildGrid && null != this.row.grid.ParentCell) {
                    var height = layoutRectangle.height - this.row.grid.ParentCell.row.grid.style.cellPadding.bottom - this.row.grid.style.cellPadding.bottom;
                    -1 != this.row.grid.splitChildRowIndex && (this.fontSpilt = !0, this.row.rowFontSplit = !0), 
                    height > 0 && height < font.height && (layoutRectangle.height = height);
                }
                0 != this.gridRow.grid.style.cellSpacing && (layoutRectangle.width -= this.gridRow.grid.style.cellSpacing, 
                bounds.width -= this.gridRow.grid.style.cellSpacing), this.isFinish ? (temp = "" === this.remaining ? this.remaining : this.objectValue, 
                graphics.drawString(temp, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat), 
                -1 == this.row.grid.splitChildRowIndex || this.row.grid.isChildGrid || void 0 !== this.remaining || (this.remaining = "")) : (void 0 !== this.remaining && null !== this.remaining || (this.remaining = ""), 
                this.row.repeatFlag && graphics.drawString(this.remaining, font, textPen, textBrush, layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height, strFormat), 
                this.isFinish = !0), result = graphics.stringLayoutResult;
            } else if (this.objectValue instanceof PdfGrid) {
                var childGrid = this.objectValue;
                childGrid.isChildGrid = !0, childGrid.ParentCell = this;
                var layoutRect = void 0;
                layoutRect = innerLayoutArea, 0 != this.gridRow.grid.style.cellSpacing && (bounds.width -= this.gridRow.grid.style.cellSpacing), 
                0 == this.gridRow.grid.style.cellSpacing && 0 == this.objectValue.style.cellSpacing || (layoutRect.x -= this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width, 
                layoutRect.y -= this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width), 
                null != this.objectValue.style.cellPadding && .5 === this.gridRow.grid.style.cellPadding.bottom && .5 === this.gridRow.grid.style.cellPadding.top && 5.76 === this.row.grid.style.cellPadding.left && 5.76 === this.gridRow.grid.style.cellPadding.right && 0 === this.gridRow.grid.style.cellSpacing && 0 === childGrid.style.cellSpacing && (layoutRect = bounds), 
                5.76 == this.gridRow.grid.style.cellPadding.right && 5.76 == this.gridRow.grid.style.cellPadding.left && .5 == this.gridRow.grid.style.cellPadding.bottom && .5 == this.gridRow.grid.style.cellPadding.top || .5 !== childGrid.style.cellPadding.bottom || .5 !== childGrid.style.cellPadding.top || 5.76 !== childGrid.style.cellPadding.left || 5.76 !== childGrid.style.cellPadding.right || 0 !== this.gridRow.grid.style.cellSpacing || 0 == childGrid.style.cellSpacing || (layoutRect.x += this.gridRow.grid.style.cellPadding.left + this.cellStyle.borders.left.width, 
                layoutRect.y += this.gridRow.grid.style.cellPadding.top + this.cellStyle.borders.top.width);
                var layouter = new PdfGridLayouter(childGrid), format = new PdfGridLayoutFormat();
                null != this.row.grid.LayoutFormat ? format = this.row.grid.LayoutFormat : format.layout = PdfLayoutType.Paginate;
                var param = new PdfLayoutParams();
                if (null != graphics.layer) {
                    param.page = graphics.page, param.bounds = layoutRect, param.format = format, childGrid.setSpan(), 
                    childGrid.checkSpan();
                    var childGridResult = layouter.Layouter(param);
                    this.value = childGrid, -1 !== this.row.grid.splitChildRowIndex && (this.height = this.row.rowBreakHeightValue), 
                    param.page != childGridResult.page && (childGridResult.bounds.height = this.row.rowBreakHeightValue, 
                    0 == this.row.rowBreakHeight ? this.row.NestedGridLayoutResult = childGridResult : this.row.rowBreakHeight = this.row.rowBreakHeightValue);
                }
            } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) {
                var imageBounds = void 0;
                imageBounds = this.objectValue.width <= innerLayoutArea.width ? new RectangleF(innerLayoutArea.x, innerLayoutArea.y, this.objectValue.width, innerLayoutArea.height) : innerLayoutArea, 
                graphics.drawImage(this.objectValue, imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height);
            } else this.objectValue instanceof PdfTextWebLink ? this.objectValue.draw(graphics.currentPage, innerLayoutArea) : void 0 === this.objectValue && (this.objectValue = "", 
            graphics.drawString(this.objectValue, font, textPen, textBrush, innerLayoutArea.x, innerLayoutArea.y, innerLayoutArea.width, innerLayoutArea.height, strFormat), 
            null != this.style.cellPadding && 0 == this.style.cellPadding.bottom && 0 == this.style.cellPadding.left && 0 == this.style.cellPadding.right && 0 == this.style.cellPadding.top && (bounds.width -= this.style.borders.left.width + this.style.borders.right.width), 
            0 != this.gridRow.grid.style.cellSpacing && (bounds.width -= this.gridRow.grid.style.cellSpacing));
            return null != this.style.borders && (this.fontSpilt ? -1 != this.row.grid.ParentCell.row.grid.splitChildRowIndex && (this.row.rowFontSplit = !1, 
            this.drawCellBorders(graphics, bounds)) : this.drawCellBorders(graphics, bounds)), 
            result;
        }, PdfGridCell.prototype.drawCellBorders = function(graphics, bounds) {
            this.row.grid.style.borderOverlapStyle === PdfBorderOverlapStyle.Inside && (bounds.x += this.style.borders.left.width, 
            bounds.y += this.style.borders.top.width, bounds.width -= this.style.borders.right.width, 
            bounds.height -= this.style.borders.bottom.width);
            var p1 = new PointF(bounds.x, bounds.y + bounds.height), p2 = new PointF(bounds.x, bounds.y), pen = this.cellStyle.borders.left;
            this.cellStyle.borders.left.dashStyle === PdfDashStyle.Solid && (pen.lineCap = PdfLineCap.Square), 
            graphics.drawLine(pen, p1, p2), p1 = new PointF(bounds.x + bounds.width, bounds.y), 
            p2 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height), pen = this.cellStyle.borders.right, 
            bounds.x + bounds.width > graphics.clientSize.width - pen.width / 2 && (p1 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y), 
            p2 = new PointF(graphics.clientSize.width - pen.width / 2, bounds.y + bounds.height)), 
            this.cellStyle.borders.right.dashStyle === PdfDashStyle.Solid && (pen.lineCap = PdfLineCap.Square), 
            graphics.drawLine(pen, p1, p2), p1 = new PointF(bounds.x, bounds.y), p2 = new PointF(bounds.x + bounds.width, bounds.y), 
            pen = this.cellStyle.borders.top, this.cellStyle.borders.top.dashStyle === PdfDashStyle.Solid && (pen.lineCap = PdfLineCap.Square), 
            graphics.drawLine(pen, p1, p2), p1 = new PointF(bounds.x + bounds.width, bounds.y + bounds.height), 
            p2 = new PointF(bounds.x, bounds.y + bounds.height), pen = this.cellStyle.borders.bottom, 
            this.cellStyle.borders.bottom.dashStyle === PdfDashStyle.Solid && (pen.lineCap = PdfLineCap.Square), 
            graphics.drawLine(pen, p1, p2);
        }, PdfGridCell.prototype.adjustOuterLayoutArea = function(bounds, g) {
            var isHeader = !1, cellSpacing = this.row.grid.style.cellSpacing;
            cellSpacing > 0 && (bounds = new RectangleF(bounds.x + cellSpacing, bounds.y + cellSpacing, bounds.width - cellSpacing, bounds.height - cellSpacing));
            var currentColIndex = this.row.cells.indexOf(this);
            if (this.columnSpan > 1 || this.row.rowOverflowIndex > 0 && currentColIndex == this.row.rowOverflowIndex + 1 && this.isCellMergeContinue) {
                if (1 == (span = this.columnSpan) && this.isCellMergeContinue) for (var j = currentColIndex + 1; j < this.row.grid.columns.count && this.row.cells.getCell(j).isCellMergeContinue; j++) span++;
                for (var totalWidth = 0, i = currentColIndex; i < currentColIndex + span; i++) {
                    if (this.row.grid.style.allowHorizontalOverflow) {
                        var compWidth = this.row.grid.size.width < g.clientSize.width ? this.row.grid.size.width : g.clientSize.width;
                        if ((this.row.grid.size.width > g.clientSize.width ? bounds.x + totalWidth + this.row.grid.columns.getColumn(i).width : totalWidth + this.row.grid.columns.getColumn(i).width) > compWidth) break;
                    }
                    totalWidth += this.row.grid.columns.getColumn(i).width;
                }
                totalWidth -= this.row.grid.style.cellSpacing, bounds.width = totalWidth;
            }
            if (this.rowSpan > 1 || this.row.rowSpanExists) {
                var span = this.rowSpan, currentRowIndex = this.row.grid.rows.rowCollection.indexOf(this.row);
                -1 == currentRowIndex && -1 != (currentRowIndex = this.row.grid.headers.indexOf(this.row)) && (isHeader = !0);
                var totalHeight = 0;
                for (i = currentRowIndex; i < currentRowIndex + span; i++) {
                    totalHeight += isHeader ? this.row.grid.headers.getHeader(i).height : this.row.grid.rows.getRow(i).height;
                    var row = this.row.grid.rows.getRow(i);
                    this.row.grid.rows.rowCollection.indexOf(row);
                }
                this.row.cells.indexOf(this);
                totalHeight -= this.row.grid.style.cellSpacing, bounds.height = totalHeight, this.row.rowMergeComplete || (bounds.height = totalHeight);
            }
            return bounds;
        }, PdfGridCell.prototype.getTextFont = function() {
            return void 0 !== this.style.font && null != this.style.font ? this.style.font : void 0 !== this.row.style.font && null != this.row.style.font ? this.row.style.font : void 0 !== this.row.grid.style.font && null != this.row.grid.style.font ? this.row.grid.style.font : PdfDocument.defaultFont;
        }, PdfGridCell.prototype.getTextBrush = function() {
            return void 0 !== this.style.textBrush && null != this.style.textBrush ? this.style.textBrush : void 0 !== this.row.style.textBrush && null != this.row.style.textBrush ? this.row.style.textBrush : this.row.grid.style.textBrush;
        }, PdfGridCell.prototype.getTextPen = function() {
            return void 0 !== this.style.textPen && null != this.style.textPen ? this.style.textPen : void 0 !== this.row.style.textPen && null != this.row.style.textPen ? this.row.style.textPen : this.row.grid.style.textPen;
        }, PdfGridCell.prototype.getBackgroundBrush = function() {
            return void 0 !== this.style.backgroundBrush && null != this.style.backgroundBrush ? this.style.backgroundBrush : void 0 !== this.row.style.backgroundBrush && null != this.row.style.backgroundBrush ? this.row.style.backgroundBrush : this.row.grid.style.backgroundBrush;
        }, PdfGridCell.prototype.getBackgroundImage = function() {
            return void 0 !== this.style.backgroundImage && null != this.style.backgroundImage ? this.style.backgroundImage : void 0 !== this.row.style.backgroundImage && null != this.row.style.backgroundImage ? this.row.style.backgroundImage : this.row.grid.style.backgroundImage;
        }, PdfGridCell.prototype.getStringFormat = function() {
            return void 0 !== this.style.stringFormat && null != this.style.stringFormat ? this.style.stringFormat : this.stringFormat;
        }, PdfGridCell.prototype.measureHeight = function() {
            var width = this.calculateWidth();
            null == this.style.cellPadding || void 0 === this.style.cellPadding ? width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left : (width -= this.style.cellPadding.right + this.style.cellPadding.left, 
            width -= this.style.borders.left.width + this.style.borders.right.width);
            var height = 0, layouter = new PdfStringLayouter();
            if ("string" == typeof this.objectValue || "string" == typeof this.remaining) {
                var currentValue = this.objectValue;
                this.isFinish || (currentValue = null !== this.remaining && "" !== this.remaining && void 0 !== this.remaining ? this.remaining : this.objectValue);
                var cellIndex = this.row.cells.indexOf(this);
                0 != this.gridRow.grid.style.cellSpacing && (width -= 2 * this.gridRow.grid.style.cellSpacing), 
                this.row.cells.getCell(cellIndex).hasColSpan || this.row.cells.getCell(cellIndex).hasRowSpan || (this.gridRow.grid.isChildGrid ? (width < 0 ? (this.tempval = width, 
                null == this.style.cellPadding || void 0 === this.style.cellPadding ? this.tempval += this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left : (this.tempval += this.style.cellPadding.right + this.style.cellPadding.left, 
                this.tempval += this.style.borders.left.width + this.style.borders.right.width)) : this.tempval = width, 
                height += layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(this.tempval, 0), !1, new SizeF(0, 0)).actualSize.height) : height += layouter.layout(currentValue, this.getTextFont(), this.stringFormat, new SizeF(width, 0), !1, new SizeF(0, 0)).actualSize.height), 
                height += 2 * (this.style.borders.top.width + this.style.borders.bottom.width);
            } else if (this.objectValue instanceof PdfGrid) {
                cellIndex = this.row.cells.indexOf(this);
                this.objectValue.tempWidth = this.calculateWidth(), this.row.cells.getCell(cellIndex).hasColSpan || this.row.cells.getCell(cellIndex).hasRowSpan ? height += 2 * (this.style.borders.top.width + this.style.borders.bottom.width) : height = this.objectValue.size.height, 
                0 !== this.gridRow.grid.style.cellSpacing && (width -= 2 * this.gridRow.grid.style.cellSpacing), 
                5.76 === this.gridRow.grid.style.cellPadding.right && 5.76 === this.gridRow.grid.style.cellPadding.left && .5 === this.gridRow.grid.style.cellPadding.top && .5 === this.gridRow.grid.style.cellPadding.top && (height -= this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom), 
                height += this.objectValue.style.cellSpacing;
            } else if (this.objectValue instanceof PdfImage || this.objectValue instanceof PdfBitmap) height += this.objectValue.height; else if (this.objectValue instanceof PdfTextWebLink) {
                var webLink = this.objectValue;
                height += layouter.layout(webLink.text, webLink.font, webLink.stringFormat, new SizeF(width, 0), !1, new SizeF(0, 0)).actualSize.height, 
                height += 2 * (this.style.borders.top.width + this.style.borders.bottom.width);
            } else void 0 === this.objectValue && (null == this.style.cellPadding || void 0 === this.style.cellPadding ? width -= this.gridRow.grid.style.cellPadding.right + this.gridRow.grid.style.cellPadding.left : (width -= this.style.cellPadding.right + this.style.cellPadding.left, 
            width -= this.style.borders.left.width + this.style.borders.right.width), height += 2 * (this.style.borders.top.width + this.style.borders.bottom.width));
            return null == this.style.cellPadding || void 0 === this.style.cellPadding ? height += this.row.grid.style.cellPadding.top + this.row.grid.style.cellPadding.bottom : height += this.style.cellPadding.top + this.style.cellPadding.bottom, 
            height += this.row.grid.style.cellSpacing;
        }, PdfGridCell.prototype.calculateWidth = function() {
            var cellIndex = this.row.cells.indexOf(this), columnSpan = (this.row.grid.rows.rowCollection.indexOf(this.row), 
            this.columnSpan), width = 0;
            if (1 === columnSpan) for (var i = 0; i < columnSpan; i++) width += this.row.grid.columns.getColumn(cellIndex + i).width; else if (columnSpan > 1) for (i = 0; i < columnSpan; i++) width += this.row.grid.columns.getColumn(cellIndex + i).width, 
            i + 1 < columnSpan && (this.row.cells.getCell(cellIndex + i + 1).hasColSpan = !0);
            if (null != this.parent && this.parent.row.width > 0 && this.row.grid.isChildGrid && null != this.parent && this.row.width > this.parent.row.width) {
                width = 0;
                for (var j = 0; j < this.parent.columnSpan; j++) width += this.parent.row.grid.columns.getColumn(j).width;
                width /= this.row.cells.count;
            }
            return width;
        }, PdfGridCell;
    }(), PdfGridCellCollection = function() {
        function PdfGridCellCollection(row) {
            this.cells = [], this.gridRow = row;
        }
        return PdfGridCellCollection.prototype.getCell = function(index) {
            if (index < 0 || index >= this.count) throw new Error("IndexOutOfRangeException");
            return this.cells[index];
        }, Object.defineProperty(PdfGridCellCollection.prototype, "count", {
            get: function() {
                return this.cells.length;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridCellCollection.prototype.add = function(cell) {
            if (void 0 === cell) {
                var tempcell = new PdfGridCell();
                return this.add(tempcell), cell;
            }
            cell.row = this.gridRow, this.cells.push(cell);
        }, PdfGridCellCollection.prototype.indexOf = function(cell) {
            return this.cells.indexOf(cell);
        }, PdfGridCellCollection;
    }(), PdfGridColumn = function() {
        function PdfGridColumn(grid) {
            this.columnWidth = 0, this.grid = grid;
        }
        return Object.defineProperty(PdfGridColumn.prototype, "width", {
            get: function() {
                return this.columnWidth;
            },
            set: function(value) {
                this.isCustomWidth = !0, this.columnWidth = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridColumn.prototype, "format", {
            get: function() {
                return null == this.stringFormat && (this.stringFormat = new PdfStringFormat()), 
                this.stringFormat;
            },
            set: function(value) {
                this.stringFormat = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridColumn;
    }(), PdfGridColumnCollection = function() {
        function PdfGridColumnCollection(grid) {
            this.internalColumns = [], this.columnWidth = 0, this.grid = grid, this.internalColumns = [];
        }
        return PdfGridColumnCollection.prototype.add = function(count) {
            for (var i = 0; i < count; i++) {
                this.internalColumns.push(new PdfGridColumn(this.grid));
                for (var index = 0; index < this.grid.rows.count; index++) {
                    var row = this.grid.rows.getRow(index), cell = new PdfGridCell();
                    cell.value = "", row.cells.add(cell);
                }
            }
        }, Object.defineProperty(PdfGridColumnCollection.prototype, "count", {
            get: function() {
                return this.internalColumns.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridColumnCollection.prototype, "width", {
            get: function() {
                return 0 === this.columnWidth && (this.columnWidth = this.measureColumnsWidth()), 
                0 === this.grid.initialWidth || this.columnWidth === this.grid.initialWidth || this.grid.style.allowHorizontalOverflow || (this.columnWidth = this.grid.initialWidth, 
                this.grid.isPageWidth = !0), this.columnWidth;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridColumnCollection.prototype, "columns", {
            get: function() {
                return this.internalColumns;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridColumnCollection.prototype.getColumn = function(index) {
            if (index >= 0 && index <= this.columns.length) return this.columns[index];
            throw Error("can not get the column from the index: " + index);
        }, PdfGridColumnCollection.prototype.measureColumnsWidth = function() {
            var totalWidth = 0;
            this.grid.measureColumnsWidth();
            for (var i = 0, count = this.internalColumns.length; i < count; i++) totalWidth += this.internalColumns[i].width;
            return totalWidth;
        }, PdfGridColumnCollection.prototype.getDefaultWidths = function(totalWidth) {
            for (var widths = [], subFactor = this.count, i = 0; i < this.count; i++) this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth ? this.internalColumns[i].width = 0 : (widths[i] = this.internalColumns[i].width, 
            this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth ? (totalWidth -= this.internalColumns[i].width, 
            subFactor--) : widths[i] = 0);
            for (i = 0; i < this.count; i++) {
                var width = totalWidth / subFactor;
                widths[i] <= 0 && (widths[i] = width);
            }
            return widths;
        }, PdfGridColumnCollection;
    }(), PdfGridRow = function() {
        function PdfGridRow(grid) {
            this.gridRowOverflowIndex = 0, this.rowHeight = 0, this.rowWidth = 0, this.isrowFinish = !1, 
            this.isRowSpanRowHeightSet = !1, this.noOfPageCount = 0, this.isRowHeightSet = !1, 
            this.isPageBreakRowSpanApplied = !1, this.isRowMergeComplete = !0, this.repeatFlag = !1, 
            this.rowFontSplit = !1, this.pdfGrid = grid;
        }
        return Object.defineProperty(PdfGridRow.prototype, "rowSpanExists", {
            get: function() {
                return this.bRowSpanExists;
            },
            set: function(value) {
                this.bRowSpanExists = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "cells", {
            get: function() {
                return null == this.gridCells && (this.gridCells = new PdfGridCellCollection(this)), 
                this.gridCells;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "grid", {
            get: function() {
                return this.pdfGrid;
            },
            set: function(value) {
                this.pdfGrid = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "style", {
            get: function() {
                return void 0 === this.rowStyle && (this.rowStyle = new PdfGridRowStyle(), this.rowStyle.setParent(this)), 
                this.rowStyle;
            },
            set: function(value) {
                this.rowStyle = value;
                for (var i = 0; i < this.cells.count; i++) this.cells.getCell(i).style.borders = value.border, 
                void 0 !== value.font && (this.cells.getCell(i).style.font = value.font), void 0 !== value.backgroundBrush && (this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush), 
                void 0 !== value.backgroundImage && (this.cells.getCell(i).style.backgroundImage = value.backgroundImage), 
                void 0 !== value.textBrush && (this.cells.getCell(i).style.textBrush = value.textBrush), 
                void 0 !== value.textPen && (this.cells.getCell(i).style.textPen = value.textPen);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "rowBreakHeight", {
            get: function() {
                return void 0 === this.gridRowBreakHeight && (this.gridRowBreakHeight = 0), this.gridRowBreakHeight;
            },
            set: function(value) {
                this.gridRowBreakHeight = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "rowOverflowIndex", {
            get: function() {
                return this.gridRowOverflowIndex;
            },
            set: function(value) {
                this.gridRowOverflowIndex = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "height", {
            get: function() {
                return this.isRowHeightSet || (this.rowHeight = this.measureHeight()), this.rowHeight;
            },
            set: function(value) {
                this.rowHeight = value, this.isRowHeightSet = !0;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "width", {
            get: function() {
                return 0 !== this.rowWidth && void 0 !== this.rowWidth || (this.rowWidth = this.measureWidth()), 
                this.rowWidth;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "NestedGridLayoutResult", {
            get: function() {
                return this.gridResult;
            },
            set: function(value) {
                this.gridResult = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "columnSpanExists", {
            get: function() {
                return this.bColumnSpanExists;
            },
            set: function(value) {
                this.bColumnSpanExists = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "rowMergeComplete", {
            get: function() {
                return this.isRowMergeComplete;
            },
            set: function(value) {
                this.isRowMergeComplete = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRow.prototype, "rowIndex", {
            get: function() {
                return this.grid.rows.rowCollection.indexOf(this);
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRow.prototype.measureHeight = function() {
            var rowHeight, rowSpanRemainingHeight = 0, maxHeight = 0;
            rowHeight = this.cells.getCell(0).rowSpan > 1 ? 0 : this.cells.getCell(0).height;
            for (var i = 0; i < this.cells.count; i++) {
                var cell = this.cells.getCell(i);
                if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight && (rowSpanRemainingHeight = cell.rowSpanRemainingHeight), 
                this.rowMergeComplete = !1, cell.rowSpan > 1) {
                    for (var cellIn = i, rowin = this.grid.rows.rowCollection.indexOf(this), j = 0; j < cell.rowSpan; j++) j + 1 < cell.rowSpan && (this.grid.rows.getRow(rowin + j + 1).cells.getCell(cellIn).hasRowSpan = !0);
                    maxHeight < cell.height && (maxHeight = cell.height);
                } else rowHeight = Math.max(rowHeight, cell.height);
            }
            return maxHeight > rowHeight && (rowHeight = maxHeight), 0 === rowHeight ? rowHeight = maxHeight : rowSpanRemainingHeight > 0 && (rowHeight += rowSpanRemainingHeight), 
            rowHeight;
        }, PdfGridRow.prototype.measureWidth = function() {
            for (var rowWid = 0, i = 0; i < this.grid.columns.count; i++) {
                rowWid += this.grid.columns.getColumn(i).width;
            }
            return rowWid;
        }, PdfGridRow;
    }(), PdfGridRowCollection = function() {
        function PdfGridRowCollection(grid) {
            this.rows = [], this.grid = grid;
        }
        return Object.defineProperty(PdfGridRowCollection.prototype, "count", {
            get: function() {
                return this.rows.length;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridRowCollection.prototype, "rowCollection", {
            get: function() {
                return this.rows;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridRowCollection.prototype.addRow = function(arg) {
            if (void 0 === arg) {
                var temprow = new PdfGridRow(this.grid);
                return this.addRow(temprow), temprow;
            }
            if (arg.style.setBackgroundBrush(this.grid.style.backgroundBrush), arg.style.setFont(this.grid.style.font), 
            arg.style.setTextBrush(this.grid.style.textBrush), arg.style.setTextPen(this.grid.style.textPen), 
            0 === arg.cells.count) for (var i = 0; i < this.grid.columns.count; i++) arg.cells.add(new PdfGridCell());
            this.rows.push(arg);
        }, PdfGridRowCollection.prototype.getRow = function(index) {
            return this.rows[index];
        }, PdfGridRowCollection;
    }(), PdfGridHeaderCollection = function() {
        function PdfGridHeaderCollection(grid) {
            this.rows = [], this.grid = grid, this.rows = [];
        }
        return PdfGridHeaderCollection.prototype.getHeader = function(index) {
            return this.rows[index];
        }, Object.defineProperty(PdfGridHeaderCollection.prototype, "count", {
            get: function() {
                return this.rows.length;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridHeaderCollection.prototype.add = function(arg) {
            if ("number" == typeof arg) {
                for (var row = void 0, i = 0; i < arg; i++) {
                    row = new PdfGridRow(this.grid);
                    for (var j = 0; j < this.grid.columns.count; j++) row.cells.add(new PdfGridCell());
                    this.rows.push(row);
                }
                return this.rows;
            }
            this.rows.push(arg);
        }, PdfGridHeaderCollection.prototype.indexOf = function(row) {
            return this.rows.indexOf(row);
        }, PdfGridHeaderCollection;
    }(), __extends$99 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfGrid = function(_super) {
        function PdfGrid() {
            var _this = _super.call(this) || this;
            return _this.gridSize = new SizeF(0, 0), _this.isGridSplit = !1, _this.isRearranged = !1, 
            _this.pageBounds = new RectangleF(), _this.listOfNavigatePages = [], _this.parentCellIndex = 0, 
            _this.tempWidth = 0, _this.breakRow = !0, _this.splitChildRowIndex = -1, _this.hasRowSpanSpan = !1, 
            _this.hasColumnSpan = !1, _this.isSingleGrid = !0, _this;
        }
        return __extends$99(PdfGrid, _super), Object.defineProperty(PdfGrid.prototype, "raiseBeginCellDraw", {
            get: function() {
                return void 0 !== this.beginCellDraw && null !== typeof this.beginCellDraw;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "raiseEndCellDraw", {
            get: function() {
                return void 0 !== this.endCellDraw && null !== typeof this.endCellDraw;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "repeatHeader", {
            get: function() {
                return null != this.bRepeatHeader && void 0 !== this.bRepeatHeader || (this.bRepeatHeader = !1), 
                this.bRepeatHeader;
            },
            set: function(value) {
                this.bRepeatHeader = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "allowRowBreakAcrossPages", {
            get: function() {
                return this.breakRow;
            },
            set: function(value) {
                this.breakRow = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "columns", {
            get: function() {
                return null != this.gridColumns && void 0 !== this.gridColumns || (this.gridColumns = new PdfGridColumnCollection(this)), 
                this.gridColumns;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "rows", {
            get: function() {
                return null == this.gridRows && (this.gridRows = new PdfGridRowCollection(this)), 
                this.gridRows;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "headers", {
            get: function() {
                return null != this.gridHeaders && void 0 !== this.gridHeaders || (this.gridHeaders = new PdfGridHeaderCollection(this)), 
                this.gridHeaders;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "initialWidth", {
            get: function() {
                return this.gridInitialWidth;
            },
            set: function(value) {
                this.gridInitialWidth = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "style", {
            get: function() {
                return null == this.gridStyle && (this.gridStyle = new PdfGridStyle()), this.gridStyle;
            },
            set: function(value) {
                null == this.gridStyle && (this.gridStyle = value);
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "isPageWidth", {
            get: function() {
                return this.ispageWidth;
            },
            set: function(value) {
                this.ispageWidth = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "isChildGrid", {
            get: function() {
                return this.ischildGrid;
            },
            set: function(value) {
                this.ischildGrid = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "size", {
            get: function() {
                return 0 !== this.gridSize.width && void 0 !== this.gridSize.width || 0 !== this.gridSize.height || (this.gridSize = this.measure()), 
                this.gridSize;
            },
            set: function(value) {
                this.gridSize = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "ParentCell", {
            get: function() {
                return this.parentCell;
            },
            set: function(value) {
                this.parentCell = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGrid.prototype, "LayoutFormat", {
            get: function() {
                return this.layoutFormat;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGrid.prototype.draw = function(arg1, arg2, arg3, arg4) {
            if (arg2 instanceof PointF && void 0 === arg2.width && void 0 === arg3) return this.drawHelper(arg1, arg2.x, arg2.y);
            if ("number" == typeof arg2 && "number" == typeof arg3 && void 0 === arg4) return this.drawHelper(arg1, arg2, arg3, null);
            if (arg2 instanceof RectangleF && void 0 !== arg2.width && void 0 === arg3) return this.drawHelper(arg1, arg2, null);
            if (arg2 instanceof PointF && void 0 === arg2.width && arg3 instanceof PdfLayoutFormat) return this.drawHelper(arg1, arg2.x, arg2.y, arg3);
            if ("number" == typeof arg2 && "number" == typeof arg3 && (arg4 instanceof PdfLayoutFormat || null == arg4)) {
                var width = arg1.graphics.clientSize.width - arg2, layoutRectangle = new RectangleF(arg2, arg3, width, 0);
                return this.drawHelper(arg1, layoutRectangle, arg4);
            }
            return arg2 instanceof RectangleF && void 0 !== arg2.width && "boolean" == typeof arg3 ? this.drawHelper(arg1, arg2, null) : this.drawHelper(arg1, arg2, arg3);
        }, PdfGrid.prototype.measure = function() {
            for (var height = 0, width = this.columns.width, i = 0; i < this.headers.count; i++) {
                height += this.headers.getHeader(i).height;
            }
            for (i = 0; i < this.rows.count; i++) {
                height += this.rows.getRow(i).height;
            }
            return new SizeF(width, height);
        }, PdfGrid.prototype.onBeginCellDraw = function(args) {
            this.raiseBeginCellDraw && this.beginCellDraw(this, args);
        }, PdfGrid.prototype.onEndCellDraw = function(args) {
            this.raiseEndCellDraw && this.endCellDraw(this, args);
        }, PdfGrid.prototype.layout = function(param) {
            this.setSpan(), this.checkSpan(), this.layoutFormat = param.format, this.gridLocation = param.bounds;
            return new PdfGridLayouter(this).Layouter(param);
        }, PdfGrid.prototype.setSpan = function() {
            for (var colSpan = 1, rowSpan = 1, currentCellIndex = 0, currentRowIndex = 0, maxSpan = 0, rowCount = this.headers.count, i = 0; i < rowCount; i++) {
                var row = this.headers.getHeader(i);
                maxSpan = 0;
                for (var colCount = row.cells.count, j = 0; j < colCount; j++) {
                    var cell = row.cells.getCell(j);
                    if (maxSpan = Math.max(maxSpan, cell.rowSpan), !cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {
                        if (cell.columnSpan + j > row.cells.count) throw new Error("Invalid span specified at row " + j.toString() + " column " + i.toString());
                        if (cell.rowSpan + i > this.headers.count) throw new Error("Invalid span specified at Header " + j.toString() + " column " + i.toString());
                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {
                            for (colSpan = cell.columnSpan, rowSpan = cell.rowSpan, currentCellIndex = j, currentRowIndex = i, 
                            cell.isCellMergeStart = !0, cell.isRowMergeStart = !0; colSpan > 1; ) currentCellIndex++, 
                            row.cells.getCell(currentCellIndex).isCellMergeContinue = !0, row.cells.getCell(currentCellIndex).isRowMergeContinue = !0, 
                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan, colSpan--;
                            for (currentCellIndex = j, colSpan = cell.columnSpan; rowSpan > 1; ) {
                                for (currentRowIndex++, this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = !0, 
                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = !0, 
                                rowSpan--; colSpan > 1; ) currentCellIndex++, this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = !0, 
                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = !0, 
                                colSpan--;
                                colSpan = cell.columnSpan, currentCellIndex = j;
                            }
                        } else if (cell.columnSpan > 1 && 1 === cell.rowSpan) for (colSpan = cell.columnSpan, 
                        currentCellIndex = j, cell.isCellMergeStart = !0; colSpan > 1; ) currentCellIndex++, 
                        row.cells.getCell(currentCellIndex).isCellMergeContinue = !0, colSpan--; else if (1 === cell.columnSpan && cell.rowSpan > 1) for (rowSpan = cell.rowSpan, 
                        currentRowIndex = i; rowSpan > 1; ) currentRowIndex++, this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = !0, 
                        rowSpan--;
                    }
                }
                row.maximumRowSpan = maxSpan;
            }
        }, PdfGrid.prototype.checkSpan = function() {
            var cellcolSpan, currentCellIndex, cellrowSpan = 1, cellmaxSpan = 0, currentRowIndex = 0;
            if (cellcolSpan = cellrowSpan = 1, currentCellIndex = currentRowIndex = 0, this.hasRowSpanSpan || this.hasColumnSpan) for (var rowCount = this.rows.count, i = 0; i < rowCount; i++) {
                var row = this.rows.getRow(i);
                cellmaxSpan = 0;
                for (var colCount = row.cells.count, j = 0; j < colCount; j++) {
                    var cell = row.cells.getCell(j);
                    if (cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan), !cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {
                        if (cell.columnSpan + j > row.cells.count) throw new Error("Invalid span specified at row  " + j.toString() + " column " + i.toString());
                        if (cell.rowSpan + i > this.rows.count) throw new Error("Invalid span specified at row  " + j.toString() + " column " + i.toString());
                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {
                            for (cellcolSpan = cell.columnSpan, cellrowSpan = cell.rowSpan, currentCellIndex = j, 
                            currentRowIndex = i, cell.isCellMergeStart = !0, cell.isRowMergeStart = !0; cellcolSpan > 1; ) currentCellIndex++, 
                            row.cells.getCell(currentCellIndex).isCellMergeContinue = !0, row.cells.getCell(currentCellIndex).isRowMergeContinue = !0, 
                            cellcolSpan--;
                            for (currentCellIndex = j, cellcolSpan = cell.columnSpan; cellrowSpan > 1; ) {
                                for (currentRowIndex++, this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = !0, 
                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = !0, 
                                cellrowSpan--; cellcolSpan > 1; ) currentCellIndex++, this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = !0, 
                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = !0, 
                                cellcolSpan--;
                                cellcolSpan = cell.columnSpan, currentCellIndex = j;
                            }
                        } else if (cell.columnSpan > 1 && 1 === cell.rowSpan) for (cellcolSpan = cell.columnSpan, 
                        currentCellIndex = j, cell.isCellMergeStart = !0; cellcolSpan > 1; ) currentCellIndex++, 
                        row.cells.getCell(currentCellIndex).isCellMergeContinue = !0, cellcolSpan--; else if (1 === cell.columnSpan && cell.rowSpan > 1) for (cellrowSpan = cell.rowSpan, 
                        currentRowIndex = i; cellrowSpan > 1; ) currentRowIndex++, this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = !0, 
                        cellrowSpan--;
                    }
                }
                row.maximumRowSpan = cellmaxSpan;
            }
        }, PdfGrid.prototype.measureColumnsWidth = function(bounds) {
            if (void 0 !== bounds) {
                this.isPageWidth = !1;
                for (var widths = this.columns.getDefaultWidths(bounds.width - bounds.x), i = 0, count = this.columns.count; i < count; i++) this.columns.getColumn(i).columnWidth = widths[i], 
                this.tempWidth = widths[i];
                if (null != this.ParentCell && 0 == this.style.allowHorizontalOverflow && 0 == this.ParentCell.row.grid.style.allowHorizontalOverflow) {
                    var padding = 0, columnWidth = 0, columnCount = this.columns.count, childGridColumnWidth = 0;
                    null != this.ParentCell.row.grid.style.cellPadding && (padding += this.ParentCell.row.grid.style.cellPadding.top + this.ParentCell.row.grid.style.cellPadding.bottom);
                    for (i = 0; i < this.ParentCell.columnSpan; i++) columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;
                    for (var j = 0; j < this.columns.count; j++) this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth && (columnWidth -= this.gridColumns.getColumn(j).width, 
                    columnCount--);
                    if (0 != this.ParentCell.row.grid.style.cellSpacing && (columnWidth -= 2 * this.ParentCell.row.grid.style.cellSpacing), 
                    columnWidth > padding && (childGridColumnWidth = 1 != padding ? (columnWidth - padding) / columnCount : columnWidth / columnCount, 
                    this.tempWidth = childGridColumnWidth, null != this.ParentCell && this.ParentCell.stringFormat.alignment != PdfTextAlignment.Right)) for (j = 0; j < this.columns.count; j++) this.columns.getColumn(j).isCustomWidth || (this.columns.getColumn(j).columnWidth = childGridColumnWidth);
                }
            } else {
                widths = [ this.columns.count ];
                for (var n = 0; n < this.columns.count; n++) widths[n] = 0;
                var cellWidth = 0;
                if ((void 0 === this.isChildGrid && void 0 !== this.gridLocation || null === this.isChildGrid && void 0 !== this.gridLocation) && (this.initialWidth = this.gridLocation.width), 
                this.headers.count > 0) {
                    var colCount_1 = this.headers.getHeader(0).cells.count, rowCount = this.headers.count;
                    for (i = 0; i < colCount_1; i++) {
                        cellWidth = 0;
                        for (j = 0; j < rowCount; j++) {
                            var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);
                            cellWidth = Math.max(cellWidth, rowWidth);
                        }
                        widths[i] = cellWidth;
                    }
                }
                cellWidth = 0;
                i = 0;
                for (var colCount_2 = this.columns.count; i < colCount_2; i++) {
                    for (j = 0, rowCount = this.rows.count; j < rowCount; j++) if (1 == this.rows.getRow(j).cells.getCell(i).columnSpan && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue || null != this.rows.getRow(j).cells.getCell(i).value) {
                        if (null != this.rows.getRow(j).cells.getCell(i).value && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) this.rows.getRow(j).grid.style.cellPadding.right, 
                        this.rows.getRow(j).grid.style.cellPadding.left, this.rows.getRow(j).cells.getCell(i).style.borders.left.width;
                        rowWidth = 0;
                        rowWidth = this.initialWidth > 0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width, 
                        cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth)), cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);
                    }
                    0 != this.rows.count && (widths[i] = cellWidth), cellWidth = 0;
                }
                i = 0;
                for (var RowCount = this.rows.count; i < RowCount; i++) {
                    j = 0;
                    for (var ColCount = this.columns.count; j < ColCount; j++) if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {
                        widths[j];
                        for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) widths[j + k];
                    }
                }
                for (i = 0, count = this.columns.count; i < count; i++) this.columns.getColumn(i).width <= 0 ? this.columns.getColumn(i).columnWidth = widths[i] : this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && (this.columns.getColumn(i).columnWidth = widths[i]);
                padding = 0;
                var colWidth = 0, colCount = this.columns.count, childGridColWidth = 0;
                colWidth = this.tempWidth;
                for (j = 0; j < this.columns.count; j++) this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth && (colWidth -= this.gridColumns.getColumn(j).width, 
                colCount--);
                if (null != this.style.cellPadding && (padding += this.style.cellPadding.top + this.style.cellPadding.bottom), 
                colWidth > 0 && (null != this.ParentCell.row.grid.style.cellPadding && (padding += this.ParentCell.row.grid.style.cellPadding.top + this.ParentCell.row.grid.style.cellPadding.bottom), 
                0 != this.ParentCell.row.grid.style.cellSpacing && (colWidth -= 2 * this.ParentCell.row.grid.style.cellSpacing)), 
                colWidth > padding && (childGridColWidth = 1 != padding ? (colWidth - padding) / colCount : colWidth / colCount, 
                null != this.ParentCell && this.ParentCell.stringFormat.alignment != PdfTextAlignment.Right)) for (j = 0; j < this.columns.count; j++) this.columns.getColumn(j).isCustomWidth || (this.columns.getColumn(j).columnWidth = childGridColWidth);
            }
        }, PdfGrid;
    }(PdfLayoutElement), __extends$98 = function() {
        var extendStatics = function(d, b) {
            return (extendStatics = Object.setPrototypeOf || {
                __proto__: []
            } instanceof Array && function(d, b) {
                d.__proto__ = b;
            } || function(d, b) {
                for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
            })(d, b);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), PdfGridLayouter = function(_super) {
        function PdfGridLayouter(baseFormat) {
            var _this = _super.call(this, baseFormat) || this;
            return _this.gridInitialWidth = 0, _this.gridSize = new SizeF(0, 0), _this.parentCellIndex = 0, 
            _this.tempWidth = 0, _this.childheight = 0, _this.isChildGrid = !1, _this.hasRowSpanSpan = !1, 
            _this.isRearranged = !1, _this.pageBounds = new RectangleF(), _this.listOfNavigatePages = [], 
            _this.flag = !0, _this.columnRanges = [], _this.currentLocation = new PointF(0, 0), 
            _this.breakRow = !0, _this.isOverloadWithPosition = !1, _this;
        }
        return __extends$98(PdfGridLayouter, _super), Object.defineProperty(PdfGridLayouter.prototype, "Grid", {
            get: function() {
                return this.elements;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridLayouter.prototype.getFormat = function(format) {
            return format;
        }, PdfGridLayouter.prototype.layoutInternal = function(param) {
            var format = this.getFormat(param.format);
            if (this.gridLayoutFormat = this.getFormat(param.format), this.currentPage = param.page, 
            null === this.currentPage) throw Error("Can not set page as null");
            this.currentPage.getClientSize().height, this.currentPage.getClientSize().width;
            this.currentPageBounds = this.currentPage.getClientSize(), this.currentGraphics = this.currentPage.graphics;
            var index = 0;
            if (index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page), 
            this.listOfNavigatePages.push(index), null != format && format.break === PdfLayoutBreakType.FitColumnsToPage ? this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height)) : this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize), 
            0 !== this.Grid.rows.count) this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2; else {
                if (0 === this.Grid.headers.count) throw Error("Please add row or header into grid");
                this.currentBounds.width = param.bounds.width;
            }
            if (this.startLocation = new PointF(param.bounds.x, param.bounds.y), param.bounds.height > 0 && !this.Grid.isChildGrid && (this.currentBounds.height = param.bounds.height), 
            this.Grid.isChildGrid || (this.hType = this.Grid.style.horizontalOverflowType), 
            this.Grid.style.allowHorizontalOverflow ? (this.Grid.measureColumnsWidth(), this.determineColumnDrawRanges()) : (this.columnRanges = [], 
            this.Grid.measureColumnsWidth(this.currentBounds), this.columnRanges.push([ 0, this.Grid.columns.count - 1 ])), 
            this.Grid.hasRowSpanSpan) for (var i = 0; i < this.Grid.rows.count; i++) {
                this.Grid.rows.getRow(i).height;
                this.Grid.rows.getRow(i).isRowHeightSet || (this.Grid.rows.getRow(i).isRowHeightSet = !0);
            }
            return this.layoutOnPage(param);
        }, PdfGridLayouter.prototype.determineColumnDrawRanges = function() {
            for (var startColumn = 0, endColumn = 0, cellWidths = 0, availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x, i = 0; i < this.Grid.columns.count; i++) if ((cellWidths += this.Grid.columns.getColumn(i).width) >= availableWidth) {
                for (var subWidths = 0, j = startColumn; j <= i && !((subWidths += this.Grid.columns.getColumn(j).width) > availableWidth); j++) endColumn = j;
                this.columnRanges.push([ startColumn, endColumn ]), cellWidths = (endColumn = startColumn = endColumn + 1) <= i ? this.Grid.columns.getColumn(i).width : 0;
            }
            this.columnRanges.push([ startColumn, this.Grid.columns.count - 1 ]);
        }, PdfGridLayouter.prototype.layoutOnPage = function(param) {
            this.pageBounds.x = param.bounds.x, this.pageBounds.y = param.bounds.y, this.pageBounds.height = param.bounds.height;
            for (var format = this.getFormat(param.format), result = null, layoutedPages = new TemporaryDictionary(), startPage = param.page, cellBounds = [], index = 0; index < this.columnRanges.length; index++) {
                var range = this.columnRanges[index];
                this.cellStartIndex = range[0], this.cellEndIndex = range[1];
                var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);
                this.currentBounds = returnObject.currentBounds, this.currentRowIndex = returnObject.currentRowIndex;
                for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {
                    var row = this.Grid.headers.getHeader(i_1);
                    this.currentBounds.y, this.drawRow(row);
                }
                var i = 0, repeatRow = (this.Grid.rows.count, void 0), flag = !0;
                cellBounds = [];
                for (var j = 0; j < this.Grid.rows.count; j++) {
                    row = this.Grid.rows.getRow(j);
                    i++, this.currentRowIndex = i - 1;
                    var originalHeight = this.currentBounds.y;
                    startPage = this.currentPage, PdfGridLayouter.repeatRowIndex = -1, flag && row.grid.isChildGrid && (flag = !1);
                    var rowResult = null;
                    if (-1 == this.Grid.splitChildRowIndex) rowResult = this.drawRow(row), row.isrowFinish = !0; else {
                        if (!(row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex)) {
                            if (row.isrowFinish) continue;
                            break;
                        }
                        rowResult = this.drawRow(row), row.isrowFinish = !0;
                    }
                    for (cellBounds.push(rowResult.bounds.width), originalHeight === this.currentBounds.y ? (repeatRow = !0, 
                    PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row)) : (repeatRow = !1, 
                    PdfGridLayouter.repeatRowIndex = -1); !rowResult.isFinish && null != startPage; ) {
                        var tempResult = this.getLayoutResult();
                        if (this.raisePageLayouted(tempResult).cancel || repeatRow) break;
                        if (this.Grid.allowRowBreakAcrossPages) {
                            this.currentPage = this.getNextPageformat(format), originalHeight = this.currentBounds.y;
                            new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);
                            if (this.Grid.isChildGrid && null != row.grid.ParentCell && null != this.Grid.ParentCell.row.grid.style.cellPadding && row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height && (this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top), 
                            null != row.grid.ParentCell) {
                                row.grid.ParentCell.row.isRowBreaksNextPage = !0, row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;
                                for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;
                            }
                            if (row.grid.isChildGrid) {
                                row.isrowFinish = !1, row.grid.splitChildRowIndex = row.rowIndex, row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex, 
                                row.grid.ParentCell.row.grid.isGridSplit && (row.grid.ParentCell.row.noOfPageCount += 1, 
                                row.grid.ParentCell.row.grid.isGridSplit = !1);
                                break;
                            }
                            if (row.noOfPageCount < 1) {
                                if (-1 != row.grid.splitChildRowIndex && (row.grid.isGridSplit = !0), this.currentBounds.y = .5, 
                                this.Grid.repeatHeader) for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {
                                    var headerRepeat = this.Grid.headers.getHeader(j_1);
                                    this.drawRow(headerRepeat);
                                }
                                if (rowResult = this.drawRow(row), row.noOfPageCount >= 1) {
                                    row.rowBreakHeightValue;
                                    for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {
                                        var tempResult1 = this.getLayoutResult();
                                        if (this.raisePageLayouted(tempResult1), this.currentPage = this.getNextPageformat(format), 
                                        originalHeight = this.currentBounds.y, -1 != row.grid.splitChildRowIndex && (row.grid.isGridSplit = !0), 
                                        this.currentBounds.y = .5, this.Grid.repeatHeader) for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {
                                            var header = this.Grid.headers.getHeader(i_3);
                                            this.drawRow(header);
                                        }
                                        this.drawRow(row);
                                    }
                                }
                                row.grid.splitChildRowIndex = -1, row.grid.isGridSplit = !1, rowResult.isFinish = !0;
                                for (var i_4 = 0; i_4 < row.cells.count; i_4++) row.cells.getCell(i_4).value instanceof PdfGrid && (row.cells.getCell(i_4).value.splitChildRowIndex = -1);
                            }
                        }
                    }
                    if (!rowResult.isFinish && null !== startPage && format.layout !== PdfLayoutType.OnePage && repeatRow) {
                        if (this.startLocation.x = this.currentBounds.x, this.currentPage = this.getNextPageformat(format), 
                        null !== param.format && !param.format.usePaginateBounds && null !== param.bounds && param.bounds.height > 0 && !this.Grid.isChildGrid && (this.currentBounds.height = param.bounds.height), 
                        null !== param.format && !param.format.usePaginateBounds && null !== param.bounds && param.bounds.y > 0 && !this.Grid.isChildGrid && (this.currentBounds.y = param.bounds.y), 
                        this.startLocation.y = this.currentBounds.y, format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && 0 === format.paginateBounds.width && (this.currentBounds.x += this.startLocation.x), 
                        this.currentBounds.x === PdfBorders.default.left.width / 2 && (this.currentBounds.y += this.startLocation.x), 
                        this.Grid.repeatHeader) for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {
                            header = this.Grid.headers.getHeader(i_5);
                            this.drawRow(header);
                        }
                        this.drawRow(row), null === this.currentPage || layoutedPages.containsKey(this.currentPage) || layoutedPages.add(this.currentPage, range);
                    }
                    if (null != row.NestedGridLayoutResult) {
                        this.currentPage = row.NestedGridLayoutResult.page, this.currentGraphics = this.currentPage.graphics, 
                        this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);
                        var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);
                        if (this.currentBounds.y = recalHeight, startPage != this.currentPage) {
                            for (var secion = this.currentPage.section, startIndex = secion.indexOf(startPage) + 1, endIndex = secion.indexOf(this.currentPage), page = startIndex; page < endIndex + 1; page++) {
                                var pageGraphics = this.currentPage.graphics, location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y), height = page == endIndex ? row.NestedGridLayoutResult.bounds.height - param.bounds.y : this.currentBounds.height - location_2.y;
                                height <= pageGraphics.clientSize.height && (height += param.bounds.y), location_2.y = null == format ? .5 : format.paginateBounds.y;
                                for (var c = 0; c < row.cells.count; c++) {
                                    var cell = row.cells.getCell(c), cellWidth = 0, totalwidth = 0;
                                    if (cell.value instanceof PdfGrid) for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) totalwidth += cell.value.columns.getColumn(i_6).columnWidth; else totalwidth = cell.width;
                                    cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width), cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height))), 
                                    location_2.x += cellWidth, c += cell.columnSpan - 1;
                                }
                            }
                            startPage = this.currentPage;
                        }
                    }
                }
                var isPdfGrid = !1, maximumCellBoundsWidth = 0;
                cellBounds.length > 0 && (maximumCellBoundsWidth = cellBounds[0]);
                var largeNavigatePage = [ [ 1, 2 ] ];
                for (c = 0; c < this.Grid.rows.count; c++) if (-1 != this.cellEndIndex && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {
                    var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;
                    this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth, isPdfGrid = !0;
                }
                if (!isPdfGrid && cellBounds.length > 0) {
                    for (c = 0; c < i - 1; c++) maximumCellBoundsWidth < cellBounds[c] && (maximumCellBoundsWidth = cellBounds[c]);
                    this.rowLayoutBoundsWidth = maximumCellBoundsWidth;
                } else this.rowLayoutBoundsWidth = largeNavigatePage[0][1];
                if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && null != startPage && format.layout != PdfLayoutType.OnePage) if (this.Grid.isChildGrid, 
                0 != largeNavigatePage[0][0]) {
                    this.currentPage.section.indexOf(this.currentPage);
                    this.currentGraphics = this.currentPage.graphics, this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());
                    this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
                } else this.currentPage = this.getNextPageformat(format);
                this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage && (this.currentPage = this.getNextPageformat(format), 
                format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && 0 === format.paginateBounds.width && (this.currentBounds.x += this.startLocation.x, 
                this.currentBounds.y += this.startLocation.y));
            }
            return result = this.getLayoutResult(), this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage && this.reArrangePages(layoutedPages), 
            this.raisePageLayouted(result), result;
        }, PdfGridLayouter.prototype.getNextPageformat = function(format) {
            var section = this.currentPage.section, nextPage = null, index = section.indexOf(this.currentPage);
            this.flag = !1, nextPage = index === section.count - 1 ? section.add() : section.getPages()[index + 1], 
            this.currentGraphics = nextPage.graphics;
            var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);
            return -1 === this.listOfNavigatePages.indexOf(pageindex) && this.listOfNavigatePages.push(pageindex), 
            this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize()), 
            nextPage;
        }, PdfGridLayouter.prototype.CheckIfDefaultFormat = function(format) {
            var defaultFormat = new PdfStringFormat();
            return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;
        }, PdfGridLayouter.prototype.RaiseBeforeCellDraw = function(graphics, rowIndex, cellIndex, bounds, value, style) {
            var args = null;
            return this.Grid.raiseBeginCellDraw && (args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style), 
            this.Grid.onBeginCellDraw(args), style = args.style), style;
        }, PdfGridLayouter.prototype.raiseAfterCellDraw = function(graphics, rowIndex, cellIndex, bounds, value, cellstyle) {
            var args = null;
            this.Grid.raiseEndCellDraw && (args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle), 
            this.Grid.onEndCellDraw(args));
        }, PdfGridLayouter.prototype.reArrangePages = function(layoutedPages) {
            for (var document = this.currentPage.document, pages = [], keys = layoutedPages.keys(), i = (layoutedPages.values(), 
            0); i < keys.length; i++) {
                (page = keys[i]).section = null, pages.push(page), document.pages.remove(page);
            }
            for (i = 0; i < layoutedPages.size(); i++) for (var j = i, count_1 = layoutedPages.size() / this.columnRanges.length; j < layoutedPages.size(); j += count_1) {
                var page = pages[j];
                -1 === document.pages.indexOf(page) && document.pages.add(page);
            }
        }, PdfGridLayouter.prototype.getLayoutResult = function() {
            if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) for (var i = 0; i < this.Grid.rows.count; i++) {
                var row = this.Grid.rows.getRow(i);
                row.rowBreakHeight > 0 && row.repeatFlag && (this.startLocation.y = this.currentPage.origin.y);
            }
            var bounds;
            return this.isChanged || (bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y))), 
            new PdfGridLayoutResult(this.currentPage, bounds);
        }, PdfGridLayouter.prototype.ReCalculateHeight = function(row, height) {
            for (var newHeight = 0, i = this.cellStartIndex; i <= this.cellEndIndex; i++) null !== row.cells.getCell(i).remainingString && "" !== row.cells.getCell(i).remainingString && void 0 !== row.cells.getCell(i).remainingString && (newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight()));
            return Math.max(height, newHeight);
        }, PdfGridLayouter.prototype.raiseBeforePageLayout = function(currentPage, currentBounds, currentRow) {
            var cancel = !1;
            if (this.Grid.raiseBeginPageLayout) {
                var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);
                this.Grid.onBeginPageLayout(args), cancel = args.cancel, currentBounds = args.bounds, 
                currentRow = args.startRowIndex;
            }
            return {
                returnValue: cancel,
                currentBounds: currentBounds,
                currentRowIndex: currentRow
            };
        }, PdfGridLayouter.prototype.raisePageLayouted = function(result) {
            var args = new PdfGridEndPageLayoutEventArgs(result);
            return this.Grid.raiseEndPageLayout && this.Grid.onEndPageLayout(args), args;
        }, PdfGridLayouter.prototype.drawRow = function(row, result, height) {
            if (void 0 === result) {
                var result_1 = new RowLayoutResult(), rowHeightWithSpan = 0, size = new SizeF(0, 0), isHeader = !1;
                if (row.rowSpanExists) {
                    var maxSpan = 0, currRowIndex = this.Grid.rows.rowCollection.indexOf(row);
                    -1 === currRowIndex && -1 !== (currRowIndex = this.Grid.headers.indexOf(row)) && (isHeader = !0);
                    for (var i = 0; i < row.cells.count; i++) {
                        var cell = row.cells.getCell(i);
                        maxSpan = Math.max(maxSpan, cell.rowSpan);
                    }
                    for (i = currRowIndex; i < currRowIndex + maxSpan; i++) rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height;
                }
                var calculatedHeight = row.rowBreakHeight > 0 ? row.rowBreakHeight : row.height;
                return this.Grid.isChildGrid && null != this.Grid.ParentCell ? this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height ? (this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage && (PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row), 
                this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row)), PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex && this.Grid.allowRowBreakAcrossPages && (result_1.isFinish = !0, 
                result_1.bounds = this.currentBounds, this.drawRowWithBreak(result_1, row, calculatedHeight), 
                row.repeatFlag = !0, row.repeatRowNumber = PdfGridLayouter.repeatRowIndex)) : (result_1.isFinish = !0, 
                row.grid.ParentCell.row.rowBreakHeightValue > 0 ? row.repeatFlag = !0 : (row.repeatFlag = !1, 
                calculatedHeight = row.height), this.Grid.isChildGrid && row.rowBreakHeight > 0 && null != this.Grid.ParentCell.row.grid.style.cellPadding && (calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom), 
                this.drawRow(row, result_1, calculatedHeight)) : calculatedHeight > this.currentPageBounds.height ? this.Grid.allowRowBreakAcrossPages && (result_1.isFinish = !0, 
                this.drawRowWithBreak(result_1, row, calculatedHeight), row.isrowFinish = !0, row.repeatFlag = !0, 
                -1 !== row.grid.splitChildRowIndex && (result_1.isFinish = !1)) : this.currentBounds.y + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + calculatedHeight > this.currentBounds.height + this.startLocation.y || this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height ? (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitPage && (PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row)), 
                PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex ? this.Grid.allowRowBreakAcrossPages && (result_1.isFinish = !0, 
                this.drawRowWithBreak(result_1, row, calculatedHeight), row.repeatFlag = !0, row.repeatRowNumber = PdfGridLayouter.repeatRowIndex, 
                -1 !== row.grid.splitChildRowIndex && (result_1.isFinish = !1)) : result_1.isFinish = !1) : (result_1.isFinish = !0, 
                this.drawRow(row, result_1, calculatedHeight), row.repeatFlag = !1), result_1;
            }
            var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);
            result.bounds = new RectangleF(location_4, new SizeF(0, 0)), height = this.ReCalculateHeight(row, height);
            for (i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
                var cancelSpans = i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1;
                if (!cancelSpans) for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) row.cells.getCell(i + j).isCellMergeContinue = !0;
                size = new SizeF(this.Grid.columns.getColumn(i).width, height);
                !this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) && this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat) && (row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format);
                var cellstyle = row.cells.getCell(i).style, tempValue = "string" == typeof row.cells.getCell(i).value && null !== row.cells.getCell(i).value ? row.cells.getCell(i).value : "";
                if (row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle), 
                row.cells.getCell(i).value instanceof PdfGrid) {
                    (grid = row.cells.getCell(i).value).parentCellIndex = i;
                }
                var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);
                if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1 && (row.rowOverflowIndex = this.cellEndIndex), 
                row.grid.style.allowHorizontalOverflow && row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0 && (row.cells.getCell(row.rowOverflowIndex + 1).value = null !== stringResult && void 0 !== stringResult.remainder ? stringResult.remainder : "", 
                row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat, 
                row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style, 
                row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1), 
                tempValue = "string" == typeof row.cells.getCell(i).value && null !== row.cells.getCell(i).value ? row.cells.getCell(i).value : "", 
                cancelSpans || this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style), 
                row.cells.getCell(i).value instanceof PdfGrid) {
                    var grid = row.cells.getCell(i).value;
                    this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width ? (location_4.x = grid.rowLayoutBoundsWidth, 
                    location_4.x += grid.style.cellSpacing) : location_4.x += this.Grid.columns.getColumn(i).width;
                } else location_4.x += this.Grid.columns.getColumn(i).width;
            }
            row.rowMergeComplete && !row.isRowHeightSet || (this.currentBounds.y += height), 
            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));
        }, PdfGridLayouter.prototype.drawRowWithBreak = function(result, row, calculateHeight) {
            var location = new PointF(this.currentBounds.x, this.currentBounds.y);
            row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && (location.x = this.startLocation.x), 
            result.bounds = new RectangleF(location, new SizeF(0, 0)), this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0, 
            row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height && (row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height);
            for (var i = 0; i < row.cells.count; i++) {
                var cell = row.cells.getCell(i);
                cell.measureHeight() === calculateHeight && cell.value instanceof PdfGrid && (row.rowBreakHeight = 0);
            }
            for (i = this.cellStartIndex; i <= this.cellEndIndex; i++) {
                var cancelSpans = row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1, size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0 ? this.gridHeight : this.currentPageBounds.height), cellstyle1 = row.cells.getCell(i).style;
                row.cells.getCell(i).style = cellstyle1;
                var stringResult = null;
                if (stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans), 
                row.rowBreakHeight > 0 && null != stringResult && (row.cells.getCell(i).FinishedDrawingCell = !1, 
                row.cells.getCell(i).remainingString = null == stringResult.remainder ? " " : stringResult.remainder, 
                row.grid.isChildGrid && (row.rowBreakHeight = calculateHeight - stringResult.actualSize.height)), 
                result.isFinish = result.isFinish ? row.cells.getCell(i).FinishedDrawingCell : result.isFinish, 
                row.cells.getCell(i).value instanceof PdfGrid) {
                    var grid = row.cells.getCell(i).value;
                    this.rowBreakPageHeightCellIndex = i, this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width ? (location.x = this.rowLayoutBoundsWidth, 
                    location.x += grid.style.cellSpacing) : location.x += this.Grid.columns.getColumn(i).width;
                } else location.x += this.Grid.columns.getColumn(i).width;
            }
            this.currentBounds.y += this.gridHeight > 0 ? this.gridHeight : calculateHeight, 
            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));
        }, PdfGridLayouter.repeatRowIndex = -1, PdfGridLayouter;
    }(ElementLayouter), PdfGridLayoutResult = function(_super) {
        function PdfGridLayoutResult(page, bounds) {
            return _super.call(this, page, bounds) || this;
        }
        return __extends$98(PdfGridLayoutResult, _super), PdfGridLayoutResult;
    }(PdfLayoutResult), PdfGridLayoutFormat = function(_super) {
        function PdfGridLayoutFormat(baseFormat) {
            return void 0 === baseFormat ? _super.call(this) || this : _super.call(this, baseFormat) || this;
        }
        return __extends$98(PdfGridLayoutFormat, _super), PdfGridLayoutFormat;
    }(PdfLayoutFormat), GridCellEventArgs = function() {
        function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {
            this.gridRowIndex = rowIndex, this.gridCellIndex = cellIndex, this.internalValue = value, 
            this.gridBounds = bounds, this.pdfGraphics = graphics;
        }
        return Object.defineProperty(GridCellEventArgs.prototype, "rowIndex", {
            get: function() {
                return this.gridRowIndex;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GridCellEventArgs.prototype, "cellIndex", {
            get: function() {
                return this.gridCellIndex;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GridCellEventArgs.prototype, "value", {
            get: function() {
                return this.internalValue;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GridCellEventArgs.prototype, "bounds", {
            get: function() {
                return this.gridBounds;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(GridCellEventArgs.prototype, "graphics", {
            get: function() {
                return this.pdfGraphics;
            },
            enumerable: !0,
            configurable: !0
        }), GridCellEventArgs;
    }(), PdfGridBeginCellDrawEventArgs = function(_super) {
        function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {
            var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
            return _this.style = style, _this;
        }
        return __extends$98(PdfGridBeginCellDrawEventArgs, _super), Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, "skip", {
            get: function() {
                return this.bSkip;
            },
            set: function(value) {
                this.bSkip = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, "style", {
            get: function() {
                return this.cellStyle;
            },
            set: function(value) {
                this.cellStyle = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridBeginCellDrawEventArgs;
    }(GridCellEventArgs), PdfGridEndCellDrawEventArgs = function(_super) {
        function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {
            var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;
            return _this.cellStyle = style, _this;
        }
        return __extends$98(PdfGridEndCellDrawEventArgs, _super), Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, "style", {
            get: function() {
                return this.cellStyle;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridEndCellDrawEventArgs;
    }(GridCellEventArgs), PdfCancelEventArgs = function() {
        function PdfCancelEventArgs() {}
        return Object.defineProperty(PdfCancelEventArgs.prototype, "cancel", {
            get: function() {
                return this.isCancel;
            },
            set: function(value) {
                this.isCancel = value;
            },
            enumerable: !0,
            configurable: !0
        }), PdfCancelEventArgs;
    }(), BeginPageLayoutEventArgs = function(_super) {
        function BeginPageLayoutEventArgs(bounds, page) {
            var _this = _super.call(this) || this;
            return _this.bounds = bounds, _this.pdfPage = page, _this;
        }
        return __extends$98(BeginPageLayoutEventArgs, _super), Object.defineProperty(BeginPageLayoutEventArgs.prototype, "bounds", {
            get: function() {
                return this.cellBounds;
            },
            set: function(value) {
                this.cellBounds = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(BeginPageLayoutEventArgs.prototype, "page", {
            get: function() {
                return this.pdfPage;
            },
            enumerable: !0,
            configurable: !0
        }), BeginPageLayoutEventArgs;
    }(PdfCancelEventArgs), EndPageLayoutEventArgs = function(_super) {
        function EndPageLayoutEventArgs(result) {
            var _this = _super.call(this) || this;
            return _this.layoutResult = result, _this;
        }
        return __extends$98(EndPageLayoutEventArgs, _super), Object.defineProperty(EndPageLayoutEventArgs.prototype, "result", {
            get: function() {
                return this.layoutResult;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(EndPageLayoutEventArgs.prototype, "nextPage", {
            get: function() {
                return this.nextPdfPage;
            },
            set: function(value) {
                this.nextPdfPage = value;
            },
            enumerable: !0,
            configurable: !0
        }), EndPageLayoutEventArgs;
    }(PdfCancelEventArgs), PdfGridBeginPageLayoutEventArgs = function(_super) {
        function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {
            var _this = _super.call(this, bounds, page) || this;
            return _this.startRow = startRow, _this;
        }
        return __extends$98(PdfGridBeginPageLayoutEventArgs, _super), Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, "startRowIndex", {
            get: function() {
                return this.startRow;
            },
            enumerable: !0,
            configurable: !0
        }), PdfGridBeginPageLayoutEventArgs;
    }(BeginPageLayoutEventArgs), PdfGridEndPageLayoutEventArgs = function(_super) {
        function PdfGridEndPageLayoutEventArgs(result) {
            return _super.call(this, result) || this;
        }
        return __extends$98(PdfGridEndPageLayoutEventArgs, _super), PdfGridEndPageLayoutEventArgs;
    }(EndPageLayoutEventArgs), RowLayoutResult = function() {
        function RowLayoutResult() {
            this.layoutedBounds = new RectangleF(0, 0, 0, 0);
        }
        return Object.defineProperty(RowLayoutResult.prototype, "isFinish", {
            get: function() {
                return this.bIsFinished;
            },
            set: function(value) {
                this.bIsFinished = value;
            },
            enumerable: !0,
            configurable: !0
        }), Object.defineProperty(RowLayoutResult.prototype, "bounds", {
            get: function() {
                return this.layoutedBounds;
            },
            set: function(value) {
                this.layoutedBounds = value;
            },
            enumerable: !0,
            configurable: !0
        }), RowLayoutResult;
    }(), _pdfexport = Object.freeze({
        PdfAction: PdfAction,
        PdfUriAction: PdfUriAction,
        PdfActionLinkAnnotation: PdfActionLinkAnnotation,
        PdfAnnotation: PdfAnnotation,
        PdfAnnotationCollection: PdfAnnotationCollection,
        PdfDocumentLinkAnnotation: PdfDocumentLinkAnnotation,
        PdfLinkAnnotation: PdfLinkAnnotation,
        PdfTextWebLink: PdfTextWebLink,
        PdfUriAnnotation: PdfUriAnnotation,
        Dictionary: Dictionary,
        defaultToString: defaultToString,
        PdfCatalog: PdfCatalog,
        PdfDocument: PdfDocument,
        PdfDocumentBase: PdfDocumentBase,
        PdfDocumentTemplate: PdfDocumentTemplate,
        PdfPageNumberField: PdfPageNumberField,
        PdfCompositeField: PdfCompositeField,
        PdfPageCountField: PdfPageCountField,
        PointF: PointF,
        SizeF: SizeF,
        RectangleF: RectangleF,
        Rectangle: Rectangle,
        PdfCacheCollection: PdfCacheCollection,
        PdfCollection: PdfCollection,
        PdfDestination: PdfDestination,
        get PdfDestinationMode() {
            return PdfDestinationMode;
        },
        ProcedureSets: ProcedureSets,
        get PdfHorizontalAlignment() {
            return PdfHorizontalAlignment;
        },
        get PdfVerticalAlignment() {
            return PdfVerticalAlignment;
        },
        get PdfTextAlignment() {
            return PdfTextAlignment;
        },
        get TextRenderingMode() {
            return TextRenderingMode;
        },
        get PdfLineJoin() {
            return PdfLineJoin;
        },
        get PdfLineCap() {
            return PdfLineCap;
        },
        get PdfDashStyle() {
            return PdfDashStyle;
        },
        get PdfFillMode() {
            return PdfFillMode;
        },
        get PdfColorSpace() {
            return PdfColorSpace;
        },
        get PdfBlendMode() {
            return PdfBlendMode;
        },
        get PdfGraphicsUnit() {
            return PdfGraphicsUnit;
        },
        get PdfGridImagePosition() {
            return PdfGridImagePosition;
        },
        get PdfTextDirection() {
            return PdfTextDirection;
        },
        PdfColor: PdfColor,
        PdfGraphics: PdfGraphics,
        GetResourceEventHandler: GetResourceEventHandler,
        PdfGraphicsState: PdfGraphicsState,
        PdfMargins: PdfMargins,
        PdfPen: PdfPen,
        PdfResources: PdfResources,
        Guid: Guid,
        PdfTransformationMatrix: PdfTransformationMatrix,
        Matrix: Matrix$1,
        PdfBrush: PdfBrush,
        PdfSolidBrush: PdfSolidBrush,
        PdfTemplate: PdfTemplate,
        PdfLayoutElement: PdfLayoutElement,
        PdfTextElement: PdfTextElement,
        ElementLayouter: ElementLayouter,
        PdfLayoutFormat: PdfLayoutFormat,
        PdfLayoutParams: PdfLayoutParams,
        PdfLayoutResult: PdfLayoutResult,
        TextLayouter: TextLayouter,
        TextPageLayoutResult: TextPageLayoutResult,
        PdfTextLayoutResult: PdfTextLayoutResult,
        get PdfLayoutType() {
            return PdfLayoutType;
        },
        get PdfLayoutBreakType() {
            return PdfLayoutBreakType;
        },
        get PdfFontStyle() {
            return PdfFontStyle;
        },
        get PdfFontFamily() {
            return PdfFontFamily;
        },
        get PdfFontType() {
            return PdfFontType;
        },
        get PdfWordWrapType() {
            return PdfWordWrapType;
        },
        get PdfSubSuperScript() {
            return PdfSubSuperScript;
        },
        get FontEncoding() {
            return FontEncoding;
        },
        get TtfCmapFormat() {
            return TtfCmapFormat;
        },
        get TtfCmapEncoding() {
            return TtfCmapEncoding;
        },
        get TtfPlatformID() {
            return TtfPlatformID;
        },
        get TtfMicrosoftEncodingID() {
            return TtfMicrosoftEncodingID;
        },
        get TtfMacintoshEncodingID() {
            return TtfMacintoshEncodingID;
        },
        get FontDescriptorFlags() {
            return FontDescriptorFlags;
        },
        get TtfCompositeGlyphFlags() {
            return TtfCompositeGlyphFlags;
        },
        PdfFont: PdfFont,
        PdfFontMetrics: PdfFontMetrics,
        WidthTable: WidthTable,
        StandardWidthTable: StandardWidthTable,
        PdfStandardFont: PdfStandardFont,
        PdfStandardFontMetricsFactory: PdfStandardFontMetricsFactory,
        PdfStringFormat: PdfStringFormat,
        PdfStringLayouter: PdfStringLayouter,
        PdfStringLayoutResult: PdfStringLayoutResult,
        LineInfo: LineInfo,
        get LineType() {
            return LineType;
        },
        StringTokenizer: StringTokenizer,
        PdfTrueTypeFont: PdfTrueTypeFont,
        RtlRenderer: RtlRenderer,
        ArabicShapeRenderer: ArabicShapeRenderer,
        ArabicShape: ArabicShape,
        Bidi: Bidi,
        RtlCharacters: RtlCharacters,
        ByteArray: ByteArray,
        get ImageFormat() {
            return ImageFormat;
        },
        ImageDecoder: ImageDecoder,
        PdfBitmap: PdfBitmap,
        PdfImage: PdfImage,
        PdfTransparency: PdfTransparency,
        get ObjectStatus() {
            return ObjectStatus;
        },
        get ObjectType() {
            return ObjectType;
        },
        PdfCrossTable: PdfCrossTable,
        RegisteredObject: RegisteredObject,
        DictionaryProperties: DictionaryProperties,
        PdfMainObjectCollection: PdfMainObjectCollection,
        ObjectInfo: ObjectInfo,
        Operators: Operators,
        PdfStreamWriter: PdfStreamWriter,
        PdfWriter: PdfWriter,
        get PdfPageOrientation() {
            return PdfPageOrientation;
        },
        get PdfPageRotateAngle() {
            return PdfPageRotateAngle;
        },
        get PdfNumberStyle() {
            return PdfNumberStyle;
        },
        get PdfDockStyle() {
            return PdfDockStyle;
        },
        get PdfAlignmentStyle() {
            return PdfAlignmentStyle;
        },
        get TemplateType() {
            return TemplateType;
        },
        PageAddedEventArgs: PageAddedEventArgs,
        PdfDocumentPageCollection: PdfDocumentPageCollection,
        PdfPage: PdfPage,
        PdfPageBase: PdfPageBase,
        PdfPageLayer: PdfPageLayer,
        PdfPageLayerCollection: PdfPageLayerCollection,
        PdfPageSettings: PdfPageSettings,
        PdfPageSize: PdfPageSize,
        PdfPageTemplateElement: PdfPageTemplateElement,
        PdfSection: PdfSection,
        PageSettingsState: PageSettingsState,
        PdfSectionCollection: PdfSectionCollection,
        PdfSectionPageCollection: PdfSectionPageCollection,
        PdfSectionTemplate: PdfSectionTemplate,
        PdfArray: PdfArray,
        PdfDictionary: PdfDictionary,
        SaveSectionCollectionEventHandler: SaveSectionCollectionEventHandler,
        SaveDescendantFontEventHandler: SaveDescendantFontEventHandler,
        SaveFontDictionaryEventHandler: SaveFontDictionaryEventHandler,
        SaveAnnotationEventHandler: SaveAnnotationEventHandler,
        SaveSectionEventHandler: SaveSectionEventHandler,
        SaveTemplateEventHandler: SaveTemplateEventHandler,
        PdfName: PdfName,
        PdfNumber: PdfNumber,
        PdfReference: PdfReference,
        PdfReferenceHolder: PdfReferenceHolder,
        PdfStream: PdfStream,
        SaveCmapEventHandler: SaveCmapEventHandler,
        SaveFontProgramEventHandler: SaveFontProgramEventHandler,
        get InternalEnum() {
            return InternalEnum;
        },
        PdfString: PdfString,
        PdfGridStyleBase: PdfGridStyleBase,
        PdfGridStyle: PdfGridStyle,
        PdfGridCellStyle: PdfGridCellStyle,
        PdfGridRowStyle: PdfGridRowStyle,
        get PdfHorizontalOverflowType() {
            return PdfHorizontalOverflowType;
        },
        PdfBorders: PdfBorders,
        PdfPaddings: PdfPaddings,
        get PdfBorderOverlapStyle() {
            return PdfBorderOverlapStyle;
        },
        PdfGridLayouter: PdfGridLayouter,
        PdfGridLayoutResult: PdfGridLayoutResult,
        PdfGridLayoutFormat: PdfGridLayoutFormat,
        GridCellEventArgs: GridCellEventArgs,
        PdfGridBeginCellDrawEventArgs: PdfGridBeginCellDrawEventArgs,
        PdfGridEndCellDrawEventArgs: PdfGridEndCellDrawEventArgs,
        PdfCancelEventArgs: PdfCancelEventArgs,
        BeginPageLayoutEventArgs: BeginPageLayoutEventArgs,
        EndPageLayoutEventArgs: EndPageLayoutEventArgs,
        PdfGridBeginPageLayoutEventArgs: PdfGridBeginPageLayoutEventArgs,
        PdfGridEndPageLayoutEventArgs: PdfGridEndPageLayoutEventArgs,
        RowLayoutResult: RowLayoutResult,
        PdfGrid: PdfGrid,
        PdfGridColumn: PdfGridColumn,
        PdfGridColumnCollection: PdfGridColumnCollection,
        PdfGridRow: PdfGridRow,
        PdfGridRowCollection: PdfGridRowCollection,
        PdfGridHeaderCollection: PdfGridHeaderCollection,
        PdfGridCell: PdfGridCell,
        PdfGridCellCollection: PdfGridCellCollection
    }), PdfExport = function() {
        function PdfExport(parent) {
            this.hideColumnInclude = !1, this.currentViewData = !1, this.customDataSource = !1, 
            this.isGrouping = !1, this.parent = parent, this.helper = new ExportHelper(parent);
        }
        return PdfExport.prototype.getModuleName = function() {
            return "PdfExport";
        }, PdfExport.prototype.init = function(parent) {
            this.exportValueFormatter = new ExportValueFormatter(parent.locale), this.pdfDocument = void 0, 
            this.hideColumnInclude = !1, this.currentViewData = !1, this.parent = parent;
            var gObj = parent;
            this.isGrouping = !1, this.isExporting = !0;
            var args = {
                requestType: "beforePdfExport",
                gridObject: gObj,
                cancel: !1
            };
            gObj.trigger("beforePdfExport", args);
        }, PdfExport.prototype.Map = function(parent, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
            var _this = this;
            if (this.data = new Data(this.parent), this.isBlob = isBlob, !isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource) && pdfExportProperties.dataSource instanceof DataManager) return new Promise(function(resolve, reject) {
                new DataManager({
                    url: pdfExportProperties.dataSource.dataSource.url,
                    adaptor: pdfExportProperties.dataSource.adaptor
                }).executeQuery(new Query()).then(function(returnType) {
                    _this.init(parent), isNullOrUndefined(pdfDoc) ? _this.pdfDocument = new PdfDocument() : _this.pdfDocument = pdfDoc, 
                    _this.processExport(parent, returnType, pdfExportProperties, isMultipleExport), 
                    _this.isExporting = !1, parent.trigger("pdfExportComplete", _this.isBlob ? {
                        promise: _this.blobPromise
                    } : {}), resolve(_this.pdfDocument);
                });
            });
            var allPromise = [];
            return allPromise.push(this.data.getData({}, ExportHelper.getQuery(parent, this.data))), 
            allPromise.push(this.helper.getColumnData(parent)), Promise.all(allPromise).then(function(e) {
                return _this.init(parent), isNullOrUndefined(pdfDoc) ? _this.pdfDocument = new PdfDocument() : _this.pdfDocument = pdfDoc, 
                _this.processExport(parent, e[0], pdfExportProperties, isMultipleExport), _this.isExporting = !1, 
                parent.trigger("pdfExportComplete", _this.isBlob ? {
                    promise: _this.blobPromise
                } : {}), _this.pdfDocument;
            });
        }, PdfExport.prototype.processExport = function(gObj, returnType, pdfExportProperties, isMultipleExport) {
            isNullOrUndefined(pdfExportProperties) || (this.gridTheme = pdfExportProperties.theme);
            var columns = gObj.columns, dataSource = returnType.result, section = this.pdfDocument.sections.add(), result = this.processExportProperties(pdfExportProperties, dataSource, section);
            isNullOrUndefined((dataSource = result.dataSource).GroupGuid) || (this.isGrouping = !0);
            var pdfPage = (section = result.section).pages.add(), pdfGrid = new PdfGrid(), headerThemeStyle = this.getHeaderThemeStyle(), border = headerThemeStyle.border, headerFont = headerThemeStyle.font, headerBrush = headerThemeStyle.brush, returnValue = this.helper.getHeaders(columns, this.hideColumnInclude), rows = returnValue.rows, gridColumns = returnValue.columns;
            pdfGrid = this.processGridHeaders(dataSource.childLevels, pdfGrid, rows, gridColumns, border, headerFont, headerBrush), 
            this.setColumnProperties(gridColumns, pdfGrid);
            var captionThemeStyle = this.getSummaryCaptionThemeStyle();
            if (!isNullOrUndefined(dataSource) && dataSource.length > 0) {
                if (this.isGrouping ? this.processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, 0, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, returnType) : this.processRecord(border, gridColumns, gObj, dataSource, pdfGrid), 
                !isNullOrUndefined(returnType.aggregates)) {
                    var summaryModel = new SummaryModelGenerator(gObj), sRows = void 0;
                    sRows = this.customDataSource ? summaryModel.generateRows(dataSource, returnType.aggregates) : this.currentViewData ? summaryModel.generateRows(this.parent.getCurrentViewRecords(), returnType.aggregates) : this.isGrouping ? summaryModel.generateRows(dataSource.records, returnType.aggregates) : summaryModel.generateRows(returnType.result, returnType.aggregates), 
                    this.processAggregates(sRows, pdfGrid, border, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, !1);
                }
            } else {
                pdfGrid.rows.addRow().style.setBorder(border);
            }
            pdfGrid.draw(pdfPage, 20, 20), isMultipleExport || (this.isBlob ? this.blobPromise = this.pdfDocument.save() : !isNullOrUndefined(pdfExportProperties) && pdfExportProperties.fileName ? this.pdfDocument.save(pdfExportProperties.fileName) : this.pdfDocument.save("Export.pdf"), 
            this.pdfDocument.destroy());
        }, PdfExport.prototype.getSummaryCaptionThemeStyle = function() {
            if (isNullOrUndefined(this.gridTheme) || isNullOrUndefined(this.gridTheme.caption) || null === this.gridTheme.caption) return {
                font: new PdfStandardFont(PdfFontFamily.Helvetica, 9.75),
                brush: new PdfSolidBrush(new PdfColor(0, 0, 0)),
                backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246))
            };
            isNullOrUndefined(this.gridTheme.caption.fontSize) || this.gridTheme.caption.fontSize;
            var pdfColor = new PdfColor();
            if (!isNullOrUndefined(this.gridTheme.caption.fontColor)) {
                var penBrushColor = this.hexToRgb(this.gridTheme.caption.fontColor);
                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
            }
            return {
                font: new PdfStandardFont(PdfFontFamily.Helvetica, 10.5),
                brush: new PdfSolidBrush(new PdfColor(pdfColor)),
                backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246))
            };
        }, PdfExport.prototype.getHeaderThemeStyle = function() {
            var border = new PdfBorders();
            if (isNullOrUndefined(this.gridTheme) || isNullOrUndefined(this.gridTheme.header)) return border.all = new PdfPen(new PdfColor(234, 234, 234)), 
            {
                border: border,
                font: new PdfStandardFont(PdfFontFamily.Helvetica, 10.5),
                brush: new PdfSolidBrush(new PdfColor(102, 102, 102))
            };
            if (!isNullOrUndefined(this.gridTheme.header.borders) && !isNullOrUndefined(this.gridTheme.header.borders.color)) {
                var borderColor = this.hexToRgb(this.gridTheme.header.borders.color);
                border.all = new PdfPen(new PdfColor(borderColor.r, borderColor.g, borderColor.b));
            }
            var fontSize = isNullOrUndefined(this.gridTheme.header.fontSize) ? 10.5 : this.gridTheme.header.fontSize, pdfColor = new PdfColor();
            if (!isNullOrUndefined(this.gridTheme.header.fontColor)) {
                var penBrushColor = this.hexToRgb(this.gridTheme.header.fontColor);
                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
            }
            return {
                border: border,
                font: new PdfStandardFont(PdfFontFamily.Helvetica, fontSize),
                brush: new PdfSolidBrush(pdfColor)
            };
        }, PdfExport.prototype.processGroupedRecords = function(pdfGrid, dataSource, gridColumns, gObj, border, level, font, brush, backgroundBrush, returnType) {
            for (var groupIndex = level, _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
                var dataSourceItems = dataSource_1[_i], row = pdfGrid.rows.addRow(), col = gObj.getColumnByField(dataSourceItems.field), args = {
                    value: dataSourceItems.key,
                    column: col,
                    style: void 0,
                    isForeignKey: col.isForeignColumn()
                }, value = this.parent.getColumnByField(dataSourceItems.field).headerText + ": " + this.exportValueFormatter.formatCellValue(args) + " - " + dataSourceItems.count + (dataSource.count > 1 ? " items" : " item");
                row.cells.getCell(groupIndex).value = value, row.cells.getCell(groupIndex + 1).style.stringFormat = new PdfStringFormat(PdfTextAlignment.Left), 
                row.style.setBorder(border), row.style.setFont(font), row.style.setTextBrush(brush), 
                row.style.setBackgroundBrush(backgroundBrush);
                var sRows = void 0, captionSummaryModel = new CaptionSummaryModelGenerator(gObj);
                if (sRows = isNullOrUndefined(dataSourceItems.items.records) ? captionSummaryModel.generateRows(dataSourceItems.items, dataSourceItems) : captionSummaryModel.generateRows(dataSourceItems.items.records, dataSourceItems), 
                isNullOrUndefined(sRows) || 0 !== sRows.length || (row.cells.getCell(groupIndex + 1).columnSpan = pdfGrid.columns.count - (groupIndex + 1)), 
                !isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, !0, row, groupIndex), 
                    this.processGroupedRecords(pdfGrid, dataSourceItems.items, gridColumns, gObj, border, groupIndex + 1, font, brush, backgroundBrush, returnType);
                    sRows = new GroupSummaryModelGenerator(gObj).generateRows(dataSourceItems.items.records, dataSourceItems), 
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, !1);
                } else {
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, !0, row, groupIndex), 
                    this.processRecord(border, gridColumns, gObj, dataSourceItems.items, pdfGrid, groupIndex + 1);
                    sRows = new GroupSummaryModelGenerator(gObj).generateRows(dataSourceItems.items, dataSourceItems), 
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, !1);
                }
            }
        }, PdfExport.prototype.processGridHeaders = function(childLevels, pdfGrid, rows, gridColumns, border, headerFont, headerBrush) {
            var columnCount = gridColumns.length, gObj = this.parent;
            if (this.isGrouping && (columnCount += childLevels + 1), pdfGrid.columns.add(columnCount), 
            this.isGrouping) for (var i = 0; i < childLevels + 1; i++) pdfGrid.columns.getColumn(i).width = 20;
            pdfGrid.headers.add(rows.length);
            for (i = 0; i < rows.length; i++) {
                var gridHeader = pdfGrid.headers.getHeader(i);
                gridHeader.style.setBorder(border), gridHeader.style.setFont(headerFont), gridHeader.style.setTextBrush(headerBrush);
                var cellIndex = this.isGrouping ? childLevels + 1 : 0;
                if (0 === rows[i].cells.length) for (var j = 0; j < gridHeader.cells.count; j++) {
                    (cell = gridHeader.cells.getCell(j)).value = "";
                } else {
                    for (j = 0; j < cellIndex; j++) {
                        (cell = gridHeader.cells.getCell(j)).value = "";
                    }
                    for (j = 0; j < rows[i].cells.length; j++) {
                        var cell, args = {
                            cell: cell = gridHeader.cells.getCell(cellIndex),
                            gridCell: rows[i].cells[j],
                            style: cell.style
                        };
                        if (gObj.trigger("pdfHeaderQueryCellInfo", args), null !== cell.value) {
                            if (cell.value = rows[i].cells[j].column.headerText, isNullOrUndefined(rows[i].cells[j].column.headerTextAlign) || (cell.style.stringFormat = this.getHorizontalAlignment(rows[i].cells[j].column.headerTextAlign)), 
                            !isNullOrUndefined(rows[i].cells[j].rowSpan)) {
                                cell.rowSpan = rows[i].cells[j].rowSpan, cell.style.stringFormat = this.getVerticalAlignment("Bottom", cell.style.stringFormat, rows[i].cells[j].column.textAlign);
                                for (var k = 1; k < rows[i].cells[j].rowSpan; k++) pdfGrid.headers.getHeader(i + k).cells.getCell(cellIndex).value = null;
                            }
                            isNullOrUndefined(rows[i].cells[j].colSpan) || (cell.columnSpan = rows[i].cells[j].colSpan), 
                            cellIndex += cell.columnSpan;
                        } else cell.value = "", cellIndex += cell.columnSpan, j -= 1;
                    }
                }
            }
            return pdfGrid.columns.count >= 6 && (pdfGrid.style.allowHorizontalOverflow = !0), 
            pdfGrid;
        }, PdfExport.prototype.processExportProperties = function(pdfExportProperties, dataSource, section) {
            if (isNullOrUndefined(pdfExportProperties)) this.currentViewData = !1, this.customDataSource = !1; else {
                if (isNullOrUndefined(pdfExportProperties.theme) || (this.gridTheme = pdfExportProperties.theme), 
                !isNullOrUndefined(pdfExportProperties.pageOrientation) || !isNullOrUndefined(pdfExportProperties.pageSize)) {
                    var pdfPageSettings = new PdfPageSettings();
                    pdfPageSettings.orientation = "Landscape" === pdfExportProperties.pageOrientation ? PdfPageOrientation.Landscape : PdfPageOrientation.Portrait, 
                    pdfPageSettings.size = this.getPageSize(pdfExportProperties.pageSize), section.setPageSettings(pdfPageSettings);
                }
                var clientSize = this.pdfDocument.pageSettings.size;
                if (!isNullOrUndefined(pdfExportProperties.header)) {
                    var header = pdfExportProperties.header, position = new PointF(0, header.fromTop), size = new SizeF(clientSize.width - 80, .75 * header.height), bounds = new RectangleF(position, size);
                    this.pdfDocument.template.top = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
                }
                if (!isNullOrUndefined(pdfExportProperties.footer)) {
                    var footer = pdfExportProperties.footer;
                    position = new PointF(0, clientSize.width - 80 - .75 * footer.fromBottom), size = new SizeF(clientSize.width - 80, .75 * footer.height), 
                    bounds = new RectangleF(position, size);
                    this.pdfDocument.template.bottom = this.drawPageTemplate(new PdfPageTemplateElement(bounds), footer);
                }
                isNullOrUndefined(pdfExportProperties.includeHiddenColumn) || this.isGrouping || (this.hideColumnInclude = pdfExportProperties.includeHiddenColumn), 
                isNullOrUndefined(pdfExportProperties.dataSource) ? isNullOrUndefined(pdfExportProperties.exportType) ? (this.currentViewData = !1, 
                this.customDataSource = !1) : "CurrentPage" === pdfExportProperties.exportType ? (dataSource = this.parent.currentViewData, 
                this.currentViewData = !0, this.customDataSource = !1) : (this.currentViewData = !1, 
                this.customDataSource = !1) : (pdfExportProperties.dataSource instanceof DataManager || (dataSource = pdfExportProperties.dataSource), 
                this.customDataSource = !0, this.currentViewData = !1);
            }
            return {
                dataSource: dataSource,
                section: section
            };
        }, PdfExport.prototype.drawPageTemplate = function(template, element) {
            for (var _i = 0, _a = element.contents; _i < _a.length; _i++) {
                var content = _a[_i];
                switch (this.processContentValidation(content), content.type) {
                  case "Text":
                    if ("" === content.value || void 0 === content.value || null === content.value || "string" != typeof content.value) throw new Error("please enter the valid input value in text content...");
                    this.drawText(template, content);
                    break;

                  case "PageNumber":
                    this.drawPageNumber(template, content);
                    break;

                  case "Image":
                    if (void 0 === content.src || null === content.src || "" === content.src) throw new Error("please enter the valid base64 string in image content...");
                    this.drawImage(template, content);
                    break;

                  case "Line":
                    this.drawLine(template, content);
                    break;

                  default:
                    throw new Error("Please set valid content type...");
                }
            }
            return template;
        }, PdfExport.prototype.processContentValidation = function(content) {
            if (void 0 === content.type || null === content.type) throw new Error("please set valid content type...");
            if ("Line" === content.type) {
                if (void 0 === content.points || null === content.points) throw new Error("please enter valid points in " + content.type + " content...");
                if (void 0 === content.points.x1 || null === content.points.x1 || "number" != typeof content.points.x1) throw new Error("please enter valid x1 co-ordinate in " + content.type + " points...");
                if (void 0 === content.points.y1 || null === content.points.y1 || "number" != typeof content.points.y1) throw new Error("please enter valid y1 co-ordinate in " + content.type + " points...");
                if (void 0 === content.points.x2 || null === content.points.x2 || "number" != typeof content.points.x2) throw new Error("please enter valid x2 co-ordinate in " + content.type + " points...");
                if (void 0 === content.points.y2 || null === content.points.y2 || "number" != typeof content.points.y2) throw new Error("please enter valid y2 co-ordinate in " + content.type + " points...");
            } else {
                if (void 0 === content.position || null === content.position) throw new Error("please enter valid position in " + content.type + " content...");
                if (void 0 === content.position.x || null === content.position.x || "number" != typeof content.position.x) throw new Error("please enter valid x co-ordinate in " + content.type + " position...");
                if (void 0 === content.position.y || null === content.position.y || "number" != typeof content.position.y) throw new Error("please enter valid y co-ordinate in " + content.type + " position...");
            }
        }, PdfExport.prototype.drawText = function(pageTemplate, content) {
            var font = this.getFont(content), brush = this.getBrushFromContent(content), pen = null;
            if (!isNullOrUndefined(content.style.textPenColor)) {
                var penColor = this.hexToRgb(content.style.textPenColor);
                pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
            }
            null == brush && null == pen && (brush = new PdfSolidBrush(new PdfColor(0, 0, 0)));
            var value = content.value.toString(), x = .75 * content.position.x, y = .75 * content.position.y, result = this.setContentFormat(content, void 0);
            null === result || isNullOrUndefined(result.format) || isNullOrUndefined(result.size) ? pageTemplate.graphics.drawString(value, font, pen, brush, x, y, void 0) : pageTemplate.graphics.drawString(value, font, pen, brush, x, y, result.size.width, result.size.height, result.format);
        }, PdfExport.prototype.drawPageNumber = function(documentHeader, content) {
            var font = this.getFont(content), brush = null;
            if (isNullOrUndefined(content.style.textBrushColor)) brush = new PdfSolidBrush(new PdfColor(0, 0, 0)); else {
                var brushColor = this.hexToRgb(content.style.textBrushColor);
                brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
            }
            var pageNumber = new PdfPageNumberField(font, brush);
            pageNumber.numberStyle = this.getPageNumberStyle(content.pageNumberType);
            var compositeField, format;
            if (isNullOrUndefined(content.format)) compositeField = new PdfCompositeField(font, brush, format = "{0}", pageNumber); else if (-1 !== content.format.indexOf("$total") && -1 !== content.format.indexOf("$current")) {
                var pageCount = new PdfPageCountField(font);
                format = content.format.indexOf("$total") > content.format.indexOf("$current") ? (format = content.format.replace("$current", "0")).replace("$total", "1") : (format = content.format.replace("$current", "1")).replace("$total", "0"), 
                compositeField = new PdfCompositeField(font, brush, format, pageNumber, pageCount);
            } else if (-1 !== content.format.indexOf("$current") && -1 === content.format.indexOf("$total")) format = content.format.replace("$current", "0"), 
            compositeField = new PdfCompositeField(font, brush, format, pageNumber); else {
                pageCount = new PdfPageCountField(font);
                format = content.format.replace("$total", "0"), compositeField = new PdfCompositeField(font, brush, format, pageCount);
            }
            var x = .75 * content.position.x, y = .75 * content.position.y, result = this.setContentFormat(content, compositeField.stringFormat);
            null === result || isNullOrUndefined(result.format) || isNullOrUndefined(result.size) || (compositeField.stringFormat = result.format, 
            compositeField.bounds = new RectangleF(x, y, result.size.width, result.size.height)), 
            compositeField.draw(documentHeader.graphics, x, y);
        }, PdfExport.prototype.drawImage = function(documentHeader, content) {
            var x = .75 * content.position.x, y = .75 * content.position.y, width = isNullOrUndefined(content.size) ? void 0 : .75 * content.size.width, height = isNullOrUndefined(content.size) ? void 0 : .75 * content.size.height, image = new PdfBitmap(content.src);
            isNullOrUndefined(width) ? documentHeader.graphics.drawImage(image, x, y) : documentHeader.graphics.drawImage(image, x, y, width, height);
        }, PdfExport.prototype.drawLine = function(documentHeader, content) {
            var x1 = .75 * content.points.x1, y1 = .75 * content.points.y1, x2 = .75 * content.points.x2, y2 = .75 * content.points.y2, pen = this.getPenFromContent(content);
            isNullOrUndefined(content.style) || null === content.style || (isNullOrUndefined(content.style.penSize) || null === content.style.penSize || "number" != typeof content.style.penSize || (pen.width = .75 * content.style.penSize), 
            pen.dashStyle = this.getDashStyle(content.style.dashStyle)), documentHeader.graphics.drawLine(pen, x1, y1, x2, y2);
        }, PdfExport.prototype.processAggregates = function(sRows, pdfGrid, border, font, brush, backgroundBrush, isCaption, captionRow, groupIndex) {
            for (var _i = 0, sRows_1 = sRows; _i < sRows_1.length; _i++) {
                for (var row = sRows_1[_i], leastCaptionSummaryIndex = -1, index = 0, isEmpty = !0, value = [], i = 0; i < pdfGrid.columns.count; i++) {
                    var cell = row.cells[index];
                    if (!this.hideColumnInclude) {
                        for (;void 0 === cell.visible; ) isNullOrUndefined(captionRow) ? value.push("") : isNullOrUndefined(captionRow.cells.getCell(i).value) ? value.push("") : (value.push(""), 
                        value.push(captionRow.cells.getCell(i).value), isEmpty = !1, i += 1), i += 1, index += 1, 
                        cell = row.cells[index];
                        for (;!isNullOrUndefined(cell.visible) && !cell.visible; ) index += 1, cell = row.cells[index];
                    }
                    if (cell.isDataCell) {
                        var templateFn = {};
                        if (isNullOrUndefined(cell.column.footerTemplate) && isNullOrUndefined(cell.column.groupCaptionTemplate) && isNullOrUndefined(cell.column.groupFooterTemplate)) {
                            isNullOrUndefined(result = this.getSummaryWithoutTemplate(row.data[cell.column.field])) || value.push(result);
                        } else {
                            var result;
                            templateFn = (result = this.getTemplateFunction(templateFn, i, leastCaptionSummaryIndex, cell.column)).templateFunction, 
                            leastCaptionSummaryIndex = result.leastCaptionSummaryIndex;
                            var txt = templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]);
                            value.push(txt[0].wholeText), isEmpty = !1;
                        }
                    } else value.push("");
                    isEmpty && "" !== value[i] && !isNullOrUndefined(value[i]) && null !== value[i] && (isEmpty = !1), 
                    index += 1;
                }
                if (!isEmpty) if (isCaption) for (i = 0; i < pdfGrid.columns.count; i++) captionRow.cells.getCell(i).value = value[i].toString(), 
                i === groupIndex + 1 && -1 !== leastCaptionSummaryIndex ? captionRow.cells.getCell(i).columnSpan = leastCaptionSummaryIndex - (groupIndex + 1) : i === groupIndex + 1 && -1 === leastCaptionSummaryIndex && (captionRow.cells.getCell(i).columnSpan = pdfGrid.columns.count - (groupIndex + 1)); else {
                    var gridRow = pdfGrid.rows.addRow();
                    gridRow.style.setBorder(border), gridRow.style.setFont(font), gridRow.style.setTextBrush(brush), 
                    gridRow.style.setBackgroundBrush(backgroundBrush);
                    for (var i = 0; i < pdfGrid.columns.count; i++) gridRow.cells.getCell(i).value = value[i].toString();
                }
            }
        }, PdfExport.prototype.getTemplateFunction = function(templateFn, index, leastCaptionSummaryIndex, column) {
            return isNullOrUndefined(column.footerTemplate) ? isNullOrUndefined(column.groupCaptionTemplate) ? templateFn[getEnumValue(CellType, CellType.GroupSummary)] = compile$$1(column.groupFooterTemplate) : (-1 === leastCaptionSummaryIndex && (leastCaptionSummaryIndex = index), 
            templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = compile$$1(column.groupCaptionTemplate)) : templateFn[getEnumValue(CellType, CellType.Summary)] = compile$$1(column.footerTemplate), 
            {
                templateFunction: templateFn,
                leastCaptionSummaryIndex: leastCaptionSummaryIndex
            };
        }, PdfExport.prototype.getSummaryWithoutTemplate = function(data) {
            return isNullOrUndefined(data.Sum) ? isNullOrUndefined(data.Average) ? isNullOrUndefined(data.Max) ? isNullOrUndefined(data.Min) ? isNullOrUndefined(data.Count) ? isNullOrUndefined(data.TrueCount) ? isNullOrUndefined(data.FalseCount) ? isNullOrUndefined(data.Custom) ? void 0 : data.Custom : data.FalseCount : data.TrueCount : data.Count : data.Min : data.Max : data.Average : data.Sum;
        }, PdfExport.prototype.setColumnProperties = function(gridColumns, pdfGrid) {
            for (var startIndex = this.isGrouping ? pdfGrid.columns.count - gridColumns.length : 0, i = 0; i < gridColumns.length; i++) isNullOrUndefined(gridColumns[i].textAlign) || (pdfGrid.columns.getColumn(i + startIndex).format = this.getHorizontalAlignment(gridColumns[i].textAlign)), 
            pdfGrid.style.allowHorizontalOverflow && !isNullOrUndefined(gridColumns[i].width) && (pdfGrid.columns.getColumn(i + startIndex).width = "number" == typeof gridColumns[i].width ? .75 * gridColumns[i].width : .75 * this.helper.getConvertedWidth(gridColumns[i].width));
        }, PdfExport.prototype.setRecordThemeStyle = function(row, border) {
            if (isNullOrUndefined(this.gridTheme) || isNullOrUndefined(this.gridTheme.record) || null === this.gridTheme.record) row.style.setTextBrush(new PdfSolidBrush(new PdfColor(0, 0, 0))); else {
                var pdfColor = new PdfColor();
                if (!isNullOrUndefined(this.gridTheme.record.fontColor)) {
                    var penBrushColor = this.hexToRgb(this.gridTheme.record.fontColor);
                    pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
                }
                row.style.setTextBrush(new PdfSolidBrush(pdfColor));
            }
            return row.style.setBorder(border), row;
        }, PdfExport.prototype.processRecord = function(border, columns, gObj, dataSource, pdfGrid, groupIndex) {
            for (var startIndex = this.isGrouping ? groupIndex : 0, _i = 0, _a = dataSource; _i < _a.length; _i++) for (var items = _a[_i], gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border), j = 0; j < columns.length; j++) {
                var value = !isNullOrUndefined(columns[j].field) && getValue(columns[j].field, items) || "", column = columns[j], foreignKeyData$$1 = void 0;
                column.isForeignColumn && column.isForeignColumn() && (foreignKeyData$$1 = this.helper.getFData(value, column), 
                value = getValue(column.foreignKeyValue, foreignKeyData$$1));
                var args = {
                    data: items,
                    value: value,
                    column: column,
                    style: void 0,
                    colSpan: 1
                };
                args.value = this.exportValueFormatter.formatCellValue(args), gObj.trigger("pdfQueryCellInfo", args);
                var cell = gridRow.cells.getCell(j + startIndex);
                if (cell.value = args.value, isNullOrUndefined(args.style) || this.processCellStyle(cell, args), 
                args.colSpan > 1) {
                    j + startIndex + 1 + args.colSpan > gridRow.cells.count && (args.colSpan = gridRow.cells.count - (j + startIndex + 1)), 
                    cell.columnSpan = args.colSpan;
                    for (var i = 1; i < cell.columnSpan; i++) {
                        gridRow.cells.getCell(j + startIndex + i).value = "";
                    }
                    j += args.colSpan - 1;
                }
            }
        }, PdfExport.prototype.processCellStyle = function(cell, args) {
            if (!isNullOrUndefined(args.style.backgroundColor)) {
                var backColor = this.hexToRgb(args.style.backgroundColor);
                cell.style.backgroundBrush = new PdfSolidBrush(new PdfColor(backColor.r, backColor.g, backColor.b));
            }
            if (isNullOrUndefined(args.style.textAlignment) || (cell.style.stringFormat = this.getHorizontalAlignment(args.style.textAlignment)), 
            isNullOrUndefined(args.style.verticalAlignment) || (cell.style.stringFormat = this.getVerticalAlignment(args.style.verticalAlignment, cell.style.stringFormat)), 
            !isNullOrUndefined(args.style.textBrushColor)) {
                var textBrushColor = this.hexToRgb(args.style.textBrushColor);
                cell.style.textBrush = new PdfSolidBrush(new PdfColor(textBrushColor.r, textBrushColor.g, textBrushColor.b));
            }
            if (!isNullOrUndefined(args.style.textPenColor)) {
                var textPenColor = this.hexToRgb(args.style.textPenColor);
                cell.style.textPen = new PdfPen(new PdfColor(textPenColor.r, textPenColor.g, textPenColor.b));
            }
            if (isNullOrUndefined(args.style.fontFamily) && isNullOrUndefined(args.style.fontSize) && isNullOrUndefined(args.style.bold) && isNullOrUndefined(args.style.italic) && isNullOrUndefined(args.style.underline) && isNullOrUndefined(args.style.strikeout) || (cell.style.font = this.getFont(args)), 
            !isNullOrUndefined(args.style.border)) {
                var border = new PdfBorders(), borderWidth = args.style.border.width, width = isNullOrUndefined(borderWidth) || "number" != typeof borderWidth ? void 0 : .75 * borderWidth, color = new PdfColor(196, 196, 196);
                if (!isNullOrUndefined(args.style.border.color)) {
                    var borderColor = this.hexToRgb(args.style.border.color);
                    color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
                }
                var pen = new PdfPen(color, width);
                isNullOrUndefined(args.style.border.dashStyle) || (pen.dashStyle = this.getDashStyle(args.style.border.dashStyle)), 
                border.all = pen, cell.style.borders = border;
            }
            isNullOrUndefined(args.style.paragraphIndent) || (cell.style.stringFormat = new PdfStringFormat(), 
            cell.style.stringFormat.paragraphIndent = args.style.paragraphIndent);
        }, PdfExport.prototype.getHorizontalAlignment = function(textAlign, format) {
            switch (void 0 === format && (format = new PdfStringFormat()), textAlign) {
              case "Right":
                format.alignment = PdfTextAlignment.Right;
                break;

              case "Center":
                format.alignment = PdfTextAlignment.Center;
                break;

              case "Justify":
                format.alignment = PdfTextAlignment.Justify;
                break;

              case "Left":
                format.alignment = PdfTextAlignment.Left;
            }
            return format;
        }, PdfExport.prototype.getVerticalAlignment = function(verticalAlign, format, textAlign) {
            switch (void 0 === format && (format = new PdfStringFormat(), format = this.getHorizontalAlignment(textAlign, format)), 
            verticalAlign) {
              case "Bottom":
                format.lineAlignment = PdfVerticalAlignment.Bottom;
                break;

              case "Middle":
                format.lineAlignment = PdfVerticalAlignment.Middle;
                break;

              case "Top":
                format.lineAlignment = PdfVerticalAlignment.Top;
            }
            return format;
        }, PdfExport.prototype.getFontFamily = function(fontFamily) {
            switch (fontFamily) {
              case "TimesRoman":
                return 2;

              case "Courier":
                return 1;

              case "Symbol":
                return 3;

              case "ZapfDingbats":
                return 4;

              default:
                return 0;
            }
        }, PdfExport.prototype.getFont = function(content) {
            var fontSize = isNullOrUndefined(content.style.fontSize) ? 9.75 : .75 * content.style.fontSize, fontFamily = isNullOrUndefined(content.style.fontFamily) ? PdfFontFamily.Helvetica : this.getFontFamily(content.style.fontFamily), fontStyle = PdfFontStyle.Regular;
            return !isNullOrUndefined(content.style.bold) && content.style.bold && (fontStyle |= PdfFontStyle.Bold), 
            !isNullOrUndefined(content.style.italic) && content.style.italic && (fontStyle |= PdfFontStyle.Italic), 
            !isNullOrUndefined(content.style.underline) && content.style.underline && (fontStyle |= PdfFontStyle.Underline), 
            !isNullOrUndefined(content.style.strikeout) && content.style.strikeout && (fontStyle |= PdfFontStyle.Strikeout), 
            new PdfStandardFont(fontFamily, fontSize, fontStyle);
        }, PdfExport.prototype.getPageNumberStyle = function(pageNumberType) {
            switch (pageNumberType) {
              case "LowerLatin":
                return 2;

              case "LowerRoman":
                return 3;

              case "UpperLatin":
                return 4;

              case "UpperRoman":
                return 5;

              default:
                return 1;
            }
        }, PdfExport.prototype.setContentFormat = function(content, format) {
            if (!isNullOrUndefined(content.size)) {
                var width = .75 * content.size.width, height = .75 * content.size.height;
                if (format = new PdfStringFormat(PdfTextAlignment.Left, PdfVerticalAlignment.Middle), 
                !isNullOrUndefined(content.style.hAlign)) switch (content.style.hAlign) {
                  case "Right":
                    format.alignment = PdfTextAlignment.Right;
                    break;

                  case "Center":
                    format.alignment = PdfTextAlignment.Center;
                    break;

                  case "Justify":
                    format.alignment = PdfTextAlignment.Justify;
                    break;

                  default:
                    format.alignment = PdfTextAlignment.Left;
                }
                return isNullOrUndefined(content.style.vAlign) || (format = this.getVerticalAlignment(content.style.vAlign, format)), 
                {
                    format: format,
                    size: new SizeF(width, height)
                };
            }
            return null;
        }, PdfExport.prototype.getPageSize = function(pageSize) {
            switch (pageSize) {
              case "Letter":
                return new SizeF(612, 792);

              case "Note":
                return new SizeF(540, 720);

              case "Legal":
                return new SizeF(612, 1008);

              case "A0":
                return new SizeF(2380, 3368);

              case "A1":
                return new SizeF(1684, 2380);

              case "A2":
                return new SizeF(1190, 1684);

              case "A3":
                return new SizeF(842, 1190);

              case "A5":
                return new SizeF(421, 595);

              case "A6":
                return new SizeF(297, 421);

              case "A7":
                return new SizeF(210, 297);

              case "A8":
                return new SizeF(148, 210);

              case "A9":
                return new SizeF(105, 148);

              case "B0":
                return new SizeF(2836, 4008);

              case "B1":
                return new SizeF(2004, 2836);

              case "B2":
                return new SizeF(1418, 2004);

              case "B3":
                return new SizeF(1002, 1418);

              case "B4":
                return new SizeF(709, 1002);

              case "B5":
                return new SizeF(501, 709);

              case "Archa":
                return new SizeF(648, 864);

              case "Archb":
                return new SizeF(864, 1296);

              case "Archc":
                return new SizeF(1296, 1728);

              case "Archd":
                return new SizeF(1728, 2592);

              case "Arche":
                return new SizeF(2592, 3456);

              case "Flsa":
                return new SizeF(612, 936);

              case "HalfLetter":
                return new SizeF(396, 612);

              case "Letter11x17":
                return new SizeF(792, 1224);

              case "Ledger":
                return new SizeF(1224, 792);

              default:
                return new SizeF(595, 842);
            }
        }, PdfExport.prototype.getDashStyle = function(dashStyle) {
            switch (dashStyle) {
              case "Dash":
                return 1;

              case "Dot":
                return 2;

              case "DashDot":
                return 3;

              case "DashDotDot":
                return 4;

              default:
                return 0;
            }
        }, PdfExport.prototype.getPenFromContent = function(content) {
            var pen = new PdfPen(new PdfColor(0, 0, 0));
            if (!isNullOrUndefined(content.style) && null !== content.style && !isNullOrUndefined(content.style.penColor)) {
                var penColor = this.hexToRgb(content.style.penColor);
                pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
            }
            return pen;
        }, PdfExport.prototype.getBrushFromContent = function(content) {
            var brush = null;
            if (!isNullOrUndefined(content.style.textBrushColor)) {
                var brushColor = this.hexToRgb(content.style.textBrushColor);
                brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
            }
            return brush;
        }, PdfExport.prototype.hexToRgb = function(hex) {
            if (null === hex || "" === hex || 7 !== hex.length) throw new Error("please set valid hex value for color...");
            hex = hex.substring(1);
            var bigint = parseInt(hex, 16);
            return {
                r: bigint >> 16 & 255,
                g: bigint >> 8 & 255,
                b: 255 & bigint
            };
        }, PdfExport.prototype.destroy = function() {}, PdfExport;
    }(), __extends$100 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), CommandColumnRenderer = function(_super) {
        function CommandColumnRenderer(parent, locator) {
            var _this = _super.call(this, parent, locator) || this;
            return _this.buttonElement = _this.parent.createElement("button", {}), _this.unbounDiv = _this.parent.createElement("div", {
                className: "e-unboundcelldiv",
                styles: "display: inline-block"
            }), _this.element = _this.parent.createElement("TD", {
                className: "e-rowcell e-unboundcell",
                attrs: {
                    role: "gridcell",
                    tabindex: "-1"
                }
            }), _this;
        }
        return __extends$100(CommandColumnRenderer, _super), CommandColumnRenderer.prototype.render = function(cell, data, attributes) {
            var node = this.element.cloneNode();
            if (node.appendChild(this.unbounDiv.cloneNode()), node.setAttribute("aria-label", "is Command column column header " + cell.column.headerText), 
            cell.column.commandsTemplate) appendChildren(node.firstElementChild, cell.column.getColumnTemplate()(data)); else for (var _i = 0, _a = cell.commands; _i < _a.length; _i++) {
                var command = _a[_i];
                node = this.renderButton(node, command, attributes.index);
            }
            return this.setAttributes(node, cell, attributes), this.parent.isEdit ? (addClass(node.querySelectorAll(".e-edit-delete"), "e-hide"), 
            removeClass(node.querySelectorAll(".e-save-cancel"), "e-hide")) : (addClass(node.querySelectorAll(".e-save-cancel"), "e-hide"), 
            removeClass(node.querySelectorAll(".e-edit-delete"), "e-hide")), node;
        }, CommandColumnRenderer.prototype.renderButton = function(node, buttonOption, index) {
            var button = this.buttonElement.cloneNode();
            attributes(button, {
                id: this.parent.element.id + (buttonOption.type || "") + "_" + index,
                type: "button",
                title: isNullOrUndefined(buttonOption.title) ? buttonOption.buttonOption.content || this.localizer.getConstant(buttonOption.type) || buttonOption.type : buttonOption.title
            }), button.onclick = buttonOption.buttonOption.click;
            var buttonObj = new Button(buttonOption.buttonOption, button);
            switch (buttonObj.commandType = buttonOption.type, node.firstElementChild.appendChild(buttonObj.element), 
            buttonOption.type) {
              case "Edit":
              case "Delete":
                addClass([ button ], [ "e-edit-delete", "e-" + buttonOption.type.toLowerCase() + "button" ]);
                break;

              case "Cancel":
              case "Save":
                addClass([ button ], [ "e-save-cancel", "e-" + buttonOption.type.toLowerCase() + "button" ]);
            }
            return node;
        }, CommandColumnRenderer;
    }(CellRenderer), CommandColumn = function() {
        function CommandColumn(parent, locator) {
            this.parent = parent, this.locator = locator, this.addEventListener();
        }
        return CommandColumn.prototype.initiateRender = function() {
            this.locator.getService("cellRendererFactory").addCellRenderer(CellType.CommandColumn, new CommandColumnRenderer(this.parent, this.locator));
        }, CommandColumn.prototype.commandClickHandler = function(e) {
            var gObj = this.parent, target = (gObj.element.id, closest(e.target, "button"));
            if (target && gObj.editModule && closest(e.target, ".e-unboundcell")) {
                var buttonObj = target.ej2_instances[0], type = buttonObj.commandType;
                if (!buttonObj.disabled) switch (type) {
                  case "Edit":
                    gObj.editModule.endEdit(), gObj.editModule.startEdit(closest(target, "tr"));
                    break;

                  case "Cancel":
                    gObj.editModule.closeEdit();
                    break;

                  case "Save":
                    gObj.editModule.endEdit();
                    break;

                  case "Delete":
                    gObj.editModule.endEdit(), gObj.clearSelection(), gObj.selectRow(parseInt(closest(target, "tr").getAttribute("aria-rowindex"), 10), !1), 
                    gObj.editModule.deleteRecord();
                }
            }
        }, CommandColumn.prototype.getModuleName = function() {
            return "commandColumn";
        }, CommandColumn.prototype.destroy = function() {
            this.parent.isDestroyed || this.removeEventListener();
        }, CommandColumn.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(click, this.commandClickHandler), this.parent.off(initialEnd, this.initiateRender), 
            this.parent.off(keyPressed, this.keyPressHandler));
        }, CommandColumn.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(click, this.commandClickHandler, this), 
            this.parent.on(initialEnd, this.initiateRender, this), this.parent.on(keyPressed, this.keyPressHandler, this));
        }, CommandColumn.prototype.keyPressHandler = function(e) {
            "enter" === e.action && closest(e.target, ".e-unboundcelldiv") && (this.commandClickHandler(e), 
            e.preventDefault());
        }, CommandColumn;
    }(), menuClass = {
        header: ".e-gridheader",
        content: ".e-gridcontent",
        edit: ".e-inline-edit",
        batchEdit: ".e-editedbatchcell",
        editIcon: "e-edit",
        pager: ".e-gridpager",
        delete: "e-delete",
        save: "e-save",
        cancel: "e-cancel",
        copy: "e-copy",
        pdf: "e-pdfexport",
        group: "e-icon-group",
        ungroup: "e-icon-ungroup",
        csv: "e-csvexport",
        excel: "e-excelexport",
        fPage: "e-icon-first",
        nPage: "e-icon-next",
        lPage: "e-icon-last",
        pPage: "e-icon-prev",
        ascending: "e-icon-ascending",
        descending: "e-icon-descending",
        groupHeader: "e-groupdroparea",
        touchPop: "e-gridpopup"
    }, ContextMenu$1 = function() {
        function ContextMenu$$1(parent, serviceLocator) {
            this.defaultItems = {}, this.disableItems = [], this.hiddenItems = [], this.localeText = this.setLocaleKey(), 
            this.parent = parent, this.gridID = parent.element.id, this.serviceLocator = serviceLocator, 
            this.addEventListener();
        }
        return ContextMenu$$1.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(uiUpdate, this.enableAfterRenderMenu, this), 
            this.parent.on(initialLoad, this.render, this));
        }, ContextMenu$$1.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(initialLoad, this.render), this.parent.off(uiUpdate, this.enableAfterRenderMenu), 
            EventHandler.remove(this.element, "keydown", this.keyDownHandler.bind(this)));
        }, ContextMenu$$1.prototype.keyDownHandler = function(e) {
            "Tab" !== e.code && 9 !== e.which || this.contextMenu.close();
        }, ContextMenu$$1.prototype.render = function() {
            this.parent.element.classList.add("e-noselect"), this.l10n = this.serviceLocator.getService("localization"), 
            this.element = this.parent.createElement("ul", {
                id: this.gridID + "_cmenu"
            }), EventHandler.add(this.element, "keydown", this.keyDownHandler.bind(this)), this.parent.element.appendChild(this.element);
            var target = "#" + this.gridID;
            this.contextMenu = new ContextMenu({
                items: this.getMenuItems(),
                enableRtl: this.parent.enableRtl,
                enablePersistence: this.parent.enablePersistence,
                locale: this.parent.locale,
                target: target,
                select: this.contextMenuItemClick.bind(this),
                beforeOpen: this.contextMenuBeforeOpen.bind(this),
                onOpen: this.contextMenuOpen.bind(this),
                onClose: this.contextMenuOnClose.bind(this),
                cssClass: "e-grid-menu"
            }), this.contextMenu.appendTo(this.element);
        }, ContextMenu$$1.prototype.enableAfterRenderMenu = function(e) {
            e.module === this.getModuleName() && e.enable && (this.contextMenu && (this.contextMenu.destroy(), 
            remove(this.element), this.parent.element.classList.remove("e-noselect")), this.render());
        }, ContextMenu$$1.prototype.getMenuItems = function() {
            for (var menuItems = [], exportItems = [], _i = 0, _a = this.parent.contextMenuItems; _i < _a.length; _i++) {
                var item = _a[_i];
                "string" == typeof item && -1 !== this.getDefaultItems().indexOf(item) ? -1 !== item.toLocaleLowerCase().indexOf("export") ? exportItems.push(this.buildDefaultItems(item)) : menuItems.push(this.buildDefaultItems(item)) : "string" != typeof item && menuItems.push(item);
            }
            if (exportItems.length > 0) {
                var exportGroup = this.buildDefaultItems("export");
                exportGroup.items = exportItems, menuItems.push(exportGroup);
            }
            return menuItems;
        }, ContextMenu$$1.prototype.getLastPage = function() {
            var totalpage = Math.floor(this.parent.pageSettings.totalRecordsCount / this.parent.pageSettings.pageSize);
            return this.parent.pageSettings.totalRecordsCount % this.parent.pageSettings.pageSize && (totalpage += 1), 
            totalpage;
        }, ContextMenu$$1.prototype.contextMenuOpen = function() {
            this.isOpen = !0;
        }, ContextMenu$$1.prototype.contextMenuItemClick = function(args) {
            switch (this.getKeyFromId(args.item.id)) {
              case "AutoFitAll":
                this.parent.autoFitColumns([]);
                break;

              case "AutoFit":
                this.parent.autoFitColumns(this.targetColumn.field);
                break;

              case "Group":
                this.parent.groupColumn(this.targetColumn.field);
                break;

              case "Ungroup":
                this.parent.ungroupColumn(this.targetColumn.field);
                break;

              case "Edit":
                "Batch" === this.parent.editSettings.mode ? this.row && this.cell && !isNaN(parseInt(this.cell.getAttribute("aria-colindex"), 10)) && this.parent.editModule.editCell(parseInt(this.row.getAttribute("aria-rowindex"), 10), this.parent.getColumns()[parseInt(this.cell.getAttribute("aria-colindex"), 10)].field) : (this.parent.editModule.endEdit(), 
                this.parent.editModule.startEdit(this.row));
                break;

              case "Delete":
                "Batch" !== this.parent.editSettings.mode && this.parent.editModule.endEdit(), 1 === this.parent.getSelectedRecords().length ? this.parent.editModule.deleteRow(this.row) : this.parent.deleteRecord();
                break;

              case "Save":
                this.parent.editModule.endEdit();
                break;

              case "Cancel":
                this.parent.editModule.closeEdit();
                break;

              case "Copy":
                this.parent.copy();
                break;

              case "PdfExport":
                this.parent.pdfExport();
                break;

              case "ExcelExport":
                this.parent.excelExport();
                break;

              case "CsvExport":
                this.parent.csvExport();
                break;

              case "SortAscending":
                this.isOpen = !1, this.parent.sortColumn(this.targetColumn.field, "Ascending");
                break;

              case "SortDescending":
                this.isOpen = !1, this.parent.sortColumn(this.targetColumn.field, "Descending");
                break;

              case "FirstPage":
                this.parent.goToPage(1);
                break;

              case "PrevPage":
                this.parent.goToPage(this.parent.pageSettings.currentPage - 1);
                break;

              case "LastPage":
                this.parent.goToPage(this.getLastPage());
                break;

              case "NextPage":
                this.parent.goToPage(this.parent.pageSettings.currentPage + 1);
            }
            args.column = this.targetColumn, this.parent.trigger("contextMenuClick", args);
        }, ContextMenu$$1.prototype.contextMenuOnClose = function(args) {
            args.items.length > 0 && args.items[0].parentObj instanceof ContextMenu && this.updateItemStatus();
        }, ContextMenu$$1.prototype.getLocaleText = function(item) {
            return this.l10n.getConstant(this.localeText[item]);
        }, ContextMenu$$1.prototype.updateItemStatus = function() {
            this.contextMenu.showItems(this.hiddenItems), this.contextMenu.enableItems(this.disableItems), 
            this.hiddenItems = [], this.disableItems = [], this.isOpen = !1;
        }, ContextMenu$$1.prototype.contextMenuBeforeOpen = function(args) {
            var closestGrid = closest(args.event.target, ".e-grid");
            if (args.event && closestGrid && closestGrid !== this.parent.element) args.cancel = !0; else if (args.event && (closest(args.event.target, "." + menuClass.groupHeader) || closest(args.event.target, "." + menuClass.touchPop) || closest(args.event.target, ".e-summarycell") || closest(args.event.target, ".e-groupcaption") || closest(args.event.target, ".e-filterbarcell"))) args.cancel = !0; else {
                this.targetColumn = this.getColumn(args.event), this.selectRow(args.event, "Multiple" !== this.parent.selectionSettings.type);
                for (var hiddenSepItems = [], showSepItems = [], _i = 0, _a = args.items; _i < _a.length; _i++) {
                    var item = _a[_i], key = this.getKeyFromId(item.id), dItem = this.defaultItems[key];
                    if (-1 !== this.getDefaultItems().indexOf(key)) if (this.ensureDisabledStatus(key) && this.disableItems.push(item.text), 
                    args.event && (this.ensureTarget(args.event.target, menuClass.edit) || this.ensureTarget(args.event.target, menuClass.batchEdit))) "Save" !== key && "Cancel" !== key && this.hiddenItems.push(item.text); else {
                        if ("Batch" === this.parent.editSettings.mode && (closest(args.event.target, ".e-gridform") || this.parent.editModule.getBatchChanges().changedRecords.length || this.parent.editModule.getBatchChanges().addedRecords.length || this.parent.editModule.getBatchChanges().deletedRecords.length) && ("Save" === key || "Cancel" === key)) continue;
                        isNullOrUndefined(args.parentItem) && args.event && !this.ensureTarget(args.event.target, dItem.target) && this.hiddenItems.push(item.text);
                    } else item.target && args.event && !this.ensureTarget(args.event.target, item.target) ? item.separator ? hiddenSepItems.push(item.id) : this.hiddenItems.push(item.text) : this.ensureTarget(args.event.target, item.target) && item.separator && showSepItems.push(item.id);
                }
                showSepItems.length > 0 && this.contextMenu.showItems(showSepItems, !0), this.contextMenu.enableItems(this.disableItems, !1), 
                this.contextMenu.hideItems(this.hiddenItems), hiddenSepItems.length > 0 && this.contextMenu.hideItems(hiddenSepItems, !0), 
                this.eventArgs = args.event, args.column = this.targetColumn, this.parent.trigger("contextMenuOpen", args), 
                this.hiddenItems.length === args.items.length && (this.updateItemStatus(), args.cancel = !0);
            }
        }, ContextMenu$$1.prototype.ensureTarget = function(targetElement, selector) {
            var target = targetElement;
            return (target = !this.ensureFrozenHeader(targetElement) || selector !== menuClass.header && selector !== menuClass.content ? selector === menuClass.content || selector === menuClass.header ? parentsUntil(closest(targetElement, ".e-table"), selector.substr(1, selector.length)) : closest(targetElement, selector) : closest(targetElement, selector === menuClass.header ? "thead" : "tbody")) && parentsUntil(target, "e-grid") === this.parent.element;
        }, ContextMenu$$1.prototype.ensureFrozenHeader = function(targetElement) {
            return !(!this.parent.getFrozenColumns() && !this.parent.frozenRows || !closest(targetElement, menuClass.header));
        }, ContextMenu$$1.prototype.ensureDisabledStatus = function(item) {
            var _this = this, status = !1;
            switch (item) {
              case "AutoFitAll":
              case "AutoFit":
                status = !(this.parent.ensureModuleInjected(Resize) && !this.parent.isEdit);
                break;

              case "Group":
                (!this.parent.allowGrouping || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0) && (status = !0);
                break;

              case "Ungroup":
                (!this.parent.allowGrouping || !this.parent.ensureModuleInjected(Group) || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0) && (status = !0);
                break;

              case "Edit":
              case "Delete":
              case "Save":
              case "Cancel":
                this.parent.editModule && 0 !== this.parent.getDataRows().length || (status = !0);
                break;

              case "Copy":
                0 !== this.parent.getSelectedRowIndexes().length && 0 !== this.parent.getCurrentViewRecords().length || (status = !0);
                break;

              case "export":
                this.parent.allowExcelExport && this.parent.excelExport && (this.parent.ensureModuleInjected(PdfExport) || this.parent.ensureModuleInjected(ExcelExport)) || (status = !0);
                break;

              case "PdfExport":
                this.parent.allowPdfExport && this.parent.ensureModuleInjected(PdfExport) || (status = !0);
                break;

              case "ExcelExport":
              case "CsvExport":
                this.parent.allowExcelExport && this.parent.ensureModuleInjected(ExcelExport) || (status = !0);
                break;

              case "SortAscending":
              case "SortDescending":
                this.parent.allowSorting && this.parent.ensureModuleInjected(Sort) ? this.parent.ensureModuleInjected(Sort) && this.parent.sortSettings.columns.length > 0 && this.targetColumn && this.parent.sortSettings.columns.forEach(function(element) {
                    element.field === _this.targetColumn.field && element.direction.toLowerCase() === item.toLowerCase().replace("sort", "").toLocaleLowerCase() && (status = !0);
                }) : status = !0;
                break;

              case "FirstPage":
              case "PrevPage":
                (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) || 0 === this.parent.getCurrentViewRecords().length || this.parent.ensureModuleInjected(Page) && 1 === this.parent.pageSettings.currentPage) && (status = !0);
                break;

              case "LastPage":
              case "NextPage":
                (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) || 0 === this.parent.getCurrentViewRecords().length || this.parent.ensureModuleInjected(Page) && this.parent.pageSettings.currentPage === this.getLastPage()) && (status = !0);
            }
            return status;
        }, ContextMenu$$1.prototype.getContextMenu = function() {
            return this.element;
        }, ContextMenu$$1.prototype.destroy = function() {
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.contextMenu.destroy(), 
            remove(this.element), this.removeEventListener(), this.parent.element.classList.remove("e-noselect"));
        }, ContextMenu$$1.prototype.getModuleName = function() {
            return "contextMenu";
        }, ContextMenu$$1.prototype.generateID = function(item) {
            return this.gridID + "_cmenu_" + item;
        }, ContextMenu$$1.prototype.getKeyFromId = function(id) {
            return id.replace(this.gridID + "_cmenu_", "");
        }, ContextMenu$$1.prototype.buildDefaultItems = function(item) {
            var menuItem;
            switch (item) {
              case "AutoFitAll":
              case "AutoFit":
                menuItem = {
                    target: menuClass.header
                };
                break;

              case "Group":
                menuItem = {
                    target: menuClass.header,
                    iconCss: menuClass.group
                };
                break;

              case "Ungroup":
                menuItem = {
                    target: menuClass.header,
                    iconCss: menuClass.ungroup
                };
                break;

              case "Edit":
                menuItem = {
                    target: menuClass.content,
                    iconCss: menuClass.editIcon
                };
                break;

              case "Delete":
                menuItem = {
                    target: menuClass.content,
                    iconCss: menuClass.delete
                };
                break;

              case "Save":
                menuItem = {
                    target: menuClass.edit,
                    iconCss: menuClass.save
                };
                break;

              case "Cancel":
                menuItem = {
                    target: menuClass.edit,
                    iconCss: menuClass.cancel
                };
                break;

              case "Copy":
                menuItem = {
                    target: menuClass.content,
                    iconCss: menuClass.copy
                };
                break;

              case "export":
                menuItem = {
                    target: menuClass.content
                };
                break;

              case "PdfExport":
                menuItem = {
                    target: menuClass.content,
                    iconCss: menuClass.pdf
                };
                break;

              case "ExcelExport":
                menuItem = {
                    target: menuClass.content,
                    iconCss: menuClass.excel
                };
                break;

              case "CsvExport":
                menuItem = {
                    target: menuClass.content,
                    iconCss: menuClass.csv
                };
                break;

              case "SortAscending":
                menuItem = {
                    target: menuClass.header,
                    iconCss: menuClass.ascending
                };
                break;

              case "SortDescending":
                menuItem = {
                    target: menuClass.header,
                    iconCss: menuClass.descending
                };
                break;

              case "FirstPage":
                menuItem = {
                    target: menuClass.pager,
                    iconCss: menuClass.fPage
                };
                break;

              case "PrevPage":
                menuItem = {
                    target: menuClass.pager,
                    iconCss: menuClass.pPage
                };
                break;

              case "LastPage":
                menuItem = {
                    target: menuClass.pager,
                    iconCss: menuClass.lPage
                };
                break;

              case "NextPage":
                menuItem = {
                    target: menuClass.pager,
                    iconCss: menuClass.nPage
                };
            }
            return this.defaultItems[item] = {
                text: this.getLocaleText(item),
                id: this.generateID(item),
                target: menuItem.target,
                iconCss: menuItem.iconCss ? "e-icons " + menuItem.iconCss : ""
            }, this.defaultItems[item];
        }, ContextMenu$$1.prototype.getDefaultItems = function() {
            return [ "AutoFitAll", "AutoFit", "Group", "Ungroup", "Edit", "Delete", "Save", "Cancel", "Copy", "export", "PdfExport", "ExcelExport", "CsvExport", "SortAscending", "SortDescending", "FirstPage", "PrevPage", "LastPage", "NextPage" ];
        }, ContextMenu$$1.prototype.setLocaleKey = function() {
            return {
                AutoFitAll: "autoFitAll",
                AutoFit: "autoFit",
                Copy: "Copy",
                Group: "Group",
                Ungroup: "Ungroup",
                Edit: "EditRecord",
                Delete: "DeleteRecord",
                Save: "Save",
                Cancel: "CancelButton",
                PdfExport: "Pdfexport",
                ExcelExport: "Excelexport",
                CsvExport: "Csvexport",
                export: "Export",
                SortAscending: "SortAscending",
                SortDescending: "SortDescending",
                FirstPage: "FirstPage",
                LastPage: "LastPage",
                PrevPage: "PreviousPage",
                NextPage: "NextPage"
            };
        }, ContextMenu$$1.prototype.getColumn = function(e) {
            var cell = closest(e.target, "th.e-headercell");
            if (cell) {
                var uid = cell.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
                return this.parent.getColumnByUid(uid);
            }
            return null;
        }, ContextMenu$$1.prototype.selectRow = function(e, isSelectable) {
            this.cell = e.target, this.row = closest(e.target, "tr.e-row") || this.row, this.row && isSelectable && !parentsUntil(e.target, "e-gridpager") && this.parent.selectRow(parseInt(this.row.getAttribute("aria-rowindex"), 10));
        }, ContextMenu$$1;
    }(), FreezeRowModelGenerator = function() {
        function FreezeRowModelGenerator(parent) {
            this.isFrzLoad = 1, this.parent = parent, this.rowModelGenerator = new RowModelGenerator(this.parent);
        }
        return FreezeRowModelGenerator.prototype.generateRows = function(data, notifyArgs) {
            for (var frzCols = this.parent.getFrozenColumns(), row = this.rowModelGenerator.generateRows(data, notifyArgs), i = 0, len = row.length; i < len; i++) this.isFrzLoad % 2 == 0 ? row[i].cells = row[i].cells.slice(frzCols, row[i].cells.length) : row[i].cells = row[i].cells.slice(0, frzCols);
            return this.isFrzLoad++, row;
        }, FreezeRowModelGenerator;
    }(), __extends$101 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), FreezeContentRender = function(_super) {
        function FreezeContentRender(parent, locator) {
            return _super.call(this, parent, locator) || this;
        }
        return __extends$101(FreezeContentRender, _super), FreezeContentRender.prototype.renderPanel = function() {
            _super.prototype.renderPanel.call(this);
            var fDiv = this.parent.createElement("div", {
                className: "e-frozencontent"
            }), mDiv = this.parent.createElement("div", {
                className: "e-movablecontent"
            });
            this.getPanel().firstChild.appendChild(fDiv), this.getPanel().firstChild.appendChild(mDiv), 
            this.setFrozenContent(fDiv), this.setMovableContent(mDiv);
        }, FreezeContentRender.prototype.renderEmpty = function(tbody) {
            _super.prototype.renderEmpty.call(this, tbody), this.getMovableContent().querySelector("tbody").innerHTML = "<tr><td></td></tr>", 
            this.getFrozenContent().querySelector(".e-emptyrow").querySelector("td").colSpan = this.parent.getFrozenColumns(), 
            this.getFrozenContent().style.borderRightWidth = "0px", this.parent.frozenRows && (this.parent.getHeaderContent().querySelector(".e-frozenheader").querySelector("tbody").innerHTML = "", 
            this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("tbody").innerHTML = "");
        }, FreezeContentRender.prototype.setFrozenContent = function(ele) {
            this.frozenContent = ele;
        }, FreezeContentRender.prototype.setMovableContent = function(ele) {
            this.movableContent = ele;
        }, FreezeContentRender.prototype.getFrozenContent = function() {
            return this.frozenContent;
        }, FreezeContentRender.prototype.getMovableContent = function() {
            return this.movableContent;
        }, FreezeContentRender.prototype.getModelGenerator = function() {
            return new FreezeRowModelGenerator(this.parent);
        }, FreezeContentRender.prototype.renderTable = function() {
            _super.prototype.renderTable.call(this), this.getFrozenContent().appendChild(this.getTable());
            var mTbl = this.getTable().cloneNode(!0);
            this.getMovableContent().appendChild(mTbl), remove(this.getMovableContent().querySelector("colgroup"));
            var colGroup = this.parent.getHeaderContent().querySelector(".e-movableheader").querySelector("colgroup").cloneNode(!0);
            mTbl.insertBefore(colGroup, mTbl.querySelector("tbody"));
        }, FreezeContentRender;
    }(ContentRender), FreezeRender = function(_super) {
        function FreezeRender(parent, locator) {
            var _this = _super.call(this, parent, locator) || this;
            return _this.addEventListener(), _this;
        }
        return __extends$101(FreezeRender, _super), FreezeRender.prototype.addEventListener = function() {
            this.parent.on(freezeRender, this.refreshFreeze, this), this.parent.on("frozenHeight", this.setFrozenHeight, this);
        }, FreezeRender.prototype.removeEventListener = function() {
            this.parent.isDestroyed || this.parent.off("frozenHeight", this.setFrozenHeight);
        }, FreezeRender.prototype.renderTable = function() {
            _super.prototype.renderTable.call(this), this.rfshMovable(), this.updateColgroup(), 
            this.initializeHeaderDrag(), this.initializeHeaderDrop(), this.parent.notify(headerRefreshed, {
                rows: this.rows,
                args: {
                    isFrozen: !1
                }
            });
        }, FreezeRender.prototype.renderPanel = function() {
            _super.prototype.renderPanel.call(this);
            var fDiv = this.parent.createElement("div", {
                className: "e-frozenheader"
            }), mDiv = this.parent.createElement("div", {
                className: "e-movableheader"
            });
            this.getPanel().firstChild.appendChild(fDiv), this.getPanel().firstChild.appendChild(mDiv), 
            this.setFrozenHeader(fDiv), this.setMovableHeader(mDiv);
        }, FreezeRender.prototype.refreshUI = function() {
            var tbody = this.getMovableHeader().querySelector("tbody");
            remove(this.getMovableHeader().querySelector("table")), _super.prototype.refreshUI.call(this), 
            this.rfshMovable(), this.getMovableHeader().querySelector("tbody").innerHTML = tbody.innerHTML, 
            this.updateColgroup(), this.parent.updateDefaultCursor(), renderMovable(this.parent.getContentTable().querySelector("colgroup"), this.parent.getFrozenColumns()), 
            this.initializeHeaderDrag(), this.parent.notify(headerRefreshed, {
                rows: this.rows,
                args: {
                    isFrozen: !1
                }
            });
        }, FreezeRender.prototype.rfshMovable = function() {
            this.getFrozenHeader().appendChild(this.getTable()), this.getMovableHeader().appendChild(this.createTable()), 
            this.refreshStackedHdrHgt(), this.addMovableFirstCls();
        }, FreezeRender.prototype.addMovableFirstCls = function() {
            if (this.parent.getVisibleFrozenColumns()) for (var movablefirstcell = this.parent.element.querySelector(".e-movableheader").querySelector("thead").querySelectorAll(".e-columnheader"), len = this.parent.element.querySelector(".e-movableheader").querySelector("thead").querySelectorAll(".e-columnheader").length, i = 0; i < len; i++) {
                var element = movablefirstcell[i].cells[0];
                element && (addClass([ element ], [ "e-movablefirst" ]), movablefirstcell[i].cells[0].rowSpan > 1 && (i += movablefirstcell[i].cells[0].rowSpan - 1));
            }
        }, FreezeRender.prototype.refreshFreeze = function(obj) {
            if ("filter" === obj.case) {
                var filterRow = this.getTable().querySelector(".e-filterbar");
                this.parent.allowFiltering && filterRow && this.getMovableHeader().querySelector("thead") && this.getMovableHeader().querySelector("thead").appendChild(renderMovable(filterRow, this.parent.getFrozenColumns()));
            } else if ("textwrap" === obj.case) {
                var fRows = void 0, mRows = void 0, fHdr = this.getFrozenHeader(), mHdr = this.getMovableHeader(), cont = this.parent.getContent(), wrapMode = this.parent.textWrapSettings.wrapMode, hdrClassList = this.parent.getHeaderContent().firstChild.classList;
                ("Header" !== wrapMode || obj.isModeChg) && (fRows = cont.querySelector(".e-frozencontent").querySelectorAll("tr"), 
                mRows = cont.querySelector(".e-movablecontent").querySelectorAll("tr"), this.setWrapHeight(fRows, mRows, obj.isModeChg, !0)), 
                "Content" === wrapMode && this.parent.allowTextWrap ? hdrClassList.add("e-wrap") : hdrClassList.remove("e-wrap"), 
                "Both" === wrapMode || obj.isModeChg ? (fRows = fHdr.querySelectorAll("tr"), mRows = mHdr.querySelectorAll("tr")) : (fRows = fHdr.querySelector("Content" === wrapMode ? "tbody" : "thead").querySelectorAll("tr"), 
                mRows = mHdr.querySelector("Content" === wrapMode ? "tbody" : "thead").querySelectorAll("tr")), 
                this.parent.getHeaderContent().querySelectorAll(".e-stackedheadercell").length || this.setWrapHeight(fRows, mRows, obj.isModeChg, !1, this.colDepth > 1), 
                this.refreshStackedHdrHgt();
            }
        }, FreezeRender.prototype.updateResizeHandler = function() {
            [].slice.call(this.parent.getHeaderContent().querySelectorAll(".e-rhandler")).forEach(function(ele) {
                ele.style.height = ele.parentElement.offsetHeight + "px";
            });
        }, FreezeRender.prototype.setWrapHeight = function(fRows, mRows, isModeChg, isContReset, isStackedHdr) {
            for (var fRowHgt, mRowHgt, isWrap = this.parent.allowTextWrap, wrapMode = this.parent.textWrapSettings.wrapMode, tHead = this.parent.getHeaderContent().querySelector("thead"), tBody = this.parent.getHeaderContent().querySelector("tbody"), height = [], width = [], i = 0, len = fRows.length; i < len; i++) height[i] = fRows[i].offsetHeight, 
            width[i] = mRows[i].offsetHeight;
            for (i = 0, len = fRows.length; i < len; i++) (isModeChg && ("Header" === wrapMode && isContReset || "Content" === wrapMode && tHead.contains(fRows[i]) || "Header" === wrapMode && tBody.contains(fRows[i])) || isStackedHdr) && (fRows[i].style.height = null, 
            mRows[i].style.height = null), fRowHgt = height[i], mRowHgt = width[i], fRows[i].childElementCount && (isWrap && fRowHgt < mRowHgt || !isWrap && fRowHgt > mRowHgt || this.parent.allowResizing && !this.parent.resizeModule.isFrozenColResized) && (fRows[i].style.height = mRowHgt + "px"), 
            mRows[i].childElementCount && (isWrap && fRowHgt > mRowHgt || !isWrap && fRowHgt < mRowHgt || this.parent.allowResizing && this.parent.resizeModule.isFrozenColResized) && (mRows[i].style.height = fRowHgt + "px");
            isWrap && this.setFrozenHeight();
        }, FreezeRender.prototype.setFrozenHeight = function() {
            var movableContentHeight = this.parent.element.querySelector(".e-movablecontent").getBoundingClientRect().height;
            movableContentHeight > this.parent.element.querySelector(".e-frozencontent").getBoundingClientRect().height && (this.parent.element.querySelector(".e-frozencontent").style.height = movableContentHeight - getScrollBarWidth() + "px");
        }, FreezeRender.prototype.refreshStackedHdrHgt = function() {
            for (var fRowSpan, mRowSpan, fTr = this.getFrozenHeader().querySelectorAll(".e-columnheader"), mTr = this.getMovableHeader().querySelectorAll(".e-columnheader"), i = 0, len = fTr.length; i < len; i++) fRowSpan = this.getRowSpan(fTr[i]), 
            mRowSpan = this.getRowSpan(mTr[i]), fRowSpan.min > 1 ? this.updateStackedHdrRowHgt(i, fRowSpan.max, fTr[i], mTr) : mRowSpan.min > 1 && this.updateStackedHdrRowHgt(i, mRowSpan.max, mTr[i], fTr);
            this.parent.allowResizing && this.updateResizeHandler();
        }, FreezeRender.prototype.getRowSpan = function(row) {
            for (var rSpan, minRowSpan, maxRowSpan, i = 0, len = row.childElementCount; i < len; i++) 0 === i && (minRowSpan = row.children[0].rowSpan), 
            rSpan = row.children[i].rowSpan, minRowSpan = Math.min(rSpan, minRowSpan), maxRowSpan = Math.max(rSpan, minRowSpan);
            return {
                min: minRowSpan,
                max: maxRowSpan
            };
        }, FreezeRender.prototype.updateStackedHdrRowHgt = function(idx, maxRowSpan, row, rows) {
            for (var height = 0, i = 0; i < maxRowSpan; i++) height += rows[idx + i].style.height ? parseInt(rows[idx + i].style.height, 10) : rows[idx + i].offsetHeight;
            row.style.height = height + "px";
        }, FreezeRender.prototype.setFrozenHeader = function(ele) {
            this.frozenHeader = ele;
        }, FreezeRender.prototype.setMovableHeader = function(ele) {
            this.movableHeader = ele;
        }, FreezeRender.prototype.getFrozenHeader = function() {
            return this.frozenHeader;
        }, FreezeRender.prototype.getMovableHeader = function() {
            return this.movableHeader;
        }, FreezeRender.prototype.updateColgroup = function() {
            var mTable = this.getMovableHeader().querySelector("table");
            remove(this.getMovableHeader().querySelector("colgroup")), mTable.insertBefore(renderMovable(this.getFrozenHeader().querySelector("colgroup"), this.parent.getFrozenColumns()), mTable.querySelector("thead"));
        }, FreezeRender;
    }(HeaderRender), Freeze = function() {
        function Freeze(parent, locator) {
            this.parent = parent, this.locator = locator, this.addEventListener();
        }
        return Freeze.prototype.getModuleName = function() {
            return "freeze";
        }, Freeze.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(initialLoad, this.instantiateRenderer, this), 
            this.parent.on(initialEnd, this.wireEvents, this));
        }, Freeze.prototype.wireEvents = function() {
            this.parent.frozenRows && EventHandler.add(this.parent.getHeaderContent(), "dblclick", this.dblClickHandler, this);
        }, Freeze.prototype.dblClickHandler = function(e) {
            parentsUntil(e.target, "e-grid").id === this.parent.element.id && this.parent.notify("dblclick", e);
        }, Freeze.prototype.instantiateRenderer = function() {
            var renderer = this.locator.getService("rendererFactory");
            this.parent.getFrozenColumns() && (renderer.addRenderer(RenderType.Header, new FreezeRender(this.parent, this.locator)), 
            renderer.addRenderer(RenderType.Content, new FreezeContentRender(this.parent, this.locator)));
        }, Freeze.prototype.removeEventListener = function() {
            this.parent.isDestroyed || this.parent.off(initialLoad, this.instantiateRenderer);
        }, Freeze.prototype.destroy = function() {
            this.removeEventListener();
        }, Freeze;
    }(), ColumnMenu = function() {
        function ColumnMenu(parent, serviceLocator) {
            this.defaultItems = {}, this.localeText = this.setLocaleKey(), this.disableItems = [], 
            this.hiddenItems = [], this.isOpen = !1, this.GROUP = "e-icon-group", this.UNGROUP = "e-icon-ungroup", 
            this.ASCENDING = "e-icon-ascending", this.DESCENDING = "e-icon-descending", this.ROOT = "e-columnmenu", 
            this.FILTER = "e-icon-filter", this.POP = "e-filter-popup", this.WRAP = "e-col-menu", 
            this.CHOOSER = "_chooser_", this.parent = parent, this.gridID = parent.element.id, 
            this.serviceLocator = serviceLocator, this.addEventListener();
        }
        return ColumnMenu.prototype.wireEvents = function() {
            var _this = this;
            this.getColumnMenuHandlers().forEach(function(ele) {
                EventHandler.add(ele, "mousedown", _this.columnMenuHandlerDown, _this);
            });
        }, ColumnMenu.prototype.unwireEvents = function() {
            var _this = this;
            this.getColumnMenuHandlers().forEach(function(ele) {
                EventHandler.remove(ele, "mousedown", _this.columnMenuHandlerDown);
            });
        }, ColumnMenu.prototype.destroy = function() {
            var gridElement = this.parent.element;
            gridElement && (gridElement.querySelector(".e-gridheader") || gridElement.querySelector(".e-gridcontent")) && (this.columnMenu.destroy(), 
            this.removeEventListener(), this.unwireFilterEvents(), this.unwireEvents(), remove(this.element));
        }, ColumnMenu.prototype.columnMenuHandlerClick = function(e) {
            e.target.classList.contains("e-columnmenu") && (this.isOpen && this.headerCell !== this.getHeaderCell(e) || document.querySelector(".e-grid-menu .e-menu-parent.e-ul") ? (this.columnMenu.close(), 
            this.openColumnMenu(e)) : this.isOpen ? this.columnMenu.close() : this.openColumnMenu(e));
        }, ColumnMenu.prototype.openColumnMenu = function(e) {
            var pos = {
                top: 0,
                left: 0
            };
            this.element.style.cssText = "display:block;visibility:hidden";
            var elePos = this.element.getBoundingClientRect();
            this.element.style.cssText = "display:none;visibility:visible", this.headerCell = this.getHeaderCell(e), 
            Browser.isDevice ? (pos.top = window.innerHeight / 2 - elePos.height / 2, pos.left = window.innerWidth / 2 - elePos.width / 2) : this.parent.enableRtl ? pos = calculatePosition(this.headerCell, "left", "bottom") : (pos = calculatePosition(this.headerCell, "right", "bottom")).left -= elePos.width, 
            this.columnMenu.open(pos.top, pos.left), e.preventDefault();
        }, ColumnMenu.prototype.columnMenuHandlerDown = function(e) {
            this.isOpen = !("none" === this.element.style.display || "" === this.element.style.display);
        }, ColumnMenu.prototype.getColumnMenuHandlers = function() {
            return [].slice.call(this.parent.getHeaderTable().querySelectorAll("." + this.ROOT));
        }, ColumnMenu.prototype.addEventListener = function() {
            this.parent.isDestroyed || (this.parent.on(headerRefreshed, this.wireEvents, this), 
            this.parent.on(uiUpdate, this.enableAfterRenderMenu, this), this.parent.on(initialEnd, this.render, this), 
            this.isFilterItemAdded() && this.parent.on("filterDialogCreated", this.filterPosition, this), 
            this.parent.on(click, this.columnMenuHandlerClick, this));
        }, ColumnMenu.prototype.removeEventListener = function() {
            this.parent.isDestroyed || (this.parent.off(headerRefreshed, this.unwireEvents), 
            this.parent.off(uiUpdate, this.enableAfterRenderMenu), this.parent.off(initialEnd, this.render), 
            this.isFilterItemAdded() && this.parent.off("filterDialogCreated", this.filterPosition), 
            this.parent.off(click, this.columnMenuHandlerClick));
        }, ColumnMenu.prototype.enableAfterRenderMenu = function(e) {
            e.module === this.getModuleName() && e.enable && (this.columnMenu && (this.columnMenu.destroy(), 
            remove(this.element)), this.render());
        }, ColumnMenu.prototype.render = function() {
            this.l10n = this.serviceLocator.getService("localization"), this.element = this.parent.createElement("ul", {
                id: this.gridID + "_columnmenu",
                className: "e-colmenu"
            }), this.parent.element.appendChild(this.element), this.columnMenu = new ContextMenu({
                cssClass: "e-grid-menu",
                enableRtl: this.parent.enableRtl,
                enablePersistence: this.parent.enablePersistence,
                locale: this.parent.locale,
                items: this.getItems(),
                select: this.columnMenuItemClick.bind(this),
                beforeOpen: this.columnMenuBeforeOpen.bind(this),
                onClose: this.columnMenuOnClose.bind(this),
                beforeItemRender: this.beforeMenuItemRender.bind(this),
                beforeClose: this.columnMenuBeforeClose.bind(this)
            }), this.columnMenu.appendTo(this.element), this.wireFilterEvents();
        }, ColumnMenu.prototype.wireFilterEvents = function() {
            !Browser.isDevice && this.isFilterItemAdded() && EventHandler.add(this.element, "mouseover", this.appendFilter, this);
        }, ColumnMenu.prototype.unwireFilterEvents = function() {
            !Browser.isDevice && this.isFilterItemAdded() && EventHandler.remove(this.element, "mouseover", this.appendFilter);
        }, ColumnMenu.prototype.beforeMenuItemRender = function(args) {
            if (this.isChooserItem(args.item)) {
                var field = this.getKeyFromId(args.item.id, this.CHOOSER), column = this.parent.getColumnByField(field), check = createCheckBox(this.parent.createElement, !1, {
                    label: args.item.text,
                    checked: column.visible
                });
                this.parent.enableRtl && check.classList.add("e-rtl"), args.element.innerHTML = "", 
                args.element.appendChild(check);
            } else args.item.id && "Filter" === this.getKeyFromId(args.item.id) && (args.element.appendChild(this.parent.createElement("span", {
                className: "e-icons e-caret"
            })), args.element.className += "e-filter-item e-menu-caret-icon");
        }, ColumnMenu.prototype.columnMenuBeforeClose = function(args) {
            var colChooser = args.event ? closest(args.event.target, ".e-menu-item") : null;
            !isNullOrUndefined(args.parentItem) && "ColumnChooser" === this.getKeyFromId(args.parentItem.id) && colChooser && this.isChooserItem(colChooser) ? args.cancel = !0 : args.event && (closest(args.event.target, "." + this.POP) || args.event.currentTarget && args.event.currentTarget.activeElement && parentsUntil(args.event.currentTarget.activeElement, "e-filter-popup") || parentsUntil(args.event.target, "e-popup") || parentsUntil(args.event.target, "e-popup-wrapper")) && !Browser.isDevice && (args.cancel = !0);
        }, ColumnMenu.prototype.isChooserItem = function(item) {
            return item.id && item.id.indexOf("_colmenu_") >= 0 && -1 === this.getKeyFromId(item.id, this.CHOOSER).indexOf("_colmenu_");
        }, ColumnMenu.prototype.columnMenuBeforeOpen = function(args) {
            args.column = this.targetColumn = this.getColumn(), this.parent.trigger("columnMenuOpen", args);
            for (var _i = 0, _a = args.items; _i < _a.length; _i++) {
                var item = _a[_i], key = this.getKeyFromId(item.id), dItem = this.defaultItems[key];
                -1 !== this.getDefaultItems().indexOf(key) && (this.ensureDisabledStatus(key) && !dItem.hide ? this.disableItems.push(item.text) : item.hide && this.hiddenItems.push(item.text));
            }
            this.columnMenu.enableItems(this.disableItems, !1), this.columnMenu.hideItems(this.hiddenItems);
        }, ColumnMenu.prototype.ensureDisabledStatus = function(item) {
            var _this = this, status = !1;
            switch (item) {
              case "Group":
                (!this.parent.allowGrouping || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0) && (status = !0);
                break;

              case "AutoFitAll":
              case "AutoFit":
                status = !this.parent.ensureModuleInjected(Resize);
                break;

              case "Ungroup":
                (!this.parent.ensureModuleInjected(Group) || this.parent.ensureModuleInjected(Group) && this.targetColumn && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0) && (status = !0);
                break;

              case "SortDescending":
              case "SortAscending":
                this.parent.allowSorting && this.parent.ensureModuleInjected(Sort) && this.parent.sortSettings.columns.length > 0 && this.targetColumn ? this.parent.sortSettings.columns.forEach(function(ele) {
                    ele.field === _this.targetColumn.field && ele.direction.toLocaleLowerCase() === item.toLocaleLowerCase().replace("sort", "") && (status = !0);
                }) : this.parent.allowSorting && this.parent.ensureModuleInjected(Sort) || (status = !0);
                break;

              case "Filter":
                status = !(this.parent.allowFiltering && "FilterBar" !== this.parent.filterSettings.type && this.parent.ensureModuleInjected(Filter));
            }
            return status;
        }, ColumnMenu.prototype.columnMenuItemClick = function(args) {
            switch (this.isChooserItem(args.item) ? "ColumnChooser" : this.getKeyFromId(args.item.id)) {
              case "AutoFit":
                this.parent.autoFitColumns(this.targetColumn.field);
                break;

              case "AutoFitAll":
                this.parent.autoFitColumns([]);
                break;

              case "Ungroup":
                this.parent.ungroupColumn(this.targetColumn.field);
                break;

              case "Group":
                this.parent.groupColumn(this.targetColumn.field);
                break;

              case "SortAscending":
                this.parent.sortColumn(this.targetColumn.field, "Ascending");
                break;

              case "SortDescending":
                this.parent.sortColumn(this.targetColumn.field, "Descending");
                break;

              case "ColumnChooser":
                var key = this.getKeyFromId(args.item.id, this.CHOOSER), checkbox = args.element.querySelector(".e-checkbox-wrapper .e-frame");
                checkbox && checkbox.classList.contains("e-check") ? (checkbox.classList.remove("e-check"), 
                this.parent.hideColumns(key, "field")) : checkbox && (this.parent.showColumns(key, "field"), 
                checkbox.classList.add("e-check"));
                break;

              case "Filter":
                this.getFilter(args.element, args.item.id);
            }
            args.column = this.targetColumn, this.parent.trigger("columnMenuClick", args);
        }, ColumnMenu.prototype.columnMenuOnClose = function(args) {
            args.items.length > 0 && args.items[0].parentObj instanceof ContextMenu && (this.columnMenu.enableItems(this.disableItems), 
            this.disableItems = [], this.columnMenu.showItems(this.hiddenItems), this.hiddenItems = [], 
            this.isFilterPopupOpen() && this.getFilter(args.element, args.element.id, !0));
        }, ColumnMenu.prototype.getDefaultItems = function() {
            return [ "AutoFitAll", "AutoFit", "SortAscending", "SortDescending", "Group", "Ungroup", "ColumnChooser", "Filter" ];
        }, ColumnMenu.prototype.getItems = function() {
            for (var items = [], _i = 0, defultItems_1 = this.parent.columnMenuItems ? this.parent.columnMenuItems : this.getDefault(); _i < defultItems_1.length; _i++) {
                var item = defultItems_1[_i];
                if ("string" == typeof item) if ("ColumnChooser" === item) {
                    var col = this.getDefaultItem(item);
                    col.items = this.createChooserItems(), items.push(col);
                } else items.push(this.getDefaultItem(item)); else items.push(item);
            }
            return items;
        }, ColumnMenu.prototype.getDefaultItem = function(item) {
            var menuItem = {};
            switch (item) {
              case "SortAscending":
                menuItem = {
                    iconCss: this.ASCENDING
                };
                break;

              case "SortDescending":
                menuItem = {
                    iconCss: this.DESCENDING
                };
                break;

              case "Group":
                menuItem = {
                    iconCss: this.GROUP
                };
                break;

              case "Ungroup":
                menuItem = {
                    iconCss: this.UNGROUP
                };
                break;

              case "Filter":
                menuItem = {
                    iconCss: this.FILTER
                };
            }
            return this.defaultItems[item] = {
                text: this.getLocaleText(item),
                id: this.generateID(item),
                iconCss: menuItem.iconCss ? "e-icons " + menuItem.iconCss : null
            }, this.defaultItems[item];
        }, ColumnMenu.prototype.getLocaleText = function(item) {
            return this.l10n.getConstant(this.localeText[item]);
        }, ColumnMenu.prototype.generateID = function(item, append) {
            return this.gridID + "_colmenu_" + (append ? append + item : item);
        }, ColumnMenu.prototype.getKeyFromId = function(id, append) {
            return id.indexOf("_colmenu_") > 0 && id.replace(this.gridID + "_colmenu_" + (append || ""), "");
        }, ColumnMenu.prototype.getColumnMenu = function() {
            return this.element;
        }, ColumnMenu.prototype.getModuleName = function() {
            return "columnMenu";
        }, ColumnMenu.prototype.setLocaleKey = function() {
            return {
                AutoFitAll: "autoFitAll",
                AutoFit: "autoFit",
                Group: "Group",
                Ungroup: "Ungroup",
                SortAscending: "SortAscending",
                SortDescending: "SortDescending",
                ColumnChooser: "Columnchooser",
                Filter: "FilterMenu"
            };
        }, ColumnMenu.prototype.getHeaderCell = function(e) {
            return closest(e.target, "th.e-headercell");
        }, ColumnMenu.prototype.getColumn = function() {
            if (this.headerCell) {
                var uid = this.headerCell.querySelector(".e-headercelldiv").getAttribute("e-mappinguid");
                return this.parent.getColumnByUid(uid);
            }
            return null;
        }, ColumnMenu.prototype.createChooserItems = function() {
            for (var items = [], _i = 0, _a = this.parent.getColumns(); _i < _a.length; _i++) {
                var col = _a[_i];
                col.showInColumnChooser && col.field && items.push({
                    id: this.generateID(col.field, this.CHOOSER),
                    text: col.headerText ? col.headerText : col.field
                });
            }
            return items;
        }, ColumnMenu.prototype.appendFilter = function(e) {
            if (this.defaultItems.Filter) {
                var key = this.defaultItems.Filter.id;
                closest(e.target, "#" + key) && !this.isFilterPopupOpen() ? this.getFilter(e.target, key) : !closest(e.target, "#" + key) && this.isFilterPopupOpen() && this.getFilter(e.target, key, !0);
            }
        }, ColumnMenu.prototype.getFilter = function(target, id, isClose) {
            var filterPopup = this.getFilterPop();
            filterPopup ? filterPopup.style.display = !Browser.isDevice && isClose ? "none" : "block" : this.parent.notify("filterOpen", {
                col: this.targetColumn,
                target: target,
                isClose: isClose,
                id: id
            });
        }, ColumnMenu.prototype.setPosition = function(li, ul) {
            var gridPos = this.parent.element.getBoundingClientRect(), liPos = li.getBoundingClientRect(), left = liPos.left - gridPos.left, top = liPos.top - gridPos.top;
            gridPos.height < top ? top = top - ul.offsetHeight + liPos.height : gridPos.height < top + ul.offsetHeight && (top = gridPos.height - ul.offsetHeight), 
            window.innerHeight < ul.offsetHeight + top + gridPos.top && (top = window.innerHeight - ul.offsetHeight - gridPos.top), 
            left += this.parent.enableRtl ? -ul.offsetWidth : liPos.width, gridPos.width <= left + ul.offsetWidth ? left -= liPos.width + ul.offsetWidth : left < 0 && (left += ul.offsetWidth + liPos.width), 
            ul.style.top = top + "px", ul.style.left = left + "px";
        }, ColumnMenu.prototype.filterPosition = function(e) {
            var filterPopup = this.getFilterPop();
            if (filterPopup.classList.add(this.WRAP), !Browser.isDevice) {
                var disp = filterPopup.style.display;
                filterPopup.style.cssText += "display:block;visibility:hidden";
                var li = this.element.querySelector("." + this.FILTER);
                li && (this.setPosition(li.parentElement, filterPopup), filterPopup.style.cssText += "display:" + disp + ";visibility:visible");
            }
        }, ColumnMenu.prototype.getDefault = function() {
            var items = [];
            return this.parent.ensureModuleInjected(Resize) && (items.push("AutoFitAll"), items.push("AutoFit")), 
            this.parent.allowGrouping && this.parent.ensureModuleInjected(Group) && (items.push("Group"), 
            items.push("Ungroup")), this.parent.allowSorting && this.parent.ensureModuleInjected(Sort) && (items.push("SortAscending"), 
            items.push("SortDescending")), items.push("ColumnChooser"), this.parent.allowFiltering && "FilterBar" !== this.parent.filterSettings.type && this.parent.ensureModuleInjected(Filter) && items.push("Filter"), 
            items;
        }, ColumnMenu.prototype.isFilterPopupOpen = function() {
            var filterPopup = this.getFilterPop();
            return filterPopup && "none" !== filterPopup.style.display;
        }, ColumnMenu.prototype.getFilterPop = function() {
            return this.parent.element.querySelector("." + this.POP);
        }, ColumnMenu.prototype.isFilterItemAdded = function() {
            return this.parent.columnMenuItems && this.parent.columnMenuItems.indexOf("Filter") >= 0 || !this.parent.columnMenuItems;
        }, ColumnMenu;
    }(), __extends$102 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), ForeignKey = function(_super) {
        function ForeignKey(parent, serviceLocator) {
            var _this = _super.call(this, parent, serviceLocator) || this;
            return _this.parent = parent, _this.serviceLocator = serviceLocator, _this.initEvent(), 
            _this;
        }
        return __extends$102(ForeignKey, _super), ForeignKey.prototype.initEvent = function() {
            this.parent.isDestroyed || (this.parent.on("initForeignKeyColumn", this.initForeignKeyColumns, this), 
            this.parent.on("getForeignKeyData", this.getForeignKeyData, this), this.parent.on("generateQuery", this.generateQueryFormData, this));
        }, ForeignKey.prototype.initForeignKeyColumns = function(columns) {
            columns.forEach(function(column) {
                column.dataSource = column.dataSource instanceof DataManager ? column.dataSource : isNullOrUndefined(column.dataSource) ? new DataManager() : new DataManager(column.dataSource);
            });
        }, ForeignKey.prototype.getForeignKeyData = function(args) {
            var _this = this, foreignColumns = args.column ? [ args.column ] : this.parent.getForeignKeyColumns(), allPromise = [];
            foreignColumns.forEach(function(col) {
                var promise, query = args.isComplex ? _this.genarateColumnQuery(col) : _this.genarateQuery(col, args.result.result, !1, !0), dataSource = col.dataSource;
                promise = !dataSource.ready || dataSource.dataSource.offline ? dataSource.executeQuery(query) : dataSource.ready.then(function() {
                    return dataSource.executeQuery(query);
                }), allPromise.push(promise);
            }), Promise.all(allPromise).then(function(responses) {
                responses.forEach(function(data, index) {
                    foreignColumns[index].columnData = data.result;
                }), args.promise.resolve(args.result);
            }).catch(function(e) {
                return args.promise && args.promise.reject && args.promise.reject(e), e;
            });
        }, ForeignKey.prototype.generateQueryFormData = function(args) {
            args.predicate.predicate = this.genarateQuery(args.column, args.column.columnData, !0);
        }, ForeignKey.prototype.genarateQuery = function(column, e, fromData, needQuery) {
            var gObj = this.parent, predicates = [], query = new Query(), field = fromData ? column.foreignKeyField : column.field;
            if (gObj.allowPaging || gObj.enableVirtualization || fromData) {
                e = new DataManager(gObj.allowGrouping && gObj.groupSettings.columns.length && !fromData ? e.records : e).executeLocal(new Query().select(field));
                var filteredValue = DataUtil.distinct(e, field, !1);
                field = fromData ? column.field : column.foreignKeyField, filteredValue.forEach(function(obj) {
                    obj && obj.getDay ? predicates.push(getDatePredicate({
                        field: field,
                        operator: "equal",
                        value: obj,
                        matchCase: !1
                    })) : predicates.push(new Predicate$1(field, "equal", obj, !1));
                });
            }
            return needQuery ? predicates.length ? query.where(Predicate$1.or(predicates)) : query : predicates.length ? Predicate$1.or(predicates) : {
                predicates: []
            };
        }, ForeignKey.prototype.genarateColumnQuery = function(column) {
            var gObj = this.parent, query = new Query(), queryColumn = this.isFiltered(column);
            if (queryColumn.isTrue && (query = this.filterQuery(query, queryColumn.column, !0)), 
            gObj.searchSettings.key.length) {
                var sSettings = gObj.searchSettings;
                query.search(sSettings.key, column.foreignKeyValue, sSettings.operator, sSettings.ignoreCase);
            }
            return query;
        }, ForeignKey.prototype.isFiltered = function(column) {
            var filterColumn = this.parent.filterSettings.columns.filter(function(fColumn) {
                return fColumn.field === column.foreignKeyValue;
            });
            return {
                column: filterColumn,
                isTrue: !!filterColumn.length
            };
        }, ForeignKey.prototype.getModuleName = function() {
            return "foreignKey";
        }, ForeignKey.prototype.destroy = function() {
            this.destroyEvent();
        }, ForeignKey.prototype.destroyEvent = function() {
            this.parent.isDestroyed || (this.parent.off("initForeignKeyColumn", this.initForeignKeyColumns), 
            this.parent.off("getForeignKeyData", this.getForeignKeyData), this.parent.off("generateQuery", this.generateQueryFormData));
        }, ForeignKey;
    }(Data), _grid = Object.freeze({
        SortDescriptor: SortDescriptor,
        SortSettings: SortSettings,
        Predicate: Predicate,
        FilterSettings: FilterSettings,
        SelectionSettings: SelectionSettings,
        SearchSettings: SearchSettings,
        RowDropSettings: RowDropSettings,
        TextWrapSettings: TextWrapSettings,
        GroupSettings: GroupSettings,
        EditSettings: EditSettings,
        Grid: Grid,
        get CellType() {
            return CellType;
        },
        get RenderType() {
            return RenderType;
        },
        get ToolbarItem() {
            return ToolbarItem;
        },
        doesImplementInterface: doesImplementInterface,
        valueAccessor: valueAccessor,
        getUpdateUsingRaf: getUpdateUsingRaf,
        iterateArrayOrObject: iterateArrayOrObject,
        iterateExtend: iterateExtend,
        templateCompiler: templateCompiler,
        setStyleAndAttributes: setStyleAndAttributes,
        extend: extend$1,
        prepareColumns: prepareColumns,
        setCssInGridPopUp: setCssInGridPopUp,
        getActualProperties: getActualProperties,
        parentsUntil: parentsUntil,
        getElementIndex: getElementIndex,
        inArray: inArray,
        getActualPropFromColl: getActualPropFromColl,
        removeElement: removeElement,
        getPosition: getPosition,
        getUid: getUid,
        appendChildren: appendChildren,
        parents: parents,
        calculateAggregate: calculateAggregate,
        getScrollBarWidth: getScrollBarWidth,
        getRowHeight: getRowHeight,
        isComplexField: isComplexField,
        getComplexFieldID: getComplexFieldID,
        setComplexFieldID: setComplexFieldID,
        isEditable: isEditable,
        isActionPrevent: isActionPrevent,
        wrap: wrap,
        setFormatter: setFormatter,
        addRemoveActiveClasses: addRemoveActiveClasses,
        distinctStringValues: distinctStringValues,
        getFilterMenuPostion: getFilterMenuPostion,
        getZIndexCalcualtion: getZIndexCalcualtion,
        toogleCheckbox: toogleCheckbox,
        createCboxWithWrap: createCboxWithWrap,
        removeAddCboxClasses: removeAddCboxClasses,
        refreshForeignData: refreshForeignData,
        getForeignData: getForeignData,
        getColumnByForeignKeyValue: getColumnByForeignKeyValue,
        getDatePredicate: getDatePredicate,
        renderMovable: renderMovable,
        getObject: getObject$1,
        getCustomDateFormat: getCustomDateFormat,
        created: "create",
        destroyed: "destroy",
        load: "load",
        rowDataBound: "rowDataBound",
        queryCellInfo: "queryCellInfo",
        headerCellInfo: "headerCellInfo",
        actionBegin: actionBegin,
        actionComplete: actionComplete,
        actionFailure: "actionFailure",
        dataBound: dataBound,
        rowSelecting: "rowSelecting",
        rowSelected: "rowSelected",
        rowDeselecting: "rowDeselecting",
        rowDeselected: "rowDeselected",
        cellSelecting: "cellSelecting",
        cellSelected: "cellSelected",
        cellDeselecting: "cellDeselecting",
        cellDeselected: "cellDeselected",
        columnDragStart: columnDragStart,
        columnDrag: columnDrag,
        columnDrop: columnDrop,
        rowDragStart: rowDragStart,
        rowDrag: rowDrag,
        rowDrop: rowDrop,
        beforePrint: "beforePrint",
        printComplete: "printComplete",
        detailDataBound: "detailDataBound",
        toolbarClick: "toolbarClick",
        batchAdd: "batchAdd",
        batchCancel: "batchCancel",
        batchDelete: "batchDelete",
        beforeBatchAdd: "beforeBatchAdd",
        beforeBatchDelete: "beforeBatchDelete",
        beforeBatchSave: "beforeBatchSave",
        beginEdit: "beginEdit",
        cellEdit: "cellEdit",
        cellSave: "cellSave",
        cellSaved: "cellSaved",
        endAdd: "endAdd",
        endDelete: "endDelete",
        endEdit: "endEdit",
        recordDoubleClick: "recordDoubleClick",
        recordClick: "recordClick",
        beforeDataBound: "beforeDataBound",
        beforeOpenColumnChooser: "beforeOpenColumnChooser",
        resizeStart: "resizeStart",
        onResize: "resizing",
        resizeStop: "resizeStop",
        checkBoxChange: "checkBoxChange",
        beforeCopy: "beforeCopy",
        filterChoiceRequest: "filterchoicerequest",
        filterAfterOpen: "filterafteropen",
        filterBeforeOpen: "filterbeforeopen",
        filterSearchBegin: "filtersearchbegin",
        initialLoad: initialLoad,
        initialEnd: initialEnd,
        dataReady: dataReady,
        contentReady: contentReady,
        uiUpdate: uiUpdate,
        onEmpty: onEmpty,
        inBoundModelChanged: inBoundModelChanged,
        modelChanged: modelChanged,
        colGroupRefresh: colGroupRefresh,
        headerRefreshed: headerRefreshed,
        pageBegin: "paging-begin",
        pageComplete: "paging-complete",
        sortBegin: "sorting-begin",
        sortComplete: "sorting-complete",
        filterBegin: "filtering-begin",
        filterComplete: "filtering-complete",
        searchBegin: "searching-begin",
        searchComplete: "searching-complete",
        reorderBegin: "reorder-begin",
        reorderComplete: reorderComplete,
        rowDragAndDropBegin: "rowdraganddrop-begin",
        rowDragAndDropComplete: rowDragAndDropComplete,
        groupBegin: "grouping-begin",
        groupComplete: "grouping-complete",
        ungroupBegin: "ungrouping-begin",
        ungroupComplete: "ungrouping-complete",
        groupAggregates: "group-aggregates",
        refreshFooterRenderer: "refresh-footer-rendered",
        refreshAggregateCell: "refresh-aggregate-cell",
        refreshAggregates: "refresh-aggregates",
        rowSelectionBegin: "rowselecting",
        rowSelectionComplete: "rowselected",
        columnSelectionBegin: "columnselecting",
        columnSelectionComplete: "columnselected",
        cellSelectionBegin: "cellselecting",
        cellSelectionComplete: "cellselected",
        beforeCellFocused: "beforecellfocused",
        cellFocused: "cellfocused",
        keyPressed: keyPressed,
        click: click,
        destroy: destroy$1,
        columnVisibilityChanged: columnVisibilityChanged,
        scroll: "scroll",
        columnWidthChanged: "column-width-changed",
        columnPositionChanged: columnPositionChanged,
        rowDragAndDrop: "row-drag-and-drop",
        rowsAdded: rowsAdded,
        rowsRemoved: rowsRemoved,
        columnDragStop: columnDragStop,
        headerDrop: headerDrop,
        dataSourceModified: dataSourceModified,
        refreshComplete: "refresh-complete",
        refreshVirtualBlock: refreshVirtualBlock,
        dblclick: "dblclick",
        toolbarRefresh: "toolbar-refresh",
        bulkSave: "bulk-save",
        autoCol: "auto-col",
        tooltipDestroy: "tooltip-destroy",
        updateData: updateData,
        editBegin: "edit-begin",
        editComplete: "edit-complete",
        addBegin: "add-begin",
        addComplete: "add-complete",
        saveComplete: "save-complete",
        deleteBegin: "delete-begin",
        deleteComplete: "delete-complete",
        preventBatch: preventBatch,
        dialogDestroy: dialogDestroy,
        crudAction: "crud-Action",
        addDeleteAction: addDeleteAction,
        destroyForm: "destroy-form",
        doubleTap: "double-tap",
        beforeExcelExport: "beforeExcelExport",
        excelExportComplete: "excelExportComplete",
        excelQueryCellInfo: "excelQueryCellInfo",
        excelHeaderQueryCellInfo: "excelHeaderQueryCellInfo",
        beforePdfExport: "beforePdfExport",
        pdfExportComplete: "pdfExportComplete",
        pdfQueryCellInfo: "pdfQueryCellInfo",
        pdfHeaderQueryCellInfo: "pdfHeaderQueryCellInfo",
        accessPredicate: "access-predicate",
        contextMenuClick: "contextMenuClick",
        freezeRender: freezeRender,
        freezeRefresh: "freezerefresh",
        contextMenuOpen: "contextMenuOpen",
        columnMenuClick: "columnMenuClick",
        columnMenuOpen: "columnMenuOpen",
        filterOpen: "filterOpen",
        filterDialogCreated: "filterDialogCreated",
        filterMenuClose: "filter-menu-close",
        initForeignKeyColumn: "initForeignKeyColumn",
        getForeignKeyData: "getForeignKeyData",
        generateQuery: "generateQuery",
        showEmptyGrid: "showEmptyGrid",
        foreignKeyData: "foreignKeyData",
        dataStateChange: "dataStateChange",
        dataSourceChanged: "dataSourceChanged",
        rtlUpdated: "rtl-updated",
        beforeFragAppend: "beforeFragAppend",
        frozenHeight: "frozenHeight",
        recordAdded: "recordAdded",
        cancelBegin: "cancel-Begin",
        editNextValCell: "editNextValCell",
        Data: Data,
        Sort: Sort,
        Page: Page,
        Selection: Selection,
        Filter: Filter,
        Search: Search,
        Scroll: Scroll,
        resizeClassList: resizeClassList,
        Resize: Resize,
        Reorder: Reorder,
        RowDD: RowDD,
        Group: Group,
        Print: Print,
        DetailRow: DetailRow,
        Toolbar: Toolbar$1,
        Aggregate: Aggregate,
        summaryIterator: summaryIterator,
        VirtualScroll: VirtualScroll,
        Edit: Edit,
        get Global() {
            return Global;
        },
        BatchEdit: BatchEdit,
        InlineEdit: InlineEdit,
        NormalEdit: NormalEdit,
        DialogEdit: DialogEdit,
        ColumnChooser: ColumnChooser,
        ExcelExport: ExcelExport,
        PdfExport: PdfExport,
        ExportHelper: ExportHelper,
        ExportValueFormatter: ExportValueFormatter,
        Clipboard: Clipboard,
        CommandColumn: CommandColumn,
        CheckBoxFilter: CheckBoxFilter,
        menuClass: menuClass,
        ContextMenu: ContextMenu$1,
        Freeze: Freeze,
        ColumnMenu: ColumnMenu,
        ExcelFilter: ExcelFilter,
        ForeignKey: ForeignKey,
        Column: Column,
        Row: Row,
        Cell: Cell,
        HeaderRender: HeaderRender,
        ContentRender: ContentRender,
        RowRenderer: RowRenderer,
        CellRenderer: CellRenderer,
        HeaderCellRenderer: HeaderCellRenderer,
        FilterCellRenderer: FilterCellRenderer,
        StackedHeaderCellRenderer: StackedHeaderCellRenderer,
        Render: Render,
        IndentCellRenderer: IndentCellRenderer,
        GroupCaptionCellRenderer: GroupCaptionCellRenderer,
        GroupCaptionEmptyCellRenderer: GroupCaptionEmptyCellRenderer,
        BatchEditRender: BatchEditRender,
        DialogEditRender: DialogEditRender,
        InlineEditRender: InlineEditRender,
        EditRender: EditRender,
        BooleanEditCell: BooleanEditCell,
        DefaultEditCell: DefaultEditCell,
        DropDownEditCell: DropDownEditCell,
        NumericEditCell: NumericEditCell,
        DatePickerEditCell: DatePickerEditCell,
        CommandColumnRenderer: CommandColumnRenderer,
        FreezeContentRender: FreezeContentRender,
        FreezeRender: FreezeRender,
        StringFilterUI: StringFilterUI,
        NumberFilterUI: NumberFilterUI,
        DateFilterUI: DateFilterUI,
        BooleanFilterUI: BooleanFilterUI,
        FlMenuOptrUI: FlMenuOptrUI,
        CellRendererFactory: CellRendererFactory,
        ServiceLocator: ServiceLocator,
        RowModelGenerator: RowModelGenerator,
        GroupModelGenerator: GroupModelGenerator,
        FreezeRowModelGenerator: FreezeRowModelGenerator
    }), __extends$104 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$49 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, FOCUSED$1 = "e-focused", HEADER$4 = "e-menu-header", SELECTED$5 = "e-selected", HIDE$1 = "e-menu-hide", FieldSettings$3 = function(_super) {
        function FieldSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$104(FieldSettings, _super), __decorate$49([ Property("id") ], FieldSettings.prototype, "itemId", void 0), 
        __decorate$49([ Property("parentId") ], FieldSettings.prototype, "parentId", void 0), 
        __decorate$49([ Property("text") ], FieldSettings.prototype, "text", void 0), __decorate$49([ Property("iconCss") ], FieldSettings.prototype, "iconCss", void 0), 
        __decorate$49([ Property("url") ], FieldSettings.prototype, "url", void 0), __decorate$49([ Property("separator") ], FieldSettings.prototype, "separator", void 0), 
        __decorate$49([ Property("items") ], FieldSettings.prototype, "children", void 0), 
        FieldSettings;
    }(ChildProperty), MenuItem$1 = function(_super) {
        function MenuItem() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$104(MenuItem, _super), __decorate$49([ Property(null) ], MenuItem.prototype, "iconCss", void 0), 
        __decorate$49([ Property("") ], MenuItem.prototype, "id", void 0), __decorate$49([ Property(!1) ], MenuItem.prototype, "separator", void 0), 
        __decorate$49([ Collection([], MenuItem) ], MenuItem.prototype, "items", void 0), 
        __decorate$49([ Property("") ], MenuItem.prototype, "text", void 0), __decorate$49([ Property("") ], MenuItem.prototype, "url", void 0), 
        MenuItem;
    }(ChildProperty), MenuBase$1 = function(_super) {
        function MenuBase(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.navIdx = [], _this.animation = new Animation({}), _this.isTapHold = !1, 
            _this;
        }
        return __extends$104(MenuBase, _super), MenuBase.prototype.preRender = function() {
            if ("EJS-CONTEXTMENU" === this.element.tagName) {
                this.element.style.display = "none", this.element.classList.remove("e-" + this.getModuleName()), 
                this.element.classList.remove("e-control");
                var ejInst = getValue("ej2_instances", this.element), ul = this.createElement("ul");
                this.ngElement = this.element, this.element = ul, this.element.classList.add("e-control"), 
                this.element.classList.add("e-" + this.getModuleName()), setValue("ej2_instances", ejInst, this.element), 
                this.element.id || (this.element.id = getUniqueID(this.getModuleName()));
            }
            if ("EJS-MENU" === this.element.tagName) {
                var ele = this.element, ejInstance = getValue("ej2_instances", ele), wrapper = (ul = this.createElement("ul"), 
                this.createElement("EJS-MENU", {
                    className: "e-" + this.getModuleName() + "-wrapper"
                }));
                wrapper.style.display = "block";
                for (var idx = 0, len = ele.attributes.length; idx < len; idx++) ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
                ele.parentNode.insertBefore(wrapper, ele), detach(ele), ele = ul, wrapper.appendChild(ele), 
                setValue("ej2_instances", ejInstance, ele), this.ngElement = wrapper, this.element = ele, 
                this.element.id || (this.element.id = getUniqueID(this.getModuleName()));
            }
        }, MenuBase.prototype.render = function() {
            this.initialize(), this.renderItems(), this.wireEvents();
        }, MenuBase.prototype.initialize = function() {
            var wrapper = this.getWrapper();
            wrapper || (wrapper = this.createElement("div", {
                className: "e-" + this.getModuleName() + "-wrapper"
            }), this.isMenu ? this.element.parentElement.insertBefore(wrapper, this.element) : document.body.appendChild(wrapper)), 
            this.cssClass && addClass([ wrapper ], this.cssClass.split(" ")), this.enableRtl && wrapper.classList.add("e-rtl"), 
            attributes(this.element, {
                role: this.isMenu ? "menubar" : "menu",
                tabindex: "0"
            }), wrapper.appendChild(this.element), this.element.style.zIndex = getZindexPartial(this.element).toString();
        }, MenuBase.prototype.renderItems = function() {
            if (!this.items.length) {
                var items = ListBase.createJsonFromElement(this.element, {
                    fields: {
                        child: "items"
                    }
                });
                this.setProperties({
                    items: items
                }, !0), this.element.innerHTML = "";
            }
            var ul = this.createItems(this.items);
            append(Array.prototype.slice.call(ul.children), this.element), this.element.classList.add("e-menu-parent");
        }, MenuBase.prototype.wireEvents = function() {
            var wrapper = this.getWrapper();
            if (this.target) {
                for (var target = void 0, targetElems = selectAll(this.target), i = 0, len = targetElems.length; i < len; i++) target = targetElems[i], 
                Browser.isIos ? new Touch(target, {
                    tapHold: this.touchHandler.bind(this)
                }) : EventHandler.add(target, "contextmenu", this.cmenuHandler, this);
                this.targetElement = target;
                for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
                    var parent_1 = _a[_i];
                    EventHandler.add(parent_1, "scroll", this.scrollHandler, this);
                }
            }
            Browser.isDevice || (this.delegateMoverHandler = this.moverHandler.bind(this), this.delegateMouseDownHandler = this.mouseDownHandler.bind(this), 
            EventHandler.add(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler, this), 
            EventHandler.add(document, "mousedown", this.delegateMouseDownHandler, this)), this.delegateClickHandler = this.clickHandler.bind(this), 
            EventHandler.add(document, "click", this.delegateClickHandler, this);
            var keyConfigs = {
                downarrow: "downarrow",
                uparrow: "uparrow",
                enter: "enter",
                leftarrow: "leftarrow",
                rightarrow: "rightarrow",
                escape: "escape"
            };
            this.isMenu && (keyConfigs.home = "home", keyConfigs.end = "end"), new KeyboardEvents(wrapper, {
                keyAction: this.keyBoardHandler.bind(this),
                keyConfigs: keyConfigs
            }), this.rippleFn = rippleEffect(wrapper, {
                selector: ".e-menu-item"
            });
        }, MenuBase.prototype.mouseDownHandler = function(e) {
            closest(e.target, ".e-" + this.getModuleName() + "-wrapper") !== this.getWrapper() && this.closeMenu(this.navIdx.length, e);
        }, MenuBase.prototype.keyBoardHandler = function(e) {
            var actionName = "", actionNeeded = this.isMenu && !this.element.classList.contains("e-vertical") && this.navIdx.length < 1;
            if (e.preventDefault(), actionNeeded) switch (e.action) {
              case "rightarrow":
                actionName = "rightarrow", e.action = "downarrow";
                break;

              case "leftarrow":
                actionName = "leftarrow", e.action = "uparrow";
                break;

              case "downarrow":
                actionName = "downarrow", e.action = "rightarrow";
                break;

              case "uparrow":
                actionName = "uparrow", e.action = "";
            } else if (this.enableRtl) switch (e.action) {
              case "leftarrow":
                actionNeeded = !0, actionName = "leftarrow", e.action = "rightarrow";
                break;

              case "rightarrow":
                actionNeeded = !0, actionName = "rightarrow", e.action = "leftarrow";
            }
            switch (e.action) {
              case "downarrow":
              case "uparrow":
              case "end":
              case "home":
                this.upDownKeyHandler(e);
                break;

              case "rightarrow":
                this.rightEnterKeyHandler(e);
                break;

              case "leftarrow":
                this.leftEscKeyHandler(e);
                break;

              case "enter":
                this.rightEnterKeyHandler(e);
                break;

              case "escape":
                this.leftEscKeyHandler(e);
            }
            actionNeeded && (e.action = actionName);
        }, MenuBase.prototype.upDownKeyHandler = function(e) {
            var cul = this.getWrapper().children[this.navIdx.length], defaultIdx = "downarrow" === e.action || "home" === e.action ? 0 : cul.childElementCount - 1, fliIdx = defaultIdx, fli = this.getLIByClass(cul, FOCUSED$1);
            fli && ("end" !== e.action && "home" !== e.action && (fliIdx = this.getIdx(cul, fli)), 
            fli.classList.remove(FOCUSED$1), "end" !== e.action && "home" !== e.action && ("downarrow" === e.action ? fliIdx++ : fliIdx--, 
            fliIdx === ("downarrow" === e.action ? cul.childElementCount : -1) && (fliIdx = defaultIdx)));
            var cli = cul.children[fliIdx];
            fliIdx = this.isValidLI(cli, fliIdx, e.action), cul.children[fliIdx].classList.add(FOCUSED$1), 
            cul.children[fliIdx].focus();
        }, MenuBase.prototype.isValidLI = function(cli, index, action) {
            var cul = this.getWrapper().children[this.navIdx.length];
            return (cli.classList.contains("e-separator") || cli.classList.contains("e-disabled") || cli.classList.contains(HIDE$1)) && ("downarrow" === action || "rightarrow" === action ? index++ : index--), 
            ((cli = cul.children[index]).classList.contains("e-separator") || cli.classList.contains("e-disabled") || cli.classList.contains(HIDE$1)) && (index = this.isValidLI(cli, index, action)), 
            index;
        }, MenuBase.prototype.rightEnterKeyHandler = function(e) {
            var eventArgs, wrapper = this.getWrapper(), cul = wrapper.children[this.navIdx.length], fli = this.getLIByClass(cul, FOCUSED$1);
            if (fli) {
                var fliIdx = this.getIdx(cul, fli), navIdx = this.navIdx.concat(fliIdx), index = void 0, item = this.getItem(navIdx);
                item.items.length ? (this.navIdx.push(fliIdx), this.openMenu(fli, item, null, null, e), 
                fli.classList.remove(FOCUSED$1), fli.classList.add(SELECTED$5), "enter" === e.action && (eventArgs = {
                    element: fli,
                    item: item
                }, this.trigger("select", eventArgs)), fli.focus(), cul = wrapper.children[this.navIdx.length], 
                index = this.isValidLI(cul.children[0], 0, e.action), cul.children[index].classList.add(FOCUSED$1), 
                cul.children[index].focus()) : "enter" === e.action && (fli.classList.remove(FOCUSED$1), 
                fli.classList.add(SELECTED$5), eventArgs = {
                    element: fli,
                    item: item
                }, this.trigger("select", eventArgs), this.closeMenu(null, e));
            }
        }, MenuBase.prototype.leftEscKeyHandler = function(e) {
            if (this.navIdx.length) {
                var wrapper = this.getWrapper();
                this.closeMenu(this.navIdx.length, e);
                var cul = wrapper.children[this.navIdx.length], sli = this.getLIByClass(cul, SELECTED$5);
                sli && (sli.setAttribute("aria-expanded", "false"), sli.classList.remove(SELECTED$5), 
                sli.classList.add(FOCUSED$1), sli.focus());
            } else "escape" === e.action && this.closeMenu(null, e);
        }, MenuBase.prototype.scrollHandler = function(e) {
            this.closeMenu(null, e);
        }, MenuBase.prototype.touchHandler = function(e) {
            this.isTapHold = !0, this.cmenuHandler(e.originalEvent);
        }, MenuBase.prototype.cmenuHandler = function(e) {
            e.preventDefault(), this.closeMenu(null, e), this.canOpen(e.target) && (e.changedTouches ? this.openMenu(null, null, e.changedTouches[0].pageY + 1, e.changedTouches[0].pageX + 1, e) : this.openMenu(null, null, e.pageY + 1, e.pageX + 1, e));
        }, MenuBase.prototype.closeMenu = function(ulIndex, e) {
            if (void 0 === ulIndex && (ulIndex = 0), void 0 === e && (e = null), this.isMenuVisible()) for (var ul = void 0, sli = void 0, item = void 0, items = void 0, closeArgs = void 0, beforeCloseArgs = void 0, wrapper = this.getWrapper(), cnt = wrapper.childElementCount; cnt > ulIndex; cnt--) {
                if (ul = wrapper.children[cnt - 1], this.isMenu && ul.classList.contains("e-menu")) {
                    (sli = this.getLIByClass(ul, SELECTED$5)) && sli.classList.remove(SELECTED$5);
                    break;
                }
                beforeCloseArgs = {
                    element: ul,
                    parentItem: item = this.navIdx.length ? this.getItem(this.navIdx) : null,
                    items: items = item ? item.items : this.items,
                    event: e,
                    cancel: !1
                }, this.trigger("beforeClose", beforeCloseArgs), beforeCloseArgs.cancel || (this.toggleAnimation(ul, !1), 
                this.navIdx.length = ulIndex ? ulIndex - 1 : ulIndex, closeArgs = {
                    element: ul,
                    parentItem: item,
                    items: items
                }, this.trigger("onClose", closeArgs));
            }
        }, MenuBase.prototype.isMenuVisible = function() {
            return this.navIdx.length > 0 || this.element.classList.contains("e-contextmenu") && isVisible(this.element).valueOf();
        }, MenuBase.prototype.canOpen = function(target) {
            var canOpen = !0;
            if (this.filter) {
                canOpen = !1;
                for (var filter = this.filter.split(" "), i = 0, len = target.classList.length; i < len; i++) if (filter.indexOf(target.classList[i]) > -1) {
                    canOpen = !0;
                    break;
                }
            }
            return canOpen;
        }, MenuBase.prototype.openMenu = function(li, item, top, left, e, target) {
            void 0 === top && (top = 0), void 0 === left && (left = 0), void 0 === e && (e = null), 
            void 0 === target && (target = this.targetElement);
            var ul, wrapper = this.getWrapper();
            if (li) {
                if (ul = this.createItems(item[this.getField("children", this.navIdx.length - 1)]), 
                !this.isMenu && Browser.isDevice) {
                    wrapper.lastChild.style.display = "none";
                    var data = {
                        text: item[this.getField("text")].toString(),
                        iconCss: "e-icons e-previous"
                    }, hdata = new MenuItem$1(this.items[0], null, data, !0), hli = this.createItems([ hdata ]).children[0];
                    hli.classList.add(HEADER$4), ul.insertBefore(hli, ul.children[0]);
                }
                ul.style.zIndex = this.element.style.zIndex, wrapper.appendChild(ul);
            } else (ul = this.element).style.zIndex = getZindexPartial(target || this.element).toString();
            this.getIndex(li ? li.id : null, !0);
            var eventArgs = {
                element: ul,
                items: li ? item[this.getField("children", this.navIdx.length - 1)] : this.items,
                parentItem: item,
                event: e,
                cancel: !1,
                top: top,
                left: left
            };
            this.trigger("beforeOpen", eventArgs), top = eventArgs.top, left = eventArgs.left, 
            eventArgs.cancel ? this.navIdx.pop() : (this.setPosition(li, ul, top, left), this.toggleAnimation(ul));
        }, MenuBase.prototype.setPosition = function(li, ul, top, left) {
            if (this.toggleVisiblity(ul), ul === this.element || !isNullOrUndefined(left) && !isNullOrUndefined(top)) {
                if ((collide = isCollide(ul, null, left, top)).indexOf("right") > -1 && (left -= ul.offsetWidth), 
                collide.indexOf("bottom") > -1) {
                    top = (offset = fit(ul, null, {
                        X: !1,
                        Y: !0
                    }, {
                        top: top,
                        left: left
                    })).top - 20;
                }
                if ((collide = isCollide(ul, null, left, top)).indexOf("left") > -1) {
                    left = (offset = fit(ul, null, {
                        X: !0,
                        Y: !1
                    }, {
                        top: top,
                        left: left
                    })).left;
                }
            } else {
                var offset = void 0, isRelative = this.isMenu && "BODY" !== this.element.offsetParent.tagName;
                if (!this.isMenu && Browser.isDevice) top = Number(this.element.style.top.replace("px", "")), 
                left = Number(this.element.style.left.replace("px", "")); else {
                    var x = "right", y = "top";
                    this.isMenu && !this.element.classList.contains("e-vertical") && this.navIdx.length < 2 ? (x = this.enableRtl ? "right" : "left", 
                    y = "bottom") : x = this.enableRtl ? "left" : "right", top = (offset = calculatePosition(li, x, y)).top, 
                    left = offset.left;
                }
                var collide, xCollision = (collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top)).indexOf("left") > -1 || collide.indexOf("right") > -1, yCollision = collide.indexOf("bottom") > -1;
                if (xCollision && (left = (offset = calculatePosition(li, this.enableRtl ? "right" : "left", "top")).left), 
                (this.enableRtl || xCollision) && (left = this.enableRtl && xCollision ? left : left - ul.offsetWidth, 
                this.isMenu && xCollision && !this.element.classList.contains("e-vertical") && this.navIdx && this.navIdx.length < 2 && (left = this.enableRtl ? left - li.getBoundingClientRect().width : left + li.getBoundingClientRect().width)), 
                yCollision && (top = (offset = fit(ul, null, {
                    X: !1,
                    Y: !0
                }, {
                    top: top,
                    left: left
                })).top), collide = isCollide(ul, null, left, top), (xCollision = collide.indexOf("left") > -1 || collide.indexOf("right") > -1) && (top = (offset = fit(ul, null, {
                    X: !0,
                    Y: !1
                }, {
                    top: top,
                    left: left
                })).top, left = offset.left), isRelative) {
                    var boundRect = ul.offsetParent.getBoundingClientRect();
                    top -= boundRect.top + pageYOffset, left -= boundRect.left + pageXOffset;
                }
            }
            this.toggleVisiblity(ul, !1), this.isMenu && (this.element.classList.contains("e-vertical") && this.navIdx && 0 === this.navIdx[this.navIdx.length - 1] ? top -= 1 : this.navIdx && 0 === this.navIdx[this.navIdx.length - 1] && (1 === this.navIdx.length ? left -= 1 : top -= 1)), 
            ul.style.top = top + "px", ul.style.left = left + "px";
        }, MenuBase.prototype.toggleVisiblity = function(ul, isVisible) {
            void 0 === isVisible && (isVisible = !0), ul.style.visibility = isVisible ? "hidden" : "", 
            ul.style.display = isVisible ? "block" : "none";
        }, MenuBase.prototype.createItems = function(items) {
            var _this = this, level = this.navIdx ? this.navIdx.length : 0, showIcon = this.hasField(items, this.getField("iconCss", level)), listBaseOptions = {
                showIcon: showIcon,
                moduleName: "menu",
                fields: this.getFields(level),
                template: this.template,
                itemCreating: function(args) {
                    args.curData[args.fields.id] || (args.curData[args.fields.id] = getUniqueID("menuitem"), 
                    _this.clearChanges()), args.curData.htmlAttributes = {
                        role: "menuitem",
                        tabindex: "-1"
                    }, _this.isMenu && !args.curData[_this.getField("separator", level)] && (args.curData.htmlAttributes["aria-label"] = args.curData[args.fields.text]);
                },
                itemCreated: function(args) {
                    if (args.curData[_this.getField("separator", level)] && (args.item.classList.add("e-separator"), 
                    args.item.removeAttribute("role")), !showIcon || args.curData[args.fields.iconCss] || args.curData[_this.getField("separator", level)] || args.item.classList.add("e-blankicon"), 
                    args.curData[args.fields.child] && args.curData[args.fields.child].length) {
                        var span = _this.createElement("span", {
                            className: "e-icons e-caret"
                        });
                        args.item.appendChild(span), args.item.setAttribute("aria-haspopup", "true"), args.item.setAttribute("aria-expanded", "false"), 
                        _this.isMenu || args.item.removeAttribute("role"), args.item.classList.add("e-menu-caret-icon");
                    }
                    _this.isMenu && _this.template && (args.item.setAttribute("id", args.curData[args.fields.id].toString()), 
                    args.item.removeAttribute("data-uid"));
                    var eventArgs = {
                        item: args.curData,
                        element: args.item
                    };
                    _this.trigger("beforeItemRender", eventArgs);
                }
            }, ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template);
            return ul.setAttribute("tabindex", "0"), this.isMenu && ul.setAttribute("role", "menu"), 
            ul;
        }, MenuBase.prototype.moverHandler = function(e) {
            var wrapper = this.getWrapper(), trgt = e.target, cli = this.getLI(trgt);
            if (cli && closest(cli, ".e-" + this.getModuleName() + "-wrapper")) {
                var fli = select(".e-focused", wrapper);
                fli && fli.classList.remove(FOCUSED$1), cli.classList.add(FOCUSED$1), this.showItemOnClick || this.clickHandler(e);
            }
            this.isMenu && trgt.parentElement !== wrapper && !cli && this.navIdx.length && this.closeMenu(null, e);
        }, MenuBase.prototype.getField = function(propName, level) {
            void 0 === level && (level = 0);
            var fieldName = this.fields[propName];
            return "string" == typeof fieldName ? fieldName : fieldName[level] ? fieldName[level].toString() : fieldName[fieldName.length - 1].toString();
        }, MenuBase.prototype.getFields = function(level) {
            return void 0 === level && (level = 0), {
                id: this.getField("itemId", level),
                iconCss: this.getField("iconCss", level),
                text: this.getField("text", level),
                url: this.getField("url", level),
                child: this.getField("children", level),
                separator: this.getField("separator", level)
            };
        }, MenuBase.prototype.hasField = function(items, field) {
            for (var i = 0, len = items.length; i < len; i++) if (items[i][field]) return !0;
            return !1;
        }, MenuBase.prototype.clickHandler = function(e) {
            if (this.isTapHold) this.isTapHold = !1; else {
                var wrapper = this.getWrapper(), trgt = e.target, cli = this.getLI(trgt), cliWrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : null, isInstLI = cli && cliWrapper && wrapper.firstElementChild.id === cliWrapper.firstElementChild.id;
                if (isInstLI && "click" === e.type && !cli.classList.contains(HEADER$4)) {
                    this.setLISelected(cli);
                    var navIdx = this.getIndex(cli.id, !0), eventArgs = {
                        element: cli,
                        item: item = this.getItem(navIdx)
                    };
                    this.trigger("select", eventArgs);
                }
                if (isInstLI && ("mouseover" === e.type || Browser.isDevice || this.showItemOnClick)) {
                    var ul = void 0;
                    if (cli.classList.contains(HEADER$4)) {
                        ul = wrapper.children[this.navIdx.length - 1], this.toggleAnimation(ul);
                        (sli = this.getLIByClass(ul, SELECTED$5)) && sli.classList.remove(SELECTED$5), detach(cli.parentNode), 
                        this.navIdx.pop();
                    } else if (!cli.classList.contains("e-separator")) {
                        var showSubMenu = !0, cul = cli.parentNode, cliIdx = this.getIdx(cul, cli);
                        if (this.isMenu || !Browser.isDevice) {
                            var culIdx = this.getIdx(wrapper, cul);
                            if (this.navIdx[culIdx] === cliIdx && (showSubMenu = !1), culIdx !== this.navIdx.length && ("mouseover" !== e.type || showSubMenu)) {
                                var sli;
                                (sli = this.getLIByClass(cul, SELECTED$5)) && sli.classList.remove(SELECTED$5), 
                                this.closeMenu(culIdx + 1, e);
                            }
                        }
                        if (showSubMenu) {
                            var item, idx = this.navIdx.concat(cliIdx);
                            if ((item = this.getItem(idx))[this.getField("children", idx.length - 1)] && item[this.getField("children", idx.length - 1)].length) {
                                if (("mouseover" === e.type || Browser.isDevice && this.isMenu) && this.setLISelected(cli), 
                                cli.setAttribute("aria-expanded", "true"), this.navIdx.push(cliIdx), this.isMenu && !this.element.classList.contains("e-vertical") && this.navIdx.length < 2) {
                                    var collision = isCollide(cli, this.element);
                                    if (collision.length) {
                                        var boundRect = cli.getBoundingClientRect();
                                        this.element.scroll(collision.indexOf("right") > -1 ? boundRect.right : boundRect.left, 0);
                                    }
                                }
                                this.openMenu(cli, item, null, null, e);
                            } else "mouseover" !== e.type && this.closeMenu(null, e);
                        }
                    }
                } else "UL" === trgt.tagName && trgt.parentElement === wrapper || cli && cli.querySelector(".e-caret") || this.closeMenu(null, e);
            }
        }, MenuBase.prototype.setLISelected = function(li) {
            var sli = this.getLIByClass(li.parentElement, SELECTED$5);
            sli && sli.classList.remove(SELECTED$5), li.classList.remove(FOCUSED$1), li.classList.add(SELECTED$5);
        }, MenuBase.prototype.getLIByClass = function(ul, classname) {
            for (var i = 0, len = ul.children.length; i < len; i++) if (ul.children[i].classList.contains(classname)) return ul.children[i];
            return null;
        }, MenuBase.prototype.getItem = function(navIdx) {
            var idx = (navIdx = navIdx.slice()).pop();
            return this.getItems(navIdx)[idx];
        }, MenuBase.prototype.getItems = function(navIdx) {
            for (var items = this.items, i = 0; i < navIdx.length; i++) items = items[navIdx[i]][this.getField("children", i)];
            return items;
        }, MenuBase.prototype.getIdx = function(ul, li, skipHdr) {
            void 0 === skipHdr && (skipHdr = !0);
            var idx = Array.prototype.indexOf.call(ul.children, li);
            return skipHdr && ul.children[0].classList.contains(HEADER$4) && idx--, idx;
        }, MenuBase.prototype.getLI = function(elem) {
            return "LI" === elem.tagName && elem.classList.contains("e-menu-item") ? elem : closest(elem, "li.e-menu-item");
        }, MenuBase.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var wrapper = this.getWrapper(), _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "cssClass":
                    oldProp.cssClass && removeClass([ wrapper ], oldProp.cssClass.split(" ")), newProp.cssClass && addClass([ wrapper ], newProp.cssClass.split(" "));
                    break;

                  case "enableRtl":
                    wrapper.classList.toggle("e-rtl");
                    break;

                  case "showItemOnClick":
                    this.unWireEvents(), this.showItemOnClick = newProp.showItemOnClick, this.wireEvents();
                    break;

                  case "items":
                    for (var idx = void 0, navIdx = void 0, item = void 0, keys = Object.keys(newProp.items), i = 0; i < keys.length; i++) (navIdx = this.getChangedItemIndex(newProp, [], Number(keys[i]))).length <= this.getWrapper().children.length && (idx = navIdx.pop(), 
                    item = this.getItems(navIdx), this.insertAfter([ item[idx] ], item[idx].text), this.removeItem(item, navIdx, idx)), 
                    navIdx.length = 0;
                }
            }
        }, MenuBase.prototype.getChangedItemIndex = function(newProp, index, idx) {
            index.push(idx);
            var key = Object.keys(newProp.items[idx]).pop();
            if ("items" === key) {
                var item = newProp.items[idx];
                this.getChangedItemIndex(item, index, Number(Object.keys(item.items).pop()));
            } else "isParentArray" === key && index.length > 1 && index.pop();
            return index;
        }, MenuBase.prototype.removeItem = function(item, navIdx, idx) {
            item.splice(idx, 1);
            var uls = this.getWrapper().children;
            navIdx.length < uls.length && detach(uls[navIdx.length].children[idx]);
        }, MenuBase.prototype.unWireEvents = function() {
            var wrapper = this.getWrapper();
            if (this.target) {
                for (var target = void 0, touchModule = void 0, targetElems = selectAll(this.target), i = 0, len = targetElems.length; i < len; i++) target = targetElems[i], 
                Browser.isIos ? (touchModule = getInstance(target, Touch)) && touchModule.destroy() : EventHandler.remove(target, "contextmenu", this.cmenuHandler);
                for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
                    var parent_2 = _a[_i];
                    EventHandler.remove(parent_2, "scroll", this.scrollHandler);
                }
            }
            Browser.isDevice || (EventHandler.remove(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler), 
            EventHandler.remove(document, "mousedown", this.delegateMouseDownHandler)), EventHandler.remove(document, "click", this.delegateClickHandler);
            var keyboardModule = getInstance(wrapper, KeyboardEvents);
            keyboardModule && keyboardModule.destroy(), this.rippleFn();
        }, MenuBase.prototype.toggleAnimation = function(ul, isMenuOpen) {
            var _this = this;
            void 0 === isMenuOpen && (isMenuOpen = !0), "None" !== this.animationSettings.effect && isMenuOpen ? this.animation.animate(ul, {
                name: this.animationSettings.effect,
                duration: this.animationSettings.duration,
                timingFunction: this.animationSettings.easing,
                begin: function(options) {
                    options.element.style.display = "block", options.element.style.maxHeight = options.element.getBoundingClientRect().height + "px";
                },
                end: function(options) {
                    _this.end(options.element, isMenuOpen);
                }
            }) : this.end(ul, isMenuOpen);
        }, MenuBase.prototype.end = function(ul, isMenuOpen) {
            if (isMenuOpen) {
                ul.style.display = "block", ul.style.maxHeight = "";
                var item = this.navIdx.length ? this.getItem(this.navIdx) : null, eventArgs = {
                    element: ul,
                    parentItem: item,
                    items: item ? item.items : this.items
                };
                if (this.trigger("onOpen", eventArgs), ul.querySelector(".e-focused")) ul.querySelector(".e-focused").focus(); else {
                    var ele = void 0;
                    (ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1]) ? ele.querySelector(".e-selected").focus() : this.element.focus();
                }
            } else if (ul === this.element) {
                var fli = this.getLIByClass(this.element, FOCUSED$1);
                fli && fli.classList.remove(FOCUSED$1);
                var sli = this.getLIByClass(this.element, SELECTED$5);
                sli && sli.classList.remove(SELECTED$5), ul.style.display = "none";
            } else detach(ul);
        }, MenuBase.prototype.getPersistData = function() {
            return "";
        }, MenuBase.prototype.getWrapper = function() {
            return closest(this.element, ".e-" + this.getModuleName() + "-wrapper");
        }, MenuBase.prototype.getIndex = function(data, isUniqueId, items, nIndex, isCallBack, level) {
            void 0 === items && (items = this.items), void 0 === nIndex && (nIndex = []), void 0 === isCallBack && (isCallBack = !1), 
            void 0 === level && (level = 0);
            var item;
            level = isCallBack ? level + 1 : 0;
            for (var i = 0, len = items.length; i < len; i++) {
                if (item = items[i], (isUniqueId ? item[this.getField("itemId", level)] : item[this.getField("text", level)]) === data) {
                    nIndex.push(i);
                    break;
                }
                if (item[this.getField("children", level)] && item[this.getField("children", level)].length) {
                    if (-1 !== (nIndex = this.getIndex(data, isUniqueId, item[this.getField("children", level)], nIndex, !0, level))[nIndex.length - 1]) {
                        nIndex.unshift(i);
                        break;
                    }
                    i !== len - 1 && nIndex.pop();
                } else i === len - 1 && nIndex.push(-1);
            }
            return isCallBack || -1 !== nIndex[0] ? nIndex : [];
        }, MenuBase.prototype.enableItems = function(items, enable, isUniqueId) {
            void 0 === enable && (enable = !0);
            for (var ul, idx, navIdx, disabled = "e-disabled", wrapper = this.getWrapper(), i = 0; i < items.length; i++) idx = (navIdx = this.getIndex(items[i], isUniqueId)).pop(), 
            (ul = wrapper.children[navIdx.length]) && (enable ? this.isMenu ? (ul.children[idx].classList.remove(disabled), 
            ul.children[idx].removeAttribute("aria-disabled")) : Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[idx + 1].classList.remove(disabled) : ul.children[idx].classList.remove(disabled) : this.isMenu ? (ul.children[idx].classList.add(disabled), 
            ul.children[idx].setAttribute("aria-disabled", "true")) : Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[idx + 1].classList.add(disabled) : ul.children[idx].classList.add(disabled));
        }, MenuBase.prototype.showItems = function(items, isUniqueId) {
            this.showHideItems(items, !1, isUniqueId);
        }, MenuBase.prototype.hideItems = function(items, isUniqueId) {
            this.showHideItems(items, !0, isUniqueId);
        }, MenuBase.prototype.showHideItems = function(items, ishide, isUniqueId) {
            for (var ul, index, navIdx, wrapper = this.getWrapper(), i = 0; i < items.length; i++) index = (navIdx = this.getIndex(items[i], isUniqueId)).pop(), 
            (ul = wrapper.children[navIdx.length]) && (ishide ? Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[index + 1].classList.add(HIDE$1) : ul.children[index].classList.add(HIDE$1) : Browser.isDevice && !ul.classList.contains("e-contextmenu") ? ul.children[index + 1].classList.remove(HIDE$1) : ul.children[index].classList.remove(HIDE$1));
        }, MenuBase.prototype.removeItems = function(items, isUniqueId) {
            for (var idx, navIdx, iitems, i = 0; i < items.length; i++) idx = (navIdx = this.getIndex(items[i], isUniqueId)).pop(), 
            iitems = this.getItems(navIdx), this.removeItem(iitems, navIdx, idx);
        }, MenuBase.prototype.insertAfter = function(items, text, isUniqueId) {
            this.insertItems(items, text, isUniqueId);
        }, MenuBase.prototype.insertBefore = function(items, text, isUniqueId) {
            this.insertItems(items, text, isUniqueId, !1);
        }, MenuBase.prototype.insertItems = function(items, text, isUniqueId, isAfter) {
            void 0 === isAfter && (isAfter = !0);
            for (var li, idx, navIdx, iitems, menuitem, i = 0; i < items.length; i++) {
                idx = (navIdx = this.getIndex(text, isUniqueId)).pop(), iitems = this.getItems(navIdx), 
                menuitem = new MenuItem$1(iitems[0], "items", items[i], !0), iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
                var uls = this.getWrapper().children;
                navIdx.length < uls.length && (idx = isAfter ? idx + 1 : idx, this.hasField(iitems, this.getField("iconCss", navIdx.length - 1)), 
                li = this.createItems(iitems).children[idx], uls[navIdx.length].insertBefore(li, uls[navIdx.length].children[idx]));
            }
        }, MenuBase.prototype.destroy = function() {
            var _this = this, wrapper = this.getWrapper();
            wrapper && (_super.prototype.destroy.call(this), this.unWireEvents(), this.ngElement && !this.isMenu ? this.ngElement.style.display = "block" : (this.closeMenu(), 
            this.element.innerHTML = "", [ "top", "left", "display", "z-index" ].forEach(function(key) {
                _this.element.style.removeProperty(key);
            }), [ "role", "tabindex", "class", "style" ].forEach(function(key) {
                "class" === key && _this.element.classList.contains("e-menu-parent") && _this.element.classList.remove("e-menu-parent"), 
                -1 !== [ "class", "style" ].indexOf(key) && _this.element.getAttribute(key) || _this.element.removeAttribute(key), 
                _this.isMenu && "class" === key && _this.element.classList.contains("e-vertical") && _this.element.classList.remove("e-vertical");
            }), wrapper.parentNode.insertBefore(this.element, wrapper)), this.isMenu && this.ngElement ? (detach(this.element), 
            wrapper.style.display = "", wrapper.classList.remove("e-" + this.getModuleName() + "-wrapper"), 
            wrapper.removeAttribute("data-ripple")) : detach(wrapper));
        }, __decorate$49([ Event() ], MenuBase.prototype, "beforeItemRender", void 0), __decorate$49([ Event() ], MenuBase.prototype, "beforeOpen", void 0), 
        __decorate$49([ Event() ], MenuBase.prototype, "onOpen", void 0), __decorate$49([ Event() ], MenuBase.prototype, "beforeClose", void 0), 
        __decorate$49([ Event() ], MenuBase.prototype, "onClose", void 0), __decorate$49([ Event() ], MenuBase.prototype, "select", void 0), 
        __decorate$49([ Event() ], MenuBase.prototype, "created", void 0), __decorate$49([ Property("") ], MenuBase.prototype, "cssClass", void 0), 
        __decorate$49([ Property(!1) ], MenuBase.prototype, "showItemOnClick", void 0), 
        __decorate$49([ Property("") ], MenuBase.prototype, "target", void 0), __decorate$49([ Property("") ], MenuBase.prototype, "filter", void 0), 
        __decorate$49([ Property(null) ], MenuBase.prototype, "template", void 0), __decorate$49([ Complex({}, FieldSettings$3) ], MenuBase.prototype, "fields", void 0), 
        __decorate$49([ Collection([], MenuItem$1) ], MenuBase.prototype, "items", void 0), 
        __decorate$49([ Property({
            duration: 400,
            easing: "ease",
            effect: "SlideDown"
        }) ], MenuBase.prototype, "animationSettings", void 0), MenuBase = __decorate$49([ NotifyPropertyChanges ], MenuBase);
    }(Component), __extends$103 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$48 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, ContextMenu$2 = function(_super) {
        function ContextMenu(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$103(ContextMenu, _super), ContextMenu.prototype.preRender = function() {
            this.isMenu = !1, _super.prototype.preRender.call(this);
        }, ContextMenu.prototype.open = function(top, left, target) {
            _super.prototype.openMenu.call(this, null, null, top, left, null, target);
        }, ContextMenu.prototype.close = function() {
            _super.prototype.closeMenu.call(this);
        }, ContextMenu.prototype.onPropertyChanged = function(newProp, oldProp) {
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "filter":
                    this.close(), this.filter = newProp.filter;
                    break;

                  case "target":
                    this.unWireEvents(), this.target = newProp.target, this.wireEvents();
                }
            }
        }, ContextMenu.prototype.getModuleName = function() {
            return "contextmenu";
        }, __decorate$48([ Property("") ], ContextMenu.prototype, "target", void 0), __decorate$48([ Property("") ], ContextMenu.prototype, "filter", void 0), 
        __decorate$48([ Collection([], MenuItem$1) ], ContextMenu.prototype, "items", void 0), 
        ContextMenu = __decorate$48([ NotifyPropertyChanges ], ContextMenu);
    }(MenuBase$1), _contextmenu = Object.freeze({
        ContextMenu: ContextMenu$2
    }), __extends$106 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$51 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, HScroll$1 = function(_super) {
        function HScroll(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$106(HScroll, _super), HScroll.prototype.preRender = function() {
            this.browser = Browser.info.name, this.browserCheck = "mozilla" === this.browser, 
            this.isDevice = Browser.isDevice, this.customStep = !0;
            var element = this.element;
            this.ieCheck = "edge" === this.browser || "msie" === this.browser, this.initialize(), 
            "" === element.id && (element.id = getUniqueID("hscroll"), this.uniqueId = !0), 
            element.style.display = "block", this.enableRtl && element.classList.add("e-rtl");
        }, HScroll.prototype.render = function() {
            this.touchModule = new Touch(this.element, {
                scroll: this.touchHandler.bind(this),
                swipe: this.swipeHandler.bind(this)
            }), EventHandler.add(this.scrollEle, "scroll", this.scrollHandler, this), this.isDevice ? (this.element.classList.add("e-scroll-device"), 
            this.createOverlay(this.element)) : this.createNavIcon(this.element), (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) && (this.scrollStep = this.scrollEle.offsetWidth, 
            this.customStep = !1);
        }, HScroll.prototype.initialize = function() {
            var scrollEle = this.createElement("div", {
                className: "e-hscroll-content"
            }), scrollDiv = this.createElement("div", {
                className: "e-hscroll-bar"
            });
            scrollDiv.setAttribute("tabindex", "-1");
            for (var ele = this.element, _i = 0, innerEle_1 = [].slice.call(ele.children); _i < innerEle_1.length; _i++) {
                var ele_1 = innerEle_1[_i];
                scrollEle.appendChild(ele_1);
            }
            scrollDiv.appendChild(scrollEle), ele.appendChild(scrollDiv), scrollDiv.style.overflowX = "hidden", 
            this.scrollEle = scrollDiv, this.scrollItems = scrollEle;
        }, HScroll.prototype.getPersistData = function() {
            return this.addOnPersist([ "scrollStep" ]);
        }, HScroll.prototype.getModuleName = function() {
            return "hScroll";
        }, HScroll.prototype.destroy = function() {
            var ele = this.element;
            ele.style.display = "", ele.classList.remove("e-hscroll"), ele.classList.remove("e-scroll-device");
            var nav = selectAll(".e-" + ele.id + "_nav.e-scroll-nav", ele);
            selectAll(".e-scroll-overlay", ele).forEach(function(ele) {
                detach(ele);
            });
            for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
                var elem = _a[_i];
                ele.appendChild(elem);
            }
            this.uniqueId && this.element.removeAttribute("id"), detach(this.scrollEle), nav.length > 0 && (detach(nav[0]), 
            isNullOrUndefined(nav[1]) || detach(nav[1])), EventHandler.remove(this.scrollEle, "scroll", this.scrollHandler), 
            this.touchModule.destroy(), this.touchModule = null, _super.prototype.destroy.call(this);
        }, HScroll.prototype.disable = function(value) {
            var navEles = selectAll(".e-scroll-nav:not(.e-overlay)", this.element);
            value ? this.element.classList.add("e-overlay") : this.element.classList.remove("e-overlay"), 
            navEles.forEach(function(el) {
                el.setAttribute("tabindex", value ? "-1" : "0");
            });
        }, HScroll.prototype.createOverlay = function(element) {
            var id = element.id.concat("_nav"), rightOverlayEle = this.createElement("div", {
                className: "e-scroll-overlay e-scroll-right-overlay"
            }), clsRight = "e-" + element.id.concat("_nav e-scroll-nav e-scroll-right-nav"), rightEle = this.createElement("div", {
                id: id.concat("_right"),
                className: clsRight
            }), navItem = this.createElement("div", {
                className: "e-nav-right-arrow e-nav-arrow e-icons"
            });
            rightEle.appendChild(navItem);
            var leftEle = this.createElement("div", {
                className: "e-scroll-overlay e-scroll-left-overlay"
            });
            this.ieCheck && rightEle.classList.add("e-ie-align"), element.appendChild(rightOverlayEle), 
            element.appendChild(rightEle), element.insertBefore(leftEle, element.firstChild), 
            this.eventBinding([ rightEle ]);
        }, HScroll.prototype.createNavIcon = function(element) {
            var id = element.id.concat("_nav"), clsRight = "e-" + element.id.concat("_nav e-scroll-nav e-scroll-right-nav"), nav = this.createElement("div", {
                id: id.concat("_right"),
                className: clsRight
            });
            nav.setAttribute("aria-disabled", "false");
            var navItem = this.createElement("div", {
                className: "e-nav-right-arrow e-nav-arrow e-icons"
            }), clsLeft = "e-" + element.id.concat("_nav e-scroll-nav e-scroll-left-nav"), navEle = this.createElement("div", {
                id: id.concat("_left"),
                className: clsLeft + " e-overlay"
            });
            navEle.setAttribute("aria-disabled", "true");
            var navLeftItem = this.createElement("div", {
                className: "e-nav-left-arrow e-nav-arrow e-icons"
            });
            navEle.appendChild(navLeftItem), nav.appendChild(navItem), nav.setAttribute("tabindex", "0"), 
            element.appendChild(nav), element.insertBefore(navEle, element.firstChild), this.ieCheck && (nav.classList.add("e-ie-align"), 
            navEle.classList.add("e-ie-align")), this.eventBinding([ nav, navEle ]);
        }, HScroll.prototype.onKeyPress = function(e) {
            var _this = this;
            if ("Enter" === e.key) {
                this.keyTimer = window.setTimeout(function() {
                    _this.keyTimeout = !0, _this.eleScrolling(10, e.target, !0);
                }, 100);
            }
        }, HScroll.prototype.onKeyUp = function(e) {
            "Enter" === e.key && (this.keyTimeout ? this.keyTimeout = !1 : e.target.click(), 
            clearTimeout(this.keyTimer));
        }, HScroll.prototype.eventBinding = function(ele) {
            var _this = this;
            ele.forEach(function(el) {
                new Touch(el, {
                    tapHold: _this.tabHoldHandler.bind(_this),
                    tapHoldThreshold: 500
                }), el.addEventListener("keydown", _this.onKeyPress.bind(_this)), el.addEventListener("keyup", _this.onKeyUp.bind(_this)), 
                el.addEventListener("mouseup", _this.repeatScroll.bind(_this)), el.addEventListener("touchend", _this.repeatScroll.bind(_this)), 
                el.addEventListener("contextmenu", function(e) {
                    e.preventDefault();
                }), EventHandler.add(el, "click", _this.clickEventHandler, _this);
            });
        }, HScroll.prototype.repeatScroll = function() {
            clearInterval(this.timeout);
        }, HScroll.prototype.tabHoldHandler = function(e) {
            var _this = this, trgt = e.originalEvent.target;
            trgt = this.contains(trgt, "e-scroll-nav") ? trgt.firstElementChild : trgt;
            this.timeout = window.setInterval(function() {
                _this.eleScrolling(10, trgt, !0);
            }, 50);
        }, HScroll.prototype.contains = function(ele, className) {
            return ele.classList.contains(className);
        }, HScroll.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
            var element = this.scrollEle, rootEle = this.element, classList = trgt.classList;
            classList.contains("e-scroll-nav") && (classList = trgt.querySelector(".e-nav-arrow").classList), 
            this.contains(rootEle, "e-rtl") && this.browserCheck && (scrollDis = -scrollDis);
            element.scrollLeft;
            !this.contains(rootEle, "e-rtl") || this.browserCheck || this.ieCheck ? classList.contains("e-nav-right-arrow") ? this.frameScrollRequest(scrollDis, "add", isContinuous) : this.frameScrollRequest(scrollDis, "", isContinuous) : classList.contains("e-nav-left-arrow") ? this.frameScrollRequest(scrollDis, "add", isContinuous) : this.frameScrollRequest(scrollDis, "", isContinuous);
        }, HScroll.prototype.clickEventHandler = function(e) {
            this.eleScrolling(this.scrollStep, e.target, !1);
        }, HScroll.prototype.swipeHandler = function(e) {
            var distance, swipeEle = this.scrollEle;
            distance = e.velocity <= 1 ? e.distanceX / (10 * e.velocity) : e.distanceX / e.velocity;
            var start = .5, animate = function() {
                var step = Math.sin(start);
                step <= 0 ? window.cancelAnimationFrame(step) : ("Left" === e.swipeDirection ? swipeEle.scrollLeft += distance * step : "Right" === e.swipeDirection && (swipeEle.scrollLeft -= distance * step), 
                start -= .02, window.requestAnimationFrame(animate));
            };
            animate();
        }, HScroll.prototype.scrollUpdating = function(scrollVal, action) {
            "add" === action ? this.scrollEle.scrollLeft += scrollVal : this.scrollEle.scrollLeft -= scrollVal;
        }, HScroll.prototype.frameScrollRequest = function(scrollVal, action, isContinuous) {
            var _this = this;
            if (isContinuous) this.scrollUpdating(scrollVal, action); else {
                this.customStep || selectAll(".e-scroll-overlay", this.element).forEach(function(el) {
                    scrollVal -= el.offsetWidth;
                });
                var animate = function() {
                    scrollVal < 10 ? window.cancelAnimationFrame(10) : (_this.scrollUpdating(10, action), 
                    scrollVal -= 10, window.requestAnimationFrame(animate));
                };
                animate();
            }
        }, HScroll.prototype.touchHandler = function(e) {
            var distance, ele = this.scrollEle;
            distance = e.distanceX, this.ieCheck && this.contains(this.element, "e-rtl") && (distance = -distance), 
            "Left" === e.scrollDirection ? ele.scrollLeft = ele.scrollLeft + distance : "Right" === e.scrollDirection && (ele.scrollLeft = ele.scrollLeft - distance);
        }, HScroll.prototype.arrowDisabling = function(addDisable, removeDisable) {
            if (this.isDevice) {
                var arrowIcon = (isNullOrUndefined(addDisable) ? removeDisable : addDisable).querySelector(".e-nav-arrow");
                isNullOrUndefined(addDisable) ? classList(arrowIcon, [ "e-nav-right-arrow" ], [ "e-nav-left-arrow" ]) : classList(arrowIcon, [ "e-nav-left-arrow" ], [ "e-nav-right-arrow" ]);
            } else addDisable.classList.add("e-overlay"), addDisable.setAttribute("aria-disabled", "true"), 
            addDisable.removeAttribute("tabindex"), removeDisable.classList.remove("e-overlay"), 
            removeDisable.setAttribute("aria-disabled", "false"), removeDisable.setAttribute("tabindex", "0");
            this.repeatScroll();
        }, HScroll.prototype.scrollHandler = function(e) {
            var target = e.target, width = target.offsetWidth, rootEle = this.element, navLeftEle = this.element.querySelector(".e-scroll-left-nav"), navRightEle = this.element.querySelector(".e-scroll-right-nav"), leftOverlay = this.element.querySelector(".e-scroll-left-overlay"), rightOverlay = this.element.querySelector(".e-scroll-right-overlay"), scrollLeft = target.scrollLeft;
            if (scrollLeft <= 0 && (scrollLeft = -scrollLeft), this.isDevice && (!this.enableRtl || this.browserCheck || this.ieCheck || (leftOverlay = this.element.querySelector(".e-scroll-right-overlay"), 
            rightOverlay = this.element.querySelector(".e-scroll-left-overlay")), leftOverlay.style.width = scrollLeft < 40 ? scrollLeft + "px" : "40px", 
            target.scrollWidth - Math.ceil(width + scrollLeft) < 40 ? rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + "px" : rightOverlay.style.width = "40px"), 
            0 === scrollLeft) !this.contains(rootEle, "e-rtl") || this.browserCheck || this.ieCheck ? this.arrowDisabling(navLeftEle, navRightEle) : this.arrowDisabling(navRightEle, navLeftEle); else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) !this.contains(rootEle, "e-rtl") || this.browserCheck || this.ieCheck ? this.arrowDisabling(navRightEle, navLeftEle) : this.arrowDisabling(navLeftEle, navRightEle); else {
                var disEle = this.element.querySelector(".e-scroll-nav.e-overlay");
                disEle && (disEle.classList.remove("e-overlay"), disEle.setAttribute("aria-disabled", "false"), 
                disEle.setAttribute("tabindex", "0"));
            }
        }, HScroll.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "scrollStep":
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? this.element.classList.add("e-rtl") : this.element.classList.remove("e-rtl");
                }
            }
        }, __decorate$51([ Property(null) ], HScroll.prototype, "scrollStep", void 0), HScroll = __decorate$51([ NotifyPropertyChanges ], HScroll);
    }(Component), __extends$105 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$50 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, CLS_ITEMS$2 = "e-toolbar-items", CLS_ITEM$3 = "e-toolbar-item", CLS_POPUP$1 = "e-toolbar-popup", Item$2 = function(_super) {
        function Item() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$105(Item, _super), __decorate$50([ Property("") ], Item.prototype, "id", void 0), 
        __decorate$50([ Property("") ], Item.prototype, "text", void 0), __decorate$50([ Property("auto") ], Item.prototype, "width", void 0), 
        __decorate$50([ Property("") ], Item.prototype, "cssClass", void 0), __decorate$50([ Property(!1) ], Item.prototype, "showAlwaysInPopup", void 0), 
        __decorate$50([ Property("") ], Item.prototype, "prefixIcon", void 0), __decorate$50([ Property("") ], Item.prototype, "suffixIcon", void 0), 
        __decorate$50([ Property("None") ], Item.prototype, "overflow", void 0), __decorate$50([ Property("") ], Item.prototype, "template", void 0), 
        __decorate$50([ Property("Button") ], Item.prototype, "type", void 0), __decorate$50([ Property("Both") ], Item.prototype, "showTextOn", void 0), 
        __decorate$50([ Property(null) ], Item.prototype, "htmlAttributes", void 0), __decorate$50([ Property("") ], Item.prototype, "tooltipText", void 0), 
        __decorate$50([ Property("Left") ], Item.prototype, "align", void 0), Item;
    }(ChildProperty), Toolbar$2 = function(_super) {
        function Toolbar(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.keyConfigs = {
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                moveUp: "uparrow",
                moveDown: "downarrow",
                popupOpen: "enter",
                popupClose: "escape",
                tab: "tab",
                home: "home",
                end: "end"
            }, _this;
        }
        return __extends$105(Toolbar, _super), Toolbar.prototype.destroy = function() {
            var _this = this, ele = this.element;
            for (_super.prototype.destroy.call(this), this.unwireEvents(), this.tempId.forEach(function(ele) {
                isNullOrUndefined(_this.element.querySelector(ele)) || (document.body.appendChild(_this.element.querySelector(ele)).style.display = "none");
            }); ele.firstChild; ) ele.removeChild(ele.firstChild);
            this.trgtEle && ele.appendChild(this.ctrlTem), this.clearProperty(), this.popObj = null, 
            this.tbarAlign = null, this.remove(this.element, "e-toolpop"), ele.removeAttribute("style"), 
            [ "aria-disabled", "aria-orientation", "aria-haspopup", "role" ].forEach(function(attrb) {
                _this.element.removeAttribute(attrb);
            });
        }, Toolbar.prototype.preRender = function() {
            var eventArgs = {
                enableCollision: !0,
                scrollStep: this.scrollStep
            };
            this.trigger("beforeCreate", eventArgs), this.enableCollision = eventArgs.enableCollision, 
            this.scrollStep = eventArgs.scrollStep, this.scrollModule = null, this.popObj = null, 
            this.tempId = [], this.tbarItemsCol = this.items, this.popupPriCount = 0, this.enableRtl && this.add(this.element, "e-rtl");
        }, Toolbar.prototype.wireEvents = function() {
            EventHandler.add(this.element, "click", this.clickHandler, this), window.addEventListener("resize", this.resize.bind(this)), 
            this.keyModule = new KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs
            }), EventHandler.add(this.element, "keydown", this.docKeyDown, this), this.element.setAttribute("tabIndex", "0");
        }, Toolbar.prototype.docKeyDown = function(e) {
            if ("INPUT" !== e.target.tagName) {
                var popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && "Extended" !== this.overflowMode;
                9 === e.keyCode && !0 === e.target.classList.contains("e-hor-nav") && popCheck && this.popObj.hide({
                    name: "FadeOut",
                    duration: 100
                });
                (40 === e.keyCode || 38 === e.keyCode || 35 === e.keyCode || 36 === e.keyCode) && e.preventDefault();
            }
        }, Toolbar.prototype.unwireEvents = function() {
            EventHandler.remove(this.element, "click", this.clickHandler), this.destroyHScroll(), 
            this.keyModule.destroy(), EventHandler.remove(document, "scroll", this.docEvent), 
            EventHandler.remove(this.element, "keydown", this.docKeyDown), EventHandler.remove(document, "click", this.docEvent);
        }, Toolbar.prototype.clearProperty = function() {
            this.tbarEle = [], this.tbarAlgEle = {
                lefts: [],
                centers: [],
                rights: []
            };
        }, Toolbar.prototype.docEvent = function(e) {
            var popEle = closest(e.target, ".e-popup");
            this.popObj && isVisible(this.popObj.element) && !popEle && "Popup" === this.overflowMode && this.popObj.hide({
                name: "FadeOut",
                duration: 100
            });
        }, Toolbar.prototype.destroyHScroll = function() {
            this.scrollModule && (this.tbarAlign && this.add(this.scrollModule.element, "e-tbar-pos"), 
            this.scrollModule.destroy(), this.scrollModule = null);
        }, Toolbar.prototype.destroyItems = function() {
            [].slice.call(this.element.querySelectorAll("." + CLS_ITEM$3)).forEach(function(el) {
                detach(el);
            });
            var tbarItems = this.element.querySelector("." + CLS_ITEMS$2);
            this.tbarAlign && ([].slice.call(tbarItems.children).forEach(function(el) {
                detach(el);
            }), this.tbarAlign = !1, this.remove(tbarItems, "e-tbar-pos")), this.clearProperty();
        }, Toolbar.prototype.destroyMode = function() {
            this.scrollModule && (this.remove(this.scrollModule.element, "e-rtl"), this.destroyHScroll()), 
            this.remove(this.element, "e-tbar-extended"), this.popObj && this.popupRefresh(this.popObj.element, !0);
        }, Toolbar.prototype.add = function(ele, val) {
            ele.classList.add(val);
        }, Toolbar.prototype.remove = function(ele, val) {
            ele.classList.remove(val);
        }, Toolbar.prototype.elementFocus = function(ele) {
            var fChild = ele.firstElementChild;
            fChild ? (fChild.focus(), this.activeEleSwitch(ele)) : ele.focus();
        }, Toolbar.prototype.clstElement = function(tbrNavChk, trgt) {
            return tbrNavChk && this.popObj && isVisible(this.popObj.element) ? this.popObj.element.querySelector("." + CLS_ITEM$3) : this.element === trgt || tbrNavChk ? this.element.querySelector(".e-toolbar-item:not(.e-overlay ):not(.e-separator )") : closest(trgt, "." + CLS_ITEM$3);
        }, Toolbar.prototype.keyHandling = function(clst, e, trgt, navChk, scrollChk) {
            var popObj = this.popObj, rootEle = this.element, popAnimate = {
                name: "FadeOut",
                duration: 100
            };
            switch (e.action) {
              case "moveRight":
                rootEle === trgt ? this.elementFocus(clst) : navChk || this.eleFocus(clst, "next");
                break;

              case "moveLeft":
                navChk || this.eleFocus(clst, "previous");
                break;

              case "home":
              case "end":
                var ele = void 0, nodes = void 0;
                if (clst) {
                    var popupCheck = closest(clst, ".e-popup");
                    popupCheck ? isVisible(this.popObj.element) && (nodes = [].slice.call(popupCheck.children), 
                    ele = "home" === e.action ? nodes[0] : nodes[nodes.length - 1]) : (nodes = this.element.querySelectorAll(".e-toolbar-items ." + CLS_ITEM$3), 
                    ele = "home" === e.action ? nodes[0] : nodes[nodes.length - 1]), ele && this.elementFocus(ele);
                }
                break;

              case "moveUp":
              case "moveDown":
                var value = "moveUp" === e.action ? "previous" : "next";
                if (popObj && closest(trgt, ".e-popup")) {
                    var popEle = popObj.element, popFrstEle = popEle.firstElementChild;
                    if ("previous" === value && popFrstEle === clst || "next" === value && popEle.lastElementChild === clst) return;
                    this.eleFocus(clst, value);
                } else "moveDown" === e.action && popObj && isVisible(popObj.element) && this.elementFocus(clst);
                break;

              case "tab":
                if (!scrollChk && !navChk) {
                    var ele_1 = clst.firstElementChild;
                    rootEle === trgt && (this.activeEle ? this.activeEle.focus() : (this.activeEleRemove(ele_1), 
                    ele_1.focus()), this.element.removeAttribute("tabindex"));
                }
                break;

              case "popupClose":
                popObj && "Extended" !== this.overflowMode && popObj.hide(popAnimate);
                break;

              case "popupOpen":
                if (!navChk) return;
                popObj && !isVisible(popObj.element) ? (popObj.element.style.top = rootEle.offsetHeight + "px", 
                popObj.show({
                    name: "FadeIn",
                    duration: 100
                })) : popObj.hide(popAnimate);
            }
        }, Toolbar.prototype.keyActionHandler = function(e) {
            var trgt = e.target;
            if ("INPUT" !== trgt.tagName && "TEXTAREA" !== trgt.tagName && !this.element.classList.contains("e-overlay")) {
                e.preventDefault();
                var clst, tbrNavChk = trgt.classList.contains("e-hor-nav"), tbarScrollChk = trgt.classList.contains("e-scroll-nav");
                ((clst = this.clstElement(tbrNavChk, trgt)) || tbarScrollChk) && this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
            }
        }, Toolbar.prototype.disable = function(value) {
            var rootEle = this.element;
            value ? rootEle.classList.add("e-overlay") : rootEle.classList.remove("e-overlay"), 
            rootEle.setAttribute("tabindex", value ? "-1" : "0"), this.activeEle && this.activeEle.setAttribute("tabindex", value ? "-1" : "0"), 
            this.scrollModule && this.scrollModule.disable(value), this.popObj && (isVisible(this.popObj.element) && "Extended" !== this.overflowMode && this.popObj.hide(), 
            rootEle.querySelector("#" + rootEle.id + "_nav").setAttribute("tabindex", value ? "-1" : "0"));
        }, Toolbar.prototype.eleFocus = function(closest, pos) {
            var sib = Object(closest)[pos + "ElementSibling"], contains = function(el) {
                return el.classList.contains("e-separator") || el.classList.contains("e-overlay");
            };
            if (sib) {
                var skipEle = contains(sib);
                if (skipEle) {
                    if (!Object(sib)[pos + "ElementSibling"]) return;
                    if (sib = Object(sib)[pos + "ElementSibling"], skipEle = contains(sib)) return void this.eleFocus(sib, pos);
                }
                this.elementFocus(sib);
            } else if (this.tbarAlign) {
                var elem = Object(closest.parentElement)[pos + "ElementSibling"];
                if (isNullOrUndefined(elem) || 0 !== elem.children.length || (elem = Object(elem)[pos + "ElementSibling"]), 
                !isNullOrUndefined(elem) && elem.children.length > 0) if ("next" === pos) {
                    contains(el = elem.querySelector("." + CLS_ITEM$3)) ? this.eleFocus(el, pos) : (el.firstElementChild.focus(), 
                    this.activeEleSwitch(el));
                } else {
                    var el;
                    contains(el = elem.lastElementChild) ? this.eleFocus(el, pos) : this.elementFocus(el);
                }
            }
        }, Toolbar.prototype.clickHandler = function(e) {
            var trgt = e.target, clsList = trgt.classList, ele = this.element, isPopupElement = !isNullOrUndefined(closest(trgt, ".e-toolbar-pop")), popupNav = closest(trgt, ".e-hor-nav");
            popupNav || (popupNav = trgt), !ele.children[0].classList.contains("e-hscroll") && clsList.contains("e-hor-nav") && (clsList = trgt.querySelector(".e-icons").classList), 
            (clsList.contains("e-popup-up-icon") || clsList.contains("e-popup-down-icon")) && this.popupClickHandler(ele, popupNav, "e-rtl");
            var itemObj, clst = closest(e.target, "." + CLS_ITEM$3);
            if (!isNullOrUndefined(clst) && !clst.classList.contains("e-overlay") || popupNav.classList.contains("e-hor-nav")) {
                clst && (itemObj = this.items[this.tbarEle.indexOf(clst)]);
                var eventArgs = {
                    originalEvent: e,
                    item: itemObj
                };
                this.trigger("clicked", eventArgs), isNullOrUndefined(this.popObj) || !isPopupElement || eventArgs.cancel || "Popup" !== this.overflowMode || this.popObj.hide({
                    name: "FadeOut",
                    duration: 100
                });
            }
        }, Toolbar.prototype.popupClickHandler = function(ele, popupNav, CLS_RTL) {
            var popObj = this.popObj;
            isVisible(popObj.element) ? (popupNav.classList.remove("e-nav-active"), popObj.hide({
                name: "FadeOut",
                duration: 100
            })) : (ele.classList.contains(CLS_RTL) && (popObj.enableRtl = !0, popObj.position = {
                X: "left",
                Y: "top"
            }), 0 !== popObj.offsetX || ele.classList.contains(CLS_RTL) || (popObj.enableRtl = !1, 
            popObj.position = {
                X: "right",
                Y: "top"
            }), popObj.dataBind(), popObj.refreshPosition(), popObj.element.style.top = this.getElementOffsetY() + "px", 
            "Extended" === this.overflowMode && (popObj.element.style.minHeight = "0px"), popupNav.classList.add("e-nav-active"), 
            popObj.show({
                name: "FadeIn",
                duration: 100
            }));
        }, Toolbar.prototype.render = function() {
            this.initialize(), this.renderControl(), this.separator(), this.wireEvents();
        }, Toolbar.prototype.initialize = function() {
            var width = formatUnit(this.width), height = formatUnit(this.height);
            "msie" === Browser.info.name && "auto" === this.height && "MultiRow" !== this.overflowMode || setStyleAttribute(this.element, {
                height: height
            }), setStyleAttribute(this.element, {
                width: width
            });
            attributes(this.element, {
                role: "toolbar",
                "aria-disabled": "false",
                "aria-haspopup": "false",
                "aria-orientation": "horizontal"
            });
        }, Toolbar.prototype.renderControl = function() {
            this.trgtEle = this.element.children.length > 0 ? this.element.querySelector("div") : null, 
            this.tbarAlgEle = {
                lefts: [],
                centers: [],
                rights: []
            }, this.renderItems(), this.renderOverflowMode(), this.tbarAlign && this.itemPositioning(), 
            this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element) && this.popupRefresh(this.popObj.element, !1);
        }, Toolbar.prototype.initHScroll = function(element, innerItems) {
            !this.scrollModule && this.checkOverflow(element, innerItems[0]) && (this.tbarAlign && this.element.querySelector(".e-toolbar-items .e-toolbar-center").removeAttribute("style"), 
            this.scrollModule = new HScroll$1({
                scrollStep: this.scrollStep,
                enableRtl: this.enableRtl
            }), this.scrollModule.createElement = this.createElement, this.scrollModule.appendTo(innerItems[0]), 
            this.remove(this.scrollModule.element, "e-tbar-pos"), setStyleAttribute(this.element, {
                overflow: "hidden"
            }));
        }, Toolbar.prototype.itemWidthCal = function(items) {
            var style, width = 0;
            return [].slice.call(selectAll("." + CLS_ITEM$3, items)).forEach(function(el) {
                isVisible(el) && (style = window.getComputedStyle(el), width += el.offsetWidth + parseFloat(style.marginRight) + parseFloat(style.marginLeft));
            }), width;
        }, Toolbar.prototype.checkOverflow = function(element, innerItem) {
            if (isNullOrUndefined(element) || isNullOrUndefined(innerItem) || !isVisible(element)) return !1;
            var eleWidth = element.offsetWidth, itemWidth = innerItem.offsetWidth;
            (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) && (itemWidth = this.itemWidthCal(this.scrollModule ? innerItem.querySelector(".e-hscroll-content") : innerItem));
            var popNav = element.querySelector(".e-hor-nav"), scrollNav = element.querySelector(".e-scroll-nav");
            return itemWidth > eleWidth - (popNav ? popNav.offsetWidth : scrollNav ? 2 * scrollNav.offsetWidth : 0);
        }, Toolbar.prototype.refreshOverflow = function() {
            this.resize();
        }, Toolbar.prototype.renderOverflowMode = function() {
            var ele = this.element, innerItems = ele.querySelector("." + CLS_ITEMS$2), priorityCheck = this.popupPriCount > 0;
            if (ele && ele.children.length > 0) switch (this.offsetWid = ele.offsetWidth, this.remove(this.element, "e-toolpop"), 
            "msie" === Browser.info.name && "auto" === this.height && (ele.style.height = ""), 
            this.overflowMode) {
              case "Scrollable":
                isNullOrUndefined(this.scrollModule) && this.initHScroll(ele, ele.getElementsByClassName(CLS_ITEMS$2));
                break;

              case "Popup":
                this.add(this.element, "e-toolpop"), this.tbarAlign && this.removePositioning(), 
                (this.checkOverflow(ele, innerItems) || priorityCheck) && (this.createPopupEle(ele, [].slice.call(selectAll(".e-toolbar-items ." + CLS_ITEM$3, ele))), 
                this.element.querySelector(".e-hor-nav").setAttribute("tabIndex", "0")), this.tbarAlign && (this.add(innerItems, "e-tbar-pos"), 
                this.itemPositioning());
                break;

              case "MultiRow":
                this.add(innerItems, "e-toolbar-multirow"), "hidden" === ele.style.overflow && (ele.style.overflow = ""), 
                "msie" !== Browser.info.name && "auto" === ele.style.height || (ele.style.height = "auto");
                break;

              case "Extended":
                this.add(this.element, "e-extended-toolbar"), (this.checkOverflow(ele, innerItems) || priorityCheck) && (this.createPopupEle(ele, [].slice.call(selectAll(".e-toolbar-items ." + CLS_ITEM$3, ele))), 
                this.element.querySelector(".e-hor-nav").setAttribute("tabIndex", "0"));
            }
        }, Toolbar.prototype.separator = function() {
            var eleInlineItem, element = this.element, eleItem = [].slice.call(element.querySelectorAll(".e-separator")), multiVar = element.querySelector(".e-multirow-separator"), extendVar = element.querySelector(".e-extended-separator");
            null !== (eleInlineItem = "MultiRow" === this.overflowMode ? multiVar : extendVar) && ("MultiRow" === this.overflowMode ? eleInlineItem.classList.remove("e-multirow-separator") : "Extended" === this.overflowMode && eleInlineItem.classList.remove("e-extended-separator"));
            for (var i = 0; i <= eleItem.length - 1; i++) eleItem[i].offsetLeft < 30 && 0 !== eleItem[i].offsetLeft && ("MultiRow" === this.overflowMode ? eleItem[i].classList.add("e-multirow-separator") : "Extended" === this.overflowMode && eleItem[i].classList.add("e-extended-separator"));
        }, Toolbar.prototype.createPopupEle = function(ele, innerEle) {
            var innerNav = ele.querySelector(".e-hor-nav");
            innerNav || this.createPopupIcon(ele), innerNav = ele.querySelector(".e-hor-nav");
            var eleWidth = ele.offsetWidth - innerNav.offsetWidth;
            this.element.classList.remove("e-rtl"), setStyleAttribute(this.element, {
                direction: "initial"
            }), this.checkPriority(ele, innerEle, eleWidth, !0), this.enableRtl && this.element.classList.add("e-rtl"), 
            this.element.style.removeProperty("direction"), this.createPopup();
        }, Toolbar.prototype.pushingPoppedEle = function(tbarObj, popupPri, ele, eleHeight, sepHeight) {
            var element = tbarObj.element, nodes = selectAll(".e-overflow-show", ele), nodeIndex = 0, nodePri = 0;
            [].slice.call(selectAll("." + CLS_POPUP$1, element.querySelector("." + CLS_ITEMS$2))).forEach(function(el, index) {
                nodes = selectAll(".e-overflow-show", ele), el.classList.contains("e-overflow-show") && nodes.length > 0 ? tbarObj.tbResize && nodes.length > index ? (ele.insertBefore(el, nodes[index]), 
                ++nodePri) : (ele.insertBefore(el, ele.children[nodes.length]), ++nodePri) : el.classList.contains("e-overflow-show") ? (ele.insertBefore(el, ele.firstChild), 
                ++nodePri) : tbarObj.tbResize && el.classList.contains("e-overflow-hide") && ele.children.length > 0 && 0 === nodes.length ? (ele.insertBefore(el, ele.firstChild), 
                ++nodePri) : el.classList.contains("e-overflow-hide") ? popupPri.push(el) : tbarObj.tbResize ? (ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]), 
                ++nodeIndex) : ele.appendChild(el), el.classList.contains("e-separator") ? setStyleAttribute(el, {
                    display: "",
                    height: sepHeight + "px"
                }) : setStyleAttribute(el, {
                    display: "",
                    height: eleHeight + "px"
                });
            }), popupPri.forEach(function(el) {
                ele.appendChild(el);
            });
            for (var tbarEle = selectAll("." + CLS_ITEM$3, element.querySelector("." + CLS_ITEMS$2)), i = tbarEle.length - 1; i >= 0; i--) {
                var tbarElement = tbarEle[i];
                if (!tbarElement.classList.contains("e-separator") || "Extended" === this.overflowMode) break;
                setStyleAttribute(tbarElement, {
                    display: "none"
                });
            }
        }, Toolbar.prototype.createPopup = function() {
            var eleHeight, eleItem, sepHeight, sepItem, element = this.element;
            "Extended" === this.overflowMode && (sepItem = element.querySelector(".e-separator:not(.e-toolbar-popup )"), 
            sepHeight = "auto" === element.style.height || "" === element.style.height ? null : sepItem.offsetHeight), 
            eleItem = element.querySelector(".e-toolbar-item:not(.e-separator ):not(.e-toolbar-popup )"), 
            eleHeight = "auto" === element.style.height || "" === element.style.height ? null : eleItem.offsetHeight;
            var ele;
            if (element.querySelector("#" + element.id + "_popup.e-toolbar-pop")) ele = element.querySelector("#" + element.id + "_popup.e-toolbar-pop"); else {
                var extendEle = this.createElement("div", {
                    id: element.id + "_popup",
                    className: "e-toolbar-pop e-toolbar-extended"
                }), popupEle = this.createElement("div", {
                    id: element.id + "_popup",
                    className: "e-toolbar-pop"
                });
                ele = "Extended" === this.overflowMode ? extendEle : popupEle;
            }
            this.pushingPoppedEle(this, [], ele, eleHeight, sepHeight), this.popupInit(element, ele);
        }, Toolbar.prototype.getElementOffsetY = function() {
            return "Extended" === this.overflowMode && "border-box" === window.getComputedStyle(this.element).getPropertyValue("box-sizing") ? this.element.clientHeight : this.element.offsetHeight;
        }, Toolbar.prototype.popupInit = function(element, ele) {
            if (this.popObj) {
                var popupEle = this.popObj.element;
                setStyleAttribute(popupEle, {
                    maxHeight: "",
                    display: "block"
                }), setStyleAttribute(popupEle, {
                    maxHeight: popupEle.offsetHeight + "px",
                    display: ""
                });
            } else {
                element.appendChild(ele), setStyleAttribute(this.element, {
                    overflow: ""
                });
                var eleStyles = window.getComputedStyle(this.element), popup = new Popup(null, {
                    relateTo: this.element,
                    offsetY: this.getElementOffsetY(),
                    enableRtl: this.enableRtl,
                    open: this.popupOpen.bind(this),
                    close: this.popupClose.bind(this),
                    collision: {
                        Y: this.enableCollision ? "flip" : "none"
                    },
                    position: this.enableRtl ? {
                        X: "left",
                        Y: "top"
                    } : {
                        X: "right",
                        Y: "top"
                    }
                });
                popup.appendTo(ele), "Extended" === this.overflowMode && (popup.width = parseFloat(eleStyles.width) + 2 * parseFloat(eleStyles.borderRightWidth), 
                popup.offsetX = 0), EventHandler.add(document, "scroll", this.docEvent.bind(this)), 
                EventHandler.add(document, "click ", this.docEvent.bind(this)), popup.element.style.maxHeight = popup.element.offsetHeight + "px", 
                popup.hide(), this.popObj = popup, this.element.setAttribute("aria-haspopup", "true");
            }
        }, Toolbar.prototype.tbarPopupHandler = function(isOpen) {
            "Extended" === this.overflowMode && (isOpen ? this.add(this.element, "e-tbar-extended") : this.remove(this.element, "e-tbar-extended"));
        }, Toolbar.prototype.popupOpen = function(e) {
            var popObj = this.popObj;
            popObj.offsetY = this.getElementOffsetY(), popObj.dataBind();
            var popupEle = this.popObj.element, toolEle = this.popObj.element.parentElement, popupNav = toolEle.querySelector(".e-hor-nav");
            setStyleAttribute(popObj.element, {
                height: "auto",
                maxHeight: ""
            }), popObj.element.style.maxHeight = popObj.element.offsetHeight + "px", "Extended" === this.overflowMode && (popObj.element.style.minHeight = "");
            var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top, popIcon = popupNav.firstElementChild;
            popupNav.classList.add("e-nav-active"), classList(popIcon, [ "e-popup-up-icon" ], [ "e-popup-down-icon" ]), 
            this.tbarPopupHandler(!0);
            var scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;
            if (window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
                var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
                popObj.height = overflowHeight + "px";
                for (var i = 0; i <= popupEle.childElementCount; i++) {
                    var ele = popupEle.children[i];
                    if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
                        overflowHeight = ele.offsetTop;
                        break;
                    }
                }
                setStyleAttribute(popObj.element, {
                    maxHeight: overflowHeight + "px"
                });
            }
        }, Toolbar.prototype.popupClose = function(e) {
            var popupNav = this.element.querySelector(".e-hor-nav"), popIcon = popupNav.firstElementChild;
            popupNav.classList.remove("e-nav-active"), classList(popIcon, [ "e-popup-down-icon" ], [ "e-popup-up-icon" ]), 
            this.tbarPopupHandler(!1);
        }, Toolbar.prototype.checkPriority = function(ele, inEle, eleWidth, pre) {
            for (var popPriority = this.popupPriCount > 0, eleWid = eleWidth, sepCheck = 0, itemCount = 0, itemPopCount = 0, checkClass = function(ele, val) {
                var rVal = !1;
                return val.forEach(function(cls) {
                    ele.classList.contains(cls) && (rVal = !0);
                }), rVal;
            }, i = inEle.length - 1; i >= 0; i--) {
                var mrgn = parseFloat(window.getComputedStyle(inEle[i]).marginRight);
                mrgn += parseFloat(window.getComputedStyle(inEle[i]).marginLeft);
                var fstEleCheck = inEle[i] === this.tbarEle[0];
                fstEleCheck && (this.tbarEleMrgn = mrgn);
                var eleWid_1 = fstEleCheck ? inEle[i].offsetWidth + mrgn : inEle[i].offsetWidth;
                if (checkClass(inEle[i], [ "e-popup-alone" ]) && popPriority && (inEle[i].classList.add(CLS_POPUP$1), 
                setStyleAttribute(inEle[i], {
                    display: "none",
                    minWidth: eleWid_1 + "px"
                }), itemPopCount++), inEle[i].offsetLeft + inEle[i].offsetWidth + mrgn > eleWidth) {
                    if (inEle[i].classList.contains("e-separator")) {
                        if ("Extended" === this.overflowMode) {
                            if (itemCount === itemPopCount) {
                                checkClass(sepEle = inEle[i], [ "e-separator", "e-ignore" ]) && (inEle[i].classList.add(CLS_POPUP$1), 
                                itemPopCount++);
                            }
                            itemCount++;
                        } else if ("Popup" === this.overflowMode) {
                            if (sepCheck > 0 && itemCount === itemPopCount) {
                                var sepEle;
                                checkClass(sepEle = inEle[i + itemCount + (sepCheck - 1)], [ "e-separator", "e-ignore" ]) && setStyleAttribute(sepEle, {
                                    display: "none"
                                });
                            }
                            sepCheck++, itemCount = 0, itemPopCount = 0;
                        }
                    } else itemCount++;
                    inEle[i].classList.contains("e-overflow-show") && pre ? eleWidth -= inEle[i].offsetWidth + mrgn : checkClass(inEle[i], [ "e-separator", "e-ignore" ]) ? eleWidth -= inEle[i].offsetWidth + mrgn : (inEle[i].classList.add(CLS_POPUP$1), 
                    setStyleAttribute(inEle[i], {
                        display: "none",
                        minWidth: eleWid_1 + "px"
                    }), itemPopCount++);
                }
            }
            if (pre) {
                var popedEle = selectAll(".e-toolbar-item:not(.e-toolbar-popup)", this.element);
                this.checkPriority(ele, popedEle, eleWid, !1);
            }
        }, Toolbar.prototype.createPopupIcon = function(element) {
            var id = element.id.concat("_nav"), className = "e-" + element.id.concat("_nav e-hor-nav");
            className = "Extended" === this.overflowMode ? className + " e-expended-nav" : className;
            var nav = this.createElement("div", {
                id: id,
                className: className
            });
            "msie" !== Browser.info.name && "edge" !== Browser.info.name || nav.classList.add("e-ie-align");
            var navItem = this.createElement("div", {
                className: "e-popup-down-icon e-icons"
            });
            nav.appendChild(navItem), nav.setAttribute("tabindex", "0"), element.appendChild(nav);
        }, Toolbar.prototype.tbarPriRef = function(inEle, indx, sepPri, el, des, elWid, wid, ig) {
            var ignoreCount = ig, priEleCnt = selectAll(".e-toolbar-popup:not(.e-overflow-show)", this.popObj.element).length, checkClass = function(ele, val) {
                return ele.classList.contains(val);
            };
            if (0 === selectAll(".e-toolbar-item:not(.e-separator):not(.e-overflow-show)", inEle).length) {
                var eleSep = inEle.children[indx - (indx - sepPri) - 1], ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, "e-ignore");
                if (!isNullOrUndefined(eleSep) && checkClass(eleSep, "e-separator") && !isVisible(eleSep) || ignoreCheck) {
                    eleSep.style.display = "inherit";
                    var eleSepWidth = eleSep.offsetWidth + 2 * parseFloat(window.getComputedStyle(eleSep).marginRight), prevSep = eleSep.previousElementSibling;
                    elWid + eleSepWidth < wid || des ? (inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]), 
                    isNullOrUndefined(prevSep) || (prevSep.style.display = "")) : prevSep.classList.contains("e-separator") && (prevSep.style.display = "none"), 
                    eleSep.style.display = "";
                } else inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
            } else inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
        }, Toolbar.prototype.popupRefresh = function(popupEle, destroy) {
            var _this = this, ele = this.element, popNav = ele.querySelector(".e-hor-nav"), innerEle = ele.querySelector("." + CLS_ITEMS$2);
            if (!isNullOrUndefined(popNav)) {
                innerEle.removeAttribute("style"), popupEle.style.display = "block";
                var width = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth), popupEleWidth = 0;
                [].slice.call(popupEle.children).forEach(function(el) {
                    popupEleWidth += _this.popupEleWidth(el), setStyleAttribute(el, {
                        position: ""
                    });
                }), width + popNav.offsetWidth > popupEleWidth && 0 === this.popupPriCount && (destroy = !0), 
                this.popupEleRefresh(width, popupEle, destroy), popupEle.style.display = "", 0 === popupEle.children.length && popNav && this.popObj && (detach(popNav), 
                popNav = null, this.popObj.destroy(), detach(this.popObj.element), this.popObj = null, 
                ele.setAttribute("aria-haspopup", "false"), ele.classList.remove("e-toolpop"));
            }
        }, Toolbar.prototype.ignoreEleFetch = function(index, innerEle) {
            var ignoreEle = [].slice.call(innerEle.querySelectorAll(".e-ignore")), ignoreInx = [], count = 0;
            return ignoreEle.length > 0 ? (ignoreEle.forEach(function(ele) {
                ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
            }), ignoreInx.forEach(function(val) {
                val <= index && count++;
            }), count) : 0;
        }, Toolbar.prototype.checkPopupRefresh = function(root, popEle) {
            popEle.style.display = "block";
            var elWid = this.popupEleWidth(popEle.firstElementChild);
            popEle.firstElementChild.style.removeProperty("Position");
            var tbarWidth = root.offsetWidth - root.querySelector(".e-hor-nav").offsetWidth, tbarItemsWid = root.querySelector("." + CLS_ITEMS$2).offsetWidth;
            return popEle.style.removeProperty("display"), tbarWidth > elWid + tbarItemsWid;
        }, Toolbar.prototype.popupEleWidth = function(el) {
            el.style.position = "absolute";
            var elWidth = el.offsetWidth, btnText = el.querySelector(".e-tbar-btn-text");
            if (el.classList.contains("e-tbtn-align") || el.classList.contains("e-popup-text")) {
                var btn = el.children[0];
                !isNullOrUndefined(btnText) && el.classList.contains("e-popup-text") ? btnText.style.display = "none" : !isNullOrUndefined(btnText) && el.classList.contains("e-toolbar-text") && (btnText.style.display = "block"), 
                btn.style.minWidth = "0%", elWidth = parseFloat(el.style.minWidth), btn.style.minWidth = "", 
                isNullOrUndefined(btnText) || (btnText.style.display = "");
            }
            return elWidth;
        }, Toolbar.prototype.popupEleRefresh = function(width, popupEle, destroy) {
            for (var priEleCnt, index, popPriority = this.popupPriCount > 0, eleSplice = this.tbarEle, innerEle = this.element.querySelector("." + CLS_ITEMS$2), ignoreCount = 0, _loop_1 = function(el) {
                if (el.classList.contains("e-popup-alone") && popPriority && !destroy) return "continue";
                var elWidth = this_1.popupEleWidth(el);
                if (el === this_1.tbarEle[0] && (elWidth += this_1.tbarEleMrgn), el.style.position = "", 
                !(elWidth < width || destroy)) return "break";
                if (el.style.minWidth = "", el.classList.contains("e-overflow-hide") || el.classList.remove(CLS_POPUP$1), 
                index = this_1.tbarEle.indexOf(el), this_1.tbarAlign) {
                    var pos = this_1.items[index].align;
                    index = this_1.tbarAlgEle[(pos + "s").toLowerCase()].indexOf(el), eleSplice = this_1.tbarAlgEle[(pos + "s").toLowerCase()], 
                    innerEle = this_1.element.querySelector(".e-toolbar-items .e-toolbar-" + pos.toLowerCase());
                }
                var sepBeforePri_1 = 0;
                "Extended" !== this_1.overflowMode && eleSplice.slice(0, index).forEach(function(el) {
                    (el.classList.contains("e-overflow-show") || el.classList.contains("e-separator")) && (el.classList.contains("e-separator") && (el.style.display = "", 
                    width -= el.offsetWidth), sepBeforePri_1++);
                }), ignoreCount = this_1.ignoreEleFetch(index, innerEle), el.classList.contains("e-overflow-show") ? (this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el, destroy, elWidth, width, ignoreCount), 
                width -= el.offsetWidth) : 0 === index ? (innerEle.insertBefore(el, innerEle.firstChild), 
                width -= el.offsetWidth) : (priEleCnt = selectAll(".e-overflow-show", this_1.popObj.element).length, 
                innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]), width -= el.offsetWidth), 
                el.style.height = "";
            }, this_1 = this, _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
                if ("break" === _loop_1(_a[_i])) break;
            }
            this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS$2)[0]) && !destroy && this.renderOverflowMode();
        }, Toolbar.prototype.removePositioning = function() {
            var item = this.element.querySelector("." + CLS_ITEMS$2);
            if (!isNullOrUndefined(item) && item.classList.contains("e-tbar-pos")) {
                this.remove(item, "e-tbar-pos");
                var innerItem = [].slice.call(item.childNodes);
                innerItem[1].removeAttribute("style"), innerItem[2].removeAttribute("style");
            }
        }, Toolbar.prototype.refreshPositioning = function() {
            var item = this.element.querySelector("." + CLS_ITEMS$2);
            this.add(item, "e-tbar-pos"), this.itemPositioning();
        }, Toolbar.prototype.itemPositioning = function() {
            var item = this.element.querySelector("." + CLS_ITEMS$2);
            if (!isNullOrUndefined(item) && item.classList.contains("e-tbar-pos")) {
                var innerItem, popupNav = this.element.querySelector(".e-hor-nav"), margin = (innerItem = this.scrollModule ? [].slice.call(item.querySelector(".e-hscroll-content").children) : [].slice.call(item.childNodes))[0].offsetWidth + innerItem[2].offsetWidth, tbarWid = this.element.offsetWidth;
                if (popupNav) {
                    tbarWid -= popupNav.offsetWidth;
                    var popWid = popupNav.offsetWidth + "px";
                    innerItem[2].removeAttribute("style"), this.enableRtl ? innerItem[2].style.left = popWid : innerItem[2].style.right = popWid;
                }
                if (!(tbarWid <= margin)) {
                    var value = (tbarWid - margin - innerItem[1].offsetWidth) / 2;
                    innerItem[1].removeAttribute("style");
                    var mrgn = innerItem[0].offsetWidth + value + "px";
                    this.enableRtl ? innerItem[1].style.marginRight = mrgn : innerItem[1].style.marginLeft = mrgn;
                }
            }
        }, Toolbar.prototype.tbarItemAlign = function(item, itemEle, pos) {
            var _this = this;
            if (!item.showAlwaysInPopup || "Show" === item.overflow) {
                var alignDiv = [];
                if (alignDiv.push(this.createElement("div", {
                    className: "e-toolbar-left"
                })), alignDiv.push(this.createElement("div", {
                    className: "e-toolbar-center"
                })), alignDiv.push(this.createElement("div", {
                    className: "e-toolbar-right"
                })), 0 === pos && "Left" !== item.align) alignDiv.forEach(function(ele) {
                    itemEle.appendChild(ele);
                }), this.tbarAlign = !0, this.add(itemEle, "e-tbar-pos"); else if ("Left" !== item.align) {
                    var alignEle = itemEle.childNodes, leftAlign_1 = alignDiv[0];
                    [].slice.call(alignEle).forEach(function(el) {
                        _this.tbarAlgEle.lefts.push(el), leftAlign_1.appendChild(el);
                    }), itemEle.appendChild(leftAlign_1), itemEle.appendChild(alignDiv[1]), itemEle.appendChild(alignDiv[2]), 
                    this.tbarAlign = !0, this.add(itemEle, "e-tbar-pos");
                }
            }
        }, Toolbar.prototype.ctrlTemplate = function() {
            var _this = this;
            this.ctrlTem = this.trgtEle.cloneNode(!0), this.add(this.trgtEle, CLS_ITEMS$2), 
            this.tbarEle = [];
            [].slice.call(this.trgtEle.children).forEach(function(ele) {
                "DIV" === ele.tagName && (_this.tbarEle.push(ele), ele.setAttribute("aria-disabled", "false"), 
                _this.add(ele, CLS_ITEM$3));
            });
        }, Toolbar.prototype.renderItems = function() {
            var itemEleDom, innerItem, innerPos, ele = this.element, items = this.items;
            if (ele && ele.children.length > 0 && (itemEleDom = ele.querySelector("." + CLS_ITEMS$2)), 
            null != this.trgtEle) this.ctrlTemplate(); else if (ele && items.length > 0) {
                itemEleDom || (itemEleDom = this.createElement("div", {
                    className: CLS_ITEMS$2
                }));
                for (var i = 0; i < items.length; i++) innerItem = this.renderSubComponent(items[i], i), 
                -1 === this.tbarEle.indexOf(innerItem) && this.tbarEle.push(innerItem), this.tbarAlign || this.tbarItemAlign(items[i], itemEleDom, i), 
                (innerPos = itemEleDom.querySelector(".e-toolbar-" + items[i].align.toLowerCase())) ? (items[i].showAlwaysInPopup && "Show" !== items[i].overflow || this.tbarAlgEle[(items[i].align + "s").toLowerCase()].push(innerItem), 
                innerPos.appendChild(innerItem)) : itemEleDom.appendChild(innerItem);
                ele.appendChild(itemEleDom);
            }
        }, Toolbar.prototype.setAttr = function(attr, element) {
            for (var keyVal, key = Object.keys(attr), i = 0; i < key.length; i++) "class" === (keyVal = key[i]) ? this.add(element, attr[keyVal]) : element.setAttribute(keyVal, attr[keyVal]);
        }, Toolbar.prototype.enableItems = function(items, isEnable) {
            var elements = items, len = elements.length;
            isNullOrUndefined(isEnable) && (isEnable = !0);
            var enable = function(isEnable, ele) {
                isEnable ? (ele.classList.remove("e-overlay"), ele.setAttribute("aria-disabled", "false")) : (ele.classList.add("e-overlay"), 
                ele.setAttribute("aria-disabled", "true"));
            };
            if (len && len > 1) {
                for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
                    enable(isEnable, _a[_i]);
                }
                isEnable ? removeClass(elements, "e-overlay") : addClass(elements, "e-overlay");
            } else {
                enable(isEnable, len && 1 === len ? elements[0] : items);
            }
        }, Toolbar.prototype.addItems = function(items, index) {
            var innerItems, itemsDiv = this.element.querySelector("." + CLS_ITEMS$2);
            if (isNullOrUndefined(itemsDiv)) this.itemsRerender(items); else {
                var innerEle, itemAgn = "Left";
                isNullOrUndefined(index) && (index = 0), items.forEach(function(e) {
                    isNullOrUndefined(e.align) || "Left" === e.align || "Left" !== itemAgn || (itemAgn = e.align);
                });
                for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                    var item = items_1[_i];
                    if (isNullOrUndefined(item.type) && (item.type = "Button"), innerItems = selectAll("." + CLS_ITEM$3, this.element), 
                    item.align = itemAgn, innerEle = this.renderSubComponent(item, index), this.tbarEle.length >= index && innerItems.length >= 0) {
                        isNullOrUndefined(this.scrollModule) && this.destroyMode();
                        var algIndex = "L" === item.align[0] ? 0 : "C" === item.align[0] ? 1 : 2, ele = void 0;
                        this.tbarAlign || "Left" === itemAgn ? this.tbarAlign ? ((ele = closest(innerItems[0], "." + CLS_ITEMS$2).children[algIndex]).insertBefore(innerEle, ele.children[index]), 
                        this.tbarAlgEle[(item.align + "s").toLowerCase()].splice(index, 0, innerEle), this.refreshPositioning()) : 0 === innerItems.length ? (innerItems = selectAll("." + CLS_ITEMS$2, this.element))[0].appendChild(innerEle) : innerItems[0].parentNode.insertBefore(innerEle, innerItems[index]) : (this.tbarItemAlign(item, itemsDiv, 1), 
                        this.tbarAlign = !0, (ele = closest(innerItems[0], "." + CLS_ITEMS$2).children[algIndex]).appendChild(innerEle), 
                        this.tbarAlgEle[(item.align + "s").toLowerCase()].push(innerEle), this.refreshPositioning()), 
                        this.items.splice(index, 0, item), this.tbarEle.splice(index, 0, innerEle), index++, 
                        this.offsetWid = itemsDiv.offsetWidth;
                    }
                }
                itemsDiv.style.width = "", this.renderOverflowMode();
            }
        }, Toolbar.prototype.removeItems = function(args) {
            var index, elements = args, innerItems = [].slice.call(selectAll("." + CLS_ITEM$3, this.element));
            if ("number" == typeof elements) index = parseInt(args.toString(), 10), this.removeItemByIndex(index, innerItems); else if (elements && elements.length > 1) for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
                var ele = _a[_i];
                index = this.tbarEle.indexOf(ele), this.removeItemByIndex(index, innerItems), innerItems = selectAll("." + CLS_ITEM$3, this.element);
            } else {
                ele = elements && elements.length && 1 === elements.length ? elements[0] : args;
                index = innerItems.indexOf(ele), this.removeItemByIndex(index, innerItems);
            }
            this.resize();
        }, Toolbar.prototype.removeItemByIndex = function(index, innerItems) {
            if (this.tbarEle[index] && innerItems[index]) {
                var eleIdx = this.tbarEle.indexOf(innerItems[index]);
                if (this.tbarAlign) {
                    var indexAgn = void 0;
                    indexAgn = this.tbarAlgEle[(this.items[eleIdx].align + "s").toLowerCase()].indexOf(this.tbarEle[eleIdx]), 
                    this.tbarAlgEle[(this.items[eleIdx].align + "s").toLowerCase()].splice(indexAgn, 1);
                }
                detach(innerItems[index]), this.items.splice(eleIdx, 1), this.tbarEle.splice(eleIdx, 1);
            }
        }, Toolbar.prototype.templateRender = function(templateProp, innerEle, item, index) {
            var isComponent, itemType = item.type, eleObj = templateProp;
            if ("object" == typeof templateProp && (isComponent = "function" == typeof eleObj.appendTo), 
            "string" != typeof templateProp && isComponent) {
                if ("Input" === itemType) {
                    ele = this.createElement("input");
                    item.id ? ele.id = item.id : ele.id = getUniqueID("tbr-ipt"), innerEle.appendChild(ele), 
                    eleObj.appendTo(ele);
                }
            } else {
                var templateFn = void 0, val = templateProp;
                val = "string" == typeof templateProp ? templateProp.trim() : templateProp;
                try {
                    if ("object" != typeof templateProp || isNullOrUndefined(templateProp.tagName)) {
                        if (document.querySelectorAll(val).length) {
                            var ele, tempStr = (ele = document.querySelector(val)).outerHTML.trim();
                            innerEle.appendChild(ele), ele.style.display = "", isNullOrUndefined(tempStr) || this.tempId.push(val);
                        }
                    } else innerEle.appendChild(templateProp);
                } catch (e) {
                    templateFn = compile$$1(val);
                }
                var tempArray = void 0;
                isNullOrUndefined(templateFn) || (tempArray = templateFn({}, this, "template")), 
                !isNullOrUndefined(tempArray) && tempArray.length > 0 && [].slice.call(tempArray).forEach(function(ele) {
                    isNullOrUndefined(ele.tagName) || (ele.style.display = ""), innerEle.appendChild(ele);
                });
            }
            this.add(innerEle, "e-template"), this.tbarEle.push(innerEle);
        }, Toolbar.prototype.buttonRendering = function(item, innerEle) {
            var dom = this.createElement("button", {
                className: "e-tbar-btn"
            });
            dom.setAttribute("type", "button");
            var iconCss, iconPos, textStr = item.text;
            item.id ? dom.id = item.id : dom.id = getUniqueID("e-tbr-btn");
            var btnTxt = this.createElement("div", {
                className: "e-tbar-btn-text"
            });
            textStr ? (btnTxt.innerHTML = textStr, dom.appendChild(btnTxt), dom.classList.add("e-tbtn-txt")) : this.add(innerEle, "e-tbtn-align"), 
            (item.prefixIcon || item.suffixIcon) && (item.prefixIcon && item.suffixIcon || item.prefixIcon ? (iconCss = item.prefixIcon + " e-icons", 
            iconPos = "Left") : (iconCss = item.suffixIcon + " e-icons", iconPos = "Right"));
            var btnObj = new Button({
                iconCss: iconCss,
                iconPosition: iconPos
            });
            return btnObj.createElement = this.createElement, btnObj.appendTo(dom), item.width && setStyleAttribute(dom, {
                width: formatUnit(item.width)
            }), dom;
        }, Toolbar.prototype.renderSubComponent = function(item, index) {
            var innerEle, dom;
            if ((innerEle = this.createElement("div", {
                className: CLS_ITEM$3
            })).setAttribute("aria-disabled", "false"), this.tbarEle || (this.tbarEle = []), 
            item.htmlAttributes && this.setAttr(item.htmlAttributes, innerEle), item.tooltipText) {
                var tempDom = this.createElement("div", {
                    innerHTML: item.tooltipText
                });
                innerEle.setAttribute("title", tempDom.textContent);
            }
            if (item.cssClass && (innerEle.className = innerEle.className + " " + item.cssClass), 
            item.template) this.templateRender(item.template, innerEle, item, index); else switch (item.type) {
              case "Button":
                (dom = this.buttonRendering(item, innerEle)).setAttribute("tabindex", "-1"), innerEle.appendChild(dom), 
                innerEle.addEventListener("click", this.itemClick.bind(this));
                break;

              case "Separator":
                this.add(innerEle, "e-separator");
            }
            if (item.showTextOn) {
                var sTxt = item.showTextOn;
                "Toolbar" === sTxt ? (this.add(innerEle, "e-toolbar-text"), this.add(innerEle, "e-tbtn-align")) : "Overflow" === sTxt && this.add(innerEle, "e-popup-text");
            }
            if (item.overflow) {
                var overflow = item.overflow;
                "Show" === overflow ? this.add(innerEle, "e-overflow-show") : "Hide" === overflow && (innerEle.classList.contains("e-separator") || this.add(innerEle, "e-overflow-hide"));
            }
            return "Show" !== item.overflow && item.showAlwaysInPopup && !innerEle.classList.contains("e-separator") && (this.add(innerEle, "e-popup-alone"), 
            this.popupPriCount++), innerEle;
        }, Toolbar.prototype.itemClick = function(e) {
            this.activeEleSwitch(e.currentTarget);
        }, Toolbar.prototype.activeEleSwitch = function(ele) {
            this.activeEleRemove(ele.firstElementChild), this.activeEle.focus();
        }, Toolbar.prototype.activeEleRemove = function(curEle) {
            isNullOrUndefined(this.activeEle) || this.activeEle.setAttribute("tabindex", "-1"), 
            this.activeEle = curEle, isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains("e-template") ? curEle.removeAttribute("tabindex") : this.activeEle.setAttribute("tabindex", "0");
        }, Toolbar.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, Toolbar.prototype.getModuleName = function() {
            return "toolbar";
        }, Toolbar.prototype.itemsRerender = function(newProp) {
            this.items = this.tbarItemsCol, this.destroyMode(), this.destroyItems(), this.items = newProp, 
            this.tbarItemsCol = this.items, this.renderItems(), this.renderOverflowMode();
        }, Toolbar.prototype.resize = function() {
            var ele = this.element;
            this.tbResize = !0, this.tbarAlign && this.itemPositioning(), this.popObj && "Popup" === this.overflowMode && this.popObj.hide();
            var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS$2)[0]);
            if (checkOverflow || this.destroyHScroll(), !checkOverflow || !this.scrollModule || this.offsetWid !== ele.offsetWidth) {
                if ((this.offsetWid > ele.offsetWidth || checkOverflow) && this.renderOverflowMode(), 
                this.popObj) {
                    if ("Extended" === this.overflowMode) {
                        var eleStyles = window.getComputedStyle(this.element);
                        this.popObj.width = parseFloat(eleStyles.width) + 2 * parseFloat(eleStyles.borderRightWidth);
                    }
                    this.tbarAlign && this.removePositioning(), this.popupRefresh(this.popObj.element, !1), 
                    this.tbarAlign && this.refreshPositioning();
                }
                this.offsetWid = ele.offsetWidth, this.tbResize = !1, this.separator();
            }
        }, Toolbar.prototype.onPropertyChanged = function(newProp, oldProp) {
            for (var tEle = this.element, _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "items":
                    if (newProp.items instanceof Array && oldProp.items instanceof Array) this.itemsRerender(newProp.items); else for (var changedProb = Object.keys(newProp.items), i = 0; i < changedProb.length; i++) {
                        var index = parseInt(Object.keys(newProp.items)[i], 10), property = Object.keys(newProp.items[index])[0], newProperty = (Object(oldProp.items[index])[property], 
                        Object(newProp.items[index])[property]);
                        if (this.tbarAlign || "align" === property) {
                            this.refresh();
                            break;
                        }
                        var popupPriCheck = "showAlwaysInPopup" === property && !newProperty, booleanCheck = "overflow" === property && 0 !== this.popupPriCount;
                        (popupPriCheck || this.items[index].showAlwaysInPopup && booleanCheck) && --this.popupPriCount, 
                        isNullOrUndefined(this.scrollModule) && this.destroyMode();
                        detach([].slice.call(selectAll(".e-toolbar-items ." + CLS_ITEM$3, tEle))[index]), 
                        this.tbarEle.splice(index, 1), this.addItems([ this.items[index] ], index), this.items.splice(index, 1), 
                        this.items[index].template && this.tbarEle.splice(this.items.length, 1);
                    }
                    break;

                  case "width":
                    var wid = tEle.offsetWidth;
                    setStyleAttribute(tEle, {
                        width: formatUnit(newProp.width)
                    }), this.renderOverflowMode(), this.popObj && wid < tEle.offsetWidth && this.popupRefresh(this.popObj.element, !1);
                    break;

                  case "height":
                    setStyleAttribute(this.element, {
                        height: formatUnit(newProp.height)
                    });
                    break;

                  case "overflowMode":
                    this.destroyMode(), this.renderOverflowMode(), this.enableRtl && this.add(tEle, "e-rtl"), 
                    this.refreshOverflow();
                    break;

                  case "enableRtl":
                    newProp.enableRtl ? this.add(tEle, "e-rtl") : this.remove(tEle, "e-rtl"), isNullOrUndefined(this.scrollModule) || (newProp.enableRtl ? this.add(this.scrollModule.element, "e-rtl") : this.remove(this.scrollModule.element, "e-rtl")), 
                    isNullOrUndefined(this.popObj) || (newProp.enableRtl ? this.add(this.popObj.element, "e-rtl") : this.remove(this.popObj.element, "e-rtl")), 
                    this.tbarAlign && this.itemPositioning();
                }
            }
        }, Toolbar.prototype.hideItem = function(index, value) {
            if (this.tbarEle[index]) {
                var innerItems = [].slice.call(selectAll("." + CLS_ITEM$3, this.element));
                !0 === value ? innerItems[index].classList.add("e-hidden") : innerItems[index].classList.remove("e-hidden"), 
                this.refreshOverflow();
            }
        }, __decorate$50([ Collection([], Item$2) ], Toolbar.prototype, "items", void 0), 
        __decorate$50([ Property("auto") ], Toolbar.prototype, "width", void 0), __decorate$50([ Property("auto") ], Toolbar.prototype, "height", void 0), 
        __decorate$50([ Property("Scrollable") ], Toolbar.prototype, "overflowMode", void 0), 
        __decorate$50([ Property(!1) ], Toolbar.prototype, "enableRtl", void 0), __decorate$50([ Event() ], Toolbar.prototype, "clicked", void 0), 
        __decorate$50([ Event() ], Toolbar.prototype, "created", void 0), __decorate$50([ Event() ], Toolbar.prototype, "destroyed", void 0), 
        __decorate$50([ Event() ], Toolbar.prototype, "beforeCreate", void 0), Toolbar = __decorate$50([ NotifyPropertyChanges ], Toolbar);
    }(Component), _toolbar = Object.freeze({
        Item: Item$2,
        Toolbar: Toolbar$2
    }), __extends$108 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$53 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, OTHERMONTH$2 = "e-other-month", ROOT$14 = "e-calendar", SELECTED$6 = "e-selected", FOCUSEDDATE$1 = "e-focused-date", Calendar$1 = function(_super) {
        function Calendar(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$108(Calendar, _super), Calendar.prototype.render = function() {
            if (this.isMultiSelection && "object" == typeof this.values && !isNullOrUndefined(this.values) && this.values.length > 0) {
                for (var tempValues = [], copyValues = [], limit = 0; limit < this.values.length; limit++) -1 === tempValues.indexOf(+this.values[limit]) && (tempValues.push(+this.values[limit]), 
                copyValues.push(this.values[limit]));
                this.setProperties({
                    values: copyValues
                }, !0);
                for (var index = 0; index < this.values.length; index++) if (!this.checkDateValue(this.values[index])) if ("string" == typeof this.values[index] && this.checkDateValue(new Date("" + this.values[index]))) {
                    var copyDate = new Date("" + this.values[index]);
                    this.values.splice(index, 1), this.values.splice(index, 0, copyDate);
                } else this.values.splice(index, 1);
                this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0), this.previousValues = this.values.length;
            }
            if (this.validateDate(), this.minMaxUpdate(), _super.prototype.render.call(this), 
            "calendar" === this.getModuleName()) {
                var form = closest(this.element, "form");
                form && EventHandler.add(form, "reset", this.formResetHandler.bind(this));
            }
        }, Calendar.prototype.formResetHandler = function() {
            this.value = null;
        }, Calendar.prototype.validateDate = function() {
            "string" == typeof this.value && this.setProperties({
                value: this.checkDateValue(new Date("" + this.value))
            }, !0), _super.prototype.validateDate.call(this, this.value), !isNullOrUndefined(this.value) && this.min <= this.max && this.value >= this.min && this.value <= this.max && (this.currentDate = new Date("" + this.value)), 
            isNaN(+this.value) && this.setProperties({
                value: null
            }, !0);
        }, Calendar.prototype.minMaxUpdate = function() {
            "calendar" === this.getModuleName() && (!isNullOrUndefined(this.value) && this.value <= this.min && this.min <= this.max ? (this.setProperties({
                value: this.min
            }, !0), this.changedArgs = {
                value: this.value
            }) : !isNullOrUndefined(this.value) && this.value >= this.max && this.min <= this.max && (this.setProperties({
                value: this.max
            }, !0), this.changedArgs = {
                value: this.value
            })), "calendar" === this.getModuleName() || isNullOrUndefined(this.value) ? _super.prototype.minMaxUpdate.call(this, this.value) : !isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max ? _super.prototype.minMaxUpdate.call(this, this.min) : !isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && _super.prototype.minMaxUpdate.call(this, this.max);
        }, Calendar.prototype.todayButtonClick = function() {
            if (this.showTodayButton) {
                var tempValue = new Date();
                if (this.value ? (tempValue.setHours(this.value.getHours()), tempValue.setMinutes(this.value.getMinutes()), 
                tempValue.setSeconds(this.value.getSeconds()), tempValue.setMilliseconds(this.value.getMilliseconds())) : tempValue = new Date(tempValue.getFullYear(), tempValue.getMonth(), tempValue.getDate(), 0, 0, 0, 0), 
                this.setProperties({
                    value: tempValue
                }, !0), this.isMultiSelection) {
                    var copyValues = this.copyValues(this.values);
                    _super.prototype.checkPresentDate.call(this, tempValue, this.values) || (copyValues.push(tempValue), 
                    this.setProperties({
                        values: copyValues
                    }));
                }
                _super.prototype.todayButtonClick.call(this, new Date(+this.value));
            }
        }, Calendar.prototype.keyActionHandle = function(e) {
            _super.prototype.keyActionHandle.call(this, e, this.value, this.isMultiSelection);
        }, Calendar.prototype.preRender = function() {
            var _this = this;
            this.changeHandler = function(e) {
                _this.triggerChange(e);
            }, _super.prototype.preRender.call(this, this.value);
        }, Calendar.prototype.createContent = function() {
            this.previousDate = this.value, _super.prototype.createContent.call(this);
        }, Calendar.prototype.minMaxDate = function(localDate) {
            return _super.prototype.minMaxDate.call(this, localDate);
        }, Calendar.prototype.renderMonths = function(e) {
            _super.prototype.renderMonths.call(this, e, this.value);
        }, Calendar.prototype.renderDays = function(currentDate, e) {
            var tempDays = _super.prototype.renderDays.call(this, currentDate, e, this.value, this.isMultiSelection, this.values);
            return this.isMultiSelection && _super.prototype.validateValues.call(this, this.isMultiSelection, this.values), 
            tempDays;
        }, Calendar.prototype.renderYears = function(e) {
            _super.prototype.renderYears.call(this, e, this.value);
        }, Calendar.prototype.renderDecades = function(e) {
            _super.prototype.renderDecades.call(this, e, this.value);
        }, Calendar.prototype.renderTemplate = function(elements, count, classNm, e) {
            _super.prototype.renderTemplate.call(this, elements, count, classNm, e, this.value), 
            this.changedArgs = {
                value: this.value,
                values: this.values
            }, this.changeHandler();
        }, Calendar.prototype.clickHandler = function(e) {
            if (e.currentTarget.classList.contains(OTHERMONTH$2)) if (this.isMultiSelection) {
                var copyValues = this.copyValues(this.values);
                copyValues.push(this.getIdValue(e, null)), this.setProperties({
                    values: copyValues
                }, !0), this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0);
            } else this.setProperties({
                value: this.getIdValue(e, null)
            }, !0);
            var storeView = this.currentView();
            _super.prototype.clickHandler.call(this, e, this.value), this.isMultiSelection && this.currentDate !== this.value && !isNullOrUndefined(this.tableBodyElement.querySelectorAll(".e-focused-date")[0]) && "Year" === storeView && this.tableBodyElement.querySelectorAll(".e-focused-date")[0].classList.remove(FOCUSEDDATE$1);
        }, Calendar.prototype.switchView = function(view, e) {
            _super.prototype.switchView.call(this, view, e, this.isMultiSelection);
        }, Calendar.prototype.getModuleName = function() {
            return _super.prototype.getModuleName.call(this), "calendar";
        }, Calendar.prototype.getPersistData = function() {
            _super.prototype.getPersistData.call(this);
            return this.addOnPersist([ "value", "values" ]);
        }, Calendar.prototype.onPropertyChanged = function(newProp, oldProp) {
            this.effect = "";
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "value":
                    "string" == typeof newProp.value ? this.setProperties({
                        value: new Date("" + newProp.value)
                    }, !0) : newProp.value = new Date("" + newProp.value), isNaN(+this.value) && this.setProperties({
                        value: oldProp.value
                    }, !0), this.update();
                    break;

                  case "values":
                    if ("string" == typeof newProp.values || "number" == typeof newProp.values) this.setProperties({
                        values: null
                    }, !0); else {
                        for (var copyValues = this.copyValues(this.values), index = 0; index < copyValues.length; index++) {
                            var tempDate = copyValues[index];
                            this.checkDateValue(tempDate) && !_super.prototype.checkPresentDate.call(this, tempDate, copyValues) && copyValues.push(tempDate);
                        }
                        this.setProperties({
                            values: copyValues
                        }, !0), this.values.length > 0 && this.setProperties({
                            value: newProp.values[newProp.values.length - 1]
                        }, !0);
                    }
                    this.validateValues(this.isMultiSelection, this.values), this.update();
                    break;

                  case "isMultiSelection":
                    this.setProperties({
                        isMultiSelection: newProp.isMultiSelection
                    }, !0), this.update();
                    break;

                  default:
                    _super.prototype.onPropertyChanged.call(this, newProp, oldProp, this.isMultiSelection, this.values);
                }
            }
        }, Calendar.prototype.destroy = function() {
            if (_super.prototype.destroy.call(this), "calendar" === this.getModuleName()) {
                var form = closest(this.element, "form");
                form && EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
            }
        }, Calendar.prototype.navigateTo = function(view, date) {
            this.minMaxUpdate(), _super.prototype.navigateTo.call(this, view, date);
        }, Calendar.prototype.currentView = function() {
            return _super.prototype.currentView.call(this);
        }, Calendar.prototype.addDate = function(dates) {
            if ("string" != typeof dates && "number" != typeof dates) {
                var copyValues = this.copyValues(this.values);
                if ("object" == typeof dates && dates.length > 0) for (var tempDates = dates, i = 0; i < tempDates.length; i++) this.checkDateValue(tempDates[i]) && !_super.prototype.checkPresentDate.call(this, tempDates[i], copyValues) && (!isNullOrUndefined(copyValues) && copyValues.length > 0 ? copyValues.push(tempDates[i]) : copyValues = [ new Date(+tempDates[i]) ]); else this.checkDateValue(dates) && !_super.prototype.checkPresentDate.call(this, dates, copyValues) && (!isNullOrUndefined(copyValues) && copyValues.length > 0 ? copyValues.push(dates) : copyValues = [ new Date(+dates) ]);
                this.setProperties({
                    values: copyValues
                }, !0), this.isMultiSelection && this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0), this.validateValues(this.isMultiSelection, copyValues), this.update(), this.changedArgs = {
                    value: this.value,
                    values: this.values
                }, this.changeHandler();
            }
        }, Calendar.prototype.removeDate = function(dates) {
            if ("string" != typeof dates && "number" != typeof dates && !isNullOrUndefined(this.values) && this.values.length > 0) {
                var copyValues = this.copyValues(this.values);
                if ("object" == typeof dates && dates.length > 0) for (var tempDates = dates, index = 0; index < tempDates.length; index++) for (var i = 0; i < copyValues.length; i++) +copyValues[i] == +tempDates[index] && copyValues.splice(i, 1); else for (i = 0; i < copyValues.length; i++) +copyValues[i] == +dates && copyValues.splice(i, 1);
                this.setProperties({
                    values: copyValues
                }, !1), this.update(), this.isMultiSelection && this.setProperties({
                    value: this.values[this.values.length - 1]
                }, !0), this.changedArgs = {
                    value: this.value,
                    values: this.values
                }, this.changeHandler();
            }
        }, Calendar.prototype.update = function() {
            this.validateDate(), this.minMaxUpdate(), _super.prototype.setValueUpdate.call(this);
        }, Calendar.prototype.selectDate = function(e, date, element) {
            _super.prototype.selectDate.call(this, e, date, element, this.isMultiSelection, this.values), 
            this.isMultiSelection && !isNullOrUndefined(this.values) && this.values.length > 0 && this.setProperties({
                value: this.values[this.values.length - 1]
            }, !0), this.changedArgs = {
                value: this.value,
                values: this.values
            }, this.changeHandler(e);
        }, Calendar.prototype.changeEvent = function(e) {
            this.trigger("change", this.changedArgs), this.previousDate = new Date(+this.value);
        }, Calendar.prototype.triggerChange = function(e) {
            this.changedArgs.event = e || null, this.changedArgs.isInteracted = !isNullOrUndefined(e), 
            isNullOrUndefined(this.value) || this.setProperties({
                value: this.value
            }, !0), this.isMultiSelection || +this.value === Number.NaN || +this.value == +this.previousDate ? isNullOrUndefined(this.values) || this.previousValues === this.values.length || (this.changeEvent(e), 
            this.previousValues = this.values.length) : this.changeEvent(e);
        }, __decorate$53([ Property(null) ], Calendar.prototype, "value", void 0), __decorate$53([ Property(null) ], Calendar.prototype, "values", void 0), 
        __decorate$53([ Property(!1) ], Calendar.prototype, "isMultiSelection", void 0), 
        __decorate$53([ Event() ], Calendar.prototype, "change", void 0), Calendar = __decorate$53([ NotifyPropertyChanges ], Calendar);
    }(function(_super) {
        function CalendarBase(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.effect = "", _this.keyConfigs = {
                controlUp: "ctrl+38",
                controlDown: "ctrl+40",
                moveDown: "downarrow",
                moveUp: "uparrow",
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                select: "enter",
                home: "home",
                end: "end",
                pageUp: "pageup",
                pageDown: "pagedown",
                shiftPageUp: "shift+pageup",
                shiftPageDown: "shift+pagedown",
                controlHome: "ctrl+home",
                controlEnd: "ctrl+end",
                altUpArrow: "alt+uparrow",
                spacebar: "space",
                altRightArrow: "alt+rightarrow",
                altLeftArrow: "alt+leftarrow"
            }, _this;
        }
        return __extends$108(CalendarBase, _super), CalendarBase.prototype.render = function() {
            this.globalize = new Internationalization(this.locale), (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) && this.setProperties({
                firstDayOfWeek: this.globalize.getFirstDayOfWeek()
            }, !0), this.todayDisabled = !1, this.todayDate = new Date(new Date().setHours(0, 0, 0, 0)), 
            "calendar" === this.getModuleName() ? (this.element.classList.add(ROOT$14), this.enableRtl && this.element.classList.add("e-rtl"), 
            Browser.isDevice && this.element.classList.add("e-device"), attributes(this.element, {
                "data-role": "calendar"
            })) : (this.calendarElement = this.createElement("div"), this.calendarElement.classList.add(ROOT$14), 
            this.enableRtl && this.calendarElement.classList.add("e-rtl"), Browser.isDevice && this.calendarElement.classList.add("e-device"), 
            attributes(this.calendarElement, {
                role: "calendar"
            })), this.createHeader(), this.createContent(), this.wireEvents();
        }, CalendarBase.prototype.validateDate = function(value) {
            this.setProperties({
                min: this.checkDateValue(new Date("" + this.min))
            }, !0), this.setProperties({
                max: this.checkDateValue(new Date("" + this.max))
            }, !0), this.currentDate = this.currentDate ? this.currentDate : new Date(new Date().setHours(0, 0, 0, 0)), 
            !isNullOrUndefined(value) && this.min <= this.max && value >= this.min && value <= this.max && (this.currentDate = new Date("" + value));
        }, CalendarBase.prototype.minMaxUpdate = function(value) {
            +this.min <= +this.max ? removeClass([ this.element ], "e-overlay") : (this.setProperties({
                min: this.min
            }, !0), addClass([ this.element ], "e-overlay")), this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min, 
            this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max, 
            +this.min <= +this.max && value && +value <= +this.max && +value >= +this.min ? this.currentDate = new Date("" + value) : +this.min <= +this.max && !value && +this.currentDate > +this.max ? this.currentDate = new Date("" + this.max) : +this.currentDate < +this.min && (this.currentDate = new Date("" + this.min));
        }, CalendarBase.prototype.createHeader = function() {
            this.headerElement = this.createElement("div", {
                className: "e-header"
            });
            var iconContainer = this.createElement("div", {
                className: "e-icon-container"
            });
            this.previousIcon = this.createElement("button", {
                className: "e-prev",
                attrs: {
                    type: "button"
                }
            }), rippleEffect(this.previousIcon, {
                duration: 400,
                selector: ".e-prev",
                isCenterRipple: !0
            }), attributes(this.previousIcon, {
                "aria-disabled": "false",
                "aria-label": "previous month"
            }), this.nextIcon = this.createElement("button", {
                className: "e-next",
                attrs: {
                    type: "button"
                }
            }), rippleEffect(this.nextIcon, {
                selector: ".e-next",
                duration: 400,
                isCenterRipple: !0
            }), attributes(this.nextIcon, {
                "aria-disabled": "false",
                "aria-label": "next month"
            }), this.headerTitleElement = this.createElement("div", {
                className: "e-day e-title"
            }), attributes(this.headerTitleElement, {
                "aria-atomic": "true",
                "aria-live": "assertive",
                "aria-label": "title"
            }), this.headerElement.appendChild(this.headerTitleElement), this.previousIcon.appendChild(this.createElement("span", {
                className: "e-date-icon-prev e-icons"
            })), this.nextIcon.appendChild(this.createElement("span", {
                className: "e-date-icon-next  e-icons"
            })), iconContainer.appendChild(this.previousIcon), iconContainer.appendChild(this.nextIcon), 
            this.headerElement.appendChild(iconContainer), "calendar" === this.getModuleName() ? this.element.appendChild(this.headerElement) : this.calendarElement.appendChild(this.headerElement);
        }, CalendarBase.prototype.createContent = function() {
            this.contentElement = this.createElement("div", {
                className: "e-content"
            }), this.table = this.createElement("table", {
                attrs: {
                    tabIndex: "0",
                    role: "grid",
                    "aria-activedescendant": ""
                }
            }), "calendar" === this.getModuleName() ? this.element.appendChild(this.contentElement) : this.calendarElement.appendChild(this.contentElement), 
            this.contentElement.appendChild(this.table), this.createContentHeader(), this.createContentBody(), 
            this.showTodayButton && this.createContentFooter();
        }, CalendarBase.prototype.getCultureValues = function() {
            var cldrObj, culShortNames = [];
            cldrObj = "en" === this.locale || "en-US" === this.locale ? getValue("days.stand-alone.short", getDefaultDateObject()) : this.getCultureObjects(cldrData, "" + this.locale);
            for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
                var obj = _a[_i];
                culShortNames.push(getValue(obj, cldrObj));
            }
            return culShortNames;
        }, CalendarBase.prototype.createContentHeader = function() {
            "calendar" === this.getModuleName() ? isNullOrUndefined(this.element.querySelectorAll(".e-content .e-week-header")[0]) || detach(this.element.querySelectorAll(".e-content .e-week-header")[0]) : isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]) || detach(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]);
            var shortNames, html = "";
            (this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) && this.setProperties({
                firstDayOfWeek: 0
            }, !0), this.tableHeadElement = this.createElement("thead", {
                className: "e-week-header"
            }), this.weekNumber && (html += '<th class="e-week-number"></th>', "calendar" === this.getModuleName() ? addClass([ this.element ], "e-week-number") : addClass([ this.calendarElement ], "e-week-number")), 
            shortNames = this.shiftArray(this.getCultureValues().length > 0 && this.getCultureValues(), this.firstDayOfWeek);
            for (var days = 0; days <= 6; days++) html += '<th  class="">' + shortNames[days] + "</th>";
            html = "<tr>" + html + "</tr>", this.tableHeadElement.innerHTML = html, this.table.appendChild(this.tableHeadElement);
        }, CalendarBase.prototype.createContentBody = function() {
            switch ("calendar" === this.getModuleName() ? isNullOrUndefined(this.element.querySelectorAll(".e-content tbody")[0]) || detach(this.element.querySelectorAll(".e-content tbody")[0]) : isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content tbody")[0]) || detach(this.calendarElement.querySelectorAll(".e-content tbody")[0]), 
            this.start) {
              case "Year":
                this.renderYears();
                break;

              case "Decade":
                this.renderDecades();
                break;

              default:
                this.renderMonths();
            }
        }, CalendarBase.prototype.updateFooter = function() {
            this.todayElement.textContent = this.l10.getConstant("today");
        }, CalendarBase.prototype.createContentFooter = function() {
            if (this.showTodayButton) {
                var minimum = new Date(+this.min), maximum = new Date(+this.max);
                this.globalize = new Internationalization(this.locale), this.l10 = new L10n(this.getModuleName(), {
                    today: "Today"
                }, this.locale), this.todayElement = this.createElement("button"), rippleEffect(this.todayElement), 
                this.updateFooter(), addClass([ this.todayElement ], [ "e-btn", "e-today", "e-flat", "e-primary", "e-css" ]), 
                +new Date(minimum.setHours(0, 0, 0, 0)) <= +this.todayDate && +this.todayDate <= +new Date(maximum.setHours(0, 0, 0, 0)) && !this.todayDisabled || addClass([ this.todayElement ], "e-disabled"), 
                this.footer = this.createElement("div", {
                    className: "e-footer-container"
                }), this.footer.appendChild(this.todayElement), "calendar" === this.getModuleName() && this.element.appendChild(this.footer), 
                "datepicker" === this.getModuleName() && this.calendarElement.appendChild(this.footer), 
                "datetimepicker" === this.getModuleName() && this.calendarElement.appendChild(this.footer), 
                this.todayElement.classList.contains("e-disabled") || EventHandler.add(this.todayElement, "click", this.todayButtonClick, this);
            }
        }, CalendarBase.prototype.wireEvents = function() {
            EventHandler.add(this.headerTitleElement, "click", this.navigateTitle, this), "calendar" === this.getModuleName() ? this.keyboardModule = new KeyboardEvents(this.element, {
                eventName: "keydown",
                keyAction: this.keyActionHandle.bind(this),
                keyConfigs: this.keyConfigs
            }) : this.keyboardModule = new KeyboardEvents(this.calendarElement, {
                eventName: "keydown",
                keyAction: this.keyActionHandle.bind(this),
                keyConfigs: this.keyConfigs
            });
        }, CalendarBase.prototype.todayButtonClick = function(value) {
            this.showTodayButton && (this.currentView() === this.depth ? this.effect = "" : this.effect = "e-zoomin", 
            this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? this.navigateTo(this.depth, new Date("" + value)) : this.navigateTo("Month", new Date("" + value)));
        }, CalendarBase.prototype.keyActionHandle = function(e, value, multiSelection) {
            var selectedDate, view = this.getViewNumber(this.currentView()), focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
            selectedDate = multiSelection ? isNullOrUndefined(focusedDate) || +value !== parseInt(focusedDate.getAttribute("id").split("_")[0], 10) ? this.tableBodyElement.querySelector("tr td.e-selected") : focusedDate : this.tableBodyElement.querySelector("tr td.e-selected");
            var depthValue = this.getViewNumber(this.depth), levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
            switch (this.effect = "", e.action) {
              case "moveLeft":
                this.KeyboardNavigate(-1, view, e, this.max, this.min), e.preventDefault();
                break;

              case "moveRight":
                this.KeyboardNavigate(1, view, e, this.max, this.min), e.preventDefault();
                break;

              case "moveUp":
                0 === view ? this.KeyboardNavigate(-7, view, e, this.max, this.min) : this.KeyboardNavigate(-4, view, e, this.max, this.min), 
                e.preventDefault();
                break;

              case "moveDown":
                0 === view ? this.KeyboardNavigate(7, view, e, this.max, this.min) : this.KeyboardNavigate(4, view, e, this.max, this.min), 
                e.preventDefault();
                break;

              case "select":
                if (e.target === this.todayElement) this.todayButtonClick(value); else {
                    var element = isNullOrUndefined(focusedDate) ? selectedDate : focusedDate;
                    if (!isNullOrUndefined(element) && !element.classList.contains("e-disabled")) if (levelRestrict) {
                        var d = new Date(parseInt("" + element.id, 0));
                        this.selectDate(e, d, element);
                    } else this.contentClick(null, --view, element, value);
                }
                break;

              case "controlUp":
                this.title(), e.preventDefault();
                break;

              case "controlDown":
                isNullOrUndefined(focusedDate) && (isNullOrUndefined(selectedDate) || levelRestrict) || this.contentClick(null, --view, focusedDate || selectedDate, value), 
                e.preventDefault();
                break;

              case "home":
                this.currentDate = this.firstDay(this.currentDate), detach(this.tableBodyElement), 
                0 === view ? this.renderMonths(e) : 1 === view ? this.renderYears(e) : this.renderDecades(e), 
                e.preventDefault();
                break;

              case "end":
                this.currentDate = this.lastDay(this.currentDate, view), detach(this.tableBodyElement), 
                0 === view ? this.renderMonths(e) : 1 === view ? this.renderYears(e) : this.renderDecades(e), 
                e.preventDefault();
                break;

              case "pageUp":
                this.addMonths(this.currentDate, -1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "pageDown":
                this.addMonths(this.currentDate, 1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "shiftPageUp":
                this.addYears(this.currentDate, -1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "shiftPageDown":
                this.addYears(this.currentDate, 1), this.navigateTo("Month", this.currentDate), 
                e.preventDefault();
                break;

              case "controlHome":
                this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 0, 1)), e.preventDefault();
                break;

              case "controlEnd":
                this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 11, 31)), e.preventDefault();
            }
            "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.KeyboardNavigate = function(number, currentView, e, max, min) {
            var date = new Date("" + this.currentDate);
            switch (currentView) {
              case 2:
                this.addYears(this.currentDate, number), this.isMonthYearRange(this.currentDate) ? (detach(this.tableBodyElement), 
                this.renderDecades(e)) : this.currentDate = date;
                break;

              case 1:
                this.addMonths(this.currentDate, number), this.isMonthYearRange(this.currentDate) ? (detach(this.tableBodyElement), 
                this.renderYears(e)) : this.currentDate = date;
                break;

              case 0:
                this.addDay(this.currentDate, number, e, max, min), this.isMinMaxRange(this.currentDate) ? (detach(this.tableBodyElement), 
                this.renderMonths(e)) : this.currentDate = date;
            }
        }, CalendarBase.prototype.preRender = function(value) {
            var _this = this;
            this.navigatePreviousHandler = this.navigatePrevious.bind(this), this.navigateNextHandler = this.navigateNext.bind(this), 
            this.navigateHandler = function(e) {
                _this.triggerNavigate(e);
            };
        }, CalendarBase.prototype.minMaxDate = function(localDate) {
            var currentDate = new Date(new Date(+localDate).setHours(0, 0, 0, 0)), minDate = new Date(new Date(+this.min).setHours(0, 0, 0, 0)), maxDate = new Date(new Date(+this.max).setHours(0, 0, 0, 0));
            return +currentDate != +minDate && +currentDate != +maxDate || (+localDate < +this.min && (localDate = new Date(+this.min)), 
            +localDate > +this.max && (localDate = new Date(+this.max))), localDate;
        }, CalendarBase.prototype.renderMonths = function(e, value) {
            var numCells = this.weekNumber ? 8 : 7, tdEles = this.renderDays(this.currentDate, e, value);
            this.createContentHeader(), this.renderTemplate(tdEles, numCells, "e-month", e, value);
        }, CalendarBase.prototype.renderDays = function(currentDate, e, value, multiSelection, values) {
            var minMaxDate, tdEles = [], localDate = new Date("" + currentDate), currentMonth = (this.weekNumber, 
            localDate.getMonth());
            this.titleUpdate(currentDate, "days");
            var d = localDate;
            for (localDate = new Date(d.getFullYear(), d.getMonth(), 0, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()); localDate.getDay() !== this.firstDayOfWeek; ) this.setStartDate(localDate, -864e5);
            for (var day = 0; day < 42; ++day) {
                var weekEle = this.createElement("td", {
                    className: "e-cell"
                }), weekAnchor = this.createElement("span");
                day % 7 == 0 && this.weekNumber && (weekAnchor.textContent = "" + this.getWeek(localDate), 
                weekEle.appendChild(weekAnchor), addClass([ weekEle ], "e-week-number"), tdEles.push(weekEle)), 
                minMaxDate = new Date(+localDate), localDate = this.minMaxDate(localDate);
                var dateFormatOptions = {
                    type: "dateTime",
                    skeleton: "full"
                }, date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions), tdEle = this.dayCell(localDate), title = this.globalize.formatDate(localDate, {
                    type: "date",
                    skeleton: "full"
                }), dayLink = this.createElement("span");
                dayLink.textContent = this.globalize.formatDate(localDate, {
                    type: "date",
                    skeleton: "d"
                });
                var disabled = this.min > localDate || this.max < localDate;
                disabled ? (addClass([ tdEle ], "e-disabled"), addClass([ tdEle ], "e-overlay")) : dayLink.setAttribute("title", "" + title), 
                currentMonth !== localDate.getMonth() && addClass([ tdEle ], OTHERMONTH$2), 0 !== localDate.getDay() && 6 !== localDate.getDay() || addClass([ tdEle ], "e-weekend"), 
                tdEle.appendChild(dayLink), this.renderDayCellArgs = {
                    date: localDate,
                    isDisabled: !1,
                    element: tdEle,
                    isOutOfRange: disabled
                };
                var argument = this.renderDayCellArgs;
                if (this.renderDayCellEvent(argument), argument.isDisabled) if (multiSelection) {
                    if (!isNullOrUndefined(values) && values.length > 0) for (var index = 0; index < values.length; index++) {
                        +new Date(this.globalize.formatDate(argument.date, {
                            type: "date",
                            skeleton: "yMd"
                        })) === +new Date(this.globalize.formatDate(values[index], {
                            type: "date",
                            skeleton: "yMd"
                        })) && (values.splice(index, 1), index = -1);
                    }
                } else value && +value == +argument.date && this.setProperties({
                    value: null
                }, !0);
                this.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED$6) && (addClass([ tdEle ], "e-disabled"), 
                addClass([ tdEle ], "e-overlay"), +this.renderDayCellArgs.date == +this.todayDate && (this.todayDisabled = !0));
                var otherMnthBool = tdEle.classList.contains(OTHERMONTH$2), disabledCls = tdEle.classList.contains("e-disabled");
                if (disabledCls || EventHandler.add(tdEle, "click", this.clickHandler, this), !multiSelection || isNullOrUndefined(values) || otherMnthBool || disabledCls) otherMnthBool || disabledCls || !this.getDateVal(localDate, value) ? this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate) : addClass([ tdEle ], SELECTED$6); else {
                    for (var tempValue = 0; tempValue < values.length; tempValue++) {
                        this.globalize.formatDate(localDate, {
                            type: "date",
                            skeleton: "short"
                        }) === this.globalize.formatDate(values[tempValue], {
                            type: "date",
                            skeleton: "short"
                        }) && this.getDateVal(localDate, values[tempValue]) ? addClass([ tdEle ], SELECTED$6) : this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
                    }
                    values.length <= 0 && this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
                }
                date.getMonth() === new Date().getMonth() && date.getDate() === new Date().getDate() && date.getFullYear() === new Date().getFullYear() && addClass([ tdEle ], "e-today"), 
                tdEles.push(this.renderDayCellArgs.element), localDate = new Date(+minMaxDate), 
                this.addDay(localDate, 1, null, this.max, this.min);
            }
            return tdEles;
        }, CalendarBase.prototype.updateFocus = function(otherMonth, disabled, localDate, tableElement, currentDate) {
            currentDate.getDate() !== localDate.getDate() || otherMonth || disabled ? (currentDate >= this.max && parseInt(tableElement.id, 0) === +this.max && !otherMonth && !disabled && addClass([ tableElement ], FOCUSEDDATE$1), 
            currentDate <= this.min && parseInt(tableElement.id, 0) === +this.min && !otherMonth && !disabled && addClass([ tableElement ], FOCUSEDDATE$1)) : addClass([ tableElement ], FOCUSEDDATE$1);
        }, CalendarBase.prototype.renderYears = function(e, value) {
            this.removeTableHeadElement();
            var tdEles = [], valueUtil = isNullOrUndefined(value), curDate = new Date("" + this.currentDate), mon = curDate.getMonth(), yr = curDate.getFullYear(), localDate = curDate, curYrs = localDate.getFullYear(), minYr = new Date("" + this.min).getFullYear(), minMonth = new Date("" + this.min).getMonth(), maxYr = new Date("" + this.max).getFullYear(), maxMonth = new Date("" + this.max).getMonth();
            localDate.setMonth(0), this.titleUpdate(this.currentDate, "months");
            this.min > localDate || this.max;
            localDate.setDate(1);
            for (var month = 0; month < 12; ++month) {
                var tdEle = this.dayCell(localDate), dayLink = this.createElement("span"), localMonth = value && value.getMonth() === localDate.getMonth(), select = value && value.getFullYear() === yr && localMonth;
                dayLink.textContent = this.globalize.formatDate(localDate, {
                    type: "dateTime",
                    skeleton: "MMM"
                }), this.min && (curYrs < minYr || month < minMonth && curYrs === minYr) || this.max && (curYrs > maxYr || month > maxMonth && curYrs >= maxYr) ? addClass([ tdEle ], "e-disabled") : !valueUtil && select ? addClass([ tdEle ], SELECTED$6) : localDate.getMonth() === mon && this.currentDate.getMonth() === mon && addClass([ tdEle ], FOCUSEDDATE$1), 
                localDate.setDate(1), localDate.setMonth(localDate.getMonth() + 1), tdEle.classList.contains("e-disabled") || EventHandler.add(tdEle, "click", this.clickHandler, this), 
                tdEle.appendChild(dayLink), tdEles.push(tdEle);
            }
            this.renderTemplate(tdEles, 4, "e-year", e, value);
        }, CalendarBase.prototype.renderDecades = function(e, value) {
            this.removeTableHeadElement();
            var tdEles = [], localDate = new Date("" + this.currentDate);
            localDate.setMonth(0), localDate.setDate(1);
            var localYr = localDate.getFullYear(), startYr = new Date("" + (localYr - localYr % 10)), endYr = new Date("" + (localYr - localYr % 10 + 9)), startHdrYr = this.globalize.formatDate(startYr, {
                type: "dateTime",
                skeleton: "y"
            }), endHdrYr = this.globalize.formatDate(endYr, {
                type: "dateTime",
                skeleton: "y"
            });
            this.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
            for (var startYear = new Date(localYr - localYr % 10 - 1, 0, 1).getFullYear(), rowIterator = 0; rowIterator < 12; ++rowIterator) {
                var year = startYear + rowIterator;
                localDate.setFullYear(year);
                var tdEle = this.dayCell(localDate);
                attributes(tdEle, {
                    role: "gridcell"
                });
                var dayLink = this.createElement("span");
                dayLink.textContent = this.globalize.formatDate(localDate, {
                    type: "dateTime",
                    skeleton: "y"
                }), year < new Date("" + this.min).getFullYear() || year > new Date("" + this.max).getFullYear() ? addClass([ tdEle ], "e-disabled") : isNullOrUndefined(value) || localDate.getFullYear() !== value.getFullYear() ? localDate.getFullYear() !== this.currentDate.getFullYear() || tdEle.classList.contains("e-disabled") || addClass([ tdEle ], FOCUSEDDATE$1) : addClass([ tdEle ], SELECTED$6), 
                tdEle.classList.contains("e-disabled") || EventHandler.add(tdEle, "click", this.clickHandler, this), 
                tdEle.appendChild(dayLink), tdEles.push(tdEle);
            }
            this.renderTemplate(tdEles, 4, "e-decade", e, value);
        }, CalendarBase.prototype.dayCell = function(localDate) {
            var dateFormatOptions = {
                skeleton: "full",
                type: "dateTime"
            }, attrs = {
                className: "e-cell",
                attrs: {
                    id: "" + getUniqueID("" + this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions).valueOf()),
                    "aria-selected": "false",
                    role: "gridcell"
                }
            };
            return this.createElement("td", attrs);
        }, CalendarBase.prototype.firstDay = function(date) {
            var collection = this.tableBodyElement.querySelectorAll("td:not(.e-other-month");
            if (collection.length) for (var i = 0; i < collection.length; i++) if (!collection[i].classList.contains("e-disabled")) {
                date = new Date(parseInt(collection[i].id, 0));
                break;
            }
            return date;
        }, CalendarBase.prototype.lastDay = function(date, view) {
            var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
            if (2 !== view) {
                var timeOffset = Math.abs(lastDate.getTimezoneOffset() - this.firstDay(date).getTimezoneOffset());
                return timeOffset && lastDate.setHours(this.firstDay(date).getHours() + timeOffset / 60), 
                this.findLastDay(lastDate);
            }
            return this.findLastDay(this.firstDay(lastDate));
        }, CalendarBase.prototype.checkDateValue = function(value) {
            return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
        }, CalendarBase.prototype.findLastDay = function(date) {
            var collection = this.tableBodyElement.querySelectorAll("td:not(.e-other-month");
            if (collection.length) for (var i = collection.length - 1; i >= 0; i--) if (!collection[i].classList.contains("e-disabled")) {
                date = new Date(parseInt(collection[i].id, 0));
                break;
            }
            return date;
        }, CalendarBase.prototype.removeTableHeadElement = function() {
            "calendar" === this.getModuleName() ? isNullOrUndefined(this.element.querySelectorAll(".e-content table thead")[0]) || detach(this.tableHeadElement) : isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content table thead")[0]) || detach(this.tableHeadElement);
        }, CalendarBase.prototype.renderTemplate = function(elements, count, classNm, e, value) {
            var trEle, view = this.getViewNumber(this.currentView());
            this.tableBodyElement = this.createElement("tbody"), this.table.appendChild(this.tableBodyElement), 
            removeClass([ this.contentElement, this.headerElement ], [ "e-month", "e-decade", "e-year" ]), 
            addClass([ this.contentElement, this.headerElement ], [ classNm ]);
            for (var row = count, rowIterator = 0, dayCell = 0; dayCell < elements.length / count; ++dayCell) {
                for (trEle = this.createElement("tr", {
                    attrs: {
                        role: "row"
                    }
                }), rowIterator = 0 + rowIterator; rowIterator < row; rowIterator++) elements[rowIterator].classList.contains("e-week-number") || isNullOrUndefined(elements[rowIterator].children[0]) || (addClass([ elements[rowIterator].children[0] ], [ "e-day" ]), 
                rippleEffect(elements[rowIterator].children[0], {
                    duration: 600,
                    isCenterRipple: !0
                })), trEle.appendChild(elements[rowIterator]), this.weekNumber && 7 === rowIterator && elements[7].classList.contains(OTHERMONTH$2) && addClass([ trEle ], "e-month-hide"), 
                !this.weekNumber && 6 === rowIterator && elements[6].classList.contains(OTHERMONTH$2) && addClass([ trEle ], "e-month-hide"), 
                this.weekNumber ? 41 === rowIterator && elements[41].classList.contains(OTHERMONTH$2) && addClass([ trEle ], "e-month-hide") : 35 === rowIterator && elements[35].classList.contains(OTHERMONTH$2) && addClass([ trEle ], "e-month-hide");
                row += count, rowIterator += 0, this.tableBodyElement.appendChild(trEle);
            }
            this.table.querySelector("tbody").className = this.effect, this.iconHandler(), (view !== this.getViewNumber(this.currentView()) || 0 === view && view !== this.getViewNumber(this.currentView())) && this.navigateHandler(e), 
            this.setAriaActiveDescendant();
        }, CalendarBase.prototype.clickHandler = function(e, value) {
            this.clickEventEmitter(e);
            var eve = e.currentTarget, view = this.getViewNumber(this.currentView());
            eve.classList.contains(OTHERMONTH$2) ? this.contentClick(e, 0, null, value) : view === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? this.contentClick(e, 1, null, value) : 2 === view ? this.contentClick(e, 1, null, value) : eve.classList.contains(OTHERMONTH$2) || 0 !== view ? this.contentClick(e, 0, eve, value) : this.selectDate(e, this.getIdValue(e, null), null), 
            "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.clickEventEmitter = function(e) {
            e.preventDefault();
        }, CalendarBase.prototype.contentClick = function(e, view, element, value) {
            var currentView = this.getViewNumber(this.currentView()), d = this.getIdValue(e, element);
            switch (view) {
              case 0:
                currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? (detach(this.tableBodyElement), 
                this.currentDate = d, this.effect = "e-zoomin", this.renderMonths(e)) : (this.currentDate.setMonth(d.getMonth()), 
                d.getMonth() > 0 && this.currentDate.getMonth() !== d.getMonth() && this.currentDate.setDate(0), 
                this.currentDate.setFullYear(d.getFullYear()), this.effect = "e-zoomin", detach(this.tableBodyElement), 
                this.renderMonths(e));
                break;

              case 1:
                currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth) ? this.selectDate(e, d, null) : (this.currentDate.setFullYear(d.getFullYear()), 
                this.effect = "e-zoomin", detach(this.tableBodyElement), this.renderYears(e));
            }
        }, CalendarBase.prototype.switchView = function(view, e, multiSelection) {
            switch (view) {
              case 0:
                detach(this.tableBodyElement), this.renderMonths(e), multiSelection && !isNullOrUndefined(this.tableBodyElement.querySelectorAll(".e-focused-date")[0]) && this.tableBodyElement.querySelectorAll(".e-focused-date")[0].classList.remove(FOCUSEDDATE$1);
                break;

              case 1:
                detach(this.tableBodyElement), this.renderYears(e);
                break;

              case 2:
                detach(this.tableBodyElement), this.renderDecades(e);
            }
        }, CalendarBase.prototype.getModuleName = function() {
            return "calendar";
        }, CalendarBase.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, CalendarBase.prototype.onPropertyChanged = function(newProp, oldProp, multiSelection, values) {
            this.effect = "";
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "enableRtl":
                    newProp.enableRtl ? "calendar" === this.getModuleName() ? this.element.classList.add("e-rtl") : this.calendarElement.classList.add("e-rtl") : "calendar" === this.getModuleName() ? this.element.classList.remove("e-rtl") : this.calendarElement.classList.remove("e-rtl");
                    break;

                  case "min":
                  case "max":
                    "min" === prop ? this.setProperties({
                        min: this.checkDateValue(new Date("" + newProp.min))
                    }, !0) : this.setProperties({
                        max: this.checkDateValue(new Date("" + newProp.max))
                    }, !0), this.setProperties({
                        start: this.currentView()
                    }, !0), detach(this.tableBodyElement), this.minMaxUpdate(), multiSelection && this.validateValues(multiSelection, values), 
                    this.createContentBody(), (this.todayDate < this.min || this.max < this.todayDate) && this.footer && this.todayElement ? (detach(this.todayElement), 
                    detach(this.footer), this.todayElement = this.footer = null, this.createContentFooter()) : this.todayElement.classList.contains("e-disabled") && this.footer && this.todayElement && (removeClass([ this.todayElement ], "e-disabled"), 
                    detach(this.todayElement), detach(this.footer), this.todayElement = this.footer = null, 
                    this.createContentFooter());
                    break;

                  case "start":
                  case "weekNumber":
                  case "firstDayOfWeek":
                    this.createContentHeader(), this.createContentBody();
                    break;

                  case "locale":
                    this.globalize = new Internationalization(this.locale), this.createContentHeader(), 
                    this.createContentBody(), this.l10.setLocale(this.locale), this.updateFooter();
                    break;

                  case "showTodayButton":
                    newProp.showTodayButton ? this.createContentFooter() : (detach(this.todayElement), 
                    detach(this.footer), this.todayElement = this.footer = void 0), this.setProperties({
                        showTodayButton: newProp.showTodayButton
                    }, !0);
                }
            }
        }, CalendarBase.prototype.validateValues = function(multiSelection, values) {
            if (multiSelection && !isNullOrUndefined(values) && values.length > 0) {
                for (var copyValues = this.copyValues(values), skipIndex = 0; skipIndex < copyValues.length; skipIndex++) {
                    var tempValue = copyValues[skipIndex], tempValueString = this.globalize.formatDate(tempValue, {
                        type: "date",
                        skeleton: "yMd"
                    }), minString = this.globalize.formatDate(this.min, {
                        type: "date",
                        skeleton: "yMd"
                    }), maxString = this.globalize.formatDate(this.max, {
                        type: "date",
                        skeleton: "yMd"
                    });
                    (+new Date(tempValueString) < +new Date(minString) || +new Date(tempValueString) > +new Date(maxString)) && (copyValues.splice(skipIndex, 1), 
                    skipIndex = -1);
                }
                this.setProperties({
                    values: copyValues
                }, !0);
            }
        }, CalendarBase.prototype.setValueUpdate = function() {
            detach(this.tableBodyElement), this.setProperties({
                start: this.currentView()
            }, !0), this.createContentBody();
        }, CalendarBase.prototype.copyValues = function(values) {
            var copyValues = [];
            if (!isNullOrUndefined(values) && values.length > 0) for (var index = 0; index < values.length; index++) copyValues.push(new Date(+values[index]));
            return copyValues;
        }, CalendarBase.prototype.titleUpdate = function(date, view) {
            var globalize = new Internationalization(this.locale);
            switch (view) {
              case "days":
                this.headerTitleElement.textContent = globalize.formatDate(date, {
                    type: "dateTime",
                    skeleton: "yMMMM"
                });
                break;

              case "months":
                this.headerTitleElement.textContent = globalize.formatDate(date, {
                    type: "dateTime",
                    skeleton: "y"
                });
            }
        }, CalendarBase.prototype.setActiveDescendant = function() {
            var id, focusedEle = this.tableBodyElement.querySelector("tr td.e-focused-date"), selectedEle = this.tableBodyElement.querySelector("tr td.e-selected"), title = this.globalize.formatDate(this.currentDate, {
                type: "date",
                skeleton: "full"
            });
            return (selectedEle || focusedEle) && ((focusedEle || selectedEle).setAttribute("aria-selected", "true"), 
            (focusedEle || selectedEle).setAttribute("aria-label", "The current focused date is " + title), 
            id = (focusedEle || selectedEle).getAttribute("id")), id;
        }, CalendarBase.prototype.iconHandler = function() {
            switch (new Date("" + this.currentDate).setDate(1), this.currentView()) {
              case "Month":
                this.previousIconHandler(this.compareMonth(new Date("" + this.currentDate), this.min) < 1), 
                this.nextIconHandler(this.compareMonth(new Date("" + this.currentDate), this.max) > -1);
                break;

              case "Year":
                this.previousIconHandler(this.compareYear(new Date("" + this.currentDate), this.min) < 1), 
                this.nextIconHandler(this.compareYear(new Date("" + this.currentDate), this.max) > -1);
                break;

              case "Decade":
                this.previousIconHandler(this.compareDecade(new Date("" + this.currentDate), this.min) < 1), 
                this.nextIconHandler(this.compareDecade(new Date("" + this.currentDate), this.max) > -1);
            }
        }, CalendarBase.prototype.destroy = function() {
            "calendar" === this.getModuleName() ? removeClass([ this.element ], [ ROOT$14 ]) : this.calendarElement && removeClass([ this.element ], [ ROOT$14 ]), 
            "calendar" === this.getModuleName() && (EventHandler.remove(this.headerTitleElement, "click", this.navigateTitle), 
            this.todayElement && EventHandler.remove(this.todayElement, "click", this.todayButtonClick), 
            this.previousIconHandler(!0), this.nextIconHandler(!0), this.keyboardModule.destroy(), 
            this.element.removeAttribute("data-role")), this.element.innerHTML = "", _super.prototype.destroy.call(this);
        }, CalendarBase.prototype.title = function(e) {
            var currentView = this.getViewNumber(this.currentView());
            this.effect = "e-zoomin", this.switchView(++currentView, e);
        }, CalendarBase.prototype.getViewNumber = function(stringVal) {
            return "Month" === stringVal ? 0 : "Year" === stringVal ? 1 : 2;
        }, CalendarBase.prototype.navigateTitle = function(e) {
            e.preventDefault(), this.title(e), "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.previous = function() {
            this.effect = "";
            var currentView = this.getViewNumber(this.currentView());
            switch (this.currentView()) {
              case "Month":
                this.addMonths(this.currentDate, -1), this.switchView(currentView);
                break;

              case "Year":
                this.addYears(this.currentDate, -1), this.switchView(currentView);
                break;

              case "Decade":
                this.addYears(this.currentDate, -10), this.switchView(currentView);
            }
        }, CalendarBase.prototype.navigatePrevious = function(e) {
            e.preventDefault(), this.previous(), this.triggerNavigate(e), "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.next = function() {
            this.effect = "";
            var currentView = this.getViewNumber(this.currentView());
            switch (this.currentView()) {
              case "Month":
                this.addMonths(this.currentDate, 1), this.switchView(currentView);
                break;

              case "Year":
                this.addYears(this.currentDate, 1), this.switchView(currentView);
                break;

              case "Decade":
                this.addYears(this.currentDate, 10), this.switchView(currentView);
            }
        }, CalendarBase.prototype.navigateNext = function(eve) {
            eve.preventDefault(), this.next(), this.triggerNavigate(eve), "calendar" === this.getModuleName() && this.table.focus();
        }, CalendarBase.prototype.navigateTo = function(view, date) {
            +date >= +this.min && +date <= +this.max && (this.currentDate = date), +date <= +this.min && (this.currentDate = new Date("" + this.min)), 
            +date >= +this.max && (this.currentDate = new Date("" + this.max)), "daterangepicker" === this.getModuleName() && (this.currentDate = date), 
            this.getViewNumber(this.depth) >= this.getViewNumber(view) && (this.getViewNumber(this.depth) <= this.getViewNumber(this.start) || this.getViewNumber(this.depth) === this.getViewNumber(view)) && (view = this.depth), 
            this.switchView(this.getViewNumber(view));
        }, CalendarBase.prototype.currentView = function() {
            return this.contentElement.classList.contains("e-year") ? "Year" : this.contentElement.classList.contains("e-decade") ? "Decade" : "Month";
        }, CalendarBase.prototype.getDateVal = function(date, value) {
            return !isNullOrUndefined(value) && date.getDate() === value.getDate() && date.getMonth() === value.getMonth() && date.getFullYear() === value.getFullYear();
        }, CalendarBase.prototype.getCultureObjects = function(ld, c) {
            return getValue("main." + this.locale + ".dates.calendars.gregorian.days.format.short", ld);
        }, CalendarBase.prototype.getWeek = function(d) {
            var currentDate = new Date("" + d).valueOf(), date = new Date(d.getFullYear(), 0, 1).valueOf(), a = currentDate - date;
            return Math.ceil((a / 864e5 + new Date(date).getDay() + 1) / 7);
        }, CalendarBase.prototype.setStartDate = function(date, time) {
            var tzOffset = date.getTimezoneOffset(), d = new Date(date.getTime() + time), tzOffsetDiff = d.getTimezoneOffset() - tzOffset;
            date.setTime(d.getTime() + 6e4 * tzOffsetDiff);
        }, CalendarBase.prototype.addMonths = function(date, i) {
            var day = date.getDate();
            date.setDate(1), date.setMonth(date.getMonth() + i), date.setDate(Math.min(day, this.getMaxDays(date)));
        }, CalendarBase.prototype.addYears = function(date, i) {
            var day = date.getDate();
            date.setDate(1), date.setFullYear(date.getFullYear() + i), date.setDate(Math.min(day, this.getMaxDays(date)));
        }, CalendarBase.prototype.getIdValue = function(e, element) {
            var eve;
            eve = e ? e.currentTarget : element;
            var dateFormatOptions = {
                type: "dateTime",
                skeleton: "full"
            }, dateString = this.globalize.formatDate(new Date(parseInt("" + eve.getAttribute("id"), 0)), dateFormatOptions), date = this.globalize.parseDate(dateString, dateFormatOptions), value = date.valueOf() - date.valueOf() % 1e3;
            return new Date(value);
        }, CalendarBase.prototype.selectDate = function(e, date, node, multiSelection, values) {
            var element = node || e.currentTarget;
            if ("Decade" === this.currentView()) this.setDateDecade(this.currentDate, date.getFullYear()); else if ("Year" === this.currentView()) this.setDateYear(this.currentDate, date); else {
                if (multiSelection && !this.checkPresentDate(date, values)) {
                    var copyValues = this.copyValues(values);
                    !isNullOrUndefined(values) && copyValues.length > 0 ? (copyValues.push(new Date("" + date)), 
                    this.setProperties({
                        values: copyValues
                    }, !0), this.setProperties({
                        value: values[values.length - 1]
                    }, !0)) : this.setProperties({
                        values: [ new Date("" + date) ]
                    }, !0);
                } else this.setProperties({
                    value: new Date("" + date)
                }, !0);
                this.currentDate = new Date("" + date);
            }
            var tableBodyElement = closest(element, "." + ROOT$14);
            if (isNullOrUndefined(tableBodyElement) && (tableBodyElement = this.tableBodyElement), 
            multiSelection || isNullOrUndefined(tableBodyElement.querySelector(".e-selected")) || removeClass([ tableBodyElement.querySelector(".e-selected") ], SELECTED$6), 
            multiSelection || isNullOrUndefined(tableBodyElement.querySelector(".e-focused-date")) || removeClass([ tableBodyElement.querySelector(".e-focused-date") ], FOCUSEDDATE$1), 
            multiSelection) {
                copyValues = this.copyValues(values);
                for (var collection = Array.prototype.slice.call(this.tableBodyElement.querySelectorAll("td")), index = 0; index < collection.length; index++) {
                    var tempElement = tableBodyElement.querySelectorAll("td.e-focused-date")[0], selectedElement = tableBodyElement.querySelectorAll("td.e-selected")[0];
                    collection[index] === tempElement && removeClass([ collection[index] ], FOCUSEDDATE$1), 
                    collection[index] !== selectedElement || this.checkPresentDate(new Date(parseInt(selectedElement.getAttribute("id").split("_")[0], 10)), values) || removeClass([ collection[index] ], SELECTED$6);
                }
                if (element.classList.contains(SELECTED$6)) {
                    removeClass([ element ], SELECTED$6);
                    for (var i = 0; i < copyValues.length; i++) {
                        if (this.globalize.formatDate(date, {
                            type: "date",
                            skeleton: "short"
                        }) === this.globalize.formatDate(copyValues[i], {
                            type: "date",
                            skeleton: "short"
                        })) {
                            index = copyValues.indexOf(copyValues[i]);
                            copyValues.splice(index, 1), addClass([ element ], FOCUSEDDATE$1);
                        }
                    }
                    this.setProperties({
                        values: copyValues
                    }, !0);
                } else addClass([ element ], SELECTED$6);
            } else addClass([ element ], SELECTED$6);
        }, CalendarBase.prototype.checkPresentDate = function(dates, values) {
            var previousValue = !1;
            if (!isNullOrUndefined(values)) for (var checkPrevious = 0; checkPrevious < values.length; checkPrevious++) {
                this.globalize.formatDate(dates, {
                    type: "date",
                    skeleton: "short"
                }) === this.globalize.formatDate(values[checkPrevious], {
                    type: "date",
                    skeleton: "short"
                }) && (previousValue = !0);
            }
            return previousValue;
        }, CalendarBase.prototype.setAriaActiveDescendant = function() {
            attributes(this.table, {
                "aria-activedescendant": "" + this.setActiveDescendant()
            });
        }, CalendarBase.prototype.previousIconHandler = function(disabled) {
            disabled ? (EventHandler.remove(this.previousIcon, "click", this.navigatePreviousHandler), 
            addClass([ this.previousIcon ], "e-disabled"), addClass([ this.previousIcon ], "e-overlay"), 
            this.previousIcon.setAttribute("aria-disabled", "true")) : (EventHandler.add(this.previousIcon, "click", this.navigatePreviousHandler), 
            removeClass([ this.previousIcon ], "e-disabled"), removeClass([ this.previousIcon ], "e-overlay"), 
            this.previousIcon.setAttribute("aria-disabled", "false"));
        }, CalendarBase.prototype.renderDayCellEvent = function(args) {
            extend(this.renderDayCellArgs, {
                name: "renderDayCell"
            }), this.trigger("renderDayCell", args);
        }, CalendarBase.prototype.navigatedEvent = function(eve) {
            extend(this.navigatedArgs, {
                name: "navigated",
                event: eve
            }), this.trigger("navigated", this.navigatedArgs);
        }, CalendarBase.prototype.triggerNavigate = function(event) {
            this.navigatedArgs = {
                view: this.currentView(),
                date: this.currentDate
            }, this.navigatedEvent(event);
        }, CalendarBase.prototype.nextIconHandler = function(disabled) {
            disabled ? (EventHandler.remove(this.nextIcon, "click", this.navigateNextHandler), 
            addClass([ this.nextIcon ], "e-disabled"), addClass([ this.nextIcon ], "e-overlay"), 
            this.nextIcon.setAttribute("aria-disabled", "true")) : (EventHandler.add(this.nextIcon, "click", this.navigateNextHandler), 
            removeClass([ this.nextIcon ], "e-disabled"), removeClass([ this.nextIcon ], "e-overlay"), 
            this.nextIcon.setAttribute("aria-disabled", "false"));
        }, CalendarBase.prototype.compare = function(startDate, endDate, modifier) {
            var end, result, start = endDate.getFullYear();
            return end = start, result = 0, modifier && (end = (start -= start % modifier) - start % modifier + modifier - 1), 
            startDate.getFullYear() > end ? result = 1 : startDate.getFullYear() < start && (result = -1), 
            result;
        }, CalendarBase.prototype.isMinMaxRange = function(date) {
            return +date >= +this.min && +date <= +this.max;
        }, CalendarBase.prototype.isMonthYearRange = function(date) {
            return date.getMonth() >= this.min.getMonth() && date.getFullYear() >= this.min.getFullYear() && date.getMonth() <= this.max.getMonth() && date.getFullYear() <= this.max.getFullYear();
        }, CalendarBase.prototype.compareYear = function(start, end) {
            return this.compare(start, end, 0);
        }, CalendarBase.prototype.compareDecade = function(start, end) {
            return this.compare(start, end, 10);
        }, CalendarBase.prototype.shiftArray = function(array, i) {
            return array.slice(i).concat(array.slice(0, i));
        }, CalendarBase.prototype.addDay = function(date, i, e, max, min) {
            var column = i, value = new Date(+date);
            if (!isNullOrUndefined(this.tableBodyElement) && !isNullOrUndefined(e)) {
                for (;this.findNextTD(new Date(+date), column, max, min); ) column += i;
                var rangeValue = new Date(value.setDate(value.getDate() + column));
                column = +rangeValue > +max || +rangeValue < +min ? column === i ? i - i : i : column;
            }
            date.setDate(date.getDate() + column);
        }, CalendarBase.prototype.findNextTD = function(date, column, max, min) {
            var value = new Date(date.setDate(date.getDate() + column)), collection = [], isDisabled = !1;
            if ((!isNullOrUndefined(value) && value.getMonth()) === (!isNullOrUndefined(this.currentDate) && this.currentDate.getMonth())) {
                collection = this.renderDays(value, null).filter(function(element) {
                    return element.classList.contains("e-disabled");
                });
            } else collection = this.tableBodyElement.querySelectorAll("td.e-disabled");
            if (+value <= +max && +value >= +min && collection.length) for (var i = 0; i < collection.length && !(isDisabled = +value == +new Date(parseInt(collection[i].id, 0))); i++) ;
            return isDisabled;
        }, CalendarBase.prototype.getMaxDays = function(d) {
            var date, month, tmpDate = new Date("" + d);
            for (date = 28, month = tmpDate.getMonth(); tmpDate.getMonth() === month; ) ++date, 
            tmpDate.setDate(date);
            return date - 1;
        }, CalendarBase.prototype.setDateDecade = function(date, year) {
            date.setFullYear(year), this.setProperties({
                value: new Date("" + date)
            }, !0);
        }, CalendarBase.prototype.setDateYear = function(date, value) {
            date.setFullYear(value.getFullYear(), value.getMonth(), date.getDate()), value.getMonth() !== date.getMonth() && date.setDate(0), 
            this.setProperties({
                value: new Date("" + date)
            }, !0), this.currentDate = new Date("" + value);
        }, CalendarBase.prototype.compareMonth = function(start, end) {
            return start.getFullYear() > end.getFullYear() ? 1 : start.getFullYear() < end.getFullYear() ? -1 : start.getMonth() === end.getMonth() ? 0 : start.getMonth() > end.getMonth() ? 1 : -1;
        }, __decorate$53([ Property(new Date(1900, 0, 1)) ], CalendarBase.prototype, "min", void 0), 
        __decorate$53([ Property(new Date(2099, 11, 31)) ], CalendarBase.prototype, "max", void 0), 
        __decorate$53([ Property(null) ], CalendarBase.prototype, "firstDayOfWeek", void 0), 
        __decorate$53([ Property("Month") ], CalendarBase.prototype, "start", void 0), __decorate$53([ Property("Month") ], CalendarBase.prototype, "depth", void 0), 
        __decorate$53([ Property(!1) ], CalendarBase.prototype, "weekNumber", void 0), __decorate$53([ Property(!0) ], CalendarBase.prototype, "showTodayButton", void 0), 
        __decorate$53([ Property(!1) ], CalendarBase.prototype, "enableRtl", void 0), __decorate$53([ Property(!1) ], CalendarBase.prototype, "enablePersistence", void 0), 
        __decorate$53([ Event() ], CalendarBase.prototype, "created", void 0), __decorate$53([ Event() ], CalendarBase.prototype, "destroyed", void 0), 
        __decorate$53([ Event() ], CalendarBase.prototype, "navigated", void 0), __decorate$53([ Event() ], CalendarBase.prototype, "renderDayCell", void 0), 
        CalendarBase = __decorate$53([ NotifyPropertyChanges ], CalendarBase);
    }(Component)), __extends$107 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$52 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, DatePicker$1 = function(_super) {
        function DatePicker(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.previousElementValue = "", _this.isDateIconClicked = !1, _this.keyConfigs = {
                altUpArrow: "alt+uparrow",
                altDownArrow: "alt+downarrow",
                escape: "escape",
                enter: "enter",
                controlUp: "ctrl+38",
                controlDown: "ctrl+40",
                moveDown: "downarrow",
                moveUp: "uparrow",
                moveLeft: "leftarrow",
                moveRight: "rightarrow",
                select: "enter",
                home: "home",
                end: "end",
                pageUp: "pageup",
                pageDown: "pagedown",
                shiftPageUp: "shift+pageup",
                shiftPageDown: "shift+pagedown",
                controlHome: "ctrl+home",
                controlEnd: "ctrl+end",
                tab: "tab"
            }, _this.calendarKeyConfigs = {
                escape: "escape",
                enter: "enter",
                tab: "tab"
            }, _this;
        }
        return __extends$107(DatePicker, _super), DatePicker.prototype.render = function() {
            this.initialize(), this.bindEvents();
        }, DatePicker.prototype.setAllowEdit = function() {
            this.allowEdit ? this.readonly || this.inputElement.removeAttribute("readonly") : attributes(this.inputElement, {
                readonly: ""
            });
        }, DatePicker.prototype.initialize = function() {
            this.createInput(), this.setAllowEdit(), this.updateInput(), this.previousElementValue = this.inputElement.value, 
            this.previousDate = new Date(+this.value);
        }, DatePicker.prototype.createInput = function() {
            var ariaAttrs = {
                "aria-live": "assertive",
                "aria-atomic": "true",
                "aria-haspopup": "true",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_options",
                "aria-expanded": "false",
                role: "combobox",
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false"
            };
            if ("datepicker" === this.getModuleName()) {
                this.globalize = new Internationalization(this.locale), this.l10n = new L10n("datepicker", {
                    placeholder: null
                }, this.locale), this.setProperties({
                    placeholder: this.placeholder || this.l10n.getConstant("placeholder")
                }, !0);
            }
            this.inputWrapper = Input.createInput({
                element: this.inputElement,
                floatLabelType: this.floatLabelType,
                properties: {
                    readonly: this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton
                },
                buttons: [ "e-input-group-icon e-date-icon e-icons" ]
            }, this.createElement), this.setWidth(this.width), "" !== this.inputElement.name ? this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute("name")) : this.inputElement.setAttribute("name", "" + this.element.id), 
            attributes(this.inputElement, ariaAttrs), this.enabled ? this.inputElement.setAttribute("aria-disabled", "false") : this.inputElement.setAttribute("aria-disabled", "true"), 
            Input.addAttributes({
                "aria-label": "select"
            }, this.inputWrapper.buttons[0]), addClass([ this.inputWrapper.container ], "e-date-wrapper");
        }, DatePicker.prototype.updateInput = function() {
            if (this.value && !this.isCalendar() && this.disabledDates(), +new Date("" + this.value)) {
                if ("string" == typeof this.value) {
                    this.value = this.checkDateValue(new Date("" + this.value));
                    var dateOptions = void 0;
                    dateOptions = "datetimepicker" === this.getModuleName() ? {
                        format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                        type: "dateTime",
                        skeleton: "yMd"
                    } : {
                        format: this.format,
                        type: "dateTime",
                        skeleton: "yMd"
                    };
                    var dateString = this.globalize.formatDate(this.value, dateOptions);
                    this.setProperties({
                        value: this.globalize.parseDate(dateString, dateOptions)
                    }, !0);
                }
            } else this.setProperties({
                value: null
            }, !0);
            if (this.strictMode && (_super.prototype.validateDate.call(this), this.minMaxUpdates(), 
            _super.prototype.minMaxUpdate.call(this)), !isNullOrUndefined(this.value)) {
                var dateValue = this.value, tempFormat = (dateString = void 0, isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format);
                if (dateString = "datetimepicker" === this.getModuleName() ? this.globalize.formatDate(this.value, {
                    format: tempFormat,
                    type: "dateTime",
                    skeleton: "yMd"
                }) : this.globalize.formatDate(this.value, {
                    format: this.format,
                    type: "dateTime",
                    skeleton: "yMd"
                }), +dateValue <= +this.max && +dateValue >= +this.min) Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton); else {
                    var value = +dateValue >= +this.max || !+this.value || !+this.value || +dateValue <= +this.min;
                    !this.strictMode && value && Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
                }
            }
            isNullOrUndefined(this.value) && this.strictMode && Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            this.changedArgs = {
                value: this.value
            }, this.errorClass();
        }, DatePicker.prototype.minMaxUpdates = function() {
            !isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode ? (this.setProperties({
                value: this.min
            }, !0), this.changedArgs = {
                value: this.value
            }) : !isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode && (this.setProperties({
                value: this.max
            }, !0), this.changedArgs = {
                value: this.value
            });
        }, DatePicker.prototype.bindEvents = function() {
            this.enabled ? (EventHandler.add(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateIconHandler, this), 
            EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this), EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this), 
            EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this), this.showClearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this), 
            this.formElement && EventHandler.add(this.formElement, "reset", this.resetFormHandler, this)) : (EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateIconHandler), 
            EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler), EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler), 
            EventHandler.remove(this.inputElement, "change", this.inputChangeHandler), this.showClearButton && EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler), 
            this.formElement && EventHandler.remove(this.formElement, "reset", this.resetFormHandler)), 
            this.keyboardModules = new KeyboardEvents(this.inputElement, {
                eventName: "keydown",
                keyAction: this.inputKeyActionHandle.bind(this),
                keyConfigs: this.keyConfigs
            });
        }, DatePicker.prototype.resetFormHandler = function() {
            this.inputElement.getAttribute("value") ? this.value = this.checkDateValue(new Date("" + this.element.getAttribute("value"))) : (this.value = null, 
            this.inputElement && (Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            attributes(this.inputElement, {
                "aria-invalid": "false"
            }), removeClass([ this.inputWrapper.container ], "e-error")));
        }, DatePicker.prototype.inputChangeHandler = function(e) {
            e.stopPropagation();
        }, DatePicker.prototype.bindClearEvent = function() {
            this.showClearButton && this.inputWrapper.clearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
        }, DatePicker.prototype.resetHandler = function(e) {
            e.preventDefault(), this.clear(e);
        }, DatePicker.prototype.clear = function(event) {
            this.setProperties({
                value: null
            }, !0), Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
            this.updateInput(), this.changeEvent(event);
        }, DatePicker.prototype.dateIconHandler = function(e) {
            Browser.isDevice && this.element.setAttribute("readonly", "readonly"), e.preventDefault(), 
            this.readonly || (this.isCalendar() ? this.hide(e) : (this.isDateIconClicked = !0, 
            this.show(null, e), "datetimepicker" === this.getModuleName() && this.inputElement.focus(), 
            this.inputElement.focus(), addClass([ this.inputWrapper.container ], [ "e-input-focus" ]), 
            addClass(this.inputWrapper.buttons, "e-active")));
        }, DatePicker.prototype.CalendarKeyActionHandle = function(e) {
            switch (e.action) {
              case "escape":
                this.isCalendar() ? this.hide(e) : this.inputWrapper.container.children[this.index].blur();
                break;

              case "enter":
                this.isCalendar() ? +this.value == +this.currentDate || this.isCalendar() || this.inputWrapper.container.children[this.index].focus() : this.show(null, e), 
                "datetimepicker" === this.getModuleName() && this.inputElement.focus();
                break;

              case "tab":
                this.hide(e);
            }
        }, DatePicker.prototype.inputFocusHandler = function() {
            var focusArguments = {
                model: this
            };
            this.isDateIconClicked = !1, this.trigger("focus", focusArguments);
        }, DatePicker.prototype.inputBlurHandler = function(e) {
            if (this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), this.errorClass(), 
            this.isCalendar() && document.activeElement === this.inputElement && this.hide(e), 
            "datepicker" === this.getModuleName()) {
                var blurArguments = {
                    model: this
                };
                this.trigger("blur", blurArguments);
            }
            this.isCalendar() && (this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {
                eventName: "keydown",
                keyAction: this.CalendarKeyActionHandle.bind(this),
                keyConfigs: this.calendarKeyConfigs
            }));
        }, DatePicker.prototype.documentHandler = function(e) {
            "touchstart" !== e.type && e.preventDefault();
            var target = e.target;
            closest(target, ".e-datepicker.e-popup-wrapper") || closest(target, ".e-input-group") === this.inputWrapper.container || target.classList.contains("e-day") || this.hide(e);
        }, DatePicker.prototype.inputKeyActionHandle = function(e) {
            switch (e.action) {
              case "altUpArrow":
                this.hide(e), this.inputElement.focus();
                break;

              case "altDownArrow":
                this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), "datepicker" === this.getModuleName() && this.show(null, e);
                break;

              case "escape":
                this.hide(e);
                break;

              case "enter":
                this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), this.errorClass(), 
                this.isCalendar() || document.activeElement !== this.inputElement || this.hide(e), 
                this.isCalendar() && e.preventDefault();
                break;

              case "tab":
                this.strictModeUpdate(), this.updateInput(), this.changeTrigger(e), this.errorClass(), 
                this.hide(e);
                break;

              default:
                this.previousDate = !isNullOrUndefined(this.value) && new Date(+this.value) || null, 
                this.isCalendar() && _super.prototype.keyActionHandle.call(this, e);
            }
        }, DatePicker.prototype.strictModeUpdate = function() {
            var format;
            if (format = "datetimepicker" === this.getModuleName() ? isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format : isNullOrUndefined(this.format) ? this.format : this.format.replace("dd", "d"), 
            !isNullOrUndefined(format)) {
                format.split("M").length - 1 < 3 && (format = format.replace("MM", "M"));
            }
            var dateOptions;
            dateOptions = "datetimepicker" === this.getModuleName() ? {
                format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                type: "dateTime",
                skeleton: "yMd"
            } : {
                format: format,
                type: "dateTime",
                skeleton: "yMd"
            };
            var date;
            date = "datetimepicker" === this.getModuleName() ? this.checkDateValue(this.globalize.parseDate(this.inputElement.value, dateOptions)) ? this.globalize.parseDate(this.inputElement.value, dateOptions) : this.globalize.parseDate(this.inputElement.value, {
                type: "dateTime",
                skeleton: "yMd"
            }) : this.globalize.parseDate(this.inputElement.value, dateOptions), this.strictMode && date ? (Input.setValue(this.globalize.formatDate(date, dateOptions), this.inputElement, this.floatLabelType, this.showClearButton), 
            this.inputElement.value !== this.previousElementValue && this.setProperties({
                value: date
            }, !0)) : this.strictMode || this.inputElement.value !== this.previousElementValue && this.setProperties({
                value: date
            }, !0), this.strictMode && !date && "" === this.inputElement.value && this.setProperties({
                value: null
            }, !0), isNaN(+this.value) && this.setProperties({
                value: null
            }, !0), isNullOrUndefined(this.value) && (this.currentDate = new Date(new Date().setHours(0, 0, 0, 0)));
        }, DatePicker.prototype.createCalendar = function() {
            var _this = this;
            this.popupWrapper = this.createElement("div", {
                className: "e-datepicker e-popup-wrapper"
            }), isNullOrUndefined(this.cssClass) || this.popupWrapper.classList.add(this.cssClass), 
            Browser.isDevice && (this.modelHeader(), this.modal = this.createElement("div"), 
            this.modal.className = "e-datepicker e-date-modal", document.body.className += " e-date-overflow", 
            this.modal.style.display = "block", document.body.appendChild(this.modal)), this.calendarElement.querySelector("table tbody").className = "", 
            this.popupObj = new Popup(this.popupWrapper, {
                content: this.calendarElement,
                relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
                position: Browser.isDevice ? {
                    X: "center",
                    Y: "center"
                } : {
                    X: "left",
                    Y: "bottom"
                },
                offsetY: 4,
                targetType: "container",
                enableRtl: this.enableRtl,
                zIndex: this.zIndex,
                collision: Browser.isDevice ? {
                    X: "fit",
                    Y: "fit"
                } : {
                    X: "flip",
                    Y: "flip"
                },
                open: function() {
                    "datetimepicker" !== _this.getModuleName() && document.activeElement !== _this.inputElement && (_this.calendarElement.children[1].firstElementChild.focus(), 
                    _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {
                        eventName: "keydown",
                        keyAction: _this.CalendarKeyActionHandle.bind(_this),
                        keyConfigs: _this.calendarKeyConfigs
                    }), _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {
                        eventName: "keydown",
                        keyAction: _this.CalendarKeyActionHandle.bind(_this),
                        keyConfigs: _this.calendarKeyConfigs
                    }));
                },
                close: function() {
                    _this.isDateIconClicked && _this.inputWrapper.container.children[_this.index].focus(), 
                    _this.value && _this.disabledDates(), _this.popupObj && _this.popupObj.destroy(), 
                    detach(_this.popupWrapper), _this.popupObj = _this.popupWrapper = null, _this.setAriaAttributes();
                }
            }), this.popupObj.element.classList.add(this.cssClass), this.setAriaAttributes();
        }, DatePicker.prototype.modelHeader = function() {
            var modelHeader = this.createElement("div", {
                className: "e-model-header"
            }), yearHeading = this.createElement("h1", {
                className: "e-model-year"
            }), h2 = this.createElement("div"), daySpan = this.createElement("span", {
                className: "e-model-day"
            }), monthSpan = this.createElement("span", {
                className: "e-model-month"
            });
            yearHeading.textContent = "" + this.globalize.formatDate(this.value || new Date(), {
                format: "y",
                skeleton: "dateTime"
            }), daySpan.textContent = this.globalize.formatDate(this.value || new Date(), {
                format: "E",
                skeleton: "dateTime"
            }) + ", ", monthSpan.textContent = "" + this.globalize.formatDate(this.value || new Date(), {
                format: "MMM d",
                skeleton: "dateTime"
            }), modelHeader.appendChild(yearHeading), h2.appendChild(daySpan), h2.appendChild(monthSpan), 
            modelHeader.appendChild(h2), this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);
        }, DatePicker.prototype.changeTrigger = function(event) {
            this.inputElement.value !== this.previousElementValue && (this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf()) && (this.changedArgs.value = this.value, 
            this.changedArgs.event = event || null, this.changedArgs.element = this.element, 
            this.changedArgs.isInteracted = !isNullOrUndefined(event), this.trigger("change", this.changedArgs), 
            this.previousElementValue = this.inputElement.value, this.previousDate = new Date("" + this.value));
        }, DatePicker.prototype.navigatedEvent = function() {
            this.trigger("navigated", this.navigatedArgs);
        }, DatePicker.prototype.changeEvent = function(event) {
            (this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf()) && (this.selectCalendar(event), 
            this.changedArgs.event = event || null, this.changedArgs.element = this.element, 
            this.changedArgs.isInteracted = !isNullOrUndefined(event), this.trigger("change", this.changedArgs), 
            this.previousDate = this.value && new Date(+this.value), this.hide(event), this.previousElementValue = this.inputElement.value, 
            this.errorClass());
        }, DatePicker.prototype.selectCalendar = function(e) {
            var date, tempFormat;
            tempFormat = "datetimepicker" === this.getModuleName() && isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format, 
            this.value && (date = "datetimepicker" === this.getModuleName() ? this.globalize.formatDate(this.changedArgs.value, {
                format: tempFormat,
                type: "dateTime",
                skeleton: "yMd"
            }) : this.globalize.formatDate(this.changedArgs.value, {
                format: this.format,
                type: "dateTime",
                skeleton: "yMd"
            })), isNullOrUndefined(date) || Input.setValue(date, this.inputElement, this.floatLabelType, this.showClearButton);
        }, DatePicker.prototype.isCalendar = function() {
            return !(!this.popupWrapper || !this.popupWrapper.classList.contains("e-popup-wrapper"));
        }, DatePicker.prototype.setWidth = function(width) {
            this.inputWrapper.container.style.width = "number" == typeof width ? formatUnit(this.width) : "string" == typeof width ? width.match(/px|%|em/) ? this.width : formatUnit(this.width) : "100%";
        }, DatePicker.prototype.show = function(type, e) {
            if (!(this.enabled && this.readonly || !this.enabled || this.popupObj)) {
                var prevent_1 = !0, outOfRange = void 0;
                if (isNullOrUndefined(this.value) || +this.value >= +this.min && +this.value <= +this.max ? outOfRange = this.value || null : (outOfRange = new Date("" + this.value), 
                this.setProperties({
                    value: null
                }, !0)), this.isCalendar() || (_super.prototype.render.call(this), this.setProperties({
                    value: outOfRange || null
                }, !0), this.previousDate = outOfRange, this.createCalendar()), this.preventArgs = {
                    preventDefault: function() {
                        prevent_1 = !1;
                    },
                    popup: this.popupObj,
                    event: e || null,
                    cancel: !1,
                    appendTo: document.body
                }, this.trigger("open", this.preventArgs), prevent_1 && !this.preventArgs.cancel) {
                    addClass(this.inputWrapper.buttons, "e-active"), this.preventArgs.appendTo.appendChild(this.popupWrapper), 
                    this.popupObj.refreshPosition(this.inputElement);
                    var openAnimation = {
                        name: "FadeIn",
                        duration: Browser.isDevice ? 0 : 300
                    };
                    1e3 === this.zIndex ? this.popupObj.show(new Animation(openAnimation), this.element) : this.popupObj.show(new Animation(openAnimation), null), 
                    this.setAriaAttributes();
                } else this.popupObj.destroy(), this.popupWrapper = this.popupObj = null;
                EventHandler.add(document, "mousedown touchstart", this.documentHandler, this);
            }
        }, DatePicker.prototype.hide = function(event) {
            if (!isNullOrUndefined(this.popupWrapper)) {
                var prevent_2 = !0;
                this.preventArgs = {
                    preventDefault: function() {
                        prevent_2 = !1;
                    },
                    popup: this.popupObj,
                    event: event || null,
                    cancel: !1
                }, removeClass(this.inputWrapper.buttons, "e-active"), removeClass([ document.body ], "e-date-overflow"), 
                this.isCalendar() && this.trigger("close", this.preventArgs), this.isCalendar() && prevent_2 && !this.preventArgs.cancel && (this.popupObj.hide(), 
                this.keyboardModule.destroy(), removeClass(this.inputWrapper.buttons, "e-active")), 
                this.setAriaAttributes(), this.previousElementValue = this.inputElement.value, Browser.isDevice && this.modal && (this.modal.style.display = "none", 
                this.modal.outerHTML = "", this.modal = null), EventHandler.remove(document, "mousedown touchstart", this.documentHandler);
            }
            Browser.isDevice && this.element.removeAttribute("readonly");
        }, DatePicker.prototype.focusIn = function(triggerEvent) {
            if (document.activeElement !== this.inputElement && this.enabled) {
                this.inputElement.focus(), addClass([ this.inputWrapper.container ], [ "e-input-focus" ]);
                var focusArguments = {
                    model: this
                };
                this.trigger("focus", focusArguments);
            }
        }, DatePicker.prototype.focusOut = function() {
            if (document.activeElement === this.inputElement) {
                this.inputElement.blur(), removeClass([ this.inputWrapper.container ], [ "e-input-focus" ]);
                var blurArguments = {
                    model: this
                };
                this.trigger("blur", blurArguments);
            }
        }, DatePicker.prototype.currentView = function() {
            var currentView;
            return this.calendarElement && (currentView = _super.prototype.currentView.call(this)), 
            currentView;
        }, DatePicker.prototype.navigateTo = function(view, date) {
            this.calendarElement && _super.prototype.navigateTo.call(this, view, date);
        }, DatePicker.prototype.destroy = function() {
            _super.prototype.destroy.call(this), this.keyboardModules.destroy(), this.popupObj && this.popupObj.element.classList.contains("e-popup") && _super.prototype.destroy.call(this);
            var ariaAttrs = {
                "aria-live": "assertive",
                "aria-atomic": "true",
                "aria-disabled": "true",
                "aria-haspopup": "true",
                "aria-activedescendant": "null",
                "aria-owns": this.element.id + "_options",
                "aria-expanded": "false",
                role: "combobox",
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false"
            };
            this.inputElement && (Input.removeAttributes(ariaAttrs, this.inputElement), EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler), 
            EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler), this.ensureInputAttribute()), 
            this.isCalendar() && (this.popupWrapper && detach(this.popupWrapper), this.popupObj = this.popupWrapper = null, 
            this.keyboardModule.destroy()), null === this.ngTag && (this.inputElement && (this.inputWrapper.container.insertAdjacentElement("afterend", this.inputElement), 
            removeClass([ this.inputElement ], [ "e-input" ])), removeClass([ this.element ], [ "e-datepicker" ]), 
            detach(this.inputWrapper.container)), this.formElement && EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
        }, DatePicker.prototype.ensureInputAttribute = function() {
            for (var i = 0; i < this.inputElement.attributes.length; i++) {
                var prop = this.inputElement.attributes[i].name;
                isNullOrUndefined(this.inputEleCopy.getAttribute(prop)) && (("value" === prop.toLowerCase() || isNullOrUndefined(this.inputEleCopy.getAttribute("value"))) && (this.inputElement.value = ""), 
                this.inputElement.removeAttribute(prop));
            }
        }, DatePicker.prototype.preRender = function() {
            this.inputEleCopy = this.element.cloneNode(!0), this.inputElement = this.element, 
            this.formElement = closest(this.inputElement, "form"), this.index = this.showClearButton ? 2 : 1, 
            this.ngTag = null, "EJS-DATEPICKER" !== this.element.tagName && "EJS-DATETIMEPICKER" !== this.element.tagName || (this.ngTag = this.element.tagName, 
            this.inputElement = this.createElement("input"), this.element.appendChild(this.inputElement)), 
            this.element.getAttribute("id") ? null !== this.ngTag && (this.inputElement.id = this.element.getAttribute("id") + "_input") : "datetimepicker" === this.getModuleName() ? (this.element.id = getUniqueID("ej2-datetimepicker"), 
            null !== this.ngTag && attributes(this.inputElement, {
                id: this.element.id + "_input"
            })) : (this.element.id = getUniqueID("ej2-datepicker"), null !== this.ngTag && attributes(this.inputElement, {
                id: this.element.id + "_input"
            })), null !== this.ngTag && this.validationAttribute(this.element, this.inputElement), 
            this.checkHtmlAttributes(), _super.prototype.preRender.call(this);
        }, DatePicker.prototype.validationAttribute = function(target, inputElement) {
            var nameAttribute = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
            inputElement.setAttribute("name", nameAttribute), target.removeAttribute("name");
            for (var attribute = [ "required", "aria-required", "form" ], i = 0; i < attribute.length; i++) if (!isNullOrUndefined(target.getAttribute(attribute[i]))) {
                var attr = target.getAttribute(attribute[i]);
                inputElement.setAttribute(attribute[i], attr), target.removeAttribute(attribute[i]);
            }
        }, DatePicker.prototype.checkHtmlAttributes = function() {
            this.globalize = new Internationalization(this.locale);
            var options;
            options = "datetimepicker" === this.getModuleName() ? {
                format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                type: "dateTime",
                skeleton: "yMd"
            } : {
                format: this.format,
                type: "dateTime",
                skeleton: "yMd"
            };
            for (var _i = 0, attributes_1 = [ "value", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type" ]; _i < attributes_1.length; _i++) {
                var prop = attributes_1[_i];
                if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) switch (prop) {
                  case "disabled":
                    var enabled = "disabled" === this.inputElement.getAttribute(prop) || "" === this.inputElement.getAttribute(prop);
                    this.setProperties({
                        enabled: !enabled
                    }, !0);
                    break;

                  case "readonly":
                    var readonly = "readonly" === this.inputElement.getAttribute(prop) || "" === this.inputElement.getAttribute(prop);
                    this.setProperties({
                        readonly: readonly
                    }, !0);
                    break;

                  case "placeholder":
                    if (null === this.placeholder) {
                        this.inputElement.getAttribute(prop);
                        this.setProperties({
                            placeholder: this.inputElement.getAttribute(prop)
                        }, !0);
                    }
                    break;

                  case "style":
                    this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
                    break;

                  case "name":
                    this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
                    break;

                  case "value":
                    if (!this.value) {
                        var value = this.inputElement.getAttribute(prop);
                        this.setProperties(setValue(prop, this.globalize.parseDate(value, options), {}), !0);
                    }
                    break;

                  case "min":
                    +this.min == +new Date(1900, 0, 1) && this.setProperties(setValue(prop, this.globalize.parseDate(this.inputElement.getAttribute(prop)), {}), !0);
                    break;

                  case "max":
                    +this.max == +new Date(2099, 11, 31) && this.setProperties(setValue(prop, this.globalize.parseDate(this.inputElement.getAttribute(prop)), {}), !0);
                    break;

                  case "type":
                    "text" !== this.inputElement.getAttribute(prop) && this.inputElement.setAttribute("type", "text");
                }
            }
        }, DatePicker.prototype.getModuleName = function() {
            return "datepicker";
        }, DatePicker.prototype.disabledDates = function() {
            var valueCopy;
            valueCopy = this.checkDateValue(this.value) ? new Date(+this.value) : new Date("" + this.value);
            var previousValCopy = this.previousDate;
            this.minMaxUpdates(), _super.prototype.render.call(this), this.previousDate = previousValCopy;
            var dateIdString = '*[id^="/id"]'.replace("/id", "" + (valueCopy && +valueCopy));
            this.strictMode || ("string" == typeof this.value || "object" == typeof this.value && +this.value != +valueCopy) && this.setProperties({
                value: valueCopy
            }, !0), isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0]) || this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled") && (this.strictMode || (this.currentDate = new Date(new Date().setHours(0, 0, 0, 0))));
            var inputVal;
            inputVal = "datetimepicker" === this.getModuleName() ? this.globalize.formatDate(valueCopy, {
                format: isNullOrUndefined(this.format) ? this.dateTimeFormat : this.format,
                type: "dateTime",
                skeleton: "yMd"
            }) : this.globalize.formatDate(valueCopy, {
                format: this.format,
                type: "dateTime",
                skeleton: "yMd"
            }), Input.setValue(inputVal, this.inputElement, this.floatLabelType, this.showClearButton);
        }, DatePicker.prototype.setAriaAttributes = function() {
            this.isCalendar() ? (Input.addAttributes({
                "aria-expanded": "true"
            }, this.inputElement), attributes(this.inputElement, {
                "aria-activedescendant": "" + this.setActiveDescendant()
            })) : (Input.addAttributes({
                "aria-expanded": "false"
            }, this.inputElement), attributes(this.inputElement, {
                "aria-activedescendant": "null"
            }));
        }, DatePicker.prototype.errorClass = function() {
            var dateIdString = '*[id^="/id"]'.replace("/id", "" + +this.value), isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled");
            !isNullOrUndefined(this.value) && !(+new Date(+this.value).setMilliseconds(0) >= +this.min && +new Date(+this.value).setMilliseconds(0) <= +this.max) || !this.strictMode && "" !== this.inputElement.value && isNullOrUndefined(this.value) || isDisabledDate ? addClass([ this.inputWrapper.container ], "e-error") : removeClass([ this.inputWrapper.container ], "e-error");
        }, DatePicker.prototype.onPropertyChanged = function(newProp, oldProp) {
            this.format;
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "value":
                    "string" == typeof newProp.value && (newProp.value = this.checkDateValue(new Date("" + newProp.value)), 
                    this.setProperties({
                        value: newProp.value
                    }, !0)), this.previousElementValue = this.inputElement.value, isNullOrUndefined(this.value) && (Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
                    this.currentDate = new Date(new Date().setHours(0, 0, 0, 0))), this.updateInput(), 
                    this.changeTrigger(null);
                    break;

                  case "format":
                    this.updateInput();
                    break;

                  case "allowEdit":
                    this.setAllowEdit();
                    break;

                  case "placeholder":
                    Input.setPlaceholder(this.placeholder, this.inputElement);
                    break;

                  case "readonly":
                    Input.setReadonly(this.readonly, this.inputElement);
                    break;

                  case "enabled":
                    Input.setEnabled(this.enabled, this.inputElement), this.enabled ? this.inputElement.setAttribute("aria-disabled", "false") : this.inputElement.setAttribute("aria-disabled", "true"), 
                    this.bindEvents();
                    break;

                  case "locale":
                    this.globalize = new Internationalization(this.locale), this.l10n.setLocale(this.locale), 
                    this.setProperties({
                        placeholder: this.l10n.getConstant("placeholder")
                    }, !0), Input.setPlaceholder(this.placeholder, this.inputElement), this.updateInput();
                    break;

                  case "enableRtl":
                    Input.setEnableRtl(this.enableRtl, [ this.inputWrapper.container ]);
                    break;

                  case "zIndex":
                    this.setProperties({
                        zIndex: newProp.zIndex
                    }, !0);
                    break;

                  case "cssClass":
                    Input.setCssClass(newProp.cssClass, [ this.inputWrapper.container ]), this.popupWrapper && addClass([ this.popupWrapper ], [ newProp.cssClass ]);
                    break;

                  case "showClearButton":
                    Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper), 
                    this.bindClearEvent();
                    break;

                  case "strictMode":
                    this.updateInput();
                    break;

                  case "width":
                    this.setWidth(newProp.width);
                    break;

                  case "floatLabelType":
                    this.floatLabelType = newProp.floatLabelType, Input.removeFloating(this.inputWrapper), 
                    Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
                    break;

                  default:
                    this.calendarElement && _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
                }
                this.hide(null);
            }
        }, __decorate$52([ Property(null) ], DatePicker.prototype, "width", void 0), __decorate$52([ Property(null) ], DatePicker.prototype, "cssClass", void 0), 
        __decorate$52([ Property(!1) ], DatePicker.prototype, "strictMode", void 0), __decorate$52([ Property(null) ], DatePicker.prototype, "format", void 0), 
        __decorate$52([ Property(!0) ], DatePicker.prototype, "enabled", void 0), __decorate$52([ Property(!0) ], DatePicker.prototype, "showClearButton", void 0), 
        __decorate$52([ Property(!0) ], DatePicker.prototype, "allowEdit", void 0), __decorate$52([ Property(!1) ], DatePicker.prototype, "enableRtl", void 0), 
        __decorate$52([ Property(!1) ], DatePicker.prototype, "enablePersistence", void 0), 
        __decorate$52([ Property(1e3) ], DatePicker.prototype, "zIndex", void 0), __decorate$52([ Property(!1) ], DatePicker.prototype, "readonly", void 0), 
        __decorate$52([ Property(null) ], DatePicker.prototype, "placeholder", void 0), 
        __decorate$52([ Property("Never") ], DatePicker.prototype, "floatLabelType", void 0), 
        __decorate$52([ Event() ], DatePicker.prototype, "open", void 0), __decorate$52([ Event() ], DatePicker.prototype, "close", void 0), 
        __decorate$52([ Event() ], DatePicker.prototype, "blur", void 0), __decorate$52([ Event() ], DatePicker.prototype, "focus", void 0), 
        __decorate$52([ Event() ], DatePicker.prototype, "created", void 0), __decorate$52([ Event() ], DatePicker.prototype, "destroyed", void 0), 
        DatePicker = __decorate$52([ NotifyPropertyChanges ], DatePicker);
    }(Calendar$1), _datepicker = Object.freeze({
        DatePicker: DatePicker$1
    }), queryString$1 = "", prevString$1 = "", matches$2 = [], activeClass$1 = "e-active", __extends$111 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$56 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, FieldSettings$4 = function(_super) {
        function FieldSettings() {
            return null !== _super && _super.apply(this, arguments) || this;
        }
        return __extends$111(FieldSettings, _super), __decorate$56([ Property() ], FieldSettings.prototype, "text", void 0), 
        __decorate$56([ Property() ], FieldSettings.prototype, "value", void 0), __decorate$56([ Property() ], FieldSettings.prototype, "iconCss", void 0), 
        __decorate$56([ Property() ], FieldSettings.prototype, "groupBy", void 0), __decorate$56([ Property() ], FieldSettings.prototype, "htmlAttributes", void 0), 
        FieldSettings;
    }(ChildProperty), dropDownBaseClasses$1 = {
        root: "e-dropdownbase",
        rtl: "e-rtl",
        content: "e-content",
        selected: "e-active",
        hover: "e-hover",
        noData: "e-nodata",
        fixedHead: "e-fixed-head",
        focus: "e-item-focus",
        li: cssClass.li,
        group: cssClass.group,
        disabled: cssClass.disabled,
        grouping: "e-dd-group"
    }, DropDownBase$1 = function(_super) {
        function DropDownBase(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$111(DropDownBase, _super), DropDownBase.prototype.getPropObject = function(prop, newProp, oldProp) {
            var newProperty = new Object(), oldProperty = new Object(), propName = new Function("prop", "return prop");
            newProperty[propName(prop)] = newProp[propName(prop)], oldProperty[propName(prop)] = oldProp[propName(prop)];
            var data = new Object();
            return data.newProperty = newProperty, data.oldProperty = oldProperty, data;
        }, DropDownBase.prototype.getValueByText = function(text, ignoreCase, ignoreAccent) {
            var value = null;
            return isNullOrUndefined(this.listData) || (value = ignoreCase ? this.checkValueCase(text, !0, ignoreAccent) : this.checkValueCase(text, !1, ignoreAccent)), 
            value;
        }, DropDownBase.prototype.checkValueCase = function(text, ignoreCase, ignoreAccent, isTextByValue) {
            var _this = this, value = null;
            isTextByValue && (value = text);
            var dataSource = this.listData, fields = this.fields, type = this.typeOfData(dataSource).typeof;
            if ("string" === type || "number" === type || "boolean" === type) for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
                var item = dataSource_1[_i];
                isNullOrUndefined(item) || (ignoreAccent ? value = this.checkingAccent(String(item), text, ignoreCase) : ignoreCase ? this.checkIgnoreCase(String(item), text) && (value = this.getItemValue(String(item), text, ignoreCase)) : this.checkNonIgnoreCase(String(item), text) && (value = this.getItemValue(String(item), text, ignoreCase, isTextByValue)));
            } else ignoreCase ? dataSource.filter(function(item) {
                _this.checkIgnoreCase(getValue(fields.text, item).toString(), text) && (value = getValue(fields.value, item));
            }) : isTextByValue ? dataSource.filter(function(item) {
                var itemValue = getValue(fields.value, item);
                isNullOrUndefined(itemValue) || itemValue.toString() !== value.toString() || (value = getValue(fields.text, item));
            }) : dataSource.filter(function(item) {
                _this.checkNonIgnoreCase(getValue(fields.text, item), text) && (value = getValue(fields.value, item));
            });
            return value;
        }, DropDownBase.prototype.checkingAccent = function(item, text, ignoreCase) {
            var dataItem = DataUtil.ignoreDiacritics(String(item)), textItem = DataUtil.ignoreDiacritics(text.toString()), value = null;
            return ignoreCase ? this.checkIgnoreCase(dataItem, textItem) && (value = this.getItemValue(String(item), text, ignoreCase)) : this.checkNonIgnoreCase(String(item), text) && (value = this.getItemValue(String(item), text, ignoreCase)), 
            value;
        }, DropDownBase.prototype.checkIgnoreCase = function(item, text) {
            return String(item).toLowerCase() === text.toString().toLowerCase();
        }, DropDownBase.prototype.checkNonIgnoreCase = function(item, text) {
            return String(item) === text.toString();
        }, DropDownBase.prototype.getItemValue = function(dataItem, typedText, ignoreCase, isTextByValue) {
            var dataSource = this.listData, type = this.typeOfData(dataSource).typeof;
            return isTextByValue ? dataItem.toString() : ignoreCase ? "string" === type ? String(dataItem) : this.getFormattedValue(String(dataItem)) : "string" === type ? typedText : this.getFormattedValue(typedText);
        }, DropDownBase.prototype.l10nUpdate = function(actionFailure) {
            if ("No Records Found" !== this.noRecordsTemplate || "The Request Failed" !== this.actionFailureTemplate) {
                var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;
                this.list.innerHTML = "";
                for (var _i = 0, _a = compile$$1(template)({}); _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.list.appendChild(item);
                }
            } else {
                this.l10n = new L10n("dropdowns", {
                    noRecordsTemplate: "No Records Found",
                    actionFailureTemplate: "The Request Failed"
                }, this.locale), this.list.innerHTML = actionFailure ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
            }
        }, DropDownBase.prototype.getTextByValue = function(value) {
            return this.checkValueCase(value, !1, !1, !0);
        }, DropDownBase.prototype.getFormattedValue = function(value) {
            if (this.listData && this.listData.length) {
                var item = this.typeOfData(this.listData);
                if ("number" == typeof getValue(this.fields.value ? this.fields.value : "value", item.item) || "number" === item.typeof) return parseInt(value, 10);
                if ("boolean" == typeof getValue(this.fields.value ? this.fields.value : "value", item.item) || "boolean" === item.typeof) return "true" === value;
            }
            return value;
        }, DropDownBase.prototype.setEnableRtl = function() {
            this.list && this.enableRtlElements.push(this.list), this.enableRtl ? addClass(this.enableRtlElements, dropDownBaseClasses$1.rtl) : removeClass(this.enableRtlElements, dropDownBaseClasses$1.rtl);
        }, DropDownBase.prototype.initialize = function() {
            if (this.bindEvent = !0, "UL" === this.element.tagName) {
                var jsonElement = ListBase.createJsonFromElement(this.element);
                this.setProperties({
                    fields: {
                        text: "text",
                        value: "text"
                    }
                }, !0), this.resetList(jsonElement, this.fields);
            } else if ("SELECT" === this.element.tagName) {
                (this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource)) || this.renderItemsBySelect();
            } else this.setListData(this.dataSource, this.fields, this.query);
        }, DropDownBase.prototype.getPersistData = function() {
            return this.addOnPersist([]);
        }, DropDownBase.prototype.setEnabled = function() {
            this.enabled ? this.element.setAttribute("aria-disabled", "false") : this.element.setAttribute("aria-disabled", "true");
        }, DropDownBase.prototype.renderItemsBySelect = function() {
            var element = this.element, fields = {
                value: "value",
                text: "text"
            }, jsonElement = [], group = element.querySelectorAll("select>optgroup"), option = element.querySelectorAll("select>option");
            if (this.getJSONfromOption(jsonElement, option, fields), group.length) {
                for (var i = 0; i < group.length; i++) {
                    var item = group[i], optionGroup = {};
                    optionGroup[fields.text] = item.label, optionGroup.isHeader = !0;
                    var child = item.querySelectorAll("option");
                    jsonElement.push(optionGroup), this.getJSONfromOption(jsonElement, child, fields);
                }
                element.querySelectorAll("select>option");
            }
            this.fields.text = fields.text, this.fields.value = fields.value, this.resetList(jsonElement, fields);
        }, DropDownBase.prototype.getJSONfromOption = function(items, options, fields) {
            for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
                var option = options_1[_i], json = {};
                json[fields.text] = option.innerText, json[fields.value] = option.getAttribute(fields.value) ? option.getAttribute(fields.value) : option.innerText, 
                items.push(json);
            }
        }, DropDownBase.prototype.preRender = function() {
            this.scrollTimer = -1, this.enableRtlElements = [], this.isRequested = !1, this.isDataFetched = !1;
        }, DropDownBase.prototype.setListData = function(dataSource, fields, query) {
            var _this = this;
            fields = fields || this.fields;
            var ulElement;
            this.isActive = !0;
            var eventArgs = {
                cancel: !1,
                data: dataSource,
                query: query
            };
            if (this.trigger("actionBegin", eventArgs), !eventArgs.cancel) if (this.showSpinner(), 
            dataSource instanceof DataManager) {
                if (this.isRequested = !0, this.isDataFetched) return void this.emptyDataRequest(fields);
                eventArgs.data.executeQuery(this.getQuery(eventArgs.query)).then(function(e) {
                    if (_this.trigger("actionComplete", e), !e.cancel) {
                        var listItems = e.result;
                        0 === listItems.length && (_this.isDataFetched = !0), ulElement = _this.renderItems(listItems, fields), 
                        _this.onActionComplete(ulElement, listItems, e), _this.isRequested = !1, _this.hideSpinner(), 
                        _this.trigger("dataBound", {
                            items: listItems,
                            e: e
                        });
                    }
                }).catch(function(e) {
                    _this.isRequested = !1, _this.onActionFailure(e), _this.hideSpinner();
                });
            } else {
                var dataManager = new DataManager(eventArgs.data), localDataArgs = {
                    cancel: !1,
                    result: this.getQuery(eventArgs.query).executeLocal(dataManager)
                };
                if (this.trigger("actionComplete", localDataArgs), localDataArgs.cancel) return;
                ulElement = this.renderItems(localDataArgs.result, fields), this.onActionComplete(ulElement, localDataArgs.result), 
                this.hideSpinner(), this.trigger("dataBound", {
                    items: localDataArgs.result
                });
            }
        }, DropDownBase.prototype.emptyDataRequest = function(fields) {
            var listItems = [];
            this.onActionComplete(this.renderItems(listItems, fields), listItems), this.isRequested = !1, 
            this.hideSpinner();
        }, DropDownBase.prototype.showSpinner = function() {}, DropDownBase.prototype.hideSpinner = function() {}, 
        DropDownBase.prototype.onActionFailure = function(e) {
            this.liCollections = [], this.trigger("actionFailure", e), this.l10nUpdate(!0), 
            addClass([ this.list ], dropDownBaseClasses$1.noData);
        }, DropDownBase.prototype.onActionComplete = function(ulElement, list, e) {
            this.listData = list, this.list.innerHTML = "", this.list.appendChild(ulElement), 
            this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses$1.li), 
            this.ulElement = this.list.querySelector("ul"), this.postRender(this.list, list, this.bindEvent);
        }, DropDownBase.prototype.postRender = function(listElement, list, bindEvent) {
            var focusItem = listElement.querySelector("." + dropDownBaseClasses$1.li), selectedItem = listElement.querySelector("." + dropDownBaseClasses$1.selected);
            focusItem && !selectedItem && addClass([ focusItem ], dropDownBaseClasses$1.focus), 
            list.length <= 0 ? (this.l10nUpdate(), addClass([ listElement ], dropDownBaseClasses$1.noData)) : listElement.classList.remove(dropDownBaseClasses$1.noData), 
            this.groupTemplate && this.renderGroupTemplate(listElement);
        }, DropDownBase.prototype.getQuery = function(query) {
            return query || (this.query ? this.query : new Query());
        }, DropDownBase.prototype.renderGroupTemplate = function(listEle) {
            if (null !== this.fields.groupBy && this.dataSource || this.element.querySelector("." + dropDownBaseClasses$1.group)) {
                var dataSource = this.dataSource, headerItems = listEle.querySelectorAll("." + dropDownBaseClasses$1.group);
                ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems);
            }
        }, DropDownBase.prototype.createListItems = function(dataSource, fields) {
            dataSource && fields.groupBy || this.element.querySelector("optgroup") ? (fields.groupBy && ("None" !== this.sortOrder && (dataSource = this.getSortedDataSource(dataSource)), 
            dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder)), 
            addClass([ this.list ], dropDownBaseClasses$1.grouping)) : dataSource = this.getSortedDataSource(dataSource);
            var options = this.listOption(dataSource, fields);
            return ListBase.createList(this.createElement, dataSource, options, !0);
        }, DropDownBase.prototype.listOption = function(dataSource, fields) {
            var iconCss = !isNullOrUndefined(fields.iconCss), fieldValues = isNullOrUndefined(fields.properties) ? fields : fields.properties;
            return extend({}, null !== fields.text || null !== fields.value ? {
                fields: fieldValues,
                showIcon: iconCss,
                ariaAttributes: {
                    groupItemRole: "presentation"
                }
            } : {
                fields: {
                    value: "text"
                }
            }, fields, !0);
        }, DropDownBase.prototype.setFloatingHeader = function(e) {
            isNullOrUndefined(this.fixedHeaderElement) && (this.fixedHeaderElement = this.createElement("div", {
                className: dropDownBaseClasses$1.fixedHead
            }), this.list.querySelector("li").classList.contains(dropDownBaseClasses$1.group) || (this.fixedHeaderElement.style.display = "none"), 
            prepend([ this.fixedHeaderElement ], this.list), this.setFixedHeader()), isNullOrUndefined(this.fixedHeaderElement) || "0" !== this.fixedHeaderElement.style.zIndex || this.setFixedHeader(), 
            this.scrollStop(e);
        }, DropDownBase.prototype.scrollStop = function(e) {
            for (var target = e.target, liHeight = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10), topIndex = Math.round(target.scrollTop / liHeight), liCollections = this.ulElement.querySelectorAll("li"), i = topIndex; i > -1; i--) {
                if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses$1.group)) {
                    var currentLi = liCollections[i];
                    this.fixedHeaderElement.innerHTML = currentLi.innerHTML, this.fixedHeaderElement.style.top = e.target.scrollTop + "px", 
                    this.fixedHeaderElement.style.display = "block";
                    break;
                }
                this.fixedHeaderElement.style.display = "none", this.fixedHeaderElement.style.top = "none";
            }
        }, DropDownBase.prototype.renderItems = function(listData, fields) {
            var ulElement;
            if (this.itemTemplate && listData) {
                var dataSource = listData;
                dataSource && fields.groupBy ? ("None" !== this.sortOrder && (dataSource = this.getSortedDataSource(dataSource)), 
                dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder)) : dataSource = this.getSortedDataSource(dataSource), 
                ulElement = this.templateListItem(dataSource, fields);
            } else ulElement = this.createListItems(listData, fields);
            return ulElement;
        }, DropDownBase.prototype.templateListItem = function(dataSource, fields) {
            var option = this.listOption(dataSource, fields);
            return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option);
        }, DropDownBase.prototype.typeOfData = function(items) {
            for (var item = {
                typeof: null,
                item: null
            }, i = 0; !isNullOrUndefined(items) && i < items.length; i++) if (!isNullOrUndefined(items[i])) return item = {
                typeof: typeof items[i],
                item: items[i]
            };
            return item;
        }, DropDownBase.prototype.setFixedHeader = function() {
            this.list.parentElement.style.display = "block";
            var liWidth = this.liCollections[0].offsetWidth;
            this.fixedHeaderElement.style.width = liWidth.toString() + "px", setStyleAttribute(this.fixedHeaderElement, {
                zIndex: 10
            });
            var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses$1.group);
            this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
        }, DropDownBase.prototype.getSortedDataSource = function(dataSource) {
            if (dataSource && "None" !== this.sortOrder) {
                var textField = this.fields.text ? this.fields.text : "text";
                dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));
            }
            return dataSource;
        }, DropDownBase.prototype.getIndexByValue = function(value) {
            for (var index, listItems = this.getItems(), i = 0; i < listItems.length; i++) if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
                index = i;
                break;
            }
            return index;
        }, DropDownBase.prototype.dispatchEvent = function(element, type) {
            var evt = document.createEvent("HTMLEvents");
            evt.initEvent(type, !1, !0), element.dispatchEvent(evt);
        }, DropDownBase.prototype.setFields = function() {
            var fields = this.fields;
            this.fields.value && !this.fields.text ? this.fields.text = this.fields.value : !fields.value && fields.text ? this.fields.value = this.fields.text : this.fields.value || this.fields.text || (this.fields.value = this.fields.text = "text");
        }, DropDownBase.prototype.resetList = function(dataSource, fields, query) {
            this.list && this.setListData(dataSource, fields, query);
        }, DropDownBase.prototype.updateSelection = function() {}, DropDownBase.prototype.renderList = function() {
            this.render();
        }, DropDownBase.prototype.updateDataSource = function(props) {
            this.resetList(this.dataSource);
        }, DropDownBase.prototype.setUpdateInitial = function(props, newProp) {
            this.isDataFetched = !1;
            for (var updateData = {}, j = 0; props.length > j; j++) newProp[props[j]] && "fields" === props[j] ? this.setFields() : newProp[props[j]] && (updateData[props[j]] = newProp[props[j]]);
            Object.keys(updateData).length > 0 && this.updateDataSource(updateData);
        }, DropDownBase.prototype.onPropertyChanged = function(newProp, oldProp) {
            "dropdownbase" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp), 
            this.setUpdateInitial([ "sortOrder", "itemTemplate" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                switch (_a[_i]) {
                  case "query":
                  case "sortOrder":
                  case "dataSource":
                  case "itemTemplate":
                    break;

                  case "enableRtl":
                    this.setEnableRtl();
                    break;

                  case "enabled":
                    this.setEnabled();
                    break;

                  case "groupTemplate":
                    if (this.renderGroupTemplate(this.list), this.ulElement && this.fixedHeaderElement) {
                        var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses$1.group);
                        this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
                    }
                    break;

                  case "locale":
                    this.list && !isNullOrUndefined(this.liCollections) && 0 === this.liCollections.length && this.l10nUpdate();
                    break;

                  case "zIndex":
                    this.setProperties({
                        zIndex: newProp.zIndex
                    }, !0), this.setZIndex();
                }
            }
        }, DropDownBase.prototype.render = function(isEmptyData) {
            this.list = this.createElement("div", {
                className: dropDownBaseClasses$1.content,
                attrs: {
                    tabindex: "0"
                }
            }), this.list.classList.add(dropDownBaseClasses$1.root), this.setFields();
            var rippleModel = {
                duration: 300,
                selector: "." + dropDownBaseClasses$1.li
            };
            this.rippleFun = rippleEffect(this.list, rippleModel);
            var group = this.element.querySelector("select>optgroup");
            if (!this.fields.groupBy && isNullOrUndefined(group) || EventHandler.add(this.list, "scroll", this.setFloatingHeader, this), 
            "dropdownbase" === this.getModuleName()) {
                this.element.getAttribute("tabindex") && this.list.setAttribute("tabindex", this.element.getAttribute("tabindex")), 
                removeClass([ this.element ], dropDownBaseClasses$1.root), this.element.style.display = "none";
                var wrapperElement = this.createElement("div");
                this.element.parentElement.insertBefore(wrapperElement, this.element), wrapperElement.appendChild(this.element), 
                wrapperElement.appendChild(this.list);
            }
            this.setEnableRtl(), this.setEnabled(), isEmptyData || this.initialize();
        }, DropDownBase.prototype.getModuleName = function() {
            return "dropdownbase";
        }, DropDownBase.prototype.getItems = function() {
            return this.ulElement.querySelectorAll("." + dropDownBaseClasses$1.li);
        }, DropDownBase.prototype.addItem = function(items, itemIndex) {
            this.list && this.list.textContent !== this.noRecordsTemplate || this.renderList();
            var itemsCount = this.getItems().length, selectedItemValue = this.list.querySelector("." + dropDownBaseClasses$1.selected);
            items = items instanceof Array ? items : [ items ];
            var index;
            index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
            for (var fields = this.fields, liCollections = [], i = 0; i < items.length; i++) {
                var item = items[i], li = this.createElement("li", {
                    className: dropDownBaseClasses$1.li,
                    id: "option-add-" + i
                });
                li.setAttribute("data-value", getValue(fields.value, item)), li.setAttribute("role", "option"), 
                li.appendChild(document.createTextNode(getValue(fields.text, item))), this.notify("addItem", {
                    module: "CheckBoxSelection",
                    item: li
                }), liCollections.push(li), this.listData.push(item), this.updateActionCompleteData(li, item);
            }
            if (0 === itemsCount && isNullOrUndefined(this.list.querySelector("ul"))) this.list.innerHTML = "", 
            this.list.appendChild(this.ulElement), append(liCollections, this.ulElement); else for (i = 0; i < items.length; i++) {
                this.liCollections[index] ? this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]) : this.ulElement.appendChild(liCollections[i]);
                var tempLi = [].slice.call(this.liCollections);
                tempLi.splice(index, 0, liCollections[i]), this.liCollections = tempLi, index += 1;
            }
            (selectedItemValue || 0 === itemIndex) && this.updateSelection();
        }, DropDownBase.prototype.validationAttribute = function(target, hidden) {
            var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
            hidden.setAttribute("name", name), target.removeAttribute("name");
            for (var attributes = [ "required", "aria-required", "form" ], i = 0; i < attributes.length; i++) if (target.getAttribute(attributes[i])) {
                var attr = target.getAttribute(attributes[i]);
                hidden.setAttribute(attributes[i], attr), target.removeAttribute(attributes[i]);
            }
        }, DropDownBase.prototype.setZIndex = function() {}, DropDownBase.prototype.updateActionCompleteData = function(li, item) {}, 
        DropDownBase.prototype.getDataByValue = function(value) {
            if (!isNullOrUndefined(this.listData)) {
                var type = this.typeOfData(this.listData).typeof;
                if ("string" === type || "number" === type || "boolean" === type) for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
                    if (!isNullOrUndefined(item = _a[_i]) && item === value) return item;
                } else for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
                    var item;
                    if (!isNullOrUndefined(item = _c[_b]) && getValue(this.fields.value ? this.fields.value : "value", item) === value) return item;
                }
            }
            return null;
        }, DropDownBase.prototype.destroy = function() {
            document.body.contains(this.list) && (EventHandler.remove(this.list, "scroll", this.setFloatingHeader), 
            isNullOrUndefined(this.rippleFun) || this.rippleFun(), detach(this.list)), _super.prototype.destroy.call(this);
        }, __decorate$56([ Complex({
            text: null,
            value: null,
            iconCss: null,
            groupBy: null
        }, FieldSettings$4) ], DropDownBase.prototype, "fields", void 0), __decorate$56([ Property(!1) ], DropDownBase.prototype, "enableRtl", void 0), 
        __decorate$56([ Property(!1) ], DropDownBase.prototype, "enablePersistence", void 0), 
        __decorate$56([ Property(null) ], DropDownBase.prototype, "itemTemplate", void 0), 
        __decorate$56([ Property(null) ], DropDownBase.prototype, "groupTemplate", void 0), 
        __decorate$56([ Property("No Records Found") ], DropDownBase.prototype, "noRecordsTemplate", void 0), 
        __decorate$56([ Property("The Request Failed") ], DropDownBase.prototype, "actionFailureTemplate", void 0), 
        __decorate$56([ Property("None") ], DropDownBase.prototype, "sortOrder", void 0), 
        __decorate$56([ Property(!0) ], DropDownBase.prototype, "enabled", void 0), __decorate$56([ Property([]) ], DropDownBase.prototype, "dataSource", void 0), 
        __decorate$56([ Property(null) ], DropDownBase.prototype, "query", void 0), __decorate$56([ Property(1e3) ], DropDownBase.prototype, "zIndex", void 0), 
        __decorate$56([ Property(!1) ], DropDownBase.prototype, "ignoreAccent", void 0), 
        __decorate$56([ Event() ], DropDownBase.prototype, "actionBegin", void 0), __decorate$56([ Event() ], DropDownBase.prototype, "actionComplete", void 0), 
        __decorate$56([ Event() ], DropDownBase.prototype, "actionFailure", void 0), __decorate$56([ Event() ], DropDownBase.prototype, "select", void 0), 
        __decorate$56([ Event() ], DropDownBase.prototype, "dataBound", void 0), __decorate$56([ Event() ], DropDownBase.prototype, "created", void 0), 
        __decorate$56([ Event() ], DropDownBase.prototype, "destroyed", void 0), DropDownBase = __decorate$56([ NotifyPropertyChanges ], DropDownBase);
    }(Component), __extends$110 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$55 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }, dropDownListClasses$1 = {
        root: "e-dropdownlist",
        hover: dropDownBaseClasses$1.hover,
        selected: dropDownBaseClasses$1.selected,
        rtl: dropDownBaseClasses$1.rtl,
        li: dropDownBaseClasses$1.li,
        disable: dropDownBaseClasses$1.disabled,
        base: dropDownBaseClasses$1.root,
        focus: dropDownBaseClasses$1.focus,
        input: "e-input-group",
        inputFocus: "e-input-focus",
        icon: "e-input-group-icon e-ddl-icon",
        iconAnimation: "e-icon-anim",
        value: "e-input-value",
        device: "e-ddl-device",
        backIcon: "e-input-group-icon e-back-icon e-icons",
        filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
        filterInput: "e-input-filter",
        filterParent: "e-filter-parent",
        mobileFilter: "e-ddl-device-filter",
        footer: "e-ddl-footer",
        header: "e-ddl-header",
        clearIcon: "e-clear-icon",
        clearIconHide: "e-clear-icon-hide",
        popupFullScreen: "e-popup-full-page",
        disableIcon: "e-ddl-disable-icon",
        hiddenElement: "e-ddl-hidden"
    }, inputObject$2 = {
        container: null,
        buttons: []
    }, DropDownList$1 = function(_super) {
        function DropDownList(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.previousValue = null, _this;
        }
        return __extends$110(DropDownList, _super), DropDownList.prototype.preRender = function() {
            this.element.style.opacity = "0", this.initializeData(), _super.prototype.preRender.call(this), 
            this.activeIndex = this.index, this.queryString = "";
        }, DropDownList.prototype.initializeData = function() {
            this.isPopupOpen = !1, this.isDocumentClick = !1, this.isInteracted = !1, this.isFilterFocus = !1, 
            this.beforePopupOpen = !1, this.initial = !0, this.initRemoteRender = !1, this.isNotSearchList = !1, 
            this.isTyped = !1, this.isSelected = !1, this.preventFocus = !1, this.preventAutoFill = !1, 
            this.isValidKey = !1, this.typedString = "", this.isEscapeKey = !1, this.isPreventBlur = !1, 
            this.isTabKey = !1, this.actionCompleteData = {
                isUpdated: !1
            }, this.prevSelectPoints = {}, this.isSelectCustom = !1, this.isDropDownClick = !1, 
            this.preventAltUp = !1, this.isCustomFilter = !1, this.isSecondClick = !1, this.keyConfigure = {
                tab: "tab",
                enter: "13",
                escape: "27",
                end: "35",
                home: "36",
                down: "40",
                up: "38",
                pageUp: "33",
                pageDown: "34",
                open: "alt+40",
                close: "shift+tab",
                hide: "alt+38",
                space: "32"
            };
        }, DropDownList.prototype.setZIndex = function() {
            this.popupObj && this.popupObj.setProperties({
                zIndex: this.zIndex
            });
        }, DropDownList.prototype.renderList = function(isEmptyData) {
            _super.prototype.render.call(this, isEmptyData), this.wireListEvents();
        }, DropDownList.prototype.floatLabelChange = function() {
            if ("dropdownlist" === this.getModuleName() && "Auto" === this.floatLabelType) {
                var floatElement = this.inputWrapper.container.querySelector(".e-float-text");
                "" !== this.inputElement.value || this.isInteracted ? classList(floatElement, [ "e-label-top" ], [ "e-label-bottom" ]) : classList(floatElement, [ "e-label-bottom" ], [ "e-label-top" ]);
            }
        }, DropDownList.prototype.resetHandler = function(e) {
            e.preventDefault(), this.clear(e), this.onChangeEvent(e);
        }, DropDownList.prototype.resetFocusElement = function() {
            if (this.removeHover(), this.removeSelection(), this.removeFocus(), this.list.scrollTop = 0, 
            "autocomplete" !== this.getModuleName()) {
                var li = this.ulElement.querySelector("." + dropDownListClasses$1.li);
                li && li.classList.add(dropDownListClasses$1.focus);
            }
        }, DropDownList.prototype.clear = function(e, properties) {
            (isNullOrUndefined(properties) || !isNullOrUndefined(properties) && isNullOrUndefined(properties.dataSource)) && this.resetSelection();
            var dataItem = this.getItemData();
            this.previousValue !== dataItem.value && this.onChangeEvent(e);
        }, DropDownList.prototype.resetSelection = function() {
            this.list && (!this.allowFiltering || "autocomplete" === this.getModuleName() || isNullOrUndefined(this.actionCompleteData.ulElement) || isNullOrUndefined(this.actionCompleteData.list) || this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(!0), this.actionCompleteData.list), 
            this.resetFocusElement()), this.hiddenElement.innerHTML = "", this.inputElement.value = "", 
            this.value = null, this.itemData = null, this.text = null, this.index = null, this.activeIndex = null, 
            this.item = null, this.queryString = "", this.valueTempElement && (detach(this.valueTempElement), 
            this.inputElement.style.display = "block", this.valueTempElement = null), this.setSelection(null, null), 
            this.isSelectCustom = !1, this.updateIconState();
        }, DropDownList.prototype.setHTMLAttributes = function() {
            if (Object.keys(this.htmlAttributes).length) for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
                var htmlAttr = _a[_i];
                if ("class" === htmlAttr) this.inputWrapper.container.classList.add(this.htmlAttributes[htmlAttr]); else if ("disabled" === htmlAttr && "disabled" === this.htmlAttributes[htmlAttr]) this.enabled = !1, 
                this.setEnable(); else if ("readonly" === htmlAttr && "readonly" === this.htmlAttributes[htmlAttr]) this.readonly = !0, 
                this.dataBind(); else if ("style" === htmlAttr) this.inputWrapper.container.setAttribute("style", this.htmlAttributes[htmlAttr]); else {
                    [ "name", "required" ].indexOf(htmlAttr) > -1 ? this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]) : [ "title", "id", "placeholder" ].indexOf(htmlAttr) > -1 ? "placeholder" === htmlAttr ? Input.setPlaceholder(this.htmlAttributes[htmlAttr], this.inputElement) : this.element.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]) : this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[htmlAttr]);
                }
            }
        }, DropDownList.prototype.getAriaAttributes = function() {
            return {
                "aria-disabled": "false",
                "aria-owns": this.element.id + "_options",
                role: "listbox",
                "aria-haspopup": "true",
                "aria-expanded": "false",
                "aria-activedescendant": "null",
                "aria-labelledby": this.hiddenElement.id
            };
        }, DropDownList.prototype.setEnableRtl = function() {
            Input.setEnableRtl(this.enableRtl, [ this.inputElement.parentElement ]), this.popupObj && (this.popupObj.enableRtl = this.enableRtl, 
            this.popupObj.dataBind());
        }, DropDownList.prototype.setEnable = function() {
            Input.setEnabled(this.enabled, this.inputElement), this.enabled ? (removeClass([ this.inputWrapper.container ], dropDownListClasses$1.disable), 
            this.inputElement.setAttribute("aria-disabled", "false"), this.targetElement().setAttribute("tabindex", this.tabIndex)) : (this.hidePopup(), 
            addClass([ this.inputWrapper.container ], dropDownListClasses$1.disable), this.inputElement.setAttribute("aria-disabled", "true"), 
            this.targetElement().tabIndex = -1);
        }, DropDownList.prototype.getPersistData = function() {
            return this.addOnPersist([ "value" ]);
        }, DropDownList.prototype.preventTabIndex = function(element) {
            "dropdownlist" === this.getModuleName() && (element.tabIndex = -1);
        }, DropDownList.prototype.targetElement = function() {
            return this.inputWrapper.container;
        }, DropDownList.prototype.getNgDirective = function() {
            return "EJS-DROPDOWNLIST";
        }, DropDownList.prototype.getElementByText = function(text) {
            return this.getElementByValue(this.getValueByText(text));
        }, DropDownList.prototype.getElementByValue = function(value) {
            for (var item, _i = 0, listItems_1 = this.getItems(); _i < listItems_1.length; _i++) {
                var liItem = listItems_1[_i];
                if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
                    item = liItem;
                    break;
                }
            }
            return item;
        }, DropDownList.prototype.initValue = function() {
            this.renderList(), this.dataSource instanceof DataManager ? this.initRemoteRender = !0 : this.updateValues();
        }, DropDownList.prototype.updateValues = function() {
            if (isNullOrUndefined(this.value)) if (this.text && isNullOrUndefined(this.value)) {
                var element = this.getElementByText(this.text);
                if (isNullOrUndefined(element)) return void this.setProperties({
                    text: null
                });
                this.setSelection(element, null);
            } else this.setSelection(this.liCollections[this.activeIndex], null); else this.setSelection(this.getElementByValue(this.value), null);
            this.setHiddenValue(), Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }, DropDownList.prototype.onBlur = function(e) {
            if (this.enabled) {
                var target = e.relatedTarget, currentTarget = e.target, isPreventBlur = this.isPreventBlur;
                this.isPreventBlur = !1, !isPreventBlur || this.isDocumentClick || !this.isPopupOpen || isNullOrUndefined(currentTarget) && (this.isFilterLayout() || !isNullOrUndefined(target)) ? this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses$1.mobileFilter) ? this.beforePopupOpen || (this.isDocumentClick = !1) : (("dropdownlist" === this.getModuleName() && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses$1.inputFocus)) || isNullOrUndefined(target) && "dropdownlist" === this.getModuleName() && this.allowFiltering && currentTarget !== this.inputWrapper.container || "dropdownlist" !== this.getModuleName() && !this.inputWrapper.container.contains(target) || this.isTabKey) && (this.isDocumentClick = !!this.isPopupOpen, 
                this.focusOutAction(), this.isTabKey = !1), !this.isRequested || this.isPopupOpen || this.isPreventBlur || (this.isActive = !1, 
                this.beforePopupOpen = !1)) : "dropdownlist" === this.getModuleName() && this.allowFiltering && this.isPopupOpen ? this.filterInput.focus() : this.targetElement().focus();
            }
        }, DropDownList.prototype.focusOutAction = function() {
            this.isInteracted = !1, this.focusOut(), this.onFocusOut();
        }, DropDownList.prototype.onFocusOut = function() {
            this.enabled && (this.isSelected && (this.isSelectCustom = !1, this.onChangeEvent(null)), 
            this.floatLabelChange(), this.dispatchEvent(this.hiddenElement, "change"), "dropdownlist" === this.getModuleName() && "INPUT" !== this.element.tagName && this.dispatchEvent(this.inputElement, "blur"), 
            this.inputWrapper.clearButton && addClass([ this.inputWrapper.clearButton ], dropDownListClasses$1.clearIconHide), 
            this.trigger("blur"));
        }, DropDownList.prototype.onFocus = function() {
            this.isInteracted || (this.isInteracted = !0, this.trigger("focus")), this.updateIconState();
        }, DropDownList.prototype.resetValueHandler = function(e) {
            var formElement = closest(this.inputElement, "form");
            formElement && e.target === formElement && (this.value = null);
        }, DropDownList.prototype.wireEvent = function() {
            EventHandler.add(this.inputWrapper.container, "mousedown", this.dropDownClick, this), 
            EventHandler.add(this.inputWrapper.container, "focus", this.focusIn, this), EventHandler.add(this.inputWrapper.container, "keypress", this.onSearch, this), 
            this.bindCommonEvent();
        }, DropDownList.prototype.bindCommonEvent = function() {
            EventHandler.add(this.targetElement(), "blur", this.onBlur, this);
            var formElement = closest(this.inputElement, "form");
            formElement && EventHandler.add(formElement, "reset", this.resetValueHandler, this), 
            Browser.isDevice || (this.keyboardModule = new KeyboardEvents(this.targetElement(), {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigure,
                eventName: "keydown"
            })), this.bindClearEvent();
        }, DropDownList.prototype.bindClearEvent = function() {
            this.showClearButton && EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
        }, DropDownList.prototype.unBindCommonEvent = function() {
            EventHandler.remove(this.targetElement(), "blur", this.onBlur);
            var formElement = closest(this.inputElement, "form");
            formElement && EventHandler.remove(formElement, "reset", this.resetValueHandler), 
            Browser.isDevice || this.keyboardModule.destroy(), this.showClearButton && EventHandler.remove(this.inputWrapper.clearButton, "mousedown", this.resetHandler);
        }, DropDownList.prototype.updateIconState = function() {
            this.showClearButton && ("" !== this.inputElement.value ? removeClass([ this.inputWrapper.clearButton ], dropDownListClasses$1.clearIconHide) : addClass([ this.inputWrapper.clearButton ], dropDownListClasses$1.clearIconHide));
        }, DropDownList.prototype.wireListEvents = function() {
            EventHandler.add(this.list, "click", this.onMouseClick, this), EventHandler.add(this.list, "mouseover", this.onMouseOver, this), 
            EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
        }, DropDownList.prototype.onSearch = function(e) {
            32 !== e.charCode && 13 !== e.charCode && (void 0 === this.list && this.renderList(), 
            this.searchKeyEvent = e, this.isRequested || isNullOrUndefined(this.list.querySelector("li")) || this.incrementalSearch(e));
        }, DropDownList.prototype.onMouseClick = function(e) {
            var target = e.target, li = (target.classList, closest(target, "." + dropDownBaseClasses$1.li));
            if (this.isValidLI(li)) if (this.setSelection(li, e), Browser.isDevice && this.isFilterLayout()) history.back(); else {
                this.closePopup(100);
            }
        }, DropDownList.prototype.onMouseOver = function(e) {
            var currentLi = closest(e.target, "." + dropDownBaseClasses$1.li);
            this.setHover(currentLi);
        }, DropDownList.prototype.setHover = function(li) {
            this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses$1.hover) && (this.removeHover(), 
            addClass([ li ], dropDownBaseClasses$1.hover));
        }, DropDownList.prototype.onMouseLeave = function(e) {
            this.removeHover();
        }, DropDownList.prototype.removeHover = function() {
            var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses$1.hover);
            hoveredItem && hoveredItem.length && removeClass(hoveredItem, dropDownBaseClasses$1.hover);
        }, DropDownList.prototype.isValidLI = function(li) {
            return li && li.hasAttribute("role") && "option" === li.getAttribute("role");
        }, DropDownList.prototype.incrementalSearch = function(e) {
            if (this.liCollections.length > 0) {
                var li = function(keyCode, items, selectedIndex, ignoreCase) {
                    queryString$1 += String.fromCharCode(keyCode), setTimeout(function() {
                        queryString$1 = "";
                    }, 1e3);
                    var index;
                    if (queryString$1 = ignoreCase ? queryString$1.toLowerCase() : queryString$1, prevString$1 === queryString$1) {
                        for (var i = 0; i < matches$2.length; i++) if (matches$2[i].classList.contains(activeClass$1)) {
                            index = i;
                            break;
                        }
                        return index += 1, matches$2[index];
                    }
                    var listItems = items, strLength = queryString$1.length, item = void 0;
                    i = selectedIndex = selectedIndex ? selectedIndex + 1 : 0, matches$2 = [];
                    do {
                        i === listItems.length && (i = -1), item = listItems[index = -1 === i ? 0 : i], 
                        (ignoreCase ? item.innerText.toLowerCase() : item.innerText).substr(0, strLength) === queryString$1 && matches$2.push(listItems[index]), 
                        i++;
                    } while (i !== selectedIndex);
                    return prevString$1 = queryString$1, matches$2[0];
                }(e.charCode, this.liCollections, this.activeIndex, !0);
                isNullOrUndefined(li) || (this.setSelection(li, e), this.setScrollPosition());
            }
        }, DropDownList.prototype.hideSpinner = function() {
            isNullOrUndefined(this.spinnerElement) || (hideSpinner(this.spinnerElement), removeClass([ this.spinnerElement ], dropDownListClasses$1.disableIcon), 
            this.spinnerElement.innerHTML = "", this.spinnerElement = null);
        }, DropDownList.prototype.showSpinner = function() {
            isNullOrUndefined(this.spinnerElement) && (this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0], 
            addClass([ this.spinnerElement ], dropDownListClasses$1.disableIcon), createSpinner({
                target: this.spinnerElement,
                width: Browser.isDevice ? "16px" : "14px"
            }, this.createElement), showSpinner(this.spinnerElement));
        }, DropDownList.prototype.keyActionHandler = function(e) {
            var preventAction = "pageUp" === e.action || "pageDown" === e.action, preventHomeEnd = "dropdownlist" !== this.getModuleName() && ("home" === e.action || "end" === e.action);
            this.isEscapeKey = "escape" === e.action, this.isTabKey = !this.isPopupOpen && "tab" === e.action;
            var isNavigation = "down" === e.action || "up" === e.action || "pageUp" === e.action || "pageDown" === e.action || "home" === e.action || "end" === e.action;
            if ((!(this.isEditTextBox() || preventAction || preventHomeEnd) || this.isPopupOpen) && !this.readonly) {
                var isTabAction = "tab" === e.action || "close" === e.action;
                if (void 0 !== this.list || this.isRequested || isTabAction || "escape" === e.action || (this.searchKeyEvent = e, 
                this.renderList()), isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && 0 === this.liCollections.length || this.isRequested) return;
                switch ((isTabAction && this.isPopupOpen || "escape" === e.action) && e.preventDefault(), 
                this.isSelected = "escape" !== e.action && this.isSelected, this.isTyped = !isNavigation && "escape" !== e.action && this.isTyped, 
                e.action) {
                  case "down":
                  case "up":
                    var focusEle = this.list.querySelector("." + dropDownListClasses$1.focus);
                    if (this.isSelectFocusItem(focusEle)) this.setSelection(focusEle, e); else {
                        var nextItem = void 0, index = "down" === e.action ? this.activeIndex + 1 : this.activeIndex - 1, startIndex = 0;
                        "autocomplete" === this.getModuleName() && (startIndex = "down" === e.action && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1, 
                        index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index), 
                        nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index], 
                        this.setSelection(nextItem, e);
                    }
                    e.preventDefault();
                    break;

                  case "pageUp":
                    this.pageUpSelection(this.activeIndex - this.getPageCount(), e), e.preventDefault();
                    break;

                  case "pageDown":
                    this.pageDownSelection(this.activeIndex + this.getPageCount(), e), e.preventDefault();
                    break;

                  case "home":
                    if ("dropdownlist" === this.getModuleName()) {
                        if (e.preventDefault(), 0 === this.activeIndex) return;
                        this.setSelection(this.liCollections[0], e);
                    }
                    break;

                  case "end":
                    if ("dropdownlist" === this.getModuleName()) {
                        e.preventDefault();
                        var lastLi = this.getItems().length - 1;
                        if (this.activeIndex === lastLi) return;
                        this.setSelection(this.liCollections[lastLi], e);
                    }
                    break;

                  case "space":
                    "dropdownlist" === this.getModuleName() && (this.beforePopupOpen || this.showPopup());
                    break;

                  case "open":
                    this.showPopup();
                    break;

                  case "hide":
                    this.preventAltUp = this.isPopupOpen, this.hidePopup(), this.focusDropDown(e);
                    break;

                  case "enter":
                    this.selectCurrentItem(e);
                    break;

                  case "escape":
                  case "tab":
                  case "close":
                    this.isPopupOpen && (this.hidePopup(), this.focusDropDown(e));
                }
            }
        }, DropDownList.prototype.selectCurrentItem = function(e) {
            if (this.isPopupOpen) {
                var li = this.list.querySelector("." + dropDownListClasses$1.focus);
                li && (this.setSelection(li, e), this.isTyped = !1), this.isSelected && (this.isSelectCustom = !1, 
                this.onChangeEvent(e)), this.hidePopup(), this.focusDropDown(e);
            } else this.showPopup();
        }, DropDownList.prototype.isSelectFocusItem = function(element) {
            return !isNullOrUndefined(element);
        }, DropDownList.prototype.getPageCount = function() {
            var liHeight = this.list.classList.contains(dropDownBaseClasses$1.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
            return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
        }, DropDownList.prototype.pageUpSelection = function(steps, event) {
            var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
            this.setSelection(previousItem, event);
        }, DropDownList.prototype.pageDownSelection = function(steps, event) {
            var list = this.getItems(), previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
            this.setSelection(previousItem, event);
        }, DropDownList.prototype.unWireEvent = function() {
            EventHandler.remove(this.inputWrapper.container, "mousedown", this.dropDownClick), 
            EventHandler.remove(this.inputWrapper.container, "keypress", this.onSearch), EventHandler.remove(this.inputWrapper.container, "focus", this.focusIn), 
            this.unBindCommonEvent();
        }, DropDownList.prototype.unWireListEvents = function() {
            EventHandler.remove(this.list, "click", this.onMouseClick), EventHandler.remove(this.list, "mouseover", this.onMouseOver), 
            EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
        }, DropDownList.prototype.onDocumentClick = function(e) {
            var target = e.target;
            if (!isNullOrUndefined(this.popupObj) && closest(target, "#" + this.popupObj.element.id) || this.inputWrapper.container.contains(e.target)) target === this.inputElement || this.allowFiltering && target === this.filterInput || "combobox" === this.getModuleName() && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0] || (this.isPreventBlur = (Browser.isIE || "edge" === Browser.info.name) && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput), 
            e.preventDefault()); else if (this.inputWrapper.container.classList.contains(dropDownListClasses$1.inputFocus) || this.isPopupOpen) {
                this.isDocumentClick = !0;
                var isActive = this.isRequested;
                this.isInteracted = !1, this.hidePopup(), isActive || (this.onFocusOut(), this.inputWrapper.container.classList.remove(dropDownListClasses$1.inputFocus));
            }
        }, DropDownList.prototype.activeStateChange = function() {
            this.isDocumentClick && (this.hidePopup(), this.onFocusOut(), this.inputWrapper.container.classList.remove(dropDownListClasses$1.inputFocus));
        }, DropDownList.prototype.focusDropDown = function(e) {
            !this.initial && this.isFilterLayout() && this.focusIn();
        }, DropDownList.prototype.dropDownClick = function(e) {
            if (3 !== e.which && 2 !== e.button && !this.targetElement().classList.contains(dropDownListClasses$1.disable) && this.inputWrapper.clearButton !== e.target) {
                var target = e.target;
                if (target === this.inputElement || this.allowFiltering && target === this.filterInput || "combobox" === this.getModuleName() || e.preventDefault(), 
                this.readonly) this.focusIn(); else {
                    this.isPopupOpen ? (this.hidePopup(), this.isFilterLayout() && this.focusDropDown(e)) : (this.focusIn(), 
                    this.floatLabelChange(), this.queryString = "" === this.inputElement.value.trim() ? null : this.inputElement.value, 
                    this.isDropDownClick = !0, this.showPopup());
                    var proxy_1 = this;
                    this.isSecondClick || setTimeout(function() {
                        proxy_1.cloneElements();
                    }, 100);
                }
            }
        }, DropDownList.prototype.cloneElements = function() {
            if (this.list) {
                var ulElement = this.list.querySelector("ul");
                ulElement && (ulElement = ulElement.cloneNode ? ulElement.cloneNode(!0) : ulElement, 
                this.actionCompleteData.ulElement = ulElement, this.isSecondClick = !0);
            }
        }, DropDownList.prototype.updateSelectedItem = function(li, e, preventSelect) {
            this.removeSelection(), li.classList.add(dropDownBaseClasses$1.selected), this.removeHover();
            var value = this.getFormattedValue(li.getAttribute("data-value"));
            if (this.item = li, this.itemData = this.getDataByValue(value), !this.initial && !preventSelect) {
                var items = this.detachChanges();
                this.isSelected = !0;
                var eventArgs = {
                    e: e,
                    item: this.item,
                    itemData: items,
                    isInteracted: !!e,
                    cancel: !1
                };
                if (this.trigger("select", eventArgs), eventArgs.cancel) return !0;
            }
            var focusedItem = this.list.querySelector("." + dropDownBaseClasses$1.focus);
            return focusedItem && removeClass([ focusedItem ], dropDownBaseClasses$1.focus), 
            li.setAttribute("aria-selected", "true"), this.activeIndex = this.getIndexByValue(value), 
            !1;
        }, DropDownList.prototype.activeItem = function(li) {
            this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses$1.selected) && (this.removeSelection(), 
            li.classList.add(dropDownBaseClasses$1.selected), this.removeHover(), li.setAttribute("aria-selected", "true"));
        }, DropDownList.prototype.setValue = function(e) {
            var dataItem = this.getItemData();
            return null === dataItem.value ? Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton) : Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.valueTemplate && null !== this.itemData ? this.setValueTemplate() : this.inputElement.previousSibling === this.valueTempElement && (detach(this.valueTempElement), 
            this.inputElement.style.display = "block"), this.previousValue === dataItem.value ? (this.isSelected = !1, 
            !0) : (this.isSelected = !this.initial, this.isSelectCustom = !1, "dropdownlist" === this.getModuleName() && this.updateIconState(), 
            !1);
        }, DropDownList.prototype.setSelection = function(li, e) {
            if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses$1.selected)) {
                this.previousItemData = isNullOrUndefined(this.itemData) ? null : this.itemData;
                if (this.updateSelectedItem(li, e, !1)) return;
            }
            this.list && this.removeHover(), this.previousSelectedLI = isNullOrUndefined(this.selectedLI) ? null : this.selectedLI, 
            this.selectedLI = li, this.setValue(e) || (this.isPopupOpen && (attributes(this.targetElement(), {
                "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
            }), this.isFilterLayout() && attributes(this.filterInput, {
                "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
            })), (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && ("keydown" !== e.type || "keydown" === e.type && "enter" === e.action)) && (this.isSelectCustom = !1, 
            this.onChangeEvent(e)), !this.isPopupOpen || isNullOrUndefined(this.selectedLI) || null === this.itemData || e && "click" === e.type || this.setScrollPosition(e));
        }, DropDownList.prototype.setValueTemplate = function() {
            this.valueTempElement || (this.valueTempElement = this.createElement("span", {
                className: dropDownListClasses$1.value
            }), this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement), 
            this.inputElement.style.display = "none"), this.valueTempElement.innerHTML = "";
            for (var _i = 0, _a = compile$$1(this.valueTemplate)(this.itemData); _i < _a.length; _i++) {
                var item = _a[_i];
                this.valueTempElement.appendChild(item);
            }
        }, DropDownList.prototype.removeSelection = function() {
            var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses$1.selected);
            selectedItems.length && (removeClass(selectedItems, dropDownBaseClasses$1.selected), 
            selectedItems[0].removeAttribute("aria-selected"));
        }, DropDownList.prototype.getItemData = function() {
            var dataValue, dataText, fields = this.fields, dataItem = null;
            isNullOrUndefined(dataItem = this.itemData) || (dataValue = getValue(fields.value, dataItem), 
            dataText = getValue(fields.text, dataItem));
            return {
                value: isNullOrUndefined(dataItem) || isUndefined(dataValue) ? dataItem : dataValue,
                text: isNullOrUndefined(dataItem) || isUndefined(dataValue) ? dataItem : dataText
            };
        }, DropDownList.prototype.onChangeEvent = function(eve) {
            var dataItem = this.getItemData(), index = this.isSelectCustom ? null : this.activeIndex;
            this.setProperties({
                value: dataItem.value,
                index: index,
                text: dataItem.text
            }, !0), this.detachChangeEvent(eve);
        }, DropDownList.prototype.detachChanges = function() {
            return "string" == typeof this.itemData || "boolean" == typeof this.itemData || "number" == typeof this.itemData ? Object.defineProperties({}, {
                value: {
                    value: this.itemData,
                    enumerable: !0
                },
                text: {
                    value: this.itemData,
                    enumerable: !0
                }
            }) : this.itemData;
        }, DropDownList.prototype.detachChangeEvent = function(eve) {
            if (this.isSelected = !1, this.previousValue = this.value, this.activeIndex = this.index, 
            this.typedString = isNullOrUndefined(this.text) ? "" : this.text, !this.initial) {
                var items = this.detachChanges(), preItems = void 0;
                preItems = "string" == typeof this.previousItemData || "boolean" == typeof this.previousItemData || "number" == typeof this.previousItemData ? Object.defineProperties({}, {
                    value: {
                        value: this.previousItemData,
                        enumerable: !0
                    },
                    text: {
                        value: this.previousItemData,
                        enumerable: !0
                    }
                }) : this.previousItemData, this.setHiddenValue();
                var eventArgs = {
                    e: eve,
                    item: this.item,
                    itemData: items,
                    previousItem: this.previousSelectedLI,
                    previousItemData: preItems,
                    isInteracted: !!eve,
                    value: this.value,
                    element: this.element
                };
                this.trigger("change", eventArgs);
            }
        }, DropDownList.prototype.setHiddenValue = function() {
            if (isNullOrUndefined(this.value)) this.hiddenElement.innerHTML = ""; else {
                this.hiddenElement.innerHTML = "<option selected>" + this.text + "</option>";
                this.hiddenElement.querySelector("option").setAttribute("value", this.value.toString());
            }
        }, DropDownList.prototype.onFilterUp = function(e) {
            if (this.isValidKey = 40 === e.keyCode || 38 === e.keyCode || this.isValidKey, this.isValidKey) switch (this.isValidKey = !1, 
            e.keyCode) {
              case 38:
              case 40:
                "autocomplete" !== this.getModuleName() || this.isPopupOpen || this.preventAltUp || this.isRequested ? this.preventAutoFill = !1 : (this.preventAutoFill = !0, 
                this.searchLists(e)), this.preventAltUp = !1, e.preventDefault();
                break;

              case 46:
              case 8:
                this.typedString = this.filterInput.value, !this.isPopupOpen && "" !== this.typedString || this.isPopupOpen && this.queryString.length > 0 ? (this.preventAutoFill = !0, 
                this.searchLists(e)) : "" === this.typedString && (this.resetFocusElement(), this.activeIndex = null, 
                "autocomplete" === this.getModuleName() && this.hidePopup()), e.preventDefault();
                break;

              default:
                this.typedString = this.filterInput.value, this.preventAutoFill = !1, this.searchLists(e);
            }
        }, DropDownList.prototype.onFilterDown = function(e) {
            switch (e.keyCode) {
              case 13:
                break;

              case 40:
              case 38:
                this.queryString = this.filterInput.value, e.preventDefault();
                break;

              case 9:
                this.isPopupOpen && e.preventDefault();
                break;

              default:
                this.prevSelectPoints = this.getSelectionPoints(), this.queryString = this.filterInput.value;
            }
        }, DropDownList.prototype.removeFillSelection = function() {
            if (this.isInteracted) {
                var selection = this.getSelectionPoints();
                this.inputElement.setSelectionRange(selection.end, selection.end);
            }
        }, DropDownList.prototype.getSelectionPoints = function() {
            var input = this.inputElement;
            return {
                start: Math.abs(input.selectionStart),
                end: Math.abs(input.selectionEnd)
            };
        }, DropDownList.prototype.searchLists = function(e) {
            var _this = this;
            if (this.isTyped = !0, this.activeIndex = null, this.filterInput.parentElement.querySelector("." + dropDownListClasses$1.clearIcon)) {
                this.filterInput.parentElement.querySelector("." + dropDownListClasses$1.clearIcon).style.visibility = "" === this.filterInput.value ? "hidden" : "visible";
            }
            if (this.isDataFetched = !1, this.isFiltering()) {
                var eventArgs_1 = {
                    preventDefaultAction: !1,
                    text: this.filterInput.value,
                    updateData: function(dataSource, query, fields) {
                        eventArgs_1.cancel || (_this.isCustomFilter = !0, _this.filteringAction(dataSource, query, fields));
                    },
                    baseEventArgs: e,
                    cancel: !1
                };
                if (this.trigger("filtering", eventArgs_1), eventArgs_1.cancel) return;
                if (!this.isCustomFilter && !eventArgs_1.preventDefaultAction) {
                    var filterQuery = this.query ? this.query.clone() : new Query(), dataType = this.typeOfData(this.dataSource).typeof;
                    if ((this.dataSource instanceof DataManager || "string" !== dataType) && "number" !== dataType) {
                        var fields = this.fields;
                        filterQuery.where(isNullOrUndefined(fields.text) ? "" : fields.text, "startswith", this.filterInput.value, !0, this.ignoreAccent);
                    } else filterQuery.where("", "startswith", this.filterInput.value, !0, this.ignoreAccent);
                    this.filteringAction(this.dataSource, filterQuery, this.fields);
                }
            }
        }, DropDownList.prototype.filteringAction = function(dataSource, query, fields) {
            isNullOrUndefined(this.filterInput) || (this.beforePopupOpen = !0, "" === this.filterInput.value.trim() ? (this.actionCompleteData.isUpdated = !1, 
            this.isTyped = !1, isNullOrUndefined(this.actionCompleteData.ulElement) || isNullOrUndefined(this.actionCompleteData.list) || this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list), 
            this.isTyped = !0, isNullOrUndefined(this.itemData) || "dropdownlist" !== this.getModuleName() || (this.focusIndexItem(), 
            this.setScrollPosition()), this.isNotSearchList = !0) : (this.isNotSearchList = !1, 
            this.resetList(dataSource, fields, query)));
        }, DropDownList.prototype.setSearchBox = function(popupElement) {
            if (this.isFiltering()) {
                var parentElement = this.createElement("span", {
                    className: dropDownListClasses$1.filterParent
                });
                this.filterInput = this.createElement("input", {
                    attrs: {
                        type: "text"
                    },
                    className: dropDownListClasses$1.filterInput
                }), this.element.parentNode.insertBefore(this.filterInput, this.element);
                var backIcon = !1;
                return Browser.isDevice && (backIcon = !0), this.filterInputObj = Input.createInput({
                    element: this.filterInput,
                    buttons: backIcon ? [ dropDownListClasses$1.backIcon, dropDownListClasses$1.filterBarClearIcon ] : [ dropDownListClasses$1.filterBarClearIcon ],
                    properties: {
                        placeholder: this.filterBarPlaceholder
                    }
                }, this.createElement), append([ this.filterInputObj.container ], parentElement), 
                prepend([ parentElement ], popupElement), attributes(this.filterInput, {
                    "aria-disabled": "false",
                    "aria-owns": this.element.id + "_options",
                    role: "listbox",
                    "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null,
                    autocomplete: "off",
                    autocorrect: "off",
                    autocapitalize: "off",
                    spellcheck: "false"
                }), this.clearIconElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses$1.clearIcon), 
                !Browser.isDevice && this.clearIconElement && (EventHandler.add(this.clearIconElement, "click", this.clearText, this), 
                this.clearIconElement.style.visibility = "hidden"), Browser.isDevice || (this.searchKeyModule = new KeyboardEvents(this.filterInput, {
                    keyAction: this.keyActionHandler.bind(this),
                    keyConfigs: this.keyConfigure,
                    eventName: "keydown"
                })), EventHandler.add(this.filterInput, "input", this.onInput, this), EventHandler.add(this.filterInput, "keyup", this.onFilterUp, this), 
                EventHandler.add(this.filterInput, "keydown", this.onFilterDown, this), EventHandler.add(this.filterInput, "blur", this.onBlur, this), 
                this.filterInputObj;
            }
            return inputObject$2;
        }, DropDownList.prototype.onInput = function() {
            this.isValidKey = !0;
        }, DropDownList.prototype.onActionFailure = function(e) {
            _super.prototype.onActionFailure.call(this, e), this.beforePopupOpen && this.renderPopup();
        }, DropDownList.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
            if (this.isNotSearchList) this.isNotSearchList = !1; else if (this.isActive) {
                var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(!0) : null;
                _super.prototype.onActionComplete.call(this, ulElement, list, e), this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && "keydown" === this.searchKeyEvent.type && (this.isRequested = !1, 
                this.keyActionHandler(this.searchKeyEvent), this.searchKeyEvent = null), this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && (this.incrementalSearch(this.searchKeyEvent), 
                this.searchKeyEvent = null), this.list.scrollTop = 0, isNullOrUndefined(ulElement) || attributes(ulElement, {
                    id: this.element.id + "_options",
                    role: "listbox",
                    "aria-hidden": "false"
                }), this.initRemoteRender && (this.initial = !0, this.activeIndex = this.index, 
                this.updateValues(), this.initRemoteRender = !1, this.initial = !1), "autocomplete" !== this.getModuleName() && this.isFiltering() && !this.isTyped && (this.actionCompleteData.isUpdated && (this.isCustomFilter || this.isFilterFocus || !(this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource.length) && 0 !== this.dataSource.length)) || (this.actionCompleteData = {
                    ulElement: ulElement.cloneNode(!0),
                    list: list,
                    isUpdated: !0
                }), this.addNewItem(list, selectedItem), isNullOrUndefined(this.itemData) || this.focusIndexItem()), 
                this.beforePopupOpen && this.renderPopup();
            }
        }, DropDownList.prototype.addNewItem = function(listData, newElement) {
            var _this = this;
            if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {
                var value_1 = this.getItemData().value;
                listData.some(function(data) {
                    return ("string" == typeof data || "number" == typeof data) && data === value_1 || getValue(_this.fields.value, data) === value_1;
                }) || this.addItem(this.itemData);
            }
        }, DropDownList.prototype.updateActionCompleteData = function(li, item) {
            "autocomplete" !== this.getModuleName() && this.actionCompleteData.ulElement && (this.actionCompleteData.ulElement.appendChild(li.cloneNode(!0)), 
            this.isFiltering() && this.actionCompleteData.list.push(item));
        }, DropDownList.prototype.focusIndexItem = function() {
            var value = this.getItemData().value;
            this.activeIndex = this.getIndexByValue(value);
            var element = this.list.querySelector('[data-value="' + value + '"]');
            this.selectedLI = element, this.activeItem(element), this.removeFocus();
        }, DropDownList.prototype.updateSelection = function() {
            var selectedItem = this.list.querySelector("." + dropDownBaseClasses$1.selected);
            selectedItem ? (this.setProperties({
                index: this.getIndexByValue(selectedItem.getAttribute("data-value"))
            }), this.activeIndex = this.index) : (this.removeFocus(), this.list.querySelector("." + dropDownBaseClasses$1.li).classList.add(dropDownListClasses$1.focus));
        }, DropDownList.prototype.removeFocus = function() {
            var highlightedItem = this.list.querySelectorAll("." + dropDownListClasses$1.focus);
            highlightedItem && highlightedItem.length && removeClass(highlightedItem, dropDownListClasses$1.focus);
        }, DropDownList.prototype.renderPopup = function() {
            if (this.popupObj && document.body.contains(this.popupObj.element)) this.refreshPopup(); else {
                var args = {
                    cancel: !1
                };
                if (this.trigger("beforeOpen", args), !args.cancel) {
                    var popupEle = this.createElement("div", {
                        id: this.element.id + "_popup",
                        className: "e-ddl e-popup " + (null != this.cssClass ? this.cssClass : "")
                    }), searchBox = this.setSearchBox(popupEle);
                    if (this.listHeight = formatUnit(this.popupHeight), this.headerTemplate && this.setHeaderTemplate(popupEle), 
                    append([ this.list ], popupEle), this.footerTemplate && this.setFooterTemplate(popupEle), 
                    document.body.appendChild(popupEle), popupEle.style.visibility = "hidden", "auto" !== this.popupHeight) {
                        if (this.searchBoxHeight = 0, isNullOrUndefined(searchBox.container) || (this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height, 
                        this.listHeight = (parseInt(this.listHeight, 10) - this.searchBoxHeight).toString() + "px"), 
                        this.headerTemplate) {
                            var height = Math.round(this.header.getBoundingClientRect().height);
                            this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + "px";
                        }
                        if (this.footerTemplate) {
                            height = Math.round(this.footer.getBoundingClientRect().height);
                            this.listHeight = (parseInt(this.listHeight, 10) - (height + this.searchBoxHeight)).toString() + "px";
                        }
                        this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + "px", 
                        popupEle.style.maxHeight = formatUnit(this.popupHeight);
                    } else popupEle.style.height = "auto";
                    var left, offsetValue = 0;
                    if (!isNullOrUndefined(this.selectedLI) && !isNullOrUndefined(this.activeIndex) && this.activeIndex >= 0 ? this.setScrollPosition() : this.list.scrollTop = 0, 
                    Browser.isDevice && !this.allowFiltering && ("dropdownlist" === this.getModuleName() || this.isDropDownClick && "combobox" === this.getModuleName())) {
                        offsetValue = this.getOffsetValue(popupEle);
                        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
                        left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10));
                    }
                    this.getFocusElement(), this.createPopup(popupEle, offsetValue, left), this.checkCollision(popupEle), 
                    Browser.isDevice && (this.popupObj.element.classList.add(dropDownListClasses$1.device), 
                    ("dropdownlist" === this.getModuleName() || "combobox" === this.getModuleName() && !this.allowFiltering && this.isDropDownClick) && (this.popupObj.collision = {
                        X: "fit",
                        Y: "fit"
                    }), this.isFilterLayout() && (this.popupObj.element.classList.add(dropDownListClasses$1.mobileFilter), 
                    this.popupObj.position = {
                        X: 0,
                        Y: 0
                    }, this.popupObj.dataBind(), attributes(this.popupObj.element, {
                        style: "left:0px;right:0px;top:0px;bottom:0px;"
                    }), addClass([ document.body, this.popupObj.element ], dropDownListClasses$1.popupFullScreen), 
                    this.setSearchBoxPosition(), this.backIconElement = searchBox.container.querySelector(".e-back-icon"), 
                    this.clearIconElement = searchBox.container.querySelector("." + dropDownListClasses$1.clearIcon), 
                    EventHandler.add(this.backIconElement, "click", this.clickOnBackIcon, this), EventHandler.add(this.clearIconElement, "click", this.clearText, this))), 
                    popupEle.style.visibility = "visible", addClass([ popupEle ], "e-popup-close");
                    for (var _i = 0, scrollParentElements_1 = this.popupObj.getScrollableParent(this.inputWrapper.container); _i < scrollParentElements_1.length; _i++) {
                        var element = scrollParentElements_1[_i];
                        EventHandler.add(element, "scroll", this.scrollHandler, this);
                    }
                    Browser.isDevice && this.isFilterLayout() && EventHandler.add(this.list, "scroll", this.listScroll, this), 
                    attributes(this.targetElement(), {
                        "aria-expanded": "true"
                    });
                    addClass([ this.isFiltering() ? this.filterInput.parentElement : this.inputWrapper.container ], [ dropDownListClasses$1.inputFocus ]);
                    this.beforePopupOpen = !0;
                    var eventArgs = {
                        popup: this.popupObj,
                        cancel: !1,
                        animation: {
                            name: "FadeIn",
                            duration: 100
                        }
                    };
                    this.trigger("open", eventArgs), eventArgs.cancel || (addClass([ this.inputWrapper.container ], [ dropDownListClasses$1.iconAnimation ]), 
                    this.popupObj.show(new Animation(eventArgs.animation), 1e3 === this.zIndex ? this.element : null));
                }
            }
        }, DropDownList.prototype.checkCollision = function(popupEle) {
            if (!Browser.isDevice || Browser.isDevice && "dropdownlist" !== this.getModuleName() && !this.isDropDownClick) {
                isCollide(popupEle).length > 0 && (popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px");
            }
        }, DropDownList.prototype.getOffsetValue = function(popupEle) {
            var popupStyles = getComputedStyle(popupEle), borderTop = parseInt(popupStyles.borderTop, 10), borderBottom = parseInt(popupStyles.borderBottom, 10);
            return this.setPopupPosition(borderTop + borderBottom);
        }, DropDownList.prototype.createPopup = function(element, offsetValue, left) {
            var _this = this;
            this.popupObj = new Popup(element, {
                width: this.setWidth(),
                targetType: "relative",
                relateTo: this.inputWrapper.container,
                collision: {
                    X: "flip",
                    Y: "flip"
                },
                offsetY: offsetValue,
                enableRtl: this.enableRtl,
                offsetX: left,
                position: {
                    X: "left",
                    Y: "bottom"
                },
                zIndex: this.zIndex,
                close: function() {
                    _this.isDocumentClick || _this.focusDropDown(), _this.isDocumentClick = !1, _this.destroyPopup();
                },
                open: function() {
                    EventHandler.add(document, "mousedown", _this.onDocumentClick, _this), _this.isPopupOpen = !0, 
                    _this.isFilterLayout() && (removeClass([ _this.inputWrapper.container ], [ dropDownListClasses$1.inputFocus ]), 
                    _this.isFilterFocus = !0, _this.filterInput.focus(), _this.inputWrapper.clearButton && addClass([ _this.inputWrapper.clearButton ], dropDownListClasses$1.clearIconHide)), 
                    _this.activeStateChange();
                }
            });
        }, DropDownList.prototype.isEmptyList = function() {
            return !isNullOrUndefined(this.liCollections) && 0 === this.liCollections.length;
        }, DropDownList.prototype.getFocusElement = function() {}, DropDownList.prototype.isFilterLayout = function() {
            return "dropdownlist" === this.getModuleName() && this.allowFiltering;
        }, DropDownList.prototype.scrollHandler = function() {
            Browser.isDevice && ("dropdownlist" === this.getModuleName() && !this.isFilterLayout() || "combobox" === this.getModuleName() && !this.allowFiltering && this.isDropDownClick) && this.hidePopup(), 
            this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) && (this.fixedHeaderElement.style.zIndex = "0", 
            this.fixedHeaderElement.style.display = "none");
        }, DropDownList.prototype.setSearchBoxPosition = function() {
            var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
            this.popupObj.element.style.maxHeight = "100%", this.popupObj.element.style.width = "100%", 
            this.list.style.maxHeight = window.innerHeight - searchBoxHeight + "px", this.list.style.height = window.innerHeight - searchBoxHeight + "px";
            var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses$1.clearIcon);
            detach(this.filterInput), clearElement.parentElement.insertBefore(this.filterInput, clearElement);
        }, DropDownList.prototype.setPopupPosition = function(border) {
            var offsetValue, popupOffset = border, selectedLI = this.list.querySelector("." + dropDownListClasses$1.focus) || this.selectedLI, firstItem = this.isEmptyList() ? this.list : this.liCollections[0], lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1], liHeight = firstItem.getBoundingClientRect().height, listHeight = this.list.offsetHeight / 2, height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
            if (lastItem.offsetTop - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {
                var count = this.list.offsetHeight / liHeight, paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
                offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom, 
                this.list.scrollTop = selectedLI.offsetTop;
            } else height > listHeight ? (offsetValue = listHeight - liHeight / 2, this.list.scrollTop = height - listHeight + liHeight / 2) : offsetValue = height;
            return -(offsetValue = offsetValue + liHeight + popupOffset - (liHeight - this.inputWrapper.container.offsetHeight) / 2);
        }, DropDownList.prototype.setWidth = function() {
            var width = formatUnit(this.popupWidth);
            if (width.indexOf("%") > -1) {
                width = (this.inputWrapper.container.offsetWidth * parseFloat(width) / 100).toString() + "px";
            }
            if (Browser.isDevice && !this.allowFiltering && ("dropdownlist" === this.getModuleName() || this.isDropDownClick && "combobox" === this.getModuleName())) {
                var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
                width = parseInt(width, 10) + 2 * (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) + "px";
            }
            return width;
        }, DropDownList.prototype.scrollBottom = function(isInitial) {
            var currentOffset = this.list.offsetHeight, nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop, nextOffset = this.list.scrollTop + nextBottom - currentOffset;
            nextOffset = isInitial ? nextOffset + 2 * parseInt(getComputedStyle(this.list).paddingTop, 10) : nextOffset;
            var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
            boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange, 
            0 === this.activeIndex ? this.list.scrollTop = 0 : (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) && (this.list.scrollTop = nextOffset);
        }, DropDownList.prototype.scrollTop = function() {
            var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
            this.selectedLI.offsetTop, this.selectedLI.offsetHeight, this.list.scrollTop;
            nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
            var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
            0 === this.activeIndex ? this.list.scrollTop = 0 : nextOffset < 0 ? this.list.scrollTop = this.list.scrollTop + nextOffset : boxRange > 0 && this.list.offsetHeight > boxRange || (this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0));
        }, DropDownList.prototype.isEditTextBox = function() {
            return !1;
        }, DropDownList.prototype.isFiltering = function() {
            return this.allowFiltering;
        }, DropDownList.prototype.isPopupButton = function() {
            return !0;
        }, DropDownList.prototype.setScrollPosition = function(e) {
            if (isNullOrUndefined(e)) this.scrollBottom(!0); else switch (e.action) {
              case "pageDown":
              case "down":
              case "end":
                this.scrollBottom();
                break;

              default:
                this.scrollTop();
            }
        }, DropDownList.prototype.clearText = function() {
            this.filterInput.value = "", this.searchLists(null);
        }, DropDownList.prototype.listScroll = function() {
            this.filterInput.blur();
        }, DropDownList.prototype.closePopup = function(delay) {
            if (this.isTyped = !1, this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen) {
                EventHandler.remove(document, "mousedown", this.onDocumentClick), this.isActive = !1, 
                this.filterInputObj = null, this.isDropDownClick = !1, this.preventAutoFill = !1;
                for (var _i = 0, scrollableParentElements_1 = this.popupObj.getScrollableParent(this.inputWrapper.container); _i < scrollableParentElements_1.length; _i++) {
                    var element = scrollableParentElements_1[_i];
                    EventHandler.remove(element, "scroll", this.scrollHandler);
                }
                Browser.isDevice && this.isFilterLayout() && (removeClass([ document.body, this.popupObj.element ], dropDownListClasses$1.popupFullScreen), 
                EventHandler.remove(this.list, "scroll", this.listScroll)), this.isFilterLayout() && (Browser.isDevice || (this.searchKeyModule.destroy(), 
                this.clearIconElement && EventHandler.remove(this.clearIconElement, "click", this.clearText)), 
                this.backIconElement && (EventHandler.remove(this.backIconElement, "click", this.clickOnBackIcon), 
                EventHandler.remove(this.clearIconElement, "click", this.clearText)), EventHandler.remove(this.filterInput, "input", this.onInput), 
                EventHandler.remove(this.filterInput, "keyup", this.onFilterUp), EventHandler.remove(this.filterInput, "keydown", this.onFilterDown), 
                EventHandler.remove(this.filterInput, "blur", this.onBlur), this.filterInput = null), 
                attributes(this.targetElement(), {
                    "aria-expanded": "false",
                    "aria-activedescendant": null
                }), this.inputWrapper.container.classList.remove(dropDownListClasses$1.iconAnimation), 
                this.isFiltering() && (this.actionCompleteData.isUpdated = !1), this.beforePopupOpen = !1;
                var animModel = {
                    name: "FadeOut",
                    duration: 100,
                    delay: delay || 0
                }, eventArgs = {
                    popup: this.popupObj,
                    cancel: !1,
                    animation: animModel
                };
                this.trigger("close", eventArgs), eventArgs.cancel || ("autocomplete" === this.getModuleName() && this.rippleFun(), 
                this.isPopupOpen ? this.popupObj.hide(new Animation(eventArgs.animation)) : this.destroyPopup());
            }
        }, DropDownList.prototype.destroyPopup = function() {
            this.isPopupOpen = !1, this.isFilterFocus = !1, this.popupObj.destroy(), detach(this.popupObj.element);
        }, DropDownList.prototype.clickOnBackIcon = function() {
            this.hidePopup(), this.focusIn();
        }, DropDownList.prototype.render = function() {
            "INPUT" === this.element.tagName ? this.inputElement = this.element : (this.inputElement = this.createElement("input"), 
            this.element.tagName !== this.getNgDirective() && (this.element.style.display = "none"), 
            this.element.parentElement.insertBefore(this.inputElement, this.element), this.preventTabIndex(this.inputElement)), 
            this.inputWrapper = Input.createInput({
                element: this.inputElement,
                buttons: this.isPopupButton() ? [ dropDownListClasses$1.icon ] : null,
                floatLabelType: this.floatLabelType,
                properties: {
                    readonly: "dropdownlist" === this.getModuleName() || this.readonly,
                    placeholder: this.placeholder,
                    cssClass: this.cssClass,
                    enabled: this.enabled,
                    enableRtl: this.enableRtl,
                    showClearButton: this.showClearButton
                }
            }, this.createElement), this.element.tagName === this.getNgDirective() ? this.element.appendChild(this.inputWrapper.container) : this.inputElement.parentElement.insertBefore(this.element, this.inputElement), 
            this.hiddenElement = this.createElement("select", {
                attrs: {
                    "aria-hidden": "true",
                    tabindex: "-1",
                    class: dropDownListClasses$1.hiddenElement
                }
            }), prepend([ this.hiddenElement ], this.inputWrapper.container), this.validationAttribute(this.element, this.hiddenElement), 
            this.setFields(), this.inputWrapper.container.style.width = formatUnit(this.width), 
            this.inputWrapper.container.classList.add("e-ddl"), this.wireEvent(), this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0", 
            this.element.removeAttribute("tabindex");
            var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
            if (this.element.id = id, this.hiddenElement.id = id + "_hidden", this.targetElement().setAttribute("tabindex", this.tabIndex), 
            attributes(this.targetElement(), this.getAriaAttributes()), this.setHTMLAttributes(), 
            null !== this.value || null !== this.activeIndex || null !== this.text) this.initValue(); else if ("SELECT" === this.element.tagName && this.element.options[0]) {
                var selectElement = this.element;
                this.value = selectElement.options[selectElement.selectedIndex].value, this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent, 
                this.initValue();
            }
            this.preventTabIndex(this.element), this.enabled || (this.targetElement().tabIndex = -1), 
            this.initial = !1, this.element.style.opacity = "", this.inputElement.onselect = function(e) {
                e.stopImmediatePropagation();
            }, this.inputElement.onchange = function(e) {
                e.stopImmediatePropagation();
            }, this.element.hasAttribute("autofocus") && this.focusIn();
        }, DropDownList.prototype.setFooterTemplate = function(popupEle) {
            this.footer ? this.footer.innerHTML = "" : (this.footer = this.createElement("div"), 
            addClass([ this.footer ], dropDownListClasses$1.footer));
            for (var _i = 0, _a = compile$$1(this.footerTemplate)({}); _i < _a.length; _i++) {
                var item = _a[_i];
                this.footer.appendChild(item);
            }
            append([ this.footer ], popupEle);
        }, DropDownList.prototype.setHeaderTemplate = function(popupEle) {
            this.header ? this.header.innerHTML = "" : (this.header = this.createElement("div"), 
            addClass([ this.header ], dropDownListClasses$1.header));
            for (var _i = 0, _a = compile$$1(this.headerTemplate)({}); _i < _a.length; _i++) {
                var item = _a[_i];
                this.header.appendChild(item);
            }
            var contentEle = popupEle.querySelector("div.e-content");
            popupEle.insertBefore(this.header, contentEle);
        }, DropDownList.prototype.setOldText = function(text) {
            this.text = text;
        }, DropDownList.prototype.setOldValue = function(value) {
            this.value = value;
        }, DropDownList.prototype.refreshPopup = function() {
            isNullOrUndefined(this.popupObj) || !document.body.contains(this.popupObj.element) || (!this.allowFiltering || Browser.isDevice && this.isFilterLayout()) && "autocomplete" !== this.getModuleName() || this.popupObj.refreshPosition(this.inputWrapper.container);
        }, DropDownList.prototype.updateDataSource = function(props) {
            if (this.clear(null, props), this.resetList(this.dataSource), !this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
                this.itemData = this.getDataByValue(this.value);
                var dataItem = this.getItemData();
                this.setProperties({
                    value: dataItem.value,
                    text: dataItem.text
                });
            }
        }, DropDownList.prototype.onPropertyChanged = function(newProp, oldProp) {
            "dropdownlist" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "query":
                  case "dataSource":
                    break;

                  case "htmlAttributes":
                    this.setHTMLAttributes();
                    break;

                  case "width":
                    setStyleAttribute(this.inputWrapper.container, {
                        width: formatUnit(newProp.width)
                    });
                    break;

                  case "placeholder":
                    Input.setPlaceholder(newProp.placeholder, this.inputElement);
                    break;

                  case "filterBarPlaceholder":
                    this.filterInput && Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
                    break;

                  case "readonly":
                    "dropdownlist" !== this.getModuleName() && Input.setReadonly(newProp.readonly, this.inputElement);
                    break;

                  case "cssClass":
                    this.setCssClass(newProp, oldProp);
                    break;

                  case "enableRtl":
                    this.setEnableRtl();
                    break;

                  case "enabled":
                    this.setEnable();
                    break;

                  case "text":
                    if (null === newProp.text) {
                        this.clear();
                        break;
                    }
                    if (this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
                    this.renderList()), !this.initRemoteRender) {
                        var li = this.getElementByText(newProp.text);
                        this.isValidLI(li) ? this.setSelection(li, null) : this.setOldText(oldProp.text);
                    }
                    break;

                  case "value":
                    if (null === newProp.value) {
                        this.clear();
                        break;
                    }
                    if (this.notify("beforeValueChange", {
                        newProp: newProp
                    }), this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
                    this.renderList()), !this.initRemoteRender) {
                        var item = this.getElementByValue(newProp.value);
                        this.isValidLI(item) ? this.setSelection(item, null) : this.setOldValue(oldProp.value);
                    }
                    break;

                  case "index":
                    if (null === newProp.index) {
                        this.clear();
                        break;
                    }
                    if (this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
                    this.renderList()), !this.initRemoteRender) {
                        var element = this.liCollections[newProp.index];
                        this.isValidLI(element) ? this.setSelection(element, null) : this.index = oldProp.index;
                    }
                    break;

                  case "footerTemplate":
                    this.popupObj && this.setFooterTemplate(this.popupObj.element);
                    break;

                  case "headerTemplate":
                    this.popupObj && this.setHeaderTemplate(this.popupObj.element);
                    break;

                  case "valueTemplate":
                    isNullOrUndefined(this.itemData) || null == this.valueTemplate || this.setValueTemplate();
                    break;

                  case "floatLabelType":
                    Input.removeFloating(this.inputWrapper), Input.addFloating(this.inputElement, newProp.floatLabelType, this.placeholder, this.createElement);
                    break;

                  case "showClearButton":
                    Input.setClearButton(newProp.showClearButton, this.inputElement, this.inputWrapper, null, this.createElement), 
                    this.bindClearEvent();
                    break;

                  default:
                    var ddlProps = void 0;
                    ddlProps = this.getPropObject(prop, newProp, oldProp), _super.prototype.onPropertyChanged.call(this, ddlProps.newProperty, ddlProps.oldProperty);
                }
            }
        }, DropDownList.prototype.setCssClass = function(newProp, oldProp) {
            this.inputWrapper.container.classList.remove(oldProp.cssClass), Input.setCssClass(newProp.cssClass, [ this.inputWrapper.container ]), 
            this.popupObj && (this.popupObj.element.classList.remove(oldProp.cssClass), this.popupObj.element.classList.add(newProp.cssClass));
        }, DropDownList.prototype.getModuleName = function() {
            return "dropdownlist";
        }, DropDownList.prototype.showPopup = function() {
            if (this.enabled) if (this.beforePopupOpen) this.refreshPopup(); else {
                if (this.beforePopupOpen = !0, this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0] ? (this.isActive = !0, 
                this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, !0)) : (isNullOrUndefined(this.list) || !isUndefined(this.list) && this.list.classList.contains(dropDownBaseClasses$1.noData)) && this.renderList(), 
                Browser.isDevice && this.isFilterLayout()) {
                    var proxy_2 = this;
                    window.onpopstate = function() {
                        proxy_2.hidePopup();
                    }, history.pushState({}, "");
                }
                isNullOrUndefined(this.list.children[0]) && !this.list.classList.contains(dropDownBaseClasses$1.noData) || this.renderPopup(), 
                attributes(this.targetElement(), {
                    "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
                });
            }
        }, DropDownList.prototype.hidePopup = function() {
            this.isEscapeKey && "dropdownlist" === this.getModuleName() && (Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.isEscapeKey = !1, isNullOrUndefined(this.index) ? this.resetSelection() : (this.selectedLI = this.liCollections[this.index], 
            this.updateSelectedItem(this.selectedLI, null, !0), this.valueTemplate && null !== this.itemData && this.setValueTemplate())), 
            this.closePopup();
            var dataItem = this.getItemData();
            "" !== this.inputElement.value.trim() || this.isInteracted || !this.isSelectCustom && (isNullOrUndefined(this.selectedLI) || this.inputElement.value === dataItem.text) || (this.isSelectCustom = !1, 
            this.clear());
        }, DropDownList.prototype.focusIn = function() {
            if (this.enabled && !this.targetElement().classList.contains(dropDownListClasses$1.disable)) {
                var isFocused = !1;
                this.preventFocus && Browser.isDevice && (this.inputWrapper.container.tabIndex = 1, 
                this.inputWrapper.container.focus(), this.preventFocus = !1, isFocused = !0), isFocused || this.targetElement().focus(), 
                addClass([ this.inputWrapper.container ], [ dropDownListClasses$1.inputFocus ]), 
                this.onFocus();
            }
        }, DropDownList.prototype.focusOut = function() {
            this.enabled && (this.isTyped = !0, this.hidePopup(), this.targetElement().blur(), 
            removeClass([ this.inputWrapper.container ], [ dropDownListClasses$1.inputFocus ]));
        }, DropDownList.prototype.destroy = function() {
            var _this = this;
            if (this.isActive = !1, this.hidePopup(), this.unWireEvent(), this.list && this.unWireListEvents(), 
            !this.element || this.element.classList.contains("e-" + this.getModuleName())) {
                [ "readonly", "aria-disabled", "aria-placeholder", "placeholder", "aria-owns", "aria-labelledby", "aria-haspopup", "aria-expanded", "aria-activedescendant", "autocomplete", "aria-readonly", "autocorrect", "autocapitalize", "spellcheck", "aria-autocomplete" ].forEach(function(value) {
                    _this.inputElement.removeAttribute(value);
                }), this.inputElement.setAttribute("tabindex", this.tabIndex), this.inputElement.classList.remove("e-input"), 
                Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton), 
                this.element.style.display = "block", this.inputWrapper.container.parentElement.tagName === this.getNgDirective() ? detach(this.inputWrapper.container) : (this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container), 
                detach(this.inputWrapper.container)), _super.prototype.destroy.call(this);
            }
        }, DropDownList.prototype.getItems = function() {
            return this.list || (this.dataSource instanceof DataManager && (this.initRemoteRender = !0), 
            this.renderList()), this.ulElement ? _super.prototype.getItems.call(this) : [];
        }, __decorate$55([ Property(null) ], DropDownList.prototype, "cssClass", void 0), 
        __decorate$55([ Property("100%") ], DropDownList.prototype, "width", void 0), __decorate$55([ Property("300px") ], DropDownList.prototype, "popupHeight", void 0), 
        __decorate$55([ Property("100%") ], DropDownList.prototype, "popupWidth", void 0), 
        __decorate$55([ Property(null) ], DropDownList.prototype, "placeholder", void 0), 
        __decorate$55([ Property(null) ], DropDownList.prototype, "filterBarPlaceholder", void 0), 
        __decorate$55([ Property({}) ], DropDownList.prototype, "htmlAttributes", void 0), 
        __decorate$55([ Property(null) ], DropDownList.prototype, "query", void 0), __decorate$55([ Property(null) ], DropDownList.prototype, "valueTemplate", void 0), 
        __decorate$55([ Property(null) ], DropDownList.prototype, "headerTemplate", void 0), 
        __decorate$55([ Property(null) ], DropDownList.prototype, "footerTemplate", void 0), 
        __decorate$55([ Property(!1) ], DropDownList.prototype, "allowFiltering", void 0), 
        __decorate$55([ Property(!1) ], DropDownList.prototype, "readonly", void 0), __decorate$55([ Property(null) ], DropDownList.prototype, "text", void 0), 
        __decorate$55([ Property(null) ], DropDownList.prototype, "value", void 0), __decorate$55([ Property(null) ], DropDownList.prototype, "index", void 0), 
        __decorate$55([ Property("Never") ], DropDownList.prototype, "floatLabelType", void 0), 
        __decorate$55([ Property(!1) ], DropDownList.prototype, "showClearButton", void 0), 
        __decorate$55([ Event() ], DropDownList.prototype, "filtering", void 0), __decorate$55([ Event() ], DropDownList.prototype, "change", void 0), 
        __decorate$55([ Event() ], DropDownList.prototype, "beforeOpen", void 0), __decorate$55([ Event() ], DropDownList.prototype, "open", void 0), 
        __decorate$55([ Event() ], DropDownList.prototype, "close", void 0), __decorate$55([ Event() ], DropDownList.prototype, "blur", void 0), 
        __decorate$55([ Event() ], DropDownList.prototype, "focus", void 0), DropDownList = __decorate$55([ NotifyPropertyChanges ], DropDownList);
    }(DropDownBase$1), __extends$112 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$57 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    dropDownListClasses$1.root = "e-combobox";
    var inputObject$3 = {
        container: null,
        buttons: []
    }, ComboBox$1 = function(_super) {
        function ComboBox(options, element) {
            return _super.call(this, options, element) || this;
        }
        return __extends$112(ComboBox, _super), ComboBox.prototype.preRender = function() {
            _super.prototype.preRender.call(this);
        }, ComboBox.prototype.wireEvent = function() {
            "combobox" === this.getModuleName() && (EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.preventBlur, this), 
            EventHandler.add(this.inputWrapper.container, "blur", this.onBlur, this)), isNullOrUndefined(this.inputWrapper.buttons[0]) || EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick, this), 
            EventHandler.add(this.inputElement, "focus", this.targetFocus, this), this.readonly || (EventHandler.add(this.inputElement, "input", this.onInput, this), 
            EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this), EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this)), 
            this.bindCommonEvent();
        }, ComboBox.prototype.preventBlur = function(e) {
            (this.allowFiltering || document.activeElement === this.inputElement || document.activeElement.classList.contains(dropDownListClasses$1.input) || !Browser.isDevice) && Browser.isDevice || e.preventDefault();
        }, ComboBox.prototype.targetElement = function() {
            return this.inputElement;
        }, ComboBox.prototype.setOldText = function(text) {
            Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.customValue(), this.removeSelection();
        }, ComboBox.prototype.setOldValue = function(value) {
            this.allowCustom ? this.valueMuteChange(this.value) : this.valueMuteChange(null), 
            this.removeSelection(), this.setHiddenValue();
        }, ComboBox.prototype.valueMuteChange = function(value) {
            var inputValue = isNullOrUndefined(value) ? null : value.toString();
            Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.setProperties({
                value: value,
                text: value,
                index: null
            }, !0), this.activeIndex = this.index;
            var fields = this.fields, dataItem = {};
            dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString(), dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString(), 
            this.itemData = dataItem, this.item = null, this.previousValue !== this.value && this.detachChangeEvent(null);
        }, ComboBox.prototype.updateValues = function() {
            if (isNullOrUndefined(this.value)) if (this.text && isNullOrUndefined(this.value)) {
                (li = this.getElementByText(this.text)) ? this.setSelection(li, null) : (Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.customValue());
            } else this.setSelection(this.liCollections[this.activeIndex], null); else {
                var li;
                (li = this.getElementByValue(this.value)) ? this.setSelection(li, null) : this.allowCustom ? this.valueMuteChange(this.value) : this.valueMuteChange(null);
            }
            this.setHiddenValue(), Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }, ComboBox.prototype.updateIconState = function() {
            this.showClearButton && ("" === this.inputElement.value || this.readonly ? addClass([ this.inputWrapper.clearButton ], dropDownListClasses$1.clearIconHide) : removeClass([ this.inputWrapper.clearButton ], dropDownListClasses$1.clearIconHide));
        }, ComboBox.prototype.getAriaAttributes = function() {
            return {
                "aria-owns": this.element.id + "_options",
                role: "combobox",
                "aria-autocomplete": "both",
                "aria-labelledby": this.hiddenElement.id,
                "aria-hasPopup": "true",
                "aria-expanded": "false",
                "aria-readonly": this.readonly.toString(),
                autocomplete: "off",
                autocorrect: "off",
                autocapitalize: "off",
                spellcheck: "false"
            };
        }, ComboBox.prototype.searchLists = function(e) {
            this.isTyped = !0, this.isFiltering() ? (_super.prototype.searchLists.call(this, e), 
            "" === this.filterInput.value.trim() && this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses$1.li))) : (this.ulElement && "" === this.inputElement.value && this.preventAutoFill && this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses$1.li)), 
            this.incrementalSearch(e));
        }, ComboBox.prototype.getNgDirective = function() {
            return "EJS-COMBOBOX";
        }, ComboBox.prototype.setSearchBox = function() {
            return this.filterInput = this.inputElement, this.isFiltering() ? this.inputWrapper : inputObject$3;
        }, ComboBox.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
            _super.prototype.onActionComplete.call(this, ulElement, list, e), this.isSelectCustom && this.removeSelection(), 
            !this.preventAutoFill && "combobox" === this.getModuleName() && this.isTyped && this.inlineSearch();
        }, ComboBox.prototype.getFocusElement = function() {
            var dataItem = this.isSelectCustom ? {
                text: ""
            } : this.getItemData(), selected = this.list.querySelector("." + dropDownListClasses$1.selected);
            if (dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) return selected;
            if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {
                var activeElement = Search$2(this.inputElement.value, this.liCollections, "StartsWith", !0).item;
                if (isNullOrUndefined(activeElement)) this.isSelectCustom && "" !== this.inputElement.value.trim() && (this.removeFocus(), 
                this.list.scrollTop = 0); else {
                    var count = this.getIndexByValue(activeElement.getAttribute("data-value")) - 1, height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10);
                    if (!isNaN(height) && "autocomplete" !== this.getModuleName()) {
                        this.removeFocus();
                        var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
                        this.list.scrollTop = count * height + fixedHead, addClass([ activeElement ], dropDownListClasses$1.focus);
                    }
                }
                return activeElement;
            }
            return null;
        }, ComboBox.prototype.setValue = function(e) {
            return e && "keydown" === e.type && "enter" === e.action && this.removeFillSelection(), 
            this.autofill && "combobox" === this.getModuleName() && e && "keydown" === e.type && "enter" !== e.action ? (this.preventAutoFill = !1, 
            this.inlineSearch(e), !1) : _super.prototype.setValue.call(this, e);
        }, ComboBox.prototype.showSpinner = function() {
            isNullOrUndefined(this.spinnerElement) && (this.spinnerElement = "autocomplete" === this.getModuleName() ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan("e-input-group-icon e-atc-spinner-icon", this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton, 
            addClass([ this.spinnerElement ], dropDownListClasses$1.disableIcon), createSpinner({
                target: this.spinnerElement,
                width: Browser.isDevice ? "16px" : "14px"
            }, this.createElement), showSpinner(this.spinnerElement));
        }, ComboBox.prototype.hideSpinner = function() {
            isNullOrUndefined(this.spinnerElement) || (hideSpinner(this.spinnerElement), removeClass([ this.spinnerElement ], dropDownListClasses$1.disableIcon), 
            this.spinnerElement.classList.contains("e-atc-spinner-icon") ? detach(this.spinnerElement) : this.spinnerElement.innerHTML = "", 
            this.spinnerElement = null);
        }, ComboBox.prototype.setAutoFill = function(activeElement, isHover) {
            if (isHover || this.setHoverList(activeElement), this.autofill && !this.preventAutoFill) {
                var currentValue = this.getTextByValue(activeElement.getAttribute("data-value")).toString(), currentFillValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
                "combobox" === this.getModuleName() && (this.isSelected || this.previousValue === currentFillValue ? this.updateSelectedItem(activeElement, null, !0) : (this.updateSelectedItem(activeElement, null), 
                this.isSelected = !0, this.previousValue = this.getFormattedValue(activeElement.getAttribute("data-value")))), 
                this.isAndroidAutoFill(currentValue) || this.setAutoFillSelection(currentValue);
            }
        }, ComboBox.prototype.isAndroidAutoFill = function(value) {
            if (Browser.isAndroid) {
                var currentPoints = this.getSelectionPoints(), prevEnd = this.prevSelectPoints.end, curEnd = currentPoints.end, prevStart = this.prevSelectPoints.start, curStart = currentPoints.start;
                return 0 !== prevEnd && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart);
            }
            return !1;
        }, ComboBox.prototype.clear = function(e, property) {
            (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) && _super.prototype.clear.call(this, e);
        }, ComboBox.prototype.isSelectFocusItem = function(element) {
            return !isNullOrUndefined(element);
        }, ComboBox.prototype.inlineSearch = function(e) {
            var isKeyNavigate = e && ("down" === e.action || "up" === e.action || "home" === e.action || "end" === e.action || "pageUp" === e.action || "pageDown" === e.action), activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();
            if (isNullOrUndefined(activeElement)) if ("" === this.inputElement.value) {
                this.activeIndex = null, this.list.scrollTop = 0;
                var focusItem = this.list.querySelector("." + dropDownListClasses$1.li);
                this.setHoverList(focusItem);
            } else this.activeIndex = null, this.removeSelection(), this.removeFocus(); else {
                if (!isKeyNavigate) {
                    var value = this.getFormattedValue(activeElement.getAttribute("data-value"));
                    this.activeIndex = this.getIndexByValue(value), this.activeIndex = isNullOrUndefined(this.activeIndex) ? null : this.activeIndex;
                }
                this.preventAutoFill = "" !== this.inputElement.value && this.preventAutoFill, this.setAutoFill(activeElement, isKeyNavigate);
            }
        }, ComboBox.prototype.incrementalSearch = function(e) {
            this.showPopup(), isNullOrUndefined(this.listData) || (this.inlineSearch(e), e.preventDefault());
        }, ComboBox.prototype.setAutoFillSelection = function(currentValue) {
            var selection = this.getSelectionPoints(), value = this.inputElement.value.substr(0, selection.start);
            if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
                var inputValue = value + currentValue.substr(value.length, currentValue.length);
                Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
            } else Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton), 
            this.inputElement.setSelectionRange(0, this.inputElement.value.length);
        }, ComboBox.prototype.getValueByText = function(text) {
            return _super.prototype.getValueByText.call(this, text, !0, this.ignoreAccent);
        }, ComboBox.prototype.unWireEvent = function() {
            "combobox" === this.getModuleName() && (EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.preventBlur), 
            EventHandler.remove(this.inputWrapper.container, "blur", this.onBlur)), isNullOrUndefined(this.inputWrapper.buttons[0]) || EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick), 
            EventHandler.remove(this.inputElement, "focus", this.targetFocus), this.readonly || (EventHandler.remove(this.inputElement, "input", this.onInput), 
            EventHandler.remove(this.inputElement, "keyup", this.onFilterUp), EventHandler.remove(this.inputElement, "keydown", this.onFilterDown)), 
            this.unBindCommonEvent();
        }, ComboBox.prototype.setSelection = function(li, e) {
            _super.prototype.setSelection.call(this, li, e), isNullOrUndefined(li) || this.autofill || this.isDropDownClick || this.removeFocus();
        }, ComboBox.prototype.selectCurrentItem = function(e) {
            var li;
            this.isPopupOpen && ((li = this.list.querySelector("." + dropDownListClasses$1.focus)) && (this.setSelection(li, e), 
            this.isTyped = !1), this.isSelected && (this.isSelectCustom = !1, this.onChangeEvent(e))), 
            "enter" === e.action && "" === this.inputElement.value.trim() ? this.clear(e) : this.isTyped && !this.isSelected && isNullOrUndefined(li) && this.customValue(), 
            this.hidePopup();
        }, ComboBox.prototype.setHoverList = function(li) {
            this.removeSelection(), this.isValidLI(li) && !li.classList.contains(dropDownListClasses$1.selected) && (this.removeFocus(), 
            li.classList.add(dropDownListClasses$1.focus));
        }, ComboBox.prototype.targetFocus = function(e) {
            Browser.isDevice && !this.allowFiltering && (this.preventFocus = !1), this.onFocus();
        }, ComboBox.prototype.dropDownClick = function(e) {
            e.preventDefault(), Browser.isDevice && !this.allowFiltering && (this.preventFocus = !0), 
            _super.prototype.dropDownClick.call(this, e);
        }, ComboBox.prototype.customValue = function() {
            var value = this.getValueByText(this.inputElement.value);
            if (this.allowCustom || "" === this.inputElement.value) if ("" !== this.inputElement.value.trim()) {
                var previousValue = this.value;
                if (isNullOrUndefined(value)) {
                    var value_1 = "" === this.inputElement.value ? null : this.inputElement.value, fields = this.fields, eventArgs = void 0;
                    eventArgs = {
                        text: value_1,
                        item: {}
                    }, this.initial || this.trigger("customValueSpecifier", eventArgs);
                    var item = eventArgs.item, dataItem = {};
                    item && getValue(fields.text, item) && getValue(fields.value, item) ? dataItem = item : (setValue(fields.text, value_1, dataItem), 
                    setValue(fields.value, value_1, dataItem)), this.itemData = dataItem;
                    var changeData = {
                        text: getValue(fields.text, this.itemData),
                        value: getValue(fields.value, this.itemData),
                        index: null
                    };
                    this.setProperties(changeData, !0), this.setSelection(null, null), this.isSelectCustom = !0;
                } else this.isSelectCustom = !1, this.setProperties({
                    value: value
                });
                previousValue !== this.value && this.onChangeEvent(null);
            } else this.allowCustom && (this.isSelectCustom = !0); else this.setProperties({
                value: value
            }), isNullOrUndefined(this.value) && Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
        }, ComboBox.prototype.onPropertyChanged = function(newProp, oldProp) {
            "combobox" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "readonly":
                    Input.setReadonly(this.readonly, this.inputElement), this.readonly ? (EventHandler.remove(this.inputElement, "keyup", this.onFilterUp), 
                    EventHandler.remove(this.inputElement, "keydown", this.onFilterDown)) : (EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this), 
                    EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this));
                    break;

                  case "allowFiltering":
                    this.setSearchBox(), this.isFiltering() && "combobox" === this.getModuleName() && isNullOrUndefined(this.list) && _super.prototype.renderList.call(this);
                    break;

                  case "allowCustom":
                    break;

                  default:
                    var comboProps = void 0;
                    comboProps = this.getPropObject(prop, newProp, oldProp), _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);
                }
            }
        }, ComboBox.prototype.render = function() {
            _super.prototype.render.call(this), this.setSearchBox(), this.isFiltering() && "combobox" === this.getModuleName() && isNullOrUndefined(this.list) && _super.prototype.renderList.call(this);
        }, ComboBox.prototype.getModuleName = function() {
            return "combobox";
        }, ComboBox.prototype.hidePopup = function() {
            var inputValue = "" === this.inputElement.value ? null : this.inputElement.value;
            if (!isNullOrUndefined(this.listData)) {
                var isEscape = this.isEscapeKey;
                this.isEscapeKey && (Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton), 
                this.isEscapeKey = !1), this.autofill && this.removeFillSelection();
                var dataItem = this.isSelectCustom ? {
                    text: ""
                } : this.getItemData(), selected = this.list.querySelector("." + dropDownListClasses$1.selected);
                if (dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) return this.isSelected && (this.onChangeEvent(null), 
                this.isSelectCustom = !1), void _super.prototype.hidePopup.call(this);
                if ("combobox" === this.getModuleName() && "" !== this.inputElement.value.trim()) {
                    var searchItem = Search$2(this.inputElement.value, this.liCollections, "Equal", !0);
                    this.selectedLI = searchItem.item, isNullOrUndefined(searchItem.index) && (searchItem.index = Search$2(this.inputElement.value, this.liCollections, "StartsWith", !0).index), 
                    this.activeIndex = searchItem.index, isNullOrUndefined(this.selectedLI) ? isEscape && (this.isSelectCustom = !0, 
                    this.removeSelection()) : this.updateSelectedItem(this.selectedLI, null, !0);
                }
                this.isEscapeKey || !this.isTyped || this.isInteracted || this.customValue();
            }
            isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value && this.customValue(), 
            _super.prototype.hidePopup.call(this);
        }, ComboBox.prototype.focusIn = function() {
            this.enabled && (Browser.isDevice && !this.allowFiltering && (this.preventFocus = !0), 
            _super.prototype.focusIn.call(this));
        }, __decorate$57([ Property(!1) ], ComboBox.prototype, "autofill", void 0), __decorate$57([ Property(!0) ], ComboBox.prototype, "allowCustom", void 0), 
        __decorate$57([ Property({}) ], ComboBox.prototype, "htmlAttributes", void 0), __decorate$57([ Property(!1) ], ComboBox.prototype, "allowFiltering", void 0), 
        __decorate$57([ Property(null) ], ComboBox.prototype, "query", void 0), __decorate$57([ Property(null) ], ComboBox.prototype, "index", void 0), 
        __decorate$57([ Property(!0) ], ComboBox.prototype, "showClearButton", void 0), 
        __decorate$57([ Event() ], ComboBox.prototype, "customValueSpecifier", void 0), 
        __decorate$57([ Event() ], ComboBox.prototype, "filtering", void 0), __decorate$57([ Property(null) ], ComboBox.prototype, "valueTemplate", void 0), 
        __decorate$57([ Property("Never") ], ComboBox.prototype, "floatLabelType", void 0), 
        __decorate$57([ Property(null) ], ComboBox.prototype, "filterBarPlaceholder", void 0), 
        ComboBox = __decorate$57([ NotifyPropertyChanges ], ComboBox);
    }(DropDownList$1), __extends$109 = function() {
        var extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);
        };
        return function(d, b) {
            function __() {
                this.constructor = d;
            }
            extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
            new __());
        };
    }(), __decorate$54 = function(decorators, target, key, desc) {
        var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    dropDownListClasses$1.root = "e-autocomplete", dropDownListClasses$1.icon = "e-input-group-icon e-ddl-icon e-search-icon";
    var AutoComplete$1 = function(_super) {
        function AutoComplete(options, element) {
            var _this = _super.call(this, options, element) || this;
            return _this.isFiltered = !1, _this;
        }
        return __extends$109(AutoComplete, _super), AutoComplete.prototype.preRender = function() {
            _super.prototype.preRender.call(this);
        }, AutoComplete.prototype.getNgDirective = function() {
            return "EJS-AUTOCOMPLETE";
        }, AutoComplete.prototype.getQuery = function(query) {
            var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query(), filterType = "" !== this.queryString || isNullOrUndefined(this.value) ? this.filterType : "equal", queryString = "" !== this.queryString || isNullOrUndefined(this.value) ? this.queryString : this.value;
            if (this.isFiltered) return filterQuery;
            if (null !== this.queryString) {
                var dataType = this.typeOfData(this.dataSource).typeof;
                if ((this.dataSource instanceof DataManager || "string" !== dataType) && "number" !== dataType) {
                    var mapping = isNullOrUndefined(this.fields.value) ? "" : this.fields.value;
                    filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);
                } else filterQuery.where("", filterType, queryString, this.ignoreCase, this.ignoreAccent);
            }
            return isNullOrUndefined(this.suggestionCount) || filterQuery.take(this.suggestionCount), 
            filterQuery;
        }, AutoComplete.prototype.searchLists = function(e) {
            var _this = this;
            this.isTyped = !0, this.isSelectCustom = !1, this.isDataFetched = !1, isNullOrUndefined(this.list) && _super.prototype.renderList.call(this, !0);
            var isDownUpKey = 40 === e.keyCode || 38 === e.keyCode;
            if (this.queryString = this.filterInput.value, isDownUpKey) return this.queryString = "" === this.queryString ? null : this.queryString, 
            this.beforePopupOpen = !0, void this.resetList(this.dataSource, this.fields);
            this.isSelected = !1, this.activeIndex = null;
            var eventArgs = {
                preventDefaultAction: !1,
                text: this.filterInput.value,
                updateData: function(dataSource, query, fields) {
                    eventArgs.cancel || (_this.isFiltered = !0, _this.filterAction(dataSource, query, fields));
                },
                cancel: !1
            };
            this.trigger("filtering", eventArgs), eventArgs.cancel || this.isFiltered || eventArgs.preventDefaultAction || this.filterAction(this.dataSource, null, this.fields);
        }, AutoComplete.prototype.filterAction = function(dataSource, query, fields) {
            this.beforePopupOpen = !0, "" !== this.queryString && (this.queryString.length >= this.minLength || this.isFiltered) ? this.resetList(dataSource, fields, query) : this.hidePopup();
        }, AutoComplete.prototype.clear = function(e, property) {
            (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) && _super.prototype.clear.call(this, e), 
            this.beforePopupOpen && this.hidePopup();
        }, AutoComplete.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
            this.fixedHeaderElement = null, _super.prototype.onActionComplete.call(this, ulElement, list, e);
            var item = this.list.querySelector("." + dropDownListClasses$1.li);
            isNullOrUndefined(item) || removeClass([ item ], dropDownListClasses$1.focus), this.postBackAction();
        }, AutoComplete.prototype.postBackAction = function() {
            if (this.autofill && !isNullOrUndefined(this.liCollections[0])) {
                var items = [ this.liCollections[0] ];
                isNullOrUndefined(Search$2(this.inputElement.value, items, "StartsWith", this.ignoreCase).item) || _super.prototype.setAutoFill.call(this, this.liCollections[0], !0);
            }
        }, AutoComplete.prototype.setSelection = function(li, e) {
            if (this.isValidLI(li)) if (!isNullOrUndefined(e) && "keydown" === e.type && "enter" !== e.action && this.isValidLI(li)) {
                var value = this.getFormattedValue(li.getAttribute("data-value"));
                this.activeIndex = this.getIndexByValue(value), this.setHoverList(li), this.selectedLI = li, 
                this.setScrollPosition(e), this.autofill && (this.preventAutoFill = !1, _super.prototype.setAutoFill.call(this, li)), 
                attributes(this.inputElement, {
                    "aria-activedescendant": this.selectedLI ? this.selectedLI.id : null
                });
            } else _super.prototype.setSelection.call(this, li, e);
        }, AutoComplete.prototype.listOption = function(dataSource, fieldsSettings) {
            var _this = this, fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
            if (isNullOrUndefined(fields.itemCreated)) fields.itemCreated = function(e) {
                _this.highlight && highlightSearch$1(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
            }; else {
                var itemCreated_1 = fields.itemCreated;
                fields.itemCreated = function(e) {
                    _this.highlight && highlightSearch$1(e.item, _this.queryString, _this.ignoreCase, _this.filterType), 
                    itemCreated_1.apply(_this, [ e ]);
                };
            }
            return fields;
        }, AutoComplete.prototype.isFiltering = function() {
            return !0;
        }, AutoComplete.prototype.renderPopup = function() {
            this.list.scrollTop = 0, _super.prototype.renderPopup.call(this);
        }, AutoComplete.prototype.isEditTextBox = function() {
            return "" !== this.inputElement.value.trim();
        }, AutoComplete.prototype.isPopupButton = function() {
            return this.showPopupButton;
        }, AutoComplete.prototype.isSelectFocusItem = function(element) {
            return !1;
        }, AutoComplete.prototype.showPopup = function() {
            this.enabled && (this.beforePopupOpen ? this.refreshPopup() : (this.beforePopupOpen = !0, 
            this.preventAutoFill = !0, isNullOrUndefined(this.list) ? this.renderList() : this.resetList(this.dataSource, this.fields)));
        }, AutoComplete.prototype.hidePopup = function() {
            _super.prototype.hidePopup.call(this), this.activeIndex = -1;
        }, AutoComplete.prototype.onPropertyChanged = function(newProp, oldProp) {
            "autocomplete" === this.getModuleName() && this.setUpdateInitial([ "fields", "query", "dataSource" ], newProp);
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                  case "showPopupButton":
                    if (this.showPopupButton) {
                        var button = Input.appendSpan(dropDownListClasses$1.icon, this.inputWrapper.container, this.createElement);
                        this.inputWrapper.buttons[0] = button, EventHandler.add(this.inputWrapper.buttons[0], "click", this.dropDownClick, this);
                    } else detach(this.inputWrapper.buttons[0]), this.inputWrapper.buttons[0] = null;
                    break;

                  default:
                    var atcProps = void 0;
                    atcProps = this.getPropObject(prop, newProp, oldProp), _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);
                }
            }
        }, AutoComplete.prototype.getModuleName = function() {
            return "autocomplete";
        }, AutoComplete.prototype.render = function() {
            _super.prototype.render.call(this);
        }, __decorate$54([ Complex({
            value: null,
            iconCss: null,
            groupBy: null
        }, FieldSettings$4) ], AutoComplete.prototype, "fields", void 0), __decorate$54([ Property(!0) ], AutoComplete.prototype, "ignoreCase", void 0), 
        __decorate$54([ Property(!1) ], AutoComplete.prototype, "showPopupButton", void 0), 
        __decorate$54([ Property(!1) ], AutoComplete.prototype, "highlight", void 0), __decorate$54([ Property(20) ], AutoComplete.prototype, "suggestionCount", void 0), 
        __decorate$54([ Property({}) ], AutoComplete.prototype, "htmlAttributes", void 0), 
        __decorate$54([ Property(null) ], AutoComplete.prototype, "query", void 0), __decorate$54([ Property(1) ], AutoComplete.prototype, "minLength", void 0), 
        __decorate$54([ Property("Contains") ], AutoComplete.prototype, "filterType", void 0), 
        __decorate$54([ Event() ], AutoComplete.prototype, "filtering", void 0), __decorate$54([ Property(null) ], AutoComplete.prototype, "index", void 0), 
        __decorate$54([ Property("Never") ], AutoComplete.prototype, "floatLabelType", void 0), 
        __decorate$54([ Property(null) ], AutoComplete.prototype, "valueTemplate", void 0), 
        __decorate$54([ Property(null) ], AutoComplete.prototype, "filterBarPlaceholder", void 0), 
        __decorate$54([ Property(!1) ], AutoComplete.prototype, "allowFiltering", void 0), 
        __decorate$54([ Property(null) ], AutoComplete.prototype, "text", void 0), AutoComplete = __decorate$54([ NotifyPropertyChanges ], AutoComplete);
    }(ComboBox$1), _autocomplete = Object.freeze({
        AutoComplete: AutoComplete$1
    }), _dropdownlist = Object.freeze({
        dropDownListClasses: dropDownListClasses$1,
        DropDownList: DropDownList$1
    });
    Grid.Inject(Filter, Page, Selection, Sort, Group, Reorder, RowDD, DetailRow, Toolbar$1, Aggregate, Search, VirtualScroll, Edit, Resize, ExcelExport, PdfExport, CommandColumn, ContextMenu$1, Freeze, ColumnMenu, ColumnChooser, ForeignKey);
    var grids = {};
    copy(grids, _grid);
    var navigations = {};
    copy(navigations, _contextmenu), copy(navigations, _toolbar);
    var calendars = {};
    copy(calendars, _datepicker);
    var dropdowns = {};
    copy(dropdowns, _autocomplete), copy(dropdowns, _dropdownlist);
    var base = _base, data = _data, inputs = _inputs, popups = _popups, buttons = _buttons, excelexport = _excelexport, pdfexport = _pdfexport, fileutils = _fileutils, compression = _compression, splitbuttons = _splitbuttons;
    return exports.grids = grids, exports.base = base, exports.data = data, exports.inputs = inputs, 
    exports.navigations = navigations, exports.calendars = calendars, exports.dropdowns = dropdowns, 
    exports.popups = popups, exports.buttons = buttons, exports.excelexport = excelexport, 
    exports.pdfexport = pdfexport, exports.fileutils = fileutils, exports.compression = compression, 
    exports.splitbuttons = splitbuttons, exports;
}({});

this.ejs = ej;
